/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ManagementPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian20 = require("obsidian");

// src/settingsTab.ts
var import_obsidian = require("obsidian");
var PluginMainSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Configuraci\xF3n del plugin de Gesti\xF3n Personal" });
    const tabContainer = containerEl.createDiv({ cls: "tab-container" });
    const tabContentContainer = containerEl.createDiv({ cls: "tab-content-container" });
    const tabTitles = ["Activar M\xF3dulos", "Directorios Subsistemas", "Pesta\xF1a 3"];
    tabTitles.forEach((title, index) => {
      const tabButton = document.createElement("button");
      tabButton.textContent = title;
      tabButton.classList.add("tab-link");
      tabButton.dataset.tab = `tab${index}`;
      tabButton.onclick = () => this.openTab(`tab${index}`);
      tabContainer.appendChild(tabButton);
      const tabContent = document.createElement("div");
      tabContent.id = `tab${index}`;
      tabContent.classList.add("tab-content");
      tabContentContainer.appendChild(tabContent);
      if (index > 0)
        tabContent.style.display = "none";
      if (index === 0) {
        new import_obsidian.Setting(tabContent).setName("Ver Alias en el Status Bar").setDesc("Elige si deseas ver el Aliases de las notas en el Status Bar.").addToggle((toggle) => toggle.setValue(this.plugin.settings.moduloAliasStatusBar).onChange(async (value) => {
          this.plugin.settings.moduloAliasStatusBar = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(tabContent).setName("Activar M\xF3dulo Registro Tiempo").setDesc("Activa o desactiva el m\xF3dulo de registro de tiempo.").addToggle((toggle) => toggle.setValue(this.plugin.settings.moduloRegistroTiempo).onChange(async (value) => {
          this.plugin.settings.moduloRegistroTiempo = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(tabContent).setName("Activar M\xF3dulo Base - Pruebas").setDesc("Activa o desactiva el m\xF3dulo de pruebas.").addToggle((toggle) => toggle.setValue(this.plugin.settings.moduloBase).onChange(async (value) => {
          this.plugin.settings.moduloBase = value;
          await this.plugin.saveSettings();
        }));
      }
      if (index === 1) {
        const toggleCollapse = (event) => {
          const nextElement = event.target.nextElementSibling;
          if (nextElement.style.display === "none") {
            nextElement.style.display = "block";
            event.target.innerHTML = "&#9660; " + event.target.getAttribute("data-title");
          } else {
            nextElement.style.display = "none";
            event.target.innerHTML = "&#9654; " + event.target.getAttribute("data-title");
          }
        };
        const anotacionesTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Anotaciones"' });
        anotacionesTitle.setAttribute("data-title", 'Subsistema de "Anotaciones"');
        anotacionesTitle.style.cursor = "pointer";
        const anotacionesContent = tabContent.createDiv();
        anotacionesContent.style.display = "none";
        anotacionesTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(anotacionesContent).setName("Carpeta de Anotaciones").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n todas las Anotaciones.").addText((text) => text.setValue(this.plugin.settings.folder_Anotaciones).onChange(async (value) => {
          this.plugin.settings.folder_Anotaciones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(anotacionesContent).setName("Indice de Anotaciones").setDesc("Establece la ruta del \xEDndice de las Anotaciones.").addText((text) => text.setValue(this.plugin.settings.indice_Anotaciones).onChange(async (value) => {
          this.plugin.settings.indice_Anotaciones = value;
          await this.plugin.saveSettings();
        }));
        const blogTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Art\xEDculos de Blog"' });
        blogTitle.setAttribute("data-title", 'Subsistema de "Art\xEDculos de Blog"');
        blogTitle.style.cursor = "pointer";
        const blogContent = tabContent.createDiv();
        blogContent.style.display = "none";
        blogTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(blogContent).setName("Carpeta de Art\xEDculos del Blog").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los art\xEDculos del blog.").addText((text) => text.setValue(this.plugin.settings.folder_ABlog).onChange(async (value) => {
          this.plugin.settings.folder_ABlog = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(blogContent).setName("Indice de Art\xEDculos del Blog").setDesc("Establece la ruta del \xEDndice de los art\xEDculos del blog.").addText((text) => text.setValue(this.plugin.settings.indice_ABlog).onChange(async (value) => {
          this.plugin.settings.indice_ABlog = value;
          await this.plugin.saveSettings();
        }));
        const desarrollosTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Desarrollos y c\xF3digos"' });
        desarrollosTitle.setAttribute("data-title", 'Subsistema de "Desarrollos y c\xF3digos"');
        desarrollosTitle.style.cursor = "pointer";
        const desarrollosContent = tabContent.createDiv();
        desarrollosContent.style.display = "none";
        desarrollosTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(desarrollosContent).setName("Carpeta de Desarrollos y C\xF3digos").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los desarrollos y c\xF3digos.").addText((text) => text.setValue(this.plugin.settings.folder_Desarrollos).onChange(async (value) => {
          this.plugin.settings.folder_Desarrollos = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(desarrollosContent).setName("\xCDndice de Desarrollos y C\xF3digos").setDesc("Establece la ruta del \xEDndice de los desarrollos y c\xF3digos.").addText((text) => text.setValue(this.plugin.settings.indice_Desarrollos).onChange(async (value) => {
          this.plugin.settings.indice_Desarrollos = value;
          await this.plugin.saveSettings();
        }));
        const estudioTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Estudio"' });
        estudioTitle.setAttribute("data-title", 'Subsistema de "Estudio"');
        estudioTitle.style.cursor = "pointer";
        const estudioContent = tabContent.createDiv();
        estudioContent.style.display = "none";
        estudioTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(estudioContent).setName("Carpeta de Temas de Estudio").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los temas de estudio.").addText((text) => text.setValue(this.plugin.settings.folder_Estudio).onChange(async (value) => {
          this.plugin.settings.folder_Estudio = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(estudioContent).setName("\xCDndice de Estudio").setDesc("Establece la ruta del \xEDndice de los temas de estudio.").addText((text) => text.setValue(this.plugin.settings.indice_Estudio).onChange(async (value) => {
          this.plugin.settings.indice_Estudio = value;
          await this.plugin.saveSettings();
        }));
        const gtdTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "GTD"' });
        gtdTitle.setAttribute("data-title", 'Subsistema de "GTD"');
        gtdTitle.style.cursor = "pointer";
        const gtdContent = tabContent.createDiv();
        gtdContent.style.display = "none";
        gtdTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(gtdContent).setName("Carpeta de Proyectos GTD").setDesc("Establece la ruta de la carpeta para proyectos GTD.").addText((text) => text.setValue(this.plugin.settings.folder_ProyectosGTD).onChange(async (value) => {
          this.plugin.settings.folder_ProyectosGTD = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(gtdContent).setName("\xCDndice de Proyectos GTD").setDesc("Establece la ruta del \xEDndice para proyectos GTD.").addText((text) => text.setValue(this.plugin.settings.indice_ProyectosGTD).onChange(async (value) => {
          this.plugin.settings.indice_ProyectosGTD = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(gtdContent).setName("Carpeta de Revisiones Semanales GTD").setDesc("Establece la ruta de la carpeta para las revisiones semanales GTD.").addText((text) => text.setValue(this.plugin.settings.folder_RSGTD).onChange(async (value) => {
          this.plugin.settings.folder_RSGTD = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(gtdContent).setName("\xCDndice de Revisiones Semanales GTD").setDesc("Establece la ruta del \xEDndice para las revisiones semanales GTD.").addText((text) => text.setValue(this.plugin.settings.indice_RSGTD).onChange(async (value) => {
          this.plugin.settings.indice_RSGTD = value;
          await this.plugin.saveSettings();
        }));
        const lecturaTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Lectura"' });
        lecturaTitle.setAttribute("data-title", 'Subsistema de "Lectura"');
        lecturaTitle.style.cursor = "pointer";
        const lecturaContent = tabContent.createDiv();
        lecturaContent.style.display = "none";
        lecturaTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(lecturaContent).setName("Carpeta de Sesiones de Lectura").setDesc("Establece la ruta de la carpeta para las sesiones de lectura.").addText((text) => text.setValue(this.plugin.settings.folder_LecturaSesiones).onChange(async (value) => {
          this.plugin.settings.folder_LecturaSesiones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(lecturaContent).setName("\xCDndice de Sesiones de Lectura").setDesc("Establece la ruta del \xEDndice para las sesiones de lectura.").addText((text) => text.setValue(this.plugin.settings.indice_LecturaSesiones).onChange(async (value) => {
          this.plugin.settings.indice_LecturaSesiones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(lecturaContent).setName("Carpeta de Res\xFAmenes de Libros").setDesc("Establece la ruta de la carpeta para los res\xFAmenes de libros.").addText((text) => text.setValue(this.plugin.settings.folder_LecturaResumenes).onChange(async (value) => {
          this.plugin.settings.folder_LecturaResumenes = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(lecturaContent).setName("\xCDndice de Res\xFAmenes de Libros").setDesc("Establece la ruta del \xEDndice para los res\xFAmenes de libros.").addText((text) => text.setValue(this.plugin.settings.indice_LecturaResumenes).onChange(async (value) => {
          this.plugin.settings.indice_LecturaResumenes = value;
          await this.plugin.saveSettings();
        }));
        const mentoriasTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Mentor\xEDas"' });
        mentoriasTitle.setAttribute("data-title", 'Subsistema de "Mentor\xEDas"');
        mentoriasTitle.style.cursor = "pointer";
        const mentoriasContent = tabContent.createDiv();
        mentoriasContent.style.display = "none";
        mentoriasTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(mentoriasContent).setName("Carpeta de Sesiones de Mentor\xEDa").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las sesiones de mentor\xEDa.").addText((text) => text.setValue(this.plugin.settings.folder_Mentorias).onChange(async (value) => {
          this.plugin.settings.folder_Mentorias = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(mentoriasContent).setName("\xCDndice de Mentor\xEDas").setDesc("Establece la ruta del \xEDndice de las sesiones de mentor\xEDa.").addText((text) => text.setValue(this.plugin.settings.indice_Mentorias).onChange(async (value) => {
          this.plugin.settings.indice_Mentorias = value;
          await this.plugin.saveSettings();
        }));
        const mercadoTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Mercado"' });
        mercadoTitle.setAttribute("data-title", 'Subsistema de "Mercado"');
        mercadoTitle.style.cursor = "pointer";
        const mercadoContent = tabContent.createDiv();
        mercadoContent.style.display = "none";
        mercadoTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(mercadoContent).setName("Carpeta de Listados de Mercado").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las listas de mercado.").addText((text) => text.setValue(this.plugin.settings.folder_Mercado).onChange(async (value) => {
          this.plugin.settings.folder_Mercado = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(mercadoContent).setName("\xCDndice de listados de mercado").setDesc("Establece la ruta del \xEDndice de los listados de mercado.").addText((text) => text.setValue(this.plugin.settings.indice_Mercado).onChange(async (value) => {
          this.plugin.settings.indice_Mercado = value;
          await this.plugin.saveSettings();
        }));
        const modulosTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "M\xF3dulos Sistema Gesti\xF3n"' });
        modulosTitle.setAttribute("data-title", 'Subsistema de "M\xF3dulos Sistema Gesti\xF3n"');
        modulosTitle.style.cursor = "pointer";
        const modulosContent = tabContent.createDiv();
        modulosContent.style.display = "none";
        modulosTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(modulosContent).setName("Carpeta de Modulos del Sistema de Gestion").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los m\xF3dulos del Sistema de Gesti\xF3n.").addText((text) => text.setValue(this.plugin.settings.folder_ModulosSistema).onChange(async (value) => {
          this.plugin.settings.folder_ModulosSistema = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(modulosContent).setName("\xCDndice de los Modulos del sistema de Gestion").setDesc("Establece la ruta del \xEDndice de los M\xF3dulos del sistema de Gesti\xF3n.").addText((text) => text.setValue(this.plugin.settings.indice_ModulosSistema).onChange(async (value) => {
          this.plugin.settings.indice_ModulosSistema = value;
          await this.plugin.saveSettings();
        }));
        const pagosTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Pagos"' });
        pagosTitle.setAttribute("data-title", 'Subsistema de "Pagos"');
        pagosTitle.style.cursor = "pointer";
        const pagosContent = tabContent.createDiv();
        pagosContent.style.display = "none";
        pagosTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(pagosContent).setName("Carpeta de Modulos del Sistema de Pagos").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los comprobantes de pagos.").addText((text) => text.setValue(this.plugin.settings.folder_Pagos).onChange(async (value) => {
          this.plugin.settings.folder_Pagos = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(pagosContent).setName("\xCDndice de Pagos").setDesc("Establece la ruta del \xEDndice de Pagos.").addText((text) => text.setValue(this.plugin.settings.indice_Pagos).onChange(async (value) => {
          this.plugin.settings.indice_Pagos = value;
          await this.plugin.saveSettings();
        }));
        const presentacionesTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Presentaciones"' });
        presentacionesTitle.setAttribute("data-title", 'Subsistema de "Presentaciones"');
        presentacionesTitle.style.cursor = "pointer";
        const presentacionesContent = tabContent.createDiv();
        presentacionesContent.style.display = "none";
        presentacionesTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(presentacionesContent).setName("Carpeta de Notas de Presentaciones").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las notas de presentaciones.").addText((text) => text.setValue(this.plugin.settings.folder_Presentaciones).onChange(async (value) => {
          this.plugin.settings.folder_Presentaciones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(presentacionesContent).setName("\xCDndice de Presentaciones").setDesc("Establece la ruta del \xEDndice de presentaciones.").addText((text) => text.setValue(this.plugin.settings.indice_Presentaciones).onChange(async (value) => {
          this.plugin.settings.indice_Presentaciones = value;
          await this.plugin.saveSettings();
        }));
        const proyectosQTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Proyectos de Q"' });
        proyectosQTitle.setAttribute("data-title", 'Subsistema de "Proyectos de Q"');
        proyectosQTitle.style.cursor = "pointer";
        const proyectosQContent = tabContent.createDiv();
        proyectosQContent.style.display = "none";
        proyectosQTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(proyectosQContent).setName("Carpeta de Proyectos de Q").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los proyectos de Q.").addText((text) => text.setValue(this.plugin.settings.folder_ProyectosQ).onChange(async (value) => {
          this.plugin.settings.folder_ProyectosQ = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(proyectosQContent).setName("\xCDndice de Proyectos de Q").setDesc("Establece la ruta del \xEDndice de proyectos de Q.").addText((text) => text.setValue(this.plugin.settings.indice_ProyectosQ).onChange(async (value) => {
          this.plugin.settings.indice_ProyectosQ = value;
          await this.plugin.saveSettings();
        }));
        const publicacionesTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Publicaciones"' });
        publicacionesTitle.setAttribute("data-title", 'Subsistema de "Publicaciones"');
        publicacionesTitle.style.cursor = "pointer";
        const publicacionesContent = tabContent.createDiv();
        publicacionesContent.style.display = "none";
        publicacionesTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(publicacionesContent).setName("Carpeta de Piezas de Publicaciones").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las piezas de publicaciones.").addText((text) => text.setValue(this.plugin.settings.folder_Publicaciones).onChange(async (value) => {
          this.plugin.settings.folder_Publicaciones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(publicacionesContent).setName("\xCDndice de Publicaciones").setDesc("Establece la ruta del \xEDndice de publicaciones.").addText((text) => text.setValue(this.plugin.settings.indice_Publicaciones).onChange(async (value) => {
          this.plugin.settings.indice_Publicaciones = value;
          await this.plugin.saveSettings();
        }));
        const recetasTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Recetas"' });
        recetasTitle.setAttribute("data-title", 'Subsistema de "Recetas"');
        recetasTitle.style.cursor = "pointer";
        const recetasContent = tabContent.createDiv();
        recetasContent.style.display = "none";
        recetasTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(recetasContent).setName("Carpeta de Recetas").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las recetas.").addText((text) => text.setValue(this.plugin.settings.folder_Recetas).onChange(async (value) => {
          this.plugin.settings.folder_Recetas = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(recetasContent).setName("\xCDndice de Recetas").setDesc("Establece la ruta del \xEDndice de recetas.").addText((text) => text.setValue(this.plugin.settings.indice_Recetas).onChange(async (value) => {
          this.plugin.settings.indice_Recetas = value;
          await this.plugin.saveSettings();
        }));
        const recursosRecurrentesTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Recursos Recurrentes"' });
        recursosRecurrentesTitle.setAttribute("data-title", 'Subsistema de "Recursos Recurrentes"');
        recursosRecurrentesTitle.style.cursor = "pointer";
        const recursosRecurrentesContent = tabContent.createDiv();
        recursosRecurrentesContent.style.display = "none";
        recursosRecurrentesTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(recursosRecurrentesContent).setName("Carpeta de Recursos Recurrentes").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los recursos recurrentes.").addText((text) => text.setValue(this.plugin.settings.folder_RecursosRecurrentes).onChange(async (value) => {
          this.plugin.settings.folder_RecursosRecurrentes = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(recursosRecurrentesContent).setName("\xCDndice de Recursos Recurrentes").setDesc("Establece la ruta del \xEDndice de recursos recurrentes.").addText((text) => text.setValue(this.plugin.settings.indice_RecursosRecurrentes).onChange(async (value) => {
          this.plugin.settings.indice_RecursosRecurrentes = value;
          await this.plugin.saveSettings();
        }));
        const registroTiempoTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Registro Tiempo"' });
        registroTiempoTitle.setAttribute("data-title", 'Subsistema de "Registro Tiempo"');
        registroTiempoTitle.style.cursor = "pointer";
        const registroTiempoContent = tabContent.createDiv();
        registroTiempoContent.style.display = "none";
        registroTiempoTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(registroTiempoContent).setName("Carpeta de Registros de Tiempo").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los registros de tiempo.").addText((text) => text.setValue(this.plugin.settings.folder_RegistroTiempo).onChange(async (value) => {
          this.plugin.settings.folder_RegistroTiempo = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(registroTiempoContent).setName("\xCDndice de Registro de Tiempo").setDesc("Establece la ruta del \xEDndice de registros de tiempo.").addText((text) => text.setValue(this.plugin.settings.indice_RegistroTiempo).onChange(async (value) => {
          this.plugin.settings.indice_RegistroTiempo = value;
          await this.plugin.saveSettings();
        }));
      }
      if (index === 2) {
        const dateLabel = tabContent.createEl("label");
        dateLabel.textContent = "Fecha";
        const dateInput = tabContent.createEl("input");
        dateInput.type = "datetime-local";
      }
    });
    containerEl.createEl("style", {
      text: `
                .tab-content { display: none; padding-top: 20px; } // A\xF1adido padding-top para el espacio
                .tab-content.active { display: block; }
                .tab-link { cursor: pointer; padding: 5px 10px; margin-right: 5px; background: #f0f0f0; border: 1px solid #ddd; border-radius: 5px; }
                .tab-link.active { background: #e0e0e0; }
                .setting-item { margin-bottom: 10px; }
            `
    });
    this.openTab = (tabName) => {
      document.querySelectorAll(".tab-content").forEach((content) => {
        content.style.display = "none";
        content.classList.remove("active");
      });
      document.querySelectorAll(".tab-link").forEach((link) => {
        link.classList.remove("active");
      });
      const activeTabContent = document.getElementById(tabName);
      const activeTabLink = document.querySelector(`[data-tab="${tabName}"]`);
      if (activeTabContent)
        activeTabContent.style.display = "block";
      if (activeTabLink)
        activeTabLink.classList.add("active");
    };
    this.openTab("tab0");
  }
};

// src/modules/moduloBase/index.ts
var import_obsidian5 = require("obsidian");

// src/modules/moduloBase/utils/crearCarpeta.ts
async function crearCarpeta(rutaCarpeta) {
  try {
    debugger;
    const carpetaExistente = app.vault.getAbstractFileByPath(rutaCarpeta);
    if (carpetaExistente) {
      console.log(`La carpeta '${rutaCarpeta}' ya existe.`);
      return;
    }
    debugger;
    await app.vault.createFolder(rutaCarpeta);
    console.log(`Carpeta '${rutaCarpeta}' creada exitosamente.`);
  } catch (error) {
    console.error(`Error al crear la carpeta '${rutaCarpeta}':`, error);
  }
}

// src/plantillas/Anotaciones/Plt - Anotaciones.ts
var plantilla = `<%*
debugger
const dv = this.DataviewAPI;
const {update} = this.app.plugins.plugins["metaedit"].api
const fileCampos =dv.page("Estructura/Campos Sistema Gestion/Campos Sistema Central")
let clasificacionAX = fileCampos.tituloClasificacionAX
let tagsClasificacionAX = fileCampos.tagsClasificacionAX
let activo = app.workspace.getActiveFile();
let idAux = dv.pages('"Anotaciones/Notas"').file.frontmatter.sort(b=> b.id , 'desc').id;

// Comprueba si idAux tiene al menos un elemento y asigna a 'id' el siguiente valor en la secuencia o 1 si no hay elementos.
let id = idAux.length > 0 ? (idAux[0] + 1) : 1;

let newName, titulo, existe, asunto, nombre
	titulo = await tp.system.prompt("\xBFSobre que es esta anotaci\xF3n?", "A-"+ id, true)
	// Verificar si el usuario presion\xF3 Esc.
    if (titulo === null) {
    new Notice("Creaci\xF3n de nota cancelada por el usuario.");
    return; // Termina la ejecuci\xF3n de la funci\xF3n aqu\xED.
	}
	if (activo != null){ 
		nombre = activo.basename;
		const nota = app.metadataCache.getFileCache(activo); 
		asunto = await tp.system.suggester(["Si","No"],[true, false], true, nombre + " es origen de " + titulo + "?")
		}
	newName = "Anotaciones/Notas/A - " + id  
await tp.file.move(newName);
let clasificacion, descripcion, estado
let tagClasificacion = await tp.system.suggester(clasificacionAX, tagsClasificacionAX, false, "\xBFClasificar\xEDas esta nota bajo alguna de las siguientes categor\xEDas?")
	// Verificar si el usuario presion\xF3 Esc.
    if (tagClasificacion === null) {
    new Notice("Creaci\xF3n de nota cancelada por el usuario.");
    return; // Termina la ejecuci\xF3n de la funci\xF3n aqu\xED.
	}
let nuevaClasificacion = false
if(tagClasificacion=="Nuevo"){
	clasificacion = await tp.system.prompt("\xBFCual es el nombre de la nueva clasificaci\xF3n que vas a ingresar?", "MiClasificaci\xF3n", true)
	// Verificar si el usuario presion\xF3 Esc.
    if (clasificacion === null) {
    new Notice("Creaci\xF3n de nota cancelada por el usuario.");
    return; // Termina la ejecuci\xF3n de la funci\xF3n aqu\xED.
	}
	tagClasificacion = await tp.system.prompt("\xBFCual es el tag que utilizaras para " + clasificacion + "?. No utilices espacios en la definici\xF3n del tag.", "nuevoTag", true)
	// Verificar si el usuario presion\xF3 Esc.
    if (tagClasificacion === null) {
    new Notice("Creaci\xF3n de nota cancelada por el usuario.");
    return; // Termina la ejecuci\xF3n de la funci\xF3n aqu\xED.
	}
	nuevaClasificacion = true
// --> Validar que el nombre del grupo no sea igual al nombre de ninguna area de Vida.
}else if(tagClasificacion=="Ninguna"){
	tagClasificacion = ""
	clasificacion = ""	
}else {
	let indice = tagsClasificacionAX.indexOf(tagClasificacion)
	clasificacion = clasificacionAX[indice]
}
if (nuevaClasificacion) {
    let nuevoC = clasificacionAX.pop(); // \xDAltima clasificaci\xF3n
    let ningunoC = clasificacionAX.pop(); // Pen\xFAltima clasificaci\xF3n

    clasificacionAX.push(clasificacion);
    clasificacionAX.push(ningunoC);
    clasificacionAX.push(nuevoC);

    await update("tituloClasificacionAX", clasificacionAX, fileCampos.file.path);
	await new Promise(resolve => setTimeout(resolve, 1000));

    let nuevoTagC = tagsClasificacionAX.pop(); // \xDAltimo tag
    let ningunoTagC = tagsClasificacionAX.pop(); // Pen\xFAltimo tag

    tagsClasificacionAX.push(tagClasificacion);
    tagsClasificacionAX.push(ningunoTagC);
    tagsClasificacionAX.push(nuevoTagC);

    await update("tagsClasificacionAX", tagsClasificacionAX, fileCampos.file.path);
}


if (tagClasificacion != ""){
tagClasificacion = "cl/" + tagClasificacion 
}
if (clasificacion == "Feedback Semanal"){
	descripcion = []
	let aux = 0
	let otra
	do{
		descripcion[aux] = await tp.system.prompt("Escribe tu feedback de "+ titulo, "P" + aux, false, true)
		aux += 1
		otra = await tp.system.suggester(["Si","No"],[true,false], true, "\xBFAgregar otro parrafo?" )
	}while(otra)
}else{
	descripcion = await tp.system.prompt("\xBFQuieres agregar una descripci\xF3n?", " " + titulo, false, true )
	// Verificar si el usuario presion\xF3 Esc.
    if (descripcion === null) {
    new Notice("Creaci\xF3n de nota cancelada por el usuario.");
    return; // Termina la ejecuci\xF3n de la funci\xF3n aqu\xED.
	}
}
estado = await tp.system.suggester(["\u{1F535} -> Completado - Informaci\xF3n", "\u{1F7E2} -> Finalizado","\u{1F7E1} -> En ejecuci\xF3n", "\u{1F534} -> Detenido"],["\u{1F535}", "\u{1F7E2}","\u{1F7E1}", "\u{1F534}"], false, "Cual es el estado de esta anotaci\xF3n?")
// Verificar si el usuario presion\xF3 Esc.
    if (estado === null) {
    new Notice("Creaci\xF3n de nota cancelada por el usuario.");
    return; // Termina la ejecuci\xF3n de la funci\xF3n aqu\xED.
	}
-%>
---
tipo: Anotaci\xF3n
idq: 6
id: <% id %> 
idManual:
aliases: 
- <%titulo%>
descripcion: <%*if (clasificacion != "Feedback Semanal"){%> <%descripcion%><%* }else{%>>-  <%* for (let a=0; a<descripcion.length;a++){%>
   <%descripcion[a]%> 
<%*}}%>
tema: <%clasificacion%> 
estado: <% estado %> 
fecha: <% tp.date.now("YYYY-MM-DD dddd HH:mm") %>
hora: <% tp.date.now("HHmm", 0,)%>
valor:  
tags: <%tagClasificacion%> 
asunto: <%* if(asunto){ %> 
- "[[<%nombre%>]]" <%*}%>
related:
---
# \`VIEW[{aliases}]\` 
>[!info]- Descripcion
>\`VIEW[{descripcion}]\`
> 

Plantilla oculta
<%* if(clasificacion=="Meditaciones de alteraci\xF3n de futuro"){ -%>
## Objetivo 

## Evento imaginario que seguir\xEDa al cumplimiento del deseo

### Que es lo que siento?

### Detalles para la visualizaci\xF3n.
## Premisas que alimenten el deseo cumplido
_Frases que apoyan mi objetivo_
## Tareas de seguimiento de la meditaci\xF3n
- [ ] Total de meditaciones de <% titulo %> 
	- [ ] Meditaci\xF3n de <% titulo %> #cx/Meditacion \u{1F501} every day when done \u{1F4C5} <% tp.date.now("YYYY-MM-DD") %>
<%*}else if(clasificacion =="Feedback Semanal"){-%>
## Feedback
\`\`\`dataviewjs
dv.paragraph(dv.current().descripcion)
\`\`\`
<%*}else if(clasificacion =="Video Youtube"){-%>
## Video

> [!tip]- Como crear el link del video?
>Estamos utilizando el plugin TimeStamp Notes. Para crear el link aqu\xED, solamente debes pegar el link de youtube, seleccionarlo y utilizar el comando Open Video Player, o el shortcut  \u2325 ^ O
### Timestamps
> [!important]- Crear los timestamps del video
> Para crear los timestamps del video, en el momento en el que llegues al video, solo debes pulsar el shortcut \u2325 ^ 0, o buscar el comando Insert Timestamp. 
 

## Comentarios Personales

## Hitos del video.

## Resumen IA

<%*}else if(clasificacion =="Grupo de Hojas de Trabajo"){-%>

## [[Comentarios a las plantillas#Temas relacionados a este grupo de hojas de trabajo|Temas relacionados a este grupo de hojas de trabajo:]]
\`\`\`dataviewjs
const {crearAx} = customJS
let hijos = dv.pages().filter(b=> dv.func.contains(b.asunto, dv.current().file.link))
let totalHijos = 
dv.table(["Tema","Tipo","Fecha Modificaci\xF3n", "Pendientes","Hijos"], hijos.map(b=> [b.file.link, b.tema, b.fecha, b.file.tasks.filter(b=> b.status == ' ' || b.status == '/').length, crearAx.paginasHijos(dv,b).length-1]))
\`\`\`


<%*}%>


# Fin
- [/] Finalizado el desarrollo de Anotaci\xF3n <%id%> #cx/Computador/OrganizarNotas  
Estado de la nota:  \`INPUT[estadoNota][:estado]\`
\`\`\`dataviewjs
const {callDV} = customJS
callDV.CambiarTituloDescripcion(dv)
\`\`\`
---
\`\`\`dataviewjs
const {callDV} = customJS
callDV.CarruselAnotaciones(dv)
\`\`\`
\`\`\`dataviewjs
const {callDV} = customJS
callDV.BotonesStandar(dv)
\`\`\`

`;

// src/modules/moduloBase/utils/crearPlantilla.ts
var import_obsidian2 = require("obsidian");
async function crearPlantilla(contenido) {
  const folder = "Plantillas";
  let filename = "Archivo De Plantilla";
  let pathTemporal = folder + "/" + filename + ".md";
  const archivoCreado = await app.vault.create(pathTemporal, contenido);
  return archivoCreado;
}

// src/modules/moduloBase/commands.ts
var import_obsidian4 = require("obsidian");

// src/modules/moduloBase/utils/createNoteFromTemplate.ts
var import_obsidian3 = require("obsidian");
async function createNoteFromTemplate(plugin, template, folder, filename, openNewNote = true) {
  if (!plugin || !plugin.app.plugins.enabledPlugins.has("templater-obsidian")) {
    console.error("El plugin Templater no est\xE1 habilitado.");
    return;
  }
  const templaterPlugin = plugin.app.plugins.plugins["templater-obsidian"];
  const tp = templaterPlugin.templater.current_functions_object;
  if (!tp) {
    console.error("No se pudo acceder al objeto de funciones actuales de Templater.");
    return;
  }
  debugger;
  let templateFile = tp.file.find_tfile(template);
  try {
    const newNote = await tp.file.create_new(templateFile, filename, openNewNote, folder);
    return newNote;
  } catch (error) {
    console.error("Error al crear la nota desde la plantilla:", error);
    return;
  }
}

// src/modules/moduloBase/commands.ts
function registerCommands(plugin) {
  const comando1 = plugin.addCommand({
    id: "Creacion-Carpeta",
    name: "Creaci\xF3n de Carpeta",
    callback: async () => {
      debugger;
      await crearCarpeta("Mi Carpeta de plugin");
    }
  });
  plugin.registeredCommandIdsMB.push(comando1.id);
  const comando2 = plugin.addCommand({
    id: "crear-template",
    name: "Crear un archivo template",
    callback: async () => {
      const archivo = await crearPlantilla(plantilla);
      if (!archivo) {
        new Notice("No se pudo crear el archivo.");
        return;
      }
    }
  });
  plugin.registeredCommandIdsMB.push(comando2.id);
  const comando3 = plugin.addCommand({
    id: "crear-archivo-template",
    name: "Crear archivo desde template",
    callback: async () => {
      const pluginId = "templater-obsidian";
      const isPluginInstalled = plugin.app.plugins.enabledPlugins.has(pluginId);
      let template = "Plantillas/Anotaciones/Plt - Anotaciones.md";
      let folderObj = plugin.app.vault.getAbstractFileByPath("Inbox");
      if (!(folderObj instanceof import_obsidian4.TFolder)) {
        new Notice("La carpeta especificada no existe o no es una carpeta.");
        return;
      }
      let fileName = "toDefine";
      let openNote = true;
      debugger;
      const archivo = await createNoteFromTemplate(plugin, template, folderObj, fileName, openNote);
      if (!archivo) {
        new Notice("No se pudo crear el archivo.");
        return;
      }
    }
  });
  plugin.registeredCommandIdsMB.push(comando3.id);
}
function deactivateCommands(plugin) {
  if (!plugin.registeredCommandIdsMB)
    return;
  plugin.registeredCommandIdsMB.forEach((commandId) => {
    const command = plugin.app.commands.commands[commandId];
    if (command) {
      command.callback = () => new Notice("Este comando ha sido desactivado.");
    }
  });
}

// src/modules/moduloBase/index.ts
var ModuloBase = class {
  constructor(plugin) {
    this.moduloBase = null;
    this.plugin = plugin;
  }
  activate() {
    if (this.moduloBase)
      return;
    registerCommands(this.plugin);
  }
  deactivate() {
    if (!this.statusBar)
      return;
    deactivateCommands(this.plugin);
  }
};

// src/modules/M_busquedaAvanzada/activadores.ts
var import_obsidian9 = require("obsidian");

// src/modules/M_busquedaAvanzada/ui/ribbonButton.ts
var import_obsidian8 = require("obsidian");

// src/modules/M_busquedaAvanzada/ui/modal.ts
var import_obsidian7 = require("obsidian");

// src/modules/M_busquedaAvanzada/search/FuzzyNoteSuggester.ts
var import_obsidian6 = require("obsidian");

// src/modules/moduloAliasStatusBar/statusBar.ts
var import_obsidian10 = require("obsidian");
var StatusBarExtension = class {
  constructor(plugin) {
    this.statusBar = null;
    this.plugin = plugin;
  }
  activate() {
    if (this.statusBar)
      return;
    this.statusBar = this.plugin.addStatusBarItem();
    this.updateStatusBar();
    this.plugin.registerEvent(
      this.plugin.app.workspace.on("file-open", (file) => {
        this.updateStatusBar(file);
      })
    );
  }
  deactivate() {
    if (!this.statusBar)
      return;
    this.statusBar.remove();
    this.statusBar = null;
  }
  updateStatusBar(file) {
    var _a, _b;
    const currentFile = file || this.plugin.app.workspace.getActiveFile();
    if (!currentFile || !this.statusBar) {
      (_a = this.statusBar) == null ? void 0 : _a.setText("");
      return;
    }
    const fileCache = this.plugin.app.metadataCache.getFileCache(currentFile);
    const aliases = ((_b = fileCache.frontmatter) == null ? void 0 : _b.aliases) || [];
    this.statusBar.setText(aliases.length > 0 ? `Alias: ${aliases[0]}` : "No Alias");
  }
};

// src/modules/moduloRegistroTiempo/index.ts
var import_obsidian16 = require("obsidian");

// src/modules/moduloRegistroTiempo/ribbonMenu.ts
var import_obsidian13 = require("obsidian");

// src/modules/moduloRegistroTiempo/utils.ts
var import_obsidian12 = require("obsidian");

// src/modules/modales/seleccionModal.ts
var import_obsidian11 = require("obsidian");
var SeleccionModal = class extends import_obsidian11.FuzzySuggestModal {
  // Flag para determinar si se ha hecho una selección.
  // Constructor de la clase.
  constructor(app2, titles, values, placeholder) {
    super(app2);
    // Objeto para mapear títulos a valores.
    this.seleccionHecha = false;
    this.titles = titles;
    this.values = values;
    this.valueMap = titles.reduce((acc, title, index) => {
      acc[title] = values[index];
      return acc;
    }, {});
    this.setPlaceholder(placeholder);
  }
  // Método para obtener los ítems (títulos) que se mostrarán en el modal.
  getItems() {
    return this.titles;
  }
  // Método para obtener el texto que se mostrará para cada ítem en el modal.
  getItemText(item) {
    return item;
  }
  // Método que se llama al cerrar el modal.
  onClose() {
    if (!this.seleccionHecha) {
      this.reject(new Error("Modal cerrado sin selecci\xF3n"));
    }
  }
  // Método para manejar la selección de un ítem.
  selectSuggestion(item, evt) {
    this.seleccionHecha = true;
    super.selectSuggestion(item, evt);
  }
  // Método que se llama al elegir un ítem, donde se resuelve la promesa con el valor asociado al ítem seleccionado.
  onChooseItem(item, evt) {
    const value = this.valueMap[item];
    this.resolve(value);
  }
  // Método para abrir el modal y esperar a que el usuario haga una selección, devolviendo una promesa con el valor seleccionado.
  openAndAwaitSelection() {
    return new Promise((resolve, reject) => {
      this.resolve = resolve;
      this.reject = reject;
      this.open();
    });
  }
};

// src/modules/moduloRegistroTiempo/utils.ts
async function cumpleCondicion(app2) {
  var _a;
  const files = app2.vault.getMarkdownFiles();
  for (let file of files) {
    if (file.path.startsWith("Estructura/Registro Tiempo")) {
      const metadata = app2.metadataCache.getFileCache(file);
      if (((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.estado) === "\u{1F7E2}") {
        return true;
      }
    }
  }
  return false;
}
async function buscarRegistrosActivos(app2) {
  var _a;
  const files = app2.vault.getMarkdownFiles();
  for (let file of files) {
    if (file.path.startsWith("Subsistemas/Registro Tiempo/Registros")) {
      const metadata = app2.metadataCache.getFileCache(file);
      if (((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.estado) === "\u{1F7E2}") {
        return file;
      }
    }
  }
  return;
}
async function crearObjetoRegistro(plugin) {
  const activo = plugin.app.workspace.getActiveFile();
  if (!activo) {
    console.error("No hay un archivo activo para la creaci\xF3n de registro de tiempo. Se descarta para la creaci\xF3n de registro de tiempo.");
    return null;
  }
  const folder = plugin.settings.folder_RegistroTiempo;
  const indice = plugin.settings.indice_RegistroTiempo;
  let maxId = 0;
  const files = app.vault.getMarkdownFiles();
  const registrosExistentes = files.filter((file) => file.path.startsWith(folder));
  registrosExistentes.forEach((file) => {
    var _a;
    const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    if (metadata && metadata.id && !isNaN(metadata.id)) {
      const id = parseInt(metadata.id);
      if (id > maxId)
        maxId = id;
    }
  });
  const nextId = maxId + 1;
  const fechaCompleta = formatearFecha(/* @__PURE__ */ new Date());
  return {
    activo,
    nombre: activo.basename,
    folder,
    indice,
    id: nextId,
    fecha: fechaCompleta,
    indice_DVJS: `"${indice}"`
  };
}
function formatearFecha(fecha) {
  const offset = fecha.getTimezoneOffset() * 6e4;
  const fechaLocal = new Date(fecha.getTime() - offset);
  const fechaFormato = fechaLocal.toISOString().split("T")[0];
  const dias = ["Domingo", "Lunes", "Martes", "Mi\xE9rcoles", "Jueves", "Viernes", "S\xE1bado"];
  const diaSemana = dias[fecha.getDay()];
  const horaFormato = fecha.toTimeString().split(" ")[0].substring(0, 5);
  return `${fechaFormato} ${diaSemana} ${horaFormato}`;
}
async function verificarTareasActivas(registro, app2) {
  var _a;
  const files = app2.vault.getMarkdownFiles();
  const tareasActivas = [];
  for (let file of files) {
    if (file.path.startsWith(registro.folder)) {
      const metadata = (_a = app2.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if ((metadata == null ? void 0 : metadata.estado) === "\u{1F7E2}") {
        tareasActivas.push({ file, aliases: metadata.aliases || file.basename });
      }
    }
  }
  if (tareasActivas.length === 1) {
    const tareaActiva = tareasActivas[0];
    debugger;
    const deseaDetener = await mostrarSugerencia(`La tarea ${tareaActiva.aliases} est\xE1 corriendo. \xBFDesea detenerla?`);
    if (deseaDetener === void 0) {
      new import_obsidian12.Notice(`Creaci\xF3n de registro cancelado por el usuario.`);
      registro.detener = true;
      return;
    }
    if (deseaDetener) {
      await detenerTarea(tareaActiva, app2);
      registro.detener = false;
    } else {
      new import_obsidian12.Notice(`La tarea ${tareaActiva.aliases} seguir\xE1 registr\xE1ndose.`);
      registro.detener = true;
      return;
    }
  } else if (tareasActivas.length > 1) {
    new import_obsidian12.Notice("Hay un error con la cantidad de tareas corriendo en este momento.");
    registro.detener = true;
  } else {
    console.log("No hay m\xE1s tareas corriendo.");
    registro.detener = false;
  }
}
function mostrarSugerencia(mensaje) {
  return new Promise((resolve) => {
    let seleccionado = false;
    const modal = new import_obsidian12.Modal(app);
    modal.contentEl.createEl("h1", { text: mensaje });
    const buttonsContainer = modal.contentEl.createEl("div");
    const yesButton = buttonsContainer.createEl("button", {
      text: "S\xED"
    });
    yesButton.addEventListener("click", () => {
      seleccionado = true;
      modal.close();
      resolve(true);
    });
    const noButton = buttonsContainer.createEl("button", {
      text: "No"
    });
    noButton.addEventListener("click", () => {
      seleccionado = true;
      modal.close();
      resolve(false);
    });
    modal.onClose = () => {
      if (!seleccionado) {
        resolve(void 0);
      }
    };
    modal.open();
  });
}
async function definirTipoRegistro(registro, app2) {
  const totTareas = await encontrarTareasPendientes(app2);
  let opcionesTitulo, valoresOpcion;
  if (totTareas.length > 0) {
    opcionesTitulo = [registro.nombre, "Alguna tarea en Ejecuci\xF3n", "Otro"];
    valoresOpcion = ["Nota", "Tarea", "Otro"];
  } else {
    opcionesTitulo = [registro.nombre, "Otro"];
    valoresOpcion = ["Nota", "Otro"];
  }
  const placeholder = "\xBFSobre qu\xE9 es el registro de tiempo?";
  const modalMenu1 = new SeleccionModal(app2, opcionesTitulo, valoresOpcion, placeholder);
  try {
    const selection = await modalMenu1.openAndAwaitSelection();
    registro.tipoRegistro = selection;
    switch (registro.tipoRegistro) {
      case "Nota":
        registro.titulo = registro.nombre;
        registro.siAsunto = true;
        break;
      case "Tarea":
        await elegirTareaParaRegistro(app2, registro, totTareas);
        break;
      default:
        registro.siAsunto = registro.tituloDefinido !== "Otro";
        break;
    }
  } catch (error) {
    console.error("Error o modal cerrado sin selecci\xF3n:", error);
  }
}
async function encontrarTareasPendientes(app2) {
  let tareasPendientes = [];
  const archivos = app2.vault.getMarkdownFiles();
  const archivosRelevantes = archivos.filter((archivo) => !archivo.path.includes("Plantillas"));
  for (const archivo of archivosRelevantes) {
    const contenido = await app2.vault.read(archivo);
    const coincidencias = contenido.match(/^ *- \[\/\] .*/gm) || [];
    const tareasLimpias = coincidencias.map((tarea) => tarea.trim());
    tareasPendientes = tareasPendientes.concat(tareasLimpias);
  }
  return tareasPendientes;
}
async function elegirTareaParaRegistro(app2, registro, tareasPendientes) {
  const placeholder = "Elige la tarea que vas a registrar.";
  let promesasLimpias = tareasPendientes.map((tarea) => limpiarTextoTarea(tarea));
  Promise.all(promesasLimpias).then((tareasLimpias) => {
    const modalMenu = new SeleccionModal(app2, tareasLimpias, tareasLimpias, placeholder);
    modalMenu.openAndAwaitSelection().then((selection) => {
      debugger;
      registro.titulo = limpiarTextoTarea(selection);
    }).catch((error) => {
      registro.detener = true;
      console.error("Error o modal cerrado sin selecci\xF3n:", error);
    });
  }).catch((error) => {
    console.error("Hubo un error al limpiar las tareas:", error);
  });
}
function limpiarTextoTarea(titulo) {
  return new Promise((resolve) => {
    let textoLimpio = titulo.split("\n")[0];
    textoLimpio = textoLimpio.replace(/#[\w-/]+/g, "");
    textoLimpio = textoLimpio.replace(/\[\w+::[^\]]+\]/g, "");
    textoLimpio = textoLimpio.replace(/^\s*-\s*\[\/\]\s*/, "");
    const caracteresNoPermitidos = /[<>:"\/\\|?*\x00-\x1F]/g;
    textoLimpio = textoLimpio.replace(caracteresNoPermitidos, "_");
    textoLimpio = textoLimpio.replace(/\s+/g, " ");
    resolve(textoLimpio.trim());
  });
}
async function detenerTarea(tareaActiva, app2) {
  console.log(`Deteniendo la tarea: ${tareaActiva.titulo}`);
  const fileContents = await app2.vault.read(tareaActiva.file);
  const newContents = fileContents.replace("estado: \u{1F7E2}", "estado: \u{1F535}");
  await app2.vault.modify(tareaActiva.file, newContents);
}

// src/modules/moduloRegistroTiempo/ribbonMenu.ts
function registerRibbonMenu2(plugin) {
  plugin.ribbonButtonRT = plugin.addRibbonIcon("clock", "Registro de Tiempo", async (event) => {
    const menu = new import_obsidian13.Menu(plugin.app);
    if (await cumpleCondicion(plugin.app)) {
      menu.addItem((item) => item.setTitle("Ahora").onClick(() => {
        console.log("Ahora");
      }));
    }
    menu.addItem((item) => item.setTitle("Registrar Tiempo").onClick(() => {
      console.log("Registrar Tiempo");
    }));
    if (await cumpleCondicion(plugin.app)) {
      menu.addItem((item) => item.setTitle("Detener Registro").onClick(() => {
        console.log("Detener Registro");
      }));
    }
    menu.addItem((item) => item.setTitle("Tareas en progreso").onClick(() => {
      console.log("Tareas en progreso");
    }));
    menu.addItem((item) => item.setTitle("Registros de hoy").onClick(() => {
      console.log("Registros de hoy");
    }));
    menu.showAtPosition({ x: event.pageX, y: event.pageY });
  });
}
function deactivateRibbonMenu(plugin) {
  if (plugin.ribbonButtonRT) {
    plugin.ribbonButtonRT.remove();
    plugin.ribbonButtonRT = null;
  }
}

// src/modules/moduloRegistroTiempo/commands.ts
var import_obsidian15 = require("obsidian");

// src/modules/moduloRegistroTiempo/modals/modal_Ahora.ts
var import_obsidian14 = require("obsidian");
var modal_Ahora = class extends import_obsidian14.Modal {
  constructor(app2, file) {
    super(app2);
    this.app = app2;
    this.file = file;
  }
  async onOpen() {
    var _a, _b;
    const { contentEl } = this;
    const metadata = this.app.metadataCache.getFileCache(this.file);
    const aliases = ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.aliases) || "Actividad sin alias";
    const horaInicioStr = ((_b = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _b.horaInicio) ? window.moment(metadata.frontmatter.horaInicio, "YYYY-MM-DD dddd HH:mm").format("YYYY-MM-DDTHH:mm") : "";
    contentEl.createEl("h2", { text: `Registro de actividad.` });
    contentEl.createEl("p", { text: `Tarea: "${aliases}"` });
    if (horaInicioStr) {
      const horaInicio = window.moment(horaInicioStr, "YYYY-MM-DD dddd HH:mm");
      const ahora = window.moment();
      const diff = ahora.diff(horaInicio);
      const duracion = window.moment.duration(diff);
      const diffFormatted = `${duracion.hours()}h ${duracion.minutes()}m`;
      contentEl.createEl("p", { text: `Esta actividad lleva ${diffFormatted} en ejecuci\xF3n.` });
    } else {
      contentEl.createEl("p", { text: "No se pudo determinar el tiempo de inicio de la actividad." });
    }
    contentEl.createEl("p", { text: "Hora de inicio:" });
    this.horaInicioInput = contentEl.createEl("input", {
      type: "datetime-local",
      value: horaInicioStr
    });
    const saveButton = contentEl.createEl("button", { text: "Guardar cambios" });
    saveButton.onclick = () => this.guardarCambios();
  }
  async guardarCambios() {
    const nuevaHoraInicioLocal = this.horaInicioInput.value;
    if (!nuevaHoraInicioLocal) {
      new import_obsidian14.Notice("Por favor, seleccione una hora de inicio.");
      return;
    }
    const nuevaHoraInicio = window.moment(nuevaHoraInicioLocal).format("YYYY-MM-DD dddd HH:mm");
    try {
      const contenidoOriginal = await this.app.vault.read(this.file);
      const contenidoActualizado = contenidoOriginal.replace(/(horaInicio: ).*/, `$1${nuevaHoraInicio}`);
      await this.app.vault.modify(this.file, contenidoActualizado);
      this.close();
      new import_obsidian14.Notice("Hora de inicio actualizada correctamente.");
    } catch (error) {
      console.error("Error al guardar cambios en la nota:", error);
      new import_obsidian14.Notice("Error al guardar los cambios en la nota.");
    }
  }
};

// src/modules/moduloRegistroTiempo/commands.ts
function registerCommands2(plugin) {
  const id1 = plugin.addCommand({
    id: "registros-de-tiempo-del-dia",
    name: "Registros de tiempo del d\xEDa",
    checkCallback: (checking) => {
      var _a;
      const activeLeaf = plugin.app.workspace.activeLeaf;
      if (activeLeaf) {
        const filePath = ((_a = activeLeaf.view.file) == null ? void 0 : _a.path) || "";
        if (filePath.startsWith("Estructura/Periodos/Diario/")) {
          if (!checking) {
            console.log("Registros de tiempo del d\xEDa");
          }
          return true;
        }
      }
      return false;
    }
  });
  plugin.registeredCommandIdsRT.push(id1.id);
  const id2 = plugin.addCommand({
    id: "ahora-RegistroTiempo",
    name: "Tarea activa en registro de tiempo",
    callback: async () => {
      const activa = await buscarRegistrosActivos(plugin.app);
      if (!activa) {
        new import_obsidian15.Notice("No hay notas activas");
      } else {
        let modal = new modal_Ahora(plugin.app, activa);
        modal.open();
      }
    }
  });
  plugin.registeredCommandIdsRT.push(id2.id);
  const id3 = plugin.addCommand({
    id: "crear-registro-tiempo",
    name: "Crear Registro de Tiempo",
    callback: async () => {
      const registro = await crearObjetoRegistro(plugin);
      if (!registro) {
        new import_obsidian15.Notice("No se pudo crear el objeto de registro.");
        return;
      }
      await verificarTareasActivas(registro, plugin.app);
      await definirTipoRegistro(registro, plugin.app);
    }
  });
  plugin.registeredCommandIdsRT.push(id3.id);
}
function deactivateCommands2(plugin) {
  if (!plugin.registeredCommandIdsRT)
    return;
  plugin.registeredCommandIdsRT.forEach((commandId) => {
    const command = plugin.app.commands.commands[commandId];
    if (command) {
      command.callback = () => new import_obsidian15.Notice("Este comando ha sido desactivado.");
    }
  });
}

// src/modules/moduloRegistroTiempo/index.ts
var ModuloRegistroTiempo = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  activate() {
    if (!this.plugin.ribbonButtonRT) {
      registerRibbonMenu2(this.plugin);
    }
    registerCommands2(this.plugin);
  }
  deactivate() {
    deactivateRibbonMenu(this.plugin);
    deactivateCommands2(this.plugin);
  }
};

// src/defaults/defaultSettings.ts
var DEFAULT_SETTINGS = {
  moduloRegistroTiempo: true,
  moduloAliasStatusBar: true,
  moduloBase: true,
  file_camposCentral: "Estructura/Campos Sistema Gestion/Campos Sistema Central",
  folder_Anotaciones: "Anotaciones/Notas",
  indice_Anotaciones: "Anotaciones/Indice Anotaciones",
  folder_ABlog: "Subsistemas/Articulos Blog/Articulos",
  indice_ABlog: "Subsistemas/Articulos Blog/Indice Articulos Blog",
  folder_Desarrollos: "Subsistemas/Desarrollos/Codigos",
  indice_Desarrollos: "Subsistemas/Desarrollos/Indice Desarrollo",
  folder_Estudio: "Subsistemas/Estudio/Temas",
  indice_Estudio: "Subsistemas/Estudio/Indice Estudio",
  folder_ProyectosGTD: "Subsistemas/GTD/Proyectos GTD/Proyectos",
  indice_ProyectosGTD: "Subsistemas/GTD/Proyectos GTD/Indice Proyectos GTD",
  folder_RSGTD: "Subsistemas/GTD/Revision Semanal/Revisiones",
  indice_RSGTD: "Subsistemas/GTD/Revision Semanal/Indice Revision Semanal",
  folder_LecturaSesiones: "Subsistemas/Lectura/Sesiones de Lectura/Sesiones",
  indice_LecturaSesiones: "Subsistemas/Lectura/Sesiones de Lectura/Indice Sesiones Lectura",
  folder_LecturaResumenes: "Subsistemas/Lectura/Libros/Resumenes",
  indice_LecturaResumenes: "Subsistemas/Lectura/Libros/Indice Resumenes",
  folder_Mentorias: "Subsistemas/Mentorias/Sesiones Mentoria",
  indice_Mentorias: "Subsistemas/Mentorias/Indice Mentorias",
  folder_Mercado: "Subsistemas/Mercado/Listas",
  indice_Mercado: "Subsistemas/Mercado/Indice Mercado",
  folder_ModulosSistema: "Subsistemas/Modulos Sistema Gestion/Modulos",
  indice_ModulosSistema: "Subsistemas/Modulos Sistema Gestion/Indice Modulos",
  folder_Pagos: "Subsistemas/Pagos/Notas",
  indice_Pagos: "Subsistemas/Pagos/Indice Pagos",
  folder_Presentaciones: "Subsistemas/Presentaciones/Notas",
  indice_Presentaciones: "Subsistemas/Presentaciones/Indice Presentaciones",
  folder_ProyectosQ: "Subsistemas/Proyectos de Q/Proyectos",
  indice_ProyectosQ: "Subsistemas/Proyectos de Q/Indice Proyectos de Q",
  folder_Publicaciones: "Subsistemas/Publicaciones/Piezas",
  indice_Publicaciones: "Subsistemas/Publicaciones/Indice Publicaciones",
  folder_Recetas: "Subsistemas/Recetas/Recetas",
  indice_Recetas: "Subsistemas/Recetas/Indice Recetas",
  folder_RecursosRecurrentes: "Subsistemas/Recursos Recurrentes/Recursos",
  indice_RecursosRecurrentes: "Subsistemas/Recursos Recurrentes/Indice Recursos Recurrentes",
  folder_RegistroTiempo: "Subsistemas/Registro Tiempo/Registros",
  indice_RegistroTiempo: "Subsistemas/Registro Tiempo/Indice Registro Tiempo",
  // Estructura
  folder_AreasVida: "Estructura/Areas de Vida",
  indice_AreasVida: "Estructura/Areas de Vida/Indice Areas de Vida",
  nameFile_AreasVida: "indexAV",
  folder_AreasInteres: "Estructura/Areas de Interes",
  indice_AreasInteres: "Estructura/Areas de Interes/Indice Areas de Interes",
  nameFile_AreasInteres: "indexAI",
  folder_TemasInteres: "Estructura/Temas de Interes",
  indice_TemasInteres: "Estructura/Temas de Interes/Indice Temas de Interes"
};

// src/modules/moduloRegistroTiempo/API/utilsAPI.ts
var import_obsidian19 = require("obsidian");

// src/modules/moduloRegistroTiempo/API/menuOtro.ts
var import_obsidian18 = require("obsidian");

// src/modules/modales/fuzzySelectOrCreate.ts
var import_obsidian17 = require("obsidian");
var fuzzySelectOrCreate = class {
  constructor(app2, plugin) {
    this.pathCampos = "Estructura/Campos Sistema Gestion/Campos Registro Tiempo.md";
    this.app = app2;
    this.plugin = plugin;
  }
  createModal() {
    const modal = document.createElement("div");
    modal.setAttribute("id", "fuzzySearchModal");
    modal.style.position = "fixed";
    modal.style.top = "50%";
    modal.style.left = "50%";
    modal.style.transform = "translate(-50%, -50%)";
    modal.style.zIndex = "1000";
    modal.style.padding = "20px";
    modal.style.backgroundColor = "white";
    modal.style.border = "1px solid #ccc";
    modal.style.borderRadius = "5px";
    modal.style.boxShadow = "0 4px 6px rgba(0,0,0,.1)";
    modal.style.width = "300px";
    const closeButton = document.createElement("button");
    closeButton.textContent = "\xD7";
    closeButton.style.position = "absolute";
    closeButton.style.top = "5px";
    closeButton.style.right = "5px";
    closeButton.style.border = "none";
    closeButton.style.background = "none";
    closeButton.style.cursor = "pointer";
    closeButton.style.fontSize = "16px";
    closeButton.style.fontWeight = "bold";
    closeButton.style.padding = "0px 4px";
    closeButton.style.borderRadius = "10px";
    closeButton.style.outline = "none";
    closeButton.style.boxShadow = "none";
    closeButton.onclick = () => modal.remove();
    modal.appendChild(closeButton);
    return modal;
  }
  filterItems(query, items) {
    return items.filter(
      (item) => item.value.toLowerCase().includes(query.toLowerCase())
    );
  }
  async updateYAMLFields(tipo, selectedValue, selectedGroup) {
    try {
      debugger;
      const file = app.vault.getAbstractFileByPath(this.pathCampos);
      await app.fileManager.processFrontMatter(file, (frontmatter) => {
        debugger;
        let currentActs = frontmatter[tipo] || [];
        let newValueForActs = [...currentActs, [selectedGroup, selectedValue]];
        frontmatter[tipo] = newValueForActs;
      });
      console.log("Frontmatter actualizado con \xE9xito");
    } catch (err) {
      console.error("Error al actualizar el frontmatter", err);
    }
  }
  async showFuzzySearchModal(items, groups, tipo) {
    return new Promise((resolve, reject) => {
      let selectedValue = "";
      let selectedGroup = "";
      const modal = this.createModal();
      const title = document.createElement("h2");
      title.textContent = "Busca o crea tu actividad";
      title.style.textAlign = "center";
      modal.appendChild(title);
      const input = document.createElement("input");
      input.type = "text";
      input.placeholder = "Escribe tu actividad...";
      input.style.width = "80%";
      input.style.textAlign = "center";
      modal.style.display = "flex";
      modal.style.flexDirection = "column";
      modal.style.alignItems = "center";
      modal.appendChild(input);
      const spacer = document.createElement("div");
      spacer.style.height = "16px";
      modal.appendChild(spacer);
      const resultsDiv = document.createElement("div");
      modal.appendChild(resultsDiv);
      function updateResultsDisplay(filteredResults, menuOtro2) {
        resultsDiv.innerHTML = "";
        filteredResults.forEach((result) => {
          const div = document.createElement("div");
          div.textContent = result.value;
          div.style.cursor = "pointer";
          div.onmouseover = () => div.style.backgroundColor = "#f0f0f0";
          div.onmouseout = () => div.style.backgroundColor = "transparent";
          div.onclick = () => {
            selectedValue = result.activity;
            selectedGroup = result.group;
            modal.remove();
            resolve([selectedValue, selectedGroup]);
          };
          resultsDiv.appendChild(div);
        });
        if (filteredResults.length === 0 && input.value.trim() !== "") {
          const createNewDiv = document.createElement("div");
          createNewDiv.textContent = `Crear nueva actividad: "${input.value}"`;
          createNewDiv.style.cursor = "pointer";
          createNewDiv.style.color = "blue";
          createNewDiv.onclick = () => {
            selectedValue = input.value;
            debugger;
            if (tipo == void 0) {
              tipo = "actsTemas";
            }
            selectGroupForNewActivity(menuOtro2, tipo);
          };
          resultsDiv.appendChild(createNewDiv);
        }
      }
      function selectGroupForNewActivity(menuOtro2, tipo2) {
        resultsDiv.innerHTML = "";
        input.remove();
        spacer.remove();
        title.remove();
        const texto = document.createElement("p");
        texto.textContent = `Vamos a crear la actividad: "${selectedValue}". Selecciona un grupo:`;
        ;
        texto.style.textAlign = "center";
        resultsDiv.appendChild(texto);
        groups.forEach((group) => {
          const groupDiv = document.createElement("div");
          groupDiv.textContent = group;
          groupDiv.style.cursor = "pointer";
          groupDiv.onmouseover = () => groupDiv.style.backgroundColor = "#f0f0f0";
          groupDiv.onmouseout = () => groupDiv.style.backgroundColor = "transparent";
          groupDiv.onclick = async () => {
            selectedGroup = group;
            modal.remove();
            let recurrente = await menuOtro2.esRecurrente(selectedValue);
            if (recurrente) {
              await menuOtro2.updateYAMLFields(tipo2, selectedValue, selectedGroup);
            }
            resolve([selectedValue, selectedGroup]);
          };
          resultsDiv.appendChild(groupDiv);
        });
      }
      function displaySelectedValue(activity, group) {
        resultsDiv.innerHTML = `Seleccionado: ${activity} / ${group}`;
      }
      input.oninput = () => {
        const filteredItems = this.filterItems(input.value, items);
        updateResultsDisplay(filteredItems, this);
      };
      document.body.appendChild(modal);
    });
  }
  async esRecurrente(tarea) {
    const opciones = ["Si", "No"];
    const valores = [true, false];
    const placeholder = `${tarea} es tarea recurrente?`;
    const modal = new SeleccionModal(app, opciones, valores, placeholder);
    try {
      return await modal.openAndAwaitSelection();
    } catch (error) {
      console.error("Error o modal cerrado sin selecci\xF3n:", error);
      return false;
    }
  }
};

// src/modules/moduloRegistroTiempo/API/menuOtro.ts
var menuOtro = class {
  constructor(plugin) {
    this.pathCampos = "Estructura/Campos Sistema Gestion/Campos Registro Tiempo.md";
    this.selectedActivity = "";
    this.selectedGroup = "";
    this.plugin = plugin;
    this.fuzzySelectOrC = new fuzzySelectOrCreate(this.app, plugin);
  }
  async menuOtro(app2, registro) {
    const opcionesOtro = ["Propias", "Areas de Vida", "Areas de Inter\xE9s", "Proyectos de Q", "Proyectos GTD", "Tema de Inter\xE9s", "Recurso Recurrente"];
    const valoresOtro = ["hab", "actsAV", "actsAI", "actsPQ", "actsPGTD", "actsTI", "actsRR"];
    const placeholderOtro = "\xBFQue categoria?";
    const modalOtro = new SeleccionModal(app2, opcionesOtro, valoresOtro, placeholderOtro);
    let temaOtro;
    let siAsunto = false;
    try {
      const selectionOtro = await modalOtro.openAndAwaitSelection();
      switch (selectionOtro) {
        case "hab":
          temaOtro = await this.habitual(app2);
          break;
        case "actsAV":
        case "actsAI":
        case "actsPQ":
        case "actsPGTD":
        case "actsTI":
        case "actsRR":
          temaOtro = await this.elemSG(app2, selectionOtro);
          siAsunto = true;
          break;
        case "bus":
          break;
      }
    } catch (error) {
      console.error("Error o modal cerrado sin selecci\xF3n:", error);
      registro.detener = true;
      return error;
    }
    return { titulo: temaOtro.actividad + " / " + temaOtro.grupo, siAsunto, nombre: temaOtro.nombre };
  }
  async habitual(app2) {
    const grupos = await this.getFrontmatterField(app2, this.pathCampos, "temas");
    const actsGrupos = await this.resultYaml(app2, "actsTemas");
    let itemsForSearch = actsGrupos.filter((item) => grupos.includes(item.grupo)).map((item) => ({
      value: `${item.actividad} / ${item.grupo}`,
      // Cambia el orden si es necesario
      activity: item.actividad,
      // Usa la propiedad 'actividad' en lugar de item[1]
      group: item.grupo
      // Usa la propiedad 'grupo' en lugar de item[0]
    }));
    let eleccion = await this.fuzzySelectOrC.showFuzzySearchModal(itemsForSearch, grupos);
    let objEleccion = { grupo: eleccion[1], actividad: eleccion[0], nombre: "" };
    return objEleccion;
  }
  async ninguno(app2) {
  }
  async elemSG(app2, tipo) {
    const actividades = await this.resultYaml(app2, tipo);
    debugger;
    const activeSG = await this.findMainFilesWithState(app2, tipo);
    const groups = activeSG.map((page) => page.frontmatter.aliases ? page.frontmatter.aliases[0] : null).filter((alias2) => alias2 !== null);
    let itemsForSearch = actividades.filter((item) => groups.includes(item.grupo)).map((item) => ({
      value: `${item.actividad} / ${item.grupo}`,
      // Cambia el orden si es necesario
      activity: item.actividad,
      // Usa la propiedad 'actividad' en lugar de item[1]
      group: item.grupo
      // Usa la propiedad 'grupo' en lugar de item[0]
    }));
    let eleccion = await this.fuzzySelectOrC.showFuzzySearchModal(itemsForSearch, groups, tipo);
    const foundElement = activeSG.find((b) => b.frontmatter.aliases[0] === eleccion[1]);
    let alias = foundElement == null ? void 0 : foundElement.file.path;
    let objEleccion = { grupo: eleccion[1], actividad: eleccion[0], nombre: alias };
    return objEleccion;
  }
  async buscar(app2) {
  }
  async resultYaml(app2, tema) {
    var _a;
    const file = app2.vault.getAbstractFileByPath(this.pathCampos);
    try {
      if (file instanceof import_obsidian18.TFile) {
        const metadata = app2.metadataCache.getFileCache(file);
        const arregloResult = ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a[tema]) || [];
        const resultado = [];
        if (Array.isArray(arregloResult)) {
          arregloResult.forEach((item) => {
            if (Array.isArray(item) && item.length >= 2) {
              resultado.push({ grupo: item[0], actividad: item[1] });
            }
          });
        }
        return resultado;
      }
    } catch (error) {
      console.error("Error obteniendo el archivo de campos:", error);
      throw error;
    }
    return [];
  }
  async getFrontmatterField(app2, file, field) {
    try {
      const tFile = app2.vault.getAbstractFileByPath(file);
      if (tFile instanceof import_obsidian18.TFile) {
        const cache = app2.metadataCache.getFileCache(tFile);
        const frontmatter = cache == null ? void 0 : cache.frontmatter;
        if (frontmatter && frontmatter.hasOwnProperty(field)) {
          const fieldValue = frontmatter[field];
          if (fieldValue === void 0 || fieldValue === null || fieldValue === "") {
            console.log("El campo est\xE1 vac\xEDo o no existe.");
            return null;
          } else {
            console.log("Frontmatter consultado con \xE9xito");
            return fieldValue;
          }
        } else {
          console.log("El campo no existe en el frontmatter.");
          return null;
        }
      } else {
        console.error("El archivo no existe o no es un archivo de texto.");
        return null;
      }
    } catch (err) {
      console.error("Error al consultar el frontmatter", err);
      return null;
    }
  }
  // Esta función encuentra los archivos de subsistemas y cuyo estado es 🟢
  async findMainFilesWithState(app2, tipo) {
    const propertiesTipo = {
      actsAV: {
        folder: this.plugin.settings.folder_AreasVida,
        sameName: true,
        nameFile: this.plugin.settings.nameFile_AreasVida
      },
      actsAI: {
        folder: this.plugin.settings.folder_AreasInteres,
        sameName: true,
        nameFile: this.plugin.settings.nameFile_AreasInteres
      },
      actsPQ: {
        folder: this.plugin.settings.folder_ProyectosQ,
        sameName: false,
        nameFile: ""
      },
      actsPGTD: {
        folder: this.plugin.settings.folder_ProyectosGTD,
        sameName: false,
        nameFile: ""
      },
      actsTI: {
        folder: this.plugin.settings.folder_TemasInteres,
        sameName: false,
        nameFile: ""
      },
      actsRR: {
        folder: this.plugin.settings.folder_RecursosRecurrentes,
        sameName: false,
        nameFile: ""
      }
      // Puedes continuar añadiendo más casos aquí
    };
    if (propertiesTipo.hasOwnProperty(tipo)) {
      const { folder, sameName, nameFile } = propertiesTipo[tipo];
      const filesInFolder = app2.vault.getFiles().filter((file) => file.path.startsWith(folder));
      const filesWithFrontmatter = [];
      for (const file of filesInFolder) {
        if (sameName && file.basename === nameFile || !sameName) {
          const metadata = app2.metadataCache.getFileCache(file);
          if (metadata.frontmatter && metadata.frontmatter.estado === "\u{1F7E2}") {
            filesWithFrontmatter.push({ file, frontmatter: metadata.frontmatter });
          }
        }
      }
      return filesWithFrontmatter;
    } else {
      console.log("Selecci\xF3n no reconocida:", tipo);
      return [];
    }
  }
};

// src/modules/moduloRegistroTiempo/API/utilsAPI.ts
var utilsAPI = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.menuOtro = new menuOtro(plugin);
  }
  async buscarRegistrosActivos(app2, registro) {
    var _a;
    const files = app2.vault.getMarkdownFiles();
    for (let file of files) {
      if (file.path.startsWith(registro.folder)) {
        const metadata = app2.metadataCache.getFileCache(file);
        if (((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.estado) === "\u{1F7E2}") {
          return file;
        }
      }
    }
    return;
  }
  // Suponemos que esta función se ubicará en algún lugar donde pueda acceder a `app` de Obsidian.
  async crearObjetoRegistro(plugin) {
    const activo = plugin.app.workspace.getActiveFile();
    if (!activo) {
      console.error("No hay un archivo activo para la creaci\xF3n de registro de tiempo. Se descarta para la creaci\xF3n de registro de tiempo.");
      return null;
    }
    const folder = plugin.settings.folder_RegistroTiempo;
    const indice = plugin.settings.indice_RegistroTiempo;
    let maxId = 0;
    const files = app.vault.getMarkdownFiles();
    const registrosExistentes = files.filter((file) => file.path.startsWith(folder));
    registrosExistentes.forEach((file) => {
      var _a;
      const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if (metadata && metadata.id && !isNaN(metadata.id)) {
        const id = parseInt(metadata.id);
        if (id > maxId)
          maxId = id;
      }
    });
    const nextId = maxId + 1;
    const fechaCompleta = this.formatearFecha(/* @__PURE__ */ new Date());
    return {
      activo,
      nombre: activo.basename,
      folder,
      indice,
      id: nextId,
      fecha: fechaCompleta,
      indice_DVJS: `"${indice}"`
    };
  }
  formatearFecha(fecha) {
    const offset = fecha.getTimezoneOffset() * 6e4;
    const fechaLocal = new Date(fecha.getTime() - offset);
    const fechaFormato = fechaLocal.toISOString().split("T")[0];
    const dias = ["Domingo", "Lunes", "Martes", "Mi\xE9rcoles", "Jueves", "Viernes", "S\xE1bado"];
    const diaSemana = dias[fecha.getDay()];
    const horaFormato = fecha.toTimeString().split(" ")[0].substring(0, 5);
    return `${fechaFormato} ${diaSemana} ${horaFormato}`;
  }
  async verificarTareasActivas(registro, app2) {
    var _a;
    const files = app2.vault.getMarkdownFiles();
    const tareasActivas = [];
    for (let file of files) {
      if (file.path.startsWith(registro.folder)) {
        const metadata = (_a = app2.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
        if ((metadata == null ? void 0 : metadata.estado) === "\u{1F7E2}") {
          tareasActivas.push({ file, aliases: metadata.aliases || file.basename });
        }
      }
    }
    if (tareasActivas.length === 1) {
      const tareaActiva = tareasActivas[0];
      const deseaDetener = await this.mostrarSugerencia(`La tarea ${tareaActiva.aliases} est\xE1 corriendo. \xBFDesea detenerla?`);
      debugger;
      if (deseaDetener === void 0) {
        new import_obsidian19.Notice(`Creaci\xF3n de registro cancelado por el usuario.`);
        registro.detener = true;
        return;
      }
      if (deseaDetener) {
        await this.detenerTarea(tareaActiva, app2);
        registro.detener = false;
      } else {
        new import_obsidian19.Notice(`La tarea ${tareaActiva.aliases} seguir\xE1 registr\xE1ndose.`);
        registro.detener = true;
        return;
      }
    } else if (tareasActivas.length > 1) {
      new import_obsidian19.Notice("Hay un error con la cantidad de tareas corriendo en este momento.");
      registro.detener = true;
    } else {
      console.log("No hay m\xE1s tareas corriendo.");
      registro.detener = false;
    }
  }
  mostrarSugerencia(mensaje) {
    return new Promise((resolve, reject) => {
      let seleccionado = false;
      const modal = new import_obsidian19.Modal(app);
      modal.contentEl.createEl("h1", { text: mensaje });
      const buttonsContainer = modal.contentEl.createEl("div");
      const hacerSeleccion = (seleccion) => {
        seleccionado = true;
        modal.close();
        resolve(seleccion);
      };
      const yesButton = buttonsContainer.createEl("button", {
        text: "S\xED"
      });
      yesButton.addEventListener("click", () => hacerSeleccion(true));
      const noButton = buttonsContainer.createEl("button", {
        text: "No"
      });
      noButton.addEventListener("click", () => hacerSeleccion(false));
      modal.onClose = () => {
        if (!seleccionado) {
          reject(new Error("Modal cerrado sin selecci\xF3n"));
        }
      };
      modal.contentEl.addEventListener("keydown", (e) => {
        var _a;
        switch (e.key) {
          case "ArrowLeft":
            yesButton.focus();
            break;
          case "ArrowRight":
            noButton.focus();
            break;
          case "Enter":
            (_a = document.activeElement) == null ? void 0 : _a.click();
            break;
        }
      });
      yesButton.focus();
      modal.open();
    });
  }
  async definirTipoRegistro(registro, app2) {
    const totTareas = await this.encontrarTareasPendientes(app2);
    let opcionesTitulo, valoresOpcion;
    if (totTareas.length > 0) {
      opcionesTitulo = [registro.nombre, "Alguna tarea en Ejecuci\xF3n", "Otro"];
      valoresOpcion = ["Nota", "Tarea", "Otro"];
    } else {
      opcionesTitulo = [registro.nombre, "Otro"];
      valoresOpcion = ["Nota", "Otro"];
    }
    const placeholder = "\xBFSobre qu\xE9 es el registro de tiempo?";
    const modalMenu1 = new SeleccionModal(app2, opcionesTitulo, valoresOpcion, placeholder);
    try {
      const selection = await modalMenu1.openAndAwaitSelection();
      registro.tipoRegistro = selection;
      switch (registro.tipoRegistro) {
        case "Nota":
          registro.titulo = registro.nombre;
          registro.siAsunto = true;
          break;
        case "Tarea":
          await this.elegirTareaParaRegistro(app2, registro, totTareas);
          break;
        default:
          let respuesta = await this.menuOtro.menuOtro(app2, registro);
          debugger;
          Object.assign(registro, respuesta);
          break;
      }
    } catch (error) {
      console.error("Error o modal cerrado sin selecci\xF3n:", error);
    }
  }
  async encontrarTareasPendientes(app2) {
    let tareasPendientes = [];
    const archivos = app2.vault.getMarkdownFiles();
    const archivosRelevantes = archivos.filter((archivo) => !archivo.path.includes("Plantillas"));
    for (const archivo of archivosRelevantes) {
      const contenido = await app2.vault.read(archivo);
      const coincidencias = contenido.match(/^ *- \[\/\] .*/gm) || [];
      const tareasConArchivo = coincidencias.map((tarea) => {
        return { tarea: tarea.trim(), archivo };
      });
      tareasPendientes = tareasPendientes.concat(tareasConArchivo);
    }
    return tareasPendientes;
  }
  async elegirTareaParaRegistro(app2, registro, tareasPendientes) {
    const placeholder = "Elige la tarea que vas a registrar.";
    let promesasLimpias = tareasPendientes.map((tareaObj) => this.limpiarTextoTarea(tareaObj.tarea));
    try {
      const tareasLimpias = await Promise.all(promesasLimpias);
      const tareasLimpiasConArchivo = tareasPendientes.map((tareaObj, index) => {
        return {
          tarea: tareasLimpias[index],
          // Tarea limpia
          archivo: tareaObj.archivo
          // Referencia al archivo original
        };
      });
      const longitud = tareasLimpiasConArchivo.length;
      const arregloDeIndices = Array.from({ length: longitud }, (_, indice) => indice);
      const modalMenu = new SeleccionModal(app2, tareasLimpiasConArchivo.map((b) => b.tarea), arregloDeIndices, placeholder);
      try {
        const selectedIndex = await modalMenu.openAndAwaitSelection();
        const seleccion = tareasLimpiasConArchivo[selectedIndex];
        registro.titulo = seleccion.tarea;
        registro.nombre = seleccion.archivo.basename;
        registro.siAsunto = true;
      } catch (error) {
        registro.detener = true;
        console.error("Error o modal cerrado sin selecci\xF3n:", error);
      }
    } catch (error) {
      console.error("Hubo un error al limpiar las tareas:", error);
    }
  }
  limpiarTextoTarea(titulo) {
    return new Promise((resolve) => {
      let textoLimpio = titulo.split("\n")[0];
      textoLimpio = textoLimpio.replace(/#[\w-/]+/g, "");
      textoLimpio = textoLimpio.replace(/\[\w+::[^\]]+\]/g, "");
      textoLimpio = textoLimpio.replace(/^\s*-\s*\[\/\]\s*/, "");
      const caracteresNoPermitidos = /[<>:"\/\\|?*\x00-\x1F]/g;
      textoLimpio = textoLimpio.replace(caracteresNoPermitidos, "_");
      textoLimpio = textoLimpio.replace(/\s+/g, " ");
      resolve(textoLimpio.trim());
    });
  }
  async construirNombreyAlias(registro, app2) {
    let nombreBase = `${registro.folder}/RT - ${registro.id}`;
    let aliasLimpio = this.limpiarAlias(registro.titulo);
    aliasLimpio = aliasLimpio.length > 195 ? aliasLimpio.slice(0, 195) : aliasLimpio;
    const archivos = app2.vault.getFiles();
    let registrosConMismoTitulo = [];
    for (const archivo of archivos) {
      if (archivo.path.startsWith(registro.folder)) {
        const metadatos = app2.metadataCache.getFileCache(archivo);
        if (metadatos && metadatos.frontmatter && metadatos.frontmatter.titulo === registro.titulo) {
          const idSec = metadatos.frontmatter.idSec;
          if (idSec !== void 0) {
            registrosConMismoTitulo.push({ archivo, idSec });
          }
        }
      }
    }
    debugger;
    registrosConMismoTitulo.sort((b) => b.idSec, "desc");
    registro.idSec = registrosConMismoTitulo.length > 0 ? parseInt(registrosConMismoTitulo[0].idSec) + 1 : 1;
    if (registro.idSec > 1) {
      aliasLimpio += ` - ${registro.idSec}`;
    }
    registro.aliases = [];
    registro.aliases.push(`RT - ${aliasLimpio}`);
    if (registro.tipoRegistro === "Nota") {
      const archivoActivo = app2.workspace.getActiveFile();
      if (!archivoActivo)
        return;
      const metadatosActivo = app2.metadataCache.getFileCache(archivoActivo);
      const aliasesActivo = metadatosActivo && metadatosActivo.frontmatter ? metadatosActivo.frontmatter.aliases : void 0;
      if (aliasesActivo) {
        const additionalAliases = Array.isArray(aliasesActivo) ? aliasesActivo : [aliasesActivo];
        additionalAliases.forEach((alias) => {
          registro.aliases.push(`RT - ${alias}`);
        });
      }
    }
    registro.nameFile = nombreBase;
  }
  limpiarAlias(titulo) {
    const caracteresNoPermitidos = /[<>:"\/\\|?*\x00-\x1F]/g;
    let tituloLimpio = titulo.replace(caracteresNoPermitidos, "_");
    tituloLimpio = tituloLimpio.replace(/\s+/g, " ");
    return tituloLimpio.trim();
  }
  async detenerTarea(tareaActiva, app2) {
    console.log(`Deteniendo la tarea: ${tareaActiva.titulo}`);
    const fileContents = await app2.vault.read(tareaActiva.file);
    const newContents = fileContents.replace("estado: \u{1F7E2}", "estado: \u{1F535}");
    await app2.vault.modify(tareaActiva.file, newContents);
  }
};

// src/modules/moduloRegistroTiempo/API/registroTiempoAPI.ts
var registroTiempoAPI = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.plugin = plugin;
    this.utilsApi = new utilsAPI(plugin);
  }
  async iniciarRegistro() {
    try {
      const registro = await this.utilsApi.crearObjetoRegistro(this.plugin);
      await this.utilsApi.verificarTareasActivas(registro, this.plugin.app);
      if (registro.detener) {
        return registro;
      }
      await this.utilsApi.definirTipoRegistro(registro, this.plugin.app);
      if (registro.detener) {
        return registro;
      }
      await this.utilsApi.construirNombreyAlias(registro, this.plugin.app);
      return registro;
    } catch (error) {
      new Notice("No se pudo crear el objeto de registro.");
      return null;
    }
  }
  miMetodo() {
    return "Resultado de mi Metodo";
  }
  otroMetodo(param) {
    return `Resultado de otroMetodo con ${param}`;
  }
};

// src/modules/inicializacionSubsistemas/API/starterAPI.ts
var starterAPI = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.infoSubsistema = {};
    this.nota = {};
    this.tp = this.getTp();
    this.pathCampos = this.plugin.settings.file_camposCentral + ".md";
  }
  async crearNota(infoSubsistema, campos) {
    let nota = {};
    Object.assign(this.infoSubsistema, infoSubsistema);
    if (this.infoSubsistema.defined) {
      this.infoSubsistema.folder = this.plugin.settings[infoSubsistema.folder];
      this.infoSubsistema.indice = this.plugin.settings[infoSubsistema.indice];
    }
    try {
      for (let campo of campos) {
        const functionName = `get${campo.charAt(0).toUpperCase() + campo.slice(1)}`;
        if (typeof this[functionName] === "function") {
          nota[campo] = await this[functionName]();
        } else {
          console.error(`La funci\xF3n ${functionName} no est\xE1 definida.`);
        }
      }
    } catch (error) {
      console.error("No se pudo crear el objeto de registro.", error);
      new Notice("No se pudo crear el objeto de registro.");
      return null;
    }
    return nota;
  }
  getTp() {
    if (!this.plugin || !this.plugin.app.plugins.enabledPlugins.has("templater-obsidian")) {
      console.error("El plugin Templater no est\xE1 habilitado.");
      return;
    }
    const templaterPlugin = this.plugin.app.plugins.plugins["templater-obsidian"];
    const tp = templaterPlugin.templater.current_functions_object;
    if (!tp) {
      console.error("No se pudo acceder al objeto de funciones actuales de Templater.");
      return;
    }
    return tp;
  }
  // Ejemplo de función getCampo simulada. Debes definir funciones similares para 'id', 'fecha', etc.
  async getId() {
    let maxId = 0;
    const files = app.vault.getMarkdownFiles();
    const registrosExistentes = files.filter((file) => file.path.startsWith(this.infoSubsistema.folder));
    registrosExistentes.forEach((file) => {
      var _a;
      const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if (metadata && metadata.id && !isNaN(metadata.id)) {
        const id = parseInt(metadata.id);
        if (id > maxId)
          maxId = id;
      }
    });
    const nextId = maxId + 1;
    this.nota.id = nextId;
    return nextId;
  }
  async getFecha() {
    return this.formatearFecha(/* @__PURE__ */ new Date());
  }
  formatearFecha(fecha) {
    const offset = fecha.getTimezoneOffset() * 6e4;
    const fechaLocal = new Date(fecha.getTime() - offset);
    const fechaFormato = fechaLocal.toISOString().split("T")[0];
    const dias = ["Domingo", "Lunes", "Martes", "Mi\xE9rcoles", "Jueves", "Viernes", "S\xE1bado"];
    const diaSemana = dias[fecha.getDay()];
    const horaFormato = fecha.toTimeString().split(" ")[0].substring(0, 5);
    return `${fechaFormato} ${diaSemana} ${horaFormato}`;
  }
  async getSecId() {
  }
  async getTitulo() {
    let titulo = await this.tp.system.prompt(`Titulo de este(a) ${this.infoSubsistema.name}`, `${this.infoSubsistema.name} - ${this.nota.id}`, true);
    if (titulo === null) {
      new Notice("Creaci\xF3n de nota cancelada por el usuario.");
      return;
    }
    this.nota.titulo = titulo;
    return titulo;
  }
  async getDescripcion() {
    let descripcion = await this.tp.system.prompt("\xBFQuieres agregar una descripci\xF3n?", ` Esta nota es sobre ${this.nota.titulo}`, false, true);
    if (descripcion === null) {
      new Notice("Creaci\xF3n de nota cancelada por el usuario.");
      return;
    }
    this.nota.descripcion = descripcion;
    return descripcion;
  }
  async getAliases() {
    this.nota.aliases = [];
    switch (this.infoSubsistema.type) {
      case "Ax":
        this.nota.aliases.push(`${this.nota.titulo}`);
        this.nota.aliases.push(`${this.infoSubsistema.type} - ${this.nota.titulo}`);
        break;
      case "AV":
      case "AI":
        break;
    }
    return this.nota.aliases;
  }
  async getAsunto() {
    let siAsunto, nombre;
    let activo = app.workspace.getActiveFile();
    if (activo != null) {
      nombre = activo.basename;
      const nota = app.metadataCache.getFileCache(activo);
      siAsunto = await this.tp.system.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
    } else {
      siAsunto = false;
      nombre = "";
    }
    this.nota.asunto = {};
    this.nota.asunto.siAsunto = siAsunto;
    this.nota.asunto.nombre = nombre;
    return { siAsunto, nombre };
  }
  async getClasificacion() {
    var _a;
    let clasificacion, tagClasificacion, clasificacionAX, tagsClasificacionAX;
    let nuevaClasificacion = false;
    const file = app.vault.getAbstractFileByPath(this.pathCampos);
    const frontmatter = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    if (frontmatter) {
      clasificacionAX = frontmatter.tituloClasificacionAX || [];
      tagsClasificacionAX = frontmatter.tagsClasificacionAX || [];
      tagClasificacion = await this.tp.system.suggester(clasificacionAX, tagsClasificacionAX, false, "\xBFClasificar\xEDas esta nota bajo alguna de las siguientes categor\xEDas?");
      if (tagClasificacion === null) {
        new Notice("Creaci\xF3n de nota cancelada por el usuario.");
        return;
      } else if (tagClasificacion == "Nuevo") {
        clasificacion = await this.tp.system.prompt("\xBFCual es el nombre de la nueva clasificaci\xF3n que vas a ingresar?", "MiClasificaci\xF3n", true);
        if (clasificacion === null) {
          new Notice("Creaci\xF3n de nota cancelada por el usuario.");
          return;
        }
        tagClasificacion = await this.tp.system.prompt("\xBFCual es el tag que utilizaras para " + clasificacion + "?. No utilices espacios en la definici\xF3n del tag.", "nuevoTag", true);
        if (tagClasificacion === null) {
          new Notice("Creaci\xF3n de nota cancelada por el usuario.");
          return;
        }
        nuevaClasificacion = true;
      } else if (tagClasificacion == "Ninguna") {
        tagClasificacion = "";
        clasificacion = "";
      } else {
        let indice = tagsClasificacionAX.indexOf(tagClasificacion);
        clasificacion = clasificacionAX[indice];
      }
    }
    if (nuevaClasificacion) {
      try {
        await app.fileManager.processFrontMatter(file, (frontmatter2) => {
          let newClasificacion = [...clasificacionAX, clasificacion];
          let newTagClasificacion = [...tagsClasificacionAX, tagClasificacion];
          frontmatter2.tituloClasificacionAX = newClasificacion;
          frontmatter2.tagsClasificacionAX = newTagClasificacion;
          console.log("Frontmatter actualizado con \xE9xito");
        });
      } catch (err) {
        console.error("Error al actualizar el frontmatter", err);
      }
    }
    if (tagClasificacion != "") {
      tagClasificacion = "cl/" + tagClasificacion;
    }
    this.nota.clasificacionAX = clasificacion;
    this.nota.tagClasificacionAX = tagClasificacion;
    return { clase: clasificacion, tag: tagClasificacion };
  }
  // ->
  async getEstado() {
    let campo = await this.tp.system.suggester(["\u{1F535} -> Completado - Informaci\xF3n", "\u{1F7E2} -> Finalizado", "\u{1F7E1} -> En ejecuci\xF3n", "\u{1F534} -> Detenido"], ["\u{1F535}", "\u{1F7E2}", "\u{1F7E1}", "\u{1F534}"], false, "Seleccione el estado de la nota:");
    if (campo === null) {
      new Notice("Creaci\xF3n de nota cancelada por el usuario.");
      return;
    }
    this.nota.estado = campo;
    return campo;
  }
  async getFilename() {
    switch (this.infoSubsistema.type) {
      case "AV":
      case "AI":
        this.nota.fileName = `${this.infoSubsistema.folder}/${this.nota.titulo}/index${this.infoSubsistema.type}`;
        break;
      case "Ax":
        this.nota.fileName = `${this.infoSubsistema.folder}/${this.infoSubsistema.type} - ${this.nota.id}`;
        break;
    }
    return this.nota.fileName;
  }
};

// src/main.ts
var ManagementPlugin = class extends import_obsidian20.Plugin {
  constructor() {
    super(...arguments);
    // Declara una propiedad `settings` para almacenar la configuración del plugin.
    this.statusBarExtension = null;
    this.moduloRegistroTiempo = null;
    this.moduloBase = null;
    this.registeredCommandIdsRT = [];
    this.registeredCommandIdsMB = [];
    this.ribbonButtonRT = null;
  }
  // Declara una propiedad para mantener una instancia de `StatusBarExtension`.
  async onload() {
    await this.loadSettings();
    this.app.plugins.plugins["Total-Personal-Management"] = this;
    this.registroTiempoAPI = new registroTiempoAPI(this);
    this.starterAPI = new starterAPI(this);
    this.addSettingTab(new PluginMainSettingsTab(this));
    this.statusBarExtension = new StatusBarExtension(this);
    this.moduloRegistroTiempo = new ModuloRegistroTiempo(this);
    this.moduloBase = new ModuloBase(this);
    this.applyConfiguration();
    console.log("Iniciando carga de plugin de Gesti\xF3n Personal");
  }
  applyConfiguration() {
    var _a, _b, _c, _d, _e, _f;
    if (this.settings.moduloBase) {
      (_a = this.moduloBase) == null ? void 0 : _a.activate(this);
    } else {
      (_b = this.moduloBase) == null ? void 0 : _b.deactivate(this);
    }
    if (this.settings.moduloRegistroTiempo) {
      (_c = this.moduloRegistroTiempo) == null ? void 0 : _c.activate(this);
    } else {
      (_d = this.moduloRegistroTiempo) == null ? void 0 : _d.deactivate(this);
    }
    if (this.settings.moduloAliasStatusBar) {
      (_e = this.statusBarExtension) == null ? void 0 : _e.activate();
    } else {
      (_f = this.statusBarExtension) == null ? void 0 : _f.deactivate();
    }
  }
  async onunload() {
    console.log("Descargando plugin Gesti\xF3n Personal");
    return Promise.resolve();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.applyConfiguration();
  }
};
//# sourceMappingURL=data:application/json;base64,
