/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/modules/modales/seleccionModal.ts
var import_obsidian12, SeleccionModal;
var init_seleccionModal = __esm({
  "src/modules/modales/seleccionModal.ts"() {
    "use strict";
    import_obsidian12 = require("obsidian");
    SeleccionModal = class extends import_obsidian12.FuzzySuggestModal {
      // Flag para determinar si se ha hecho una selección.
      // Constructor de la clase.
      constructor(app2, titles, values, placeholder) {
        super(app2);
        // Objeto para mapear títulos a valores.
        this.seleccionHecha = false;
        this.titles = titles;
        this.values = values;
        this.valueMap = titles.reduce((acc, title, index) => {
          acc[title] = values[index];
          return acc;
        }, {});
        this.setPlaceholder(placeholder);
      }
      // Método para obtener los ítems (títulos) que se mostrarán en el modal.
      getItems() {
        return this.titles;
      }
      // Método para obtener el texto que se mostrará para cada ítem en el modal.
      getItemText(item) {
        return item;
      }
      // Método que se llama al cerrar el modal.
      onClose() {
        if (!this.seleccionHecha) {
          this.reject(new Error("Modal cerrado sin selecci\xF3n"));
        }
      }
      // Método para manejar la selección de un ítem.
      selectSuggestion(item, evt) {
        this.seleccionHecha = true;
        super.selectSuggestion(item, evt);
      }
      // Método que se llama al elegir un ítem, donde se resuelve la promesa con el valor asociado al ítem seleccionado.
      onChooseItem(item, evt) {
        const value = this.valueMap[item];
        this.resolve(value);
      }
      // Método para abrir el modal y esperar a que el usuario haga una selección, devolviendo una promesa con el valor seleccionado.
      openAndAwaitSelection() {
        return new Promise((resolve, reject) => {
          this.resolve = resolve;
          this.reject = reject;
          this.open();
        });
      }
    };
  }
});

// src/modules/modales/seleccionModalTareas.ts
var import_obsidian18, SeleccionModalTareas;
var init_seleccionModalTareas = __esm({
  "src/modules/modales/seleccionModalTareas.ts"() {
    "use strict";
    import_obsidian18 = require("obsidian");
    SeleccionModalTareas = class extends import_obsidian18.FuzzySuggestModal {
      /**
       * @param app Obsidian App
       * @param options Lista de cadenas (PUEDE INCLUIR HTML) que se mostrarán en el modal
       * @param values  Lista de valores asociados a cada opción
       * @param placeholder Texto en la barra de búsqueda
       */
      constructor(app2, options, values, placeholder) {
        super(app2);
        // Valores que se retornan al elegir
        this.seleccionHecha = false;
        this.options = options;
        this.values = values;
        this.setPlaceholder(placeholder);
      }
      /**
       * Retorna la lista de ítems (en este caso, cadenas) sobre las que se hará la búsqueda difusa.
       */
      getItems() {
        return this.options;
      }
      /**
       * Determina el texto que se usa internamente para la búsqueda difusa.
       * Aquí quitamos etiquetas HTML, para que la búsqueda sea sobre texto plano.
       */
      getItemText(item) {
        return item.replace(/<[^>]+>/g, "");
      }
      /**
       * Controla cómo se muestra cada opción en la lista de sugerencias.
       * Asignamos 'el.innerHTML' para que se renderice el HTML con estilos,
       * en lugar de mostrar las etiquetas en crudo.
       */
      renderSuggestion(result, el) {
        el.innerHTML = result.item;
      }
      /**
       * Maneja la selección de un ítem. Marcamos que se ha hecho selección y delegamos al método padre.
       */
      selectSuggestion(item, evt) {
        this.seleccionHecha = true;
        super.selectSuggestion(item, evt);
      }
      /**
       * Se llama cuando el usuario confirma la elección de un ítem de la lista.
       * Obtenemos el valor asociado y resolvemos la promesa.
       */
      onChooseItem(item, evt) {
        const index = this.options.indexOf(item);
        const value = this.values[index];
        this.resolveSelection(value);
      }
      /**
       * Si el modal se cierra sin que el usuario seleccione nada, rechazamos la promesa.
       */
      onClose() {
        if (!this.seleccionHecha) {
          this.rejectSelection(new Error("Modal cerrado sin selecci\xF3n"));
        }
      }
      /**
       * Método para abrir el modal y retornar una promesa que se resuelve cuando
       * el usuario elige un ítem o se rechaza si cierra sin elegir.
       */
      openAndAwaitSelection() {
        return new Promise((resolve, reject) => {
          this.resolveSelection = resolve;
          this.rejectSelection = reject;
          this.open();
        });
      }
    };
  }
});

// src/modules/modales/fuzzySelectOrCreate.ts
var import_obsidian19, fuzzySelectOrCreate;
var init_fuzzySelectOrCreate = __esm({
  "src/modules/modales/fuzzySelectOrCreate.ts"() {
    "use strict";
    import_obsidian19 = require("obsidian");
    init_seleccionModal();
    fuzzySelectOrCreate = class {
      constructor(app2, plugin) {
        this.pathCampos = "Estructura/Campos Sistema Gestion/Campos Registro Tiempo.md";
        this.app = app2;
        this.plugin = plugin;
      }
      createModal() {
        const modal = document.createElement("div");
        modal.setAttribute("id", "fuzzySearchModal");
        modal.style.position = "fixed";
        modal.style.top = "50%";
        modal.style.left = "50%";
        modal.style.transform = "translate(-50%, -50%)";
        modal.style.zIndex = "1000";
        modal.style.padding = "20px";
        modal.style.backgroundColor = "white";
        modal.style.border = "1px solid #ccc";
        modal.style.borderRadius = "5px";
        modal.style.boxShadow = "0 4px 6px rgba(0,0,0,.1)";
        modal.style.width = "300px";
        const closeButton = document.createElement("button");
        closeButton.textContent = "\xD7";
        closeButton.style.position = "absolute";
        closeButton.style.top = "5px";
        closeButton.style.right = "5px";
        closeButton.style.border = "none";
        closeButton.style.background = "none";
        closeButton.style.cursor = "pointer";
        closeButton.style.fontSize = "16px";
        closeButton.style.fontWeight = "bold";
        closeButton.style.padding = "0px 4px";
        closeButton.style.borderRadius = "10px";
        closeButton.style.outline = "none";
        closeButton.style.boxShadow = "none";
        closeButton.onclick = () => modal.remove();
        modal.appendChild(closeButton);
        return modal;
      }
      filterItems(query, items) {
        return items.filter(
          (item) => item.value.toLowerCase().includes(query.toLowerCase())
        );
      }
      async updateYAMLFields(tipo, selectedValue, selectedGroup) {
        try {
          debugger;
          const file = app.vault.getAbstractFileByPath(this.pathCampos);
          await app.fileManager.processFrontMatter(file, (frontmatter) => {
            debugger;
            let currentActs = frontmatter[tipo] || [];
            let newValueForActs = [...currentActs, [selectedGroup, selectedValue]];
            frontmatter[tipo] = newValueForActs;
          });
          console.log("Frontmatter actualizado con \xE9xito");
        } catch (err) {
          console.error("Error al actualizar el frontmatter", err);
        }
      }
      async showFuzzySearchModal(items, groups, tipo) {
        return new Promise((resolve, reject) => {
          let selectedValue = "";
          let selectedGroup = "";
          const modal = this.createModal();
          const title = document.createElement("h2");
          title.textContent = "Busca o crea tu actividad";
          title.style.textAlign = "center";
          modal.appendChild(title);
          const input = document.createElement("input");
          input.type = "text";
          input.placeholder = "Escribe tu actividad...";
          input.style.width = "80%";
          input.style.textAlign = "center";
          modal.style.display = "flex";
          modal.style.flexDirection = "column";
          modal.style.alignItems = "center";
          modal.appendChild(input);
          const spacer = document.createElement("div");
          spacer.style.height = "16px";
          modal.appendChild(spacer);
          const resultsDiv = document.createElement("div");
          modal.appendChild(resultsDiv);
          function updateResultsDisplay(filteredResults, menuOtro2) {
            resultsDiv.innerHTML = "";
            filteredResults.forEach((result) => {
              const div = document.createElement("div");
              div.textContent = result.value;
              div.style.cursor = "pointer";
              div.onmouseover = () => div.style.backgroundColor = "#f0f0f0";
              div.onmouseout = () => div.style.backgroundColor = "transparent";
              div.onclick = () => {
                selectedValue = result.activity;
                selectedGroup = result.group;
                modal.remove();
                resolve([selectedValue, selectedGroup]);
              };
              resultsDiv.appendChild(div);
            });
            if (filteredResults.length === 0 && input.value.trim() !== "") {
              const createNewDiv = document.createElement("div");
              createNewDiv.textContent = `Crear nueva actividad: "${input.value}"`;
              createNewDiv.style.cursor = "pointer";
              createNewDiv.style.color = "blue";
              createNewDiv.onclick = () => {
                selectedValue = input.value;
                debugger;
                if (tipo == void 0) {
                  tipo = "actsTemas";
                }
                selectGroupForNewActivity(menuOtro2, tipo);
              };
              resultsDiv.appendChild(createNewDiv);
            }
          }
          function selectGroupForNewActivity(menuOtro2, tipo2) {
            resultsDiv.innerHTML = "";
            input.remove();
            spacer.remove();
            title.remove();
            const texto = document.createElement("p");
            texto.textContent = `Vamos a crear la actividad: "${selectedValue}". Selecciona un grupo:`;
            ;
            texto.style.textAlign = "center";
            resultsDiv.appendChild(texto);
            groups.forEach((group) => {
              const groupDiv = document.createElement("div");
              groupDiv.textContent = group;
              groupDiv.style.cursor = "pointer";
              groupDiv.onmouseover = () => groupDiv.style.backgroundColor = "#f0f0f0";
              groupDiv.onmouseout = () => groupDiv.style.backgroundColor = "transparent";
              groupDiv.onclick = async () => {
                selectedGroup = group;
                modal.remove();
                let recurrente = await menuOtro2.esRecurrente(selectedValue);
                if (recurrente) {
                  await menuOtro2.updateYAMLFields(tipo2, selectedValue, selectedGroup);
                }
                resolve([selectedValue, selectedGroup]);
              };
              resultsDiv.appendChild(groupDiv);
            });
          }
          function displaySelectedValue(activity, group) {
            resultsDiv.innerHTML = `Seleccionado: ${activity} / ${group}`;
          }
          input.oninput = () => {
            const filteredItems = this.filterItems(input.value, items);
            updateResultsDisplay(filteredItems, this);
          };
          document.body.appendChild(modal);
        });
      }
      async esRecurrente(tarea) {
        const opciones = ["Si", "No"];
        const valores = [true, false];
        const placeholder = `${tarea} es tarea recurrente?`;
        const modal = new SeleccionModal(app, opciones, valores, placeholder);
        try {
          return await modal.openAndAwaitSelection();
        } catch (error) {
          console.error("Error o modal cerrado sin selecci\xF3n:", error);
          return false;
        }
      }
    };
  }
});

// node_modules/luxon/src/errors.js
var LuxonError, InvalidDateTimeError, InvalidIntervalError, InvalidDurationError, ConflictingSpecificationError, InvalidUnitError, InvalidArgumentError, ZoneIsAbstractError;
var init_errors = __esm({
  "node_modules/luxon/src/errors.js"() {
    LuxonError = class extends Error {
    };
    InvalidDateTimeError = class extends LuxonError {
      constructor(reason) {
        super(`Invalid DateTime: ${reason.toMessage()}`);
      }
    };
    InvalidIntervalError = class extends LuxonError {
      constructor(reason) {
        super(`Invalid Interval: ${reason.toMessage()}`);
      }
    };
    InvalidDurationError = class extends LuxonError {
      constructor(reason) {
        super(`Invalid Duration: ${reason.toMessage()}`);
      }
    };
    ConflictingSpecificationError = class extends LuxonError {
    };
    InvalidUnitError = class extends LuxonError {
      constructor(unit) {
        super(`Invalid unit ${unit}`);
      }
    };
    InvalidArgumentError = class extends LuxonError {
    };
    ZoneIsAbstractError = class extends LuxonError {
      constructor() {
        super("Zone is an abstract class");
      }
    };
  }
});

// node_modules/luxon/src/impl/formats.js
var n, s, l, DATE_SHORT, DATE_MED, DATE_MED_WITH_WEEKDAY, DATE_FULL, DATE_HUGE, TIME_SIMPLE, TIME_WITH_SECONDS, TIME_WITH_SHORT_OFFSET, TIME_WITH_LONG_OFFSET, TIME_24_SIMPLE, TIME_24_WITH_SECONDS, TIME_24_WITH_SHORT_OFFSET, TIME_24_WITH_LONG_OFFSET, DATETIME_SHORT, DATETIME_SHORT_WITH_SECONDS, DATETIME_MED, DATETIME_MED_WITH_SECONDS, DATETIME_MED_WITH_WEEKDAY, DATETIME_FULL, DATETIME_FULL_WITH_SECONDS, DATETIME_HUGE, DATETIME_HUGE_WITH_SECONDS;
var init_formats = __esm({
  "node_modules/luxon/src/impl/formats.js"() {
    n = "numeric";
    s = "short";
    l = "long";
    DATE_SHORT = {
      year: n,
      month: n,
      day: n
    };
    DATE_MED = {
      year: n,
      month: s,
      day: n
    };
    DATE_MED_WITH_WEEKDAY = {
      year: n,
      month: s,
      day: n,
      weekday: s
    };
    DATE_FULL = {
      year: n,
      month: l,
      day: n
    };
    DATE_HUGE = {
      year: n,
      month: l,
      day: n,
      weekday: l
    };
    TIME_SIMPLE = {
      hour: n,
      minute: n
    };
    TIME_WITH_SECONDS = {
      hour: n,
      minute: n,
      second: n
    };
    TIME_WITH_SHORT_OFFSET = {
      hour: n,
      minute: n,
      second: n,
      timeZoneName: s
    };
    TIME_WITH_LONG_OFFSET = {
      hour: n,
      minute: n,
      second: n,
      timeZoneName: l
    };
    TIME_24_SIMPLE = {
      hour: n,
      minute: n,
      hourCycle: "h23"
    };
    TIME_24_WITH_SECONDS = {
      hour: n,
      minute: n,
      second: n,
      hourCycle: "h23"
    };
    TIME_24_WITH_SHORT_OFFSET = {
      hour: n,
      minute: n,
      second: n,
      hourCycle: "h23",
      timeZoneName: s
    };
    TIME_24_WITH_LONG_OFFSET = {
      hour: n,
      minute: n,
      second: n,
      hourCycle: "h23",
      timeZoneName: l
    };
    DATETIME_SHORT = {
      year: n,
      month: n,
      day: n,
      hour: n,
      minute: n
    };
    DATETIME_SHORT_WITH_SECONDS = {
      year: n,
      month: n,
      day: n,
      hour: n,
      minute: n,
      second: n
    };
    DATETIME_MED = {
      year: n,
      month: s,
      day: n,
      hour: n,
      minute: n
    };
    DATETIME_MED_WITH_SECONDS = {
      year: n,
      month: s,
      day: n,
      hour: n,
      minute: n,
      second: n
    };
    DATETIME_MED_WITH_WEEKDAY = {
      year: n,
      month: s,
      day: n,
      weekday: s,
      hour: n,
      minute: n
    };
    DATETIME_FULL = {
      year: n,
      month: l,
      day: n,
      hour: n,
      minute: n,
      timeZoneName: s
    };
    DATETIME_FULL_WITH_SECONDS = {
      year: n,
      month: l,
      day: n,
      hour: n,
      minute: n,
      second: n,
      timeZoneName: s
    };
    DATETIME_HUGE = {
      year: n,
      month: l,
      day: n,
      weekday: l,
      hour: n,
      minute: n,
      timeZoneName: l
    };
    DATETIME_HUGE_WITH_SECONDS = {
      year: n,
      month: l,
      day: n,
      weekday: l,
      hour: n,
      minute: n,
      second: n,
      timeZoneName: l
    };
  }
});

// node_modules/luxon/src/zone.js
var Zone;
var init_zone = __esm({
  "node_modules/luxon/src/zone.js"() {
    init_errors();
    Zone = class {
      /**
       * The type of zone
       * @abstract
       * @type {string}
       */
      get type() {
        throw new ZoneIsAbstractError();
      }
      /**
       * The name of this zone.
       * @abstract
       * @type {string}
       */
      get name() {
        throw new ZoneIsAbstractError();
      }
      get ianaName() {
        return this.name;
      }
      /**
       * Returns whether the offset is known to be fixed for the whole year.
       * @abstract
       * @type {boolean}
       */
      get isUniversal() {
        throw new ZoneIsAbstractError();
      }
      /**
       * Returns the offset's common name (such as EST) at the specified timestamp
       * @abstract
       * @param {number} ts - Epoch milliseconds for which to get the name
       * @param {Object} opts - Options to affect the format
       * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
       * @param {string} opts.locale - What locale to return the offset name in.
       * @return {string}
       */
      offsetName(ts, opts) {
        throw new ZoneIsAbstractError();
      }
      /**
       * Returns the offset's value as a string
       * @abstract
       * @param {number} ts - Epoch milliseconds for which to get the offset
       * @param {string} format - What style of offset to return.
       *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
       * @return {string}
       */
      formatOffset(ts, format) {
        throw new ZoneIsAbstractError();
      }
      /**
       * Return the offset in minutes for this zone at the specified timestamp.
       * @abstract
       * @param {number} ts - Epoch milliseconds for which to compute the offset
       * @return {number}
       */
      offset(ts) {
        throw new ZoneIsAbstractError();
      }
      /**
       * Return whether this Zone is equal to another zone
       * @abstract
       * @param {Zone} otherZone - the zone to compare
       * @return {boolean}
       */
      equals(otherZone) {
        throw new ZoneIsAbstractError();
      }
      /**
       * Return whether this Zone is valid.
       * @abstract
       * @type {boolean}
       */
      get isValid() {
        throw new ZoneIsAbstractError();
      }
    };
  }
});

// node_modules/luxon/src/zones/systemZone.js
var singleton, SystemZone;
var init_systemZone = __esm({
  "node_modules/luxon/src/zones/systemZone.js"() {
    init_util();
    init_zone();
    singleton = null;
    SystemZone = class _SystemZone extends Zone {
      /**
       * Get a singleton instance of the local zone
       * @return {SystemZone}
       */
      static get instance() {
        if (singleton === null) {
          singleton = new _SystemZone();
        }
        return singleton;
      }
      /** @override **/
      get type() {
        return "system";
      }
      /** @override **/
      get name() {
        return new Intl.DateTimeFormat().resolvedOptions().timeZone;
      }
      /** @override **/
      get isUniversal() {
        return false;
      }
      /** @override **/
      offsetName(ts, { format, locale }) {
        return parseZoneInfo(ts, format, locale);
      }
      /** @override **/
      formatOffset(ts, format) {
        return formatOffset(this.offset(ts), format);
      }
      /** @override **/
      offset(ts) {
        return -new Date(ts).getTimezoneOffset();
      }
      /** @override **/
      equals(otherZone) {
        return otherZone.type === "system";
      }
      /** @override **/
      get isValid() {
        return true;
      }
    };
  }
});

// node_modules/luxon/src/zones/IANAZone.js
function makeDTF(zone) {
  if (!dtfCache[zone]) {
    dtfCache[zone] = new Intl.DateTimeFormat("en-US", {
      hour12: false,
      timeZone: zone,
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      era: "short"
    });
  }
  return dtfCache[zone];
}
function hackyOffset(dtf, date) {
  const formatted = dtf.format(date).replace(/\u200E/g, ""), parsed = /(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(formatted), [, fMonth, fDay, fYear, fadOrBc, fHour, fMinute, fSecond] = parsed;
  return [fYear, fMonth, fDay, fadOrBc, fHour, fMinute, fSecond];
}
function partsOffset(dtf, date) {
  const formatted = dtf.formatToParts(date);
  const filled = [];
  for (let i = 0; i < formatted.length; i++) {
    const { type: type2, value } = formatted[i];
    const pos = typeToPos[type2];
    if (type2 === "era") {
      filled[pos] = value;
    } else if (!isUndefined(pos)) {
      filled[pos] = parseInt(value, 10);
    }
  }
  return filled;
}
var dtfCache, typeToPos, ianaZoneCache, IANAZone;
var init_IANAZone = __esm({
  "node_modules/luxon/src/zones/IANAZone.js"() {
    init_util();
    init_zone();
    dtfCache = {};
    typeToPos = {
      year: 0,
      month: 1,
      day: 2,
      era: 3,
      hour: 4,
      minute: 5,
      second: 6
    };
    ianaZoneCache = {};
    IANAZone = class _IANAZone extends Zone {
      /**
       * @param {string} name - Zone name
       * @return {IANAZone}
       */
      static create(name) {
        if (!ianaZoneCache[name]) {
          ianaZoneCache[name] = new _IANAZone(name);
        }
        return ianaZoneCache[name];
      }
      /**
       * Reset local caches. Should only be necessary in testing scenarios.
       * @return {void}
       */
      static resetCache() {
        ianaZoneCache = {};
        dtfCache = {};
      }
      /**
       * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
       * @param {string} s - The string to check validity on
       * @example IANAZone.isValidSpecifier("America/New_York") //=> true
       * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
       * @deprecated This method returns false for some valid IANA names. Use isValidZone instead.
       * @return {boolean}
       */
      static isValidSpecifier(s2) {
        return this.isValidZone(s2);
      }
      /**
       * Returns whether the provided string identifies a real zone
       * @param {string} zone - The string to check
       * @example IANAZone.isValidZone("America/New_York") //=> true
       * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
       * @example IANAZone.isValidZone("Sport~~blorp") //=> false
       * @return {boolean}
       */
      static isValidZone(zone) {
        if (!zone) {
          return false;
        }
        try {
          new Intl.DateTimeFormat("en-US", { timeZone: zone }).format();
          return true;
        } catch (e) {
          return false;
        }
      }
      constructor(name) {
        super();
        this.zoneName = name;
        this.valid = _IANAZone.isValidZone(name);
      }
      /** @override **/
      get type() {
        return "iana";
      }
      /** @override **/
      get name() {
        return this.zoneName;
      }
      /** @override **/
      get isUniversal() {
        return false;
      }
      /** @override **/
      offsetName(ts, { format, locale }) {
        return parseZoneInfo(ts, format, locale, this.name);
      }
      /** @override **/
      formatOffset(ts, format) {
        return formatOffset(this.offset(ts), format);
      }
      /** @override **/
      offset(ts) {
        const date = new Date(ts);
        if (isNaN(date))
          return NaN;
        const dtf = makeDTF(this.name);
        let [year, month, day, adOrBc, hour, minute, second] = dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date);
        if (adOrBc === "BC") {
          year = -Math.abs(year) + 1;
        }
        const adjustedHour = hour === 24 ? 0 : hour;
        const asUTC = objToLocalTS({
          year,
          month,
          day,
          hour: adjustedHour,
          minute,
          second,
          millisecond: 0
        });
        let asTS = +date;
        const over = asTS % 1e3;
        asTS -= over >= 0 ? over : 1e3 + over;
        return (asUTC - asTS) / (60 * 1e3);
      }
      /** @override **/
      equals(otherZone) {
        return otherZone.type === "iana" && otherZone.name === this.name;
      }
      /** @override **/
      get isValid() {
        return this.valid;
      }
    };
  }
});

// node_modules/luxon/src/impl/locale.js
function getCachedLF(locString, opts = {}) {
  const key = JSON.stringify([locString, opts]);
  let dtf = intlLFCache[key];
  if (!dtf) {
    dtf = new Intl.ListFormat(locString, opts);
    intlLFCache[key] = dtf;
  }
  return dtf;
}
function getCachedDTF(locString, opts = {}) {
  const key = JSON.stringify([locString, opts]);
  let dtf = intlDTCache[key];
  if (!dtf) {
    dtf = new Intl.DateTimeFormat(locString, opts);
    intlDTCache[key] = dtf;
  }
  return dtf;
}
function getCachedINF(locString, opts = {}) {
  const key = JSON.stringify([locString, opts]);
  let inf = intlNumCache[key];
  if (!inf) {
    inf = new Intl.NumberFormat(locString, opts);
    intlNumCache[key] = inf;
  }
  return inf;
}
function getCachedRTF(locString, opts = {}) {
  const { base, ...cacheKeyOpts } = opts;
  const key = JSON.stringify([locString, cacheKeyOpts]);
  let inf = intlRelCache[key];
  if (!inf) {
    inf = new Intl.RelativeTimeFormat(locString, opts);
    intlRelCache[key] = inf;
  }
  return inf;
}
function systemLocale() {
  if (sysLocaleCache) {
    return sysLocaleCache;
  } else {
    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;
    return sysLocaleCache;
  }
}
function getCachedWeekInfo(locString) {
  let data = weekInfoCache[locString];
  if (!data) {
    const locale = new Intl.Locale(locString);
    data = "getWeekInfo" in locale ? locale.getWeekInfo() : locale.weekInfo;
    weekInfoCache[locString] = data;
  }
  return data;
}
function parseLocaleString(localeStr) {
  const xIndex = localeStr.indexOf("-x-");
  if (xIndex !== -1) {
    localeStr = localeStr.substring(0, xIndex);
  }
  const uIndex = localeStr.indexOf("-u-");
  if (uIndex === -1) {
    return [localeStr];
  } else {
    let options;
    let selectedStr;
    try {
      options = getCachedDTF(localeStr).resolvedOptions();
      selectedStr = localeStr;
    } catch (e) {
      const smaller = localeStr.substring(0, uIndex);
      options = getCachedDTF(smaller).resolvedOptions();
      selectedStr = smaller;
    }
    const { numberingSystem, calendar } = options;
    return [selectedStr, numberingSystem, calendar];
  }
}
function intlConfigString(localeStr, numberingSystem, outputCalendar) {
  if (outputCalendar || numberingSystem) {
    if (!localeStr.includes("-u-")) {
      localeStr += "-u";
    }
    if (outputCalendar) {
      localeStr += `-ca-${outputCalendar}`;
    }
    if (numberingSystem) {
      localeStr += `-nu-${numberingSystem}`;
    }
    return localeStr;
  } else {
    return localeStr;
  }
}
function mapMonths(f) {
  const ms = [];
  for (let i = 1; i <= 12; i++) {
    const dt = DateTime.utc(2009, i, 1);
    ms.push(f(dt));
  }
  return ms;
}
function mapWeekdays(f) {
  const ms = [];
  for (let i = 1; i <= 7; i++) {
    const dt = DateTime.utc(2016, 11, 13 + i);
    ms.push(f(dt));
  }
  return ms;
}
function listStuff(loc, length, englishFn, intlFn) {
  const mode = loc.listingMode();
  if (mode === "error") {
    return null;
  } else if (mode === "en") {
    return englishFn(length);
  } else {
    return intlFn(length);
  }
}
function supportsFastNumbers(loc) {
  if (loc.numberingSystem && loc.numberingSystem !== "latn") {
    return false;
  } else {
    return loc.numberingSystem === "latn" || !loc.locale || loc.locale.startsWith("en") || new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn";
  }
}
var intlLFCache, intlDTCache, intlNumCache, intlRelCache, sysLocaleCache, weekInfoCache, PolyNumberFormatter, PolyDateFormatter, PolyRelFormatter, fallbackWeekSettings, Locale;
var init_locale = __esm({
  "node_modules/luxon/src/impl/locale.js"() {
    init_util();
    init_english();
    init_settings();
    init_datetime();
    init_IANAZone();
    intlLFCache = {};
    intlDTCache = {};
    intlNumCache = {};
    intlRelCache = {};
    sysLocaleCache = null;
    weekInfoCache = {};
    PolyNumberFormatter = class {
      constructor(intl, forceSimple, opts) {
        this.padTo = opts.padTo || 0;
        this.floor = opts.floor || false;
        const { padTo, floor, ...otherOpts } = opts;
        if (!forceSimple || Object.keys(otherOpts).length > 0) {
          const intlOpts = { useGrouping: false, ...opts };
          if (opts.padTo > 0)
            intlOpts.minimumIntegerDigits = opts.padTo;
          this.inf = getCachedINF(intl, intlOpts);
        }
      }
      format(i) {
        if (this.inf) {
          const fixed = this.floor ? Math.floor(i) : i;
          return this.inf.format(fixed);
        } else {
          const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);
          return padStart(fixed, this.padTo);
        }
      }
    };
    PolyDateFormatter = class {
      constructor(dt, intl, opts) {
        this.opts = opts;
        this.originalZone = void 0;
        let z = void 0;
        if (this.opts.timeZone) {
          this.dt = dt;
        } else if (dt.zone.type === "fixed") {
          const gmtOffset = -1 * (dt.offset / 60);
          const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;
          if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {
            z = offsetZ;
            this.dt = dt;
          } else {
            z = "UTC";
            this.dt = dt.offset === 0 ? dt : dt.setZone("UTC").plus({ minutes: dt.offset });
            this.originalZone = dt.zone;
          }
        } else if (dt.zone.type === "system") {
          this.dt = dt;
        } else if (dt.zone.type === "iana") {
          this.dt = dt;
          z = dt.zone.name;
        } else {
          z = "UTC";
          this.dt = dt.setZone("UTC").plus({ minutes: dt.offset });
          this.originalZone = dt.zone;
        }
        const intlOpts = { ...this.opts };
        intlOpts.timeZone = intlOpts.timeZone || z;
        this.dtf = getCachedDTF(intl, intlOpts);
      }
      format() {
        if (this.originalZone) {
          return this.formatToParts().map(({ value }) => value).join("");
        }
        return this.dtf.format(this.dt.toJSDate());
      }
      formatToParts() {
        const parts = this.dtf.formatToParts(this.dt.toJSDate());
        if (this.originalZone) {
          return parts.map((part) => {
            if (part.type === "timeZoneName") {
              const offsetName = this.originalZone.offsetName(this.dt.ts, {
                locale: this.dt.locale,
                format: this.opts.timeZoneName
              });
              return {
                ...part,
                value: offsetName
              };
            } else {
              return part;
            }
          });
        }
        return parts;
      }
      resolvedOptions() {
        return this.dtf.resolvedOptions();
      }
    };
    PolyRelFormatter = class {
      constructor(intl, isEnglish, opts) {
        this.opts = { style: "long", ...opts };
        if (!isEnglish && hasRelative()) {
          this.rtf = getCachedRTF(intl, opts);
        }
      }
      format(count, unit) {
        if (this.rtf) {
          return this.rtf.format(count, unit);
        } else {
          return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
        }
      }
      formatToParts(count, unit) {
        if (this.rtf) {
          return this.rtf.formatToParts(count, unit);
        } else {
          return [];
        }
      }
    };
    fallbackWeekSettings = {
      firstDay: 1,
      minimalDays: 4,
      weekend: [6, 7]
    };
    Locale = class _Locale {
      static fromOpts(opts) {
        return _Locale.create(
          opts.locale,
          opts.numberingSystem,
          opts.outputCalendar,
          opts.weekSettings,
          opts.defaultToEN
        );
      }
      static create(locale, numberingSystem, outputCalendar, weekSettings, defaultToEN = false) {
        const specifiedLocale = locale || Settings.defaultLocale;
        const localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale());
        const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;
        const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
        const weekSettingsR = validateWeekSettings(weekSettings) || Settings.defaultWeekSettings;
        return new _Locale(localeR, numberingSystemR, outputCalendarR, weekSettingsR, specifiedLocale);
      }
      static resetCache() {
        sysLocaleCache = null;
        intlDTCache = {};
        intlNumCache = {};
        intlRelCache = {};
      }
      static fromObject({ locale, numberingSystem, outputCalendar, weekSettings } = {}) {
        return _Locale.create(locale, numberingSystem, outputCalendar, weekSettings);
      }
      constructor(locale, numbering, outputCalendar, weekSettings, specifiedLocale) {
        const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);
        this.locale = parsedLocale;
        this.numberingSystem = numbering || parsedNumberingSystem || null;
        this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
        this.weekSettings = weekSettings;
        this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);
        this.weekdaysCache = { format: {}, standalone: {} };
        this.monthsCache = { format: {}, standalone: {} };
        this.meridiemCache = null;
        this.eraCache = {};
        this.specifiedLocale = specifiedLocale;
        this.fastNumbersCached = null;
      }
      get fastNumbers() {
        if (this.fastNumbersCached == null) {
          this.fastNumbersCached = supportsFastNumbers(this);
        }
        return this.fastNumbersCached;
      }
      listingMode() {
        const isActuallyEn = this.isEnglish();
        const hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === "latn") && (this.outputCalendar === null || this.outputCalendar === "gregory");
        return isActuallyEn && hasNoWeirdness ? "en" : "intl";
      }
      clone(alts) {
        if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
          return this;
        } else {
          return _Locale.create(
            alts.locale || this.specifiedLocale,
            alts.numberingSystem || this.numberingSystem,
            alts.outputCalendar || this.outputCalendar,
            validateWeekSettings(alts.weekSettings) || this.weekSettings,
            alts.defaultToEN || false
          );
        }
      }
      redefaultToEN(alts = {}) {
        return this.clone({ ...alts, defaultToEN: true });
      }
      redefaultToSystem(alts = {}) {
        return this.clone({ ...alts, defaultToEN: false });
      }
      months(length, format = false) {
        return listStuff(this, length, months, () => {
          const intl = format ? { month: length, day: "numeric" } : { month: length }, formatStr = format ? "format" : "standalone";
          if (!this.monthsCache[formatStr][length]) {
            this.monthsCache[formatStr][length] = mapMonths((dt) => this.extract(dt, intl, "month"));
          }
          return this.monthsCache[formatStr][length];
        });
      }
      weekdays(length, format = false) {
        return listStuff(this, length, weekdays, () => {
          const intl = format ? { weekday: length, year: "numeric", month: "long", day: "numeric" } : { weekday: length }, formatStr = format ? "format" : "standalone";
          if (!this.weekdaysCache[formatStr][length]) {
            this.weekdaysCache[formatStr][length] = mapWeekdays(
              (dt) => this.extract(dt, intl, "weekday")
            );
          }
          return this.weekdaysCache[formatStr][length];
        });
      }
      meridiems() {
        return listStuff(
          this,
          void 0,
          () => meridiems,
          () => {
            if (!this.meridiemCache) {
              const intl = { hour: "numeric", hourCycle: "h12" };
              this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(
                (dt) => this.extract(dt, intl, "dayperiod")
              );
            }
            return this.meridiemCache;
          }
        );
      }
      eras(length) {
        return listStuff(this, length, eras, () => {
          const intl = { era: length };
          if (!this.eraCache[length]) {
            this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(
              (dt) => this.extract(dt, intl, "era")
            );
          }
          return this.eraCache[length];
        });
      }
      extract(dt, intlOpts, field) {
        const df = this.dtFormatter(dt, intlOpts), results = df.formatToParts(), matching = results.find((m) => m.type.toLowerCase() === field);
        return matching ? matching.value : null;
      }
      numberFormatter(opts = {}) {
        return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
      }
      dtFormatter(dt, intlOpts = {}) {
        return new PolyDateFormatter(dt, this.intl, intlOpts);
      }
      relFormatter(opts = {}) {
        return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
      }
      listFormatter(opts = {}) {
        return getCachedLF(this.intl, opts);
      }
      isEnglish() {
        return this.locale === "en" || this.locale.toLowerCase() === "en-us" || new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us");
      }
      getWeekSettings() {
        if (this.weekSettings) {
          return this.weekSettings;
        } else if (!hasLocaleWeekInfo()) {
          return fallbackWeekSettings;
        } else {
          return getCachedWeekInfo(this.locale);
        }
      }
      getStartOfWeek() {
        return this.getWeekSettings().firstDay;
      }
      getMinDaysInFirstWeek() {
        return this.getWeekSettings().minimalDays;
      }
      getWeekendDays() {
        return this.getWeekSettings().weekend;
      }
      equals(other) {
        return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;
      }
    };
  }
});

// node_modules/luxon/src/zones/fixedOffsetZone.js
var singleton2, FixedOffsetZone;
var init_fixedOffsetZone = __esm({
  "node_modules/luxon/src/zones/fixedOffsetZone.js"() {
    init_util();
    init_zone();
    singleton2 = null;
    FixedOffsetZone = class _FixedOffsetZone extends Zone {
      /**
       * Get a singleton instance of UTC
       * @return {FixedOffsetZone}
       */
      static get utcInstance() {
        if (singleton2 === null) {
          singleton2 = new _FixedOffsetZone(0);
        }
        return singleton2;
      }
      /**
       * Get an instance with a specified offset
       * @param {number} offset - The offset in minutes
       * @return {FixedOffsetZone}
       */
      static instance(offset2) {
        return offset2 === 0 ? _FixedOffsetZone.utcInstance : new _FixedOffsetZone(offset2);
      }
      /**
       * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
       * @param {string} s - The offset string to parse
       * @example FixedOffsetZone.parseSpecifier("UTC+6")
       * @example FixedOffsetZone.parseSpecifier("UTC+06")
       * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
       * @return {FixedOffsetZone}
       */
      static parseSpecifier(s2) {
        if (s2) {
          const r = s2.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
          if (r) {
            return new _FixedOffsetZone(signedOffset(r[1], r[2]));
          }
        }
        return null;
      }
      constructor(offset2) {
        super();
        this.fixed = offset2;
      }
      /** @override **/
      get type() {
        return "fixed";
      }
      /** @override **/
      get name() {
        return this.fixed === 0 ? "UTC" : `UTC${formatOffset(this.fixed, "narrow")}`;
      }
      get ianaName() {
        if (this.fixed === 0) {
          return "Etc/UTC";
        } else {
          return `Etc/GMT${formatOffset(-this.fixed, "narrow")}`;
        }
      }
      /** @override **/
      offsetName() {
        return this.name;
      }
      /** @override **/
      formatOffset(ts, format) {
        return formatOffset(this.fixed, format);
      }
      /** @override **/
      get isUniversal() {
        return true;
      }
      /** @override **/
      offset() {
        return this.fixed;
      }
      /** @override **/
      equals(otherZone) {
        return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
      }
      /** @override **/
      get isValid() {
        return true;
      }
    };
  }
});

// node_modules/luxon/src/zones/invalidZone.js
var InvalidZone;
var init_invalidZone = __esm({
  "node_modules/luxon/src/zones/invalidZone.js"() {
    init_zone();
    InvalidZone = class extends Zone {
      constructor(zoneName) {
        super();
        this.zoneName = zoneName;
      }
      /** @override **/
      get type() {
        return "invalid";
      }
      /** @override **/
      get name() {
        return this.zoneName;
      }
      /** @override **/
      get isUniversal() {
        return false;
      }
      /** @override **/
      offsetName() {
        return null;
      }
      /** @override **/
      formatOffset() {
        return "";
      }
      /** @override **/
      offset() {
        return NaN;
      }
      /** @override **/
      equals() {
        return false;
      }
      /** @override **/
      get isValid() {
        return false;
      }
    };
  }
});

// node_modules/luxon/src/impl/zoneUtil.js
function normalizeZone(input, defaultZone2) {
  let offset2;
  if (isUndefined(input) || input === null) {
    return defaultZone2;
  } else if (input instanceof Zone) {
    return input;
  } else if (isString(input)) {
    const lowered = input.toLowerCase();
    if (lowered === "default")
      return defaultZone2;
    else if (lowered === "local" || lowered === "system")
      return SystemZone.instance;
    else if (lowered === "utc" || lowered === "gmt")
      return FixedOffsetZone.utcInstance;
    else
      return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);
  } else if (isNumber(input)) {
    return FixedOffsetZone.instance(input);
  } else if (typeof input === "object" && "offset" in input && typeof input.offset === "function") {
    return input;
  } else {
    return new InvalidZone(input);
  }
}
var init_zoneUtil = __esm({
  "node_modules/luxon/src/impl/zoneUtil.js"() {
    init_zone();
    init_IANAZone();
    init_fixedOffsetZone();
    init_invalidZone();
    init_util();
    init_systemZone();
  }
});

// node_modules/luxon/src/settings.js
var now, defaultZone, defaultLocale, defaultNumberingSystem, defaultOutputCalendar, twoDigitCutoffYear, throwOnInvalid, defaultWeekSettings, Settings;
var init_settings = __esm({
  "node_modules/luxon/src/settings.js"() {
    init_systemZone();
    init_IANAZone();
    init_locale();
    init_zoneUtil();
    init_util();
    now = () => Date.now();
    defaultZone = "system";
    defaultLocale = null;
    defaultNumberingSystem = null;
    defaultOutputCalendar = null;
    twoDigitCutoffYear = 60;
    defaultWeekSettings = null;
    Settings = class {
      /**
       * Get the callback for returning the current timestamp.
       * @type {function}
       */
      static get now() {
        return now;
      }
      /**
       * Set the callback for returning the current timestamp.
       * The function should return a number, which will be interpreted as an Epoch millisecond count
       * @type {function}
       * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
       * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
       */
      static set now(n2) {
        now = n2;
      }
      /**
       * Set the default time zone to create DateTimes in. Does not affect existing instances.
       * Use the value "system" to reset this value to the system's time zone.
       * @type {string}
       */
      static set defaultZone(zone) {
        defaultZone = zone;
      }
      /**
       * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.
       * The default value is the system's time zone (the one set on the machine that runs this code).
       * @type {Zone}
       */
      static get defaultZone() {
        return normalizeZone(defaultZone, SystemZone.instance);
      }
      /**
       * Get the default locale to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static get defaultLocale() {
        return defaultLocale;
      }
      /**
       * Set the default locale to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static set defaultLocale(locale) {
        defaultLocale = locale;
      }
      /**
       * Get the default numbering system to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static get defaultNumberingSystem() {
        return defaultNumberingSystem;
      }
      /**
       * Set the default numbering system to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static set defaultNumberingSystem(numberingSystem) {
        defaultNumberingSystem = numberingSystem;
      }
      /**
       * Get the default output calendar to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static get defaultOutputCalendar() {
        return defaultOutputCalendar;
      }
      /**
       * Set the default output calendar to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static set defaultOutputCalendar(outputCalendar) {
        defaultOutputCalendar = outputCalendar;
      }
      /**
       * @typedef {Object} WeekSettings
       * @property {number} firstDay
       * @property {number} minimalDays
       * @property {number[]} weekend
       */
      /**
       * @return {WeekSettings|null}
       */
      static get defaultWeekSettings() {
        return defaultWeekSettings;
      }
      /**
       * Allows overriding the default locale week settings, i.e. the start of the week, the weekend and
       * how many days are required in the first week of a year.
       * Does not affect existing instances.
       *
       * @param {WeekSettings|null} weekSettings
       */
      static set defaultWeekSettings(weekSettings) {
        defaultWeekSettings = validateWeekSettings(weekSettings);
      }
      /**
       * Get the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.
       * @type {number}
       */
      static get twoDigitCutoffYear() {
        return twoDigitCutoffYear;
      }
      /**
       * Set the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.
       * @type {number}
       * @example Settings.twoDigitCutoffYear = 0 // cut-off year is 0, so all 'yy' are interpreted as current century
       * @example Settings.twoDigitCutoffYear = 50 // '49' -> 1949; '50' -> 2050
       * @example Settings.twoDigitCutoffYear = 1950 // interpreted as 50
       * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpreted as 50
       */
      static set twoDigitCutoffYear(cutoffYear) {
        twoDigitCutoffYear = cutoffYear % 100;
      }
      /**
       * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
       * @type {boolean}
       */
      static get throwOnInvalid() {
        return throwOnInvalid;
      }
      /**
       * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
       * @type {boolean}
       */
      static set throwOnInvalid(t) {
        throwOnInvalid = t;
      }
      /**
       * Reset Luxon's global caches. Should only be necessary in testing scenarios.
       * @return {void}
       */
      static resetCaches() {
        Locale.resetCache();
        IANAZone.resetCache();
      }
    };
  }
});

// node_modules/luxon/src/impl/invalid.js
var Invalid;
var init_invalid = __esm({
  "node_modules/luxon/src/impl/invalid.js"() {
    Invalid = class {
      constructor(reason, explanation) {
        this.reason = reason;
        this.explanation = explanation;
      }
      toMessage() {
        if (this.explanation) {
          return `${this.reason}: ${this.explanation}`;
        } else {
          return this.reason;
        }
      }
    };
  }
});

// node_modules/luxon/src/impl/conversions.js
function unitOutOfRange(unit, value) {
  return new Invalid(
    "unit out of range",
    `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`
  );
}
function dayOfWeek(year, month, day) {
  const d = new Date(Date.UTC(year, month - 1, day));
  if (year < 100 && year >= 0) {
    d.setUTCFullYear(d.getUTCFullYear() - 1900);
  }
  const js = d.getUTCDay();
  return js === 0 ? 7 : js;
}
function computeOrdinal(year, month, day) {
  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
}
function uncomputeOrdinal(year, ordinal) {
  const table = isLeapYear(year) ? leapLadder : nonLeapLadder, month0 = table.findIndex((i) => i < ordinal), day = ordinal - table[month0];
  return { month: month0 + 1, day };
}
function isoWeekdayToLocal(isoWeekday, startOfWeek) {
  return (isoWeekday - startOfWeek + 7) % 7 + 1;
}
function gregorianToWeek(gregObj, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const { year, month, day } = gregObj, ordinal = computeOrdinal(year, month, day), weekday = isoWeekdayToLocal(dayOfWeek(year, month, day), startOfWeek);
  let weekNumber = Math.floor((ordinal - weekday + 14 - minDaysInFirstWeek) / 7), weekYear;
  if (weekNumber < 1) {
    weekYear = year - 1;
    weekNumber = weeksInWeekYear(weekYear, minDaysInFirstWeek, startOfWeek);
  } else if (weekNumber > weeksInWeekYear(year, minDaysInFirstWeek, startOfWeek)) {
    weekYear = year + 1;
    weekNumber = 1;
  } else {
    weekYear = year;
  }
  return { weekYear, weekNumber, weekday, ...timeObject(gregObj) };
}
function weekToGregorian(weekData, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const { weekYear, weekNumber, weekday } = weekData, weekdayOfJan4 = isoWeekdayToLocal(dayOfWeek(weekYear, 1, minDaysInFirstWeek), startOfWeek), yearInDays = daysInYear(weekYear);
  let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 7 + minDaysInFirstWeek, year;
  if (ordinal < 1) {
    year = weekYear - 1;
    ordinal += daysInYear(year);
  } else if (ordinal > yearInDays) {
    year = weekYear + 1;
    ordinal -= daysInYear(weekYear);
  } else {
    year = weekYear;
  }
  const { month, day } = uncomputeOrdinal(year, ordinal);
  return { year, month, day, ...timeObject(weekData) };
}
function gregorianToOrdinal(gregData) {
  const { year, month, day } = gregData;
  const ordinal = computeOrdinal(year, month, day);
  return { year, ordinal, ...timeObject(gregData) };
}
function ordinalToGregorian(ordinalData) {
  const { year, ordinal } = ordinalData;
  const { month, day } = uncomputeOrdinal(year, ordinal);
  return { year, month, day, ...timeObject(ordinalData) };
}
function usesLocalWeekValues(obj, loc) {
  const hasLocaleWeekData = !isUndefined(obj.localWeekday) || !isUndefined(obj.localWeekNumber) || !isUndefined(obj.localWeekYear);
  if (hasLocaleWeekData) {
    const hasIsoWeekData = !isUndefined(obj.weekday) || !isUndefined(obj.weekNumber) || !isUndefined(obj.weekYear);
    if (hasIsoWeekData) {
      throw new ConflictingSpecificationError(
        "Cannot mix locale-based week fields with ISO-based week fields"
      );
    }
    if (!isUndefined(obj.localWeekday))
      obj.weekday = obj.localWeekday;
    if (!isUndefined(obj.localWeekNumber))
      obj.weekNumber = obj.localWeekNumber;
    if (!isUndefined(obj.localWeekYear))
      obj.weekYear = obj.localWeekYear;
    delete obj.localWeekday;
    delete obj.localWeekNumber;
    delete obj.localWeekYear;
    return {
      minDaysInFirstWeek: loc.getMinDaysInFirstWeek(),
      startOfWeek: loc.getStartOfWeek()
    };
  } else {
    return { minDaysInFirstWeek: 4, startOfWeek: 1 };
  }
}
function hasInvalidWeekData(obj, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const validYear = isInteger(obj.weekYear), validWeek = integerBetween(
    obj.weekNumber,
    1,
    weeksInWeekYear(obj.weekYear, minDaysInFirstWeek, startOfWeek)
  ), validWeekday = integerBetween(obj.weekday, 1, 7);
  if (!validYear) {
    return unitOutOfRange("weekYear", obj.weekYear);
  } else if (!validWeek) {
    return unitOutOfRange("week", obj.weekNumber);
  } else if (!validWeekday) {
    return unitOutOfRange("weekday", obj.weekday);
  } else
    return false;
}
function hasInvalidOrdinalData(obj) {
  const validYear = isInteger(obj.year), validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));
  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validOrdinal) {
    return unitOutOfRange("ordinal", obj.ordinal);
  } else
    return false;
}
function hasInvalidGregorianData(obj) {
  const validYear = isInteger(obj.year), validMonth = integerBetween(obj.month, 1, 12), validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));
  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validMonth) {
    return unitOutOfRange("month", obj.month);
  } else if (!validDay) {
    return unitOutOfRange("day", obj.day);
  } else
    return false;
}
function hasInvalidTimeData(obj) {
  const { hour, minute, second, millisecond } = obj;
  const validHour = integerBetween(hour, 0, 23) || hour === 24 && minute === 0 && second === 0 && millisecond === 0, validMinute = integerBetween(minute, 0, 59), validSecond = integerBetween(second, 0, 59), validMillisecond = integerBetween(millisecond, 0, 999);
  if (!validHour) {
    return unitOutOfRange("hour", hour);
  } else if (!validMinute) {
    return unitOutOfRange("minute", minute);
  } else if (!validSecond) {
    return unitOutOfRange("second", second);
  } else if (!validMillisecond) {
    return unitOutOfRange("millisecond", millisecond);
  } else
    return false;
}
var nonLeapLadder, leapLadder;
var init_conversions = __esm({
  "node_modules/luxon/src/impl/conversions.js"() {
    init_util();
    init_invalid();
    init_errors();
    nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
    leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];
  }
});

// node_modules/luxon/src/impl/util.js
function isUndefined(o) {
  return typeof o === "undefined";
}
function isNumber(o) {
  return typeof o === "number";
}
function isInteger(o) {
  return typeof o === "number" && o % 1 === 0;
}
function isString(o) {
  return typeof o === "string";
}
function isDate(o) {
  return Object.prototype.toString.call(o) === "[object Date]";
}
function hasRelative() {
  try {
    return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
  } catch (e) {
    return false;
  }
}
function hasLocaleWeekInfo() {
  try {
    return typeof Intl !== "undefined" && !!Intl.Locale && ("weekInfo" in Intl.Locale.prototype || "getWeekInfo" in Intl.Locale.prototype);
  } catch (e) {
    return false;
  }
}
function maybeArray(thing) {
  return Array.isArray(thing) ? thing : [thing];
}
function bestBy(arr, by, compare) {
  if (arr.length === 0) {
    return void 0;
  }
  return arr.reduce((best, next) => {
    const pair = [by(next), next];
    if (!best) {
      return pair;
    } else if (compare(best[0], pair[0]) === best[0]) {
      return best;
    } else {
      return pair;
    }
  }, null)[1];
}
function pick(obj, keys) {
  return keys.reduce((a, k) => {
    a[k] = obj[k];
    return a;
  }, {});
}
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
function validateWeekSettings(settings) {
  if (settings == null) {
    return null;
  } else if (typeof settings !== "object") {
    throw new InvalidArgumentError("Week settings must be an object");
  } else {
    if (!integerBetween(settings.firstDay, 1, 7) || !integerBetween(settings.minimalDays, 1, 7) || !Array.isArray(settings.weekend) || settings.weekend.some((v) => !integerBetween(v, 1, 7))) {
      throw new InvalidArgumentError("Invalid week settings");
    }
    return {
      firstDay: settings.firstDay,
      minimalDays: settings.minimalDays,
      weekend: Array.from(settings.weekend)
    };
  }
}
function integerBetween(thing, bottom, top) {
  return isInteger(thing) && thing >= bottom && thing <= top;
}
function floorMod(x, n2) {
  return x - n2 * Math.floor(x / n2);
}
function padStart(input, n2 = 2) {
  const isNeg = input < 0;
  let padded;
  if (isNeg) {
    padded = "-" + ("" + -input).padStart(n2, "0");
  } else {
    padded = ("" + input).padStart(n2, "0");
  }
  return padded;
}
function parseInteger(string) {
  if (isUndefined(string) || string === null || string === "") {
    return void 0;
  } else {
    return parseInt(string, 10);
  }
}
function parseFloating(string) {
  if (isUndefined(string) || string === null || string === "") {
    return void 0;
  } else {
    return parseFloat(string);
  }
}
function parseMillis(fraction) {
  if (isUndefined(fraction) || fraction === null || fraction === "") {
    return void 0;
  } else {
    const f = parseFloat("0." + fraction) * 1e3;
    return Math.floor(f);
  }
}
function roundTo(number, digits, towardZero = false) {
  const factor = 10 ** digits, rounder = towardZero ? Math.trunc : Math.round;
  return rounder(number * factor) / factor;
}
function isLeapYear(year) {
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}
function daysInMonth(year, month) {
  const modMonth = floorMod(month - 1, 12) + 1, modYear = year + (month - modMonth) / 12;
  if (modMonth === 2) {
    return isLeapYear(modYear) ? 29 : 28;
  } else {
    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
  }
}
function objToLocalTS(obj) {
  let d = Date.UTC(
    obj.year,
    obj.month - 1,
    obj.day,
    obj.hour,
    obj.minute,
    obj.second,
    obj.millisecond
  );
  if (obj.year < 100 && obj.year >= 0) {
    d = new Date(d);
    d.setUTCFullYear(obj.year, obj.month - 1, obj.day);
  }
  return +d;
}
function firstWeekOffset(year, minDaysInFirstWeek, startOfWeek) {
  const fwdlw = isoWeekdayToLocal(dayOfWeek(year, 1, minDaysInFirstWeek), startOfWeek);
  return -fwdlw + minDaysInFirstWeek - 1;
}
function weeksInWeekYear(weekYear, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const weekOffset = firstWeekOffset(weekYear, minDaysInFirstWeek, startOfWeek);
  const weekOffsetNext = firstWeekOffset(weekYear + 1, minDaysInFirstWeek, startOfWeek);
  return (daysInYear(weekYear) - weekOffset + weekOffsetNext) / 7;
}
function untruncateYear(year) {
  if (year > 99) {
    return year;
  } else
    return year > Settings.twoDigitCutoffYear ? 1900 + year : 2e3 + year;
}
function parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {
  const date = new Date(ts), intlOpts = {
    hourCycle: "h23",
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit"
  };
  if (timeZone) {
    intlOpts.timeZone = timeZone;
  }
  const modified = { timeZoneName: offsetFormat, ...intlOpts };
  const parsed = new Intl.DateTimeFormat(locale, modified).formatToParts(date).find((m) => m.type.toLowerCase() === "timezonename");
  return parsed ? parsed.value : null;
}
function signedOffset(offHourStr, offMinuteStr) {
  let offHour = parseInt(offHourStr, 10);
  if (Number.isNaN(offHour)) {
    offHour = 0;
  }
  const offMin = parseInt(offMinuteStr, 10) || 0, offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
  return offHour * 60 + offMinSigned;
}
function asNumber(value) {
  const numericValue = Number(value);
  if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue))
    throw new InvalidArgumentError(`Invalid unit value ${value}`);
  return numericValue;
}
function normalizeObject(obj, normalizer) {
  const normalized = {};
  for (const u in obj) {
    if (hasOwnProperty(obj, u)) {
      const v = obj[u];
      if (v === void 0 || v === null)
        continue;
      normalized[normalizer(u)] = asNumber(v);
    }
  }
  return normalized;
}
function formatOffset(offset2, format) {
  const hours = Math.trunc(Math.abs(offset2 / 60)), minutes = Math.trunc(Math.abs(offset2 % 60)), sign = offset2 >= 0 ? "+" : "-";
  switch (format) {
    case "short":
      return `${sign}${padStart(hours, 2)}:${padStart(minutes, 2)}`;
    case "narrow":
      return `${sign}${hours}${minutes > 0 ? `:${minutes}` : ""}`;
    case "techie":
      return `${sign}${padStart(hours, 2)}${padStart(minutes, 2)}`;
    default:
      throw new RangeError(`Value format ${format} is out of range for property format`);
  }
}
function timeObject(obj) {
  return pick(obj, ["hour", "minute", "second", "millisecond"]);
}
var init_util = __esm({
  "node_modules/luxon/src/impl/util.js"() {
    init_errors();
    init_settings();
    init_conversions();
  }
});

// node_modules/luxon/src/impl/english.js
function months(length) {
  switch (length) {
    case "narrow":
      return [...monthsNarrow];
    case "short":
      return [...monthsShort];
    case "long":
      return [...monthsLong];
    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
    case "2-digit":
      return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
    default:
      return null;
  }
}
function weekdays(length) {
  switch (length) {
    case "narrow":
      return [...weekdaysNarrow];
    case "short":
      return [...weekdaysShort];
    case "long":
      return [...weekdaysLong];
    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7"];
    default:
      return null;
  }
}
function eras(length) {
  switch (length) {
    case "narrow":
      return [...erasNarrow];
    case "short":
      return [...erasShort];
    case "long":
      return [...erasLong];
    default:
      return null;
  }
}
function meridiemForDateTime(dt) {
  return meridiems[dt.hour < 12 ? 0 : 1];
}
function weekdayForDateTime(dt, length) {
  return weekdays(length)[dt.weekday - 1];
}
function monthForDateTime(dt, length) {
  return months(length)[dt.month - 1];
}
function eraForDateTime(dt, length) {
  return eras(length)[dt.year < 0 ? 0 : 1];
}
function formatRelativeTime(unit, count, numeric = "always", narrow = false) {
  const units = {
    years: ["year", "yr."],
    quarters: ["quarter", "qtr."],
    months: ["month", "mo."],
    weeks: ["week", "wk."],
    days: ["day", "day", "days"],
    hours: ["hour", "hr."],
    minutes: ["minute", "min."],
    seconds: ["second", "sec."]
  };
  const lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;
  if (numeric === "auto" && lastable) {
    const isDay = unit === "days";
    switch (count) {
      case 1:
        return isDay ? "tomorrow" : `next ${units[unit][0]}`;
      case -1:
        return isDay ? "yesterday" : `last ${units[unit][0]}`;
      case 0:
        return isDay ? "today" : `this ${units[unit][0]}`;
      default:
    }
  }
  const isInPast = Object.is(count, -0) || count < 0, fmtValue = Math.abs(count), singular = fmtValue === 1, lilUnits = units[unit], fmtUnit = narrow ? singular ? lilUnits[1] : lilUnits[2] || lilUnits[1] : singular ? units[unit][0] : unit;
  return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;
}
var monthsLong, monthsShort, monthsNarrow, weekdaysLong, weekdaysShort, weekdaysNarrow, meridiems, erasLong, erasShort, erasNarrow;
var init_english = __esm({
  "node_modules/luxon/src/impl/english.js"() {
    init_formats();
    init_util();
    monthsLong = [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ];
    monthsShort = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];
    monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];
    weekdaysLong = [
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday",
      "Sunday"
    ];
    weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
    weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];
    meridiems = ["AM", "PM"];
    erasLong = ["Before Christ", "Anno Domini"];
    erasShort = ["BC", "AD"];
    erasNarrow = ["B", "A"];
  }
});

// node_modules/luxon/src/impl/formatter.js
function stringifyTokens(splits, tokenToString) {
  let s2 = "";
  for (const token of splits) {
    if (token.literal) {
      s2 += token.val;
    } else {
      s2 += tokenToString(token.val);
    }
  }
  return s2;
}
var macroTokenToFormatOpts, Formatter;
var init_formatter = __esm({
  "node_modules/luxon/src/impl/formatter.js"() {
    init_english();
    init_formats();
    init_util();
    macroTokenToFormatOpts = {
      D: DATE_SHORT,
      DD: DATE_MED,
      DDD: DATE_FULL,
      DDDD: DATE_HUGE,
      t: TIME_SIMPLE,
      tt: TIME_WITH_SECONDS,
      ttt: TIME_WITH_SHORT_OFFSET,
      tttt: TIME_WITH_LONG_OFFSET,
      T: TIME_24_SIMPLE,
      TT: TIME_24_WITH_SECONDS,
      TTT: TIME_24_WITH_SHORT_OFFSET,
      TTTT: TIME_24_WITH_LONG_OFFSET,
      f: DATETIME_SHORT,
      ff: DATETIME_MED,
      fff: DATETIME_FULL,
      ffff: DATETIME_HUGE,
      F: DATETIME_SHORT_WITH_SECONDS,
      FF: DATETIME_MED_WITH_SECONDS,
      FFF: DATETIME_FULL_WITH_SECONDS,
      FFFF: DATETIME_HUGE_WITH_SECONDS
    };
    Formatter = class _Formatter {
      static create(locale, opts = {}) {
        return new _Formatter(locale, opts);
      }
      static parseFormat(fmt) {
        let current = null, currentFull = "", bracketed = false;
        const splits = [];
        for (let i = 0; i < fmt.length; i++) {
          const c = fmt.charAt(i);
          if (c === "'") {
            if (currentFull.length > 0) {
              splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
            }
            current = null;
            currentFull = "";
            bracketed = !bracketed;
          } else if (bracketed) {
            currentFull += c;
          } else if (c === current) {
            currentFull += c;
          } else {
            if (currentFull.length > 0) {
              splits.push({ literal: /^\s+$/.test(currentFull), val: currentFull });
            }
            currentFull = c;
            current = c;
          }
        }
        if (currentFull.length > 0) {
          splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
        }
        return splits;
      }
      static macroTokenToFormatOpts(token) {
        return macroTokenToFormatOpts[token];
      }
      constructor(locale, formatOpts) {
        this.opts = formatOpts;
        this.loc = locale;
        this.systemLoc = null;
      }
      formatWithSystemDefault(dt, opts) {
        if (this.systemLoc === null) {
          this.systemLoc = this.loc.redefaultToSystem();
        }
        const df = this.systemLoc.dtFormatter(dt, { ...this.opts, ...opts });
        return df.format();
      }
      dtFormatter(dt, opts = {}) {
        return this.loc.dtFormatter(dt, { ...this.opts, ...opts });
      }
      formatDateTime(dt, opts) {
        return this.dtFormatter(dt, opts).format();
      }
      formatDateTimeParts(dt, opts) {
        return this.dtFormatter(dt, opts).formatToParts();
      }
      formatInterval(interval, opts) {
        const df = this.dtFormatter(interval.start, opts);
        return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());
      }
      resolvedOptions(dt, opts) {
        return this.dtFormatter(dt, opts).resolvedOptions();
      }
      num(n2, p = 0) {
        if (this.opts.forceSimple) {
          return padStart(n2, p);
        }
        const opts = { ...this.opts };
        if (p > 0) {
          opts.padTo = p;
        }
        return this.loc.numberFormatter(opts).format(n2);
      }
      formatDateTimeFromString(dt, fmt) {
        const knownEnglish = this.loc.listingMode() === "en", useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory", string = (opts, extract) => this.loc.extract(dt, opts, extract), formatOffset2 = (opts) => {
          if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
            return "Z";
          }
          return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
        }, meridiem = () => knownEnglish ? meridiemForDateTime(dt) : string({ hour: "numeric", hourCycle: "h12" }, "dayperiod"), month = (length, standalone) => knownEnglish ? monthForDateTime(dt, length) : string(standalone ? { month: length } : { month: length, day: "numeric" }, "month"), weekday = (length, standalone) => knownEnglish ? weekdayForDateTime(dt, length) : string(
          standalone ? { weekday: length } : { weekday: length, month: "long", day: "numeric" },
          "weekday"
        ), maybeMacro = (token) => {
          const formatOpts = _Formatter.macroTokenToFormatOpts(token);
          if (formatOpts) {
            return this.formatWithSystemDefault(dt, formatOpts);
          } else {
            return token;
          }
        }, era = (length) => knownEnglish ? eraForDateTime(dt, length) : string({ era: length }, "era"), tokenToString = (token) => {
          switch (token) {
            case "S":
              return this.num(dt.millisecond);
            case "u":
            case "SSS":
              return this.num(dt.millisecond, 3);
            case "s":
              return this.num(dt.second);
            case "ss":
              return this.num(dt.second, 2);
            case "uu":
              return this.num(Math.floor(dt.millisecond / 10), 2);
            case "uuu":
              return this.num(Math.floor(dt.millisecond / 100));
            case "m":
              return this.num(dt.minute);
            case "mm":
              return this.num(dt.minute, 2);
            case "h":
              return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);
            case "hh":
              return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);
            case "H":
              return this.num(dt.hour);
            case "HH":
              return this.num(dt.hour, 2);
            case "Z":
              return formatOffset2({ format: "narrow", allowZ: this.opts.allowZ });
            case "ZZ":
              return formatOffset2({ format: "short", allowZ: this.opts.allowZ });
            case "ZZZ":
              return formatOffset2({ format: "techie", allowZ: this.opts.allowZ });
            case "ZZZZ":
              return dt.zone.offsetName(dt.ts, { format: "short", locale: this.loc.locale });
            case "ZZZZZ":
              return dt.zone.offsetName(dt.ts, { format: "long", locale: this.loc.locale });
            case "z":
              return dt.zoneName;
            case "a":
              return meridiem();
            case "d":
              return useDateTimeFormatter ? string({ day: "numeric" }, "day") : this.num(dt.day);
            case "dd":
              return useDateTimeFormatter ? string({ day: "2-digit" }, "day") : this.num(dt.day, 2);
            case "c":
              return this.num(dt.weekday);
            case "ccc":
              return weekday("short", true);
            case "cccc":
              return weekday("long", true);
            case "ccccc":
              return weekday("narrow", true);
            case "E":
              return this.num(dt.weekday);
            case "EEE":
              return weekday("short", false);
            case "EEEE":
              return weekday("long", false);
            case "EEEEE":
              return weekday("narrow", false);
            case "L":
              return useDateTimeFormatter ? string({ month: "numeric", day: "numeric" }, "month") : this.num(dt.month);
            case "LL":
              return useDateTimeFormatter ? string({ month: "2-digit", day: "numeric" }, "month") : this.num(dt.month, 2);
            case "LLL":
              return month("short", true);
            case "LLLL":
              return month("long", true);
            case "LLLLL":
              return month("narrow", true);
            case "M":
              return useDateTimeFormatter ? string({ month: "numeric" }, "month") : this.num(dt.month);
            case "MM":
              return useDateTimeFormatter ? string({ month: "2-digit" }, "month") : this.num(dt.month, 2);
            case "MMM":
              return month("short", false);
            case "MMMM":
              return month("long", false);
            case "MMMMM":
              return month("narrow", false);
            case "y":
              return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt.year);
            case "yy":
              return useDateTimeFormatter ? string({ year: "2-digit" }, "year") : this.num(dt.year.toString().slice(-2), 2);
            case "yyyy":
              return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt.year, 4);
            case "yyyyyy":
              return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt.year, 6);
            case "G":
              return era("short");
            case "GG":
              return era("long");
            case "GGGGG":
              return era("narrow");
            case "kk":
              return this.num(dt.weekYear.toString().slice(-2), 2);
            case "kkkk":
              return this.num(dt.weekYear, 4);
            case "W":
              return this.num(dt.weekNumber);
            case "WW":
              return this.num(dt.weekNumber, 2);
            case "n":
              return this.num(dt.localWeekNumber);
            case "nn":
              return this.num(dt.localWeekNumber, 2);
            case "ii":
              return this.num(dt.localWeekYear.toString().slice(-2), 2);
            case "iiii":
              return this.num(dt.localWeekYear, 4);
            case "o":
              return this.num(dt.ordinal);
            case "ooo":
              return this.num(dt.ordinal, 3);
            case "q":
              return this.num(dt.quarter);
            case "qq":
              return this.num(dt.quarter, 2);
            case "X":
              return this.num(Math.floor(dt.ts / 1e3));
            case "x":
              return this.num(dt.ts);
            default:
              return maybeMacro(token);
          }
        };
        return stringifyTokens(_Formatter.parseFormat(fmt), tokenToString);
      }
      formatDurationFromString(dur, fmt) {
        const tokenToField = (token) => {
          switch (token[0]) {
            case "S":
              return "millisecond";
            case "s":
              return "second";
            case "m":
              return "minute";
            case "h":
              return "hour";
            case "d":
              return "day";
            case "w":
              return "week";
            case "M":
              return "month";
            case "y":
              return "year";
            default:
              return null;
          }
        }, tokenToString = (lildur) => (token) => {
          const mapped = tokenToField(token);
          if (mapped) {
            return this.num(lildur.get(mapped), token.length);
          } else {
            return token;
          }
        }, tokens = _Formatter.parseFormat(fmt), realTokens = tokens.reduce(
          (found, { literal, val }) => literal ? found : found.concat(val),
          []
        ), collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t) => t));
        return stringifyTokens(tokens, tokenToString(collapsed));
      }
    };
  }
});

// node_modules/luxon/src/impl/regexParser.js
function combineRegexes(...regexes) {
  const full = regexes.reduce((f, r) => f + r.source, "");
  return RegExp(`^${full}$`);
}
function combineExtractors(...extractors) {
  return (m) => extractors.reduce(
    ([mergedVals, mergedZone, cursor], ex) => {
      const [val, zone, next] = ex(m, cursor);
      return [{ ...mergedVals, ...val }, zone || mergedZone, next];
    },
    [{}, null, 1]
  ).slice(0, 2);
}
function parse(s2, ...patterns) {
  if (s2 == null) {
    return [null, null];
  }
  for (const [regex, extractor] of patterns) {
    const m = regex.exec(s2);
    if (m) {
      return extractor(m);
    }
  }
  return [null, null];
}
function simpleParse(...keys) {
  return (match2, cursor) => {
    const ret = {};
    let i;
    for (i = 0; i < keys.length; i++) {
      ret[keys[i]] = parseInteger(match2[cursor + i]);
    }
    return [ret, null, cursor + i];
  };
}
function int(match2, pos, fallback) {
  const m = match2[pos];
  return isUndefined(m) ? fallback : parseInteger(m);
}
function extractISOYmd(match2, cursor) {
  const item = {
    year: int(match2, cursor),
    month: int(match2, cursor + 1, 1),
    day: int(match2, cursor + 2, 1)
  };
  return [item, null, cursor + 3];
}
function extractISOTime(match2, cursor) {
  const item = {
    hours: int(match2, cursor, 0),
    minutes: int(match2, cursor + 1, 0),
    seconds: int(match2, cursor + 2, 0),
    milliseconds: parseMillis(match2[cursor + 3])
  };
  return [item, null, cursor + 4];
}
function extractISOOffset(match2, cursor) {
  const local = !match2[cursor] && !match2[cursor + 1], fullOffset = signedOffset(match2[cursor + 1], match2[cursor + 2]), zone = local ? null : FixedOffsetZone.instance(fullOffset);
  return [{}, zone, cursor + 3];
}
function extractIANAZone(match2, cursor) {
  const zone = match2[cursor] ? IANAZone.create(match2[cursor]) : null;
  return [{}, zone, cursor + 1];
}
function extractISODuration(match2) {
  const [s2, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] = match2;
  const hasNegativePrefix = s2[0] === "-";
  const negativeSeconds = secondStr && secondStr[0] === "-";
  const maybeNegate = (num, force = false) => num !== void 0 && (force || num && hasNegativePrefix) ? -num : num;
  return [
    {
      years: maybeNegate(parseFloating(yearStr)),
      months: maybeNegate(parseFloating(monthStr)),
      weeks: maybeNegate(parseFloating(weekStr)),
      days: maybeNegate(parseFloating(dayStr)),
      hours: maybeNegate(parseFloating(hourStr)),
      minutes: maybeNegate(parseFloating(minuteStr)),
      seconds: maybeNegate(parseFloating(secondStr), secondStr === "-0"),
      milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds)
    }
  ];
}
function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  const result = {
    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
    month: monthsShort.indexOf(monthStr) + 1,
    day: parseInteger(dayStr),
    hour: parseInteger(hourStr),
    minute: parseInteger(minuteStr)
  };
  if (secondStr)
    result.second = parseInteger(secondStr);
  if (weekdayStr) {
    result.weekday = weekdayStr.length > 3 ? weekdaysLong.indexOf(weekdayStr) + 1 : weekdaysShort.indexOf(weekdayStr) + 1;
  }
  return result;
}
function extractRFC2822(match2) {
  const [
    ,
    weekdayStr,
    dayStr,
    monthStr,
    yearStr,
    hourStr,
    minuteStr,
    secondStr,
    obsOffset,
    milOffset,
    offHourStr,
    offMinuteStr
  ] = match2, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  let offset2;
  if (obsOffset) {
    offset2 = obsOffsets[obsOffset];
  } else if (milOffset) {
    offset2 = 0;
  } else {
    offset2 = signedOffset(offHourStr, offMinuteStr);
  }
  return [result, new FixedOffsetZone(offset2)];
}
function preprocessRFC2822(s2) {
  return s2.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").trim();
}
function extractRFC1123Or850(match2) {
  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match2, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}
function extractASCII(match2) {
  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match2, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}
function parseISODate(s2) {
  return parse(
    s2,
    [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
    [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset],
    [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime],
    [isoTimeCombinedRegex, extractISOTimeAndOffset]
  );
}
function parseRFC2822Date(s2) {
  return parse(preprocessRFC2822(s2), [rfc2822, extractRFC2822]);
}
function parseHTTPDate(s2) {
  return parse(
    s2,
    [rfc1123, extractRFC1123Or850],
    [rfc850, extractRFC1123Or850],
    [ascii, extractASCII]
  );
}
function parseISODuration(s2) {
  return parse(s2, [isoDuration, extractISODuration]);
}
function parseISOTimeOnly(s2) {
  return parse(s2, [isoTimeOnly, extractISOTimeOnly]);
}
function parseSQL(s2) {
  return parse(
    s2,
    [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
    [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]
  );
}
var ianaRegex, offsetRegex, isoExtendedZone, isoTimeBaseRegex, isoTimeRegex, isoTimeExtensionRegex, isoYmdRegex, isoWeekRegex, isoOrdinalRegex, extractISOWeekData, extractISOOrdinalData, sqlYmdRegex, sqlTimeRegex, sqlTimeExtensionRegex, isoTimeOnly, isoDuration, obsOffsets, rfc2822, rfc1123, rfc850, ascii, isoYmdWithTimeExtensionRegex, isoWeekWithTimeExtensionRegex, isoOrdinalWithTimeExtensionRegex, isoTimeCombinedRegex, extractISOYmdTimeAndOffset, extractISOWeekTimeAndOffset, extractISOOrdinalDateAndTime, extractISOTimeAndOffset, extractISOTimeOnly, sqlYmdWithTimeExtensionRegex, sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone;
var init_regexParser = __esm({
  "node_modules/luxon/src/impl/regexParser.js"() {
    init_util();
    init_english();
    init_fixedOffsetZone();
    init_IANAZone();
    ianaRegex = /[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;
    offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/;
    isoExtendedZone = `(?:${offsetRegex.source}?(?:\\[(${ianaRegex.source})\\])?)?`;
    isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/;
    isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${isoExtendedZone}`);
    isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`);
    isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/;
    isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/;
    isoOrdinalRegex = /(\d{4})-?(\d{3})/;
    extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay");
    extractISOOrdinalData = simpleParse("year", "ordinal");
    sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/;
    sqlTimeRegex = RegExp(
      `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`
    );
    sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);
    isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}$`);
    isoDuration = /^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;
    obsOffsets = {
      GMT: 0,
      EDT: -4 * 60,
      EST: -5 * 60,
      CDT: -5 * 60,
      CST: -6 * 60,
      MDT: -6 * 60,
      MST: -7 * 60,
      PDT: -7 * 60,
      PST: -8 * 60
    };
    rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;
    rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/;
    rfc850 = /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/;
    ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;
    isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
    isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
    isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
    isoTimeCombinedRegex = combineRegexes(isoTimeRegex);
    extractISOYmdTimeAndOffset = combineExtractors(
      extractISOYmd,
      extractISOTime,
      extractISOOffset,
      extractIANAZone
    );
    extractISOWeekTimeAndOffset = combineExtractors(
      extractISOWeekData,
      extractISOTime,
      extractISOOffset,
      extractIANAZone
    );
    extractISOOrdinalDateAndTime = combineExtractors(
      extractISOOrdinalData,
      extractISOTime,
      extractISOOffset,
      extractIANAZone
    );
    extractISOTimeAndOffset = combineExtractors(
      extractISOTime,
      extractISOOffset,
      extractIANAZone
    );
    extractISOTimeOnly = combineExtractors(extractISOTime);
    sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
    sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);
    extractISOTimeOffsetAndIANAZone = combineExtractors(
      extractISOTime,
      extractISOOffset,
      extractIANAZone
    );
  }
});

// node_modules/luxon/src/duration.js
function clone(dur, alts, clear = false) {
  const conf = {
    values: clear ? alts.values : { ...dur.values, ...alts.values || {} },
    loc: dur.loc.clone(alts.loc),
    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,
    matrix: alts.matrix || dur.matrix
  };
  return new Duration(conf);
}
function durationToMillis(matrix, vals) {
  var _a;
  let sum = (_a = vals.milliseconds) != null ? _a : 0;
  for (const unit of reverseUnits.slice(1)) {
    if (vals[unit]) {
      sum += vals[unit] * matrix[unit]["milliseconds"];
    }
  }
  return sum;
}
function normalizeValues(matrix, vals) {
  const factor = durationToMillis(matrix, vals) < 0 ? -1 : 1;
  orderedUnits.reduceRight((previous, current) => {
    if (!isUndefined(vals[current])) {
      if (previous) {
        const previousVal = vals[previous] * factor;
        const conv = matrix[current][previous];
        const rollUp = Math.floor(previousVal / conv);
        vals[current] += rollUp * factor;
        vals[previous] -= rollUp * conv * factor;
      }
      return current;
    } else {
      return previous;
    }
  }, null);
  orderedUnits.reduce((previous, current) => {
    if (!isUndefined(vals[current])) {
      if (previous) {
        const fraction = vals[previous] % 1;
        vals[previous] -= fraction;
        vals[current] += fraction * matrix[previous][current];
      }
      return current;
    } else {
      return previous;
    }
  }, null);
}
function removeZeroes(vals) {
  const newVals = {};
  for (const [key, value] of Object.entries(vals)) {
    if (value !== 0) {
      newVals[key] = value;
    }
  }
  return newVals;
}
var INVALID, lowOrderMatrix, casualMatrix, daysInYearAccurate, daysInMonthAccurate, accurateMatrix, orderedUnits, reverseUnits, Duration;
var init_duration = __esm({
  "node_modules/luxon/src/duration.js"() {
    init_errors();
    init_formatter();
    init_invalid();
    init_locale();
    init_regexParser();
    init_util();
    init_settings();
    init_datetime();
    INVALID = "Invalid Duration";
    lowOrderMatrix = {
      weeks: {
        days: 7,
        hours: 7 * 24,
        minutes: 7 * 24 * 60,
        seconds: 7 * 24 * 60 * 60,
        milliseconds: 7 * 24 * 60 * 60 * 1e3
      },
      days: {
        hours: 24,
        minutes: 24 * 60,
        seconds: 24 * 60 * 60,
        milliseconds: 24 * 60 * 60 * 1e3
      },
      hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1e3 },
      minutes: { seconds: 60, milliseconds: 60 * 1e3 },
      seconds: { milliseconds: 1e3 }
    };
    casualMatrix = {
      years: {
        quarters: 4,
        months: 12,
        weeks: 52,
        days: 365,
        hours: 365 * 24,
        minutes: 365 * 24 * 60,
        seconds: 365 * 24 * 60 * 60,
        milliseconds: 365 * 24 * 60 * 60 * 1e3
      },
      quarters: {
        months: 3,
        weeks: 13,
        days: 91,
        hours: 91 * 24,
        minutes: 91 * 24 * 60,
        seconds: 91 * 24 * 60 * 60,
        milliseconds: 91 * 24 * 60 * 60 * 1e3
      },
      months: {
        weeks: 4,
        days: 30,
        hours: 30 * 24,
        minutes: 30 * 24 * 60,
        seconds: 30 * 24 * 60 * 60,
        milliseconds: 30 * 24 * 60 * 60 * 1e3
      },
      ...lowOrderMatrix
    };
    daysInYearAccurate = 146097 / 400;
    daysInMonthAccurate = 146097 / 4800;
    accurateMatrix = {
      years: {
        quarters: 4,
        months: 12,
        weeks: daysInYearAccurate / 7,
        days: daysInYearAccurate,
        hours: daysInYearAccurate * 24,
        minutes: daysInYearAccurate * 24 * 60,
        seconds: daysInYearAccurate * 24 * 60 * 60,
        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1e3
      },
      quarters: {
        months: 3,
        weeks: daysInYearAccurate / 28,
        days: daysInYearAccurate / 4,
        hours: daysInYearAccurate * 24 / 4,
        minutes: daysInYearAccurate * 24 * 60 / 4,
        seconds: daysInYearAccurate * 24 * 60 * 60 / 4,
        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1e3 / 4
      },
      months: {
        weeks: daysInMonthAccurate / 7,
        days: daysInMonthAccurate,
        hours: daysInMonthAccurate * 24,
        minutes: daysInMonthAccurate * 24 * 60,
        seconds: daysInMonthAccurate * 24 * 60 * 60,
        milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1e3
      },
      ...lowOrderMatrix
    };
    orderedUnits = [
      "years",
      "quarters",
      "months",
      "weeks",
      "days",
      "hours",
      "minutes",
      "seconds",
      "milliseconds"
    ];
    reverseUnits = orderedUnits.slice(0).reverse();
    Duration = class _Duration {
      /**
       * @private
       */
      constructor(config) {
        const accurate = config.conversionAccuracy === "longterm" || false;
        let matrix = accurate ? accurateMatrix : casualMatrix;
        if (config.matrix) {
          matrix = config.matrix;
        }
        this.values = config.values;
        this.loc = config.loc || Locale.create();
        this.conversionAccuracy = accurate ? "longterm" : "casual";
        this.invalid = config.invalid || null;
        this.matrix = matrix;
        this.isLuxonDuration = true;
      }
      /**
       * Create Duration from a number of milliseconds.
       * @param {number} count of milliseconds
       * @param {Object} opts - options for parsing
       * @param {string} [opts.locale='en-US'] - the locale to use
       * @param {string} opts.numberingSystem - the numbering system to use
       * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
       * @return {Duration}
       */
      static fromMillis(count, opts) {
        return _Duration.fromObject({ milliseconds: count }, opts);
      }
      /**
       * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.
       * If this object is empty then a zero milliseconds duration is returned.
       * @param {Object} obj - the object to create the DateTime from
       * @param {number} obj.years
       * @param {number} obj.quarters
       * @param {number} obj.months
       * @param {number} obj.weeks
       * @param {number} obj.days
       * @param {number} obj.hours
       * @param {number} obj.minutes
       * @param {number} obj.seconds
       * @param {number} obj.milliseconds
       * @param {Object} [opts=[]] - options for creating this Duration
       * @param {string} [opts.locale='en-US'] - the locale to use
       * @param {string} opts.numberingSystem - the numbering system to use
       * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
       * @param {string} [opts.matrix=Object] - the custom conversion system to use
       * @return {Duration}
       */
      static fromObject(obj, opts = {}) {
        if (obj == null || typeof obj !== "object") {
          throw new InvalidArgumentError(
            `Duration.fromObject: argument expected to be an object, got ${obj === null ? "null" : typeof obj}`
          );
        }
        return new _Duration({
          values: normalizeObject(obj, _Duration.normalizeUnit),
          loc: Locale.fromObject(opts),
          conversionAccuracy: opts.conversionAccuracy,
          matrix: opts.matrix
        });
      }
      /**
       * Create a Duration from DurationLike.
       *
       * @param {Object | number | Duration} durationLike
       * One of:
       * - object with keys like 'years' and 'hours'.
       * - number representing milliseconds
       * - Duration instance
       * @return {Duration}
       */
      static fromDurationLike(durationLike) {
        if (isNumber(durationLike)) {
          return _Duration.fromMillis(durationLike);
        } else if (_Duration.isDuration(durationLike)) {
          return durationLike;
        } else if (typeof durationLike === "object") {
          return _Duration.fromObject(durationLike);
        } else {
          throw new InvalidArgumentError(
            `Unknown duration argument ${durationLike} of type ${typeof durationLike}`
          );
        }
      }
      /**
       * Create a Duration from an ISO 8601 duration string.
       * @param {string} text - text to parse
       * @param {Object} opts - options for parsing
       * @param {string} [opts.locale='en-US'] - the locale to use
       * @param {string} opts.numberingSystem - the numbering system to use
       * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
       * @param {string} [opts.matrix=Object] - the preset conversion system to use
       * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
       * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
       * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
       * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
       * @return {Duration}
       */
      static fromISO(text, opts) {
        const [parsed] = parseISODuration(text);
        if (parsed) {
          return _Duration.fromObject(parsed, opts);
        } else {
          return _Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
        }
      }
      /**
       * Create a Duration from an ISO 8601 time string.
       * @param {string} text - text to parse
       * @param {Object} opts - options for parsing
       * @param {string} [opts.locale='en-US'] - the locale to use
       * @param {string} opts.numberingSystem - the numbering system to use
       * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
       * @param {string} [opts.matrix=Object] - the conversion system to use
       * @see https://en.wikipedia.org/wiki/ISO_8601#Times
       * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }
       * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
       * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
       * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
       * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
       * @return {Duration}
       */
      static fromISOTime(text, opts) {
        const [parsed] = parseISOTimeOnly(text);
        if (parsed) {
          return _Duration.fromObject(parsed, opts);
        } else {
          return _Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
        }
      }
      /**
       * Create an invalid Duration.
       * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
       * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
       * @return {Duration}
       */
      static invalid(reason, explanation = null) {
        if (!reason) {
          throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
        }
        const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
        if (Settings.throwOnInvalid) {
          throw new InvalidDurationError(invalid);
        } else {
          return new _Duration({ invalid });
        }
      }
      /**
       * @private
       */
      static normalizeUnit(unit) {
        const normalized = {
          year: "years",
          years: "years",
          quarter: "quarters",
          quarters: "quarters",
          month: "months",
          months: "months",
          week: "weeks",
          weeks: "weeks",
          day: "days",
          days: "days",
          hour: "hours",
          hours: "hours",
          minute: "minutes",
          minutes: "minutes",
          second: "seconds",
          seconds: "seconds",
          millisecond: "milliseconds",
          milliseconds: "milliseconds"
        }[unit ? unit.toLowerCase() : unit];
        if (!normalized)
          throw new InvalidUnitError(unit);
        return normalized;
      }
      /**
       * Check if an object is a Duration. Works across context boundaries
       * @param {object} o
       * @return {boolean}
       */
      static isDuration(o) {
        return o && o.isLuxonDuration || false;
      }
      /**
       * Get  the locale of a Duration, such 'en-GB'
       * @type {string}
       */
      get locale() {
        return this.isValid ? this.loc.locale : null;
      }
      /**
       * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
       *
       * @type {string}
       */
      get numberingSystem() {
        return this.isValid ? this.loc.numberingSystem : null;
      }
      /**
       * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
       * * `S` for milliseconds
       * * `s` for seconds
       * * `m` for minutes
       * * `h` for hours
       * * `d` for days
       * * `w` for weeks
       * * `M` for months
       * * `y` for years
       * Notes:
       * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
       * * Tokens can be escaped by wrapping with single quotes.
       * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.
       * @param {string} fmt - the format string
       * @param {Object} opts - options
       * @param {boolean} [opts.floor=true] - floor numerical values
       * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
       * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
       * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
       * @return {string}
       */
      toFormat(fmt, opts = {}) {
        const fmtOpts = {
          ...opts,
          floor: opts.round !== false && opts.floor !== false
        };
        return this.isValid ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt) : INVALID;
      }
      /**
       * Returns a string representation of a Duration with all units included.
       * To modify its behavior, use `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options
       * @param {Object} opts - Formatting options. Accepts the same keys as the options parameter of the native `Intl.NumberFormat` constructor, as well as `listStyle`.
       * @param {string} [opts.listStyle='narrow'] - How to format the merged list. Corresponds to the `style` property of the options parameter of the native `Intl.ListFormat` constructor.
       * @example
       * ```js
       * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })
       * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'
       * dur.toHuman({ listStyle: "long" }) //=> '1 day, 5 hours, and 6 minutes'
       * dur.toHuman({ unitDisplay: "short" }) //=> '1 day, 5 hr, 6 min'
       * ```
       */
      toHuman(opts = {}) {
        if (!this.isValid)
          return INVALID;
        const l2 = orderedUnits.map((unit) => {
          const val = this.values[unit];
          if (isUndefined(val)) {
            return null;
          }
          return this.loc.numberFormatter({ style: "unit", unitDisplay: "long", ...opts, unit: unit.slice(0, -1) }).format(val);
        }).filter((n2) => n2);
        return this.loc.listFormatter({ type: "conjunction", style: opts.listStyle || "narrow", ...opts }).format(l2);
      }
      /**
       * Returns a JavaScript object with this Duration's values.
       * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
       * @return {Object}
       */
      toObject() {
        if (!this.isValid)
          return {};
        return { ...this.values };
      }
      /**
       * Returns an ISO 8601-compliant string representation of this Duration.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
       * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
       * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
       * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
       * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
       * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
       * @return {string}
       */
      toISO() {
        if (!this.isValid)
          return null;
        let s2 = "P";
        if (this.years !== 0)
          s2 += this.years + "Y";
        if (this.months !== 0 || this.quarters !== 0)
          s2 += this.months + this.quarters * 3 + "M";
        if (this.weeks !== 0)
          s2 += this.weeks + "W";
        if (this.days !== 0)
          s2 += this.days + "D";
        if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)
          s2 += "T";
        if (this.hours !== 0)
          s2 += this.hours + "H";
        if (this.minutes !== 0)
          s2 += this.minutes + "M";
        if (this.seconds !== 0 || this.milliseconds !== 0)
          s2 += roundTo(this.seconds + this.milliseconds / 1e3, 3) + "S";
        if (s2 === "P")
          s2 += "T0S";
        return s2;
      }
      /**
       * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.
       * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Times
       * @param {Object} opts - options
       * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
       * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
       * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
       * @param {string} [opts.format='extended'] - choose between the basic and extended format
       * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'
       * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'
       * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'
       * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'
       * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'
       * @return {string}
       */
      toISOTime(opts = {}) {
        if (!this.isValid)
          return null;
        const millis = this.toMillis();
        if (millis < 0 || millis >= 864e5)
          return null;
        opts = {
          suppressMilliseconds: false,
          suppressSeconds: false,
          includePrefix: false,
          format: "extended",
          ...opts,
          includeOffset: false
        };
        const dateTime = DateTime.fromMillis(millis, { zone: "UTC" });
        return dateTime.toISOTime(opts);
      }
      /**
       * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
       * @return {string}
       */
      toJSON() {
        return this.toISO();
      }
      /**
       * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
       * @return {string}
       */
      toString() {
        return this.toISO();
      }
      /**
       * Returns a string representation of this Duration appropriate for the REPL.
       * @return {string}
       */
      [Symbol.for("nodejs.util.inspect.custom")]() {
        if (this.isValid) {
          return `Duration { values: ${JSON.stringify(this.values)} }`;
        } else {
          return `Duration { Invalid, reason: ${this.invalidReason} }`;
        }
      }
      /**
       * Returns an milliseconds value of this Duration.
       * @return {number}
       */
      toMillis() {
        if (!this.isValid)
          return NaN;
        return durationToMillis(this.matrix, this.values);
      }
      /**
       * Returns an milliseconds value of this Duration. Alias of {@link toMillis}
       * @return {number}
       */
      valueOf() {
        return this.toMillis();
      }
      /**
       * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
       * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
       * @return {Duration}
       */
      plus(duration) {
        if (!this.isValid)
          return this;
        const dur = _Duration.fromDurationLike(duration), result = {};
        for (const k of orderedUnits) {
          if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {
            result[k] = dur.get(k) + this.get(k);
          }
        }
        return clone(this, { values: result }, true);
      }
      /**
       * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
       * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
       * @return {Duration}
       */
      minus(duration) {
        if (!this.isValid)
          return this;
        const dur = _Duration.fromDurationLike(duration);
        return this.plus(dur.negate());
      }
      /**
       * Scale this Duration by the specified amount. Return a newly-constructed Duration.
       * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
       * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }
       * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === "hours" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
       * @return {Duration}
       */
      mapUnits(fn) {
        if (!this.isValid)
          return this;
        const result = {};
        for (const k of Object.keys(this.values)) {
          result[k] = asNumber(fn(this.values[k], k));
        }
        return clone(this, { values: result }, true);
      }
      /**
       * Get the value of unit.
       * @param {string} unit - a unit such as 'minute' or 'day'
       * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2
       * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0
       * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3
       * @return {number}
       */
      get(unit) {
        return this[_Duration.normalizeUnit(unit)];
      }
      /**
       * "Set" the values of specified units. Return a newly-constructed Duration.
       * @param {Object} values - a mapping of units to numbers
       * @example dur.set({ years: 2017 })
       * @example dur.set({ hours: 8, minutes: 30 })
       * @return {Duration}
       */
      set(values) {
        if (!this.isValid)
          return this;
        const mixed = { ...this.values, ...normalizeObject(values, _Duration.normalizeUnit) };
        return clone(this, { values: mixed });
      }
      /**
       * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
       * @example dur.reconfigure({ locale: 'en-GB' })
       * @return {Duration}
       */
      reconfigure({ locale, numberingSystem, conversionAccuracy, matrix } = {}) {
        const loc = this.loc.clone({ locale, numberingSystem });
        const opts = { loc, matrix, conversionAccuracy };
        return clone(this, opts);
      }
      /**
       * Return the length of the duration in the specified unit.
       * @param {string} unit - a unit such as 'minutes' or 'days'
       * @example Duration.fromObject({years: 1}).as('days') //=> 365
       * @example Duration.fromObject({years: 1}).as('months') //=> 12
       * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
       * @return {number}
       */
      as(unit) {
        return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
      }
      /**
       * Reduce this Duration to its canonical representation in its current units.
       * Assuming the overall value of the Duration is positive, this means:
       * - excessive values for lower-order units are converted to higher-order units (if possible, see first and second example)
       * - negative lower-order units are converted to higher order units (there must be such a higher order unit, otherwise
       *   the overall value would be negative, see third example)
       * - fractional values for higher-order units are converted to lower-order units (if possible, see fourth example)
       *
       * If the overall value is negative, the result of this method is equivalent to `this.negate().normalize().negate()`.
       * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
       * @example Duration.fromObject({ days: 5000 }).normalize().toObject() //=> { days: 5000 }
       * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
       * @example Duration.fromObject({ years: 2.5, days: 0, hours: 0 }).normalize().toObject() //=> { years: 2, days: 182, hours: 12 }
       * @return {Duration}
       */
      normalize() {
        if (!this.isValid)
          return this;
        const vals = this.toObject();
        normalizeValues(this.matrix, vals);
        return clone(this, { values: vals }, true);
      }
      /**
       * Rescale units to its largest representation
       * @example Duration.fromObject({ milliseconds: 90000 }).rescale().toObject() //=> { minutes: 1, seconds: 30 }
       * @return {Duration}
       */
      rescale() {
        if (!this.isValid)
          return this;
        const vals = removeZeroes(this.normalize().shiftToAll().toObject());
        return clone(this, { values: vals }, true);
      }
      /**
       * Convert this Duration into its representation in a different set of units.
       * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
       * @return {Duration}
       */
      shiftTo(...units) {
        if (!this.isValid)
          return this;
        if (units.length === 0) {
          return this;
        }
        units = units.map((u) => _Duration.normalizeUnit(u));
        const built = {}, accumulated = {}, vals = this.toObject();
        let lastUnit;
        for (const k of orderedUnits) {
          if (units.indexOf(k) >= 0) {
            lastUnit = k;
            let own = 0;
            for (const ak in accumulated) {
              own += this.matrix[ak][k] * accumulated[ak];
              accumulated[ak] = 0;
            }
            if (isNumber(vals[k])) {
              own += vals[k];
            }
            const i = Math.trunc(own);
            built[k] = i;
            accumulated[k] = (own * 1e3 - i * 1e3) / 1e3;
          } else if (isNumber(vals[k])) {
            accumulated[k] = vals[k];
          }
        }
        for (const key in accumulated) {
          if (accumulated[key] !== 0) {
            built[lastUnit] += key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
          }
        }
        normalizeValues(this.matrix, built);
        return clone(this, { values: built }, true);
      }
      /**
       * Shift this Duration to all available units.
       * Same as shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds")
       * @return {Duration}
       */
      shiftToAll() {
        if (!this.isValid)
          return this;
        return this.shiftTo(
          "years",
          "months",
          "weeks",
          "days",
          "hours",
          "minutes",
          "seconds",
          "milliseconds"
        );
      }
      /**
       * Return the negative of this Duration.
       * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
       * @return {Duration}
       */
      negate() {
        if (!this.isValid)
          return this;
        const negated = {};
        for (const k of Object.keys(this.values)) {
          negated[k] = this.values[k] === 0 ? 0 : -this.values[k];
        }
        return clone(this, { values: negated }, true);
      }
      /**
       * Get the years.
       * @type {number}
       */
      get years() {
        return this.isValid ? this.values.years || 0 : NaN;
      }
      /**
       * Get the quarters.
       * @type {number}
       */
      get quarters() {
        return this.isValid ? this.values.quarters || 0 : NaN;
      }
      /**
       * Get the months.
       * @type {number}
       */
      get months() {
        return this.isValid ? this.values.months || 0 : NaN;
      }
      /**
       * Get the weeks
       * @type {number}
       */
      get weeks() {
        return this.isValid ? this.values.weeks || 0 : NaN;
      }
      /**
       * Get the days.
       * @type {number}
       */
      get days() {
        return this.isValid ? this.values.days || 0 : NaN;
      }
      /**
       * Get the hours.
       * @type {number}
       */
      get hours() {
        return this.isValid ? this.values.hours || 0 : NaN;
      }
      /**
       * Get the minutes.
       * @type {number}
       */
      get minutes() {
        return this.isValid ? this.values.minutes || 0 : NaN;
      }
      /**
       * Get the seconds.
       * @return {number}
       */
      get seconds() {
        return this.isValid ? this.values.seconds || 0 : NaN;
      }
      /**
       * Get the milliseconds.
       * @return {number}
       */
      get milliseconds() {
        return this.isValid ? this.values.milliseconds || 0 : NaN;
      }
      /**
       * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
       * on invalid DateTimes or Intervals.
       * @return {boolean}
       */
      get isValid() {
        return this.invalid === null;
      }
      /**
       * Returns an error code if this Duration became invalid, or null if the Duration is valid
       * @return {string}
       */
      get invalidReason() {
        return this.invalid ? this.invalid.reason : null;
      }
      /**
       * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
       * @type {string}
       */
      get invalidExplanation() {
        return this.invalid ? this.invalid.explanation : null;
      }
      /**
       * Equality check
       * Two Durations are equal iff they have the same units and the same values for each unit.
       * @param {Duration} other
       * @return {boolean}
       */
      equals(other) {
        if (!this.isValid || !other.isValid) {
          return false;
        }
        if (!this.loc.equals(other.loc)) {
          return false;
        }
        function eq(v1, v2) {
          if (v1 === void 0 || v1 === 0)
            return v2 === void 0 || v2 === 0;
          return v1 === v2;
        }
        for (const u of orderedUnits) {
          if (!eq(this.values[u], other.values[u])) {
            return false;
          }
        }
        return true;
      }
    };
  }
});

// node_modules/luxon/src/interval.js
function validateStartEnd(start, end) {
  if (!start || !start.isValid) {
    return Interval.invalid("missing or invalid start");
  } else if (!end || !end.isValid) {
    return Interval.invalid("missing or invalid end");
  } else if (end < start) {
    return Interval.invalid(
      "end before start",
      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`
    );
  } else {
    return null;
  }
}
var INVALID2, Interval;
var init_interval = __esm({
  "node_modules/luxon/src/interval.js"() {
    init_datetime();
    init_duration();
    init_settings();
    init_errors();
    init_invalid();
    init_formatter();
    init_formats();
    INVALID2 = "Invalid Interval";
    Interval = class _Interval {
      /**
       * @private
       */
      constructor(config) {
        this.s = config.start;
        this.e = config.end;
        this.invalid = config.invalid || null;
        this.isLuxonInterval = true;
      }
      /**
       * Create an invalid Interval.
       * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
       * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
       * @return {Interval}
       */
      static invalid(reason, explanation = null) {
        if (!reason) {
          throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
        }
        const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
        if (Settings.throwOnInvalid) {
          throw new InvalidIntervalError(invalid);
        } else {
          return new _Interval({ invalid });
        }
      }
      /**
       * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
       * @param {DateTime|Date|Object} start
       * @param {DateTime|Date|Object} end
       * @return {Interval}
       */
      static fromDateTimes(start, end) {
        const builtStart = friendlyDateTime(start), builtEnd = friendlyDateTime(end);
        const validateError = validateStartEnd(builtStart, builtEnd);
        if (validateError == null) {
          return new _Interval({
            start: builtStart,
            end: builtEnd
          });
        } else {
          return validateError;
        }
      }
      /**
       * Create an Interval from a start DateTime and a Duration to extend to.
       * @param {DateTime|Date|Object} start
       * @param {Duration|Object|number} duration - the length of the Interval.
       * @return {Interval}
       */
      static after(start, duration) {
        const dur = Duration.fromDurationLike(duration), dt = friendlyDateTime(start);
        return _Interval.fromDateTimes(dt, dt.plus(dur));
      }
      /**
       * Create an Interval from an end DateTime and a Duration to extend backwards to.
       * @param {DateTime|Date|Object} end
       * @param {Duration|Object|number} duration - the length of the Interval.
       * @return {Interval}
       */
      static before(end, duration) {
        const dur = Duration.fromDurationLike(duration), dt = friendlyDateTime(end);
        return _Interval.fromDateTimes(dt.minus(dur), dt);
      }
      /**
       * Create an Interval from an ISO 8601 string.
       * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
       * @param {string} text - the ISO string to parse
       * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}
       * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
       * @return {Interval}
       */
      static fromISO(text, opts) {
        const [s2, e] = (text || "").split("/", 2);
        if (s2 && e) {
          let start, startIsValid;
          try {
            start = DateTime.fromISO(s2, opts);
            startIsValid = start.isValid;
          } catch (e2) {
            startIsValid = false;
          }
          let end, endIsValid;
          try {
            end = DateTime.fromISO(e, opts);
            endIsValid = end.isValid;
          } catch (e2) {
            endIsValid = false;
          }
          if (startIsValid && endIsValid) {
            return _Interval.fromDateTimes(start, end);
          }
          if (startIsValid) {
            const dur = Duration.fromISO(e, opts);
            if (dur.isValid) {
              return _Interval.after(start, dur);
            }
          } else if (endIsValid) {
            const dur = Duration.fromISO(s2, opts);
            if (dur.isValid) {
              return _Interval.before(end, dur);
            }
          }
        }
        return _Interval.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
      }
      /**
       * Check if an object is an Interval. Works across context boundaries
       * @param {object} o
       * @return {boolean}
       */
      static isInterval(o) {
        return o && o.isLuxonInterval || false;
      }
      /**
       * Returns the start of the Interval
       * @type {DateTime}
       */
      get start() {
        return this.isValid ? this.s : null;
      }
      /**
       * Returns the end of the Interval
       * @type {DateTime}
       */
      get end() {
        return this.isValid ? this.e : null;
      }
      /**
       * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
       * @type {boolean}
       */
      get isValid() {
        return this.invalidReason === null;
      }
      /**
       * Returns an error code if this Interval is invalid, or null if the Interval is valid
       * @type {string}
       */
      get invalidReason() {
        return this.invalid ? this.invalid.reason : null;
      }
      /**
       * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
       * @type {string}
       */
      get invalidExplanation() {
        return this.invalid ? this.invalid.explanation : null;
      }
      /**
       * Returns the length of the Interval in the specified unit.
       * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
       * @return {number}
       */
      length(unit = "milliseconds") {
        return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;
      }
      /**
       * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
       * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
       * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
       * @param {string} [unit='milliseconds'] - the unit of time to count.
       * @param {Object} opts - options
       * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; this operation will always use the locale of the start DateTime
       * @return {number}
       */
      count(unit = "milliseconds", opts) {
        if (!this.isValid)
          return NaN;
        const start = this.start.startOf(unit, opts);
        let end;
        if (opts == null ? void 0 : opts.useLocaleWeeks) {
          end = this.end.reconfigure({ locale: start.locale });
        } else {
          end = this.end;
        }
        end = end.startOf(unit, opts);
        return Math.floor(end.diff(start, unit).get(unit)) + (end.valueOf() !== this.end.valueOf());
      }
      /**
       * Returns whether this Interval's start and end are both in the same unit of time
       * @param {string} unit - the unit of time to check sameness on
       * @return {boolean}
       */
      hasSame(unit) {
        return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
      }
      /**
       * Return whether this Interval has the same start and end DateTimes.
       * @return {boolean}
       */
      isEmpty() {
        return this.s.valueOf() === this.e.valueOf();
      }
      /**
       * Return whether this Interval's start is after the specified DateTime.
       * @param {DateTime} dateTime
       * @return {boolean}
       */
      isAfter(dateTime) {
        if (!this.isValid)
          return false;
        return this.s > dateTime;
      }
      /**
       * Return whether this Interval's end is before the specified DateTime.
       * @param {DateTime} dateTime
       * @return {boolean}
       */
      isBefore(dateTime) {
        if (!this.isValid)
          return false;
        return this.e <= dateTime;
      }
      /**
       * Return whether this Interval contains the specified DateTime.
       * @param {DateTime} dateTime
       * @return {boolean}
       */
      contains(dateTime) {
        if (!this.isValid)
          return false;
        return this.s <= dateTime && this.e > dateTime;
      }
      /**
       * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
       * @param {Object} values - the values to set
       * @param {DateTime} values.start - the starting DateTime
       * @param {DateTime} values.end - the ending DateTime
       * @return {Interval}
       */
      set({ start, end } = {}) {
        if (!this.isValid)
          return this;
        return _Interval.fromDateTimes(start || this.s, end || this.e);
      }
      /**
       * Split this Interval at each of the specified DateTimes
       * @param {...DateTime} dateTimes - the unit of time to count.
       * @return {Array}
       */
      splitAt(...dateTimes) {
        if (!this.isValid)
          return [];
        const sorted = dateTimes.map(friendlyDateTime).filter((d) => this.contains(d)).sort((a, b) => a.toMillis() - b.toMillis()), results = [];
        let { s: s2 } = this, i = 0;
        while (s2 < this.e) {
          const added = sorted[i] || this.e, next = +added > +this.e ? this.e : added;
          results.push(_Interval.fromDateTimes(s2, next));
          s2 = next;
          i += 1;
        }
        return results;
      }
      /**
       * Split this Interval into smaller Intervals, each of the specified length.
       * Left over time is grouped into a smaller interval
       * @param {Duration|Object|number} duration - The length of each resulting interval.
       * @return {Array}
       */
      splitBy(duration) {
        const dur = Duration.fromDurationLike(duration);
        if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
          return [];
        }
        let { s: s2 } = this, idx = 1, next;
        const results = [];
        while (s2 < this.e) {
          const added = this.start.plus(dur.mapUnits((x) => x * idx));
          next = +added > +this.e ? this.e : added;
          results.push(_Interval.fromDateTimes(s2, next));
          s2 = next;
          idx += 1;
        }
        return results;
      }
      /**
       * Split this Interval into the specified number of smaller intervals.
       * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
       * @return {Array}
       */
      divideEqually(numberOfParts) {
        if (!this.isValid)
          return [];
        return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
      }
      /**
       * Return whether this Interval overlaps with the specified Interval
       * @param {Interval} other
       * @return {boolean}
       */
      overlaps(other) {
        return this.e > other.s && this.s < other.e;
      }
      /**
       * Return whether this Interval's end is adjacent to the specified Interval's start.
       * @param {Interval} other
       * @return {boolean}
       */
      abutsStart(other) {
        if (!this.isValid)
          return false;
        return +this.e === +other.s;
      }
      /**
       * Return whether this Interval's start is adjacent to the specified Interval's end.
       * @param {Interval} other
       * @return {boolean}
       */
      abutsEnd(other) {
        if (!this.isValid)
          return false;
        return +other.e === +this.s;
      }
      /**
       * Return whether this Interval engulfs the start and end of the specified Interval.
       * @param {Interval} other
       * @return {boolean}
       */
      engulfs(other) {
        if (!this.isValid)
          return false;
        return this.s <= other.s && this.e >= other.e;
      }
      /**
       * Return whether this Interval has the same start and end as the specified Interval.
       * @param {Interval} other
       * @return {boolean}
       */
      equals(other) {
        if (!this.isValid || !other.isValid) {
          return false;
        }
        return this.s.equals(other.s) && this.e.equals(other.e);
      }
      /**
       * Return an Interval representing the intersection of this Interval and the specified Interval.
       * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
       * Returns null if the intersection is empty, meaning, the intervals don't intersect.
       * @param {Interval} other
       * @return {Interval}
       */
      intersection(other) {
        if (!this.isValid)
          return this;
        const s2 = this.s > other.s ? this.s : other.s, e = this.e < other.e ? this.e : other.e;
        if (s2 >= e) {
          return null;
        } else {
          return _Interval.fromDateTimes(s2, e);
        }
      }
      /**
       * Return an Interval representing the union of this Interval and the specified Interval.
       * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
       * @param {Interval} other
       * @return {Interval}
       */
      union(other) {
        if (!this.isValid)
          return this;
        const s2 = this.s < other.s ? this.s : other.s, e = this.e > other.e ? this.e : other.e;
        return _Interval.fromDateTimes(s2, e);
      }
      /**
       * Merge an array of Intervals into a equivalent minimal set of Intervals.
       * Combines overlapping and adjacent Intervals.
       * @param {Array} intervals
       * @return {Array}
       */
      static merge(intervals) {
        const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce(
          ([sofar, current], item) => {
            if (!current) {
              return [sofar, item];
            } else if (current.overlaps(item) || current.abutsStart(item)) {
              return [sofar, current.union(item)];
            } else {
              return [sofar.concat([current]), item];
            }
          },
          [[], null]
        );
        if (final) {
          found.push(final);
        }
        return found;
      }
      /**
       * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
       * @param {Array} intervals
       * @return {Array}
       */
      static xor(intervals) {
        let start = null, currentCount = 0;
        const results = [], ends = intervals.map((i) => [
          { time: i.s, type: "s" },
          { time: i.e, type: "e" }
        ]), flattened = Array.prototype.concat(...ends), arr = flattened.sort((a, b) => a.time - b.time);
        for (const i of arr) {
          currentCount += i.type === "s" ? 1 : -1;
          if (currentCount === 1) {
            start = i.time;
          } else {
            if (start && +start !== +i.time) {
              results.push(_Interval.fromDateTimes(start, i.time));
            }
            start = null;
          }
        }
        return _Interval.merge(results);
      }
      /**
       * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
       * @param {...Interval} intervals
       * @return {Array}
       */
      difference(...intervals) {
        return _Interval.xor([this].concat(intervals)).map((i) => this.intersection(i)).filter((i) => i && !i.isEmpty());
      }
      /**
       * Returns a string representation of this Interval appropriate for debugging.
       * @return {string}
       */
      toString() {
        if (!this.isValid)
          return INVALID2;
        return `[${this.s.toISO()} \u2013 ${this.e.toISO()})`;
      }
      /**
       * Returns a string representation of this Interval appropriate for the REPL.
       * @return {string}
       */
      [Symbol.for("nodejs.util.inspect.custom")]() {
        if (this.isValid) {
          return `Interval { start: ${this.s.toISO()}, end: ${this.e.toISO()} }`;
        } else {
          return `Interval { Invalid, reason: ${this.invalidReason} }`;
        }
      }
      /**
       * Returns a localized string representing this Interval. Accepts the same options as the
       * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as
       * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method
       * is browser-specific, but in general it will return an appropriate representation of the
       * Interval in the assigned locale. Defaults to the system's locale if no locale has been
       * specified.
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
       * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or
       * Intl.DateTimeFormat constructor options.
       * @param {Object} opts - Options to override the configuration of the start DateTime.
       * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022
       * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022
       * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022
       * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM
       * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p
       * @return {string}
       */
      toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
        return this.isValid ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this) : INVALID2;
      }
      /**
       * Returns an ISO 8601-compliant string representation of this Interval.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
       * @param {Object} opts - The same options as {@link DateTime#toISO}
       * @return {string}
       */
      toISO(opts) {
        if (!this.isValid)
          return INVALID2;
        return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;
      }
      /**
       * Returns an ISO 8601-compliant string representation of date of this Interval.
       * The time components are ignored.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
       * @return {string}
       */
      toISODate() {
        if (!this.isValid)
          return INVALID2;
        return `${this.s.toISODate()}/${this.e.toISODate()}`;
      }
      /**
       * Returns an ISO 8601-compliant string representation of time of this Interval.
       * The date components are ignored.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
       * @param {Object} opts - The same options as {@link DateTime#toISO}
       * @return {string}
       */
      toISOTime(opts) {
        if (!this.isValid)
          return INVALID2;
        return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;
      }
      /**
       * Returns a string representation of this Interval formatted according to the specified format
       * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible
       * formatting tool.
       * @param {string} dateFormat - The format string. This string formats the start and end time.
       * See {@link DateTime#toFormat} for details.
       * @param {Object} opts - Options.
       * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end
       * representations.
       * @return {string}
       */
      toFormat(dateFormat, { separator = " \u2013 " } = {}) {
        if (!this.isValid)
          return INVALID2;
        return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;
      }
      /**
       * Return a Duration representing the time spanned by this interval.
       * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
       * @param {Object} opts - options that affect the creation of the Duration
       * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
       * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
       * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
       * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
       * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
       * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
       * @return {Duration}
       */
      toDuration(unit, opts) {
        if (!this.isValid) {
          return Duration.invalid(this.invalidReason);
        }
        return this.e.diff(this.s, unit, opts);
      }
      /**
       * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
       * @param {function} mapFn
       * @return {Interval}
       * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
       * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
       */
      mapEndpoints(mapFn) {
        return _Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
      }
    };
  }
});

// node_modules/luxon/src/info.js
var Info;
var init_info = __esm({
  "node_modules/luxon/src/info.js"() {
    init_datetime();
    init_settings();
    init_locale();
    init_IANAZone();
    init_zoneUtil();
    init_util();
    Info = class {
      /**
       * Return whether the specified zone contains a DST.
       * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
       * @return {boolean}
       */
      static hasDST(zone = Settings.defaultZone) {
        const proto = DateTime.now().setZone(zone).set({ month: 12 });
        return !zone.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;
      }
      /**
       * Return whether the specified zone is a valid IANA specifier.
       * @param {string} zone - Zone to check
       * @return {boolean}
       */
      static isValidIANAZone(zone) {
        return IANAZone.isValidZone(zone);
      }
      /**
       * Converts the input into a {@link Zone} instance.
       *
       * * If `input` is already a Zone instance, it is returned unchanged.
       * * If `input` is a string containing a valid time zone name, a Zone instance
       *   with that name is returned.
       * * If `input` is a string that doesn't refer to a known time zone, a Zone
       *   instance with {@link Zone#isValid} == false is returned.
       * * If `input is a number, a Zone instance with the specified fixed offset
       *   in minutes is returned.
       * * If `input` is `null` or `undefined`, the default zone is returned.
       * @param {string|Zone|number} [input] - the value to be converted
       * @return {Zone}
       */
      static normalizeZone(input) {
        return normalizeZone(input, Settings.defaultZone);
      }
      /**
       * Get the weekday on which the week starts according to the given locale.
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @param {string} [opts.locObj=null] - an existing locale object to use
       * @returns {number} the start of the week, 1 for Monday through 7 for Sunday
       */
      static getStartOfWeek({ locale = null, locObj = null } = {}) {
        return (locObj || Locale.create(locale)).getStartOfWeek();
      }
      /**
       * Get the minimum number of days necessary in a week before it is considered part of the next year according
       * to the given locale.
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @param {string} [opts.locObj=null] - an existing locale object to use
       * @returns {number}
       */
      static getMinimumDaysInFirstWeek({ locale = null, locObj = null } = {}) {
        return (locObj || Locale.create(locale)).getMinDaysInFirstWeek();
      }
      /**
       * Get the weekdays, which are considered the weekend according to the given locale
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @param {string} [opts.locObj=null] - an existing locale object to use
       * @returns {number[]} an array of weekdays, 1 for Monday through 7 for Sunday
       */
      static getWeekendWeekdays({ locale = null, locObj = null } = {}) {
        return (locObj || Locale.create(locale)).getWeekendDays().slice();
      }
      /**
       * Return an array of standalone month names.
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
       * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @param {string} [opts.numberingSystem=null] - the numbering system
       * @param {string} [opts.locObj=null] - an existing locale object to use
       * @param {string} [opts.outputCalendar='gregory'] - the calendar
       * @example Info.months()[0] //=> 'January'
       * @example Info.months('short')[0] //=> 'Jan'
       * @example Info.months('numeric')[0] //=> '1'
       * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
       * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
       * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
       * @return {Array}
       */
      static months(length = "long", { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}) {
        return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);
      }
      /**
       * Return an array of format month names.
       * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
       * changes the string.
       * See {@link Info#months}
       * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @param {string} [opts.numberingSystem=null] - the numbering system
       * @param {string} [opts.locObj=null] - an existing locale object to use
       * @param {string} [opts.outputCalendar='gregory'] - the calendar
       * @return {Array}
       */
      static monthsFormat(length = "long", { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}) {
        return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);
      }
      /**
       * Return an array of standalone week names.
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
       * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @param {string} [opts.numberingSystem=null] - the numbering system
       * @param {string} [opts.locObj=null] - an existing locale object to use
       * @example Info.weekdays()[0] //=> 'Monday'
       * @example Info.weekdays('short')[0] //=> 'Mon'
       * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
       * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
       * @return {Array}
       */
      static weekdays(length = "long", { locale = null, numberingSystem = null, locObj = null } = {}) {
        return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);
      }
      /**
       * Return an array of format week names.
       * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
       * changes the string.
       * See {@link Info#weekdays}
       * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
       * @param {Object} opts - options
       * @param {string} [opts.locale=null] - the locale code
       * @param {string} [opts.numberingSystem=null] - the numbering system
       * @param {string} [opts.locObj=null] - an existing locale object to use
       * @return {Array}
       */
      static weekdaysFormat(length = "long", { locale = null, numberingSystem = null, locObj = null } = {}) {
        return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);
      }
      /**
       * Return an array of meridiems.
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @example Info.meridiems() //=> [ 'AM', 'PM' ]
       * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
       * @return {Array}
       */
      static meridiems({ locale = null } = {}) {
        return Locale.create(locale).meridiems();
      }
      /**
       * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
       * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @example Info.eras() //=> [ 'BC', 'AD' ]
       * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
       * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
       * @return {Array}
       */
      static eras(length = "short", { locale = null } = {}) {
        return Locale.create(locale, null, "gregory").eras(length);
      }
      /**
       * Return the set of available features in this environment.
       * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.
       * Keys:
       * * `relative`: whether this environment supports relative time formatting
       * * `localeWeek`: whether this environment supports different weekdays for the start of the week based on the locale
       * @example Info.features() //=> { relative: false, localeWeek: true }
       * @return {Object}
       */
      static features() {
        return { relative: hasRelative(), localeWeek: hasLocaleWeekInfo() };
      }
    };
  }
});

// node_modules/luxon/src/impl/diff.js
function dayDiff(earlier, later) {
  const utcDayStart = (dt) => dt.toUTC(0, { keepLocalTime: true }).startOf("day").valueOf(), ms = utcDayStart(later) - utcDayStart(earlier);
  return Math.floor(Duration.fromMillis(ms).as("days"));
}
function highOrderDiffs(cursor, later, units) {
  const differs = [
    ["years", (a, b) => b.year - a.year],
    ["quarters", (a, b) => b.quarter - a.quarter + (b.year - a.year) * 4],
    ["months", (a, b) => b.month - a.month + (b.year - a.year) * 12],
    [
      "weeks",
      (a, b) => {
        const days = dayDiff(a, b);
        return (days - days % 7) / 7;
      }
    ],
    ["days", dayDiff]
  ];
  const results = {};
  const earlier = cursor;
  let lowestOrder, highWater;
  for (const [unit, differ] of differs) {
    if (units.indexOf(unit) >= 0) {
      lowestOrder = unit;
      results[unit] = differ(cursor, later);
      highWater = earlier.plus(results);
      if (highWater > later) {
        results[unit]--;
        cursor = earlier.plus(results);
        if (cursor > later) {
          highWater = cursor;
          results[unit]--;
          cursor = earlier.plus(results);
        }
      } else {
        cursor = highWater;
      }
    }
  }
  return [cursor, results, highWater, lowestOrder];
}
function diff_default(earlier, later, units, opts) {
  let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);
  const remainingMillis = later - cursor;
  const lowerOrderUnits = units.filter(
    (u) => ["hours", "minutes", "seconds", "milliseconds"].indexOf(u) >= 0
  );
  if (lowerOrderUnits.length === 0) {
    if (highWater < later) {
      highWater = cursor.plus({ [lowestOrder]: 1 });
    }
    if (highWater !== cursor) {
      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
    }
  }
  const duration = Duration.fromObject(results, opts);
  if (lowerOrderUnits.length > 0) {
    return Duration.fromMillis(remainingMillis, opts).shiftTo(...lowerOrderUnits).plus(duration);
  } else {
    return duration;
  }
}
var init_diff = __esm({
  "node_modules/luxon/src/impl/diff.js"() {
    init_duration();
  }
});

// node_modules/luxon/src/impl/digits.js
function parseDigits(str) {
  let value = parseInt(str, 10);
  if (isNaN(value)) {
    value = "";
    for (let i = 0; i < str.length; i++) {
      const code = str.charCodeAt(i);
      if (str[i].search(numberingSystems.hanidec) !== -1) {
        value += hanidecChars.indexOf(str[i]);
      } else {
        for (const key in numberingSystemsUTF16) {
          const [min, max] = numberingSystemsUTF16[key];
          if (code >= min && code <= max) {
            value += code - min;
          }
        }
      }
    }
    return parseInt(value, 10);
  } else {
    return value;
  }
}
function digitRegex({ numberingSystem }, append = "") {
  return new RegExp(`${numberingSystems[numberingSystem || "latn"]}${append}`);
}
var numberingSystems, numberingSystemsUTF16, hanidecChars;
var init_digits = __esm({
  "node_modules/luxon/src/impl/digits.js"() {
    numberingSystems = {
      arab: "[\u0660-\u0669]",
      arabext: "[\u06F0-\u06F9]",
      bali: "[\u1B50-\u1B59]",
      beng: "[\u09E6-\u09EF]",
      deva: "[\u0966-\u096F]",
      fullwide: "[\uFF10-\uFF19]",
      gujr: "[\u0AE6-\u0AEF]",
      hanidec: "[\u3007|\u4E00|\u4E8C|\u4E09|\u56DB|\u4E94|\u516D|\u4E03|\u516B|\u4E5D]",
      khmr: "[\u17E0-\u17E9]",
      knda: "[\u0CE6-\u0CEF]",
      laoo: "[\u0ED0-\u0ED9]",
      limb: "[\u1946-\u194F]",
      mlym: "[\u0D66-\u0D6F]",
      mong: "[\u1810-\u1819]",
      mymr: "[\u1040-\u1049]",
      orya: "[\u0B66-\u0B6F]",
      tamldec: "[\u0BE6-\u0BEF]",
      telu: "[\u0C66-\u0C6F]",
      thai: "[\u0E50-\u0E59]",
      tibt: "[\u0F20-\u0F29]",
      latn: "\\d"
    };
    numberingSystemsUTF16 = {
      arab: [1632, 1641],
      arabext: [1776, 1785],
      bali: [6992, 7001],
      beng: [2534, 2543],
      deva: [2406, 2415],
      fullwide: [65296, 65303],
      gujr: [2790, 2799],
      khmr: [6112, 6121],
      knda: [3302, 3311],
      laoo: [3792, 3801],
      limb: [6470, 6479],
      mlym: [3430, 3439],
      mong: [6160, 6169],
      mymr: [4160, 4169],
      orya: [2918, 2927],
      tamldec: [3046, 3055],
      telu: [3174, 3183],
      thai: [3664, 3673],
      tibt: [3872, 3881]
    };
    hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");
  }
});

// node_modules/luxon/src/impl/tokenParser.js
function intUnit(regex, post = (i) => i) {
  return { regex, deser: ([s2]) => post(parseDigits(s2)) };
}
function fixListRegex(s2) {
  return s2.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);
}
function stripInsensitivities(s2) {
  return s2.replace(/\./g, "").replace(spaceOrNBSPRegExp, " ").toLowerCase();
}
function oneOf(strings, startIndex) {
  if (strings === null) {
    return null;
  } else {
    return {
      regex: RegExp(strings.map(fixListRegex).join("|")),
      deser: ([s2]) => strings.findIndex((i) => stripInsensitivities(s2) === stripInsensitivities(i)) + startIndex
    };
  }
}
function offset(regex, groups) {
  return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };
}
function simple(regex) {
  return { regex, deser: ([s2]) => s2 };
}
function escapeToken(value) {
  return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
}
function unitForToken(token, loc) {
  const one = digitRegex(loc), two = digitRegex(loc, "{2}"), three = digitRegex(loc, "{3}"), four = digitRegex(loc, "{4}"), six = digitRegex(loc, "{6}"), oneOrTwo = digitRegex(loc, "{1,2}"), oneToThree = digitRegex(loc, "{1,3}"), oneToSix = digitRegex(loc, "{1,6}"), oneToNine = digitRegex(loc, "{1,9}"), twoToFour = digitRegex(loc, "{2,4}"), fourToSix = digitRegex(loc, "{4,6}"), literal = (t) => ({ regex: RegExp(escapeToken(t.val)), deser: ([s2]) => s2, literal: true }), unitate = (t) => {
    if (token.literal) {
      return literal(t);
    }
    switch (t.val) {
      case "G":
        return oneOf(loc.eras("short"), 0);
      case "GG":
        return oneOf(loc.eras("long"), 0);
      case "y":
        return intUnit(oneToSix);
      case "yy":
        return intUnit(twoToFour, untruncateYear);
      case "yyyy":
        return intUnit(four);
      case "yyyyy":
        return intUnit(fourToSix);
      case "yyyyyy":
        return intUnit(six);
      case "M":
        return intUnit(oneOrTwo);
      case "MM":
        return intUnit(two);
      case "MMM":
        return oneOf(loc.months("short", true), 1);
      case "MMMM":
        return oneOf(loc.months("long", true), 1);
      case "L":
        return intUnit(oneOrTwo);
      case "LL":
        return intUnit(two);
      case "LLL":
        return oneOf(loc.months("short", false), 1);
      case "LLLL":
        return oneOf(loc.months("long", false), 1);
      case "d":
        return intUnit(oneOrTwo);
      case "dd":
        return intUnit(two);
      case "o":
        return intUnit(oneToThree);
      case "ooo":
        return intUnit(three);
      case "HH":
        return intUnit(two);
      case "H":
        return intUnit(oneOrTwo);
      case "hh":
        return intUnit(two);
      case "h":
        return intUnit(oneOrTwo);
      case "mm":
        return intUnit(two);
      case "m":
        return intUnit(oneOrTwo);
      case "q":
        return intUnit(oneOrTwo);
      case "qq":
        return intUnit(two);
      case "s":
        return intUnit(oneOrTwo);
      case "ss":
        return intUnit(two);
      case "S":
        return intUnit(oneToThree);
      case "SSS":
        return intUnit(three);
      case "u":
        return simple(oneToNine);
      case "uu":
        return simple(oneOrTwo);
      case "uuu":
        return intUnit(one);
      case "a":
        return oneOf(loc.meridiems(), 0);
      case "kkkk":
        return intUnit(four);
      case "kk":
        return intUnit(twoToFour, untruncateYear);
      case "W":
        return intUnit(oneOrTwo);
      case "WW":
        return intUnit(two);
      case "E":
      case "c":
        return intUnit(one);
      case "EEE":
        return oneOf(loc.weekdays("short", false), 1);
      case "EEEE":
        return oneOf(loc.weekdays("long", false), 1);
      case "ccc":
        return oneOf(loc.weekdays("short", true), 1);
      case "cccc":
        return oneOf(loc.weekdays("long", true), 1);
      case "Z":
      case "ZZ":
        return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);
      case "ZZZ":
        return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);
      case "z":
        return simple(/[a-z_+-/]{1,256}?/i);
      case " ":
        return simple(/[^\S\n\r]/);
      default:
        return literal(t);
    }
  };
  const unit = unitate(token) || {
    invalidReason: MISSING_FTP
  };
  unit.token = token;
  return unit;
}
function tokenForPart(part, formatOpts, resolvedOpts) {
  const { type: type2, value } = part;
  if (type2 === "literal") {
    const isSpace = /^\s+$/.test(value);
    return {
      literal: !isSpace,
      val: isSpace ? " " : value
    };
  }
  const style = formatOpts[type2];
  let actualType = type2;
  if (type2 === "hour") {
    if (formatOpts.hour12 != null) {
      actualType = formatOpts.hour12 ? "hour12" : "hour24";
    } else if (formatOpts.hourCycle != null) {
      if (formatOpts.hourCycle === "h11" || formatOpts.hourCycle === "h12") {
        actualType = "hour12";
      } else {
        actualType = "hour24";
      }
    } else {
      actualType = resolvedOpts.hour12 ? "hour12" : "hour24";
    }
  }
  let val = partTypeStyleToTokenVal[actualType];
  if (typeof val === "object") {
    val = val[style];
  }
  if (val) {
    return {
      literal: false,
      val
    };
  }
  return void 0;
}
function buildRegex(units) {
  const re = units.map((u) => u.regex).reduce((f, r) => `${f}(${r.source})`, "");
  return [`^${re}$`, units];
}
function match(input, regex, handlers) {
  const matches = input.match(regex);
  if (matches) {
    const all = {};
    let matchIndex = 1;
    for (const i in handlers) {
      if (hasOwnProperty(handlers, i)) {
        const h = handlers[i], groups = h.groups ? h.groups + 1 : 1;
        if (!h.literal && h.token) {
          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
        }
        matchIndex += groups;
      }
    }
    return [matches, all];
  } else {
    return [matches, {}];
  }
}
function dateTimeFromMatches(matches) {
  const toField = (token) => {
    switch (token) {
      case "S":
        return "millisecond";
      case "s":
        return "second";
      case "m":
        return "minute";
      case "h":
      case "H":
        return "hour";
      case "d":
        return "day";
      case "o":
        return "ordinal";
      case "L":
      case "M":
        return "month";
      case "y":
        return "year";
      case "E":
      case "c":
        return "weekday";
      case "W":
        return "weekNumber";
      case "k":
        return "weekYear";
      case "q":
        return "quarter";
      default:
        return null;
    }
  };
  let zone = null;
  let specificOffset;
  if (!isUndefined(matches.z)) {
    zone = IANAZone.create(matches.z);
  }
  if (!isUndefined(matches.Z)) {
    if (!zone) {
      zone = new FixedOffsetZone(matches.Z);
    }
    specificOffset = matches.Z;
  }
  if (!isUndefined(matches.q)) {
    matches.M = (matches.q - 1) * 3 + 1;
  }
  if (!isUndefined(matches.h)) {
    if (matches.h < 12 && matches.a === 1) {
      matches.h += 12;
    } else if (matches.h === 12 && matches.a === 0) {
      matches.h = 0;
    }
  }
  if (matches.G === 0 && matches.y) {
    matches.y = -matches.y;
  }
  if (!isUndefined(matches.u)) {
    matches.S = parseMillis(matches.u);
  }
  const vals = Object.keys(matches).reduce((r, k) => {
    const f = toField(k);
    if (f) {
      r[f] = matches[k];
    }
    return r;
  }, {});
  return [vals, zone, specificOffset];
}
function getDummyDateTime() {
  if (!dummyDateTimeCache) {
    dummyDateTimeCache = DateTime.fromMillis(1555555555555);
  }
  return dummyDateTimeCache;
}
function maybeExpandMacroToken(token, locale) {
  if (token.literal) {
    return token;
  }
  const formatOpts = Formatter.macroTokenToFormatOpts(token.val);
  const tokens = formatOptsToTokens(formatOpts, locale);
  if (tokens == null || tokens.includes(void 0)) {
    return token;
  }
  return tokens;
}
function expandMacroTokens(tokens, locale) {
  return Array.prototype.concat(...tokens.map((t) => maybeExpandMacroToken(t, locale)));
}
function explainFromTokens(locale, input, format) {
  const tokens = expandMacroTokens(Formatter.parseFormat(format), locale), units = tokens.map((t) => unitForToken(t, locale)), disqualifyingUnit = units.find((t) => t.invalidReason);
  if (disqualifyingUnit) {
    return { input, tokens, invalidReason: disqualifyingUnit.invalidReason };
  } else {
    const [regexString, handlers] = buildRegex(units), regex = RegExp(regexString, "i"), [rawMatches, matches] = match(input, regex, handlers), [result, zone, specificOffset] = matches ? dateTimeFromMatches(matches) : [null, null, void 0];
    if (hasOwnProperty(matches, "a") && hasOwnProperty(matches, "H")) {
      throw new ConflictingSpecificationError(
        "Can't include meridiem when specifying 24-hour format"
      );
    }
    return { input, tokens, regex, rawMatches, matches, result, zone, specificOffset };
  }
}
function parseFromTokens(locale, input, format) {
  const { result, zone, specificOffset, invalidReason } = explainFromTokens(locale, input, format);
  return [result, zone, specificOffset, invalidReason];
}
function formatOptsToTokens(formatOpts, locale) {
  if (!formatOpts) {
    return null;
  }
  const formatter = Formatter.create(locale, formatOpts);
  const df = formatter.dtFormatter(getDummyDateTime());
  const parts = df.formatToParts();
  const resolvedOpts = df.resolvedOptions();
  return parts.map((p) => tokenForPart(p, formatOpts, resolvedOpts));
}
var MISSING_FTP, NBSP, spaceOrNBSP, spaceOrNBSPRegExp, partTypeStyleToTokenVal, dummyDateTimeCache;
var init_tokenParser = __esm({
  "node_modules/luxon/src/impl/tokenParser.js"() {
    init_util();
    init_formatter();
    init_fixedOffsetZone();
    init_IANAZone();
    init_datetime();
    init_digits();
    init_errors();
    MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";
    NBSP = String.fromCharCode(160);
    spaceOrNBSP = `[ ${NBSP}]`;
    spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");
    partTypeStyleToTokenVal = {
      year: {
        "2-digit": "yy",
        numeric: "yyyyy"
      },
      month: {
        numeric: "M",
        "2-digit": "MM",
        short: "MMM",
        long: "MMMM"
      },
      day: {
        numeric: "d",
        "2-digit": "dd"
      },
      weekday: {
        short: "EEE",
        long: "EEEE"
      },
      dayperiod: "a",
      dayPeriod: "a",
      hour12: {
        numeric: "h",
        "2-digit": "hh"
      },
      hour24: {
        numeric: "H",
        "2-digit": "HH"
      },
      minute: {
        numeric: "m",
        "2-digit": "mm"
      },
      second: {
        numeric: "s",
        "2-digit": "ss"
      },
      timeZoneName: {
        long: "ZZZZZ",
        short: "ZZZ"
      }
    };
    dummyDateTimeCache = null;
  }
});

// node_modules/luxon/src/datetime.js
function unsupportedZone(zone) {
  return new Invalid("unsupported zone", `the zone "${zone.name}" is not supported`);
}
function possiblyCachedWeekData(dt) {
  if (dt.weekData === null) {
    dt.weekData = gregorianToWeek(dt.c);
  }
  return dt.weekData;
}
function possiblyCachedLocalWeekData(dt) {
  if (dt.localWeekData === null) {
    dt.localWeekData = gregorianToWeek(
      dt.c,
      dt.loc.getMinDaysInFirstWeek(),
      dt.loc.getStartOfWeek()
    );
  }
  return dt.localWeekData;
}
function clone2(inst, alts) {
  const current = {
    ts: inst.ts,
    zone: inst.zone,
    c: inst.c,
    o: inst.o,
    loc: inst.loc,
    invalid: inst.invalid
  };
  return new DateTime({ ...current, ...alts, old: current });
}
function fixOffset(localTS, o, tz) {
  let utcGuess = localTS - o * 60 * 1e3;
  const o2 = tz.offset(utcGuess);
  if (o === o2) {
    return [utcGuess, o];
  }
  utcGuess -= (o2 - o) * 60 * 1e3;
  const o3 = tz.offset(utcGuess);
  if (o2 === o3) {
    return [utcGuess, o2];
  }
  return [localTS - Math.min(o2, o3) * 60 * 1e3, Math.max(o2, o3)];
}
function tsToObj(ts, offset2) {
  ts += offset2 * 60 * 1e3;
  const d = new Date(ts);
  return {
    year: d.getUTCFullYear(),
    month: d.getUTCMonth() + 1,
    day: d.getUTCDate(),
    hour: d.getUTCHours(),
    minute: d.getUTCMinutes(),
    second: d.getUTCSeconds(),
    millisecond: d.getUTCMilliseconds()
  };
}
function objToTS(obj, offset2, zone) {
  return fixOffset(objToLocalTS(obj), offset2, zone);
}
function adjustTime(inst, dur) {
  const oPre = inst.o, year = inst.c.year + Math.trunc(dur.years), month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3, c = {
    ...inst.c,
    year,
    month,
    day: Math.min(inst.c.day, daysInMonth(year, month)) + Math.trunc(dur.days) + Math.trunc(dur.weeks) * 7
  }, millisToAdd = Duration.fromObject({
    years: dur.years - Math.trunc(dur.years),
    quarters: dur.quarters - Math.trunc(dur.quarters),
    months: dur.months - Math.trunc(dur.months),
    weeks: dur.weeks - Math.trunc(dur.weeks),
    days: dur.days - Math.trunc(dur.days),
    hours: dur.hours,
    minutes: dur.minutes,
    seconds: dur.seconds,
    milliseconds: dur.milliseconds
  }).as("milliseconds"), localTS = objToLocalTS(c);
  let [ts, o] = fixOffset(localTS, oPre, inst.zone);
  if (millisToAdd !== 0) {
    ts += millisToAdd;
    o = inst.zone.offset(ts);
  }
  return { ts, o };
}
function parseDataToDateTime(parsed, parsedZone, opts, format, text, specificOffset) {
  const { setZone, zone } = opts;
  if (parsed && Object.keys(parsed).length !== 0 || parsedZone) {
    const interpretationZone = parsedZone || zone, inst = DateTime.fromObject(parsed, {
      ...opts,
      zone: interpretationZone,
      specificOffset
    });
    return setZone ? inst : inst.setZone(zone);
  } else {
    return DateTime.invalid(
      new Invalid("unparsable", `the input "${text}" can't be parsed as ${format}`)
    );
  }
}
function toTechFormat(dt, format, allowZ = true) {
  return dt.isValid ? Formatter.create(Locale.create("en-US"), {
    allowZ,
    forceSimple: true
  }).formatDateTimeFromString(dt, format) : null;
}
function toISODate(o, extended) {
  const longFormat = o.c.year > 9999 || o.c.year < 0;
  let c = "";
  if (longFormat && o.c.year >= 0)
    c += "+";
  c += padStart(o.c.year, longFormat ? 6 : 4);
  if (extended) {
    c += "-";
    c += padStart(o.c.month);
    c += "-";
    c += padStart(o.c.day);
  } else {
    c += padStart(o.c.month);
    c += padStart(o.c.day);
  }
  return c;
}
function toISOTime(o, extended, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone) {
  let c = padStart(o.c.hour);
  if (extended) {
    c += ":";
    c += padStart(o.c.minute);
    if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {
      c += ":";
    }
  } else {
    c += padStart(o.c.minute);
  }
  if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {
    c += padStart(o.c.second);
    if (o.c.millisecond !== 0 || !suppressMilliseconds) {
      c += ".";
      c += padStart(o.c.millisecond, 3);
    }
  }
  if (includeOffset) {
    if (o.isOffsetFixed && o.offset === 0 && !extendedZone) {
      c += "Z";
    } else if (o.o < 0) {
      c += "-";
      c += padStart(Math.trunc(-o.o / 60));
      c += ":";
      c += padStart(Math.trunc(-o.o % 60));
    } else {
      c += "+";
      c += padStart(Math.trunc(o.o / 60));
      c += ":";
      c += padStart(Math.trunc(o.o % 60));
    }
  }
  if (extendedZone) {
    c += "[" + o.zone.ianaName + "]";
  }
  return c;
}
function normalizeUnit(unit) {
  const normalized = {
    year: "year",
    years: "year",
    month: "month",
    months: "month",
    day: "day",
    days: "day",
    hour: "hour",
    hours: "hour",
    minute: "minute",
    minutes: "minute",
    quarter: "quarter",
    quarters: "quarter",
    second: "second",
    seconds: "second",
    millisecond: "millisecond",
    milliseconds: "millisecond",
    weekday: "weekday",
    weekdays: "weekday",
    weeknumber: "weekNumber",
    weeksnumber: "weekNumber",
    weeknumbers: "weekNumber",
    weekyear: "weekYear",
    weekyears: "weekYear",
    ordinal: "ordinal"
  }[unit.toLowerCase()];
  if (!normalized)
    throw new InvalidUnitError(unit);
  return normalized;
}
function normalizeUnitWithLocalWeeks(unit) {
  switch (unit.toLowerCase()) {
    case "localweekday":
    case "localweekdays":
      return "localWeekday";
    case "localweeknumber":
    case "localweeknumbers":
      return "localWeekNumber";
    case "localweekyear":
    case "localweekyears":
      return "localWeekYear";
    default:
      return normalizeUnit(unit);
  }
}
function quickDT(obj, opts) {
  const zone = normalizeZone(opts.zone, Settings.defaultZone), loc = Locale.fromObject(opts), tsNow = Settings.now();
  let ts, o;
  if (!isUndefined(obj.year)) {
    for (const u of orderedUnits2) {
      if (isUndefined(obj[u])) {
        obj[u] = defaultUnitValues[u];
      }
    }
    const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);
    if (invalid) {
      return DateTime.invalid(invalid);
    }
    const offsetProvis = zone.offset(tsNow);
    [ts, o] = objToTS(obj, offsetProvis, zone);
  } else {
    ts = tsNow;
  }
  return new DateTime({ ts, zone, loc, o });
}
function diffRelative(start, end, opts) {
  const round = isUndefined(opts.round) ? true : opts.round, format = (c, unit) => {
    c = roundTo(c, round || opts.calendary ? 0 : 2, true);
    const formatter = end.loc.clone(opts).relFormatter(opts);
    return formatter.format(c, unit);
  }, differ = (unit) => {
    if (opts.calendary) {
      if (!end.hasSame(start, unit)) {
        return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);
      } else
        return 0;
    } else {
      return end.diff(start, unit).get(unit);
    }
  };
  if (opts.unit) {
    return format(differ(opts.unit), opts.unit);
  }
  for (const unit of opts.units) {
    const count = differ(unit);
    if (Math.abs(count) >= 1) {
      return format(count, unit);
    }
  }
  return format(start > end ? -0 : 0, opts.units[opts.units.length - 1]);
}
function lastOpts(argList) {
  let opts = {}, args;
  if (argList.length > 0 && typeof argList[argList.length - 1] === "object") {
    opts = argList[argList.length - 1];
    args = Array.from(argList).slice(0, argList.length - 1);
  } else {
    args = Array.from(argList);
  }
  return [opts, args];
}
function friendlyDateTime(dateTimeish) {
  if (DateTime.isDateTime(dateTimeish)) {
    return dateTimeish;
  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {
    return DateTime.fromJSDate(dateTimeish);
  } else if (dateTimeish && typeof dateTimeish === "object") {
    return DateTime.fromObject(dateTimeish);
  } else {
    throw new InvalidArgumentError(
      `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`
    );
  }
}
var INVALID3, MAX_DATE, defaultUnitValues, defaultWeekUnitValues, defaultOrdinalUnitValues, orderedUnits2, orderedWeekUnits, orderedOrdinalUnits, DateTime;
var init_datetime = __esm({
  "node_modules/luxon/src/datetime.js"() {
    init_duration();
    init_interval();
    init_settings();
    init_info();
    init_formatter();
    init_fixedOffsetZone();
    init_locale();
    init_util();
    init_zoneUtil();
    init_diff();
    init_regexParser();
    init_tokenParser();
    init_conversions();
    init_formats();
    init_errors();
    init_invalid();
    INVALID3 = "Invalid DateTime";
    MAX_DATE = 864e13;
    defaultUnitValues = {
      month: 1,
      day: 1,
      hour: 0,
      minute: 0,
      second: 0,
      millisecond: 0
    };
    defaultWeekUnitValues = {
      weekNumber: 1,
      weekday: 1,
      hour: 0,
      minute: 0,
      second: 0,
      millisecond: 0
    };
    defaultOrdinalUnitValues = {
      ordinal: 1,
      hour: 0,
      minute: 0,
      second: 0,
      millisecond: 0
    };
    orderedUnits2 = ["year", "month", "day", "hour", "minute", "second", "millisecond"];
    orderedWeekUnits = [
      "weekYear",
      "weekNumber",
      "weekday",
      "hour",
      "minute",
      "second",
      "millisecond"
    ];
    orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"];
    DateTime = class _DateTime {
      /**
       * @access private
       */
      constructor(config) {
        const zone = config.zone || Settings.defaultZone;
        let invalid = config.invalid || (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) || (!zone.isValid ? unsupportedZone(zone) : null);
        this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;
        let c = null, o = null;
        if (!invalid) {
          const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);
          if (unchanged) {
            [c, o] = [config.old.c, config.old.o];
          } else {
            const ot = zone.offset(this.ts);
            c = tsToObj(this.ts, ot);
            invalid = Number.isNaN(c.year) ? new Invalid("invalid input") : null;
            c = invalid ? null : c;
            o = invalid ? null : ot;
          }
        }
        this._zone = zone;
        this.loc = config.loc || Locale.create();
        this.invalid = invalid;
        this.weekData = null;
        this.localWeekData = null;
        this.c = c;
        this.o = o;
        this.isLuxonDateTime = true;
      }
      // CONSTRUCT
      /**
       * Create a DateTime for the current instant, in the system's time zone.
       *
       * Use Settings to override these default values if needed.
       * @example DateTime.now().toISO() //~> now in the ISO format
       * @return {DateTime}
       */
      static now() {
        return new _DateTime({});
      }
      /**
       * Create a local DateTime
       * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
       * @param {number} [month=1] - The month, 1-indexed
       * @param {number} [day=1] - The day of the month, 1-indexed
       * @param {number} [hour=0] - The hour of the day, in 24-hour time
       * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
       * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
       * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
       * @example DateTime.local()                                  //~> now
       * @example DateTime.local({ zone: "America/New_York" })      //~> now, in US east coast time
       * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00
       * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00
       * @example DateTime.local(2017, 3, 12, { locale: "fr" })     //~> 2017-03-12T00:00:00, with a French locale
       * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00
       * @example DateTime.local(2017, 3, 12, 5, { zone: "utc" })   //~> 2017-03-12T05:00:00, in UTC
       * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00
       * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10
       * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765
       * @return {DateTime}
       */
      static local() {
        const [opts, args] = lastOpts(arguments), [year, month, day, hour, minute, second, millisecond] = args;
        return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
      }
      /**
       * Create a DateTime in UTC
       * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
       * @param {number} [month=1] - The month, 1-indexed
       * @param {number} [day=1] - The day of the month
       * @param {number} [hour=0] - The hour of the day, in 24-hour time
       * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
       * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
       * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
       * @param {Object} options - configuration options for the DateTime
       * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
       * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance
       * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance
       * @example DateTime.utc()                                              //~> now
       * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z
       * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z
       * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z
       * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z
       * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z
       * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: "fr" })          //~> 2017-03-12T05:45:00Z with a French locale
       * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z
       * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: "fr" }) //~> 2017-03-12T05:45:10.765Z with a French locale
       * @return {DateTime}
       */
      static utc() {
        const [opts, args] = lastOpts(arguments), [year, month, day, hour, minute, second, millisecond] = args;
        opts.zone = FixedOffsetZone.utcInstance;
        return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
      }
      /**
       * Create a DateTime from a JavaScript Date object. Uses the default zone.
       * @param {Date} date - a JavaScript Date object
       * @param {Object} options - configuration options for the DateTime
       * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
       * @return {DateTime}
       */
      static fromJSDate(date, options = {}) {
        const ts = isDate(date) ? date.valueOf() : NaN;
        if (Number.isNaN(ts)) {
          return _DateTime.invalid("invalid input");
        }
        const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);
        if (!zoneToUse.isValid) {
          return _DateTime.invalid(unsupportedZone(zoneToUse));
        }
        return new _DateTime({
          ts,
          zone: zoneToUse,
          loc: Locale.fromObject(options)
        });
      }
      /**
       * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
       * @param {number} milliseconds - a number of milliseconds since 1970 UTC
       * @param {Object} options - configuration options for the DateTime
       * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
       * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
       * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @return {DateTime}
       */
      static fromMillis(milliseconds, options = {}) {
        if (!isNumber(milliseconds)) {
          throw new InvalidArgumentError(
            `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`
          );
        } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
          return _DateTime.invalid("Timestamp out of range");
        } else {
          return new _DateTime({
            ts: milliseconds,
            zone: normalizeZone(options.zone, Settings.defaultZone),
            loc: Locale.fromObject(options)
          });
        }
      }
      /**
       * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
       * @param {number} seconds - a number of seconds since 1970 UTC
       * @param {Object} options - configuration options for the DateTime
       * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
       * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
       * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @return {DateTime}
       */
      static fromSeconds(seconds, options = {}) {
        if (!isNumber(seconds)) {
          throw new InvalidArgumentError("fromSeconds requires a numerical input");
        } else {
          return new _DateTime({
            ts: seconds * 1e3,
            zone: normalizeZone(options.zone, Settings.defaultZone),
            loc: Locale.fromObject(options)
          });
        }
      }
      /**
       * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.
       * @param {Object} obj - the object to create the DateTime from
       * @param {number} obj.year - a year, such as 1987
       * @param {number} obj.month - a month, 1-12
       * @param {number} obj.day - a day of the month, 1-31, depending on the month
       * @param {number} obj.ordinal - day of the year, 1-365 or 366
       * @param {number} obj.weekYear - an ISO week year
       * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
       * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
       * @param {number} obj.localWeekYear - a week year, according to the locale
       * @param {number} obj.localWeekNumber - a week number, between 1 and 52 or 53, depending on the year, according to the locale
       * @param {number} obj.localWeekday - a weekday, 1-7, where 1 is the first and 7 is the last day of the week, according to the locale
       * @param {number} obj.hour - hour of the day, 0-23
       * @param {number} obj.minute - minute of the hour, 0-59
       * @param {number} obj.second - second of the minute, 0-59
       * @param {number} obj.millisecond - millisecond of the second, 0-999
       * @param {Object} opts - options for creating this DateTime
       * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
       * @param {string} [opts.locale='system\'s locale'] - a locale to set on the resulting DateTime instance
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
       * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
       * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
       * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),
       * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })
       * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })
       * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
       * @example DateTime.fromObject({ localWeekYear: 2022, localWeekNumber: 1, localWeekday: 1 }, { locale: "en-US" }).toISODate() //=> '2021-12-26'
       * @return {DateTime}
       */
      static fromObject(obj, opts = {}) {
        obj = obj || {};
        const zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);
        if (!zoneToUse.isValid) {
          return _DateTime.invalid(unsupportedZone(zoneToUse));
        }
        const loc = Locale.fromObject(opts);
        const normalized = normalizeObject(obj, normalizeUnitWithLocalWeeks);
        const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, loc);
        const tsNow = Settings.now(), offsetProvis = !isUndefined(opts.specificOffset) ? opts.specificOffset : zoneToUse.offset(tsNow), containsOrdinal = !isUndefined(normalized.ordinal), containsGregorYear = !isUndefined(normalized.year), containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber;
        if ((containsGregor || containsOrdinal) && definiteWeekDef) {
          throw new ConflictingSpecificationError(
            "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
          );
        }
        if (containsGregorMD && containsOrdinal) {
          throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
        }
        const useWeekData = definiteWeekDef || normalized.weekday && !containsGregor;
        let units, defaultValues, objNow = tsToObj(tsNow, offsetProvis);
        if (useWeekData) {
          units = orderedWeekUnits;
          defaultValues = defaultWeekUnitValues;
          objNow = gregorianToWeek(objNow, minDaysInFirstWeek, startOfWeek);
        } else if (containsOrdinal) {
          units = orderedOrdinalUnits;
          defaultValues = defaultOrdinalUnitValues;
          objNow = gregorianToOrdinal(objNow);
        } else {
          units = orderedUnits2;
          defaultValues = defaultUnitValues;
        }
        let foundFirst = false;
        for (const u of units) {
          const v = normalized[u];
          if (!isUndefined(v)) {
            foundFirst = true;
          } else if (foundFirst) {
            normalized[u] = defaultValues[u];
          } else {
            normalized[u] = objNow[u];
          }
        }
        const higherOrderInvalid = useWeekData ? hasInvalidWeekData(normalized, minDaysInFirstWeek, startOfWeek) : containsOrdinal ? hasInvalidOrdinalData(normalized) : hasInvalidGregorianData(normalized), invalid = higherOrderInvalid || hasInvalidTimeData(normalized);
        if (invalid) {
          return _DateTime.invalid(invalid);
        }
        const gregorian = useWeekData ? weekToGregorian(normalized, minDaysInFirstWeek, startOfWeek) : containsOrdinal ? ordinalToGregorian(normalized) : normalized, [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse), inst = new _DateTime({
          ts: tsFinal,
          zone: zoneToUse,
          o: offsetFinal,
          loc
        });
        if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
          return _DateTime.invalid(
            "mismatched weekday",
            `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`
          );
        }
        return inst;
      }
      /**
       * Create a DateTime from an ISO 8601 string
       * @param {string} text - the ISO string
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
       * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
       * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
       * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance
       * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance
       * @example DateTime.fromISO('2016-05-25T09:08:34.123')
       * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
       * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
       * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
       * @example DateTime.fromISO('2016-W05-4')
       * @return {DateTime}
       */
      static fromISO(text, opts = {}) {
        const [vals, parsedZone] = parseISODate(text);
        return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
      }
      /**
       * Create a DateTime from an RFC 2822 string
       * @param {string} text - the RFC 2822 string
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
       * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
       * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
       * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
       * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
       * @return {DateTime}
       */
      static fromRFC2822(text, opts = {}) {
        const [vals, parsedZone] = parseRFC2822Date(text);
        return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
      }
      /**
       * Create a DateTime from an HTTP header date
       * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
       * @param {string} text - the HTTP header date
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
       * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
       * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
       * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
       * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
       * @return {DateTime}
       */
      static fromHTTP(text, opts = {}) {
        const [vals, parsedZone] = parseHTTPDate(text);
        return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
      }
      /**
       * Create a DateTime from an input string and format string.
       * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).
       * @param {string} text - the string to parse
       * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
       * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
       * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
       * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @return {DateTime}
       */
      static fromFormat(text, fmt, opts = {}) {
        if (isUndefined(text) || isUndefined(fmt)) {
          throw new InvalidArgumentError("fromFormat requires an input string and a format");
        }
        const { locale = null, numberingSystem = null } = opts, localeToUse = Locale.fromOpts({
          locale,
          numberingSystem,
          defaultToEN: true
        }), [vals, parsedZone, specificOffset, invalid] = parseFromTokens(localeToUse, text, fmt);
        if (invalid) {
          return _DateTime.invalid(invalid);
        } else {
          return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text, specificOffset);
        }
      }
      /**
       * @deprecated use fromFormat instead
       */
      static fromString(text, fmt, opts = {}) {
        return _DateTime.fromFormat(text, fmt, opts);
      }
      /**
       * Create a DateTime from a SQL date, time, or datetime
       * Defaults to en-US if no locale has been specified, regardless of the system's locale
       * @param {string} text - the string to parse
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
       * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
       * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
       * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @example DateTime.fromSQL('2017-05-15')
       * @example DateTime.fromSQL('2017-05-15 09:12:34')
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
       * @example DateTime.fromSQL('09:12:34.342')
       * @return {DateTime}
       */
      static fromSQL(text, opts = {}) {
        const [vals, parsedZone] = parseSQL(text);
        return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
      }
      /**
       * Create an invalid DateTime.
       * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent.
       * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
       * @return {DateTime}
       */
      static invalid(reason, explanation = null) {
        if (!reason) {
          throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
        }
        const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
        if (Settings.throwOnInvalid) {
          throw new InvalidDateTimeError(invalid);
        } else {
          return new _DateTime({ invalid });
        }
      }
      /**
       * Check if an object is an instance of DateTime. Works across context boundaries
       * @param {object} o
       * @return {boolean}
       */
      static isDateTime(o) {
        return o && o.isLuxonDateTime || false;
      }
      /**
       * Produce the format string for a set of options
       * @param formatOpts
       * @param localeOpts
       * @returns {string}
       */
      static parseFormatForOpts(formatOpts, localeOpts = {}) {
        const tokenList = formatOptsToTokens(formatOpts, Locale.fromObject(localeOpts));
        return !tokenList ? null : tokenList.map((t) => t ? t.val : null).join("");
      }
      /**
       * Produce the the fully expanded format token for the locale
       * Does NOT quote characters, so quoted tokens will not round trip correctly
       * @param fmt
       * @param localeOpts
       * @returns {string}
       */
      static expandFormat(fmt, localeOpts = {}) {
        const expanded = expandMacroTokens(Formatter.parseFormat(fmt), Locale.fromObject(localeOpts));
        return expanded.map((t) => t.val).join("");
      }
      // INFO
      /**
       * Get the value of unit.
       * @param {string} unit - a unit such as 'minute' or 'day'
       * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
       * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
       * @return {number}
       */
      get(unit) {
        return this[unit];
      }
      /**
       * Returns whether the DateTime is valid. Invalid DateTimes occur when:
       * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
       * * The DateTime was created by an operation on another invalid date
       * @type {boolean}
       */
      get isValid() {
        return this.invalid === null;
      }
      /**
       * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
       * @type {string}
       */
      get invalidReason() {
        return this.invalid ? this.invalid.reason : null;
      }
      /**
       * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
       * @type {string}
       */
      get invalidExplanation() {
        return this.invalid ? this.invalid.explanation : null;
      }
      /**
       * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
       *
       * @type {string}
       */
      get locale() {
        return this.isValid ? this.loc.locale : null;
      }
      /**
       * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
       *
       * @type {string}
       */
      get numberingSystem() {
        return this.isValid ? this.loc.numberingSystem : null;
      }
      /**
       * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
       *
       * @type {string}
       */
      get outputCalendar() {
        return this.isValid ? this.loc.outputCalendar : null;
      }
      /**
       * Get the time zone associated with this DateTime.
       * @type {Zone}
       */
      get zone() {
        return this._zone;
      }
      /**
       * Get the name of the time zone.
       * @type {string}
       */
      get zoneName() {
        return this.isValid ? this.zone.name : null;
      }
      /**
       * Get the year
       * @example DateTime.local(2017, 5, 25).year //=> 2017
       * @type {number}
       */
      get year() {
        return this.isValid ? this.c.year : NaN;
      }
      /**
       * Get the quarter
       * @example DateTime.local(2017, 5, 25).quarter //=> 2
       * @type {number}
       */
      get quarter() {
        return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
      }
      /**
       * Get the month (1-12).
       * @example DateTime.local(2017, 5, 25).month //=> 5
       * @type {number}
       */
      get month() {
        return this.isValid ? this.c.month : NaN;
      }
      /**
       * Get the day of the month (1-30ish).
       * @example DateTime.local(2017, 5, 25).day //=> 25
       * @type {number}
       */
      get day() {
        return this.isValid ? this.c.day : NaN;
      }
      /**
       * Get the hour of the day (0-23).
       * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
       * @type {number}
       */
      get hour() {
        return this.isValid ? this.c.hour : NaN;
      }
      /**
       * Get the minute of the hour (0-59).
       * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
       * @type {number}
       */
      get minute() {
        return this.isValid ? this.c.minute : NaN;
      }
      /**
       * Get the second of the minute (0-59).
       * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
       * @type {number}
       */
      get second() {
        return this.isValid ? this.c.second : NaN;
      }
      /**
       * Get the millisecond of the second (0-999).
       * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
       * @type {number}
       */
      get millisecond() {
        return this.isValid ? this.c.millisecond : NaN;
      }
      /**
       * Get the week year
       * @see https://en.wikipedia.org/wiki/ISO_week_date
       * @example DateTime.local(2014, 12, 31).weekYear //=> 2015
       * @type {number}
       */
      get weekYear() {
        return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
      }
      /**
       * Get the week number of the week year (1-52ish).
       * @see https://en.wikipedia.org/wiki/ISO_week_date
       * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
       * @type {number}
       */
      get weekNumber() {
        return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
      }
      /**
       * Get the day of the week.
       * 1 is Monday and 7 is Sunday
       * @see https://en.wikipedia.org/wiki/ISO_week_date
       * @example DateTime.local(2014, 11, 31).weekday //=> 4
       * @type {number}
       */
      get weekday() {
        return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
      }
      /**
       * Returns true if this date is on a weekend according to the locale, false otherwise
       * @returns {boolean}
       */
      get isWeekend() {
        return this.isValid && this.loc.getWeekendDays().includes(this.weekday);
      }
      /**
       * Get the day of the week according to the locale.
       * 1 is the first day of the week and 7 is the last day of the week.
       * If the locale assigns Sunday as the first day of the week, then a date which is a Sunday will return 1,
       * @returns {number}
       */
      get localWeekday() {
        return this.isValid ? possiblyCachedLocalWeekData(this).weekday : NaN;
      }
      /**
       * Get the week number of the week year according to the locale. Different locales assign week numbers differently,
       * because the week can start on different days of the week (see localWeekday) and because a different number of days
       * is required for a week to count as the first week of a year.
       * @returns {number}
       */
      get localWeekNumber() {
        return this.isValid ? possiblyCachedLocalWeekData(this).weekNumber : NaN;
      }
      /**
       * Get the week year according to the locale. Different locales assign week numbers (and therefor week years)
       * differently, see localWeekNumber.
       * @returns {number}
       */
      get localWeekYear() {
        return this.isValid ? possiblyCachedLocalWeekData(this).weekYear : NaN;
      }
      /**
       * Get the ordinal (meaning the day of the year)
       * @example DateTime.local(2017, 5, 25).ordinal //=> 145
       * @type {number|DateTime}
       */
      get ordinal() {
        return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
      }
      /**
       * Get the human readable short month name, such as 'Oct'.
       * Defaults to the system's locale if no locale has been specified
       * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
       * @type {string}
       */
      get monthShort() {
        return this.isValid ? Info.months("short", { locObj: this.loc })[this.month - 1] : null;
      }
      /**
       * Get the human readable long month name, such as 'October'.
       * Defaults to the system's locale if no locale has been specified
       * @example DateTime.local(2017, 10, 30).monthLong //=> October
       * @type {string}
       */
      get monthLong() {
        return this.isValid ? Info.months("long", { locObj: this.loc })[this.month - 1] : null;
      }
      /**
       * Get the human readable short weekday, such as 'Mon'.
       * Defaults to the system's locale if no locale has been specified
       * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
       * @type {string}
       */
      get weekdayShort() {
        return this.isValid ? Info.weekdays("short", { locObj: this.loc })[this.weekday - 1] : null;
      }
      /**
       * Get the human readable long weekday, such as 'Monday'.
       * Defaults to the system's locale if no locale has been specified
       * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
       * @type {string}
       */
      get weekdayLong() {
        return this.isValid ? Info.weekdays("long", { locObj: this.loc })[this.weekday - 1] : null;
      }
      /**
       * Get the UTC offset of this DateTime in minutes
       * @example DateTime.now().offset //=> -240
       * @example DateTime.utc().offset //=> 0
       * @type {number}
       */
      get offset() {
        return this.isValid ? +this.o : NaN;
      }
      /**
       * Get the short human name for the zone's current offset, for example "EST" or "EDT".
       * Defaults to the system's locale if no locale has been specified
       * @type {string}
       */
      get offsetNameShort() {
        if (this.isValid) {
          return this.zone.offsetName(this.ts, {
            format: "short",
            locale: this.locale
          });
        } else {
          return null;
        }
      }
      /**
       * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
       * Defaults to the system's locale if no locale has been specified
       * @type {string}
       */
      get offsetNameLong() {
        if (this.isValid) {
          return this.zone.offsetName(this.ts, {
            format: "long",
            locale: this.locale
          });
        } else {
          return null;
        }
      }
      /**
       * Get whether this zone's offset ever changes, as in a DST.
       * @type {boolean}
       */
      get isOffsetFixed() {
        return this.isValid ? this.zone.isUniversal : null;
      }
      /**
       * Get whether the DateTime is in a DST.
       * @type {boolean}
       */
      get isInDST() {
        if (this.isOffsetFixed) {
          return false;
        } else {
          return this.offset > this.set({ month: 1, day: 1 }).offset || this.offset > this.set({ month: 5 }).offset;
        }
      }
      /**
       * Get those DateTimes which have the same local time as this DateTime, but a different offset from UTC
       * in this DateTime's zone. During DST changes local time can be ambiguous, for example
       * `2023-10-29T02:30:00` in `Europe/Berlin` can have offset `+01:00` or `+02:00`.
       * This method will return both possible DateTimes if this DateTime's local time is ambiguous.
       * @returns {DateTime[]}
       */
      getPossibleOffsets() {
        if (!this.isValid || this.isOffsetFixed) {
          return [this];
        }
        const dayMs = 864e5;
        const minuteMs = 6e4;
        const localTS = objToLocalTS(this.c);
        const oEarlier = this.zone.offset(localTS - dayMs);
        const oLater = this.zone.offset(localTS + dayMs);
        const o1 = this.zone.offset(localTS - oEarlier * minuteMs);
        const o2 = this.zone.offset(localTS - oLater * minuteMs);
        if (o1 === o2) {
          return [this];
        }
        const ts1 = localTS - o1 * minuteMs;
        const ts2 = localTS - o2 * minuteMs;
        const c1 = tsToObj(ts1, o1);
        const c2 = tsToObj(ts2, o2);
        if (c1.hour === c2.hour && c1.minute === c2.minute && c1.second === c2.second && c1.millisecond === c2.millisecond) {
          return [clone2(this, { ts: ts1 }), clone2(this, { ts: ts2 })];
        }
        return [this];
      }
      /**
       * Returns true if this DateTime is in a leap year, false otherwise
       * @example DateTime.local(2016).isInLeapYear //=> true
       * @example DateTime.local(2013).isInLeapYear //=> false
       * @type {boolean}
       */
      get isInLeapYear() {
        return isLeapYear(this.year);
      }
      /**
       * Returns the number of days in this DateTime's month
       * @example DateTime.local(2016, 2).daysInMonth //=> 29
       * @example DateTime.local(2016, 3).daysInMonth //=> 31
       * @type {number}
       */
      get daysInMonth() {
        return daysInMonth(this.year, this.month);
      }
      /**
       * Returns the number of days in this DateTime's year
       * @example DateTime.local(2016).daysInYear //=> 366
       * @example DateTime.local(2013).daysInYear //=> 365
       * @type {number}
       */
      get daysInYear() {
        return this.isValid ? daysInYear(this.year) : NaN;
      }
      /**
       * Returns the number of weeks in this DateTime's year
       * @see https://en.wikipedia.org/wiki/ISO_week_date
       * @example DateTime.local(2004).weeksInWeekYear //=> 53
       * @example DateTime.local(2013).weeksInWeekYear //=> 52
       * @type {number}
       */
      get weeksInWeekYear() {
        return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
      }
      /**
       * Returns the number of weeks in this DateTime's local week year
       * @example DateTime.local(2020, 6, {locale: 'en-US'}).weeksInLocalWeekYear //=> 52
       * @example DateTime.local(2020, 6, {locale: 'de-DE'}).weeksInLocalWeekYear //=> 53
       * @type {number}
       */
      get weeksInLocalWeekYear() {
        return this.isValid ? weeksInWeekYear(
          this.localWeekYear,
          this.loc.getMinDaysInFirstWeek(),
          this.loc.getStartOfWeek()
        ) : NaN;
      }
      /**
       * Returns the resolved Intl options for this DateTime.
       * This is useful in understanding the behavior of formatting methods
       * @param {Object} opts - the same options as toLocaleString
       * @return {Object}
       */
      resolvedLocaleOptions(opts = {}) {
        const { locale, numberingSystem, calendar } = Formatter.create(
          this.loc.clone(opts),
          opts
        ).resolvedOptions(this);
        return { locale, numberingSystem, outputCalendar: calendar };
      }
      // TRANSFORM
      /**
       * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
       *
       * Equivalent to {@link DateTime#setZone}('utc')
       * @param {number} [offset=0] - optionally, an offset from UTC in minutes
       * @param {Object} [opts={}] - options to pass to `setZone()`
       * @return {DateTime}
       */
      toUTC(offset2 = 0, opts = {}) {
        return this.setZone(FixedOffsetZone.instance(offset2), opts);
      }
      /**
       * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
       *
       * Equivalent to `setZone('local')`
       * @return {DateTime}
       */
      toLocal() {
        return this.setZone(Settings.defaultZone);
      }
      /**
       * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
       *
       * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.
       * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.
       * @param {Object} opts - options
       * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
       * @return {DateTime}
       */
      setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {
        zone = normalizeZone(zone, Settings.defaultZone);
        if (zone.equals(this.zone)) {
          return this;
        } else if (!zone.isValid) {
          return _DateTime.invalid(unsupportedZone(zone));
        } else {
          let newTS = this.ts;
          if (keepLocalTime || keepCalendarTime) {
            const offsetGuess = zone.offset(this.ts);
            const asObj = this.toObject();
            [newTS] = objToTS(asObj, offsetGuess, zone);
          }
          return clone2(this, { ts: newTS, zone });
        }
      }
      /**
       * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
       * @param {Object} properties - the properties to set
       * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
       * @return {DateTime}
       */
      reconfigure({ locale, numberingSystem, outputCalendar } = {}) {
        const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });
        return clone2(this, { loc });
      }
      /**
       * "Set" the locale. Returns a newly-constructed DateTime.
       * Just a convenient alias for reconfigure({ locale })
       * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
       * @return {DateTime}
       */
      setLocale(locale) {
        return this.reconfigure({ locale });
      }
      /**
       * "Set" the values of specified units. Returns a newly-constructed DateTime.
       * You can only set units with this method; for "setting" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.
       *
       * This method also supports setting locale-based week units, i.e. `localWeekday`, `localWeekNumber` and `localWeekYear`.
       * They cannot be mixed with ISO-week units like `weekday`.
       * @param {Object} values - a mapping of units to numbers
       * @example dt.set({ year: 2017 })
       * @example dt.set({ hour: 8, minute: 30 })
       * @example dt.set({ weekday: 5 })
       * @example dt.set({ year: 2005, ordinal: 234 })
       * @return {DateTime}
       */
      set(values) {
        if (!this.isValid)
          return this;
        const normalized = normalizeObject(values, normalizeUnitWithLocalWeeks);
        const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, this.loc);
        const settingWeekStuff = !isUndefined(normalized.weekYear) || !isUndefined(normalized.weekNumber) || !isUndefined(normalized.weekday), containsOrdinal = !isUndefined(normalized.ordinal), containsGregorYear = !isUndefined(normalized.year), containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber;
        if ((containsGregor || containsOrdinal) && definiteWeekDef) {
          throw new ConflictingSpecificationError(
            "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
          );
        }
        if (containsGregorMD && containsOrdinal) {
          throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
        }
        let mixed;
        if (settingWeekStuff) {
          mixed = weekToGregorian(
            { ...gregorianToWeek(this.c, minDaysInFirstWeek, startOfWeek), ...normalized },
            minDaysInFirstWeek,
            startOfWeek
          );
        } else if (!isUndefined(normalized.ordinal)) {
          mixed = ordinalToGregorian({ ...gregorianToOrdinal(this.c), ...normalized });
        } else {
          mixed = { ...this.toObject(), ...normalized };
          if (isUndefined(normalized.day)) {
            mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
          }
        }
        const [ts, o] = objToTS(mixed, this.o, this.zone);
        return clone2(this, { ts, o });
      }
      /**
       * Add a period of time to this DateTime and return the resulting DateTime
       *
       * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
       * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
       * @example DateTime.now().plus(123) //~> in 123 milliseconds
       * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes
       * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow
       * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday
       * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
       * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
       * @return {DateTime}
       */
      plus(duration) {
        if (!this.isValid)
          return this;
        const dur = Duration.fromDurationLike(duration);
        return clone2(this, adjustTime(this, dur));
      }
      /**
       * Subtract a period of time to this DateTime and return the resulting DateTime
       * See {@link DateTime#plus}
       * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
       @return {DateTime}
       */
      minus(duration) {
        if (!this.isValid)
          return this;
        const dur = Duration.fromDurationLike(duration).negate();
        return clone2(this, adjustTime(this, dur));
      }
      /**
       * "Set" this DateTime to the beginning of a unit of time.
       * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
       * @param {Object} opts - options
       * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
       * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
       * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
       * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays
       * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
       * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
       * @return {DateTime}
       */
      startOf(unit, { useLocaleWeeks = false } = {}) {
        if (!this.isValid)
          return this;
        const o = {}, normalizedUnit = Duration.normalizeUnit(unit);
        switch (normalizedUnit) {
          case "years":
            o.month = 1;
          case "quarters":
          case "months":
            o.day = 1;
          case "weeks":
          case "days":
            o.hour = 0;
          case "hours":
            o.minute = 0;
          case "minutes":
            o.second = 0;
          case "seconds":
            o.millisecond = 0;
            break;
          case "milliseconds":
            break;
        }
        if (normalizedUnit === "weeks") {
          if (useLocaleWeeks) {
            const startOfWeek = this.loc.getStartOfWeek();
            const { weekday } = this;
            if (weekday < startOfWeek) {
              o.weekNumber = this.weekNumber - 1;
            }
            o.weekday = startOfWeek;
          } else {
            o.weekday = 1;
          }
        }
        if (normalizedUnit === "quarters") {
          const q = Math.ceil(this.month / 3);
          o.month = (q - 1) * 3 + 1;
        }
        return this.set(o);
      }
      /**
       * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
       * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
       * @param {Object} opts - options
       * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
       * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
       * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
       * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays
       * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
       * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
       * @return {DateTime}
       */
      endOf(unit, opts) {
        return this.isValid ? this.plus({ [unit]: 1 }).startOf(unit, opts).minus(1) : this;
      }
      // OUTPUT
      /**
       * Returns a string representation of this DateTime formatted according to the specified format string.
       * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).
       * Defaults to en-US if no locale has been specified, regardless of the system's locale.
       * @param {string} fmt - the format string
       * @param {Object} opts - opts to override the configuration options on this DateTime
       * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
       * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
       * @example DateTime.now().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
       * @example DateTime.now().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
       * @return {string}
       */
      toFormat(fmt, opts = {}) {
        return this.isValid ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt) : INVALID3;
      }
      /**
       * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
       * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
       * of the DateTime in the assigned locale.
       * Defaults to the system's locale if no locale has been specified
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
       * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options
       * @param {Object} opts - opts to override the configuration options on this DateTime
       * @example DateTime.now().toLocaleString(); //=> 4/20/2017
       * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
       * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
       * @example DateTime.now().toLocaleString(DateTime.DATE_FULL, { locale: 'fr' }); //=> '28 août 2022'
       * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
       * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
       * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
       * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
       * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'
       * @return {string}
       */
      toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
        return this.isValid ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this) : INVALID3;
      }
      /**
       * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
       * Defaults to the system's locale if no locale has been specified
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
       * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
       * @example DateTime.now().toLocaleParts(); //=> [
       *                                   //=>   { type: 'day', value: '25' },
       *                                   //=>   { type: 'literal', value: '/' },
       *                                   //=>   { type: 'month', value: '05' },
       *                                   //=>   { type: 'literal', value: '/' },
       *                                   //=>   { type: 'year', value: '1982' }
       *                                   //=> ]
       */
      toLocaleParts(opts = {}) {
        return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this) : [];
      }
      /**
       * Returns an ISO 8601-compliant string representation of this DateTime
       * @param {Object} opts - options
       * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
       * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
       * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
       * @param {boolean} [opts.extendedZone=false] - add the time zone format extension
       * @param {string} [opts.format='extended'] - choose between the basic and extended format
       * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
       * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'
       * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
       * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
       * @return {string}
       */
      toISO({
        format = "extended",
        suppressSeconds = false,
        suppressMilliseconds = false,
        includeOffset = true,
        extendedZone = false
      } = {}) {
        if (!this.isValid) {
          return null;
        }
        const ext = format === "extended";
        let c = toISODate(this, ext);
        c += "T";
        c += toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
        return c;
      }
      /**
       * Returns an ISO 8601-compliant string representation of this DateTime's date component
       * @param {Object} opts - options
       * @param {string} [opts.format='extended'] - choose between the basic and extended format
       * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
       * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
       * @return {string}
       */
      toISODate({ format = "extended" } = {}) {
        if (!this.isValid) {
          return null;
        }
        return toISODate(this, format === "extended");
      }
      /**
       * Returns an ISO 8601-compliant string representation of this DateTime's week date
       * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
       * @return {string}
       */
      toISOWeekDate() {
        return toTechFormat(this, "kkkk-'W'WW-c");
      }
      /**
       * Returns an ISO 8601-compliant string representation of this DateTime's time component
       * @param {Object} opts - options
       * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
       * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
       * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
       * @param {boolean} [opts.extendedZone=true] - add the time zone format extension
       * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
       * @param {string} [opts.format='extended'] - choose between the basic and extended format
       * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
       * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
       * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
       * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'
       * @return {string}
       */
      toISOTime({
        suppressMilliseconds = false,
        suppressSeconds = false,
        includeOffset = true,
        includePrefix = false,
        extendedZone = false,
        format = "extended"
      } = {}) {
        if (!this.isValid) {
          return null;
        }
        let c = includePrefix ? "T" : "";
        return c + toISOTime(
          this,
          format === "extended",
          suppressSeconds,
          suppressMilliseconds,
          includeOffset,
          extendedZone
        );
      }
      /**
       * Returns an RFC 2822-compatible string representation of this DateTime
       * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
       * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
       * @return {string}
       */
      toRFC2822() {
        return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
      }
      /**
       * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.
       * Specifically, the string conforms to RFC 1123.
       * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
       * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
       * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
       * @return {string}
       */
      toHTTP() {
        return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
      }
      /**
       * Returns a string representation of this DateTime appropriate for use in SQL Date
       * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
       * @return {string}
       */
      toSQLDate() {
        if (!this.isValid) {
          return null;
        }
        return toISODate(this, true);
      }
      /**
       * Returns a string representation of this DateTime appropriate for use in SQL Time
       * @param {Object} opts - options
       * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
       * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
       * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
       * @example DateTime.utc().toSQL() //=> '05:15:16.345'
       * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'
       * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'
       * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
       * @return {string}
       */
      toSQLTime({ includeOffset = true, includeZone = false, includeOffsetSpace = true } = {}) {
        let fmt = "HH:mm:ss.SSS";
        if (includeZone || includeOffset) {
          if (includeOffsetSpace) {
            fmt += " ";
          }
          if (includeZone) {
            fmt += "z";
          } else if (includeOffset) {
            fmt += "ZZ";
          }
        }
        return toTechFormat(this, fmt, true);
      }
      /**
       * Returns a string representation of this DateTime appropriate for use in SQL DateTime
       * @param {Object} opts - options
       * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
       * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
       * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
       * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
       * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
       * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
       * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
       * @return {string}
       */
      toSQL(opts = {}) {
        if (!this.isValid) {
          return null;
        }
        return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;
      }
      /**
       * Returns a string representation of this DateTime appropriate for debugging
       * @return {string}
       */
      toString() {
        return this.isValid ? this.toISO() : INVALID3;
      }
      /**
       * Returns a string representation of this DateTime appropriate for the REPL.
       * @return {string}
       */
      [Symbol.for("nodejs.util.inspect.custom")]() {
        if (this.isValid) {
          return `DateTime { ts: ${this.toISO()}, zone: ${this.zone.name}, locale: ${this.locale} }`;
        } else {
          return `DateTime { Invalid, reason: ${this.invalidReason} }`;
        }
      }
      /**
       * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}
       * @return {number}
       */
      valueOf() {
        return this.toMillis();
      }
      /**
       * Returns the epoch milliseconds of this DateTime.
       * @return {number}
       */
      toMillis() {
        return this.isValid ? this.ts : NaN;
      }
      /**
       * Returns the epoch seconds of this DateTime.
       * @return {number}
       */
      toSeconds() {
        return this.isValid ? this.ts / 1e3 : NaN;
      }
      /**
       * Returns the epoch seconds (as a whole number) of this DateTime.
       * @return {number}
       */
      toUnixInteger() {
        return this.isValid ? Math.floor(this.ts / 1e3) : NaN;
      }
      /**
       * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
       * @return {string}
       */
      toJSON() {
        return this.toISO();
      }
      /**
       * Returns a BSON serializable equivalent to this DateTime.
       * @return {Date}
       */
      toBSON() {
        return this.toJSDate();
      }
      /**
       * Returns a JavaScript object with this DateTime's year, month, day, and so on.
       * @param opts - options for generating the object
       * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
       * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
       * @return {Object}
       */
      toObject(opts = {}) {
        if (!this.isValid)
          return {};
        const base = { ...this.c };
        if (opts.includeConfig) {
          base.outputCalendar = this.outputCalendar;
          base.numberingSystem = this.loc.numberingSystem;
          base.locale = this.loc.locale;
        }
        return base;
      }
      /**
       * Returns a JavaScript Date equivalent to this DateTime.
       * @return {Date}
       */
      toJSDate() {
        return new Date(this.isValid ? this.ts : NaN);
      }
      // COMPARE
      /**
       * Return the difference between two DateTimes as a Duration.
       * @param {DateTime} otherDateTime - the DateTime to compare this one to
       * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
       * @param {Object} opts - options that affect the creation of the Duration
       * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
       * @example
       * var i1 = DateTime.fromISO('1982-05-25T09:45'),
       *     i2 = DateTime.fromISO('1983-10-14T10:30');
       * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
       * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
       * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
       * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
       * @return {Duration}
       */
      diff(otherDateTime, unit = "milliseconds", opts = {}) {
        if (!this.isValid || !otherDateTime.isValid) {
          return Duration.invalid("created by diffing an invalid DateTime");
        }
        const durOpts = { locale: this.locale, numberingSystem: this.numberingSystem, ...opts };
        const units = maybeArray(unit).map(Duration.normalizeUnit), otherIsLater = otherDateTime.valueOf() > this.valueOf(), earlier = otherIsLater ? this : otherDateTime, later = otherIsLater ? otherDateTime : this, diffed = diff_default(earlier, later, units, durOpts);
        return otherIsLater ? diffed.negate() : diffed;
      }
      /**
       * Return the difference between this DateTime and right now.
       * See {@link DateTime#diff}
       * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
       * @param {Object} opts - options that affect the creation of the Duration
       * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
       * @return {Duration}
       */
      diffNow(unit = "milliseconds", opts = {}) {
        return this.diff(_DateTime.now(), unit, opts);
      }
      /**
       * Return an Interval spanning between this DateTime and another DateTime
       * @param {DateTime} otherDateTime - the other end point of the Interval
       * @return {Interval}
       */
      until(otherDateTime) {
        return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
      }
      /**
       * Return whether this DateTime is in the same unit of time as another DateTime.
       * Higher-order units must also be identical for this function to return `true`.
       * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.
       * @param {DateTime} otherDateTime - the other DateTime
       * @param {string} unit - the unit of time to check sameness on
       * @param {Object} opts - options
       * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; only the locale of this DateTime is used
       * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day
       * @return {boolean}
       */
      hasSame(otherDateTime, unit, opts) {
        if (!this.isValid)
          return false;
        const inputMs = otherDateTime.valueOf();
        const adjustedToZone = this.setZone(otherDateTime.zone, { keepLocalTime: true });
        return adjustedToZone.startOf(unit, opts) <= inputMs && inputMs <= adjustedToZone.endOf(unit, opts);
      }
      /**
       * Equality check
       * Two DateTimes are equal if and only if they represent the same millisecond, have the same zone and location, and are both valid.
       * To compare just the millisecond values, use `+dt1 === +dt2`.
       * @param {DateTime} other - the other DateTime
       * @return {boolean}
       */
      equals(other) {
        return this.isValid && other.isValid && this.valueOf() === other.valueOf() && this.zone.equals(other.zone) && this.loc.equals(other.loc);
      }
      /**
       * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
       * platform supports Intl.RelativeTimeFormat. Rounds down by default.
       * @param {Object} options - options that affect the output
       * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
       * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
       * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
       * @param {boolean} [options.round=true] - whether to round the numbers in the output.
       * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
       * @param {string} options.locale - override the locale of this DateTime
       * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
       * @example DateTime.now().plus({ days: 1 }).toRelative() //=> "in 1 day"
       * @example DateTime.now().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
       * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
       * @example DateTime.now().minus({ days: 2 }).toRelative() //=> "2 days ago"
       * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
       * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
       */
      toRelative(options = {}) {
        if (!this.isValid)
          return null;
        const base = options.base || _DateTime.fromObject({}, { zone: this.zone }), padding = options.padding ? this < base ? -options.padding : options.padding : 0;
        let units = ["years", "months", "days", "hours", "minutes", "seconds"];
        let unit = options.unit;
        if (Array.isArray(options.unit)) {
          units = options.unit;
          unit = void 0;
        }
        return diffRelative(base, this.plus(padding), {
          ...options,
          numeric: "always",
          units,
          unit
        });
      }
      /**
       * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
       * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
       * @param {Object} options - options that affect the output
       * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
       * @param {string} options.locale - override the locale of this DateTime
       * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
       * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
       * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
       * @example DateTime.now().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
       * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
       * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
       */
      toRelativeCalendar(options = {}) {
        if (!this.isValid)
          return null;
        return diffRelative(options.base || _DateTime.fromObject({}, { zone: this.zone }), this, {
          ...options,
          numeric: "auto",
          units: ["years", "months", "days"],
          calendary: true
        });
      }
      /**
       * Return the min of several date times
       * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
       * @return {DateTime} the min DateTime, or undefined if called with no argument
       */
      static min(...dateTimes) {
        if (!dateTimes.every(_DateTime.isDateTime)) {
          throw new InvalidArgumentError("min requires all arguments be DateTimes");
        }
        return bestBy(dateTimes, (i) => i.valueOf(), Math.min);
      }
      /**
       * Return the max of several date times
       * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
       * @return {DateTime} the max DateTime, or undefined if called with no argument
       */
      static max(...dateTimes) {
        if (!dateTimes.every(_DateTime.isDateTime)) {
          throw new InvalidArgumentError("max requires all arguments be DateTimes");
        }
        return bestBy(dateTimes, (i) => i.valueOf(), Math.max);
      }
      // MISC
      /**
       * Explain how a string would be parsed by fromFormat()
       * @param {string} text - the string to parse
       * @param {string} fmt - the format the string is expected to be in (see description)
       * @param {Object} options - options taken by fromFormat()
       * @return {Object}
       */
      static fromFormatExplain(text, fmt, options = {}) {
        const { locale = null, numberingSystem = null } = options, localeToUse = Locale.fromOpts({
          locale,
          numberingSystem,
          defaultToEN: true
        });
        return explainFromTokens(localeToUse, text, fmt);
      }
      /**
       * @deprecated use fromFormatExplain instead
       */
      static fromStringExplain(text, fmt, options = {}) {
        return _DateTime.fromFormatExplain(text, fmt, options);
      }
      // FORMAT PRESETS
      /**
       * {@link DateTime#toLocaleString} format like 10/14/1983
       * @type {Object}
       */
      static get DATE_SHORT() {
        return DATE_SHORT;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'
       * @type {Object}
       */
      static get DATE_MED() {
        return DATE_MED;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'
       * @type {Object}
       */
      static get DATE_MED_WITH_WEEKDAY() {
        return DATE_MED_WITH_WEEKDAY;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'October 14, 1983'
       * @type {Object}
       */
      static get DATE_FULL() {
        return DATE_FULL;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'
       * @type {Object}
       */
      static get DATE_HUGE() {
        return DATE_HUGE;
      }
      /**
       * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get TIME_SIMPLE() {
        return TIME_SIMPLE;
      }
      /**
       * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get TIME_WITH_SECONDS() {
        return TIME_WITH_SECONDS;
      }
      /**
       * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get TIME_WITH_SHORT_OFFSET() {
        return TIME_WITH_SHORT_OFFSET;
      }
      /**
       * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get TIME_WITH_LONG_OFFSET() {
        return TIME_WITH_LONG_OFFSET;
      }
      /**
       * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.
       * @type {Object}
       */
      static get TIME_24_SIMPLE() {
        return TIME_24_SIMPLE;
      }
      /**
       * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.
       * @type {Object}
       */
      static get TIME_24_WITH_SECONDS() {
        return TIME_24_WITH_SECONDS;
      }
      /**
       * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.
       * @type {Object}
       */
      static get TIME_24_WITH_SHORT_OFFSET() {
        return TIME_24_WITH_SHORT_OFFSET;
      }
      /**
       * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
       * @type {Object}
       */
      static get TIME_24_WITH_LONG_OFFSET() {
        return TIME_24_WITH_LONG_OFFSET;
      }
      /**
       * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_SHORT() {
        return DATETIME_SHORT;
      }
      /**
       * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_SHORT_WITH_SECONDS() {
        return DATETIME_SHORT_WITH_SECONDS;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_MED() {
        return DATETIME_MED;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_MED_WITH_SECONDS() {
        return DATETIME_MED_WITH_SECONDS;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_MED_WITH_WEEKDAY() {
        return DATETIME_MED_WITH_WEEKDAY;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_FULL() {
        return DATETIME_FULL;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_FULL_WITH_SECONDS() {
        return DATETIME_FULL_WITH_SECONDS;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_HUGE() {
        return DATETIME_HUGE;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_HUGE_WITH_SECONDS() {
        return DATETIME_HUGE_WITH_SECONDS;
      }
    };
  }
});

// node_modules/luxon/src/luxon.js
var init_luxon = __esm({
  "node_modules/luxon/src/luxon.js"() {
    init_datetime();
    init_duration();
    init_interval();
    init_info();
    init_zone();
    init_fixedOffsetZone();
    init_IANAZone();
    init_invalidZone();
    init_systemZone();
    init_settings();
  }
});

// src/modules/moduloRegistroTiempo/API/menuOtro.ts
var import_obsidian20, menuOtro;
var init_menuOtro = __esm({
  "src/modules/moduloRegistroTiempo/API/menuOtro.ts"() {
    "use strict";
    import_obsidian20 = require("obsidian");
    init_seleccionModal();
    init_fuzzySelectOrCreate();
    init_luxon();
    menuOtro = class {
      constructor(plugin) {
        this.pathCampos = "Estructura/Campos Sistema Gestion/Campos Registro Tiempo.md";
        this.selectedActivity = "";
        this.selectedGroup = "";
        this.plugin = plugin;
        this.fuzzySelectOrC = new fuzzySelectOrCreate(this.app, plugin);
      }
      async menuOtro(app2, registro) {
        const opcionesOtro = ["Propias", "Areas de Vida", "Areas de Inter\xE9s", "Proyectos de Q", "Proyectos GTD", "Tema de Inter\xE9s", "Recurso Recurrente"];
        const valoresOtro = ["hab", "actsAV", "actsAI", "actsPQ", "actsPGTD", "actsTI", "actsRR"];
        const placeholderOtro = "\xBFQue categoria?";
        const modalOtro = new SeleccionModal(app2, opcionesOtro, valoresOtro, placeholderOtro);
        let temaOtro;
        let siAsunto = false;
        try {
          const selectionOtro = await modalOtro.openAndAwaitSelection();
          switch (selectionOtro) {
            case "hab":
              temaOtro = await this.habitual(app2);
              break;
            case "actsAV":
            case "actsAI":
            case "actsPQ":
            case "actsPGTD":
            case "actsTI":
            case "actsRR":
              temaOtro = await this.elemSG(app2, selectionOtro);
              siAsunto = true;
              break;
            case "bus":
              break;
          }
        } catch (error) {
          console.error("Error o modal cerrado sin selecci\xF3n:", error);
          registro.detener = true;
          return error;
        }
        debugger;
        return { titulo: temaOtro.actividad + " / " + temaOtro.grupo, siAsunto, nombre: temaOtro.grupo, areaVida: temaOtro.grupo };
      }
      async habitual(app2) {
        const grupos = await this.getFrontmatterField(app2, this.pathCampos, "temas");
        const actsGrupos = await this.resultYaml(app2, "actsTemas");
        let itemsForSearch = actsGrupos.filter((item) => grupos.includes(item.grupo)).map((item) => ({
          value: `${item.actividad} / ${item.grupo}`,
          // Cambia el orden si es necesario
          activity: item.actividad,
          // Usa la propiedad 'actividad' en lugar de item[1]
          group: item.grupo
          // Usa la propiedad 'grupo' en lugar de item[0]
        }));
        let eleccion = await this.fuzzySelectOrC.showFuzzySearchModal(itemsForSearch, grupos);
        let objEleccion = { grupo: eleccion[1], actividad: eleccion[0], nombre: "" };
        return objEleccion;
      }
      async ninguno(app2) {
      }
      async elemSG(app2, tipo) {
        const actividades = await this.resultYaml(app2, tipo);
        const activeSG = await this.findMainFilesWithState(app2, tipo);
        let groups;
        debugger;
        switch (tipo) {
          case "actsAV":
            groups = activeSG.map((page) => page.frontmatter.areaVida);
            break;
          default:
            groups = activeSG.map((page) => page.frontmatter.aliases ? page.frontmatter.aliases[0] : null).filter((alias2) => alias2 !== null);
            break;
        }
        let itemsForSearch = actividades.filter((item) => groups.includes(item.grupo)).map((item) => ({
          value: `${item.actividad} / ${item.grupo}`,
          // Cambia el orden si es necesario
          activity: item.actividad,
          // Usa la propiedad 'actividad' en lugar de item[1]
          group: item.grupo
          // Usa la propiedad 'grupo' en lugar de item[0]
        }));
        let eleccion = await this.fuzzySelectOrC.showFuzzySearchModal(itemsForSearch, groups, tipo);
        const foundElement = activeSG.find((b) => b.frontmatter.aliases[0] === eleccion[1]);
        let alias = foundElement == null ? void 0 : foundElement.file.path;
        let objEleccion = { grupo: eleccion[1], actividad: eleccion[0], nombre: alias };
        return objEleccion;
      }
      async buscar(app2) {
      }
      async resultYaml(app2, tema) {
        var _a;
        const file = app2.vault.getAbstractFileByPath(this.pathCampos);
        try {
          if (file instanceof import_obsidian20.TFile) {
            const metadata = app2.metadataCache.getFileCache(file);
            const arregloResult = ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a[tema]) || [];
            const resultado = [];
            if (Array.isArray(arregloResult)) {
              arregloResult.forEach((item) => {
                if (Array.isArray(item) && item.length >= 2) {
                  resultado.push({ grupo: item[0], actividad: item[1] });
                }
              });
            }
            return resultado;
          }
        } catch (error) {
          console.error("Error obteniendo el archivo de campos:", error);
          throw error;
        }
        return [];
      }
      async getFrontmatterField(app2, file, field) {
        try {
          const tFile = app2.vault.getAbstractFileByPath(file);
          if (tFile instanceof import_obsidian20.TFile) {
            const cache = app2.metadataCache.getFileCache(tFile);
            const frontmatter = cache == null ? void 0 : cache.frontmatter;
            if (frontmatter && frontmatter.hasOwnProperty(field)) {
              const fieldValue = frontmatter[field];
              if (fieldValue === void 0 || fieldValue === null || fieldValue === "") {
                console.log("El campo est\xE1 vac\xEDo o no existe.");
                return null;
              } else {
                console.log("Frontmatter consultado con \xE9xito");
                return fieldValue;
              }
            } else {
              console.log("El campo no existe en el frontmatter.");
              return null;
            }
          } else {
            console.error("El archivo no existe o no es un archivo de texto.");
            return null;
          }
        } catch (err) {
          console.error("Error al consultar el frontmatter", err);
          return null;
        }
      }
      // Esta función encuentra los archivos de subsistemas y cuyo estado es 🟢
      async findMainFilesWithState(app2, tipo) {
        var _a;
        const propertiesTipo = {
          actsAV: {
            folder: this.plugin.settings.folder_AreasVida,
            sameName: false,
            nameFile: this.plugin.settings.nameFile_AreasVida
          },
          actsAI: {
            folder: this.plugin.settings.folder_AreasInteres,
            sameName: true,
            nameFile: this.plugin.settings.nameFile_AreasInteres
          },
          actsPQ: {
            folder: this.plugin.settings.folder_ProyectosQ,
            sameName: false,
            nameFile: ""
          },
          actsPGTD: {
            folder: this.plugin.settings.folder_ProyectosGTD,
            sameName: false,
            nameFile: ""
          },
          actsTI: {
            folder: this.plugin.settings.folder_TemasInteres,
            sameName: false,
            nameFile: ""
          },
          actsRR: {
            folder: this.plugin.settings.folder_RecursosRecurrentes,
            sameName: false,
            nameFile: ""
          }
          // Puedes continuar añadiendo más casos aquí
        };
        debugger;
        const activeFilesWithFrontmatter = [];
        switch (tipo) {
          case "actsAV":
            const { folder, sameName, nameFile } = propertiesTipo[tipo];
            let ahora = DateTime.now().toFormat("yyyy-Qq");
            const files = app2.vault.getMarkdownFiles().filter((file) => file.path.includes(folder) && !file.path.includes("Plantillas") && file.name.startsWith(ahora));
            for (let file of files) {
              let metadata = (_a = app2.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
              if ((metadata == null ? void 0 : metadata.estado) === "\u{1F7E2}") {
                activeFilesWithFrontmatter.push({ file, frontmatter: metadata });
              }
            }
            break;
          default:
            if (propertiesTipo.hasOwnProperty(tipo)) {
              const { folder: folder2, sameName: sameName2, nameFile: nameFile2 } = propertiesTipo[tipo];
              const filesInFolder = app2.vault.getFiles().filter((file) => file.path.startsWith(folder2));
              for (const file of filesInFolder) {
                if (sameName2 && file.basename === nameFile2 || !sameName2) {
                  const metadata = app2.metadataCache.getFileCache(file);
                  if (metadata.frontmatter && metadata.frontmatter.estado === "\u{1F7E2}") {
                    activeFilesWithFrontmatter.push({ file, frontmatter: metadata.frontmatter });
                  }
                }
              }
            } else {
              console.log("Selecci\xF3n no reconocida:", tipo);
              return [];
            }
            break;
        }
        return activeFilesWithFrontmatter;
      }
    };
  }
});

// src/modules/moduloRegistroTiempo/API/utilsAPI.ts
var import_obsidian21, utilsAPI;
var init_utilsAPI = __esm({
  "src/modules/moduloRegistroTiempo/API/utilsAPI.ts"() {
    "use strict";
    import_obsidian21 = require("obsidian");
    init_seleccionModalTareas();
    init_menuOtro();
    init_registroTiempoAPI();
    utilsAPI = class {
      constructor(plugin) {
        this.plugin = plugin;
        this.menuOtro = new menuOtro(plugin);
      }
      // La declaración del método estaba asi: buscarRegistrosActivos(app: App, registro: any)
      // Devuelve el file del registro activo. Utilizado para cuando necesito obtener el dato solamente de si hay algún registro activo.
      async buscarRegistrosActivos(app2) {
        var _a;
        const files = app2.vault.getMarkdownFiles();
        const folder = this.plugin.settings.folder_RegistroTiempo;
        for (let file of files) {
          if (file.path.startsWith(folder)) {
            const metadata = app2.metadataCache.getFileCache(file);
            if (((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.estado) === "\u{1F7E2}") {
              return file;
            }
          }
        }
        return;
      }
      // Suponemos que esta función se ubicará en algún lugar donde pueda acceder a `app` de Obsidian.
      async crearObjetoRegistro(plugin) {
        const activo = plugin.app.workspace.getActiveFile();
        if (!activo) {
          return {
            activo: null,
            nombre: "Registro sin archivo activo",
            folder: plugin.settings.folder_RegistroTiempo,
            indice: plugin.settings.indice_RegistroTiempo,
            id: null,
            fecha: this.formatearFecha(/* @__PURE__ */ new Date()),
            indice_DVJS: `"${plugin.settings.indice_RegistroTiempo}"`,
            aliases: []
            // o incluso podrías asignar algún alias por defecto si lo deseas
          };
        }
        const folder = plugin.settings.folder_RegistroTiempo;
        const indice = plugin.settings.indice_RegistroTiempo;
        let maxId = 0;
        const files = plugin.app.vault.getMarkdownFiles();
        const registrosExistentes = files.filter(
          (file) => file.path.startsWith(folder)
        );
        registrosExistentes.forEach((file) => {
          var _a;
          const metadata = (_a = plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
          if (metadata && metadata.id && !isNaN(metadata.id)) {
            const id = parseInt(metadata.id);
            if (id > maxId)
              maxId = id;
          }
        });
        const nextId = maxId + 1;
        const fechaCompleta = this.formatearFecha(/* @__PURE__ */ new Date());
        const metadataActivo = plugin.app.metadataCache.getFileCache(activo);
        const aliases = metadataActivo && metadataActivo.frontmatter && metadataActivo.frontmatter.aliases ? metadataActivo.frontmatter.aliases : [];
        return {
          activo,
          nombre: activo.basename,
          folder,
          indice,
          id: nextId,
          fecha: fechaCompleta,
          indice_DVJS: `"${indice}"`,
          aliases
          // Se agrega el campo aliases al registro
        };
      }
      formatearFecha(fecha) {
        const offset2 = fecha.getTimezoneOffset() * 6e4;
        const fechaLocal = new Date(fecha.getTime() - offset2);
        const fechaFormato = fechaLocal.toISOString().split("T")[0];
        const dias = [
          "Domingo",
          "Lunes",
          "Martes",
          "Mi\xE9rcoles",
          "Jueves",
          "Viernes",
          "S\xE1bado"
        ];
        const diaSemana = dias[fecha.getDay()];
        const horaFormato = fecha.toTimeString().split(" ")[0].substring(0, 5);
        return `${fechaFormato} ${diaSemana} ${horaFormato}`;
      }
      // Método que verifica si hay registros ACtivos y pregunta si quiere cerrarlos.
      async verificarTareasActivas(registro, app2) {
        var _a;
        const files = app2.vault.getMarkdownFiles();
        const tareasActivas = [];
        for (let file of files) {
          if (file.path.startsWith(registro.folder)) {
            const metadata = (_a = app2.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
            if ((metadata == null ? void 0 : metadata.estado) === "\u{1F7E2}") {
              tareasActivas.push({
                file,
                titulo: metadata.titulo,
                aliases: metadata.aliases || file.basename
              });
            }
          }
        }
        if (tareasActivas.length === 1) {
          const tareaActiva = tareasActivas[0];
          const deseaDetener = await this.mostrarSugerencia(
            `La tarea ${tareaActiva.aliases} est\xE1 corriendo. \xBFDesea detenerla?`
          );
          if (deseaDetener === void 0) {
            new import_obsidian21.Notice(`Creaci\xF3n de registro cancelado por el usuario.`);
            registro.detener = true;
            return;
          }
          if (deseaDetener) {
            debugger;
            const registroTiempoAPInstance = new registroTiempoAPI(this.plugin);
            await registroTiempoAPInstance.cerrarRegistro(tareaActiva.file);
            registro.detener = false;
          } else {
            new import_obsidian21.Notice(`La tarea ${tareaActiva.aliases} seguir\xE1 registr\xE1ndose.`);
            registro.detener = true;
            return;
          }
        } else if (tareasActivas.length > 1) {
          new import_obsidian21.Notice(
            "Hay un error con la cantidad de tareas corriendo en este momento."
          );
          registro.detener = true;
        } else {
          console.log("No hay m\xE1s tareas corriendo.");
          registro.detener = false;
        }
      }
      mostrarSugerencia(mensaje) {
        return new Promise((resolve, reject) => {
          let seleccionado = false;
          const modal = new import_obsidian21.Modal(app);
          modal.contentEl.createEl("h1", { text: mensaje });
          const buttonsContainer = modal.contentEl.createEl("div");
          const hacerSeleccion = (seleccion) => {
            seleccionado = true;
            modal.close();
            resolve(seleccion);
          };
          const yesButton = buttonsContainer.createEl("button", {
            text: "S\xED"
          });
          yesButton.addEventListener("click", () => hacerSeleccion(true));
          const noButton = buttonsContainer.createEl("button", {
            text: "No"
          });
          noButton.addEventListener("click", () => hacerSeleccion(false));
          modal.onClose = () => {
            if (!seleccionado) {
              reject(new Error("Modal cerrado sin selecci\xF3n"));
            }
          };
          modal.contentEl.addEventListener("keydown", (e) => {
            var _a;
            switch (e.key) {
              case "ArrowLeft":
                yesButton.focus();
                break;
              case "ArrowRight":
                noButton.focus();
                break;
              case "Enter":
                (_a = document.activeElement) == null ? void 0 : _a.click();
                break;
            }
          });
          yesButton.focus();
          modal.open();
        });
      }
      async definirTipoRegistro(registro, app2) {
        const totTareas = await this.encontrarTareasPendientes(app2);
        let opcionesTitulo;
        let valoresOpcion;
        if (registro.activo) {
          let valorMostrar;
          if (registro.aliases && registro.aliases.length >= 2) {
            valorMostrar = registro.aliases[1];
          } else if (registro.aliases && registro.aliases.length >= 1) {
            valorMostrar = registro.aliases[0];
          } else {
            valorMostrar = registro.nombre;
          }
          if (totTareas.length > 0) {
            opcionesTitulo = [valorMostrar, "Alguna tarea en Ejecuci\xF3n", "Otro"];
            valoresOpcion = ["Nota", "Tarea", "Otro"];
          } else {
            opcionesTitulo = [valorMostrar, "Otro"];
            valoresOpcion = ["Nota", "Otro"];
          }
        } else {
          if (totTareas.length > 0) {
            opcionesTitulo = ["Alguna tarea en Ejecuci\xF3n", "Otro"];
            valoresOpcion = ["Tarea", "Otro"];
          } else {
            opcionesTitulo = ["Otro"];
            valoresOpcion = ["Otro"];
          }
        }
        const placeholder = "\xBFSobre qu\xE9 es el registro de tiempo?";
        const modalMenu1 = new SeleccionModalTareas(app2, opcionesTitulo, valoresOpcion, placeholder);
        try {
          const selection = await modalMenu1.openAndAwaitSelection();
          registro.tipoRegistro = selection;
          switch (registro.tipoRegistro) {
            case "Nota":
              if (registro.activo) {
                registro.titulo = registro.nombre;
                registro.siAsunto = true;
                registro.tarea = false;
                registro = this.copiarCampos(registro);
              } else {
                new import_obsidian21.Notice("No hay nota activa para asignar");
                registro.tipoRegistro = "Otro";
              }
              break;
            case "Tarea":
              await this.elegirTareaParaRegistro(app2, registro, totTareas);
              break;
            default:
              let respuesta = await this.menuOtro.menuOtro(app2, registro);
              Object.assign(registro, respuesta);
              break;
          }
        } catch (error) {
          console.error("Error o modal cerrado sin selecci\xF3n:", error);
        }
      }
      copiarCampos(registro) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _i;
        let nombre = registro.activo.basename;
        let nota = app.metadataCache.getFileCache(registro.activo);
        if (((_a = nota.frontmatter) == null ? void 0 : _a.type) === "PQ") {
          registro.proyectoQ = nombre;
          registro.proyectoGTD = "";
          if (Array.isArray(nota.frontmatter.proyectoGTD)) {
            registro.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
          } else if (nota.frontmatter.proyectoGTD) {
            registro.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
          }
        } else if (((_b = nota.frontmatter) == null ? void 0 : _b.type) === "PGTD") {
          registro.proyectoGTD = [nombre];
          if (Array.isArray(nota.frontmatter.proyectoGTD)) {
            registro.proyectoGTD = registro.proyectoGTD.concat(nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
          } else if (nota.frontmatter.proyectoGTD) {
            registro.proyectoGTD.push(nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
          }
          registro.proyectoQ = "";
          if (Array.isArray(nota.frontmatter.proyectoQ)) {
            registro.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
          } else if (nota.frontmatter.proyectoQ) {
            registro.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
          }
        } else {
          registro.proyectoQ = "";
          if (Array.isArray((_c = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _c.proyectoQ)) {
            registro.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
          } else if ((_d = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _d.proyectoQ) {
            registro.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
          }
          registro.proyectoGTD = "";
          if (Array.isArray((_e = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _e.proyectoGTD)) {
            registro.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
          } else if ((_f = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _f.proyectoGTD) {
            registro.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
          }
        }
        registro.areaInteres = [];
        if (Array.isArray((_g = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _g.areaInteres)) {
          registro.areaInteres = registro.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
        } else {
          if ((_h = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _h.areaInteres) {
            registro.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
          }
        }
        registro.areaVida = "";
        if ((_i = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _i.areaVida) {
          if (Array.isArray(nota.frontmatter.areaVida)) {
            registro.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
          } else if (typeof nota.frontmatter.areaVida === "string") {
            registro.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
          }
        } else {
          registro.areaVida = "No es de ning\xFAn Area de Vida";
        }
        return registro;
      }
      async encontrarTareasPendientes(app2) {
        let tareasPendientes = [];
        const archivos = app2.vault.getMarkdownFiles();
        const archivosRelevantes = archivos.filter((archivo) => {
          return !archivo.path.includes("Plantillas") && !archivo.path.includes("Estructura/GTD/Sistema GTD/Sistema") && !archivo.path.includes("Archivo");
        });
        for (const archivo of archivosRelevantes) {
          const contenido = await app2.vault.read(archivo);
          const coincidencias = contenido.match(/^ *- \[\/\] .*/gm) || [];
          const tareasConArchivo = coincidencias.map((tarea) => {
            return { tarea: tarea.trim(), archivo };
          });
          tareasPendientes = tareasPendientes.concat(tareasConArchivo);
        }
        return tareasPendientes;
      }
      async elegirTareaParaRegistro(app2, registro, tareasPendientes) {
        var _a;
        const placeholder = "Elige la tarea que vas a registrar.";
        const promesasLimpias = tareasPendientes.map(
          (tareaObj) => this.limpiarTextoTarea(tareaObj.tarea)
        );
        try {
          const tareasLimpias = await Promise.all(promesasLimpias);
          const displayOptions = [];
          const values = [];
          for (let i = 0; i < tareasPendientes.length; i++) {
            const { tarea, archivo } = tareasPendientes[i];
            const textoTarea = tareasLimpias[i];
            let aliasDisplay = "";
            const metadata = app2.metadataCache.getFileCache(archivo);
            if ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.aliases) {
              let aliases = metadata.frontmatter.aliases;
              if (!Array.isArray(aliases))
                aliases = [aliases];
              if (aliases.length >= 2) {
                aliasDisplay = aliases[1];
              } else if (aliases.length >= 1) {
                aliasDisplay = aliases[0];
              }
            }
            if (!aliasDisplay) {
              aliasDisplay = archivo.basename;
            }
            const displayText = `${aliasDisplay} / ${textoTarea}`;
            displayOptions.push(displayText);
            values.push(i);
          }
          const modalMenu = new SeleccionModalTareas(app2, displayOptions, values, placeholder);
          try {
            const selectedIndex = await modalMenu.openAndAwaitSelection();
            const seleccion = tareasPendientes[selectedIndex];
            registro.titulo = await this.limpiarTextoTarea(seleccion.tarea);
            registro.nombre = seleccion.archivo.basename;
            registro.archivoTarea = seleccion.archivo;
            registro.siAsunto = true;
            registro.tarea = true;
            registro = this.copiarCampos(registro);
          } catch (error) {
            registro.detener = true;
            console.error("Error o modal cerrado sin selecci\xF3n:", error);
          }
        } catch (error) {
          console.error("Hubo un error al limpiar las tareas:", error);
        }
      }
      limpiarTextoTarea(titulo) {
        return new Promise((resolve) => {
          let textoLimpio = titulo.split("\n")[0];
          textoLimpio = textoLimpio.replace(/#([\w-/]+)/g, (match2, p1) => {
            let transformado = p1.replace(/\//g, "_");
            transformado = transformado.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
            return transformado;
          });
          textoLimpio = textoLimpio.replace(/\[\w+::[^\]]+\]/g, "");
          textoLimpio = textoLimpio.replace(/^\s*-\s*\[\/\]\s*/, "");
          textoLimpio = textoLimpio.replace(
            /\p{Extended_Pictographic}\s*\d{4}-\d{2}-\d{2}(?:\s*\d{2}:\d{2}(?::\d{2})?)?/gu,
            ""
          );
          textoLimpio = textoLimpio.replace(/\p{Extended_Pictographic}/gu, "");
          textoLimpio = textoLimpio.replace(/\[[^\]]*\]/g, "");
          const caracteresNoPermitidos = /[<>:"\/\\|?*\x00-\x1F]/g;
          textoLimpio = textoLimpio.replace(caracteresNoPermitidos, "_");
          textoLimpio = textoLimpio.replace(/\s+/g, " ");
          resolve(textoLimpio.trim());
        });
      }
      async construirNombreyAlias(registro, app2) {
        var _a;
        const maxIdSec = await this.calcularUltimoIdSec(registro.titulo, registro.folder, app2);
        registro.idSec = maxIdSec + 1;
        const suffix = registro.idSec > 1 ? ` - ${registro.idSec}` : "";
        const originalAliases = Array.isArray(registro.aliases) ? [...registro.aliases] : [];
        function cleanPrefix(value) {
          if (!value)
            return "";
          return value.replace(/^RT -\s*/, "").trim();
        }
        if (!registro.tarea) {
          const noteName = cleanPrefix(registro.nombre || "");
          const newAliases = [
            `RT - ${noteName}${suffix}`
            // Alias 0: Nombre de la nota + sufijo
          ];
          if (originalAliases.length >= 1) {
            newAliases.push(`RT - ${cleanPrefix(originalAliases[0])}${suffix}`);
            if (originalAliases.length >= 2) {
              newAliases.push(`RT - ${cleanPrefix(originalAliases[1])}${suffix}`);
            }
          }
          registro.aliases = newAliases;
        } else {
          const metadataNota = app2.metadataCache.getFileCache(
            registro.archivoTarea
            // Este es el archivo donde está la tarea, lo tienes en `registro.nombre` o en alguna propiedad que guarde la referencia
          );
          const taskText = cleanPrefix(registro.titulo || "");
          const noteName = cleanPrefix(registro.nombre || "");
          debugger;
          let noteAliases = [];
          if ((_a = metadataNota == null ? void 0 : metadataNota.frontmatter) == null ? void 0 : _a.aliases) {
            noteAliases = Array.isArray(metadataNota.frontmatter.aliases) ? metadataNota.frontmatter.aliases : [metadataNota.frontmatter.aliases];
          }
          const newAliases = [
            `RT - ${taskText}${suffix}`,
            `RT - ${noteName} / ${taskText}${suffix}`
          ];
          if (noteAliases.length > 0) {
            newAliases.push(`RT - ${cleanPrefix(noteAliases[0])} / ${taskText}${suffix}`);
          }
          registro.aliases = newAliases;
          registro.descripcion = taskText;
        }
        if (!registro.id) {
          console.error("Error: registro.id es null o undefined");
          registro.id = Date.now();
        }
        registro.nameFile = `${registro.folder}/RT - ${registro.id}`;
      }
      /**
      * Calcula el último idSec usado para registros con el mismo título en la carpeta especificada.
      */
      async calcularUltimoIdSec(titulo, folder, app2) {
        const archivos = app2.vault.getFiles();
        let max = 0;
        for (const archivo of archivos) {
          if (archivo.path.startsWith(folder)) {
            const metadatos = app2.metadataCache.getFileCache(archivo);
            if (metadatos && metadatos.frontmatter && metadatos.frontmatter.titulo === titulo) {
              const idSec = metadatos.frontmatter.idSec;
              if (idSec !== void 0 && idSec > max) {
                max = idSec;
              }
            }
          }
        }
        return max;
      }
      limpiarAlias(titulo) {
        const caracteresNoPermitidos = /[<>:"\/\\|?*\x00-\x1F]/g;
        let tituloLimpio = titulo.replace(caracteresNoPermitidos, "_");
        tituloLimpio = tituloLimpio.replace(/\s+/g, " ");
        return tituloLimpio.trim();
      }
    };
  }
});

// src/modules/moduloRegistroTiempo/Interfaces/RegistroTiempo.ts
var init_RegistroTiempo = __esm({
  "src/modules/moduloRegistroTiempo/Interfaces/RegistroTiempo.ts"() {
    "use strict";
  }
});

// src/modules/moduloRegistroTiempo/Interfaces/SesionLectura.ts
var init_SesionLectura = __esm({
  "src/modules/moduloRegistroTiempo/Interfaces/SesionLectura.ts"() {
    "use strict";
  }
});

// src/modules/moduloRegistroTiempo/API/SesionLectura.ts
var SesionLectura_exports = {};
__export(SesionLectura_exports, {
  SesionLectura: () => SesionLectura
});
var import_obsidian22, SesionLectura;
var init_SesionLectura2 = __esm({
  "src/modules/moduloRegistroTiempo/API/SesionLectura.ts"() {
    "use strict";
    init_utilsAPI();
    import_obsidian22 = require("obsidian");
    init_SesionLectura();
    init_RTBase();
    init_luxon();
    SesionLectura = class extends RTBase {
      constructor(plugin, infoSubsistema) {
        super(plugin);
        this.plugin = plugin;
        this.plugin = plugin;
        this.utilsApi = new utilsAPI(plugin);
        this.tp = plugin.tp;
        this.nota = {};
        this.infoSubsistema = infoSubsistema;
      }
      async getId() {
        var _a, _b, _c;
        let maxId = 0;
        debugger;
        const files = app.vault.getMarkdownFiles();
        const registrosExistentes = files.filter((file) => file.path.startsWith(this.infoSubsistema.folder));
        registrosExistentes.forEach((file) => {
          var _a2;
          const metadata = (_a2 = app.metadataCache.getFileCache(file)) == null ? void 0 : _a2.frontmatter;
          if (metadata && metadata.id && !isNaN(metadata.id)) {
            const id = parseInt(metadata.id);
            if (id > maxId)
              maxId = id;
          }
        });
        this.nota.id = maxId + 1;
        const currentNotePath = (_a = app.workspace.getActiveFile()) == null ? void 0 : _a.path;
        const currentNota = (_b = app.metadataCache.getFileCache(app.workspace.getActiveFile())) == null ? void 0 : _b.frontmatter;
        if (currentNota) {
          const existingSessions = registrosExistentes.filter((file) => {
            var _a2, _b2;
            return file.path !== currentNotePath && ((_b2 = (_a2 = app.metadataCache.getFileCache(file)) == null ? void 0 : _a2.frontmatter) == null ? void 0 : _b2.titulo) === currentNota.titulo;
          });
          if (existingSessions.length > 0) {
            const sortedSessions = existingSessions.sort((a, B) => parseInt(B.path.match(/[0-9]+/)[0]) - parseInt(A.path.match(/[0-9]+/)[0]));
            const lastSL = (_c = app.metadataCache.getFileCache(sortedSessions[0])) == null ? void 0 : _c.frontmatter;
            this.nota.idSec = parseInt(lastSL.idSec) + 1;
            this.nota.pagInicio = lastSL.pagFin;
          } else {
            this.nota.idSec = 1;
            this.nota.pagInicio = 1;
          }
        } else {
          this.nota.idSec = 1;
          this.nota.pagInicio = 1;
        }
        return this.nota.id;
      }
      async getNota() {
        return this.nota;
      }
      async getParametrosLibro() {
        debugger;
        const currentFile = app.workspace.getActiveFile();
        if (!currentFile || !currentFile.path)
          return;
        const metadataCache = app.metadataCache;
        const fileCache = metadataCache.getFileCache(currentFile);
        if (!fileCache || !fileCache.frontmatter || fileCache.frontmatter.type !== "LB") {
          new Notice("La nota activa debe ser de tipo Libro en la Bibloteca para poder crear una sesi\xF3n de Lectura.");
          return;
        }
        const frontMatter = fileCache.frontmatter;
        this.nota["paginas"] = frontMatter.paginas;
        this.nota["titulo"] = frontMatter.titulo;
        this.nota["palabrasPorHoja"] = frontMatter.palabrasPorHoja;
      }
      async getAsunto() {
        var _a, _b, _c, _d, _e, _f, _g;
        let padres = [];
        let activo = app.workspace.getActiveFile();
        let siAsunto = true;
        let nombre = "";
        let nota;
        if (activo != null) {
          nombre = activo.basename;
          nota = app.metadataCache.getFileCache(activo);
          nota.frontmatter = nota.frontmatter || {};
          nota.frontmatter.file = {};
          Object.assign(nota.frontmatter.file, activo);
          padres.unshift(nombre);
          debugger;
          this.nota.asuntoDefinido = true;
          this.nota.proyectoQ = "";
          if (Array.isArray((_a = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _a.proyectoQ)) {
            this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
          } else if ((_b = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _b.proyectoQ) {
            this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
          }
          this.nota.proyectoGTD = "";
          if (Array.isArray((_c = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _c.proyectoGTD)) {
            this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
          } else if ((_d = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _d.proyectoGTD) {
            this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
          }
          this.nota.areaInteres = [];
          if (Array.isArray((_e = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _e.areaInteres)) {
            this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
          } else {
            if ((_f = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _f.areaInteres) {
              this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
            }
          }
          this.nota.areaVida = "";
          if ((_g = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _g.areaVida) {
            if (Array.isArray(nota.frontmatter.areaVida)) {
              this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
            } else if (typeof nota.frontmatter.areaVida === "string") {
              this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
            }
          } else {
            this.nota.areaVida = "No es de ning\xFAn Area de Vida";
          }
          return { siAsunto, nombre: padres };
        }
      }
      async getAliases() {
        this.nota.aliases = [];
        this.nota.aliases.push(`SL - ${this.nota.idSec} / ${this.nota.titulo}`);
        return this.nota.aliases;
      }
      async getFecha() {
        let fechaActual = DateTime.now();
        fechaActual = fechaActual.setLocale("es");
        fechaActual = fechaActual.toFormat("yyyy-MM-dd EEEE HH:mm");
        this.nota.fecha = fechaActual;
        return fechaActual;
      }
      async getRename() {
        debugger;
        const newName = `${this.infoSubsistema.folder}/${this.infoSubsistema.type} - ${this.nota.id}.md`;
        const file = this.tp.file.config.target_file;
        const existe = app.vault.getAbstractFileByPath(newName);
        try {
          if (existe instanceof import_obsidian22.TFile) {
            const nombreFile = newName.split("/");
            const borrar = await this.suggester(
              ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
              [true, false],
              true,
              `\xBF${nombreFile.pop()} ya existe. Qu\xE9 deseas hacer?`
            );
            if (borrar) {
              await app.vault.delete(existe);
              if (file instanceof import_obsidian22.TFile) {
                await app.vault.rename(file, newName);
                console.log("Archivo renombrado con \xE9xito.");
                return newName;
              }
            } else {
              console.log("Cancelando la creaci\xF3n del archivo.");
              throw new Error("Proceso cancelado por el usuario.");
            }
          } else {
            if (file instanceof import_obsidian22.TFile) {
              await app.vault.rename(file, newName);
              console.log("Archivo renombrado con \xE9xito.");
              return newName;
            }
          }
        } catch (error) {
          console.error("Error al cambiar el nombre", error);
          throw error;
        }
      }
    };
  }
});

// src/modules/moduloRegistroTiempo/API/RTBase.ts
var import_obsidian23, import_obsidian24, RTBase;
var init_RTBase = __esm({
  "src/modules/moduloRegistroTiempo/API/RTBase.ts"() {
    "use strict";
    init_utilsAPI();
    import_obsidian23 = require("obsidian");
    import_obsidian24 = require("obsidian");
    init_SesionLectura();
    RTBase = class {
      constructor(plugin) {
        this.plugin = plugin;
        this.utilsApi = new utilsAPI(plugin);
        this.tp = plugin.tp;
        this.infoSubsistema = {};
      }
      async iniciarRegistro(infoSubsistema, campos) {
        if (typeof infoSubsistema === "object" && infoSubsistema !== null) {
          if (!campos || !Array.isArray(campos)) {
            throw new Error("Campos debe ser un array definido.");
          }
          this.nota = {};
          let nota;
          Object.assign(this.infoSubsistema, infoSubsistema);
          debugger;
          if (this.infoSubsistema.defined) {
            this.infoSubsistema.folder = this.plugin.settings[infoSubsistema.folder];
            this.infoSubsistema.indice = this.plugin.settings[infoSubsistema.indice];
            Object.assign(this.nota, infoSubsistema);
          }
          let fieldHandler;
          switch (this.infoSubsistema.type) {
            case "SL":
              const SesionLectura3 = await Promise.resolve().then(() => (init_SesionLectura2(), SesionLectura_exports));
              fieldHandler = new SesionLectura3.SesionLectura(this.plugin, this.infoSubsistema);
              break;
            default:
              throw new Error(`No se ha definido un manejador de campos para el tipo ${this.infoSubsistema.type}`);
          }
          try {
            for (let campo of campos) {
              const functionName = `get${campo.charAt(0).toUpperCase() + campo.slice(1)}`;
              if (typeof fieldHandler[functionName] === "function") {
                this.nota[campo] = await fieldHandler[functionName]();
                nota = await fieldHandler.getNota();
                for (const key in nota) {
                  if (!(key in this.nota)) {
                    this.nota[key] = nota[key];
                  }
                }
              } else {
                console.error(`La funci\xF3n ${functionName} no est\xE1 definida.`);
              }
            }
          } catch (error) {
            console.error("No se pudo crear el objeto de registro.", error);
            new Notice("No se pudo crear el objeto de registro.");
            return null;
          }
          return this.nota;
        } else {
          try {
            const registro = await this.utilsApi.crearObjetoRegistro(this.plugin);
            await this.utilsApi.verificarTareasActivas(registro, this.plugin.app);
            if (registro.detener) {
              return registro;
            }
            await this.utilsApi.definirTipoRegistro(registro, this.plugin.app);
            if (registro.detener) {
              return registro;
            }
            await this.utilsApi.construirNombreyAlias(registro, this.plugin.app);
            return registro;
          } catch (error) {
            new Notice("No se pudo crear el objeto de registro.");
            return null;
          }
        }
      }
      async cerrarRegistro(registro) {
        var _a, _b, _c;
        const folder = this.plugin.settings.folder_RegistroTiempo;
        if (typeof registro === "string") {
          registro = parseInt(registro);
        }
        if (typeof registro === "number") {
          const files = app.vault.getMarkdownFiles();
          let infoNota;
          for (let file of files) {
            if (file.path.startsWith(folder)) {
              const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
              if ((metadata == null ? void 0 : metadata.id) === registro) {
                infoNota = { file };
                Object.assign(infoNota, metadata);
              }
            }
          }
          let campos = ["fecha", "horaFinal", "tiempoTrabajado"];
          let resultado = await this.plugin.YAMLUpdaterAPI.archivarNota(infoNota, campos);
          let textoResultado = Object.entries(resultado).map(([propiedad, valor]) => `${propiedad}: ${valor}`).join(", ");
          new Notice(`Tarea cerrada. Campos actualizados: ${textoResultado}`);
        } else if (registro instanceof import_obsidian23.TFile) {
          const metadata = (_b = app.metadataCache.getFileCache(registro)) == null ? void 0 : _b.frontmatter;
          let infoNota = { file: registro };
          Object.assign(infoNota, metadata);
          let campos = ["fecha", "horaFinal", "tiempoTrabajado"];
          let resultado = await this.plugin.YAMLUpdaterAPI.archivarNota(infoNota, campos);
          let textoResultado = Object.entries(resultado).map(([propiedad, valor]) => `${propiedad}: ${valor}`).join(", ");
          new Notice(`Tarea cerrada. Campos actualizados: ${textoResultado}`);
        } else {
          const registro2 = await this.utilsApi.buscarRegistrosActivos(app);
          const metadata = (_c = app.metadataCache.getFileCache(registro2)) == null ? void 0 : _c.frontmatter;
          let infoNota = { file: registro2 };
          Object.assign(infoNota, metadata);
          let campos = ["fecha", "horaFinal", "tiempoTrabajado"];
          let resultado = await this.plugin.YAMLUpdaterAPI.archivarNota(infoNota, campos);
          let textoResultado = Object.entries(resultado).map(([propiedad, valor]) => `${propiedad}: ${valor}`).join(", ");
          new Notice(`Tarea cerrada. Campos actualizados: ${textoResultado}`);
        }
      }
    };
  }
});

// src/modules/moduloRegistroTiempo/API/registroTiempoAPI.ts
var import_obsidian25, registroTiempoAPI;
var init_registroTiempoAPI = __esm({
  "src/modules/moduloRegistroTiempo/API/registroTiempoAPI.ts"() {
    "use strict";
    init_utilsAPI();
    import_obsidian25 = require("obsidian");
    init_RegistroTiempo();
    init_RTBase();
    registroTiempoAPI = class extends RTBase {
      constructor(plugin) {
        super(plugin);
        this.plugin = plugin;
        this.plugin = plugin;
        this.utilsApi = new utilsAPI(plugin);
        this.tp = plugin.tp;
      }
      // Invocado desde el template de templater Paso 3 de 3
      async retomarRegistro(id) {
        var _a, _b, _c, _d;
        const folder = this.plugin.settings.folder_RegistroTiempo;
        try {
          let quitarDobleCorchete2 = function(str) {
            if (str.startsWith("[[") && str.endsWith("]]")) {
              return str.slice(2, -2);
            }
            return str;
          }, normalizarArray2 = function(arr) {
            return arr.map((item) => {
              if (typeof item === "string") {
                return quitarDobleCorchete2(item);
              }
              return item;
            });
          };
          var quitarDobleCorchete = quitarDobleCorchete2, normalizarArray = normalizarArray2;
          const registro = await this.utilsApi.crearObjetoRegistro(this.plugin);
          await this.utilsApi.verificarTareasActivas(registro, this.plugin.app);
          if (registro.detener) {
            return registro;
          }
          const files = this.plugin.app.vault.getMarkdownFiles();
          let registroAntiguo;
          for (let file of files) {
            if (file.path.startsWith(folder)) {
              const metadata = (_a = this.plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
              if ((metadata == null ? void 0 : metadata.id) === parseInt(id)) {
                registroAntiguo = { file, frontmatter: metadata };
                break;
              }
            }
          }
          if (!registroAntiguo) {
            new Notice(`No se encontr\xF3 el registro antiguo con ID: ${id}`);
            registro.detener = true;
            return registro;
          }
          const fm = registroAntiguo.frontmatter;
          registro.titulo = (_b = fm.titulo) != null ? _b : "Sin Titulo";
          registro.asuntoRetomado = (_c = fm.asunto) != null ? _c : null;
          registro.idSec = ((_d = fm.idSec) != null ? _d : 0) + 1;
          registro.areaVida = "";
          if (typeof fm.areaVida === "string") {
            registro.areaVida = quitarDobleCorchete2(fm.areaVida);
          }
          registro.areaInteres = [];
          if (Array.isArray(fm.areaInteres)) {
            registro.areaInteres = normalizarArray2(fm.areaInteres);
          }
          registro.proyectoGTD = [];
          if (Array.isArray(fm.proyectoGTD)) {
            registro.proyectoGTD = normalizarArray2(fm.proyectoGTD);
          }
          registro.proyectoQ = [];
          if (Array.isArray(fm.proyectoQ)) {
            registro.proyectoQ = normalizarArray2(fm.proyectoQ);
          }
          registro.aliases = [];
          if (Array.isArray(fm.aliases)) {
            registro.aliases = normalizarArray2(fm.aliases);
          }
          await this.utilsApi.construirNombreyAlias(registro, this.plugin.app);
          return registro;
        } catch (error) {
          console.error(error);
          new Notice("No se pudo crear el objeto de registro al retomar.");
          return null;
        }
      }
      // Invocado para crear el template de Retomar Paso 1 de 3
      async retomarTarea(id) {
        debugger;
        const filePath = `Plantillas/${this.plugin.settings[`folder_RegistroTiempo`]}/Plt - RegistroTiempo.md`;
        const template = app.vault.getAbstractFileByPath(filePath);
        if (template instanceof import_obsidian25.TFile) {
          console.log("Archivo encontrado:", template);
        } else {
          console.log("Archivo no encontrado.");
        }
        const filename = "Retomar " + id;
        const folder = app.vault.getAbstractFileByPath("Inbox");
        let crearNota = this.tp.file.static_functions.get("create_new");
        await crearNota(template, filename, false, folder).basename;
      }
      // Implementación del método con unión de tipos para el parámetro id
      async detalleRegistro(registro) {
        var _a, _b, _c;
        const folder = this.plugin.settings.folder_RegistroTiempo;
        let infoNota;
        debugger;
        if (typeof registro === "string") {
          registro = parseInt(registro);
        }
        if (typeof registro === "number") {
          const files = app.vault.getMarkdownFiles();
          for (let file of files) {
            if (file.path.startsWith(folder)) {
              const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
              if ((metadata == null ? void 0 : metadata.id) === registro) {
                infoNota = { file };
                Object.assign(infoNota, metadata);
              }
            }
          }
        } else if (registro instanceof import_obsidian25.TFile) {
          const metadata = (_b = app.metadataCache.getFileCache(registro)) == null ? void 0 : _b.frontmatter;
          infoNota = { file: registro };
          Object.assign(infoNota, metadata);
        } else {
          const registro2 = await this.utilsApi.buscarRegistrosActivos(app);
          const metadata = (_c = app.metadataCache.getFileCache(registro2)) == null ? void 0 : _c.frontmatter;
          infoNota = { file: registro2 };
          Object.assign(infoNota, metadata);
        }
        let campos = ["descripcion_RegistroTiempo"];
        debugger;
        let resultado = await this.plugin.YAMLUpdaterAPI.actualizarNota(infoNota, campos);
        let textoResultado = Object.entries(resultado).map(([propiedad, valor]) => `${propiedad}: ${valor}`).join(", ");
        new Notice(`Descripci\xF3n actualizada: ${textoResultado}`);
      }
    };
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ManagementPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian80 = require("obsidian");

// src/settingsTab.ts
var import_obsidian = require("obsidian");
var PluginMainSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Configuraci\xF3n del plugin de Gesti\xF3n Personal" });
    const tabContainer = containerEl.createDiv({ cls: "tab-container" });
    const tabContentContainer = containerEl.createDiv({ cls: "tab-content-container" });
    const tabTitles = ["Activar M\xF3dulos", "Directorios Subsistemas", "Pesta\xF1a 3"];
    tabTitles.forEach((title, index) => {
      const tabButton = document.createElement("button");
      tabButton.textContent = title;
      tabButton.classList.add("tab-link");
      tabButton.dataset.tab = `tab${index}`;
      tabButton.onclick = () => this.openTab(`tab${index}`);
      tabContainer.appendChild(tabButton);
      const tabContent = document.createElement("div");
      tabContent.id = `tab${index}`;
      tabContent.classList.add("tab-content");
      tabContentContainer.appendChild(tabContent);
      if (index > 0)
        tabContent.style.display = "none";
      if (index === 0) {
        new import_obsidian.Setting(tabContent).setName("Ver Alias en el Status Bar").setDesc("Elige si deseas ver el Aliases de las notas en el Status Bar.").addToggle((toggle) => toggle.setValue(this.plugin.settings.moduloAliasStatusBar).onChange(async (value) => {
          this.plugin.settings.moduloAliasStatusBar = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(tabContent).setName("Activar M\xF3dulo Registro Tiempo").setDesc("Activa o desactiva el m\xF3dulo de registro de tiempo.").addToggle((toggle) => toggle.setValue(this.plugin.settings.moduloRegistroTiempo).onChange(async (value) => {
          this.plugin.settings.moduloRegistroTiempo = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(tabContent).setName("Activar M\xF3dulo Base - Pruebas").setDesc("Activa o desactiva el m\xF3dulo de pruebas.").addToggle((toggle) => toggle.setValue(this.plugin.settings.moduloBase).onChange(async (value) => {
          this.plugin.settings.moduloBase = value;
          await this.plugin.saveSettings();
        }));
        containerEl.createEl("h3", { text: "Navegador de Tareas" });
        new import_obsidian.Setting(containerEl).setName("Activar navegador de tareas").setDesc("Permite navegar directamente a tareas en ejecuci\xF3n").addToggle((toggle) => toggle.setValue(this.plugin.settings.taskNavigatorModule).onChange(async (value) => {
          this.plugin.settings.taskNavigatorModule = value;
          await this.plugin.saveSettings();
        }));
      }
      if (index === 1) {
        const toggleCollapse = (event) => {
          const nextElement = event.target.nextElementSibling;
          if (nextElement.style.display === "none") {
            nextElement.style.display = "block";
            event.target.innerHTML = "&#9660; " + event.target.getAttribute("data-title");
          } else {
            nextElement.style.display = "none";
            event.target.innerHTML = "&#9654; " + event.target.getAttribute("data-title");
          }
        };
        const anotacionesTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Anotaciones"' });
        anotacionesTitle.setAttribute("data-title", 'Subsistema de "Anotaciones"');
        anotacionesTitle.style.cursor = "pointer";
        const anotacionesContent = tabContent.createDiv();
        anotacionesContent.style.display = "none";
        anotacionesTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(anotacionesContent).setName("Carpeta de Anotaciones").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n todas las Anotaciones.").addText((text) => text.setValue(this.plugin.settings.folder_Anotaciones).onChange(async (value) => {
          this.plugin.settings.folder_Anotaciones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(anotacionesContent).setName("Indice de Anotaciones").setDesc("Establece la ruta del \xEDndice de las Anotaciones.").addText((text) => text.setValue(this.plugin.settings.indice_Anotaciones).onChange(async (value) => {
          this.plugin.settings.indice_Anotaciones = value;
          await this.plugin.saveSettings();
        }));
        const campa\u00F1asTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Campa\xF1as"' });
        campa\u00F1asTitle.setAttribute("data-title", 'Subsistema de "Campa\xF1as"');
        campa\u00F1asTitle.style.cursor = "pointer";
        const campa\u00F1asContent = tabContent.createDiv();
        campa\u00F1asContent.style.display = "none";
        campa\u00F1asTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(campa\u00F1asContent).setName("Carpeta de Campa\xF1as").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las campa\xF1as.").addText((text) => text.setValue(this.plugin.settings.folder_Campa\u00F1as).onChange(async (value) => {
          this.plugin.settings.folder_Campa\u00F1as = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(campa\u00F1asContent).setName("\xCDndice de Campa\xF1as").setDesc("Establece la ruta del \xEDndice de campa\xF1as.").addText((text) => text.setValue(this.plugin.settings.indice_Campa\u00F1as).onChange(async (value) => {
          this.plugin.settings.indice_Campa\u00F1as = value;
          await this.plugin.saveSettings();
        }));
        const blogTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Art\xEDculos de Blog"' });
        blogTitle.setAttribute("data-title", 'Subsistema de "Art\xEDculos de Blog"');
        blogTitle.style.cursor = "pointer";
        const blogContent = tabContent.createDiv();
        blogContent.style.display = "none";
        blogTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(blogContent).setName("Carpeta de Art\xEDculos del Blog").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los art\xEDculos del blog.").addText((text) => text.setValue(this.plugin.settings.folder_ABlog).onChange(async (value) => {
          this.plugin.settings.folder_ABlog = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(blogContent).setName("Indice de Art\xEDculos del Blog").setDesc("Establece la ruta del \xEDndice de los art\xEDculos del blog.").addText((text) => text.setValue(this.plugin.settings.indice_ABlog).onChange(async (value) => {
          this.plugin.settings.indice_ABlog = value;
          await this.plugin.saveSettings();
        }));
        const desarrollosTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Desarrollos y c\xF3digos"' });
        desarrollosTitle.setAttribute("data-title", 'Subsistema de "Desarrollos y c\xF3digos"');
        desarrollosTitle.style.cursor = "pointer";
        const desarrollosContent = tabContent.createDiv();
        desarrollosContent.style.display = "none";
        desarrollosTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(desarrollosContent).setName("Carpeta de Desarrollos y C\xF3digos").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los desarrollos y c\xF3digos.").addText((text) => text.setValue(this.plugin.settings.folder_Desarrollos).onChange(async (value) => {
          this.plugin.settings.folder_Desarrollos = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(desarrollosContent).setName("\xCDndice de Desarrollos y C\xF3digos").setDesc("Establece la ruta del \xEDndice de los desarrollos y c\xF3digos.").addText((text) => text.setValue(this.plugin.settings.indice_Desarrollos).onChange(async (value) => {
          this.plugin.settings.indice_Desarrollos = value;
          await this.plugin.saveSettings();
        }));
        const estudioTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Estudio"' });
        estudioTitle.setAttribute("data-title", 'Subsistema de "Estudio"');
        estudioTitle.style.cursor = "pointer";
        const estudioContent = tabContent.createDiv();
        estudioContent.style.display = "none";
        estudioTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(estudioContent).setName("Carpeta de Temas de Estudio").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los temas de estudio.").addText((text) => text.setValue(this.plugin.settings.folder_Estudio).onChange(async (value) => {
          this.plugin.settings.folder_Estudio = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(estudioContent).setName("\xCDndice de Estudio").setDesc("Establece la ruta del \xEDndice de los temas de estudio.").addText((text) => text.setValue(this.plugin.settings.indice_Estudio).onChange(async (value) => {
          this.plugin.settings.indice_Estudio = value;
          await this.plugin.saveSettings();
        }));
        const gtdTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "GTD"' });
        gtdTitle.setAttribute("data-title", 'Subsistema de "GTD"');
        gtdTitle.style.cursor = "pointer";
        const gtdContent = tabContent.createDiv();
        gtdContent.style.display = "none";
        gtdTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(gtdContent).setName("Archivo de Bandeja de Entrada.").setDesc("Establece la ruta de la Bandeja de entrada GTD.").addText((text) => text.setValue(this.plugin.settings.file_Inbox).onChange(async (value) => {
          this.plugin.settings.file_Inbox = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(gtdContent).setName("Carpeta de Proyectos GTD").setDesc("Establece la ruta de la carpeta para proyectos GTD.").addText((text) => text.setValue(this.plugin.settings.folder_ProyectosGTD).onChange(async (value) => {
          this.plugin.settings.folder_ProyectosGTD = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(gtdContent).setName("\xCDndice de Proyectos GTD").setDesc("Establece la ruta del \xEDndice para proyectos GTD.").addText((text) => text.setValue(this.plugin.settings.indice_ProyectosGTD).onChange(async (value) => {
          this.plugin.settings.indice_ProyectosGTD = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(gtdContent).setName("Carpeta de Revisiones Semanales GTD").setDesc("Establece la ruta de la carpeta para las revisiones semanales GTD.").addText((text) => text.setValue(this.plugin.settings.folder_RSGTD).onChange(async (value) => {
          this.plugin.settings.folder_RSGTD = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(gtdContent).setName("\xCDndice de Revisiones Semanales GTD").setDesc("Establece la ruta del \xEDndice para las revisiones semanales GTD.").addText((text) => text.setValue(this.plugin.settings.indice_RSGTD).onChange(async (value) => {
          this.plugin.settings.indice_RSGTD = value;
          await this.plugin.saveSettings();
        }));
        const lecturaTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Lectura"' });
        lecturaTitle.setAttribute("data-title", 'Subsistema de "Lectura"');
        lecturaTitle.style.cursor = "pointer";
        const lecturaContent = tabContent.createDiv();
        lecturaContent.style.display = "none";
        lecturaTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(lecturaContent).setName("Carpeta de Sesiones de Lectura").setDesc("Establece la ruta de la carpeta para las sesiones de lectura.").addText((text) => text.setValue(this.plugin.settings.folder_LecturaSesiones).onChange(async (value) => {
          this.plugin.settings.folder_LecturaSesiones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(lecturaContent).setName("\xCDndice de Sesiones de Lectura").setDesc("Establece la ruta del \xEDndice para las sesiones de lectura.").addText((text) => text.setValue(this.plugin.settings.indice_LecturaSesiones).onChange(async (value) => {
          this.plugin.settings.indice_LecturaSesiones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(lecturaContent).setName("Carpeta de Res\xFAmenes de Libros").setDesc("Establece la ruta de la carpeta para los res\xFAmenes de libros.").addText((text) => text.setValue(this.plugin.settings.folder_LecturaResumenes).onChange(async (value) => {
          this.plugin.settings.folder_LecturaResumenes = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(lecturaContent).setName("\xCDndice de Res\xFAmenes de Libros").setDesc("Establece la ruta del \xEDndice para los res\xFAmenes de libros.").addText((text) => text.setValue(this.plugin.settings.indice_LecturaResumenes).onChange(async (value) => {
          this.plugin.settings.indice_LecturaResumenes = value;
          await this.plugin.saveSettings();
        }));
        const mentoriasTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Mentor\xEDas"' });
        mentoriasTitle.setAttribute("data-title", 'Subsistema de "Mentor\xEDas"');
        mentoriasTitle.style.cursor = "pointer";
        const mentoriasContent = tabContent.createDiv();
        mentoriasContent.style.display = "none";
        mentoriasTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(mentoriasContent).setName("Carpeta de Sesiones de Mentor\xEDa").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las sesiones de mentor\xEDa.").addText((text) => text.setValue(this.plugin.settings.folder_Mentorias).onChange(async (value) => {
          this.plugin.settings.folder_Mentorias = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(mentoriasContent).setName("\xCDndice de Mentor\xEDas").setDesc("Establece la ruta del \xEDndice de las sesiones de mentor\xEDa.").addText((text) => text.setValue(this.plugin.settings.indice_Mentorias).onChange(async (value) => {
          this.plugin.settings.indice_Mentorias = value;
          await this.plugin.saveSettings();
        }));
        const mercadoTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Mercado"' });
        mercadoTitle.setAttribute("data-title", 'Subsistema de "Mercado"');
        mercadoTitle.style.cursor = "pointer";
        const mercadoContent = tabContent.createDiv();
        mercadoContent.style.display = "none";
        mercadoTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(mercadoContent).setName("Carpeta de Listados de Mercado").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las listas de mercado.").addText((text) => text.setValue(this.plugin.settings.folder_Mercado).onChange(async (value) => {
          this.plugin.settings.folder_Mercado = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(mercadoContent).setName("\xCDndice de listados de mercado").setDesc("Establece la ruta del \xEDndice de los listados de mercado.").addText((text) => text.setValue(this.plugin.settings.indice_Mercado).onChange(async (value) => {
          this.plugin.settings.indice_Mercado = value;
          await this.plugin.saveSettings();
        }));
        const modulosTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "M\xF3dulos Sistema Gesti\xF3n"' });
        modulosTitle.setAttribute("data-title", 'Subsistema de "M\xF3dulos Sistema Gesti\xF3n"');
        modulosTitle.style.cursor = "pointer";
        const modulosContent = tabContent.createDiv();
        modulosContent.style.display = "none";
        modulosTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(modulosContent).setName("Carpeta de Modulos del Sistema de Gestion").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los m\xF3dulos del Sistema de Gesti\xF3n.").addText((text) => text.setValue(this.plugin.settings.folder_ModulosSistema).onChange(async (value) => {
          this.plugin.settings.folder_ModulosSistema = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(modulosContent).setName("\xCDndice de los Modulos del sistema de Gestion").setDesc("Establece la ruta del \xEDndice de los M\xF3dulos del sistema de Gesti\xF3n.").addText((text) => text.setValue(this.plugin.settings.indice_ModulosSistema).onChange(async (value) => {
          this.plugin.settings.indice_ModulosSistema = value;
          await this.plugin.saveSettings();
        }));
        const transaccionesTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Transacciones"' });
        transaccionesTitle.setAttribute("data-title", 'Subsistema de "transacciones"');
        transaccionesTitle.style.cursor = "pointer";
        const transaccionesContent = tabContent.createDiv();
        transaccionesContent.style.display = "none";
        transaccionesTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(transaccionesContent).setName("Carpeta de Modulos del Sistema de Transacciones").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los comprobantes de las transacciones.").addText((text) => text.setValue(this.plugin.settings.folder_Transacciones).onChange(async (value) => {
          this.plugin.settings.folder_Transacciones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(transaccionesContent).setName("\xCDndice de Transacciones").setDesc("Establece la ruta del \xEDndice de Transacciones.").addText((text) => text.setValue(this.plugin.settings.indice_Transacciones).onChange(async (value) => {
          this.plugin.settings.indice_Transacciones = value;
          await this.plugin.saveSettings();
        }));
        const presentacionesTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Presentaciones"' });
        presentacionesTitle.setAttribute("data-title", 'Subsistema de "Presentaciones"');
        presentacionesTitle.style.cursor = "pointer";
        const presentacionesContent = tabContent.createDiv();
        presentacionesContent.style.display = "none";
        presentacionesTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(presentacionesContent).setName("Carpeta de Notas de Presentaciones").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las notas de presentaciones.").addText((text) => text.setValue(this.plugin.settings.folder_Presentaciones).onChange(async (value) => {
          this.plugin.settings.folder_Presentaciones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(presentacionesContent).setName("\xCDndice de Presentaciones").setDesc("Establece la ruta del \xEDndice de presentaciones.").addText((text) => text.setValue(this.plugin.settings.indice_Presentaciones).onChange(async (value) => {
          this.plugin.settings.indice_Presentaciones = value;
          await this.plugin.saveSettings();
        }));
        const proyectosQTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Proyectos de Q"' });
        proyectosQTitle.setAttribute("data-title", 'Subsistema de "Proyectos de Q"');
        proyectosQTitle.style.cursor = "pointer";
        const proyectosQContent = tabContent.createDiv();
        proyectosQContent.style.display = "none";
        proyectosQTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(proyectosQContent).setName("Carpeta de Proyectos de Q").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los proyectos de Q.").addText((text) => text.setValue(this.plugin.settings.folder_ProyectosQ).onChange(async (value) => {
          this.plugin.settings.folder_ProyectosQ = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(proyectosQContent).setName("\xCDndice de Proyectos de Q").setDesc("Establece la ruta del \xEDndice de proyectos de Q.").addText((text) => text.setValue(this.plugin.settings.indice_ProyectosQ).onChange(async (value) => {
          this.plugin.settings.indice_ProyectosQ = value;
          await this.plugin.saveSettings();
        }));
        const publicacionesTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Publicaciones"' });
        publicacionesTitle.setAttribute("data-title", 'Subsistema de "Publicaciones"');
        publicacionesTitle.style.cursor = "pointer";
        const publicacionesContent = tabContent.createDiv();
        publicacionesContent.style.display = "none";
        publicacionesTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(publicacionesContent).setName("Carpeta de Piezas de Publicaciones").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las piezas de publicaciones.").addText((text) => text.setValue(this.plugin.settings.folder_Publicaciones).onChange(async (value) => {
          this.plugin.settings.folder_Publicaciones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(publicacionesContent).setName("\xCDndice de Publicaciones").setDesc("Establece la ruta del \xEDndice de publicaciones.").addText((text) => text.setValue(this.plugin.settings.indice_Publicaciones).onChange(async (value) => {
          this.plugin.settings.indice_Publicaciones = value;
          await this.plugin.saveSettings();
        }));
        const recetasTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Recetas"' });
        recetasTitle.setAttribute("data-title", 'Subsistema de "Recetas"');
        recetasTitle.style.cursor = "pointer";
        const recetasContent = tabContent.createDiv();
        recetasContent.style.display = "none";
        recetasTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(recetasContent).setName("Carpeta de Recetas").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las recetas.").addText((text) => text.setValue(this.plugin.settings.folder_Recetas).onChange(async (value) => {
          this.plugin.settings.folder_Recetas = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(recetasContent).setName("\xCDndice de Recetas").setDesc("Establece la ruta del \xEDndice de recetas.").addText((text) => text.setValue(this.plugin.settings.indice_Recetas).onChange(async (value) => {
          this.plugin.settings.indice_Recetas = value;
          await this.plugin.saveSettings();
        }));
        const recursosRecurrentesTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Recursos Recurrentes"' });
        recursosRecurrentesTitle.setAttribute("data-title", 'Subsistema de "Recursos Recurrentes"');
        recursosRecurrentesTitle.style.cursor = "pointer";
        const recursosRecurrentesContent = tabContent.createDiv();
        recursosRecurrentesContent.style.display = "none";
        recursosRecurrentesTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(recursosRecurrentesContent).setName("Carpeta de Recursos Recurrentes").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los recursos recurrentes.").addText((text) => text.setValue(this.plugin.settings.folder_RecursosRecurrentes).onChange(async (value) => {
          this.plugin.settings.folder_RecursosRecurrentes = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(recursosRecurrentesContent).setName("\xCDndice de Recursos Recurrentes").setDesc("Establece la ruta del \xEDndice de recursos recurrentes.").addText((text) => text.setValue(this.plugin.settings.indice_RecursosRecurrentes).onChange(async (value) => {
          this.plugin.settings.indice_RecursosRecurrentes = value;
          await this.plugin.saveSettings();
        }));
        const registroTiempoTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Registro Tiempo"' });
        registroTiempoTitle.setAttribute("data-title", 'Subsistema de "Registro Tiempo"');
        registroTiempoTitle.style.cursor = "pointer";
        const registroTiempoContent = tabContent.createDiv();
        registroTiempoContent.style.display = "none";
        registroTiempoTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(registroTiempoContent).setName("Carpeta de Registros de Tiempo").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los registros de tiempo.").addText((text) => text.setValue(this.plugin.settings.folder_RegistroTiempo).onChange(async (value) => {
          this.plugin.settings.folder_RegistroTiempo = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(registroTiempoContent).setName("\xCDndice de Registro de Tiempo").setDesc("Establece la ruta del \xEDndice de registros de tiempo.").addText((text) => text.setValue(this.plugin.settings.indice_RegistroTiempo).onChange(async (value) => {
          this.plugin.settings.indice_RegistroTiempo = value;
          await this.plugin.saveSettings();
        }));
      }
      if (index === 2) {
        const dateLabel = tabContent.createEl("label");
        dateLabel.textContent = "Fecha";
        const dateInput = tabContent.createEl("input");
        dateInput.type = "datetime-local";
      }
    });
    containerEl.createEl("style", {
      text: `
                .tab-content { display: none; padding-top: 20px; } // A\xF1adido padding-top para el espacio
                .tab-content.active { display: block; }
                .tab-link { cursor: pointer; padding: 5px 10px; margin-right: 5px; background: #f0f0f0; border: 1px solid #ddd; border-radius: 5px; }
                .tab-link.active { background: #e0e0e0; }
                .setting-item { margin-bottom: 10px; }
            `
    });
    this.openTab = (tabName) => {
      document.querySelectorAll(".tab-content").forEach((content) => {
        content.style.display = "none";
        content.classList.remove("active");
      });
      document.querySelectorAll(".tab-link").forEach((link) => {
        link.classList.remove("active");
      });
      const activeTabContent = document.getElementById(tabName);
      const activeTabLink = document.querySelector(`[data-tab="${tabName}"]`);
      if (activeTabContent)
        activeTabContent.style.display = "block";
      if (activeTabLink)
        activeTabLink.classList.add("active");
    };
    this.openTab("tab0");
  }
  openTab(arg0) {
    throw new Error("Method not implemented.");
  }
};

// src/modules/moduloBase/index.ts
var import_obsidian6 = require("obsidian");

// src/modules/moduloBase/utils/crearCarpeta.ts
async function crearCarpeta(rutaCarpeta) {
  try {
    debugger;
    const carpetaExistente = app.vault.getAbstractFileByPath(rutaCarpeta);
    if (carpetaExistente) {
      console.log(`La carpeta '${rutaCarpeta}' ya existe.`);
      return;
    }
    debugger;
    await app.vault.createFolder(rutaCarpeta);
    console.log(`Carpeta '${rutaCarpeta}' creada exitosamente.`);
  } catch (error) {
    console.error(`Error al crear la carpeta '${rutaCarpeta}':`, error);
  }
}

// src/modules/moduloBase/utils/crearPlantilla.ts
var import_obsidian2 = require("obsidian");

// src/modules/moduloBase/utils/fileLinkModal.ts
var import_obsidian3 = require("obsidian");
var FileLinkModal = class extends import_obsidian3.Modal {
  constructor(app2) {
    super(app2);
  }
  onOpen() {
    let { contentEl } = this;
    contentEl.style.display = "flex";
    contentEl.style.flexDirection = "column";
    contentEl.style.justifyContent = "center";
    contentEl.style.alignItems = "center";
    contentEl.style.height = "50%";
    contentEl.createEl("h1", {
      text: "Insertar el link de un archivo.",
      attr: { style: "text-align: center;" }
      // Asegura que el texto del título esté centrado si es más largo que una línea
    });
    const inputContainer = contentEl.createDiv();
    inputContainer.style.margin = "10px";
    const fileInput = inputContainer.createEl("input", { type: "file" });
    fileInput.style.display = "none";
    const fileButton = inputContainer.createEl("button", {
      text: "Seleccione su archivo",
      cls: "mod-cta"
    });
    fileButton.style.padding = "5px 10px";
    fileButton.style.fontSize = "16px";
    fileButton.style.marginTop = "5px";
    fileButton.style.cursor = "pointer";
    fileButton.onclick = () => fileInput.click();
    fileInput.onchange = (e) => {
      const file = e.target.files[0];
      if (file) {
        this.insertLinkAtCursor(file.path, file.name);
      }
      this.close();
    };
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
  async insertLinkAtCursor(filePath, fileName) {
    const activeLeaf = this.app.workspace.activeLeaf;
    if (activeLeaf) {
      const editor = activeLeaf.view.sourceMode.cmEditor;
      const cursor = editor.getCursor();
      const linkText = `[${fileName}](<file://${filePath}>)`;
      editor.replaceRange(linkText, cursor);
    }
  }
};
async function insertFileLink(app2) {
  new FileLinkModal(app2).open();
}

// src/modules/moduloBase/commands.ts
var import_obsidian5 = require("obsidian");

// src/modules/moduloBase/utils/createNoteFromTemplate.ts
var import_obsidian4 = require("obsidian");
async function createNoteFromTemplate(plugin, template, folder, filename, openNewNote = true) {
  if (!plugin || !plugin.app.plugins.enabledPlugins.has("templater-obsidian")) {
    console.error("El plugin Templater no est\xE1 habilitado.");
    return;
  }
  const templaterPlugin = plugin.app.plugins.plugins["templater-obsidian"];
  const tp = templaterPlugin.templater.current_functions_object;
  if (!tp) {
    console.error("No se pudo acceder al objeto de funciones actuales de Templater.");
    return;
  }
  debugger;
  let templateFile = tp.file.find_tfile(template);
  try {
    const newNote = await tp.file.create_new(templateFile, filename, openNewNote, folder);
    return newNote;
  } catch (error) {
    console.error("Error al crear la nota desde la plantilla:", error);
    return;
  }
}

// src/modules/moduloBase/commands.ts
function registerCommands(plugin) {
  const comando1 = plugin.addCommand({
    id: "Creacion-Carpeta",
    name: "Creaci\xF3n de Carpeta",
    callback: async () => {
      debugger;
      await crearCarpeta("Mi Carpeta de plugin");
    }
  });
  plugin.registeredCommandIdsMB.push(comando1.id);
  const comando3 = plugin.addCommand({
    id: "crear-archivo-template",
    name: "Crear archivo desde template",
    callback: async () => {
      const pluginId = "templater-obsidian";
      const isPluginInstalled = plugin.app.plugins.enabledPlugins.has(pluginId);
      let template = "Plantillas/Anotaciones/Plt - Anotaciones.md";
      let folderObj = plugin.app.vault.getAbstractFileByPath("Inbox");
      if (!(folderObj instanceof import_obsidian5.TFolder)) {
        new Notice("La carpeta especificada no existe o no es una carpeta.");
        return;
      }
      let fileName = "toDefine";
      let openNote = true;
      debugger;
      const archivo = await createNoteFromTemplate(plugin, template, folderObj, fileName, openNote);
      if (!archivo) {
        new Notice("No se pudo crear el archivo.");
        return;
      }
    }
  });
  plugin.registeredCommandIdsMB.push(comando3.id);
  const comando4 = plugin.addCommand({
    id: "crear-link-Archivo",
    name: "Crear un link a archivo del Disco.",
    callback: async () => {
      await insertFileLink(app);
    }
  });
  plugin.registeredCommandIdsMB.push(comando4.id);
  const comando5 = plugin.addCommand({
    id: "abrir-nota-activa",
    name: "Abrir Nota Activa",
    callback: async () => {
      app.workspace.detachLeavesOfType("vista-nota-activa");
      await app.workspace.getRightLeaf(true).setViewState({
        type: "vista-nota-activa"
      });
      app.workspace.revealLeaf(
        app.workspace.getLeavesOfType("vista-nota-activa")[0]
      );
    }
  });
  plugin.registeredCommandIdsMB.push(comando5.id);
}
function deactivateCommands(plugin) {
  if (!plugin.registeredCommandIdsMB)
    return;
  plugin.registeredCommandIdsMB.forEach((commandId) => {
    const command = plugin.app.commands.commands[commandId];
    if (command) {
      command.callback = () => new Notice("Este comando ha sido desactivado.");
    }
  });
}

// src/modules/moduloBase/index.ts
var ModuloBase = class {
  constructor(plugin) {
    this.moduloBase = null;
    this.plugin = plugin;
  }
  activate() {
    if (this.moduloBase)
      return;
    registerCommands(this.plugin);
  }
  deactivate() {
    if (!this.statusBar)
      return;
    deactivateCommands(this.plugin);
  }
};

// src/modules/M_busquedaAvanzada/activadores.ts
var import_obsidian10 = require("obsidian");

// src/modules/M_busquedaAvanzada/ui/ribbonButton.ts
var import_obsidian9 = require("obsidian");

// src/modules/M_busquedaAvanzada/ui/modal.ts
var import_obsidian8 = require("obsidian");

// src/modules/M_busquedaAvanzada/search/FuzzyNoteSuggester.ts
var import_obsidian7 = require("obsidian");

// src/modules/moduloAliasStatusBar/statusBar.ts
var import_obsidian11 = require("obsidian");
var StatusBarExtension = class {
  constructor(plugin) {
    this.statusBar = null;
    this.plugin = plugin;
  }
  activate() {
    if (this.statusBar)
      return;
    this.statusBar = this.plugin.addStatusBarItem();
    this.updateStatusBar();
    this.plugin.registerEvent(
      this.plugin.app.workspace.on("file-open", (file) => {
        this.updateStatusBar(file);
      })
    );
  }
  deactivate() {
    if (!this.statusBar)
      return;
    this.statusBar.remove();
    this.statusBar = null;
  }
  updateStatusBar(file) {
    var _a, _b;
    const currentFile = file || this.plugin.app.workspace.getActiveFile();
    if (!currentFile || !this.statusBar) {
      (_a = this.statusBar) == null ? void 0 : _a.setText("");
      return;
    }
    const fileCache = this.plugin.app.metadataCache.getFileCache(currentFile);
    const aliases = ((_b = fileCache.frontmatter) == null ? void 0 : _b.aliases) || [];
    this.statusBar.setText(aliases.length > 0 ? `Alias: ${aliases[0]}` : "No Alias");
  }
};

// src/modules/moduloRegistroTiempo/index.ts
var import_obsidian17 = require("obsidian");

// src/modules/moduloRegistroTiempo/ribbonMenu.ts
var import_obsidian14 = require("obsidian");

// src/modules/moduloRegistroTiempo/utils.ts
var import_obsidian13 = require("obsidian");
init_seleccionModal();
async function cumpleCondicion(app2) {
  var _a;
  const files = app2.vault.getMarkdownFiles();
  for (let file of files) {
    if (file.path.startsWith("Estructura/Registro Tiempo")) {
      const metadata = app2.metadataCache.getFileCache(file);
      if (((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.estado) === "\u{1F7E2}") {
        return true;
      }
    }
  }
  return false;
}
async function buscarRegistrosActivos(app2) {
  var _a;
  const files = app2.vault.getMarkdownFiles();
  for (let file of files) {
    if (file.path.startsWith("Subsistemas/Registro Tiempo/Registros")) {
      const metadata = app2.metadataCache.getFileCache(file);
      if (((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.estado) === "\u{1F7E2}") {
        return file;
      }
    }
  }
  return;
}
async function crearObjetoRegistro(plugin) {
  const activo = plugin.app.workspace.getActiveFile();
  if (!activo) {
    console.error("No hay un archivo activo para la creaci\xF3n de registro de tiempo. Se descarta para la creaci\xF3n de registro de tiempo.");
    return null;
  }
  const folder = plugin.settings.folder_RegistroTiempo;
  const indice = plugin.settings.indice_RegistroTiempo;
  let maxId = 0;
  const files = app.vault.getMarkdownFiles();
  const registrosExistentes = files.filter((file) => file.path.startsWith(folder));
  registrosExistentes.forEach((file) => {
    var _a;
    const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    if (metadata && metadata.id && !isNaN(metadata.id)) {
      const id = parseInt(metadata.id);
      if (id > maxId)
        maxId = id;
    }
  });
  const nextId = maxId + 1;
  const fechaCompleta = formatearFecha(/* @__PURE__ */ new Date());
  return {
    activo,
    nombre: activo.basename,
    folder,
    indice,
    id: nextId,
    fecha: fechaCompleta,
    indice_DVJS: `"${indice}"`
  };
}
function formatearFecha(fecha) {
  const offset2 = fecha.getTimezoneOffset() * 6e4;
  const fechaLocal = new Date(fecha.getTime() - offset2);
  const fechaFormato = fechaLocal.toISOString().split("T")[0];
  const dias = ["Domingo", "Lunes", "Martes", "Mi\xE9rcoles", "Jueves", "Viernes", "S\xE1bado"];
  const diaSemana = dias[fecha.getDay()];
  const horaFormato = fecha.toTimeString().split(" ")[0].substring(0, 5);
  return `${fechaFormato} ${diaSemana} ${horaFormato}`;
}
async function verificarTareasActivas(registro, app2) {
  var _a;
  const files = app2.vault.getMarkdownFiles();
  const tareasActivas = [];
  for (let file of files) {
    if (file.path.startsWith(registro.folder)) {
      const metadata = (_a = app2.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if ((metadata == null ? void 0 : metadata.estado) === "\u{1F7E2}") {
        tareasActivas.push({ file, aliases: metadata.aliases || file.basename });
      }
    }
  }
  if (tareasActivas.length === 1) {
    const tareaActiva = tareasActivas[0];
    debugger;
    const deseaDetener = await mostrarSugerencia(`La tarea ${tareaActiva.aliases} est\xE1 corriendo. \xBFDesea detenerla?`);
    if (deseaDetener === void 0) {
      new import_obsidian13.Notice(`Creaci\xF3n de registro cancelado por el usuario.`);
      registro.detener = true;
      return;
    }
    if (deseaDetener) {
      await detenerTarea(tareaActiva, app2);
      registro.detener = false;
    } else {
      new import_obsidian13.Notice(`La tarea ${tareaActiva.aliases} seguir\xE1 registr\xE1ndose.`);
      registro.detener = true;
      return;
    }
  } else if (tareasActivas.length > 1) {
    new import_obsidian13.Notice("Hay un error con la cantidad de tareas corriendo en este momento.");
    registro.detener = true;
  } else {
    console.log("No hay m\xE1s tareas corriendo.");
    registro.detener = false;
  }
}
function mostrarSugerencia(mensaje) {
  return new Promise((resolve) => {
    let seleccionado = false;
    const modal = new import_obsidian13.Modal(app);
    modal.contentEl.createEl("h1", { text: mensaje });
    const buttonsContainer = modal.contentEl.createEl("div");
    const yesButton = buttonsContainer.createEl("button", {
      text: "S\xED"
    });
    yesButton.addEventListener("click", () => {
      seleccionado = true;
      modal.close();
      resolve(true);
    });
    const noButton = buttonsContainer.createEl("button", {
      text: "No"
    });
    noButton.addEventListener("click", () => {
      seleccionado = true;
      modal.close();
      resolve(false);
    });
    modal.onClose = () => {
      if (!seleccionado) {
        resolve(void 0);
      }
    };
    modal.open();
  });
}
async function definirTipoRegistro(registro, app2) {
  const totTareas = await encontrarTareasPendientes(app2);
  let opcionesTitulo, valoresOpcion;
  if (totTareas.length > 0) {
    opcionesTitulo = [registro.nombre, "Alguna tarea en Ejecuci\xF3n", "Otro"];
    valoresOpcion = ["Nota", "Tarea", "Otro"];
  } else {
    opcionesTitulo = [registro.nombre, "Otro"];
    valoresOpcion = ["Nota", "Otro"];
  }
  const placeholder = "\xBFSobre qu\xE9 es el registro de tiempo?";
  const modalMenu1 = new SeleccionModal(app2, opcionesTitulo, valoresOpcion, placeholder);
  try {
    const selection = await modalMenu1.openAndAwaitSelection();
    registro.tipoRegistro = selection;
    switch (registro.tipoRegistro) {
      case "Nota":
        registro.titulo = registro.nombre;
        registro.siAsunto = true;
        break;
      case "Tarea":
        await elegirTareaParaRegistro(app2, registro, totTareas);
        break;
      default:
        registro.siAsunto = registro.tituloDefinido !== "Otro";
        break;
    }
  } catch (error) {
    console.error("Error o modal cerrado sin selecci\xF3n:", error);
  }
}
async function encontrarTareasPendientes(app2) {
  let tareasPendientes = [];
  const archivos = app2.vault.getMarkdownFiles();
  const archivosRelevantes = archivos.filter((archivo) => !archivo.path.includes("Plantillas"));
  for (const archivo of archivosRelevantes) {
    const contenido = await app2.vault.read(archivo);
    const coincidencias = contenido.match(/^ *- \[\/\] .*/gm) || [];
    const tareasLimpias = coincidencias.map((tarea) => tarea.trim());
    tareasPendientes = tareasPendientes.concat(tareasLimpias);
  }
  return tareasPendientes;
}
async function elegirTareaParaRegistro(app2, registro, tareasPendientes) {
  const placeholder = "Elige la tarea que vas a registrar.";
  let promesasLimpias = tareasPendientes.map((tarea) => limpiarTextoTarea(tarea));
  Promise.all(promesasLimpias).then((tareasLimpias) => {
    const modalMenu = new SeleccionModal(app2, tareasLimpias, tareasLimpias, placeholder);
    modalMenu.openAndAwaitSelection().then((selection) => {
      debugger;
      registro.titulo = limpiarTextoTarea(selection);
    }).catch((error) => {
      registro.detener = true;
      console.error("Error o modal cerrado sin selecci\xF3n:", error);
    });
  }).catch((error) => {
    console.error("Hubo un error al limpiar las tareas:", error);
  });
}
function limpiarTextoTarea(titulo) {
  return new Promise((resolve) => {
    let textoLimpio = titulo.split("\n")[0];
    textoLimpio = textoLimpio.replace(/#[\w-/]+/g, "");
    textoLimpio = textoLimpio.replace(/\[\w+::[^\]]+\]/g, "");
    textoLimpio = textoLimpio.replace(/^\s*-\s*\[\/\]\s*/, "");
    const caracteresNoPermitidos = /[<>:"\/\\|?*\x00-\x1F]/g;
    textoLimpio = textoLimpio.replace(caracteresNoPermitidos, "_");
    textoLimpio = textoLimpio.replace(/\s+/g, " ");
    resolve(textoLimpio.trim());
  });
}
async function detenerTarea(tareaActiva, app2) {
  console.log(`Deteniendo la tarea: ${tareaActiva.titulo}`);
  const fileContents = await app2.vault.read(tareaActiva.file);
  const newContents = fileContents.replace("estado: \u{1F7E2}", "estado: \u{1F535}");
  await app2.vault.modify(tareaActiva.file, newContents);
}

// src/modules/moduloRegistroTiempo/ribbonMenu.ts
function registerRibbonMenu2(plugin) {
  plugin.ribbonButtonRT = plugin.addRibbonIcon("clock", "Registro de Tiempo", async (event) => {
    const menu = new import_obsidian14.Menu(plugin.app);
    if (await cumpleCondicion(plugin.app)) {
      menu.addItem((item) => item.setTitle("Ahora").onClick(() => {
        console.log("Ahora");
      }));
    }
    menu.addItem((item) => item.setTitle("Registrar Tiempo").onClick(() => {
      console.log("Registrar Tiempo");
    }));
    if (await cumpleCondicion(plugin.app)) {
      menu.addItem((item) => item.setTitle("Detener Registro").onClick(() => {
        console.log("Detener Registro");
      }));
    }
    menu.addItem((item) => item.setTitle("Tareas en progreso").onClick(() => {
      console.log("Tareas en progreso");
    }));
    menu.addItem((item) => item.setTitle("Registros de hoy").onClick(() => {
      console.log("Registros de hoy");
    }));
    menu.showAtPosition({ x: event.pageX, y: event.pageY });
  });
}
function deactivateRibbonMenu(plugin) {
  if (plugin.ribbonButtonRT) {
    plugin.ribbonButtonRT.remove();
    plugin.ribbonButtonRT = null;
  }
}

// src/modules/moduloRegistroTiempo/commands.ts
var import_obsidian16 = require("obsidian");

// src/modules/moduloRegistroTiempo/modals/modal_Ahora.ts
var import_obsidian15 = require("obsidian");
var modal_Ahora = class extends import_obsidian15.Modal {
  constructor(app2, file) {
    super(app2);
    this.app = app2;
    this.file = file;
  }
  async onOpen() {
    var _a, _b;
    const { contentEl } = this;
    const metadata = this.app.metadataCache.getFileCache(this.file);
    const aliases = ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.aliases) || "Actividad sin alias";
    const horaInicioStr = ((_b = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _b.horaInicio) ? window.moment(metadata.frontmatter.horaInicio, "YYYY-MM-DD dddd HH:mm").format("YYYY-MM-DDTHH:mm") : "";
    contentEl.createEl("h2", { text: `Registro de actividad.` });
    contentEl.createEl("p", { text: `Tarea: "${aliases}"` });
    if (horaInicioStr) {
      const horaInicio = window.moment(horaInicioStr, "YYYY-MM-DD dddd HH:mm");
      const ahora = window.moment();
      const diff = ahora.diff(horaInicio);
      const duracion = window.moment.duration(diff);
      const diffFormatted = `${duracion.hours()}h ${duracion.minutes()}m`;
      contentEl.createEl("p", { text: `Esta actividad lleva ${diffFormatted} en ejecuci\xF3n.` });
    } else {
      contentEl.createEl("p", { text: "No se pudo determinar el tiempo de inicio de la actividad." });
    }
    contentEl.createEl("p", { text: "Hora de inicio:" });
    this.horaInicioInput = contentEl.createEl("input", {
      type: "datetime-local",
      value: horaInicioStr
    });
    const saveButton = contentEl.createEl("button", { text: "Guardar cambios" });
    saveButton.onclick = () => this.guardarCambios();
  }
  async guardarCambios() {
    const nuevaHoraInicioLocal = this.horaInicioInput.value;
    if (!nuevaHoraInicioLocal) {
      new import_obsidian15.Notice("Por favor, seleccione una hora de inicio.");
      return;
    }
    const nuevaHoraInicio = window.moment(nuevaHoraInicioLocal).format("YYYY-MM-DD dddd HH:mm");
    try {
      const contenidoOriginal = await this.app.vault.read(this.file);
      const contenidoActualizado = contenidoOriginal.replace(/(horaInicio: ).*/, `$1${nuevaHoraInicio}`);
      await this.app.vault.modify(this.file, contenidoActualizado);
      this.close();
      new import_obsidian15.Notice("Hora de inicio actualizada correctamente.");
    } catch (error) {
      console.error("Error al guardar cambios en la nota:", error);
      new import_obsidian15.Notice("Error al guardar los cambios en la nota.");
    }
  }
};

// src/modules/moduloRegistroTiempo/commands.ts
function registerCommands2(plugin) {
  const id1 = plugin.addCommand({
    id: "registros-de-tiempo-del-dia",
    name: "Registros de tiempo del d\xEDa",
    checkCallback: (checking) => {
      var _a;
      const activeLeaf = plugin.app.workspace.activeLeaf;
      if (activeLeaf) {
        const filePath = ((_a = activeLeaf.view.file) == null ? void 0 : _a.path) || "";
        if (filePath.startsWith("Estructura/Periodos/Diario/")) {
          if (!checking) {
            console.log("Registros de tiempo del d\xEDa");
          }
          return true;
        }
      }
      return false;
    }
  });
  plugin.registeredCommandIdsRT.push(id1.id);
  const id2 = plugin.addCommand({
    id: "ahora-RegistroTiempo",
    name: "Tarea activa en registro de tiempo",
    callback: async () => {
      const activa = await buscarRegistrosActivos(plugin.app);
      if (!activa) {
        new import_obsidian16.Notice("No hay notas activas");
      } else {
        let modal = new modal_Ahora(plugin.app, activa);
        modal.open();
      }
    }
  });
  plugin.registeredCommandIdsRT.push(id2.id);
  const id3 = plugin.addCommand({
    id: "crear-registro-tiempo",
    name: "Crear Registro de Tiempo",
    callback: async () => {
      const registro = await crearObjetoRegistro(plugin);
      if (!registro) {
        new import_obsidian16.Notice("No se pudo crear el objeto de registro.");
        return;
      }
      await verificarTareasActivas(registro, plugin.app);
      await definirTipoRegistro(registro, plugin.app);
    }
  });
  plugin.registeredCommandIdsRT.push(id3.id);
  const id4 = plugin.addCommand({
    id: "vista-registro-tiempo-activa",
    name: "Mostrar RT Activo",
    callback: async () => {
      app.workspace.detachLeavesOfType("vista-registro-activo");
      await app.workspace.getRightLeaf(true).setViewState({
        type: "vista-registro-activo"
      });
      app.workspace.revealLeaf(
        app.workspace.getLeavesOfType("vista-registro-activo")[0]
      );
    }
  });
  plugin.registeredCommandIdsRT.push(id4.id);
}
function deactivateCommands2(plugin) {
  if (!plugin.registeredCommandIdsRT)
    return;
  plugin.registeredCommandIdsRT.forEach((commandId) => {
    const command = plugin.app.commands.commands[commandId];
    if (command) {
      command.callback = () => new import_obsidian16.Notice("Este comando ha sido desactivado.");
    }
  });
}

// src/modules/moduloRegistroTiempo/index.ts
var ModuloRegistroTiempo = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  activate() {
    if (!this.plugin.ribbonButtonRT) {
      registerRibbonMenu2(this.plugin);
    }
    registerCommands2(this.plugin);
  }
  deactivate() {
    deactivateRibbonMenu(this.plugin);
    deactivateCommands2(this.plugin);
  }
};

// src/defaults/defaultSettings.ts
var DEFAULT_SETTINGS = {
  moduloRegistroTiempo: true,
  moduloAliasStatusBar: true,
  moduloBase: true,
  moduloGTD: true,
  moduloTabTitle: true,
  // Modulo titulo de pestañas.
  moduloTaskManager: true,
  moduloDataviewQueries: true,
  taskNavigatorModule: true,
  // Activado por defecto
  file_camposCentral: "Estructura/Campos Sistema Gestion/Campos Sistema Central",
  folder_Anotaciones: "Anotaciones/Notas",
  indice_Anotaciones: "Anotaciones/Indice Anotaciones",
  folder_ABlog: "Subsistemas/Articulos Blog/Articulos",
  indice_ABlog: "Subsistemas/Articulos Blog/Indice Articulos Blog",
  folder_Desarrollos: "Subsistemas/Desarrollos/Codigos",
  indice_Desarrollos: "Subsistemas/Desarrollos/Indice Desarrollo",
  folder_Estudio: "Subsistemas/Estudio/Temas",
  indice_Estudio: "Subsistemas/Estudio/Indice Estudio",
  folder_RepositorioLibros: "Subsistemas/Libros/Repositorio",
  indice_RepositorioLibros: "Subsistemas/Libros/Indice Repositorio Libros",
  folder_Biblioteca: "Subsistemas/Libros/Biblioteca",
  indice_Biblioteca: "Subsistemas/Libros/Indice Biblioteca",
  folder_KindleNotes: "Subsistemas/Libros/Kindle",
  indice_KindleNotes: "Subsistemas/Libros/Kindle/Indice Kindle",
  //folder_LecturaSesiones: "Subsistemas/Lectura/Sesiones de Lectura/Sesiones",
  //indice_LecturaSesiones: "Subsistemas/Lectura/Sesiones de Lectura/Indice Sesiones Lectura",
  folder_LecturaResumenes: "Subsistemas/Lectura/Libros/Resumenes",
  indice_LecturaResumenes: "Subsistemas/Lectura/Libros/Indice Resumenes",
  folder_Mentorias: "Subsistemas/Mentorias/Sesiones Mentoria",
  indice_Mentorias: "Subsistemas/Mentorias/Indice Mentorias",
  folder_Mercado: "Subsistemas/Mercado/Listas",
  indice_Mercado: "Subsistemas/Mercado/Indice Mercado",
  folder_ModulosSistema: "Subsistemas/Modulos Sistema Gestion/Modulos",
  indice_ModulosSistema: "Subsistemas/Modulos Sistema Gestion/Indice Modulos",
  folder_Transacciones: "Subsistemas/Transacciones",
  indice_Transacciones: "Subsistemas/Transacciones/Indice Transacciones",
  folder_Presentaciones: "Subsistemas/Presentaciones/Notas",
  indice_Presentaciones: "Subsistemas/Presentaciones/Indice Presentaciones",
  folder_Publicaciones: "Subsistemas/Publicaciones/Piezas",
  indice_Publicaciones: "Subsistemas/Publicaciones/Indice Publicaciones",
  folder_Recetas: "Subsistemas/Recetas/Recetas",
  indice_Recetas: "Subsistemas/Recetas/Indice Recetas",
  folder_RegistroTiempo: "Subsistemas/Registro Tiempo/Registros",
  indice_RegistroTiempo: "Subsistemas/Registro Tiempo/Indice Registro Tiempo",
  folder_ContenidoParaEstudio: "Subsistemas/Contenido para Estudio/Contenido",
  indice_ContenidoParaEstudio: "Subsistemas/Contenido para Estudio/Indice Contenido para Estudio",
  folder_Campa\u00F1a: "Subsistemas/Marketing/Proyectos",
  indice_Campa\u00F1a: "Subsistemas/Marketing/Indice Campa\xF1as",
  folder_Entregable: "Subsistemas/Marketing/Entregables",
  indice_Entregable: "Subsistemas/Marketing/Indice Entregables",
  // Estructura
  folder_AreasVida: "Estructura/Areas de Vida",
  indice_AreasVida: "Estructura/Areas de Vida/Indice Areas de Vida",
  folder_AreasInteres: "Estructura/Areas de Interes",
  indice_AreasInteres: "Estructura/Areas de Interes/Indice Areas de Interes",
  folder_TemasInteres: "Estructura/Temas de Interes",
  indice_TemasInteres: "Estructura/Temas de Interes/Indice Temas de Interes",
  folder_RecursosRecurrentes: "Estructura/Recursos Recurrentes/Recursos",
  indice_RecursosRecurrentes: "Estructura/Recursos Recurrentes/Indice Recursos Recurrentes",
  folder_ProyectosQ: "Estructura/Proyectos de Q",
  indice_ProyectosQ: "Estructura/Proyectos de Q/Indice Proyectos de Q",
  file_Inbox: "Estructura/GTD/Bandeja de Entrada/Bandeja de Entrada",
  folder_ProyectosGTD: "Estructura/GTD/Proyectos GTD/Proyectos",
  indice_ProyectosGTD: "Estructura/GTD/Proyectos GTD/Indice Proyectos GTD",
  folder_RSGTD: "Estructura/GTD/Revision Semanal/Revisiones",
  indice_RSGTD: "Estructura/GTD/Revision Semanal/Indice Revision Semanal",
  folder_SistemaGTD: "Estructura/GTD/Sistema GTD/Sistema",
  indice_SistemaGTD: "Estructura/GTD/Sistema GTD/Indice Sistema GTD",
  // Journal
  folder_Diario: "Estructura/Journal/Diario/Notas",
  indice_Diario: "Estructura/Journal/Diario/Indice Diario",
  folder_Semanal: "Estructura/Journal/Semanal/Notas",
  indice_Semanal: "Estructura/Journal/Semanal/Indice Semanal",
  folder_Mensual: "Estructura/Journal/Mensual/Notas",
  indice_Mensual: "Estructura/Journal/Mensual/Indice Mensual",
  folder_Trimestral: "Estructura/Journal/Trimestral/Notas",
  indice_Trimestral: "Estructura/Journal/Trimestral/Indice Trimestral",
  folder_Anual: "Estructura/Journal/Anual/Notas",
  indice_Anual: "Estructura/Journal/Anual/Indice Anual",
  // COMPASS
  folder_CompassAnual: "Estructura/Compass/Reportes/Anual",
  indice_CompassAnual: "Estructura/Compass/Reportes/Indice Compass Anual",
  folder_CompassTrimestral: "Estructura/Compass/Reportes/Trimestral",
  indice_CompassTrimestral: "Estructura/Compass/Reportes/Indice Compass trimestral",
  folder_ObjCompassAnual: "Estructura/Compass/Objetivos/Anual",
  indice_ObjCompassAnual: "Estructura/Compass/Objetivos/Indice Compass Anual",
  folder_ObjCompassTrimestral: "Estructura/Compass/Objetivos/Trimestral",
  indice_ObjCompassTrimestral: "Estructura/Compass/Objetivos/Indice Compass trimestral",
  // Registros Personales
  folder_Agradecimientos: "Registros Personales/Agradecimientos/Notas",
  indice_Agradecimientos: "Registros Personales/Agradecimientos/Indice Agradecimientos",
  folder_Reflexiones: "Registros Personales/Reflexiones/Notas",
  indice_Reflexiones: "Registros Personales/Reflexiones/Indice Reflexiones",
  folder_RegistrosAkashikos: "Registros Personales/Registros Akashikos/Notas",
  indice_RegistrosAkashikos: "Registros Personales/Registros Akashikos/Indice Registros Akashikos"
};

// src/main.ts
init_registroTiempoAPI();

// src/modules/noteLifecycleManager/API/starterAPI.ts
var import_obsidian50 = require("obsidian");
init_luxon();

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/AgradecimientosFieldHandler.ts
var import_obsidian28 = require("obsidian");

// src/modules/noteLifecycleManager/FieldHandlerUtils.ts
var import_obsidian26 = require("obsidian");
init_luxon();
var FieldHandlerUtils = class {
  static async crearCarpeta(folderPath) {
    try {
      const carpetaExistente = app.vault.getAbstractFileByPath(folderPath);
      if (carpetaExistente instanceof import_obsidian26.TFolder) {
        console.log(`La carpeta '${folderPath}' ya existe.`);
        return;
      }
      await app.vault.createFolder(folderPath);
      console.log(`Carpeta '${folderPath}' creada exitosamente.`);
    } catch (error) {
      console.error(`Error al crear la carpeta '${folderPath}':`, error);
    }
  }
  // Esta función encuentra los archivos de subsistemas y cuyo estado es 🟢
  // Esta función sale de menuOtro, de registro Tiempo. Revisar si debo sincronizarlas.
  static async findMainFilesWithState(tipo, parametro, plugin) {
    var _a, _b, _c;
    const propertiesTipo = {
      AV: {
        folder: plugin.settings.folder_AreasVida
      },
      AI: {
        folder: plugin.settings.folder_AreasInteres
      },
      PQ: {
        folder: plugin.settings.folder_ProyectosQ
      },
      PGTD: {
        folder: plugin.settings.folder_ProyectosGTD
      },
      TI: {
        folder: plugin.settings.folder_TemasInteres
      },
      RR: {
        folder: plugin.settings.folder_RecursosRecurrentes
      },
      TQ: {
        folder: plugin.settings.folder_Trimestral
      },
      AY: {
        folder: plugin.settings.folder_Anual
      }
      // Puedes continuar añadiendo más casos aquí
    };
    if (!propertiesTipo[tipo]) {
      throw new Error(`Tipo ${tipo} no es v\xE1lido.`);
    }
    const activeFilesWithFrontmatter = [];
    let files, trimestre;
    const folder = propertiesTipo[tipo].folder;
    switch (tipo) {
      case "AV":
        if (!parametro) {
          trimestre = DateTime.now().toFormat("yyyy-Qq");
        } else {
          trimestre = parametro;
        }
        files = app.vault.getMarkdownFiles().filter((file) => file.path.includes(folder) && !file.path.includes("Plantillas") && !file.path.includes("Archivo") && file.name.startsWith(trimestre));
        for (let file of files) {
          let metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
          if ((metadata == null ? void 0 : metadata.estado) === "\u{1F7E2}") {
            let activeFile = Object.assign({}, metadata);
            activeFile.file = file;
            activeFilesWithFrontmatter.push(activeFile);
          }
        }
        break;
      case "AI":
      case "TQ":
      case "AY":
        files = app.vault.getMarkdownFiles().filter((file) => file.path.includes(folder) && !file.path.includes("Plantillas") && !file.path.includes("Archivo"));
        for (let file of files) {
          let metadata = (_b = app.metadataCache.getFileCache(file)) == null ? void 0 : _b.frontmatter;
          if ((metadata == null ? void 0 : metadata.estado) === "\u{1F7E2}") {
            let activeFile = Object.assign({}, metadata);
            activeFile.file = file;
            activeFilesWithFrontmatter.push(activeFile);
          }
        }
        break;
      default:
        files = app.vault.getMarkdownFiles().filter((file) => file.path.includes(folder) && !file.path.includes("Plantillas") && !file.path.includes("Archivo"));
        for (let file of files) {
          let metadata = (_c = app.metadataCache.getFileCache(file)) == null ? void 0 : _c.frontmatter;
          if ((metadata == null ? void 0 : metadata.estado) === "\u{1F7E2}") {
            let activeFile = Object.assign({}, metadata);
            activeFile.file = file;
            activeFilesWithFrontmatter.push(activeFile);
          }
        }
        break;
    }
    return activeFilesWithFrontmatter;
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Base/NoteFieldHandlerBase.ts
var import_obsidian27 = require("obsidian");
var NoteFieldHandlerBase = class {
  constructor(tp, infoSubsistema, plugin) {
    this.tp = tp;
    this.infoSubsistema = infoSubsistema;
    this.suggester = tp.system.static_functions.get("suggester");
    this.prompt = tp.system.static_functions.get("prompt");
    this.plugin = plugin;
    this.nota = {};
  }
  async getId() {
    let maxId = 0;
    const files = app.vault.getMarkdownFiles();
    const registrosExistentes = files.filter((file) => file.path.startsWith(this.infoSubsistema.folder));
    registrosExistentes.forEach((file) => {
      var _a;
      const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if (metadata && metadata.id && !isNaN(metadata.id)) {
        const id = parseInt(metadata.id);
        if (id > maxId)
          maxId = id;
      }
    });
    return maxId + 1;
  }
  async getFecha() {
    const currentDate = (/* @__PURE__ */ new Date()).toISOString().slice(0, 10);
    const currentDay = (/* @__PURE__ */ new Date()).toLocaleDateString("es-ES", { weekday: "long" });
    const formattedDate = `${currentDate} ${currentDay}`;
    this.nota.fecha = formattedDate;
    return formattedDate;
  }
  async getAliases() {
    const id = await this.getId();
    return [`${this.infoSubsistema.typeName} ${id}`];
  }
  async getRename() {
    const fecha = this.nota.fecha;
    const newName = `${this.infoSubsistema.folder}/${this.infoSubsistema.typeName} ${fecha}.md`;
    await FieldHandlerUtils.crearCarpeta(this.infoSubsistema.folder);
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    try {
      if (existe instanceof import_obsidian27.TFile) {
        const nombreFile = newName.split("/");
        const borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [true, false],
          true,
          `\xBF${nombreFile.pop()} ya existe. Qu\xE9 deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian27.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            return newName;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian27.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          return newName;
        }
      }
    } catch (error) {
      console.error("Error al cambiar el nombre", error);
      throw error;
    }
  }
  async getEstado() {
    return "\u{1F7E2}";
  }
  async getNota() {
    return this.nota;
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/AgradecimientosFieldHandler.ts
var AgradecimientosFieldHandler = class extends NoteFieldHandlerBase {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  // getFecha para determinar si la fecha de la que inicia esta en el archivo de origen.
  async getFecha() {
    const activo = app.workspace.getActiveFile();
    let fecha;
    const title = this.tp.file.dynamic_functions.get("title");
    if (title && title.startsWith("Agradecimiento")) {
      fecha = title.split("Agradecimiento ")[1];
    } else if (activo.path && (activo == null ? void 0 : activo.path.startsWith("Estructura/Journal/Diario/Notas"))) {
      fecha = activo.basename;
    } else {
      const currentDate = moment().format("YYYY-MM-DD dddd");
      fecha = await this.prompt("\xBFDe qu\xE9 dia es el agradecimiento??", currentDate, false, false);
    }
    this.nota.fecha = fecha;
    return fecha;
  }
  async getAgradecimientos() {
    let agradecimientos = [];
    let numAgradecimientos = 0;
    let otra;
    do {
      const agradecimiento = await this.prompt("\xBFDe qu\xE9 est\xE1s agradecido?", `Gracias por ${numAgradecimientos}`, false, true);
      agradecimientos.push(agradecimiento);
      numAgradecimientos += 1;
      otra = await this.suggester(["S\xED", "No"], [true, false], true, "\xBFQuieres agregar otro agradecimiento?");
    } while (otra);
    return agradecimientos;
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/ReflexionesFieldHandlers.ts
var import_obsidian29 = require("obsidian");
var ReflexionesFieldHandler = class extends NoteFieldHandlerBase {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  // getFecha para determinar si la fecha de la que inicia esta en el archivo de origen.
  async getFecha() {
    const activo = app.workspace.getActiveFile();
    let fecha;
    const title = this.tp.file.dynamic_functions.get("title");
    if (title && title.startsWith("Reflexion")) {
      fecha = title.split("Reflexion ")[1];
    } else if (activo.path && (activo == null ? void 0 : activo.path.startsWith("Estructura/Journal/Diario/Notas"))) {
      fecha = activo.basename;
    } else {
      const currentDate = moment().format("YYYY-MM-DD dddd");
      fecha = await this.prompt("\xBFDe qu\xE9 dia es la reflexi\xF3n??", currentDate, false, false);
    }
    this.nota.fecha = fecha;
    return fecha;
  }
  async getReflexion() {
    let reflexiones = [];
    let numReflexiones = 0;
    let otra;
    do {
      const reflexion = await this.prompt("Que estas pensando?", `P${numReflexiones}`, false, true);
      reflexiones.push(reflexion);
      numReflexiones += 1;
      otra = await this.suggester(["S\xED", "No"], [true, false], true, "\xBFQuieres agregar otro p\xE1rrafo?");
    } while (otra);
    return reflexiones;
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Base/NoteFieldHandler.ts
var import_obsidian30 = require("obsidian");
init_luxon();
var NoteFieldHandler = class {
  constructor(tp, infoSubsistema, plugin) {
    this.tp = tp;
    this.infoSubsistema = infoSubsistema;
    this.suggester = tp.system.static_functions.get("suggester");
    this.prompt = tp.system.static_functions.get("prompt");
    this.nota = {};
    this.plugin = plugin;
  }
  async getId() {
    let maxId = 0;
    const files = app.vault.getMarkdownFiles();
    const registrosExistentes = files.filter((file) => file.path.startsWith(this.infoSubsistema.folder));
    registrosExistentes.forEach((file) => {
      var _a;
      const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if (metadata && metadata.id && !isNaN(metadata.id)) {
        const id = parseInt(metadata.id);
        if (id > maxId)
          maxId = id;
      }
    });
    this.nota.id = maxId + 1;
    return this.nota.id;
  }
  async getFecha() {
    let fechaActual = DateTime.now();
    fechaActual = fechaActual.setLocale("es");
    fechaActual = fechaActual.toFormat("yyyy-MM-dd EEEE HH:mm");
    this.nota.fecha = fechaActual;
    return fechaActual;
  }
  async getTitulo() {
    const title = await this.prompt(`T\xEDtulo de ${this.infoSubsistema.typeName}:`, "", false, false);
    this.nota.titulo = title;
    return title;
  }
  async getDescripcion() {
    const descripcion = await this.prompt(`Descripci\xF3n del ${this.infoSubsistema.typeName}:`, "", false, true);
    this.nota.descripcion = descripcion;
    return descripcion;
  }
  async getEstado() {
    return "\u{1F7E2}";
  }
  async getNota() {
    return this.nota;
  }
  async getAsunto() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q;
    let padres = [];
    let activo = app.workspace.getActiveFile();
    let siAsunto = false;
    let nombre = "";
    let nota;
    if (activo != null) {
      nombre = activo.basename;
      nota = app.metadataCache.getFileCache(activo);
      nota.frontmatter = nota.frontmatter || {};
      nota.frontmatter.file = {};
      Object.assign(nota.frontmatter.file, activo);
      padres.unshift(nombre);
      siAsunto = await this.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
      if (siAsunto) {
        debugger;
        this.nota.asuntoDefinido = true;
        let nivel;
        switch ((_a = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _a.type) {
          default:
          case "PGTD":
          case "PQ":
            if (((_b = nota.frontmatter) == null ? void 0 : _b.type) === "PQ") {
              this.nota.proyectoQ = nombre;
              this.nota.proyectoGTD = "";
              if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if (nota.frontmatter.proyectoGTD) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else if (((_c = nota.frontmatter) == null ? void 0 : _c.type) === "PGTD") {
              this.nota.proyectoGTD = [nombre];
              if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                this.nota.proyectoGTD = this.nota.proyectoGTD.concat(nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
              } else if (nota.frontmatter.proyectoGTD) {
                this.nota.proyectoGTD.push(nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
              }
              this.nota.proyectoQ = "";
              if (Array.isArray(nota.frontmatter.proyectoQ)) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if (nota.frontmatter.proyectoQ) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.proyectoQ = "";
              if (Array.isArray((_d = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _d.proyectoQ)) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if ((_e = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _e.proyectoQ) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
              }
              this.nota.proyectoGTD = "";
              if (Array.isArray((_f = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _f.proyectoGTD)) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if ((_g = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _g.proyectoGTD) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            }
            this.nota.areaInteres = [];
            if (Array.isArray((_h = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _h.areaInteres)) {
              this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
            } else {
              if ((_i = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _i.areaInteres) {
                this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
              }
            }
            this.nota.areaVida = "";
            if ((_j = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _j.areaVida) {
              if (Array.isArray(nota.frontmatter.areaVida)) {
                this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
              } else if (typeof nota.frontmatter.areaVida === "string") {
                this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.areaVida = "No es de ning\xFAn Area de Vida";
            }
            if (!isNaN(parseInt((_k = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _k.nivelP))) {
              nivel = parseInt(nota.frontmatter.nivelP) + 1;
            } else {
              nivel = 0;
            }
            this.nota.nivelP = nivel;
            break;
          case "AI":
            debugger;
            if (((_l = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _l.type) === "AI") {
              this.nota.areaInteres = [nota.frontmatter.file.basename];
            }
            if (Array.isArray((_m = nota.frontmatter) == null ? void 0 : _m.areaInteres)) {
              this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
            } else {
              if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
                this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else {
              }
            }
          case "AV":
            if ((_n = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _n.areaVida) {
              if (Array.isArray(nota.frontmatter.areaVida)) {
                this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
              } else if (typeof nota.frontmatter.areaVida === "string") {
                this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.areaVida = "No es de ning\xFAn Area de Vida";
            }
            if (((_o = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _o.type) === "AI" || ((_p = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _p.type) === "AV") {
              siAsunto = false;
            }
            if (!isNaN(parseInt((_q = nota.frontmatter) == null ? void 0 : _q.nivelP))) {
              nivel = parseInt(nota.frontmatter.nivelP) + 1;
            } else {
              nivel = 0;
            }
            this.nota.nivelP = nivel;
            break;
        }
      } else {
      }
    } else {
      siAsunto = false;
    }
    return { siAsunto, nombre: padres };
  }
  async getProyectoGTD() {
    if (!this.nota.asuntoDefinido) {
      let notasF = await FieldHandlerUtils.findMainFilesWithState("PGTD", null, this.plugin);
      let titulo, nivel;
      let padrePGTD = await this.suggester(["Si", "No"], [true, false], false, ` ${this.nota.titulo} es hijo de un Proyecto GTD?`);
      if (padrePGTD) {
        let notaF = await this.suggester(notasF.map((b) => b.titulo), notasF.map((b) => b), false, `\xBFQu\xE9 Proyecto GTD es padre de ${this.nota.titulo}?:`);
        if (notaF === null) {
          new import_obsidian30.Notice("Sin proyecto GTD definido.");
          titulo = [];
          return;
        } else {
          this.nota.areaInteres = [];
          if (Array.isArray(notaF == null ? void 0 : notaF.areaInteres)) {
            this.nota.areaInteres = this.nota.areaInteres.concat(notaF.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
          } else if (notaF == null ? void 0 : notaF.areaInteres) {
            this.nota.areaInteres.push(notaF.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
          }
          this.nota.areaVida = [];
          if (notaF == null ? void 0 : notaF.areaVida) {
            if (Array.isArray(notaF.areaVida)) {
              this.nota.areaVida = notaF.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
            } else if (typeof notaF.areaVida === "string") {
              this.nota.areaVida = notaF.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
            }
          } else {
            this.nota.areaVida = "No es de ning\xFAn Area de Vida";
          }
          this.nota.proyectoQ = [];
          if (Array.isArray(notaF == null ? void 0 : notaF.proyectoQ)) {
            this.nota.proyectoQ = notaF.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
          } else if (notaF == null ? void 0 : notaF.proyectoQ) {
            this.nota.proyectoQ = [notaF.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "")];
          }
          titulo = [notaF.titulo];
          if (Array.isArray(notaF == null ? void 0 : notaF.proyectoGTD)) {
            titulo = titulo.concat(notaF.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
          } else if (notaF == null ? void 0 : notaF.proyectoGTD) {
            titulo.push(notaF.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
          }
          this.nota.asuntoDefinido = true;
        }
      } else {
        titulo = [];
        nivel = 0;
      }
      return titulo;
    } else {
      return this.nota.proyectoGTD;
    }
  }
  async getProyectoQ() {
    let notaF, titulo, nivel;
    if (!this.nota.asuntoDefinido) {
      let notasF = await FieldHandlerUtils.findMainFilesWithState("PQ", null, this.plugin);
      let padreQ = await this.suggester(["Si", "No"], [true, false], false, ` ${this.nota.titulo} es hijo de un Proyecto Q?`);
      if (padreQ) {
        notaF = await this.suggester(notasF.map((b) => b.titulo), notasF.map((b) => b), false, `\xBFQu\xE9 Proyecto Q es padre de ${this.nota.titulo}?:`);
        if (notaF === null) {
          new import_obsidian30.Notice("Sin proyecto Q definido.");
          titulo = [];
          return;
        } else {
          this.nota.areaInteres = [];
          if (Array.isArray(notaF == null ? void 0 : notaF.areaInteres)) {
            this.nota.areaInteres = this.nota.areaInteres.concat(notaF.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
          } else if (notaF == null ? void 0 : notaF.areaInteres) {
            this.nota.areaInteres.push(notaF.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
          }
          this.nota.areaVida = [];
          if (notaF == null ? void 0 : notaF.areaVida) {
            if (Array.isArray(notaF.areaVida)) {
              this.nota.areaVida = notaF.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
            } else if (typeof notaF.areaVida === "string") {
              this.nota.areaVida = notaF.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
            }
          } else {
            this.nota.areaVida = "No es de ning\xFAn Area de Vida";
          }
          titulo = [notaF == null ? void 0 : notaF.titulo];
          this.nota.proyectoGTD = [];
          if (Array.isArray(notaF == null ? void 0 : notaF.proyectoGTD)) {
            this.nota.proyectoGTD = notaF.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
          } else if (notaF == null ? void 0 : notaF.proyectoGTD) {
            this.nota.proyectoGTD = [notaF.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "")];
          }
          this.nota.asuntoDefinido = true;
        }
      } else {
        titulo = [];
        nivel = 0;
      }
      return titulo;
    } else {
      return this.nota.proyectoQ;
    }
  }
  async getAreaInteres() {
    let areaInteres, nivel, titulo, padreAI, arrayAI;
    if (!this.nota.asuntoDefinido) {
      let areasInteres = await FieldHandlerUtils.findMainFilesWithState("AI", null, this.plugin);
      padreAI = await this.suggester(["Si", "No"], [true, false], false, ` ${this.nota.titulo} es hijo de un \xC1rea de Inter\xE9s:`);
      if (padreAI) {
        areaInteres = await this.suggester(areasInteres.map((b) => b.titulo), areasInteres.map((b) => b), false, `\xBFQu\xE9 \xC1rea de Inter\xE9s es padre de ${this.nota.titulo}?:`);
        if (areaInteres === null) {
          new import_obsidian30.Notice("Sin \xC1rea de Inter\xE9s");
          titulo = [];
          nivel = 0;
          return;
        } else {
          titulo = [areaInteres.titulo];
          if (Array.isArray(areaInteres == null ? void 0 : areaInteres.areaInteres)) {
            titulo = titulo.concat(areaInteres.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
          } else if (areaInteres == null ? void 0 : areaInteres.areaInteres) {
            titulo.push(areaInteres.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
          }
          if (areaInteres == null ? void 0 : areaInteres.areaVida) {
            if (Array.isArray(areaInteres.areaVida)) {
              this.nota.areaVida = areaInteres.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
            } else if (typeof areaInteres.areaVida === "string") {
              this.nota.areaVida = areaInteres.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
            }
          } else {
            this.nota.areaVida = "No es de ning\xFAn Area de Vida";
          }
          this.nota.asuntoDefinido = true;
          nivel = parseInt(areaInteres.nivelAI);
        }
      } else {
        titulo = [];
        nivel = 0;
      }
      this.nota.nivelAI = nivel;
      return titulo;
    } else {
      return this.nota.areaInteres;
    }
  }
  async getAreaVida() {
    let areasVida = {};
    let noAV = {
      file: {
        basename: "No es de ning\xFAn Area de Vida"
      },
      areaVida: "No es de ning\xFAn Area de Vida"
    };
    if (!this.nota.asuntoDefinido) {
      let padreAV = await this.suggester(["Si", "No"], [true, false], false, ` ${this.nota.titulo} es hijo de un \xC1rea de Vida?`);
      if (padreAV) {
        areasVida = await FieldHandlerUtils.findMainFilesWithState("AV", null, this.plugin);
        areasVida.push(noAV);
        this.nota.areaVida = await this.suggester(areasVida.map((b) => b.file.basename), areasVida.map((b) => b.file.basename), false, `\xBFA qu\xE9 \xC1rea de Vida pertenece $${this.nota.titulo}?:`);
      } else {
        this.nota.areaVida = "No es de ning\xFAn Area de Vida";
      }
      return this.nota.areaVida;
    } else {
      return this.nota.areaVida;
    }
  }
  async getAliases() {
    this.nota.aliases = [];
    this.nota.aliases.push(`${this.nota.titulo}`);
    this.nota.aliases.push(`${this.infoSubsistema.type}/${this.nota.titulo}`);
    return this.nota.aliases;
  }
  async getRename() {
    debugger;
    const newName = `${this.infoSubsistema.folder}/${this.infoSubsistema.type} - ${this.nota.id}.md`;
    await FieldHandlerUtils.crearCarpeta(this.infoSubsistema.folder);
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    try {
      if (existe instanceof import_obsidian30.TFile) {
        const nombreFile = newName.split("/");
        const borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [true, false],
          true,
          `\xBF${nombreFile.pop()} ya existe. Qu\xE9 deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian30.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            return newName;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian30.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          return newName;
        }
      }
    } catch (error) {
      console.error("Error al cambiar el nombre", error);
      throw error;
    }
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/CPEFieldHandler.ts
var ContenidoParaEstudioFieldHandler = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/RRFieldHandler.ts
var RecursosRecurrentesFieldHandler = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Estructura/PGTDFieldHandler.ts
var import_obsidian31 = require("obsidian");
var PGTDFieldHandler = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  async getAsunto() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D;
    let tipoSistema = this.infoSubsistema.type;
    let nombreSistema = this.infoSubsistema.typeName;
    let subsistemas, padres = [];
    let activo = app.workspace.getActiveFile();
    let siAsunto = false;
    let nombre = "";
    let nota;
    if (activo != null) {
      nombre = activo.basename;
      nota = app.metadataCache.getFileCache(activo);
      nota.frontmatter = nota.frontmatter || {};
      nota.frontmatter.file = {};
      Object.assign(nota.frontmatter.file, activo);
      padres.unshift(nombre);
      switch (tipoSistema) {
        case "RR":
        case "PGTD":
        case "Ax":
        case "Tx":
        case "CPE":
          siAsunto = await this.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
          if (siAsunto) {
            debugger;
            this.nota.asuntoDefinido = true;
            let nivel2;
            switch ((_a = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _a.type) {
              default:
              case "PGTD":
              case "PQ":
                if (((_b = nota.frontmatter) == null ? void 0 : _b.type) === "PQ") {
                  this.nota.proyectoQ = nombre;
                  this.nota.proyectoGTD = "";
                  if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                    this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
                  } else if (nota.frontmatter.proyectoGTD) {
                    this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                } else if (((_c = nota.frontmatter) == null ? void 0 : _c.type) === "PGTD") {
                  this.nota.proyectoGTD = [nombre];
                  if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                    this.nota.proyectoGTD = this.nota.proyectoGTD.concat(nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                  } else if (nota.frontmatter.proyectoGTD) {
                    this.nota.proyectoGTD.push(nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
                  }
                  this.nota.proyectoQ = "";
                  if (Array.isArray(nota.frontmatter.proyectoQ)) {
                    this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
                  } else if (nota.frontmatter.proyectoQ) {
                    this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                } else {
                  this.nota.proyectoQ = "";
                  if (Array.isArray((_d = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _d.proyectoQ)) {
                    this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
                  } else if ((_e = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _e.proyectoQ) {
                    this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                  this.nota.proyectoGTD = "";
                  if (Array.isArray((_f = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _f.proyectoGTD)) {
                    this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
                  } else if ((_g = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _g.proyectoGTD) {
                    this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                }
                this.nota.areaInteres = [];
                if (Array.isArray((_h = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _h.areaInteres)) {
                  this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                } else {
                  if ((_i = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _i.areaInteres) {
                    this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
                  }
                }
                this.nota.areaVida = "";
                if ((_j = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _j.areaVida) {
                  if (Array.isArray(nota.frontmatter.areaVida)) {
                    this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
                  } else if (typeof nota.frontmatter.areaVida === "string") {
                    this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                } else {
                  this.nota.areaVida = "No es de ning\xFAn Area de Vida";
                }
                if (!isNaN(parseInt((_k = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _k.nivelP))) {
                  nivel2 = parseInt(nota.frontmatter.nivelP) + 1;
                } else {
                  nivel2 = 0;
                }
                this.nota.nivelP = nivel2;
                break;
              case "AI":
                debugger;
                if (((_l = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _l.type) === "AI") {
                  this.nota.areaInteres = [nota.frontmatter.file.basename];
                }
                if (Array.isArray((_m = nota.frontmatter) == null ? void 0 : _m.areaInteres)) {
                  this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                } else {
                  if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
                    this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
                  } else {
                  }
                }
              case "AV":
                if ((_n = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _n.areaVida) {
                  if (Array.isArray(nota.frontmatter.areaVida)) {
                    this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
                  } else if (typeof nota.frontmatter.areaVida === "string") {
                    this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                } else {
                  this.nota.areaVida = "No es de ning\xFAn Area de Vida";
                }
                if (((_o = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _o.type) === "AI" || ((_p = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _p.type) === "AV") {
                  siAsunto = false;
                }
                if (!isNaN(parseInt((_q = nota.frontmatter) == null ? void 0 : _q.nivelP))) {
                  nivel2 = parseInt(nota.frontmatter.nivelP) + 1;
                } else {
                  nivel2 = 0;
                }
                this.nota.nivelP = nivel2;
                break;
            }
          } else {
          }
          break;
        case "PQ":
          siAsunto = await this.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
          if (siAsunto) {
            debugger;
            if (((_r = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _r.areaVida) !== void 0 && nota.frontmatter.areaVida !== "") {
              if (Array.isArray(nota.frontmatter.areaVida)) {
                this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
              } else if (typeof nota.frontmatter.areaVida === "string") {
                this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
              }
              if (((_s = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _s.type) === "AI" || ((_t = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _t.type) === "AV") {
                siAsunto = false;
              }
              let nivel2;
              switch ((_u = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _u.type) {
                case "PGTD":
                  this.nota.proyectoGTD = [nombre];
                  if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                    this.nota.proyectoGTD = this.nota.proyectoGTD.concat(nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                  } else if (nota.frontmatter.proyectoGTD) {
                    this.nota.proyectoGTD.push(nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
                  }
                case "AI":
                  if (((_v = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _v.type) === "AI") {
                    this.nota.areaInteres = [nota.frontmatter.file.basename];
                  } else {
                    this.nota.areaInteres = [];
                  }
                  if (Array.isArray((_w = nota.frontmatter) == null ? void 0 : _w.areaInteres)) {
                    this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                  } else {
                    if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
                      this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
                    } else {
                      this.nota.areaInteres = "";
                    }
                  }
                case "AV":
                case "nAV":
                  if (!isNaN(parseInt((_x = nota.frontmatter) == null ? void 0 : _x.nivelP))) {
                    nivel2 = parseInt(nota.frontmatter.nivelP) + 1;
                  } else {
                    nivel2 = 0;
                  }
                  this.nota.nivelP = nivel2;
                  this.nota.asuntoDefinido = true;
                  break;
                default:
                  new import_obsidian31.Notice("Un Proyecto de Q solo puede iniciar de un AV, AI o PGTD. Asunto no definido.");
                  break;
              }
            } else {
              new import_obsidian31.Notice("Todos los proyectos de Q requieren Area de Vida. Asunto no definido.");
              siAsunto = false;
            }
          } else {
          }
          break;
        case "AI":
          let nivel;
          switch ((_y = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _y.type) {
            case "AI":
            case "AV":
            case "nAV":
              siAsunto = await this.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
              if (siAsunto) {
                this.nota.asuntoDefinido = true;
                if (((_z = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _z.type) === "AI") {
                  this.nota.areaInteres = [nota.frontmatter.file.basename];
                  if (Array.isArray(nota.frontmatter.areaInteres)) {
                    this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                  } else {
                    if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
                      this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
                    }
                  }
                }
                if ((_A = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _A.areaVida) {
                  if (Array.isArray(nota.frontmatter.areaVida)) {
                    this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
                  } else if (typeof nota.frontmatter.areaVida === "string") {
                    this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                } else {
                  this.nota.areaVida = "No es de ning\xFAn Area de Vida";
                }
                if (((_B = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _B.type) === "AI" || ((_C = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _C.type) === "AV") {
                  siAsunto = false;
                }
                if (!isNaN(parseInt((_D = nota.frontmatter) == null ? void 0 : _D.nivelAI))) {
                  nivel = parseInt(nota.frontmatter.nivelAI) + 1;
                } else {
                  nivel = 0;
                }
                this.nota.nivelAI = nivel;
              }
              break;
          }
          break;
        default:
          console.log("Dependiendo de la estructura, getAsunto deberia tener su clasificaci\xF3n. Aqui vas a tener un error.");
          break;
      }
    } else {
      siAsunto = false;
    }
    return { siAsunto, nombre: padres };
  }
  async getProyectoGTD() {
    let tipo = this.infoSubsistema.type;
    let notasF = await FieldHandlerUtils.findMainFilesWithState("PGTD", null, this.plugin);
    let notaF, titulo = [];
    let padrePGTD;
    if (!this.nota.asuntoDefinido) {
      padrePGTD = await this.suggester(["Si", "No"], [true, false], false, `${this.nota.titulo} es hijo de un Proyecto GTD?`);
      if (padrePGTD) {
        notaF = await this.suggester(notasF.map((b) => b.titulo), notasF.map((b) => b), false, `\xBFQu\xE9 Proyecto GTD es padre de ${this.nota.titulo}?:`);
        if (notaF === null) {
          new import_obsidian31.Notice("Sin proyecto GTD definido.");
          return [];
        } else {
          this.nota.areaInteres = Array.isArray(notaF == null ? void 0 : notaF.areaInteres) ? notaF.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")) : (notaF == null ? void 0 : notaF.areaInteres) ? [notaF.areaInteres.replace(/\[\[\s*|\s*\]\]/g, "")] : [];
          this.nota.areaVida = (notaF == null ? void 0 : notaF.areaVida) ? Array.isArray(notaF.areaVida) ? notaF.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "") : notaF.areaVida.replace(/\[\[\s*|\s*\]\]/g, "") : "No es de ning\xFAn Area de Vida";
          this.nota.proyectoQ = Array.isArray(notaF == null ? void 0 : notaF.proyectoQ) ? notaF.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")) : (notaF == null ? void 0 : notaF.proyectoQ) ? [notaF.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "")] : [];
          titulo = [notaF.titulo];
          if (Array.isArray(notaF == null ? void 0 : notaF.proyectoGTD)) {
            titulo = titulo.concat(notaF.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
          } else if (notaF == null ? void 0 : notaF.proyectoGTD) {
            titulo.push(notaF.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
          }
          this.nota.asuntoDefinido = true;
          debugger;
          this.nota.nivelP = !isNaN(parseInt(notaF == null ? void 0 : notaF.nivelP)) ? parseInt(notaF.nivelP) + 1 : 0;
        }
      } else {
        titulo = [];
        this.nota.nivelP = 0;
      }
      return titulo;
    } else {
      return this.nota.proyectoGTD;
    }
  }
  async getRename() {
    let newName, folder;
    debugger;
    if (this.nota.areaVida === "No es de ning\xFAn Area de Vida") {
      newName = `${this.infoSubsistema.folder}/Otras/${this.infoSubsistema.type} - ${this.nota.id}.md`;
      folder = `${this.infoSubsistema.folder}/Otras`;
    } else {
      newName = `${this.infoSubsistema.folder}/${this.nota.areaVida}/${this.infoSubsistema.type} - ${this.nota.id}.md`;
      folder = `${this.infoSubsistema.folder}/${this.nota.areaVida}`;
    }
    await FieldHandlerUtils.crearCarpeta(folder);
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    try {
      if (existe instanceof import_obsidian31.TFile) {
        const nombreFile = newName.split("/");
        const borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [true, false],
          true,
          `\xBF${nombreFile.pop()} ya existe. Qu\xE9 deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian31.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            return newName;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian31.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          return newName;
        }
      }
    } catch (error) {
      console.error("Error al cambiar el nombre", error);
      throw error;
    }
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Estructura/PQFieldHandler.ts
var import_obsidian32 = require("obsidian");
var PQFieldHandler = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  async getAsunto() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D;
    let tipoSistema = this.infoSubsistema.type;
    let nombreSistema = this.infoSubsistema.typeName;
    let subsistemas, padres = [];
    let activo = app.workspace.getActiveFile();
    let siAsunto = false;
    let nombre = "";
    let nota;
    if (activo != null) {
      nombre = activo.basename;
      nota = app.metadataCache.getFileCache(activo);
      nota.frontmatter = nota.frontmatter || {};
      nota.frontmatter.file = {};
      Object.assign(nota.frontmatter.file, activo);
      padres.unshift(nombre);
      switch (tipoSistema) {
        case "RR":
        case "PGTD":
        case "Ax":
        case "Tx":
        case "CPE":
          siAsunto = await this.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
          if (siAsunto) {
            debugger;
            this.nota.asuntoDefinido = true;
            let nivel2;
            switch ((_a = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _a.type) {
              default:
              case "PGTD":
              case "PQ":
                if (((_b = nota.frontmatter) == null ? void 0 : _b.type) === "PQ") {
                  this.nota.proyectoQ = nombre;
                  this.nota.proyectoGTD = "";
                  if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                    this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
                  } else if (nota.frontmatter.proyectoGTD) {
                    this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                } else if (((_c = nota.frontmatter) == null ? void 0 : _c.type) === "PGTD") {
                  this.nota.proyectoGTD = [nombre];
                  if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                    this.nota.proyectoGTD = this.nota.proyectoGTD.concat(nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                  } else if (nota.frontmatter.proyectoGTD) {
                    this.nota.proyectoGTD.push(nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
                  }
                  this.nota.proyectoQ = "";
                  if (Array.isArray(nota.frontmatter.proyectoQ)) {
                    this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
                  } else if (nota.frontmatter.proyectoQ) {
                    this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                } else {
                  this.nota.proyectoQ = "";
                  if (Array.isArray((_d = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _d.proyectoQ)) {
                    this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
                  } else if ((_e = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _e.proyectoQ) {
                    this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                  this.nota.proyectoGTD = "";
                  if (Array.isArray((_f = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _f.proyectoGTD)) {
                    this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
                  } else if ((_g = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _g.proyectoGTD) {
                    this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                }
                this.nota.areaInteres = [];
                if (Array.isArray((_h = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _h.areaInteres)) {
                  this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                } else {
                  if ((_i = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _i.areaInteres) {
                    this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
                  }
                }
                this.nota.areaVida = "";
                if ((_j = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _j.areaVida) {
                  if (Array.isArray(nota.frontmatter.areaVida)) {
                    this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
                  } else if (typeof nota.frontmatter.areaVida === "string") {
                    this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                } else {
                  this.nota.areaVida = "No es de ning\xFAn Area de Vida";
                }
                if (!isNaN(parseInt((_k = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _k.nivelP))) {
                  nivel2 = parseInt(nota.frontmatter.nivelP) + 1;
                } else {
                  nivel2 = 0;
                }
                this.nota.nivelP = nivel2;
                break;
              case "AI":
                debugger;
                if (((_l = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _l.type) === "AI") {
                  this.nota.areaInteres = [nota.frontmatter.file.basename];
                }
                if (Array.isArray((_m = nota.frontmatter) == null ? void 0 : _m.areaInteres)) {
                  this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                } else {
                  if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
                    this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
                  } else {
                  }
                }
              case "AV":
                if ((_n = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _n.areaVida) {
                  if (Array.isArray(nota.frontmatter.areaVida)) {
                    this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
                  } else if (typeof nota.frontmatter.areaVida === "string") {
                    this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                } else {
                  this.nota.areaVida = "No es de ning\xFAn Area de Vida";
                }
                if (((_o = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _o.type) === "AI" || ((_p = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _p.type) === "AV") {
                  siAsunto = false;
                }
                if (!isNaN(parseInt((_q = nota.frontmatter) == null ? void 0 : _q.nivelP))) {
                  nivel2 = parseInt(nota.frontmatter.nivelP) + 1;
                } else {
                  nivel2 = 0;
                }
                this.nota.nivelP = nivel2;
                break;
            }
          } else {
          }
          break;
        case "PQ":
          siAsunto = await this.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
          if (siAsunto) {
            debugger;
            if (((_r = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _r.areaVida) !== void 0 && nota.frontmatter.areaVida !== "") {
              if (Array.isArray(nota.frontmatter.areaVida)) {
                this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
              } else if (typeof nota.frontmatter.areaVida === "string") {
                this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
              }
              if (((_s = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _s.type) === "AI" || ((_t = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _t.type) === "AV") {
                siAsunto = false;
              }
              let nivel2;
              switch ((_u = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _u.type) {
                case "PGTD":
                  this.nota.proyectoGTD = [nombre];
                  if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                    this.nota.proyectoGTD = this.nota.proyectoGTD.concat(nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                  } else if (nota.frontmatter.proyectoGTD) {
                    this.nota.proyectoGTD.push(nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
                  }
                case "AI":
                  if (((_v = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _v.type) === "AI") {
                    this.nota.areaInteres = [nota.frontmatter.file.basename];
                  } else {
                    this.nota.areaInteres = [];
                  }
                  if (Array.isArray((_w = nota.frontmatter) == null ? void 0 : _w.areaInteres)) {
                    this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                  } else {
                    if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
                      this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
                    } else {
                      this.nota.areaInteres = "";
                    }
                  }
                case "AV":
                case "nAV":
                  if (!isNaN(parseInt((_x = nota.frontmatter) == null ? void 0 : _x.nivelP))) {
                    nivel2 = parseInt(nota.frontmatter.nivelP) + 1;
                  } else {
                    nivel2 = 0;
                  }
                  this.nota.nivelP = nivel2;
                  this.nota.asuntoDefinido = true;
                  break;
                default:
                  new import_obsidian32.Notice("Un Proyecto de Q solo puede iniciar de un AV, AI o PGTD. Asunto no definido.");
                  break;
              }
            } else {
              new import_obsidian32.Notice("Todos los proyectos de Q requieren Area de Vida. Asunto no definido.");
              siAsunto = false;
            }
          } else {
          }
          break;
        case "AI":
          let nivel;
          switch ((_y = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _y.type) {
            case "AI":
            case "AV":
            case "nAV":
              siAsunto = await this.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
              if (siAsunto) {
                this.nota.asuntoDefinido = true;
                if (((_z = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _z.type) === "AI") {
                  this.nota.areaInteres = [nota.frontmatter.file.basename];
                  if (Array.isArray(nota.frontmatter.areaInteres)) {
                    this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                  } else {
                    if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
                      this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
                    }
                  }
                }
                if ((_A = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _A.areaVida) {
                  if (Array.isArray(nota.frontmatter.areaVida)) {
                    this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
                  } else if (typeof nota.frontmatter.areaVida === "string") {
                    this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                } else {
                  this.nota.areaVida = "No es de ning\xFAn Area de Vida";
                }
                if (((_B = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _B.type) === "AI" || ((_C = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _C.type) === "AV") {
                  siAsunto = false;
                }
                if (!isNaN(parseInt((_D = nota.frontmatter) == null ? void 0 : _D.nivelAI))) {
                  nivel = parseInt(nota.frontmatter.nivelAI) + 1;
                } else {
                  nivel = 0;
                }
                this.nota.nivelAI = nivel;
              }
              break;
          }
          break;
        default:
          console.log("Dependiendo de la estructura, getAsunto deberia tener su clasificaci\xF3n. Aqui vas a tener un error.");
          break;
      }
    } else {
      siAsunto = false;
    }
    return { siAsunto, nombre: padres };
  }
  async getProyectoGTD() {
    let tipo = this.infoSubsistema.type;
    let notasF = await FieldHandlerUtils.findMainFilesWithState("PGTD", null, this.plugin);
    let notaF, titulo = [];
    let padrePGTD;
    if (!this.nota.asuntoDefinido) {
      padrePGTD = await this.suggester(["Si", "No"], [true, false], false, `${this.nota.titulo} es hijo de un Proyecto GTD?`);
      if (padrePGTD) {
        notaF = await this.suggester(notasF.map((b) => b.titulo), notasF.map((b) => b), false, `\xBFQu\xE9 Proyecto GTD es padre de ${this.nota.titulo}?:`);
        if (notaF === null) {
          new import_obsidian32.Notice("Sin proyecto GTD definido.");
          return [];
        } else {
          this.nota.areaInteres = Array.isArray(notaF == null ? void 0 : notaF.areaInteres) ? notaF.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")) : (notaF == null ? void 0 : notaF.areaInteres) ? [notaF.areaInteres.replace(/\[\[\s*|\s*\]\]/g, "")] : [];
          this.nota.areaVida = (notaF == null ? void 0 : notaF.areaVida) ? Array.isArray(notaF.areaVida) ? notaF.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "") : notaF.areaVida.replace(/\[\[\s*|\s*\]\]/g, "") : "No es de ning\xFAn Area de Vida";
          this.nota.proyectoQ = Array.isArray(notaF == null ? void 0 : notaF.proyectoQ) ? notaF.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")) : (notaF == null ? void 0 : notaF.proyectoQ) ? [notaF.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "")] : [];
          titulo = [notaF.titulo];
          if (Array.isArray(notaF == null ? void 0 : notaF.proyectoGTD)) {
            titulo = titulo.concat(notaF.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
          } else if (notaF == null ? void 0 : notaF.proyectoGTD) {
            titulo.push(notaF.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
          }
          this.nota.asuntoDefinido = true;
          debugger;
          this.nota.nivelP = !isNaN(parseInt(notaF == null ? void 0 : notaF.nivelP)) ? parseInt(notaF.nivelP) + 1 : 0;
        }
      } else {
        titulo = [];
        this.nota.nivelP = 0;
      }
      return titulo;
    } else {
      return this.nota.proyectoGTD;
    }
  }
  async getRename() {
    let newName, folder;
    debugger;
    let folderAV = Array.isArray(this.nota.areaVida) ? this.nota.areaVida[0] : this.nota.areaVida;
    newName = `${this.infoSubsistema.folder}/${this.nota.trimestre}/${folderAV}/${this.infoSubsistema.type} - ${this.nota.id}.md`;
    folder = `${this.infoSubsistema.folder}/${this.nota.trimestre}/${folderAV}`;
    await FieldHandlerUtils.crearCarpeta(folder);
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    try {
      if (existe instanceof import_obsidian32.TFile) {
        const nombreFile = newName.split("/");
        const borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [true, false],
          true,
          `\xBF${nombreFile.pop()} ya existe. Qu\xE9 deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian32.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            return newName;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian32.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          return newName;
        }
      }
    } catch (error) {
      console.error("Error al cambiar el nombre", error);
      throw error;
    }
  }
  async getTrimestre() {
    let tipoSistema = this.infoSubsistema.type;
    let nombreSistema = this.infoSubsistema.typeName;
    let trimestre;
    let trimestres = await FieldHandlerUtils.findMainFilesWithState("TQ", null, this.plugin);
    switch (tipoSistema) {
      case "AV":
      case "PQ":
        trimestre = await this.suggester(trimestres.map((b) => b.file.basename), trimestres.map((b) => b.file.basename), false, `Trimestre del ${nombreSistema}:`);
        break;
      case "OCA":
        trimestre = await this.suggester(
          ["Q1", "Q2", "Q3", "Q4"],
          [
            `${this.nota.a\u00F1o}-Q1`,
            `${this.nota.a\u00F1o}-Q2`,
            `${this.nota.a\u00F1o}-Q3`,
            `${this.nota.a\u00F1o}-Q4`
          ],
          true,
          `\xBFEn qu\xE9 trimestre del ${this.nota.a\u00F1o} consideras que se puede realizar ese objetivo?`
        );
        break;
      case "CTI":
        trimestre = await this.suggester(
          ["Q1", "Q2", "Q3", "Q4"],
          [
            `${this.nota.a\u00F1o}-Q1`,
            `${this.nota.a\u00F1o}-Q2`,
            `${this.nota.a\u00F1o}-Q3`,
            `${this.nota.a\u00F1o}-Q4`
          ],
          true,
          `\xBFDe qu\xE9 trimestre del ${this.nota.a\u00F1o} es esta planeaci\xF3n?`
        );
        break;
      default:
        trimestre = await this.suggester(trimestres.map((b) => b.file.basename), trimestres.map((b) => b.file.path), false, `Trimestre del ${nombreSistema}:`);
    }
    if (trimestre === null) {
      new import_obsidian32.Notice("Modificaci\xF3n de nota cancelada por el usuario.");
      return;
    }
    this.nota.trimestre = trimestre;
    return trimestre;
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/AnotacionesFieldHandler.ts
var import_obsidian33 = require("obsidian");
var AnotacionesFieldHandler = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
    this.pathCampos = this.plugin.settings.file_camposCentral + ".md";
  }
  async getClasificacion() {
    var _a;
    let clasificacion2 = null;
    let tagClasificacion2 = null;
    let clasificacionAX = {};
    let tagsClasificacionAX = [];
    let nuevaClasificacion2 = false;
    const file = app.vault.getAbstractFileByPath(this.pathCampos);
    if (!file) {
      new import_obsidian33.Notice("Archivo no encontrado.");
      return;
    }
    const frontmatter = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    if (frontmatter) {
      clasificacionAX = frontmatter.tituloClasificacionAX || [];
      tagsClasificacionAX = frontmatter.tagsClasificacionAX || [];
      const suggester = this.tp.system.static_functions.get("suggester");
      tagClasificacion2 = await suggester(clasificacionAX, tagsClasificacionAX, false, "\xBFClasificar\xEDas esta nota bajo alguna de las siguientes categor\xEDas?");
      if (tagClasificacion2 === null) {
        new import_obsidian33.Notice("Creaci\xF3n de nota cancelada por el usuario.");
        return;
      } else if (tagClasificacion2 === "Nuevo") {
        const prompt = this.tp.system.static_functions.get("prompt");
        clasificacion2 = await prompt("\xBFCual es el nombre de la nueva clasificaci\xF3n que vas a ingresar?", "MiClasificaci\xF3n", true);
        if (clasificacion2 === null) {
          new import_obsidian33.Notice("Creaci\xF3n de nota cancelada por el usuario.");
          return;
        }
        tagClasificacion2 = await prompt("\xBFCual es el tag que utilizaras para " + clasificacion2 + "?. No utilices espacios en la definici\xF3n del tag.", "nuevoTag", true);
        if (tagClasificacion2 === null) {
          new import_obsidian33.Notice("Creaci\xF3n de nota cancelada por el usuario.");
          return;
        }
        nuevaClasificacion2 = true;
      } else if (tagClasificacion2 === "Ninguna") {
        tagClasificacion2 = "";
        clasificacion2 = "";
      } else {
        const indice = tagsClasificacionAX.indexOf(tagClasificacion2);
        clasificacion2 = clasificacionAX[indice];
      }
    }
    if (nuevaClasificacion2) {
      try {
        await app.fileManager.processFrontMatter(file, (frontmatter2) => {
          const newClasificacion = [...clasificacionAX, clasificacion2];
          const newTagClasificacion = [...tagsClasificacionAX, tagClasificacion2];
          frontmatter2.tituloClasificacionAX = newClasificacion;
          frontmatter2.tagsClasificacionAX = newTagClasificacion;
          console.log("Frontmatter actualizado con \xE9xito");
        });
      } catch (err) {
        console.error("Error al actualizar el frontmatter", err);
      }
    }
    if (tagClasificacion2 !== "") {
      tagClasificacion2 = "cl/" + tagClasificacion2;
    }
    this.nota.clasificacionAX = clasificacion2;
    this.nota.tagClasificacionAX = tagClasificacion2;
    return { clase: clasificacion2, tag: tagClasificacion2 };
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/TransaccionesFieldHandler.ts
var import_obsidian34 = require("obsidian");
var TransaccionesFieldHandler = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  async getFecha() {
    let fecha;
    let fechaOriginal = await this.prompt(`Confirma la fecha de la transacci\xF3n: `, `${moment().format("YYYY-MM-DD HH:mm")}`, true);
    let fechaMoment = moment(fechaOriginal, "YYYY-MM-DD HH:mm");
    fecha = fechaMoment.format("YYYY-MM-DD dddd HH:mm");
    this.nota.fecha = fecha;
    return fecha;
  }
  async getRename() {
    debugger;
    let fecha = moment(this.nota.fecha, "YYYY-MM-DD dddd HH:mm");
    let fechaY = fecha.format("YYYY");
    let fechaMes = fecha.format("MM - MMMM");
    const newName = `${this.infoSubsistema.folder}/${fechaY}/${fechaMes}/${this.infoSubsistema.type} - ${this.nota.id}.md`;
    const folder = `${this.infoSubsistema.folder}/${fechaY}/${fechaMes}`;
    await FieldHandlerUtils.crearCarpeta(folder);
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    try {
      if (existe instanceof import_obsidian34.TFile) {
        const nombreFile = newName.split("/");
        const borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [true, false],
          true,
          `\xBF${nombreFile.pop()} ya existe. Qu\xE9 deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian34.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            return newName;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian34.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          return newName;
        }
      }
    } catch (error) {
      console.error("Error al cambiar el nombre", error);
      throw error;
    }
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Estructura/AreasInteresFieldHandler.ts
var import_obsidian35 = require("obsidian");
var AreasInteresFieldHandler = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  async getAsunto() {
    var _a, _b, _c, _d, _e;
    let tipoSistema = this.infoSubsistema.type;
    let padres = [];
    let activo = app.workspace.getActiveFile();
    let siAsunto = false;
    let nombre = "";
    let nota;
    if (activo != null) {
      nombre = activo.basename;
      nota = app.metadataCache.getFileCache(activo);
      nota.frontmatter = nota.frontmatter || {};
      nota.frontmatter.file = {};
      Object.assign(nota.frontmatter.file, activo);
      padres.unshift(nombre);
      let nivel;
      siAsunto = await this.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
      if (siAsunto) {
        this.nota.asuntoDefinido = true;
        if (((_a = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _a.type) === "AI") {
          this.nota.areaInteres = [nota.frontmatter.file.basename];
          if (Array.isArray(nota.frontmatter.areaInteres)) {
            this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
          } else {
            if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
              this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
            }
          }
        }
        if ((_b = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _b.areaVida) {
          if (Array.isArray(nota.frontmatter.areaVida)) {
            this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
          } else if (typeof nota.frontmatter.areaVida === "string") {
            this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
          }
        } else {
          this.nota.areaVida = "No es de ning\xFAn Area de Vida";
        }
        if (((_c = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _c.type) === "AI" || ((_d = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _d.type) === "AV") {
          siAsunto = false;
        }
        if (!isNaN(parseInt((_e = nota.frontmatter) == null ? void 0 : _e.nivelAI))) {
          nivel = parseInt(nota.frontmatter.nivelAI) + 1;
        } else {
          nivel = 0;
        }
        this.nota.nivelAI = nivel;
      }
    } else {
      siAsunto = false;
    }
    return { siAsunto, nombre: padres };
  }
  async getAliases() {
    this.nota.aliases = [];
    this.nota.aliases.push(`${this.infoSubsistema.type}/${this.nota.titulo}`);
    debugger;
    if (this.nota.areaVida != "No es de ning\xFAn Area de Vida") {
      this.nota.aliases.push(`${this.infoSubsistema.type}/${this.nota.areaVida}/${this.nota.titulo}`);
    }
    return this.nota.aliases;
  }
  async getRename() {
    let newName, folder;
    debugger;
    if (this.nota.areaVida === "No es de ning\xFAn Area de Vida") {
      newName = `${this.infoSubsistema.folder}/Otras/${this.infoSubsistema.type} - ${this.nota.id}.md`;
      folder = `${this.infoSubsistema.folder}/Otras`;
    } else {
      newName = `${this.infoSubsistema.folder}/${this.nota.areaVida}/${this.infoSubsistema.type} - ${this.nota.id}.md`;
      folder = `${this.infoSubsistema.folder}/${this.nota.areaVida}`;
    }
    await FieldHandlerUtils.crearCarpeta(folder);
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    try {
      if (existe instanceof import_obsidian35.TFile) {
        const nombreFile = newName.split("/");
        const borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [true, false],
          true,
          `\xBF${nombreFile.pop()} ya existe. Qu\xE9 deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian35.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            return newName;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian35.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          return newName;
        }
      }
    } catch (error) {
      console.error("Error al cambiar el nombre", error);
      throw error;
    }
  }
  async getAreaInteres() {
    let nombreTipo = this.infoSubsistema.typeName;
    let areasInteres = await FieldHandlerUtils.findMainFilesWithState("AI", null, this.plugin);
    let areaInteres, nivel, titulo, padreAI, arrayAI;
    if (!this.nota.asuntoDefinido) {
      padreAI = await this.suggester(["Si", "No"], [true, false], false, ` ${this.nota.titulo} es hijo de otra ${nombreTipo}:`);
      if (padreAI) {
        areaInteres = await this.suggester(areasInteres.map((b) => b.titulo), areasInteres.map((b) => b), false, `Que Area de Inter\xE9s es padre de ${this.nota.titulo}?:`);
        if (areaInteres === null) {
          new import_obsidian35.Notice("Sin Area de Interes");
          titulo = "";
          nivel = 0;
          return;
        } else {
          this.nota.asuntoDefinido = true;
          if (areaInteres.areaVida === null) {
            this.nota.areaVida = "No es de ning\xFAn Area de Vida";
          } else {
            debugger;
            this.nota.areaVida = areaInteres.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
          }
          titulo = areaInteres.titulo;
          nivel = parseInt(areaInteres.nivelAI) + 1;
        }
      } else {
        titulo = "";
        nivel = 0;
      }
      this.nota.nivelAI = nivel;
      return titulo;
    } else {
      return this.nota.areaInteres;
    }
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Estructura/AreaVidaFieldHandler.ts
var import_obsidian36 = require("obsidian");
var AreaVidaFieldHandler = class extends NoteFieldHandlerBase {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
    this.pathCampos = this.plugin.settings.file_camposCentral + ".md";
  }
  async getArea() {
    let area, grupo;
    let tipoArea = this.infoSubsistema.typeName;
    let nuevaArea = false;
    let areasGrupos = this.getDuplasFijas(app, tipoArea);
    let areaGrupo = await this.suggester(areasGrupos.map((b) => b.texto), areasGrupos.map((b) => b.texto), false, `\xBFCu\xE1l ${tipoArea} deseas crear?`);
    if (areaGrupo === null) {
      new import_obsidian36.Notice("Creaci\xF3n de nota cancelada por el usuario.");
      return;
    } else if (areaGrupo == "Nuevo") {
      clasificacion = await this.prompt("\xBFCual es el nombre de la nueva clasificaci\xF3n que vas a ingresar?", "MiClasificaci\xF3n", true);
      if (clasificacion === null) {
        new import_obsidian36.Notice("Creaci\xF3n de nota cancelada por el usuario.");
        return;
      }
      tagClasificacion = await this.prompt("\xBFCual es el tag que utilizaras para " + clasificacion + "?. No utilices espacios en la definici\xF3n del tag.", "nuevoTag", true);
      if (tagClasificacion === null) {
        new import_obsidian36.Notice("Creaci\xF3n de nota cancelada por el usuario.");
        return;
      }
      nuevaClasificacion = true;
    } else {
      let indice = areasGrupos.findIndex((objeto) => objeto.texto === areaGrupo);
      grupo = areasGrupos[indice].grupo;
      area = areasGrupos[indice].area;
      this.nota.grupo = grupo;
      this.nota.titulo = area;
      return { grupo, titulo: area };
    }
  }
  getDuplasFijas(app2, area) {
    var _a;
    const file = app2.vault.getAbstractFileByPath(this.pathCampos);
    try {
      if (file instanceof import_obsidian36.TFile) {
        const metadata = app2.metadataCache.getFileCache(file);
        const arregloResult = ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a[area]) || [];
        const resultado = [];
        if (Array.isArray(arregloResult)) {
          arregloResult.forEach((item) => {
            if (Array.isArray(item) && item.length >= 2) {
              resultado.push({ grupo: item[0], area: item[1], texto: item[0] + "/" + item[1] });
            }
          });
        }
        return resultado;
      }
    } catch (error) {
      console.error("Error obteniendo el archivo de campos:", error);
      throw error;
    }
    return [];
  }
  async getFilename() {
    let fileName;
    if (this.infoSubsistema.hasOwnProperty("fileName")) {
      const partes = this.infoSubsistema.fileName.split(" -- ");
      this.nota.trimestre = partes[0];
      this.nota.titulo = partes[1];
      this.nota.areaVida = partes[1];
      this.nota.grupo = partes[2];
    }
    fileName = `${this.nota.trimestre} - ${this.nota.titulo}`;
    this.nota.filename = fileName;
    return fileName;
  }
  async getTrimestre() {
    let tipoSistema = this.infoSubsistema.type;
    let nombreSistema = this.infoSubsistema.typeName;
    let trimestre;
    let trimestres = await FieldHandlerUtils.findMainFilesWithState("TQ", null, this.plugin);
    trimestre = await this.suggester(trimestres.map((b) => b.file.basename), trimestres.map((b) => b.file.basename), false, `Trimestre del ${nombreSistema}:`);
    if (trimestre === null) {
      new import_obsidian36.Notice("Modificaci\xF3n de nota cancelada por el usuario.");
      return;
    }
    this.nota.trimestre = trimestre;
    return trimestre;
  }
  async getNota() {
    return this.nota;
  }
  async getRename() {
    debugger;
    let newName, name, folder;
    newName = `${this.infoSubsistema.folder}/${this.nota.titulo}/${this.nota.filename}.md`;
    folder = `${this.infoSubsistema.folder}/${this.nota.titulo}/`;
    await FieldHandlerUtils.crearCarpeta(folder);
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    debugger;
    try {
      if (existe instanceof import_obsidian36.TFile) {
        let nombreFile = newName == null ? void 0 : newName.split("/");
        let borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [
            true,
            false
          ],
          true,
          `\xBF${nombreFile.pop()} ya existe. Que deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian36.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            return true;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian36.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          return true;
        }
      }
    } catch (error) {
      console.error(error);
      throw error;
    }
  }
  async getDescripcion() {
    const descripcion = await this.prompt(`Descripci\xF3n del ${this.infoSubsistema.typeName}:`, "", false, true);
    this.nota.descripcion = descripcion;
    return descripcion;
  }
  async getAliases() {
    this.nota.aliases = [];
    this.nota.aliases.push(`${this.infoSubsistema.type}/${this.nota.trimestre}/${this.nota.titulo}`);
    this.nota.aliases.push(`${this.infoSubsistema.type}/${this.nota.grupo}/${this.nota.trimestre}/${this.nota.titulo}`);
    return this.nota.aliases;
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Estructura/nodoAreaVidaFieldHandler.ts
var import_obsidian37 = require("obsidian");
var nodoAreaVidaFieldHandler = class extends NoteFieldHandlerBase {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
    this.pathCampos = this.plugin.settings.file_camposCentral + ".md";
  }
  async getId() {
    let maxId = 0;
    const files = app.vault.getMarkdownFiles();
    let registrosExistentes = files.filter((file) => file.path.startsWith(this.infoSubsistema.folder));
    registrosExistentes.forEach((file) => {
      var _a;
      const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if (metadata && metadata.id && !isNaN(metadata.id) && metadata.type && metadata.type === this.infoSubsistema.type) {
        const id = parseInt(metadata.id);
        if (id > maxId)
          maxId = id;
      }
    });
  }
  async getRename() {
    debugger;
    const file = this.tp.file.config.target_file;
    const partes = file.basename.split(" - ");
    this.nota.grupo = partes[0];
    this.nota.areaVida = partes[1];
    const fullPath = file.path;
    const directoryPath = fullPath.substring(0, fullPath.lastIndexOf("/") + 1);
    const fileName = `${directoryPath}${partes[1]}.md`;
    debugger;
    let newName, folder;
    const existe = app.vault.getAbstractFileByPath(fileName);
    debugger;
    try {
      if (existe instanceof import_obsidian37.TFile) {
        let nombreFile = newName == null ? void 0 : newName.split("/");
        let borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [
            true,
            false
          ],
          true,
          `\xBF${nombreFile.pop()} ya existe. Que deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian37.TFile) {
            await app.vault.rename(file, fileName);
            console.log("Archivo renombrado con \xE9xito.");
            return true;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian37.TFile) {
          await app.vault.rename(file, fileName);
          console.log("Archivo renombrado con \xE9xito.");
          return true;
        }
      }
    } catch (error) {
      console.error(error);
      throw error;
    }
  }
  async getNota() {
    return this.nota;
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/ObjCompassAnualFieldHandler.ts
var import_obsidian38 = require("obsidian");
var ObjCompassAnualFieldHandler = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  async getEstado() {
    return "\u{1F7E1}";
  }
  async getAreaVida() {
    let areaVida;
    if (!this.nota.asuntoDefinido) {
      let nombreArchivo = this.infoSubsistema.fileName;
      const regex = /Objetivo para (.+)\.md$/;
      const resultado = nombreArchivo.match(regex);
      if (resultado && resultado[1]) {
        areaVida = resultado[1];
      } else {
        return null;
      }
      this.nota.areaVida = areaVida;
      return areaVida;
    } else {
      return this.nota.areaVida;
    }
  }
  async getTitulo() {
    let titulo;
    titulo = await this.prompt(`Cual es tu objetivo en ${this.nota.a\u00F1o} para ${this.nota.areaVida}?`, `Voy a `, true, true);
    if (titulo === null) {
      new Notice("Creaci\xF3n de nota cancelada por el usuario.");
      return;
    }
    this.nota.titulo = titulo;
    return titulo;
  }
  async getA\u00F1o() {
    let suggester = this.tp.system.static_functions.get("suggester");
    let tipoSistema = this.infoSubsistema.type;
    let nombreSistema = this.infoSubsistema.typeName;
    let a\u00F1o;
    let a\u00F1os = await FieldHandlerUtils.findMainFilesWithState("AY", null, this.plugin);
    let nombreArchivo = this.infoSubsistema.fileName;
    const regex = /\/(\d{4})/;
    const resultado = nombreArchivo.match(regex);
    if (resultado && resultado[1]) {
      a\u00F1o = resultado[1];
    } else {
      return null;
    }
    if (a\u00F1o === null) {
      new Notice("Creaci\xF3n cancelada por el usuario.");
      return;
    }
    this.nota.a\u00F1o = a\u00F1o;
    return a\u00F1o;
  }
  async getDescripcion() {
    const descripcion = await this.prompt(`\xBFQuieres agregar detalles de tu objetivo?`, "", false, true);
    this.nota.descripcion = descripcion;
    return descripcion;
  }
  async getTrimestre() {
    let trimestre;
    let trimestres = await FieldHandlerUtils.findMainFilesWithState("TQ", null, this.plugin);
    trimestre = await this.suggester(
      ["Q1", "Q2", "Q3", "Q4"],
      [
        `${this.nota.a\u00F1o}-Q1`,
        `${this.nota.a\u00F1o}-Q2`,
        `${this.nota.a\u00F1o}-Q3`,
        `${this.nota.a\u00F1o}-Q4`
      ],
      true,
      `\xBFEn qu\xE9 trimestre del ${this.nota.a\u00F1o} consideras que se puede realizar ese objetivo?`
    );
    if (trimestre === null) {
      new Notice("Modificaci\xF3n de nota cancelada por el usuario.");
      return;
    }
    this.nota.trimestre = trimestre;
    return trimestre;
  }
  async getAliases() {
    this.nota.aliases = [];
    this.nota.aliases.push(`${this.infoSubsistema.type}/${this.nota.a\u00F1o}/${this.nota.id}`);
    this.nota.aliases.push(`${this.infoSubsistema.type}/${this.nota.a\u00F1o}/${this.nota.areaVida}/${this.nota.id}`);
    this.nota.aliases.push(`${this.infoSubsistema.type}/${this.nota.titulo}`);
    return this.nota.aliases;
  }
  async getRename() {
    let folder = `${this.infoSubsistema.folder}/${this.nota.a\u00F1o}`;
    const newName = `${this.infoSubsistema.folder}/${this.nota.a\u00F1o}/${this.infoSubsistema.type} - ${this.nota.id}.md`;
    await FieldHandlerUtils.crearCarpeta(folder);
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    try {
      if (existe instanceof import_obsidian38.TFile) {
        const nombreFile = newName.split("/");
        const borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [true, false],
          true,
          `\xBF${nombreFile.pop()} ya existe. Qu\xE9 deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian38.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            return newName;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian38.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          return newName;
        }
      }
    } catch (error) {
      console.error("Error al cambiar el nombre", error);
      throw error;
    }
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/CompassPlaneacionAnual_FH.ts
var import_obsidian39 = require("obsidian");
var CompassPlaneacionAnual_FH = class extends NoteFieldHandlerBase {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  async getA\u00F1o() {
    let nombreSistema = this.infoSubsistema.typeName;
    let a\u00F1o;
    let a\u00F1os = await FieldHandlerUtils.findMainFilesWithState("AY", null, this.plugin);
    a\u00F1o = await this.suggester(a\u00F1os.map((b) => b.file.basename), a\u00F1os.map((b) => b.file.basename), false, `Selecciona el a\xF1o que deseas para el ${nombreSistema}:`);
    if (a\u00F1o === null) {
      new import_obsidian39.Notice("Creaci\xF3n cancelada por el usuario.");
      return;
    }
    this.nota.a\u00F1o = a\u00F1o;
    return a\u00F1o;
  }
  async getNota() {
    return this.nota;
  }
  async getAliases() {
    this.nota.aliases = [];
    this.nota.aliases.push(`${this.infoSubsistema.typeName}/${this.nota.a\u00F1o}`);
    this.nota.aliases.push(`${this.infoSubsistema.typeName}/${this.nota.id}`);
    return this.nota.aliases;
  }
  async getRename() {
    let folder = `${this.infoSubsistema.folder}/${this.nota.a\u00F1o}`;
    const newName = `${this.infoSubsistema.folder}/${this.nota.a\u00F1o}/Planeaci\xF3n ${this.nota.a\u00F1o}.md`;
    await FieldHandlerUtils.crearCarpeta(folder);
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    try {
      if (existe instanceof import_obsidian39.TFile) {
        const nombreFile = newName.split("/");
        const borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [true, false],
          true,
          `\xBF${nombreFile.pop()} ya existe. Qu\xE9 deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian39.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            return newName;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian39.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          return newName;
        }
      }
    } catch (error) {
      console.error("Error al cambiar el nombre", error);
      throw error;
    }
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/RepositorioLibros_FH.ts
var import_obsidian40 = require("obsidian");
var RepositorioLibros_FH = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  async getDescripcion() {
    const descripcion = await this.prompt(`\xBFPorque est\xE1s agregando este libro?:`, "", false, true);
    this.nota.descripcion = descripcion;
    return descripcion;
  }
  async getEstado() {
    let estado;
    estado = await this.suggester(["\u{1F535} -> Para Archivo - Leido", "\u{1F7E2} -> En Lectura - Comprado", "\u{1F7E1} -> Por Adquirir", "\u{1F534} -> Cancelado"], ["\u{1F535}", "\u{1F7E2}", "\u{1F7E1}", "\u{1F534}"], false, `En que estado est\xE1 este libro?`);
    if (estado === null) {
      new import_obsidian40.Notice("Creaci\xF3n de Libro cancelada por el usuario.");
      return;
    }
    return estado;
  }
  async getTitulo() {
    const titulo = this.infoSubsistema.titulo;
    this.nota.titulo = titulo;
    return titulo;
  }
  async getAsunto() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q;
    let padres = [];
    let activo = this.infoSubsistema.activo;
    let siAsunto = false;
    let nombre = "";
    let nota;
    if (activo != null) {
      nombre = activo.basename;
      nota = app.metadataCache.getFileCache(activo);
      nota.frontmatter = nota.frontmatter || {};
      nota.frontmatter.file = {};
      Object.assign(nota.frontmatter.file, activo);
      padres.unshift(nombre);
      siAsunto = await this.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
      if (siAsunto) {
        debugger;
        this.nota.asuntoDefinido = true;
        let nivel;
        switch ((_a = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _a.type) {
          default:
          case "PGTD":
          case "PQ":
            if (((_b = nota.frontmatter) == null ? void 0 : _b.type) === "PQ") {
              this.nota.proyectoQ = nombre;
              this.nota.proyectoGTD = "";
              if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if (nota.frontmatter.proyectoGTD) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else if (((_c = nota.frontmatter) == null ? void 0 : _c.type) === "PGTD") {
              this.nota.proyectoGTD = [nombre];
              if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                this.nota.proyectoGTD = this.nota.proyectoGTD.concat(nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
              } else if (nota.frontmatter.proyectoGTD) {
                this.nota.proyectoGTD.push(nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
              }
              this.nota.proyectoQ = "";
              if (Array.isArray(nota.frontmatter.proyectoQ)) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if (nota.frontmatter.proyectoQ) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.proyectoQ = "";
              if (Array.isArray((_d = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _d.proyectoQ)) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if ((_e = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _e.proyectoQ) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
              }
              this.nota.proyectoGTD = "";
              if (Array.isArray((_f = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _f.proyectoGTD)) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if ((_g = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _g.proyectoGTD) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            }
            this.nota.areaInteres = [];
            if (Array.isArray((_h = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _h.areaInteres)) {
              this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
            } else {
              if ((_i = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _i.areaInteres) {
                this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
              }
            }
            this.nota.areaVida = "";
            if ((_j = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _j.areaVida) {
              if (Array.isArray(nota.frontmatter.areaVida)) {
                this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
              } else if (typeof nota.frontmatter.areaVida === "string") {
                this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.areaVida = "No es de ning\xFAn Area de Vida";
            }
            if (!isNaN(parseInt((_k = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _k.nivelP))) {
              nivel = parseInt(nota.frontmatter.nivelP) + 1;
            } else {
              nivel = 0;
            }
            this.nota.nivelP = nivel;
            break;
          case "AI":
            debugger;
            if (((_l = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _l.type) === "AI") {
              this.nota.areaInteres = [nota.frontmatter.file.basename];
            }
            if (Array.isArray((_m = nota.frontmatter) == null ? void 0 : _m.areaInteres)) {
              this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
            } else {
              if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
                this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else {
              }
            }
          case "AV":
            if ((_n = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _n.areaVida) {
              if (Array.isArray(nota.frontmatter.areaVida)) {
                this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
              } else if (typeof nota.frontmatter.areaVida === "string") {
                this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.areaVida = "No es de ning\xFAn Area de Vida";
            }
            if (((_o = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _o.type) === "AI" || ((_p = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _p.type) === "AV") {
              siAsunto = false;
            }
            if (!isNaN(parseInt((_q = nota.frontmatter) == null ? void 0 : _q.nivelP))) {
              nivel = parseInt(nota.frontmatter.nivelP) + 1;
            } else {
              nivel = 0;
            }
            this.nota.nivelP = nivel;
            break;
        }
      } else {
      }
    } else {
      siAsunto = false;
    }
    return { siAsunto, nombre: padres };
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/Biblioteca_FH.ts
var import_obsidian41 = require("obsidian");
var Biblioteca_FH = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  async getParametrosLibro() {
    let archivoActivo = app.workspace.getActiveFile();
    if (!archivoActivo) {
      console.error("No se pudo obtener el archivo activo.");
      return null;
    }
    debugger;
    const campos = ["id", "titulo", "autor", "publisher", "publicado", "paginas", "isbn10", "isbn13"];
    let parametros = {};
    for (let campo of campos) {
      let valorCampo = await this.getFrontmatterField(archivoActivo.path, campo);
      this.nota[campo] = valorCampo;
      parametros[campo] = valorCampo;
    }
    return parametros;
  }
  async getFrontmatterField(file, field) {
    try {
      const tFile = app.vault.getAbstractFileByPath(file);
      if (tFile instanceof import_obsidian41.TFile) {
        const cache = app.metadataCache.getFileCache(tFile);
        const frontmatter = cache == null ? void 0 : cache.frontmatter;
        if (frontmatter && frontmatter.hasOwnProperty(field)) {
          const fieldValue = frontmatter[field];
          return fieldValue !== void 0 && fieldValue !== null && fieldValue !== "" ? fieldValue : null;
        } else {
          console.log(`El campo '${field}' no existe en el frontmatter.`);
          return null;
        }
      } else {
        console.error("El archivo no existe o no es un archivo de texto.");
        return null;
      }
    } catch (err) {
      console.error("Error al consultar el frontmatter", err);
      return null;
    }
  }
  async getFormato() {
    let campo;
    campo = await this.suggester(["Kindle", "Google Books", "PDF", "F\xEDsico"], ["Kindle", "Google Books", "PDF", "F\xEDsico"], false, `\xBFComo tienes este libro?`);
    if (campo === null) {
      new import_obsidian41.Notice("Creaci\xF3n de Libro cancelada por el usuario.");
      return;
    }
    return campo;
  }
  async getPaginas() {
    let campo, paginas;
    campo = await this.suggester(["Si", "No"], [true, false], false, `\xBFEl libro tiene ${this.nota.paginas} p\xE1ginas?`);
    if (campo === null) {
      new import_obsidian41.Notice("Creaci\xF3n de Libro cancelada por el usuario.");
      return;
    } else if (campo === false) {
      paginas = await this.prompt(`Cuantas p\xE1ginas tiene el libro?`, "", false, false);
      this.nota.paginas = paginas;
      return paginas;
    }
    return this.nota.paginas;
  }
  async getAsunto() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q;
    let padres = [];
    let activo = app.workspace.getActiveFile();
    let siAsunto = false;
    let nombre = "";
    let nota;
    if (activo != null) {
      nombre = activo.basename;
      nota = app.metadataCache.getFileCache(activo);
      nota.frontmatter = nota.frontmatter || {};
      nota.frontmatter.file = {};
      Object.assign(nota.frontmatter.file, activo);
      padres.unshift(nombre);
      siAsunto = true;
      if (siAsunto) {
        debugger;
        this.nota.asuntoDefinido = true;
        let nivel;
        switch ((_a = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _a.type) {
          default:
          case "PGTD":
          case "PQ":
            if (((_b = nota.frontmatter) == null ? void 0 : _b.type) === "PQ") {
              this.nota.proyectoQ = nombre;
              this.nota.proyectoGTD = "";
              if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if (nota.frontmatter.proyectoGTD) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else if (((_c = nota.frontmatter) == null ? void 0 : _c.type) === "PGTD") {
              this.nota.proyectoGTD = [nombre];
              if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                this.nota.proyectoGTD = this.nota.proyectoGTD.concat(nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
              } else if (nota.frontmatter.proyectoGTD) {
                this.nota.proyectoGTD.push(nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
              }
              this.nota.proyectoQ = "";
              if (Array.isArray(nota.frontmatter.proyectoQ)) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if (nota.frontmatter.proyectoQ) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.proyectoQ = "";
              if (Array.isArray((_d = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _d.proyectoQ)) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if ((_e = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _e.proyectoQ) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
              }
              this.nota.proyectoGTD = "";
              if (Array.isArray((_f = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _f.proyectoGTD)) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if ((_g = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _g.proyectoGTD) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            }
            this.nota.areaInteres = [];
            if (Array.isArray((_h = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _h.areaInteres)) {
              this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
            } else {
              if ((_i = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _i.areaInteres) {
                this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
              }
            }
            this.nota.areaVida = "";
            if ((_j = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _j.areaVida) {
              if (Array.isArray(nota.frontmatter.areaVida)) {
                this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
              } else if (typeof nota.frontmatter.areaVida === "string") {
                this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.areaVida = "No es de ning\xFAn Area de Vida";
            }
            if (!isNaN(parseInt((_k = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _k.nivelP))) {
              nivel = parseInt(nota.frontmatter.nivelP) + 1;
            } else {
              nivel = 0;
            }
            this.nota.nivelP = nivel;
            break;
          case "AI":
            debugger;
            if (((_l = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _l.type) === "AI") {
              this.nota.areaInteres = [nota.frontmatter.file.basename];
            }
            if (Array.isArray((_m = nota.frontmatter) == null ? void 0 : _m.areaInteres)) {
              this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
            } else {
              if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
                this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else {
              }
            }
          case "AV":
            if ((_n = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _n.areaVida) {
              if (Array.isArray(nota.frontmatter.areaVida)) {
                this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
              } else if (typeof nota.frontmatter.areaVida === "string") {
                this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.areaVida = "No es de ning\xFAn Area de Vida";
            }
            if (((_o = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _o.type) === "AI" || ((_p = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _p.type) === "AV") {
              siAsunto = false;
            }
            if (!isNaN(parseInt((_q = nota.frontmatter) == null ? void 0 : _q.nivelP))) {
              nivel = parseInt(nota.frontmatter.nivelP) + 1;
            } else {
              nivel = 0;
            }
            this.nota.nivelP = nivel;
            break;
        }
      } else {
      }
    } else {
      siAsunto = false;
    }
    return { siAsunto, nombre: padres };
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Journals/Anual_FH.ts
var import_obsidian42 = require("obsidian");
init_luxon();

// src/modules/noteLifecycleManager/fieldHandlers/FH Journals/TrimestralFieldHandler.ts
var import_obsidian43 = require("obsidian");
init_luxon();

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/CampañasFieldHandler.ts
var import_obsidian44 = require("obsidian");
init_luxon();
var Campa\u00F1asFieldHandler = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  // Obtiene el trimestre de la campaña desde las notas de trimestres existentes
  async getTrimestre() {
    let trimestres = await FieldHandlerUtils.findMainFilesWithState("TQ", null, this.plugin);
    const trimestre = await this.suggester(
      trimestres.map((b) => b.file.basename),
      trimestres.map((b) => b.file.basename),
      false,
      "Trimestre al que pertenece esta campa\xF1a:"
    );
    if (trimestre === null) {
      new import_obsidian44.Notice("Selecci\xF3n de trimestre cancelada.");
      return;
    }
    this.nota.trimestre = `[[${trimestre}]]`;
    return this.nota.trimestre;
  }
  // Obtiene el estado de la campaña (status)
  async getStatus() {
    const estados = [
      "Pendiente",
      "Planificando",
      "Dise\xF1o",
      "Revisi\xF3n Interna",
      "Revisi\xF3n Cliente",
      "Publicando",
      "Recoger Indicadores",
      "En pausa",
      "Terminado",
      "Cancelado"
    ];
    const status = await this.suggester(
      estados,
      estados,
      false,
      "Estado actual de la campa\xF1a:"
    );
    if (status === null) {
      new import_obsidian44.Notice("Selecci\xF3n de estado cancelada.");
      return;
    }
    this.nota.status = status;
    return status;
  }
  // Obtiene la fecha de inicio de la campaña
  async getFechaInicio() {
    const fechaActual = DateTime.now().toFormat("yyyy-MM-dd");
    const prompt = this.tp.system.static_functions.get("prompt");
    const fechaInicio = await prompt(
      "Fecha de inicio de la campa\xF1a (YYYY-MM-DD):",
      fechaActual,
      true
    );
    if (fechaInicio === null) {
      new import_obsidian44.Notice("Selecci\xF3n de fecha de inicio cancelada.");
      return;
    }
    this.nota.fechaInicio = fechaInicio;
    return fechaInicio;
  }
  // Obtiene la fecha de fin de la campaña
  async getFechaFin() {
    const fechaInicioObj = this.nota.fechaInicio ? DateTime.fromFormat(this.nota.fechaInicio, "yyyy-MM-dd") : DateTime.now();
    const fechaSugerida = fechaInicioObj.plus({ days: 30 }).toFormat("yyyy-MM-dd");
    const prompt = this.tp.system.static_functions.get("prompt");
    const fechaFin = await prompt(
      "Fecha de fin de la campa\xF1a (YYYY-MM-DD):",
      fechaSugerida,
      true
    );
    if (fechaFin === null) {
      new import_obsidian44.Notice("Selecci\xF3n de fecha de fin cancelada.");
      return;
    }
    this.nota.fechaFin = fechaFin;
    return fechaFin;
  }
  // Obtiene la prioridad de la campaña
  async getPrioridad() {
    const prioridades = ["Baja", "Media", "Alta"];
    const prioridad = await this.suggester(
      prioridades,
      prioridades,
      false,
      "Prioridad de la campa\xF1a:"
    );
    if (prioridad === null) {
      new import_obsidian44.Notice("Selecci\xF3n de prioridad cancelada.");
      return;
    }
    this.nota.prioridad = prioridad;
    return prioridad;
  }
  // Obtiene la URL de los indicadores
  async getIndicadores() {
    const prompt = this.tp.system.static_functions.get("prompt");
    const indicadores = await prompt(
      "URL de los indicadores de la campa\xF1a:",
      "https://",
      true
    );
    if (indicadores === null) {
      new import_obsidian44.Notice("Ingreso de URL de indicadores cancelado.");
      return;
    }
    this.nota.indicadores = indicadores;
    return indicadores;
  }
  // Sobrescribe la función getAliases para ajustarla a los requerimientos específicos
  async getAliases() {
    this.nota.aliases = [];
    this.nota.aliases.push(this.nota.titulo);
    this.nota.aliases.push(`CP-${this.nota.titulo}`);
    this.nota.aliases.push(`CP-${this.nota.id}`);
    return this.nota.aliases;
  }
  // Implementación de getRename para la estructura de carpetas basada en trimestres
  // Implementación de getRename para la estructura de carpetas basada en trimestres
  async getRename() {
    const trimestreMatch = this.nota.trimestre.match(/\[\[(.*?)\]\]/);
    const trimestre = trimestreMatch ? trimestreMatch[1] : "Sin-Trimestre";
    const basePath = "Subsistemas/Marketing/Proyectos";
    const folderPath = `${basePath}/${trimestre}`;
    await FieldHandlerUtils.crearCarpeta(folderPath);
    const newName = `${folderPath}/${this.nota.titulo}.md`;
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    try {
      if (existe instanceof import_obsidian44.TFile) {
        const nombreFile = newName.split("/");
        const borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [true, false],
          true,
          `\xBF${nombreFile.pop()} ya existe. Qu\xE9 deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian44.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            const nuevoArchivo = app.vault.getAbstractFileByPath(newName);
            if (nuevoArchivo instanceof import_obsidian44.TFile) {
              await app.workspace.getLeaf(true).openFile(nuevoArchivo);
            }
            return newName;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian44.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          const nuevoArchivo = app.vault.getAbstractFileByPath(newName);
          if (nuevoArchivo instanceof import_obsidian44.TFile) {
            await app.workspace.getLeaf(true).openFile(nuevoArchivo);
          }
          return newName;
        }
      }
    } catch (error) {
      console.error("Error al cambiar el nombre", error);
      throw error;
    }
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/EntregableFieldHandler.ts
var import_obsidian49 = require("obsidian");
init_seleccionModal();
init_seleccionModalTareas();
init_fuzzySelectOrCreate();

// src/modules/modales/seleccionMultipleModal.ts
var import_obsidian45 = require("obsidian");
var SeleccionMultipleModal = class extends import_obsidian45.Modal {
  constructor(app2, opciones, titulo) {
    super(app2);
    this.checkboxes = [];
    this.opciones = opciones;
    this.titleEl.setText(titulo);
  }
  onOpen() {
    const { contentEl } = this;
    const contenedor = contentEl.createEl("div", { cls: "seleccion-multiple-container" });
    this.opciones.forEach((opcion) => {
      const wrapper = contenedor.createEl("div", { cls: "checkbox-wrapper" });
      const checkbox = wrapper.createEl("input", {
        type: "checkbox",
        attr: { id: `opcion-${opcion.nombre}` }
      });
      checkbox.checked = opcion.seleccionado;
      this.checkboxes.push(checkbox);
      wrapper.createEl("label", {
        text: opcion.nombre,
        attr: { for: `opcion-${opcion.nombre}` }
      });
    });
    const botonesContainer = contentEl.createEl("div", { cls: "modal-button-container" });
    const seleccionarTodosBtn = botonesContainer.createEl("button", { text: "Seleccionar todos" });
    seleccionarTodosBtn.addEventListener("click", () => {
      this.checkboxes.forEach((cb) => cb.checked = true);
    });
    const deseleccionarTodosBtn = botonesContainer.createEl("button", { text: "Deseleccionar todos" });
    deseleccionarTodosBtn.addEventListener("click", () => {
      this.checkboxes.forEach((cb) => cb.checked = false);
    });
    const confirmarBtn = contentEl.createEl("button", {
      text: "Confirmar",
      cls: "mod-cta"
    });
    confirmarBtn.addEventListener("click", () => {
      this.confirmarSeleccion();
    });
    contentEl.createEl("style", {
      text: `
                .seleccion-multiple-container {
                    margin-bottom: 1rem;
                    max-height: 300px;
                    overflow-y: auto;
                    padding: 10px;
                }
                .checkbox-wrapper {
                    display: flex;
                    align-items: center;
                    margin-bottom: 8px;
                }
                .checkbox-wrapper label {
                    margin-left: 8px;
                }
                .modal-button-container {
                    display: flex;
                    justify-content: space-between;
                    margin-bottom: 1rem;
                }
                button.mod-cta {
                    display: block;
                    width: 100%;
                    margin-top: 1rem;
                }
            `
    });
  }
  confirmarSeleccion() {
    const seleccionados = [];
    this.checkboxes.forEach((checkbox, index) => {
      if (checkbox.checked) {
        seleccionados.push(this.opciones[index].nombre);
      }
    });
    if (seleccionados.length === 0) {
      new import_obsidian45.Notice("Debes seleccionar al menos un canal");
      return;
    }
    this.close();
    this.resolver(seleccionados);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  openAndAwaitSelection() {
    return new Promise((resolve) => {
      this.resolver = resolve;
      this.open();
    });
  }
};

// src/modules/modales/spinnerModal.ts
var import_obsidian46 = require("obsidian");
var SpinnerModal = class extends import_obsidian46.Modal {
  constructor(app2, initialValue = 1, max = 100) {
    super(app2);
    this.resolver = null;
    this.numberDisplay = null;
    const min = 1;
    this.initialValue = Math.max(min, Math.min(max, initialValue));
    this.currentValue = this.initialValue;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.addClass("number-selector-modal");
    const container = contentEl.createDiv({ cls: "number-selector-container" });
    container.createEl("h2", { text: "\xBFCu\xE1ntos Hits representa este entregable?" });
    const controlsContainer = container.createDiv({ cls: "controls-container" });
    const decrementBtn = controlsContainer.createEl("button", {
      text: "\u25B2",
      cls: "increment-btn"
    });
    decrementBtn.addEventListener("click", () => this.changeValue(1));
    this.numberDisplay = controlsContainer.createEl("div", {
      text: this.currentValue.toString(),
      cls: "number-display"
    });
    const incrementBtn = controlsContainer.createEl("button", {
      text: "\u25BC",
      cls: "decrement-btn"
    });
    incrementBtn.addEventListener("click", () => this.changeValue(-1));
    const confirmBtn = container.createEl("button", {
      text: "Confirmar",
      cls: "confirm-btn"
    });
    confirmBtn.addEventListener("click", () => this.confirm());
    const cancelBtn = container.createEl("button", {
      text: "Cancelar",
      cls: "cancel-btn"
    });
    cancelBtn.addEventListener("click", () => this.cancel());
    const styleEl = document.createElement("style");
    styleEl.innerHTML = `
            .number-selector-modal {
                text-align: center;
                padding: 20px;
            }
            .number-selector-container {
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 15px;
            }
            .controls-container {
                display: flex;
                align-items: center;
                gap: 15px;
            }
            .number-display {
                font-size: 24px;
                font-weight: bold;
                width: 50px;
                text-align: center;
            }
            .increment-btn, .decrement-btn {
                background: none;
                border: 1px solid #ccc;
                padding: 5px 10px;
                cursor: pointer;
            }
            .confirm-btn, .cancel-btn {
                margin: 0 10px;
                padding: 10px 15px;
                cursor: pointer;
            }
        `;
    document.head.appendChild(styleEl);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    if (this.resolver && this.currentValue === null) {
      this.resolver(null);
    }
  }
  changeValue(direction) {
    if (!this.numberDisplay)
      return;
    let newValue = this.currentValue;
    if (direction > 0) {
      if (newValue < 1) {
        if (newValue === 0.33) {
          newValue = 0.5;
        } else if (newValue === 0.5) {
          newValue = 1;
        }
      } else {
        newValue = newValue + 1;
      }
    } else if (direction < 0) {
      if (newValue > 1) {
        newValue = newValue - 1;
      } else if (newValue === 1) {
        newValue = 0.5;
      } else if (newValue === 0.5) {
        newValue = 0.33;
      } else {
        newValue = 0.33;
      }
    }
    this.currentValue = newValue;
    this.numberDisplay.textContent = newValue.toString();
  }
  confirm() {
    if (this.resolver) {
      this.resolver(this.currentValue);
    }
    this.close();
  }
  cancel() {
    if (this.resolver) {
      this.resolver(null);
    }
    this.close();
  }
  openAndAwaitSelection() {
    return new Promise((resolve) => {
      this.resolver = resolve;
      this.open();
    });
  }
};

// src/modules/modales/datePickerModal.ts
var import_obsidian47 = require("obsidian");
init_luxon();
var DatePickerModal = class extends import_obsidian47.Modal {
  constructor(app2, initialDate, format = "yyyy-MM-dd") {
    super(app2);
    this.format = format;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Que d\xEDa se va a publicar la pieza?" });
    this.dateInput = contentEl.createEl("input", { type: "date" });
    if (this.initialDate) {
      const date = DateTime.fromFormat(this.initialDate, this.format);
      this.dateInput.value = date.toISODate();
    } else {
      this.dateInput.value = (/* @__PURE__ */ new Date()).toISOString().split("T")[0];
    }
    const buttonContainer = contentEl.createEl("div", { cls: "button-container" });
    const cancelButton = buttonContainer.createEl("button", { text: "Cancelar" });
    cancelButton.addEventListener("click", () => {
      this.close();
      this.resolver(null);
    });
    const confirmButton = buttonContainer.createEl("button", { text: "Confirmar" });
    confirmButton.addEventListener("click", () => {
      const selectedDate = this.dateInput.value;
      const formattedDate = DateTime.fromISO(selectedDate).toFormat(this.format);
      this.close();
      this.resolver(formattedDate);
    });
    buttonContainer.style.marginTop = "20px";
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "flex-end";
    buttonContainer.style.gap = "10px";
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  waitForInput() {
    return new Promise((resolve) => {
      this.resolver = resolve;
    });
  }
};

// src/modules/modales/pedidosClienteModal.ts
var import_obsidian48 = require("obsidian");
var PedidosClienteModal = class extends import_obsidian48.Modal {
  constructor(app2) {
    super(app2);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("pedidos-cliente-modal");
    this.titleEl.setText("Pedidos al cliente");
    const container = contentEl.createDiv({ cls: "pedidos-cliente-container" });
    container.createEl("h3", { text: "\xBFHay algo que se deba pedir al cliente?" });
    this.textarea = container.createEl("textarea", {
      attr: {
        rows: "6",
        placeholder: "Escribe aqu\xED tus pedidos al cliente..."
      }
    });
    const checkboxContainer = container.createEl("div", { cls: "custom-checkbox-container" });
    this.checkbox = checkboxContainer.createEl("input", {
      attr: {
        type: "checkbox",
        id: "pendientes-checkbox",
        class: "hidden-checkbox"
      }
    });
    const customCheckbox = checkboxContainer.createEl("div", {
      cls: "custom-checkbox"
    });
    const checkboxLabel = checkboxContainer.createEl("label", {
      text: "Marcar como pendiente del cliente",
      attr: {
        for: "pendientes-checkbox",
        class: "checkbox-label"
      }
    });
    this.textarea.addEventListener("input", () => {
      if (this.textarea.value.trim() !== "") {
        this.checkbox.checked = true;
        customCheckbox.classList.add("checked");
      } else {
        this.checkbox.checked = false;
        customCheckbox.classList.remove("checked");
      }
    });
    customCheckbox.addEventListener("click", () => {
      this.checkbox.checked = !this.checkbox.checked;
      if (this.checkbox.checked) {
        customCheckbox.classList.add("checked");
      } else {
        customCheckbox.classList.remove("checked");
      }
    });
    checkboxLabel.addEventListener("click", () => {
      this.checkbox.checked = !this.checkbox.checked;
      if (this.checkbox.checked) {
        customCheckbox.classList.add("checked");
      } else {
        customCheckbox.classList.remove("checked");
      }
    });
    const buttonContainer = container.createEl("div", { cls: "button-container" });
    const cancelarBtn = buttonContainer.createEl("button", {
      text: "Cancelar",
      cls: "mod-secondary"
    });
    cancelarBtn.addEventListener("click", () => this.cancel());
    const confirmarBtn = buttonContainer.createEl("button", {
      text: "Confirmar",
      cls: "mod-cta"
    });
    confirmarBtn.addEventListener("click", () => this.confirm());
    contentEl.createEl("style", {
      text: `
                .pedidos-cliente-modal .pedidos-cliente-container {
                    display: flex;
                    flex-direction: column;
                    gap: 12px;
                    padding: 16px;
                    width: 100%;
                    box-sizing: border-box;
                }
                
                .pedidos-cliente-modal h3 {
                    font-size: 16px;
                    margin: 0 0 8px 0;
                    font-weight: 500;
                }
                
                .pedidos-cliente-modal textarea {
                    width: 100%;
                    min-height: 120px;
                    resize: vertical;
                    padding: 8px;
                    font-size: 14px;
                    line-height: 1.4;
                    border-radius: 4px;
                    margin-bottom: 8px;
                }
                
                /* Estilo para el contenedor del checkbox personalizado */
                .pedidos-cliente-modal .custom-checkbox-container {
                    display: flex;
                    align-items: center;
                    padding: 4px 0;
                    margin-bottom: 8px;
                    cursor: pointer;
                }
                
                /* Ocultar el checkbox real */
                .pedidos-cliente-modal .hidden-checkbox {
                    position: absolute;
                    opacity: 0;
                    cursor: pointer;
                    height: 0;
                    width: 0;
                }
                
                /* Crear un checkbox personalizado */
                .pedidos-cliente-modal .custom-checkbox {
                    width: 18px;
                    height: 18px;
                    border: 1px solid #888;
                    border-radius: 3px;
                    margin-right: 10px;
                    position: relative;
                    flex-shrink: 0;
                    background-color: var(--background-primary, #fff);
                }
                
                /* Estilo para cuando est\xE1 marcado - crear una X */
                .pedidos-cliente-modal .custom-checkbox.checked::before,
                .pedidos-cliente-modal .custom-checkbox.checked::after {
                    content: '';
                    position: absolute;
                    width: 3px;
                    height: 12px;
                    background-color: var(--text-normal, #333);
                    top: 2px;
                }
                
                .pedidos-cliente-modal .custom-checkbox.checked::before {
                    left: 9px;
                    transform: rotate(45deg);
                }
                
                .pedidos-cliente-modal .custom-checkbox.checked::after {
                    left: 9px;
                    transform: rotate(-45deg);
                }
                
                /* Estilo para la etiqueta del checkbox */
                .pedidos-cliente-modal .checkbox-label {
                    font-size: 14px;
                    cursor: pointer;
                    user-select: none;
                    white-space: nowrap;
                }
                
                .pedidos-cliente-modal .button-container {
                    display: flex;
                    gap: 12px;
                    justify-content: flex-end;
                    margin-top: 8px;
                }
                
                .pedidos-cliente-modal .button-container button {
                    padding: 6px 12px;
                    border-radius: 4px;
                    cursor: pointer;
                }
            `
    });
  }
  confirm() {
    const pedidos = this.textarea.value.trim();
    const pendientes = this.checkbox.checked;
    const resolver = this.resolver;
    this.resolver = null;
    this.close();
    resolver({
      pedidos,
      pendientes
    });
  }
  cancel() {
    const resolver = this.resolver;
    this.resolver = null;
    this.close();
    resolver(null);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    if (this.resolver) {
      this.resolver(null);
      this.resolver = null;
    }
  }
  openAndAwaitSelection() {
    return new Promise((resolve) => {
      this.resolver = resolve;
      this.open();
    });
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/EntregableFieldHandler.ts
var EntregableFieldHandler = class extends NoteFieldHandler {
  constructor(tp, infoSubsistema, plugin) {
    super(tp, infoSubsistema, plugin);
  }
  // Sobrescribimos el método getAsunto para manejar NotionID
  async getAsunto() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q;
    let padres = [];
    let activo = app.workspace.getActiveFile();
    let siAsunto = false;
    let nombre = "";
    let nota;
    if (activo != null) {
      nombre = activo.basename;
      nota = app.metadataCache.getFileCache(activo);
      nota.frontmatter = nota.frontmatter || {};
      nota.frontmatter.file = {};
      Object.assign(nota.frontmatter.file, activo);
      padres.unshift(nombre);
      siAsunto = await this.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
      if (siAsunto) {
        this.nota.asuntoDefinido = true;
        let notionID = null;
        for (const key in nota.frontmatter) {
          if (key.startsWith("NotionID-")) {
            notionID = nota.frontmatter[key];
            console.log(`Encontrado NotionID: ${notionID} con clave: ${key}`);
            break;
          }
        }
        if (notionID) {
          this.nota.proyecto = [notionID];
          console.log(`Asignado NotionID al proyecto: ${notionID}`);
        }
        let nivel;
        switch ((_a = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _a.type) {
          default:
          case "PGTD":
          case "PQ":
            if (((_b = nota.frontmatter) == null ? void 0 : _b.type) === "PQ") {
              this.nota.proyectoQ = nombre;
              this.nota.proyectoGTD = "";
              if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if (nota.frontmatter.proyectoGTD) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else if (((_c = nota.frontmatter) == null ? void 0 : _c.type) === "PGTD") {
              this.nota.proyectoGTD = [nombre];
              if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                this.nota.proyectoGTD = this.nota.proyectoGTD.concat(nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
              } else if (nota.frontmatter.proyectoGTD) {
                this.nota.proyectoGTD.push(nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
              }
              this.nota.proyectoQ = "";
              if (Array.isArray(nota.frontmatter.proyectoQ)) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if (nota.frontmatter.proyectoQ) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.proyectoQ = "";
              if (Array.isArray((_d = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _d.proyectoQ)) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if ((_e = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _e.proyectoQ) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
              }
              this.nota.proyectoGTD = "";
              if (Array.isArray((_f = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _f.proyectoGTD)) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if ((_g = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _g.proyectoGTD) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            }
            this.nota.areaInteres = [];
            if (Array.isArray((_h = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _h.areaInteres)) {
              this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
            } else {
              if ((_i = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _i.areaInteres) {
                this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
              }
            }
            this.nota.areaVida = "";
            if ((_j = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _j.areaVida) {
              if (Array.isArray(nota.frontmatter.areaVida)) {
                this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
              } else if (typeof nota.frontmatter.areaVida === "string") {
                this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.areaVida = "No es de ning\xFAn Area de Vida";
            }
            if (!isNaN(parseInt((_k = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _k.nivelP))) {
              nivel = parseInt(nota.frontmatter.nivelP) + 1;
            } else {
              nivel = 0;
            }
            this.nota.nivelP = nivel;
            break;
          case "AI":
            if (((_l = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _l.type) === "AI") {
              this.nota.areaInteres = [nota.frontmatter.file.basename];
            }
            if (Array.isArray((_m = nota.frontmatter) == null ? void 0 : _m.areaInteres)) {
              this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
            } else {
              if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
                this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else {
              }
            }
          case "AV":
            if ((_n = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _n.areaVida) {
              if (Array.isArray(nota.frontmatter.areaVida)) {
                this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
              } else if (typeof nota.frontmatter.areaVida === "string") {
                this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.areaVida = "No es de ning\xFAn Area de Vida";
            }
            if (((_o = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _o.type) === "AI" || ((_p = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _p.type) === "AV") {
              siAsunto = false;
            }
            if (!isNaN(parseInt((_q = nota.frontmatter) == null ? void 0 : _q.nivelP))) {
              nivel = parseInt(nota.frontmatter.nivelP) + 1;
            } else {
              nivel = 0;
            }
            this.nota.nivelP = nivel;
            break;
        }
      } else {
      }
    } else {
      siAsunto = false;
    }
    return { siAsunto, nombre: padres };
  }
  async getTrimestre() {
    var _a;
    const activo = app.workspace.getActiveFile();
    debugger;
    if (activo) {
      const metadata = (_a = app.metadataCache.getFileCache(activo)) == null ? void 0 : _a.frontmatter;
      if (metadata && metadata.type === "Cp") {
        const esContinuacion = await this.suggester(
          ["S\xED", "No"],
          [true, false],
          false,
          `\xBFEste entregable es parte de la campa\xF1a ${activo.basename}?`
        );
        debugger;
        if (esContinuacion && metadata.trimestre) {
          this.nota.trimestre = metadata.trimestre;
          return metadata.trimestre;
        }
      }
    }
    const trimestres = await FieldHandlerUtils.findMainFilesWithState("TQ", null, this.plugin);
    const trimestre = await this.suggester(
      trimestres.map((t) => t.file.basename),
      trimestres.map((t) => t.file.basename),
      false,
      "Selecciona el trimestre para este entregable:"
    );
    if (!trimestre) {
      throw new Error("Debe seleccionar un trimestre para continuar");
    }
    this.nota.trimestre = `[[${trimestre}]]`;
    return `[[${trimestre}]]`;
  }
  async getTipo() {
    const tiposEntregable = [
      "Blog",
      "Correo Electr\xF3nico",
      "Dise\xF1o Personalizado",
      "Entrenamiento",
      "Estudio de caso",
      "Historia",
      "Infograf\xEDa",
      "Pauta",
      "Podcast",
      "Post",
      "Reel",
      "Tarea Avanzada",
      "Video",
      "Webinar"
    ];
    const tipo = await this.suggester(
      tiposEntregable,
      tiposEntregable,
      false,
      "Selecciona el tipo de entregable:"
    );
    if (!tipo) {
      throw new Error("Debe seleccionar un tipo de entregable para continuar");
    }
    this.nota.tipo = tipo;
    return tipo;
  }
  async getCanales() {
    const todosLosCanales = [
      "Whatsapp",
      "Instagram",
      "Facebook",
      "Tik Tok",
      "Sitio Web",
      "Email marketing",
      "Youtube",
      "Twitter",
      "LinkedIn",
      "Otro"
    ];
    let canalesPreseleccionados = [];
    switch (this.nota.tipo) {
      case "Historia":
        canalesPreseleccionados = ["Whatsapp", "Instagram", "Facebook"];
        break;
      case "Post":
        canalesPreseleccionados = ["Instagram", "Facebook"];
        break;
      case "Reel":
        canalesPreseleccionados = ["Instagram", "Tik Tok", "Youtube"];
        break;
      case "Video":
        canalesPreseleccionados = ["Youtube"];
        break;
      case "Blog":
        canalesPreseleccionados = ["Sitio Web", "LinkedIn"];
        break;
      case "Pauta":
        canalesPreseleccionados = ["Instagram", "Facebook"];
        break;
      case "Correo Electr\xF3nico":
        canalesPreseleccionados = ["Email marketing"];
        break;
      case "Infograf\xEDa":
        canalesPreseleccionados = ["Instagram", "Facebook"];
        break;
      case "Estudio de caso":
        canalesPreseleccionados = ["LinkedIn"];
        break;
      default:
        canalesPreseleccionados = [];
    }
    const opciones = todosLosCanales.map((canal) => {
      return {
        nombre: canal,
        seleccionado: canalesPreseleccionados.includes(canal)
      };
    });
    const multiSelectModal = new SeleccionMultipleModal(this.plugin.app, opciones, "Selecciona los canales para este entregable");
    const canalesSeleccionados = await multiSelectModal.openAndAwaitSelection();
    if (!canalesSeleccionados || canalesSeleccionados.length === 0) {
      this.nota.canales = canalesPreseleccionados;
      return canalesPreseleccionados;
    }
    this.nota.canales = canalesSeleccionados;
    return canalesSeleccionados;
  }
  async getStatus() {
    const estados = [
      "Sin empezar",
      "Dise\xF1ando",
      "Revisi\xF3n Interna",
      "Revisi\xF3n Cliente",
      "Programaci\xF3n parrila",
      "Publicado",
      "Completado",
      "Archivado"
    ];
    const status = await this.suggester(
      estados,
      estados,
      false,
      "Selecciona el estado actual del entregable:"
    );
    if (!status) {
      this.nota.status = "Sin empezar";
      return "Sin empezar";
    }
    this.nota.status = status;
    return status;
  }
  async getPrioridad() {
    const prioridades = ["Baja", "Media", "Alta"];
    const prioridad = await this.suggester(
      prioridades,
      prioridades,
      false,
      "Selecciona la prioridad del entregable:"
    );
    if (!prioridad) {
      this.nota.prioridad = "Media";
      return "Media";
    }
    this.nota.prioridad = prioridad;
    return prioridad;
  }
  async getPublicacion() {
    const modal = new DatePickerModal(this.plugin.app);
    modal.open();
    const selectedDate = await modal.waitForInput();
    if (selectedDate === null) {
      return "";
    }
    this.nota.publicacion = selectedDate;
    return selectedDate;
  }
  async getPiezaNube() {
    const url = await this.prompt(
      "URL de la pieza en la nube (Google Drive, Dropbox, etc.):",
      "https://",
      false,
      false
    );
    this.nota.piezaNube = url || "";
    return url || "";
  }
  async getUrlCanva() {
    const url = await this.prompt(
      "URL del dise\xF1o en Canva:",
      "https://",
      false,
      false
    );
    this.nota.urlCanva = url || "";
    return url || "";
  }
  async getHits() {
    const spinnerModal = new SpinnerModal(this.plugin.app, 1, 1, 1e3);
    const hits = await spinnerModal.openAndAwaitSelection();
    if (hits === null || hits === void 0) {
      this.nota.hits = 1;
      return 1;
    }
    this.nota.hits = hits;
    return hits;
  }
  async getPedidosAlCliente() {
    const pedidosModal = new PedidosClienteModal(this.plugin.app);
    const resultado = await pedidosModal.openAndAwaitSelection();
    if (!resultado) {
      this.nota.pedidosAlCliente = "";
      this.nota.pendientesCliente = false;
      return { pedidos: "", pendientes: false };
    }
    this.nota.pedidosAlCliente = resultado.pedidos;
    this.nota.pendientesCliente = resultado.pendientes;
    return resultado;
  }
  // Método para determinar si el entregable es facturable basado en quién lo realizará
  async getFacturable() {
    const opciones = ["Un tercero", "Andr\xE9s Juli\xE1n Borb\xF3n"];
    const valores = [false, true];
    const realizador = await this.suggester(
      opciones,
      valores,
      false,
      // No es multiselección
      "\xBFQui\xE9n realizar\xE1 este entregable?"
    );
    if (realizador === null) {
      this.nota.facturable = false;
      return false;
    }
    this.nota.facturable = realizador;
    return realizador;
  }
  async getAliases() {
    const aliases = [];
    aliases.push(`${this.nota.titulo}`);
    aliases.push(`EMkt-${this.nota.titulo}`);
    aliases.push(`EMkt-${this.nota.id}`);
    this.nota.aliases = aliases;
    return aliases;
  }
  // Implementación de getRename para la estructura de carpetas basada en trimestres
  async getRename() {
    const folderBase = `${this.infoSubsistema.folder}`;
    const trimestreLimpio = this.nota.trimestre.replace(/\[\[|\]\]/g, "").trim();
    const folderTrimestre = `${folderBase}/${trimestreLimpio}`;
    await FieldHandlerUtils.crearCarpeta(folderBase);
    await FieldHandlerUtils.crearCarpeta(folderTrimestre);
    const newName = `${folderTrimestre}/${this.nota.titulo}.md`;
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    try {
      if (existe instanceof import_obsidian49.TFile) {
        const nombreFile = newName.split("/");
        const borrar = await this.suggester(
          ["Sobreescribir archivo actual", "Detener creaci\xF3n del archivo"],
          [true, false],
          true,
          `\xBF${nombreFile.pop()} ya existe. \xBFQu\xE9 deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian49.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            const newFile = app.vault.getAbstractFileByPath(newName);
            if (newFile instanceof import_obsidian49.TFile) {
              const leaf = app.workspace.getLeaf(true);
              await leaf.openFile(newFile);
            }
            return newName;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian49.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          const newFile = app.vault.getAbstractFileByPath(newName);
          if (newFile instanceof import_obsidian49.TFile) {
            const leaf = app.workspace.getLeaf(true);
            await leaf.openFile(newFile);
          }
          return newName;
        }
      }
    } catch (error) {
      console.error("Error al cambiar el nombre", error);
      throw error;
    }
  }
};

// src/modules/noteLifecycleManager/API/starterAPI.ts
var starterAPI = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.infoSubsistema = {};
    this.tp = this.getTp();
    this.pathCampos = this.plugin.settings.file_camposCentral + ".md";
  }
  async fillNote(infoSubsistema, campos) {
    this.nota = {};
    let nota;
    Object.assign(this.infoSubsistema, infoSubsistema);
    if (this.infoSubsistema.defined) {
      this.infoSubsistema.folder = this.plugin.settings[infoSubsistema.folder];
      this.infoSubsistema.indice = this.plugin.settings[infoSubsistema.indice];
      Object.assign(this.nota, infoSubsistema);
    }
    let fieldHandler;
    switch (this.infoSubsistema.type) {
      case "Agr":
        fieldHandler = new AgradecimientosFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "PGTD":
        fieldHandler = new PGTDFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "PQ":
        fieldHandler = new PQFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "Ax":
        fieldHandler = new AnotacionesFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "CPE":
        fieldHandler = new ContenidoParaEstudioFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "RR":
        fieldHandler = new RecursosRecurrentesFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "Tx":
        fieldHandler = new TransaccionesFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "AI":
        fieldHandler = new AreasInteresFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "AV":
        fieldHandler = new AreaVidaFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "nAV":
        fieldHandler = new nodoAreaVidaFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "OCA":
        fieldHandler = new ObjCompassAnualFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "CAI":
        fieldHandler = new CompassPlaneacionAnual_FH(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "RL":
        fieldHandler = new RepositorioLibros_FH(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "LB":
        fieldHandler = new Biblioteca_FH(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "Rx":
        fieldHandler = new ReflexionesFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "Cp":
        fieldHandler = new Campa\u00F1asFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "EMkt":
        fieldHandler = new EntregableFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      default:
        throw new Error(`No se ha definido un manejador de campos para el tipo ${this.infoSubsistema.type}`);
    }
    try {
      for (let campo of campos) {
        const functionName = `get${campo.charAt(0).toUpperCase() + campo.slice(1)}`;
        if (typeof fieldHandler[functionName] === "function") {
          this.nota[campo] = await fieldHandler[functionName]();
          nota = await fieldHandler.getNota();
          for (const key in nota) {
            if (!(key in this.nota)) {
              this.nota[key] = nota[key];
            }
          }
        } else {
          console.error(`La funci\xF3n ${functionName} no est\xE1 definida.`);
        }
      }
    } catch (error) {
      console.error("No se pudo crear el objeto de registro.", error);
      new import_obsidian50.Notice("No se pudo crear el objeto de registro.");
      return null;
    }
    return this.nota;
  }
  getTp() {
    if (!this.plugin || !this.plugin.app.plugins.enabledPlugins.has("templater-obsidian")) {
      console.error("El plugin Templater no est\xE1 habilitado.");
      return;
    }
    let tpGen = this.plugin.app.plugins.plugins["templater-obsidian"].templater;
    tpGen = tpGen.functions_generator.internal_functions.modules_array;
    let tp = {};
    tp.file = tpGen.find((m) => m.name == "file");
    tp.system = tpGen.find((m) => m.name == "system");
    if (!tp.system) {
      console.error("No se pudo acceder al objeto de funciones actuales de Templater.");
      return;
    }
    console.log("tp en YAMLUpdaterAPI se ha cargado satisfactoriamente");
    return tp;
  }
  // Crear Nota desde template
  async createNote(subsistema) {
    try {
      const templatePath = `Plantillas/${this.plugin.settings[`folder_${subsistema}`]}/Plt - ${subsistema}.md`;
      const templateFile = app.vault.getAbstractFileByPath(templatePath);
      if (!(templateFile instanceof import_obsidian50.TFile)) {
        throw new Error(`El template para "${subsistema}" no se encontr\xF3 o no es un archivo v\xE1lido.`);
      }
      const dtConseq = DateTime.now().toFormat("yyyy-MM-dd HHmmss");
      const filename = `${subsistema} ${dtConseq}`;
      const folder = app.vault.getAbstractFileByPath("Inbox");
      if (!folder) {
        throw new Error(`La carpeta "Inbox" no se encontr\xF3.`);
      }
      const tp = this.getTp();
      let crearNota = tp.file.static_functions.get("create_new");
      if (typeof crearNota !== "function") {
        throw new Error("La funci\xF3n para crear notas no est\xE1 disponible.");
      }
      await crearNota(templateFile, filename, true, folder).basename;
    } catch (error) {
      console.error(error);
      alert(`Error al crear la nota: ${error.message}`);
    }
  }
  async getOtrosAsuntos(subsistemas) {
    let suggester = this.tp.system.static_functions.get("suggester");
    let campo = [];
    for (let subsistema of subsistemas) {
      let incluye = await suggester(["Si", "No"], [true, false], true, `Desea agregar algun ${subsistema} activo como origen?`);
      if (!incluye)
        continue;
      debugger;
      let recursosActivos = await this.activeStructureResources(subsistema);
      let primerAlias = recursosActivos.map((file) => {
        var _a;
        const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
        return metadata && metadata.aliases && metadata.aliases.length > 0 ? metadata.aliases[0] : null;
      }).filter((alias) => alias !== null);
      while (recursosActivos.length > 0) {
        let indiceSeleccionado;
        if (subsistema === "AreasVida" || subsistema === "AreasInteres") {
          let seleccion = await suggester(primerAlias, recursosActivos.map((b) => b.path), false, `${subsistema} activos:`);
          if (!seleccion)
            break;
          indiceSeleccionado = recursosActivos.findIndex((b) => b.path === seleccion);
        } else {
          let seleccion = await suggester(primerAlias, recursosActivos.map((b) => b.basename), false, `${subsistema} activos:`);
          if (!seleccion)
            break;
          indiceSeleccionado = recursosActivos.findIndex((b) => b.basename === seleccion);
        }
        if (indiceSeleccionado !== -1) {
          if (subsistema === "AreasVida" || subsistema === "AreasInteres") {
            campo.push(recursosActivos[indiceSeleccionado].path);
          } else {
            campo.push(recursosActivos[indiceSeleccionado].basename);
          }
          recursosActivos.splice(indiceSeleccionado, 1);
          primerAlias.splice(indiceSeleccionado, 1);
        }
        if (recursosActivos.length === 0)
          break;
        let deseaAgregarOtro = await suggester(["Si", "No"], [true, false], true, `Desea agregar otro ${subsistema} como origen?`);
        debugger;
        if (!deseaAgregarOtro)
          break;
      }
    }
    return campo;
  }
  // FUNCION QUE TRAE TODAS LAS NOTAS ACTIVAS DE LOS SISTEMAS. - Revisar en que la uso...
  async activeStructureResources(typeName) {
    try {
      const files = app.vault.getMarkdownFiles();
      switch (type) {
        case "AreasInteres":
          debugger;
          break;
        default:
          let resourceFolderName = "folder_" + typeName;
          let resourceFolder = this.plugin.settings[resourceFolderName];
          if (!resourceFolder) {
            console.error(`La carpeta "${resourceFolderName}" no existe en la configuraci\xF3n del plugin.`);
            return [];
          }
          let activeResources2 = [];
          const registrosExistentes = files.filter((file) => file.path.startsWith(resourceFolder));
          registrosExistentes.forEach((file) => {
            var _a;
            const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
            if (metadata && metadata.estado === "\u{1F7E2}") {
              activeResources2.push(file);
            }
          });
          break;
      }
      return activeResources;
    } catch (error) {
      console.error("Error al buscar recursos activos:", error);
      return [];
    }
  }
};

// src/modules/noteLifecycleManager/API/addOnsAPI.ts
var addOnsAPI = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  crearPrevNext(paginas, pagIndice, dv) {
    let pagina = dv.current();
    let indice;
    for (let a = 0; a < paginas.length; a++) {
      if (paginas[a].file.name == pagina.file.name) {
        indice = a;
      }
    }
    let links = [];
    if (indice == 0 && paginas.length == 1) {
      links[0] = "";
      links[1] = "";
    } else if (indice == 0) {
      links[0] = "";
      links[1] = "\u27A1\uFE0F " + dv.func.link(paginas[indice + 1].file.path, this.determinarTextoEnlace(paginas[indice + 1]));
    } else if (indice == paginas.length - 1) {
      links[0] = dv.func.link(paginas[indice - 1].file.path, this.determinarTextoEnlace(paginas[indice - 1])) + " \u2B05\uFE0F";
      links[1] = "";
    } else {
      links[0] = dv.func.link(paginas[indice - 1].file.path, this.determinarTextoEnlace(paginas[indice - 1])) + " \u2B05\uFE0F";
      links[1] = "\u27A1\uFE0F " + dv.func.link(paginas[indice + 1].file.path, this.determinarTextoEnlace(paginas[indice + 1]));
    }
    dv.paragraph(links[0] + " ==" + dv.func.link(pagIndice.file.path, pagIndice.titulo || pagIndice.file.name) + "== " + links[1]);
  }
  determinarTextoEnlace(pagina) {
    if (pagina.titulo) {
      return pagina.titulo;
    } else if (pagina.aliases && pagina.aliases.length > 0) {
      return pagina.aliases[0];
    } else {
      return pagina.file.name;
    }
  }
  // Función para generar el texto de relaciones de una nota
  // Añadir esta función a la clase addOnsAPI en src/modules/noteLifecycleManager/API/addOnsAPI.ts
  // En src/modules/noteLifecycleManager/API/addOnsAPI.ts
  /**
   * Genera texto de relaciones con enlaces funcionales y formateado con CSS
   * @param pagina La página actual obtenida a través de dv.current()
   * @param dv El objeto dataview para acceder a sus funciones
   * @returns Objeto HTML para ser usado con dv.paragraph()
   */
  generarTextoRelaciones(pagina, dv) {
    var _a, _b, _c;
    let texto = `${pagina.typeName || "Entregable"} relacionado a `;
    const relaciones = [];
    if (pagina.asunto && Array.isArray(pagina.asunto)) {
      const asuntoLinks = [];
      for (const entryObj of pagina.asunto) {
        const path = entryObj.path || entryObj;
        if (typeof path === "string" && path.length > 0) {
          try {
            const asuntoPage = dv.page(path);
            if (asuntoPage && asuntoPage.file) {
              const alias = ((_a = asuntoPage.file.aliases) == null ? void 0 : _a[0]) || asuntoPage.titulo || asuntoPage.file.name;
              asuntoLinks.push(dv.fileLink(asuntoPage.file.path, false, alias));
            } else {
              asuntoLinks.push("asunto no encontrado");
            }
          } catch (e) {
            asuntoLinks.push("asunto no encontrado");
          }
        }
      }
      if (asuntoLinks.length > 0) {
        relaciones.push(`asunto: ${asuntoLinks.join(", ")}`);
      } else {
        relaciones.push("asunto: asunto no encontrado");
      }
    }
    if (pagina.proyectoGTD && (Array.isArray(pagina.proyectoGTD) || typeof pagina.proyectoGTD === "string")) {
      const proyectoLinks = [];
      const proyectoArray = Array.isArray(pagina.proyectoGTD) ? pagina.proyectoGTD : [pagina.proyectoGTD];
      for (const entryObj of proyectoArray) {
        const path = entryObj.path || entryObj;
        if (typeof path === "string" && path.length > 0) {
          try {
            const proyectoPage = dv.page(path);
            if (proyectoPage && proyectoPage.file) {
              const alias = ((_b = proyectoPage.file.aliases) == null ? void 0 : _b[0]) || proyectoPage.titulo || proyectoPage.file.name;
              proyectoLinks.push(dv.fileLink(proyectoPage.file.path, false, alias));
            }
          } catch (e) {
            if (typeof entryObj === "string" && entryObj.includes("|")) {
              const partes = entryObj.split("|");
              proyectoLinks.push(partes[partes.length - 1].replace("]]", ""));
            } else {
              const pathParts = path.split("/");
              const fileName = pathParts[pathParts.length - 1].replace(".md", "");
              proyectoLinks.push(fileName);
            }
          }
        }
      }
      if (proyectoLinks.length > 0) {
        relaciones.push(`PGTD: ${proyectoLinks.join(", ")}`);
      }
    }
    if (pagina.areaInteres && (Array.isArray(pagina.areaInteres) || typeof pagina.areaInteres === "string")) {
      const areaLinks = [];
      const areaArray = Array.isArray(pagina.areaInteres) ? pagina.areaInteres : [pagina.areaInteres];
      for (const entryObj of areaArray) {
        const path = entryObj.path || entryObj;
        if (typeof path === "string" && path.length > 0) {
          try {
            const areaPage = dv.page(path);
            if (areaPage && areaPage.file) {
              const alias = ((_c = areaPage.file.aliases) == null ? void 0 : _c[0]) || areaPage.titulo || areaPage.file.name;
              areaLinks.push(dv.fileLink(areaPage.file.path, false, alias));
            }
          } catch (e) {
            if (typeof entryObj === "string" && entryObj.includes("|")) {
              const partes = entryObj.split("|");
              areaLinks.push(partes[partes.length - 1].replace("]]", ""));
            } else {
              const pathParts = path.split("/");
              const fileName = pathParts[pathParts.length - 1].replace(".md", "");
              areaLinks.push(fileName);
            }
          }
        }
      }
      if (areaLinks.length > 0) {
        relaciones.push(`AI: ${areaLinks.join(", ")}`);
      }
    }
    if (pagina.areaVida) {
      let areaVidaText = pagina.areaVida;
      if (typeof pagina.areaVida === "string" && pagina.areaVida.includes("[[")) {
        const match2 = pagina.areaVida.match(/\[\[(.*?)\|(.*?)\]\]/);
        if (match2 && match2.length >= 3) {
          areaVidaText = match2[2];
        } else {
          areaVidaText = pagina.areaVida.replace(/\[\[|\]\]/g, "");
        }
      }
      relaciones.push(`AV: ${areaVidaText}`);
    }
    texto += relaciones.join(", ");
    if (pagina.estado) {
      texto += ` en estado ${pagina.estado}`;
    }
    return dv.el("span", texto, { cls: "nota-relaciones" });
  }
  /**
   * Genera un árbol de referencias a la nota actual de forma recursiva
   * @param paginaActual La página actual
   * @param dv Objeto dataview para acceder a sus funciones
   * @param profundidadMaxima Profundidad máxima de recursión (defecto: 3)
   * @param visitadas Set de IDs de páginas ya visitadas para evitar ciclos
   * @param profundidadActual Profundidad actual de recursión
   * @returns Elemento HTML con la estructura de árbol
   */
  generarArbolReferencias(paginaActual, dv, profundidadMaxima = 3, visitadas = /* @__PURE__ */ new Set(), profundidadActual = 0) {
    if (!paginaActual || !paginaActual.file) {
      console.error("Error: paginaActual no tiene las propiedades necesarias", paginaActual);
      return dv.el("div", "Error: No se puede generar el \xE1rbol de referencias.", { cls: "backlinks-tree-error" });
    }
    const contenedor = dv.el("div", "", { cls: "backlinks-tree" });
    if (profundidadActual === 0) {
      const tipoNota = paginaActual.typeName || "Nota";
      const alias = paginaActual.file.aliases && paginaActual.file.aliases.length > 0 ? paginaActual.file.aliases[0] : paginaActual.titulo || paginaActual.file.name;
      const titulo = dv.el("h3", `Referencias a ${tipoNota} "${alias}"`, { cls: "backlinks-tree-title" });
      contenedor.appendChild(titulo);
    }
    if (profundidadActual >= profundidadMaxima) {
      return contenedor;
    }
    visitadas.add(paginaActual.file.path);
    let todasLasPaginas;
    try {
      todasLasPaginas = dv.pages();
    } catch (e) {
      console.error("Error al obtener p\xE1ginas:", e);
      const errorMsg = dv.el("p", "Error al obtener p\xE1ginas de Dataview", { cls: "backlinks-tree-error" });
      contenedor.appendChild(errorMsg);
      return contenedor;
    }
    let referenciasDirectas = [];
    try {
      referenciasDirectas = todasLasPaginas.filter((p) => {
        if (!p.asunto)
          return false;
        const asuntos = Array.isArray(p.asunto) ? p.asunto : [p.asunto];
        for (const asunto of asuntos) {
          if (asunto && typeof asunto === "object" && asunto.path === paginaActual.file.path) {
            return true;
          }
          if (typeof asunto === "string" && asunto.includes(paginaActual.file.path)) {
            return true;
          }
          if (typeof asunto === "string") {
            const aliases = paginaActual.file.aliases || [];
            for (const alias of aliases) {
              if (asunto.includes(alias)) {
                return true;
              }
            }
            if (asunto.includes(paginaActual.file.name)) {
              return true;
            }
          }
        }
        return false;
      });
    } catch (e) {
      console.error("Error al filtrar referencias:", e);
      const errorMsg = dv.el("p", "Error al procesar referencias", { cls: "backlinks-tree-error" });
      contenedor.appendChild(errorMsg);
      return contenedor;
    }
    if (referenciasDirectas.length === 0) {
      if (profundidadActual === 0) {
        const mensaje = dv.el("p", "No se encontraron referencias a esta nota", { cls: "backlinks-tree-empty" });
        contenedor.appendChild(mensaje);
      }
      return contenedor;
    }
    const lista = dv.el("ul", "", { cls: `backlinks-tree-level-${profundidadActual}` });
    for (const referencia of referenciasDirectas) {
      try {
        if (visitadas.has(referencia.file.path)) {
          continue;
        }
        const item = dv.el("li", "", { cls: "backlinks-tree-item" });
        const tipo = referencia.typeName || "Nota";
        const tipoEl = dv.el("span", `[${tipo}] `, { cls: "backlinks-tree-type" });
        item.appendChild(tipoEl);
        let nombreMostrado = "";
        try {
          nombreMostrado = referencia.file.aliases && referencia.file.aliases.length > 0 ? referencia.file.aliases[0] : referencia.titulo || referencia.file.name;
        } catch (e) {
          nombreMostrado = referencia.file.name || "Sin nombre";
        }
        try {
          const enlace = dv.el("a", nombreMostrado, {
            attr: {
              href: referencia.file.path,
              "data-href": referencia.file.path,
              class: "internal-link"
            }
          });
          enlace.addEventListener("click", (event) => {
            event.preventDefault();
            const target = event.target;
            const href = target.getAttribute("data-href");
            if (href) {
              app.workspace.openLinkText(href, "", false);
            }
          });
          item.appendChild(enlace);
        } catch (e) {
          console.error("Error al crear enlace con m\xE9todo primario:", e);
          try {
            const enlace = document.createElement("a");
            enlace.textContent = nombreMostrado;
            enlace.href = `obsidian://open?vault=${encodeURIComponent(app.vault.getName())}&file=${encodeURIComponent(referencia.file.path)}`;
            enlace.classList.add("internal-link");
            item.appendChild(enlace);
          } catch (e2) {
            console.error("Error al crear enlace con m\xE9todo alternativo:", e2);
            const textoPlano = dv.el("span", nombreMostrado);
            item.appendChild(textoPlano);
          }
        }
        try {
          const nuevoVisitadas = /* @__PURE__ */ new Set([...visitadas]);
          nuevoVisitadas.add(referencia.file.path);
          const subReferencias = this.generarArbolReferencias(
            referencia,
            dv,
            profundidadMaxima,
            nuevoVisitadas,
            profundidadActual + 1
          );
          if (subReferencias && subReferencias.nodeType) {
            if (subReferencias.children && subReferencias.children.length > 0) {
              const tieneContenidoUtil = subReferencias.children.length > 1 || subReferencias.children.length === 1 && !subReferencias.children[0].classList.contains("backlinks-tree-title");
              if (tieneContenidoUtil) {
                item.appendChild(subReferencias);
              }
            }
          }
        } catch (e) {
          console.error("Error en la recursi\xF3n para " + referencia.file.path, e);
          const errorMsg = dv.el("span", " (Error al obtener subreferencias)", { cls: "backlinks-tree-error" });
          item.appendChild(errorMsg);
        }
        lista.appendChild(item);
      } catch (e) {
        console.error("Error al procesar referencia:", e);
        continue;
      }
    }
    try {
      if (lista && lista.nodeType) {
        contenedor.appendChild(lista);
      }
    } catch (e) {
      console.error("Error al a\xF1adir lista al contenedor:", e);
      const errorMsg = dv.el("p", "Error al generar estructura de \xE1rbol", { cls: "backlinks-tree-error" });
      contenedor.appendChild(errorMsg);
    }
    return contenedor;
  }
  /**
   * Muestra enlaces sincronizados en Notion desde el frontmatter 
   * que comienzan con el prefijo "link-"
   * @param dv El objeto dataview para acceder a sus funciones
   * @param pagina La página actual (normalmente dv.current())
   * @returns El contenedor con los resultados
   */
  mostrarEnlacesSincronizados(dv, pagina) {
    const contenedor = dv.el("div", "", { cls: "notion-links-container" });
    try {
      const meta = pagina.file.frontmatter;
      if (!meta) {
        const mensaje = dv.el("p", "No se encontr\xF3 frontmatter en esta nota.", { cls: "notion-links-message" });
        contenedor.appendChild(mensaje);
        return contenedor;
      }
      const typeName = meta.typeName || "Elemento";
      const linkFields = Object.entries(meta).filter(([key, value]) => key.startsWith("link-") && typeof value === "string" && value.startsWith("http")).map(([key, value]) => ({
        url: value
      }));
      if (linkFields.length > 0) {
        linkFields.forEach((field) => {
          const parrafo = document.createElement("p");
          parrafo.classList.add("notion-link-item");
          parrafo.textContent = `${typeName} sincronizado en Notion en `;
          const enlace = document.createElement("a");
          enlace.href = field.url;
          enlace.textContent = field.url;
          enlace.target = "_blank";
          enlace.rel = "noopener noreferrer";
          parrafo.appendChild(enlace);
          contenedor.appendChild(parrafo);
        });
      } else {
        const mensaje = dv.el("p", "No se encontraron enlaces sincronizados en Notion.", { cls: "notion-links-message" });
        contenedor.appendChild(mensaje);
      }
    } catch (error) {
      console.error("Error al procesar enlaces sincronizados:", error);
      const errorMsg = dv.el("p", "Error al procesar enlaces sincronizados. Consulta la consola para m\xE1s detalles.", { cls: "notion-links-error" });
      contenedor.appendChild(errorMsg);
    }
    return contenedor;
  }
};

// src/modules/noteLifecycleManager/API/YAMLUpdaterAPI.ts
var import_obsidian52 = require("obsidian");

// src/modules/moduloRegistroTiempo/modals/cambioHF.ts
var import_obsidian51 = require("obsidian");
var modal_cambioHF = class extends import_obsidian51.Modal {
  constructor(plugin, file) {
    super(plugin.app);
    this.plugin = plugin;
    this.file = file;
  }
  async onOpen() {
    var _a, _b;
    debugger;
    this.containerEl.classList.add("modalInbox");
    const { contentEl } = this;
    debugger;
    const metadata = this.plugin.app.metadataCache.getFileCache(this.file.file);
    const aliases = ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.aliases) || "Actividad sin alias";
    const horaFinStr = ((_b = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _b.horaFinal) ? window.moment(metadata.frontmatter.horaFinal, "YYYY-MM-DD dddd HH:mm").format("YYYY-MM-DDTHH:mm") : "";
    contentEl.createEl("h2", { text: `Cambio hora cierre de registro.` });
    contentEl.createEl("p", { text: `Tarea: "${aliases[0]}"` });
    contentEl.createEl("p", { text: "Hora de cierre registro:" });
    this.horaFinalInput = contentEl.createEl("input", {
      type: "datetime-local",
      value: horaFinStr
    });
    const saveButton = contentEl.createEl("button", { text: "Guardar cambios" });
    saveButton.onclick = () => this.guardarCambios();
  }
  async guardarCambios() {
    const nuevaHoraFinalLocal = this.horaFinalInput.value;
    if (!nuevaHoraFinalLocal) {
      new import_obsidian51.Notice("Por favor, seleccione una hora de cierre.");
      return;
    }
    const nuevaHoraFinal = window.moment(nuevaHoraFinalLocal).format("YYYY-MM-DD dddd HH:mm");
    try {
      debugger;
      let campos = ["fecha", `horaFinal_${nuevaHoraFinal}`, `tiempoTrabajado_${nuevaHoraFinal}`, "estado_\u{1F535}"];
      let resultado = await this.plugin.YAMLUpdaterAPI.actualizarNota(this.file, campos);
      this.close();
      new import_obsidian51.Notice("Hora de Finalizaci\xF3n actualizada correctamente.");
    } catch (error) {
      console.error("Error al guardar cambios en la nota:", error);
      new import_obsidian51.Notice("Error al guardar los cambios en la nota.");
    }
  }
};

// src/modules/noteLifecycleManager/API/YAMLUpdaterAPI.ts
var YAMLUpdaterAPI2 = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.infoNota = {};
    this.nota = {};
    this.tp = this.getTp();
    this.pathCampos = this.plugin.settings.file_camposCentral + ".md";
  }
  async actualizarNota(infoNota, campos) {
    var _a;
    Object.assign(this.infoNota, infoNota);
    try {
      for (let campo of campos) {
        const partes = campo.split("_");
        let campoName, functionName;
        let parametro = null;
        if (partes.length > 1) {
          functionName = `get${partes[0].charAt(0).toUpperCase() + partes[0].slice(1)}`;
          campoName = partes[0];
          parametro = partes[1];
        } else {
          campoName = partes[0];
          functionName = `get${campo.charAt(0).toUpperCase() + campo.slice(1)}`;
        }
        let metadata = (_a = app.metadataCache.getFileCache(this.infoNota.file)) == null ? void 0 : _a.frontmatter;
        let valorActualCampo = metadata[campoName] || "Sin definir";
        if (typeof this[functionName] === "function") {
          if (parametro !== null) {
            this.nota[campoName] = await this[functionName](parametro, valorActualCampo);
          } else {
            this.nota[campoName] = await this[functionName]();
          }
        } else {
          console.error(`La funci\xF3n ${functionName} no est\xE1 definida.`);
        }
      }
      if (Object.keys(this.nota).length > 0) {
        await this.updateYAMLFields(this.nota, infoNota.file.path);
      } else {
      }
    } catch (error) {
      console.error("No se pudo crear el objeto de registro.", error);
      new import_obsidian52.Notice("No se pudo crear el objeto de registro.");
      return null;
    }
    return this.nota;
  }
  async archivarNota(infoNota, campos) {
    let nota = {};
    Object.assign(this.infoNota, infoNota);
    try {
      for (let campo of campos) {
        const functionName = `get${campo.charAt(0).toUpperCase() + campo.slice(1)}`;
        if (typeof this[functionName] === "function") {
          nota[campo] = await this[functionName]();
        } else {
          console.error(`La funci\xF3n ${functionName} no est\xE1 definida.`);
        }
      }
      nota.estado = "\u{1F535}";
      if (Object.keys(nota).length > 0) {
        await this.updateYAMLFields(nota, infoNota.file.path);
      } else {
      }
    } catch (error) {
      console.error("No se pudo crear el objeto de registro.", error);
      new import_obsidian52.Notice("No se pudo crear el objeto de registro.");
      return null;
    }
    return nota;
  }
  async updateYAMLFields(nota, ruta) {
    try {
      const file = app.vault.getAbstractFileByPath(ruta);
      await app.fileManager.processFrontMatter(file, (frontmatter) => {
        for (const campo in nota) {
          if (frontmatter.hasOwnProperty(campo)) {
            frontmatter[campo] = nota[campo];
          }
        }
      });
      console.log("Frontmatter actualizado con \xE9xito");
    } catch (err) {
      console.error("Error al actualizar el frontmatter", err);
    }
  }
  getTp() {
    if (!this.plugin || !this.plugin.app.plugins.enabledPlugins.has("templater-obsidian")) {
      console.error("El plugin Templater no est\xE1 habilitado.");
      return;
    }
    let tpGen = this.plugin.app.plugins.plugins["templater-obsidian"].templater;
    tpGen = tpGen.functions_generator.internal_functions.modules_array;
    let tp = {};
    tp.system = tpGen.find((m) => m.name == "system");
    if (!tp.system) {
      console.error("No se pudo acceder al objeto de funciones actuales de Templater.");
      return;
    }
    console.log("tp en YAMLUpdaterAPI se ha cargado satisfactoriamente");
    return tp;
  }
  async getFecha(flag, actual) {
    return this.formatearFecha(/* @__PURE__ */ new Date());
  }
  formatearFecha(fecha) {
    const offset2 = fecha.getTimezoneOffset() * 6e4;
    const fechaLocal = new Date(fecha.getTime() - offset2);
    const fechaFormato = fechaLocal.toISOString().split("T")[0];
    const dias = ["Domingo", "Lunes", "Martes", "Mi\xE9rcoles", "Jueves", "Viernes", "S\xE1bado"];
    const diaSemana = dias[fecha.getDay()];
    const horaFormato = fecha.toTimeString().split(" ")[0].substring(0, 5);
    return `${fechaFormato} ${diaSemana} ${horaFormato}`;
  }
  async getHoraFinal(parametro, actual) {
    debugger;
    if (parametro === void 0) {
      return this.formatearFecha(/* @__PURE__ */ new Date());
    } else {
      return parametro;
    }
  }
  async getTiempoTrabajado(parametro, actual) {
    debugger;
    let horaInicioStr = this.infoNota.horaInicio;
    let cierre;
    let [fecha, , hora] = horaInicioStr.split(" ");
    let fechaHoraISO = `${fecha}T${hora}`;
    let horaInicio = new Date(fechaHoraISO);
    if (parametro == void 0) {
      cierre = /* @__PURE__ */ new Date();
    } else {
      let [fechaCierre, , horaCierre] = parametro.split(" ");
      let fechaHoraCierreISO = `${fechaCierre}T${horaCierre}`;
      cierre = new Date(fechaHoraCierreISO);
    }
    let diferenciaEnMilisegundos = cierre - horaInicio;
    return diferenciaEnMilisegundos;
  }
  async getSecId(flag, actual) {
  }
  async getTitulo(flag, actual) {
    let titulo = await this.tp.system.prompt(`Titulo de este(a) ${this.infoSubsistema.name}`, `${this.infoSubsistema.name} - ${this.nota.id}`, true);
    if (titulo === null) {
      new import_obsidian52.Notice("Creaci\xF3n de nota cancelada por el usuario.");
      return;
    }
    this.nota.titulo = titulo;
    return titulo;
  }
  async getDescripcion(flag, actual) {
    let prompt = this.tp.system.static_functions.get("prompt");
    let descripcion;
    switch (flag) {
      case "RegistroTiempo":
        descripcion = await prompt("\xBFDetalle del Registro Tiempo:", actual, false, true);
        break;
      default:
        descripcion = await prompt("\xBFQuieres agregar una descripci\xF3n?", ` Esta nota es sobre ${this.nota.titulo}`, false, true);
        break;
    }
    if (descripcion === null) {
      new import_obsidian52.Notice("Creaci\xF3n de nota cancelada por el usuario.");
      return;
    }
    this.nota.descripcion = descripcion;
    return descripcion;
  }
  async getAliases(flag, actual) {
    this.nota.aliases = [];
    switch (this.infoSubsistema.type) {
      case "Ax":
        this.nota.aliases.push(`${this.nota.titulo}`);
        this.nota.aliases.push(`${this.infoSubsistema.type} - ${this.nota.titulo}`);
        break;
      case "AV":
      case "AI":
        break;
    }
    return this.nota.aliases;
  }
  async getAsunto(flag, actual) {
    let siAsunto, nombre;
    let activo = app.workspace.getActiveFile();
    if (activo != null) {
      nombre = activo.basename;
      const nota = app.metadataCache.getFileCache(activo);
      siAsunto = await this.tp.system.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
    } else {
      siAsunto = false;
      nombre = "";
    }
    this.nota.asunto = {};
    this.nota.asunto.siAsunto = siAsunto;
    this.nota.asunto.nombre = nombre;
    return { siAsunto, nombre };
  }
  async getClasificacion(flag, actual) {
    var _a;
    let clasificacion2, tagClasificacion2, clasificacionAX, tagsClasificacionAX;
    let nuevaClasificacion2 = false;
    const file = app.vault.getAbstractFileByPath(this.pathCampos);
    const frontmatter = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    if (frontmatter) {
      clasificacionAX = frontmatter.tituloClasificacionAX || [];
      tagsClasificacionAX = frontmatter.tagsClasificacionAX || [];
      tagClasificacion2 = await this.tp.system.suggester(clasificacionAX, tagsClasificacionAX, false, "\xBFClasificar\xEDas esta nota bajo alguna de las siguientes categor\xEDas?");
      if (tagClasificacion2 === null) {
        new import_obsidian52.Notice("Creaci\xF3n de nota cancelada por el usuario.");
        return;
      } else if (tagClasificacion2 == "Nuevo") {
        clasificacion2 = await this.tp.system.prompt("\xBFCual es el nombre de la nueva clasificaci\xF3n que vas a ingresar?", "MiClasificaci\xF3n", true);
        if (clasificacion2 === null) {
          new import_obsidian52.Notice("Creaci\xF3n de nota cancelada por el usuario.");
          return;
        }
        tagClasificacion2 = await this.tp.system.prompt("\xBFCual es el tag que utilizaras para " + clasificacion2 + "?. No utilices espacios en la definici\xF3n del tag.", "nuevoTag", true);
        if (tagClasificacion2 === null) {
          new import_obsidian52.Notice("Creaci\xF3n de nota cancelada por el usuario.");
          return;
        }
        nuevaClasificacion2 = true;
      } else if (tagClasificacion2 == "Ninguna") {
        tagClasificacion2 = "";
        clasificacion2 = "";
      } else {
        let indice = tagsClasificacionAX.indexOf(tagClasificacion2);
        clasificacion2 = clasificacionAX[indice];
      }
    }
    if (nuevaClasificacion2) {
      try {
        await app.fileManager.processFrontMatter(file, (frontmatter2) => {
          let newClasificacion = [...clasificacionAX, clasificacion2];
          let newTagClasificacion = [...tagsClasificacionAX, tagClasificacion2];
          frontmatter2.tituloClasificacionAX = newClasificacion;
          frontmatter2.tagsClasificacionAX = newTagClasificacion;
          console.log("Frontmatter actualizado con \xE9xito");
        });
      } catch (err) {
        console.error("Error al actualizar el frontmatter", err);
      }
    }
    if (tagClasificacion2 != "") {
      tagClasificacion2 = "cl/" + tagClasificacion2;
    }
    this.nota.clasificacionAX = clasificacion2;
    this.nota.tagClasificacionAX = tagClasificacion2;
    return { clase: clasificacion2, tag: tagClasificacion2 };
  }
  // ->
  async getEstado(parametro, actual) {
    debugger;
    let campo;
    if (parametro == void 0) {
      let suggester = this.tp.system.static_functions.get("suggester");
      campo = await suggester(["\u{1F535} -> Completado - Informaci\xF3n", "\u{1F7E2} -> Finalizado", "\u{1F7E1} -> En ejecuci\xF3n", "\u{1F534} -> Detenido"], ["\u{1F535}", "\u{1F7E2}", "\u{1F7E1}", "\u{1F534}"], false, "Seleccione el nuevo estado:");
      if (campo === null) {
        new import_obsidian52.Notice("Modificaci\xF3n de nota cancelada por el usuario.");
        return;
      }
    } else {
      campo = parametro;
    }
    this.nota.estado = campo;
    return campo;
  }
  async getFilename(flag, actual) {
    switch (this.infoSubsistema.type) {
      case "AV":
      case "AI":
        this.nota.fileName = `${this.infoSubsistema.folder}/${this.nota.titulo}/index${this.infoSubsistema.type}`;
        break;
      case "Ax":
        this.nota.fileName = `${this.infoSubsistema.folder}/${this.infoSubsistema.type} - ${this.nota.id}`;
        break;
    }
    return this.nota.fileName;
  }
  async modalCambioHF(nota) {
    debugger;
    let modal = new modal_cambioHF(this.plugin, nota);
    modal.open();
  }
};

// src/modules/noteLifecycleManager/API/menuDiarioAPI.ts
var import_obsidian53 = require("obsidian");
init_luxon();
init_utilsAPI();
init_registroTiempoAPI();
var menuHoyAPI = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.app = plugin.app;
    this.registroTiempoAPI = new registroTiempoAPI(this.plugin);
  }
  // Función para crear y mostrar el botón inicial "Menú hoy"
  async mostrarMenu(dv) {
    dv.container.innerHTML = "";
    const botonMenuHoy = document.createElement("button");
    botonMenuHoy.textContent = "Men\xFA hoy";
    dv.container.appendChild(botonMenuHoy);
    botonMenuHoy.onclick = async () => {
      await this.mostrarBotones(dv);
    };
  }
  // Método modificado para adaptarse al contexto del plugin
  async mostrarBotones(dv) {
    dv.container.innerHTML = "";
    const botones = [
      "H\xE1bitos",
      "Balance",
      "Registro de Tareas",
      "Notas d\xEDa",
      "Personales"
    ];
    botones.forEach((textoBoton) => {
      const boton = document.createElement("button");
      boton.textContent = textoBoton;
      boton.onclick = async () => {
        switch (textoBoton) {
          case "Balance":
            await this.mostrarBotonBalancePersonal(dv);
            break;
          case "H\xE1bitos":
            await this.mostrarFormularioHabitos(dv);
            break;
          case "Registro de Tareas":
            await this.mostrarBotonRegistroTareas(dv);
            break;
          case "Notas d\xEDa":
            await this.mostrarBotonesNotasD\u00EDa(dv);
            break;
          case "Personales":
            await this.mostrarBotonesNotasPersonales(dv);
            break;
          default:
            console.log(`${textoBoton} presionado.`);
            break;
        }
      };
      dv.container.appendChild(boton);
    });
    const botonSalir = this.agregarBotonSalir(dv);
    dv.container.appendChild(botonSalir);
  }
  // Método para agregar el botón de recarga y su lógica (Ejemplo adaptado)
  agregarBotonSalir(dv) {
    const botonRecarga = document.createElement("button");
    botonRecarga.textContent = "Salir";
    botonRecarga.onclick = async () => {
      await this.mostrarMenu(dv);
    };
    return botonRecarga;
  }
  // Método para actualizar campos YAML
  async updateYAMLFields(filePath, YAMLfield, valor) {
    try {
      const file = app.vault.getAbstractFileByPath(filePath);
      if (file instanceof import_obsidian53.TFile) {
        try {
          await app.fileManager.processFrontMatter(file, (frontmatter) => {
            frontmatter[YAMLfield] = valor;
          });
          new import_obsidian53.Notice("YAML actualizado con \xE9xito.");
        } catch (err) {
          console.error("Error al actualizar el frontmatter", err);
        }
      }
    } catch (err) {
      console.error("Archivo no encontrado", err);
      new import_obsidian53.Notice("Error al actualizar el YAML.");
    }
  }
  // Método adaptado para mostrarBotonBalancePersonal
  async mostrarBotonBalancePersonal(dv) {
    var _a;
    dv.container.innerHTML = "";
    const mensaje = document.createElement("h2");
    mensaje.textContent = "Eval\xFAa el balance de tu vida hoy";
    dv.container.appendChild(mensaje);
    const instrucciones = document.createElement("p");
    instrucciones.textContent = "Eval\xFAa de 1 a 5 cada \xE1rea:";
    dv.container.appendChild(instrucciones);
    const areas = [
      "Productividad",
      "Espiritual",
      "Salud",
      "Rutinas",
      "Vida Social",
      "Familiar",
      "Aprendizajes",
      "Creatividad"
    ];
    const file = app.workspace.getActiveFile();
    let metadata;
    if (file instanceof import_obsidian53.TFile) {
      metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    }
    areas.forEach((area) => {
      const safeName = area.toLowerCase().replace(/ /g, "_");
      const currentVal = metadata && metadata[safeName] ? metadata[safeName] : 0;
      const contenedorArea = document.createElement("div");
      contenedorArea.classList.add("area-evaluacion");
      const label = document.createElement("label");
      label.textContent = area + ": ";
      label.htmlFor = safeName;
      const input = document.createElement("input");
      input.type = "range";
      input.id = safeName;
      input.name = safeName;
      input.min = "1";
      input.max = "5";
      input.value = currentVal.toString();
      const valorLabel = document.createElement("span");
      valorLabel.textContent = input.value;
      input.oninput = () => valorLabel.textContent = input.value;
      contenedorArea.appendChild(label);
      contenedorArea.appendChild(input);
      contenedorArea.appendChild(valorLabel);
      dv.container.appendChild(contenedorArea);
    });
    const botonGuardar = document.createElement("button");
    botonGuardar.textContent = "Guardar";
    botonGuardar.onclick = async () => {
      if (file instanceof import_obsidian53.TFile) {
        for (const area of areas) {
          const safeName = area.toLowerCase().replace(/ /g, "_");
          const inputElement = document.getElementById(safeName);
          const valor = parseInt(inputElement.value, 10);
          await this.updateYAMLFields(file.path, safeName, valor);
        }
        new import_obsidian53.Notice("Balances actualizados con \xE9xito.");
      } else {
        new import_obsidian53.Notice("No se pudo obtener el archivo actual.");
      }
    };
    dv.container.appendChild(botonGuardar);
    const botonSalir = this.agregarBotonSalir(dv);
    dv.container.appendChild(botonSalir);
  }
  async mostrarFormularioHabitos(dv) {
    dv.container.innerHTML = "";
    const habitos = [
      "Club 5am",
      "Registro Ak\xE1shiko",
      "Gimnasio",
      "Comer Saludable",
      "Leer libro",
      "Escribir bit\xE1cora el mismo d\xEDa",
      "Crear plan d\xEDa siguiente",
      "Me fu\xED a dormir antes de las 10:30pm"
    ];
    const cargarCheckboxesSeleccionados = async () => {
      var _a;
      const file = app.workspace.getActiveFile();
      const fileContent = await app.vault.read(file);
      const frontMatter = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      const existingHabits = (frontMatter == null ? void 0 : frontMatter.habitos) || [];
      habitos.forEach((habito) => {
        const container = document.createElement("div");
        const checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.id = habito;
        checkbox.name = "habitos";
        checkbox.value = habito;
        checkbox.checked = existingHabits.includes(habito);
        const label = document.createElement("label");
        label.htmlFor = habito;
        label.textContent = habito;
        container.appendChild(checkbox);
        container.appendChild(label);
        dv.container.appendChild(container);
      });
    };
    await cargarCheckboxesSeleccionados();
    const guardarBtn = document.createElement("button");
    guardarBtn.textContent = "Guardar";
    guardarBtn.onclick = async () => {
      const file = app.workspace.getActiveFile();
      const checkboxes = Array.from(document.querySelectorAll('input[name="habitos"]:checked'));
      const selectedHabits = checkboxes.map((checkbox) => checkbox.value);
      await this.updateYAMLFields(file.path, "habitos", selectedHabits);
    };
    dv.container.appendChild(guardarBtn);
    const botonSalir = this.agregarBotonSalir(dv);
    dv.container.appendChild(botonSalir);
  }
  // Método adaptado para mostrarBotonBalancePersonal
  async mostrarBotonRegistroTareas(dv) {
    dv.container.innerHTML = "";
    let botones;
    const utilsAPInstance = new utilsAPI(this.plugin);
    const activo = await utilsAPInstance.buscarRegistrosActivos(app);
    if (activo instanceof import_obsidian53.TFile) {
      botones = ["Cerradas Hoy", "Registros Hoy", "Nuevo Registro Tiempo", "Cerrar Registro Tiempo"];
    } else {
      botones = ["Cerradas Hoy", "Registros Hoy", "Nuevo Registro Tiempo"];
    }
    botones.forEach((textoBoton) => {
      const boton = document.createElement("button");
      boton.textContent = textoBoton;
      boton.onclick = async () => {
        switch (textoBoton) {
          case "Cerradas Hoy":
            await this.mostrarCerradasHoy(dv);
            break;
          case "Registros Hoy":
            await this.mostrarRegistrosHoy(dv);
            break;
          case "Cerrar Registro Tiempo":
            debugger;
            await this.registroTiempoAPI.cerrarRegistro(activo);
            break;
          case "Nuevo Registro Tiempo":
            const starterAPInstance = new starterAPI(this.plugin);
            await starterAPInstance.createNote("RegistroTiempo");
            break;
          default:
            console.log(`${textoBoton} presionado.`);
            break;
        }
      };
      dv.container.appendChild(boton);
    });
    const botonSalir = this.agregarBotonSalir(dv);
    dv.container.appendChild(botonSalir);
  }
  async mostrarCerradasHoy(dv) {
    dv.container.innerHTML = "";
    const activo = app.workspace.getActiveFile();
    let fechaActivo = activo == null ? void 0 : activo.basename.split(" ")[0];
    const hoy = new Date(fechaActivo).setHours(0, 0, 0, 0);
    const files = app.vault.getMarkdownFiles();
    let tareasPromesas = files.map(async (file) => {
      var _a;
      let contenido = await app.vault.read(file);
      let tareasExtraidas = extraerTareas(contenido);
      const frontMatter = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      const alias = (frontMatter == null ? void 0 : frontMatter.aliases) ? frontMatter.aliases[0] : null;
      const filePath = file.path;
      return {
        filePath,
        alias,
        tareas: tareasExtraidas.filter((tarea) => {
          let fechaTarea = new Date(tarea.completionDate).setHours(0, 0, 0, 0);
          return tarea.completed && tarea.completionDate && fechaTarea === hoy;
        })
      };
    });
    let resultados = await Promise.all(tareasPromesas);
    let totalTareasCerradas = resultados.reduce((total, { tareas }) => total + tareas.length, 0);
    if (totalTareasCerradas > 0) {
      dv.header(3, `Hoy se han cerrado ${totalTareasCerradas} tareas.`);
      const table = document.createElement("table");
      table.classList.add("table");
      table.style.width = "100%";
      const headerRow = document.createElement("tr");
      let headers = ["Nota", "Tareas Cerradas"];
      headers.forEach((headerText) => {
        let header = document.createElement("th");
        header.textContent = headerText;
        header.style.textAlign = "center";
        headerRow.appendChild(header);
      });
      table.appendChild(headerRow);
      resultados.forEach(({ filePath, alias, tareas }) => {
        if (tareas.length > 0) {
          let row = document.createElement("tr");
          let linkCell = document.createElement("td");
          linkCell.style.verticalAlign = "middle";
          let a = document.createElement("a");
          a.setAttribute("href", `obsidian://open?vault=${app.vault.getName()}&file=${encodeURIComponent(filePath)}`);
          a.textContent = alias || filePath;
          linkCell.appendChild(a);
          row.appendChild(linkCell);
          let tasksCell = document.createElement("td");
          let tasksList = document.createElement("ul");
          tareas.forEach((tarea) => {
            let li = document.createElement("li");
            li.textContent = tarea.text;
            tasksList.appendChild(li);
          });
          tasksCell.appendChild(tasksList);
          row.appendChild(tasksCell);
          table.appendChild(row);
        }
      });
      dv.container.appendChild(table);
    } else {
      dv.paragraph("No hay tareas cerradas hoy.");
    }
    const botonSalir = this.agregarBotonSalir(dv);
    dv.container.appendChild(botonSalir);
    function extraerTareas(contenido) {
      const tareas = [];
      const lineas = contenido.split("\n");
      for (const linea of lineas) {
        const tareaRegex = /^\s*-\s*\[(x|X| )\]\s*(.+)$/;
        const match2 = tareaRegex.exec(linea);
        if (match2) {
          const completada = match2[1].toLowerCase() === "x";
          let textoTarea = match2[2];
          let fechaCompletitud = null;
          const fechaRegex = /\[completion:: (\d{4}-\d{2}-\d{2})\]/;
          const fechaMatch = fechaRegex.exec(textoTarea);
          if (fechaMatch) {
            fechaCompletitud = fechaMatch[1];
            textoTarea = textoTarea.replace(fechaRegex, "").trim();
          }
          tareas.push({
            text: textoTarea,
            completed: completada,
            completionDate: fechaCompletitud
          });
        }
      }
      return tareas;
    }
  }
  async mostrarRegistrosHoy(dv) {
    var _a, _b;
    const activeLeaf = app.workspace.activeLeaf;
    const currentFilePath = (_b = (_a = activeLeaf.view) == null ? void 0 : _a.file) == null ? void 0 : _b.path;
    const newLeaf = await app.workspace.splitActiveLeaf("vertical");
    await newLeaf.setViewState({
      type: "vista-registro-diario"
    });
    app.workspace.revealLeaf(newLeaf);
  }
  createButtonTable(buttonText, onClickCallback) {
    const button = document.createElement("button");
    button.textContent = buttonText;
    button.type = "button";
    button.classList.add("your-button-class");
    button.addEventListener("click", onClickCallback);
    return button;
  }
  // Crea la nota desde el templater de RegistroTiempo
  async retomarTarea(id) {
    debugger;
    const filePath = `Plantillas/${this.plugin.settings[`folder_RegistroTiempo`]}/Plt - RegistroTiempo.md`;
    const template = app.vault.getAbstractFileByPath(filePath);
    if (template instanceof import_obsidian53.TFile) {
      console.log("Archivo encontrado:", template);
    } else {
      console.log("Archivo no encontrado.");
    }
    const filename = "Retomar " + id;
    const folder = app.vault.getAbstractFileByPath("Inbox");
    const tp = this.getTp();
    let crearNota = tp.file.static_functions.get("create_new");
    await crearNota(template, filename, false, folder).basename;
  }
  getTp() {
    if (!this.plugin || !this.plugin.app.plugins.enabledPlugins.has("templater-obsidian")) {
      console.error("El plugin Templater no est\xE1 habilitado.");
      return;
    }
    let tpGen = this.plugin.app.plugins.plugins["templater-obsidian"].templater;
    tpGen = tpGen.functions_generator.internal_functions.modules_array;
    let tp = {};
    tp.file = tpGen.find((m) => m.name == "file");
    tp.system = tpGen.find((m) => m.name == "system");
    if (!tp.file) {
      console.error("No se pudo acceder al objeto de funciones actuales de Templater.");
      return;
    }
    console.log('tp con propiedades "file" se ha cargado satisfactoriamente');
    return tp;
  }
};

// src/modules/noteLifecycleManager/API/menuSemanalAPI.ts
var import_obsidian55 = require("obsidian");
init_luxon();
init_utilsAPI();

// src/modules/noteLifecycleManager/views/vistaResumenSemanal.ts
var import_obsidian54 = require("obsidian");
init_luxon();
var VistaResumenSemanal = class extends import_obsidian54.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  getViewType() {
    return "vista-resumen-semanal";
  }
  getDisplayText() {
    return "Resumen Semanal";
  }
  getIcon() {
    return "history";
  }
  async onOpen() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      this.contentEl.setText("No hay un archivo activo.");
      return;
    }
    const fileCache = this.app.metadataCache.getFileCache(activeFile);
    await this.actualizarVista(fileCache);
    this.intervalId = window.setInterval(async () => {
      await this.actualizarVista(fileCache);
    }, 1e4);
  }
  onClose() {
    clearInterval(this.intervalId);
  }
  async actualizarVista(fileCache) {
    var _a;
    this.contentEl.empty();
    const inicioWStr = (_a = fileCache.frontmatter) == null ? void 0 : _a.inicioW;
    if (!inicioWStr) {
      this.contentEl.setText("La configuraci\xF3n de inicioW no est\xE1 establecida.");
      return;
    }
    const folderDiario = "Estructura/Journal/Diario/Notas";
    const inicioW = DateTime.fromFormat(inicioWStr, "yyyy-MM-dd EEEE", { locale: "es" });
    const finW = inicioW.plus({ days: 6 });
    const archivosDiario = this.app.vault.getFiles().filter((file) => file.path.startsWith(folderDiario) && file.extension === "md");
    const bitacoras = archivosDiario.map((file) => {
      var _a2;
      const fechaArchivo = DateTime.fromISO(file.basename.substring(0, 10));
      const datos = (_a2 = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a2.frontmatter;
      return {
        archivo: file.basename,
        path: file.path,
        fechaArchivo,
        datos
      };
    }).filter(({ fechaArchivo }) => fechaArchivo >= inicioW && fechaArchivo <= finW).sort((a, b) => a.fechaArchivo.toMillis() - b.fechaArchivo.toMillis());
    let trim = finW.quarter;
    let sem = finW.weekNumber - (finW.quarter - 1) * 13;
    if (sem == 0) {
      sem = 13;
    }
    const titulo = this.contentEl.createEl("h2", { text: `Resumen de la semana ${sem} - Q${trim} / W${finW.toFormat("WW")}.` });
    const subtitulo = this.contentEl.createEl("h3", { text: `Desde el ${inicioW.toFormat("EEEE, DD")} al ${finW.toFormat("EEEE, DD")}` });
    titulo.style.textAlign = "center";
    subtitulo.style.textAlign = "center";
    const table = document.createElement("table");
    table.className = "table-resumenSemanal";
    const thead = document.createElement("thead");
    const headerRow = document.createElement("tr");
    ["D\xEDa", "Resumen"].forEach((headerText) => {
      const th = document.createElement("th");
      th.textContent = headerText;
      headerRow.appendChild(th);
    });
    thead.appendChild(headerRow);
    table.appendChild(thead);
    const tbody = document.createElement("tbody");
    bitacoras.forEach(({ archivo, path, datos }) => {
      const tr = document.createElement("tr");
      const tdArchivo = document.createElement("td");
      const linkEl = document.createElement("a");
      linkEl.textContent = archivo;
      linkEl.href = path;
      linkEl.onclick = async (ev) => {
        ev.preventDefault();
        const file = this.app.vault.getAbstractFileByPath(path);
        if (file instanceof import_obsidian54.TFile) {
          await this.app.workspace.getLeaf(false).openFile(file, { eState: { focus: true } });
        }
      };
      tdArchivo.appendChild(linkEl);
      const tdResumen = document.createElement("td");
      const ul = document.createElement("ul");
      (datos.titulo || ["Sin t\xEDtulo"]).forEach((titulo2) => {
        const li = document.createElement("li");
        li.textContent = titulo2;
        ul.appendChild(li);
      });
      tdResumen.appendChild(ul);
      tr.appendChild(tdArchivo);
      tr.appendChild(tdResumen);
      tbody.appendChild(tr);
    });
    table.appendChild(tbody);
    this.contentEl.appendChild(table);
  }
  // Opcional: Implementa onClose si necesitas limpieza al cerrar la vista.
};

// src/modules/noteLifecycleManager/API/menuSemanalAPI.ts
var menuSemanalAPI = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.app = plugin.app;
  }
  // Función para crear y mostrar el botón inicial "Menú hoy"
  async mostrarMenu(dv) {
    dv.container.innerHTML = "";
    const botonMenuHoy = document.createElement("button");
    botonMenuHoy.textContent = "Men\xFA Semanal";
    dv.container.appendChild(botonMenuHoy);
    botonMenuHoy.onclick = async () => {
      await this.mostrarBotones(dv);
    };
  }
  // Método modificado para adaptarse al contexto del plugin
  async mostrarBotones(dv) {
    dv.container.innerHTML = "";
    const botones = [
      "Resumen diario",
      "Agradecimientos",
      "Creadas",
      "Modificadas",
      "x Fecha",
      "Tareas Cerradas"
    ];
    botones.forEach((textoBoton) => {
      const boton = document.createElement("button");
      boton.textContent = textoBoton;
      boton.onclick = async () => {
        switch (textoBoton) {
          case "Resumen diario":
            await this.mostrarResumenDiario(dv);
            break;
          case "Agradecimientos":
            await this.mostrarAgradecimientos(dv);
            break;
          case "Creadas":
            await this.mostrarCreadas(dv);
            break;
          case "Modificadas":
            await this.mostrarModificadas(dv);
            break;
          case "x Fecha":
            await this.mostrarxFecha(dv);
            break;
          case "Tareas Cerradas":
            await this.mostrarTareasCerradas(dv);
            break;
          default:
            console.log(`${textoBoton} presionado.`);
            break;
        }
      };
      dv.container.appendChild(boton);
    });
    const botonSalir = this.agregarBotonSalir(dv);
    dv.container.appendChild(botonSalir);
  }
  // Método para agregar el botón de recarga y su lógica (Ejemplo adaptado)
  agregarBotonSalir(dv) {
    const botonRecarga = document.createElement("button");
    botonRecarga.textContent = "Salir";
    botonRecarga.onclick = async () => {
      await this.mostrarMenu(dv);
    };
    return botonRecarga;
  }
  // Método para actualizar campos YAML
  async updateYAMLFields(filePath, YAMLfield, valor) {
    try {
      const file = app.vault.getAbstractFileByPath(filePath);
      if (file instanceof import_obsidian55.TFile) {
        try {
          await app.fileManager.processFrontMatter(file, (frontmatter) => {
            frontmatter[YAMLfield] = valor;
          });
          new import_obsidian55.Notice("YAML actualizado con \xE9xito.");
        } catch (err) {
          console.error("Error al actualizar el frontmatter", err);
        }
      }
    } catch (err) {
      console.error("Archivo no encontrado", err);
      new import_obsidian55.Notice("Error al actualizar el YAML.");
    }
  }
  async mostrarResumenDiario(dv) {
    var _a, _b;
    debugger;
    const activeLeaf = app.workspace.activeLeaf;
    const currentFilePath = (_b = (_a = activeLeaf.view) == null ? void 0 : _a.file) == null ? void 0 : _b.path;
    const newLeaf = await app.workspace.splitActiveLeaf("vertical");
    await newLeaf.setViewState({
      type: "vista-resumen-semanal"
    });
    app.workspace.revealLeaf(newLeaf);
  }
  // Método adaptado para mostrarBotonBalancePersonal
  async mostrarBotonBalancePersonal(dv) {
    var _a;
    dv.container.innerHTML = "";
    const mensaje = document.createElement("h2");
    mensaje.textContent = "Eval\xFAa el balance de tu vida hoy";
    dv.container.appendChild(mensaje);
    const instrucciones = document.createElement("p");
    instrucciones.textContent = "Eval\xFAa de 1 a 5 cada \xE1rea:";
    dv.container.appendChild(instrucciones);
    const areas = [
      "Productividad",
      "Espiritual",
      "Salud",
      "Rutinas",
      "Vida Social",
      "Familiar",
      "Aprendizajes",
      "Creatividad"
    ];
    const file = app.workspace.getActiveFile();
    let metadata;
    if (file instanceof import_obsidian55.TFile) {
      metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    }
    areas.forEach((area) => {
      const safeName = area.toLowerCase().replace(/ /g, "_");
      const currentVal = metadata && metadata[safeName] ? metadata[safeName] : 0;
      const contenedorArea = document.createElement("div");
      contenedorArea.classList.add("area-evaluacion");
      const label = document.createElement("label");
      label.textContent = area + ": ";
      label.htmlFor = safeName;
      const input = document.createElement("input");
      input.type = "range";
      input.id = safeName;
      input.name = safeName;
      input.min = "1";
      input.max = "5";
      input.value = currentVal.toString();
      const valorLabel = document.createElement("span");
      valorLabel.textContent = input.value;
      input.oninput = () => valorLabel.textContent = input.value;
      contenedorArea.appendChild(label);
      contenedorArea.appendChild(input);
      contenedorArea.appendChild(valorLabel);
      dv.container.appendChild(contenedorArea);
    });
    const botonGuardar = document.createElement("button");
    botonGuardar.textContent = "Guardar";
    botonGuardar.onclick = async () => {
      if (file instanceof import_obsidian55.TFile) {
        for (const area of areas) {
          const safeName = area.toLowerCase().replace(/ /g, "_");
          const inputElement = document.getElementById(safeName);
          const valor = parseInt(inputElement.value, 10);
          await this.updateYAMLFields(file.path, safeName, valor);
        }
        new import_obsidian55.Notice("Balances actualizados con \xE9xito.");
      } else {
        new import_obsidian55.Notice("No se pudo obtener el archivo actual.");
      }
    };
    dv.container.appendChild(botonGuardar);
    const botonSalir = this.agregarBotonSalir(dv);
    dv.container.appendChild(botonSalir);
  }
  async mostrarFormularioHabitos(dv) {
    dv.container.innerHTML = "";
    const habitos = [
      "Club 5am",
      "Registro Ak\xE1shiko",
      "Gimnasio",
      "Comer Saludable",
      "Leer libro",
      "Escribir bit\xE1cora el mismo d\xEDa",
      "Crear plan d\xEDa siguiente",
      "Me fu\xED a dormir antes de las 10:30pm"
    ];
    const cargarCheckboxesSeleccionados = async () => {
      var _a;
      const file = app.workspace.getActiveFile();
      const fileContent = await app.vault.read(file);
      const frontMatter = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      const existingHabits = (frontMatter == null ? void 0 : frontMatter.habitos) || [];
      habitos.forEach((habito) => {
        const container = document.createElement("div");
        const checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.id = habito;
        checkbox.name = "habitos";
        checkbox.value = habito;
        checkbox.checked = existingHabits.includes(habito);
        const label = document.createElement("label");
        label.htmlFor = habito;
        label.textContent = habito;
        container.appendChild(checkbox);
        container.appendChild(label);
        dv.container.appendChild(container);
      });
    };
    await cargarCheckboxesSeleccionados();
    const guardarBtn = document.createElement("button");
    guardarBtn.textContent = "Guardar";
    guardarBtn.onclick = async () => {
      const file = app.workspace.getActiveFile();
      const checkboxes = Array.from(document.querySelectorAll('input[name="habitos"]:checked'));
      const selectedHabits = checkboxes.map((checkbox) => checkbox.value);
      await this.updateYAMLFields(file.path, "habitos", selectedHabits);
    };
    dv.container.appendChild(guardarBtn);
    const botonSalir = this.agregarBotonSalir(dv);
    dv.container.appendChild(botonSalir);
  }
  // Método adaptado para mostrarBotonBalancePersonal
  async mostrarBotonRegistroTareas(dv) {
    dv.container.innerHTML = "";
    let botones;
    const utilsAPInstance = new utilsAPI(this.plugin);
    const activo = await utilsAPInstance.buscarRegistrosActivos(app);
    if (activo instanceof import_obsidian55.TFile) {
      botones = ["Cerradas Hoy", "Registros Hoy", "Nuevo Registro Tiempo", "Cerrar Registro Tiempo"];
    } else {
      botones = ["Cerradas Hoy", "Registros Hoy", "Nuevo Registro Tiempo"];
    }
    botones.forEach((textoBoton) => {
      const boton = document.createElement("button");
      boton.textContent = textoBoton;
      boton.onclick = async () => {
        switch (textoBoton) {
          case "Cerradas Hoy":
            await this.mostrarCerradasHoy(dv);
            break;
          case "Registros Hoy":
            await this.mostrarRegistrosHoy(dv);
            break;
          case "Cerrar Registro Tiempo":
            debugger;
            await this.registroTiempoAPI.cerrarRegistro(activo);
            break;
          case "Nuevo Registro Tiempo":
            const starterAPInstance = new starterAPI(this.plugin);
            await starterAPInstance.createNote("RegistroTiempo");
            break;
          default:
            console.log(`${textoBoton} presionado.`);
            break;
        }
      };
      dv.container.appendChild(boton);
    });
    const botonSalir = this.agregarBotonSalir(dv);
    dv.container.appendChild(botonSalir);
  }
  async mostrarCerradasHoy(dv) {
    dv.container.innerHTML = "";
    const activo = app.workspace.getActiveFile();
    let fechaActivo = activo == null ? void 0 : activo.basename.split(" ")[0];
    const hoy = new Date(fechaActivo).setHours(0, 0, 0, 0);
    const files = app.vault.getMarkdownFiles();
    let tareasPromesas = files.map(async (file) => {
      var _a;
      let contenido = await app.vault.read(file);
      let tareasExtraidas = extraerTareas(contenido);
      const frontMatter = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      const alias = (frontMatter == null ? void 0 : frontMatter.aliases) ? frontMatter.aliases[0] : null;
      const filePath = file.path;
      return {
        filePath,
        alias,
        tareas: tareasExtraidas.filter((tarea) => {
          let fechaTarea = new Date(tarea.completionDate).setHours(0, 0, 0, 0);
          return tarea.completed && tarea.completionDate && fechaTarea === hoy;
        })
      };
    });
    let resultados = await Promise.all(tareasPromesas);
    let totalTareasCerradas = resultados.reduce((total, { tareas }) => total + tareas.length, 0);
    if (totalTareasCerradas > 0) {
      dv.header(3, `Hoy se han cerrado ${totalTareasCerradas} tareas.`);
      const table = document.createElement("table");
      table.classList.add("table");
      table.style.width = "100%";
      const headerRow = document.createElement("tr");
      let headers = ["Nota", "Tareas Cerradas"];
      headers.forEach((headerText) => {
        let header = document.createElement("th");
        header.textContent = headerText;
        header.style.textAlign = "center";
        headerRow.appendChild(header);
      });
      table.appendChild(headerRow);
      resultados.forEach(({ filePath, alias, tareas }) => {
        if (tareas.length > 0) {
          let row = document.createElement("tr");
          let linkCell = document.createElement("td");
          linkCell.style.verticalAlign = "middle";
          let a = document.createElement("a");
          a.setAttribute("href", `obsidian://open?vault=${app.vault.getName()}&file=${encodeURIComponent(filePath)}`);
          a.textContent = alias || filePath;
          linkCell.appendChild(a);
          row.appendChild(linkCell);
          let tasksCell = document.createElement("td");
          let tasksList = document.createElement("ul");
          tareas.forEach((tarea) => {
            let li = document.createElement("li");
            li.textContent = tarea.text;
            tasksList.appendChild(li);
          });
          tasksCell.appendChild(tasksList);
          row.appendChild(tasksCell);
          table.appendChild(row);
        }
      });
      dv.container.appendChild(table);
    } else {
      dv.paragraph("No hay tareas cerradas hoy.");
    }
    const botonSalir = this.agregarBotonSalir(dv);
    dv.container.appendChild(botonSalir);
    function extraerTareas(contenido) {
      const tareas = [];
      const lineas = contenido.split("\n");
      for (const linea of lineas) {
        const tareaRegex = /^\s*-\s*\[(x|X| )\]\s*(.+)$/;
        const match2 = tareaRegex.exec(linea);
        if (match2) {
          const completada = match2[1].toLowerCase() === "x";
          let textoTarea = match2[2];
          let fechaCompletitud = null;
          const fechaRegex = /\[completion:: (\d{4}-\d{2}-\d{2})\]/;
          const fechaMatch = fechaRegex.exec(textoTarea);
          if (fechaMatch) {
            fechaCompletitud = fechaMatch[1];
            textoTarea = textoTarea.replace(fechaRegex, "").trim();
          }
          tareas.push({
            text: textoTarea,
            completed: completada,
            completionDate: fechaCompletitud
          });
        }
      }
      return tareas;
    }
  }
  async mostrarRegistrosHoy(dv) {
    var _a;
    dv.container.innerHTML = "";
    const fechaHoy = DateTime.fromFormat(app.workspace.getActiveFile().basename.split(" ")[0], "yyyy-MM-dd", { locale: "es" });
    const folder = this.plugin.settings.folder_RegistroTiempo;
    const files = app.vault.getMarkdownFiles().filter((file) => file.path.includes(folder));
    let totalDia = 0;
    let registrosHoy = [];
    for (let file of files) {
      let metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if (metadata == null ? void 0 : metadata.horaInicio) {
        let horaInicio = DateTime.fromFormat(metadata.horaInicio, "yyyy-MM-dd EEEE HH:mm", { locale: "es" });
        const startOfDay = horaInicio.startOf("day");
        if (startOfDay.ts === fechaHoy.startOf("day").ts) {
          registrosHoy.push({ path: file.path, frontmatter: metadata });
          totalDia += metadata.tiempoTrabajado ? parseInt(metadata.tiempoTrabajado) : 0;
        }
      }
    }
    dv.header(3, "Tiempo registrado hoy: " + Duration.fromMillis(totalDia).toFormat("hh:mm:ss"));
    registrosHoy.sort((a, b) => {
      if (typeof a.frontmatter.horaInicio === "string" && typeof b.frontmatter.horaInicio === "string") {
        try {
          const millisA = DateTime.fromFormat(a.frontmatter.horaInicio, "yyyy-MM-dd EEEE HH:mm", { locale: "es" }).toMillis();
          const millisB = DateTime.fromFormat(b.frontmatter.horaInicio, "yyyy-MM-dd EEEE HH:mm", { locale: "es" }).toMillis();
          return millisB - millisA;
        } catch (e) {
          console.error("Error parsing dates:", e);
          return 0;
        }
      } else {
        console.warn("Invalid date format for sorting:", a.horaInicio, b.horaInicio);
        return 0;
      }
    });
    if (registrosHoy.length > 0) {
      const table = dv.container.createEl("table", { cls: "dataview table" });
      table.style.width = "100%";
      const header = dv.el("tr", "", table);
      ["Registro", "Descripci\xF3n", "Hora Inicio", "Tiempo", "Estado", "Id", "Acci\xF3n"].forEach((text) => dv.el("th", text, header));
      registrosHoy.forEach((registro) => {
        const row = dv.el("tr", "", table);
        dv.el("td", dv.func.link(registro.path, registro.frontmatter.aliases[0]), row);
        dv.el("td", registro.frontmatter.descripcion ? registro.frontmatter.descripcion : "Sin descripci\xF3n", row);
        dv.el("td", DateTime.fromFormat(registro.frontmatter.horaInicio, "yyyy-MM-dd EEEE HH:mm", { locale: "es" }).toFormat("h:mm a") + " / " + DateTime.fromFormat(registro.frontmatter.horaFinal, "yyyy-MM-dd EEEE HH:mm", { locale: "es" }).toFormat("h:mm a"), row);
        if (registro.frontmatter.estado === "\u{1F7E2}") {
          let partes = registro.frontmatter.horaInicio.split(" ");
          let fechaHoraISO = `${partes[0]}T${partes[2]}`;
          let inicio = Date.parse(fechaHoraISO);
          let ahora = Date.now();
          let diferencia = ahora - inicio;
          dv.el("td", Duration.fromMillis(diferencia).toFormat("h:mm"), row);
        } else {
          dv.el("td", Duration.fromMillis(registro.frontmatter.tiempoTrabajado).toFormat("h:mm"), row);
        }
        dv.el("td", registro.frontmatter.estado, row);
        dv.el("td", registro.frontmatter.id, row);
        if (registro.frontmatter.estado === "\u{1F7E2}") {
          dv.el("td", this.createButtonTable("Cerrar", async () => {
            debugger;
            await this.registroTiempoAPI.cerrarRegistro(registro.frontmatter.id);
          }), row);
        } else {
          dv.el("td", this.createButtonTable("Retomar", () => {
            this.retomarTarea(registro.frontmatter.id);
          }), row);
        }
      });
    }
    const botonSalir = this.agregarBotonSalir(dv);
    dv.container.appendChild(botonSalir);
  }
  createButtonTable(buttonText, onClickCallback) {
    const button = document.createElement("button");
    button.textContent = buttonText;
    button.type = "button";
    button.classList.add("your-button-class");
    button.addEventListener("click", onClickCallback);
    return button;
  }
  // Crea la nota desde el templater de RegistroTiempo
  async retomarTarea(id) {
    debugger;
    const filePath = `Plantillas/${this.plugin.settings[`folder_RegistroTiempo`]}/Plt - RegistroTiempo.md`;
    const template = app.vault.getAbstractFileByPath(filePath);
    if (template instanceof import_obsidian55.TFile) {
      console.log("Archivo encontrado:", template);
    } else {
      console.log("Archivo no encontrado.");
    }
    const filename = "Retomar " + id;
    const folder = app.vault.getAbstractFileByPath("Inbox");
    const tp = this.getTp();
    let crearNota = tp.file.static_functions.get("create_new");
    await crearNota(template, filename, false, folder).basename;
  }
  getTp() {
    if (!this.plugin || !this.plugin.app.plugins.enabledPlugins.has("templater-obsidian")) {
      console.error("El plugin Templater no est\xE1 habilitado.");
      return;
    }
    let tpGen = this.plugin.app.plugins.plugins["templater-obsidian"].templater;
    tpGen = tpGen.functions_generator.internal_functions.modules_array;
    let tp = {};
    tp.file = tpGen.find((m) => m.name == "file");
    tp.system = tpGen.find((m) => m.name == "system");
    if (!tp.file) {
      console.error("No se pudo acceder al objeto de funciones actuales de Templater.");
      return;
    }
    console.log('tp con propiedades "file" se ha cargado satisfactoriamente');
    return tp;
  }
};

// src/modules/moduloRegistroTiempo/views/vistaRTActivo.ts
var import_obsidian56 = require("obsidian");
init_luxon();
init_registroTiempoAPI();
var VistaRegistroActivo = class extends import_obsidian56.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    /**
     * Función para actualizar dinámicamente el tiempo en ejecución
     */
    /**
     * Función para actualizar dinámicamente el tiempo en ejecución
     */
    this.alertaEjecutada25 = false;
    this.plugin = plugin;
    this.registroTiempoAPI = new registroTiempoAPI(this.plugin);
  }
  getViewType() {
    return "vista-registro-activo";
  }
  getDisplayText() {
    return "Registro Activo";
  }
  getIcon() {
    return "checkmark";
  }
  async onOpen() {
    await this.actualizarVista();
    this.intervalId = setInterval(async () => {
      await this.actualizarVista();
    }, 5e3);
  }
  onClose() {
    clearInterval(this.intervalId);
  }
  async actualizarVista() {
    var _a, _b;
    let scrollTop = 0;
    let scrollLeft = 0;
    const oldTableWrapper = this.containerEl.querySelector(".table-wrapper");
    if (oldTableWrapper) {
      scrollTop = oldTableWrapper.scrollTop;
      scrollLeft = oldTableWrapper.scrollLeft;
    }
    this.containerEl.empty();
    this.containerEl.classList.add("registro-tiempo-container");
    const folder = this.plugin.settings.folder_RegistroTiempo;
    const files = app.vault.getMarkdownFiles().filter((file) => file.path.includes(folder));
    let registrosActivos = [];
    for (let file of files) {
      let metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if ((metadata == null ? void 0 : metadata.estado) === "\u{1F7E2}") {
        let registroActivo = { file };
        Object.assign(registroActivo, metadata);
        registrosActivos.push(registroActivo);
      }
    }
    if (registrosActivos.length === 0) {
      const messageContainer = this.containerEl.createEl("div", { cls: "message-container" });
      messageContainer.createEl("p", { text: "No hay ning\xFAn registro de tiempo ejecut\xE1ndose." });
      const botonCrear = messageContainer.createEl("button", { cls: "registro-tiempo-btn" });
      botonCrear.textContent = "+ Registro Tiempo";
      botonCrear.onclick = async () => {
        const starterAPInstance = new starterAPI(this.plugin);
        await starterAPInstance.createNote("RegistroTiempo");
      };
      this.containerEl.appendChild(messageContainer);
      this.containerEl.createEl("div", { cls: "separador" });
    } else if (registrosActivos.length > 0) {
      const registroEnEjecucion = registrosActivos[0];
      const activeContainer = this.containerEl.createEl("div", { cls: "active-time-container" });
      activeContainer.createEl("h4", { text: "Registro de Tiempo en Ejecuci\xF3n", cls: "registro-tiempo-titulo" });
      const aliasContainer = activeContainer.createEl("p", { cls: "registro-alias" });
      const aliasText = registroEnEjecucion.aliases && registroEnEjecucion.aliases[1] ? registroEnEjecucion.aliases[1] : registroEnEjecucion.aliases && registroEnEjecucion.aliases[0] ? registroEnEjecucion.aliases[0] : "Sin alias";
      aliasContainer.innerHTML = `<strong>Alias:</strong> ${aliasText}`;
      const descripcionContainer = activeContainer.createEl("p", { cls: "registro-descripcion" });
      descripcionContainer.innerHTML = `<strong>Descripci\xF3n:</strong> ${registroEnEjecucion.descripcion || "Sin descripci\xF3n"}`;
      const tiempoContainer = activeContainer.createEl("p", { cls: "tiempo-ejecucion", text: "Tiempo transcurrido: Calculando..." });
      this.actualizarTiempoEnEjecucion(tiempoContainer, registroEnEjecucion.horaInicio);
      const botonesContainer = activeContainer.createEl("div", { cls: "registro-botones-container" });
      const changeDescButton = document.createElement("button");
      changeDescButton.innerHTML = "\u270F\uFE0F <span class='button-text'>  Descripci\xF3n</span>";
      changeDescButton.classList.add("change-desc-btn");
      changeDescButton.addEventListener("click", async () => {
        var _a2;
        const nuevaDescripcion = await this.mostrarPrompt("Nueva Descripci\xF3n:", registroEnEjecucion.descripcion || "");
        if (nuevaDescripcion !== null) {
          const file = registroEnEjecucion.file;
          if (!file)
            return;
          const fileContent = await this.app.vault.read(file);
          let frontmatter = ((_a2 = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a2.frontmatter) || {};
          frontmatter.descripcion = nuevaDescripcion;
          const newContent = this.reescribirFrontmatter(fileContent, frontmatter);
          await this.app.vault.modify(file, newContent);
          this.actualizarVista();
        }
      });
      const stopButton = document.createElement("button");
      stopButton.innerHTML = "\u270B\u{1F3FC} <span class='button-text'> Detener Registro</span>";
      stopButton.classList.add("stop-time-btn");
      stopButton.addEventListener("click", async () => {
        try {
          console.log("Bot\xF3n 'Cerrar Tarea' presionado.");
          if (!registroEnEjecucion.file || !(registroEnEjecucion.file instanceof import_obsidian56.TFile)) {
            console.error("No se encontr\xF3 el archivo del registro en ejecuci\xF3n.");
            return;
          }
          await this.registroTiempoAPI.cerrarRegistro(registroEnEjecucion.file);
          console.log("Registro cerrado correctamente.");
          this.actualizarVista();
        } catch (error) {
          console.error("Error al cerrar la tarea:", error);
        }
      });
      botonesContainer.appendChild(changeDescButton);
      botonesContainer.appendChild(stopButton);
      activeContainer.appendChild(botonesContainer);
      activeContainer.appendChild(aliasContainer);
      activeContainer.appendChild(descripcionContainer);
      activeContainer.appendChild(tiempoContainer);
      this.containerEl.appendChild(activeContainer);
    }
    let registrosFinalizados = [];
    for (let file of files) {
      let metadata = (_b = app.metadataCache.getFileCache(file)) == null ? void 0 : _b.frontmatter;
      if ((metadata == null ? void 0 : metadata.estado) === "\u{1F535}") {
        let registroFinalizado = { file };
        Object.assign(registroFinalizado, metadata);
        registrosFinalizados.push(registroFinalizado);
      }
    }
    registrosFinalizados.sort((a, b) => b.id - a.id);
    let top5RegistrosActivos = registrosFinalizados.slice(0, 15);
    if (top5RegistrosActivos.length > 0) {
      const tableWrapper = this.containerEl.createEl("div", { cls: "table-wrapper" });
      const table = tableWrapper.createEl("table", { cls: "styled-table" });
      const header = table.createEl("tr");
      ["Alias", "Descripci\xF3n", "Retomar"].forEach((text) => header.createEl("th", { text }));
      top5RegistrosActivos.forEach((registro) => {
        const row = table.createEl("tr");
        const aliasCell = row.createEl("td");
        const aliasText = registro.aliases && registro.aliases[1] ? registro.aliases[1] : registro.aliases && registro.aliases[0] ? registro.aliases[0] : "Sin alias";
        const aliasLink = aliasCell.createEl("a", {
          text: aliasText,
          cls: "clickable-alias",
          href: "#"
        });
        aliasLink.addEventListener("click", async () => {
          let file = app.vault.getAbstractFileByPath(registro.file.path);
          if (file instanceof import_obsidian56.TFile) {
            await app.workspace.getLeaf(true).openFile(file);
          }
        });
        row.createEl("td", { text: registro.descripcion || "No Definida" });
        const buttonCell = row.createEl("td");
        const button = this.createButtonTable("\u23F1\uFE0F", () => {
          this.registroTiempoAPI.retomarTarea(registro.id);
        });
        button.classList.add("retomar-btn");
        button.setAttribute("aria-label", "Retomar");
        buttonCell.appendChild(button);
      });
      this.containerEl.appendChild(tableWrapper);
      tableWrapper.scrollTop = scrollTop;
      tableWrapper.scrollLeft = scrollLeft;
    } else {
      this.containerEl.createEl("p", { text: "No hay registros finalizados." });
    }
  }
  actualizarTiempoEnEjecucion(element, horaInicio) {
    const extraerHora = (fechaStr) => {
      const match2 = fechaStr.match(/(\d{4}-\d{2}-\d{2})\s+\w+\s+(\d{2}:\d{2})/);
      if (match2) {
        return /* @__PURE__ */ new Date(`${match2[1]}T${match2[2]}:00`);
      }
      return null;
    };
    const inicio = extraerHora(horaInicio);
    if (!inicio) {
      element.textContent = "Tiempo transcurrido: No disponible";
      return;
    }
    const calcularTiempo = () => {
      const ahora = /* @__PURE__ */ new Date();
      const diferencia = Math.floor((ahora.getTime() - inicio.getTime()) / 1e3);
      const horas = Math.floor(diferencia / 3600);
      const minutos = Math.floor(diferencia % 3600 / 60);
      const segundos = diferencia % 60;
      element.textContent = `Tiempo transcurrido: ${horas}h ${minutos}m ${segundos}s`;
      if (diferencia >= 1500) {
        element.classList.add("tiempo-rojo");
      } else {
        element.classList.remove("tiempo-rojo");
      }
    };
    calcularTiempo();
    setInterval(calcularTiempo, 1e3);
  }
  /**
   * Función para mostrar un prompt y obtener un nuevo valor
   */
  async mostrarPrompt(mensaje, valorActual) {
    return new Promise((resolve) => {
      const backdrop = document.createElement("div");
      backdrop.classList.add("prompt-modal-backdrop");
      const modal = document.createElement("div");
      modal.classList.add("prompt-modal");
      const label = document.createElement("label");
      label.textContent = mensaje;
      const input = document.createElement("input");
      input.type = "text";
      input.value = valorActual;
      const buttonContainer = document.createElement("div");
      const aceptar = document.createElement("button");
      aceptar.textContent = "Aceptar";
      aceptar.addEventListener("click", () => {
        resolve(input.value.trim() || null);
        modal.remove();
        backdrop.remove();
      });
      const cancelar = document.createElement("button");
      cancelar.textContent = "Cancelar";
      cancelar.addEventListener("click", () => {
        resolve(null);
        modal.remove();
        backdrop.remove();
      });
      input.addEventListener("keydown", (event) => {
        if (event.key === "Enter") {
          event.preventDefault();
          aceptar.click();
        }
      });
      buttonContainer.appendChild(aceptar);
      buttonContainer.appendChild(cancelar);
      modal.appendChild(label);
      modal.appendChild(input);
      modal.appendChild(buttonContainer);
      document.body.appendChild(backdrop);
      document.body.appendChild(modal);
      input.focus();
    });
  }
  createButtonTable(buttonText, onClickCallback) {
    const button = document.createElement("button");
    button.textContent = buttonText;
    button.type = "button";
    button.classList.add("your-button-class");
    button.addEventListener("click", onClickCallback);
    return button;
  }
  /**
   * Reescribe el frontmatter en un archivo Markdown, preservando la estructura original.
   */
  reescribirFrontmatter(content, frontmatter) {
    const yamlStart = content.indexOf("---");
    const yamlEnd = content.indexOf("---", yamlStart + 3);
    if (yamlStart === -1 || yamlEnd === -1) {
      return content;
    }
    let nuevoFrontmatter = "---\n";
    for (const key in frontmatter) {
      const value = frontmatter[key];
      if (Array.isArray(value)) {
        nuevoFrontmatter += `${key}:
`;
        value.forEach((item) => {
          if (typeof item === "string" && item.match(/^\[\[.*\]\]$/)) {
            nuevoFrontmatter += `  - "${item}"
`;
          } else {
            nuevoFrontmatter += `  - ${JSON.stringify(item)}
`;
          }
        });
      } else if (typeof value === "string") {
        if (value.match(/^\[\[.*\]\]$/)) {
          nuevoFrontmatter += `${key}: "${value}"
`;
        } else {
          nuevoFrontmatter += `${key}: ${JSON.stringify(value)}
`;
        }
      } else {
        nuevoFrontmatter += `${key}: ${value}
`;
      }
    }
    nuevoFrontmatter += "---\n";
    let contenidoRestante = content.slice(yamlEnd + 3).trimStart();
    return nuevoFrontmatter + (contenidoRestante ? "\n" + contenidoRestante : "");
  }
};

// src/modules/moduloGTD/index.ts
var import_obsidian60 = require("obsidian");

// src/modules/moduloGTD/commands.ts
var import_obsidian59 = require("obsidian");

// src/modules/moduloGTD/inbox.ts
var import_obsidian58 = require("obsidian");
init_luxon();

// src/modules/modales/inboxModal.ts
var import_obsidian57 = require("obsidian");
var BandejaDeEntradaModal = class extends import_obsidian57.Modal {
  constructor(app2) {
    super(app2);
  }
  onOpen() {
    this.containerEl.classList.add("modalInbox");
    let { contentEl } = this;
    this.titleEl.setText("Bandeja de Entrada");
    let textAreaDiv = contentEl.createEl("div");
    this.inputArea = textAreaDiv.createEl("textarea");
    this.inputArea.setAttribute("placeholder", "Escribe tu tarea aqu\xED...");
    this.inputArea.addEventListener("keydown", (e) => {
      if (e.key === "Enter" && !e.shiftKey && !e.ctrlKey && !e.altKey) {
        e.preventDefault();
        this.submitForm();
      }
    });
    const activeFile = this.app.workspace.getActiveFile();
    const metadata = this.app.metadataCache.getFileCache(activeFile);
    let nameActiveFile = metadata.aliases ? metadata.aliases[0] : activeFile.basename;
    let checkBoxDiv = contentEl.createEl("div");
    this.checkBox = checkBoxDiv.createEl("input", { type: "checkbox" });
    checkBoxDiv.createEl("label", { text: `Guardar en ${nameActiveFile}` }).prepend(this.checkBox);
    const saveButton = checkBoxDiv.createEl("button", { text: "Guardar" });
    saveButton.addEventListener("click", () => this.submitForm());
  }
  submitForm() {
    const text = this.inputArea.value;
    const saveInCurrent = this.checkBox.checked;
    this.close();
    if (this.resolver) {
      this.resolver({ text, saveInCurrent });
    }
  }
  waitForInput() {
    return new Promise((resolve) => {
      this.resolver = resolve;
    });
  }
};

// src/modules/moduloGTD/inbox.ts
async function ingresarBandejaEntrada(plugin) {
  let inboxPath = `${plugin.settings.file_Inbox}.md`;
  let inboxFile = app.vault.getAbstractFileByPath(inboxPath);
  const activeFile = app.workspace.getActiveFile();
  if (!activeFile) {
    new import_obsidian58.Notice("No hay archivo activo");
    return;
  }
  let inbox;
  const modal = new BandejaDeEntradaModal(plugin.app);
  modal.open();
  const { text, saveInCurrent } = await modal.waitForInput();
  if (text.length < 3) {
    new import_obsidian58.Notice("Inbox cancelada");
    return;
  }
  let destino = saveInCurrent ? activeFile : inboxFile;
  let hoy = DateTime.now().toFormat("yyyy-MM-dd");
  let hora = DateTime.now().toFormat("HH:mm");
  inbox = `- [ ] \u{1F9E0} ${text} #inbox [created:: ${hoy}] a las ${hora}
`;
  if (destino instanceof import_obsidian58.TFile) {
    if (destino === inboxFile) {
      insertAtStartUsingProcess(inbox, destino).then(() => {
        new import_obsidian58.Notice("Bandeja de entrada actualizada con \xE9xito.");
      }).catch((error) => {
        debugger;
        console.error(error);
        new import_obsidian58.Notice("Error al agregar contenido al inicio del archivo: " + error.message);
      });
    } else {
      await insertInboxAtCursor(inbox);
    }
  }
}
async function insertInboxAtCursor(inbox) {
  debugger;
  const activeLeaf = app.workspace.activeLeaf;
  if (activeLeaf) {
    const editor = activeLeaf.view.sourceMode.cmEditor;
    const cursor = editor.getCursor();
    editor.replaceRange(inbox, cursor);
  }
}
async function insertAtStartUsingProcess(inbox, file) {
  if (!(file instanceof import_obsidian58.TFile))
    return;
  await app.vault.process(file, (content) => {
    const newContent = inbox + content;
    return newContent;
  });
}

// src/modules/moduloGTD/commands.ts
function registerCommands3(plugin) {
  const inboxCommand = plugin.addCommand({
    id: "ingresar-inbox",
    name: "Ingresar Bandeja de Entrada -> Inbox",
    callback: async () => {
      await ingresarBandejaEntrada(plugin);
    }
  });
  plugin.registeredCommandIdsGTD = plugin.registeredCommandIdsGTD || [];
  plugin.registeredCommandIdsGTD.push(inboxCommand.id);
}
function deactivateCommands3(plugin) {
  if (!plugin.registeredCommandIdsGTD)
    return;
  plugin.registeredCommandIdsGTD.forEach((commandId) => {
    const command = plugin.app.commands.commands[commandId];
    if (command) {
      command.callback = () => new Notice("Este comando ha sido desactivado.");
    }
  });
  plugin.registeredCommandIdsGTD = [];
}

// src/modules/moduloGTD/index.ts
var ModuloGTD = class {
  constructor(plugin) {
    this.moduloGTD = null;
    this.plugin = plugin;
  }
  activate() {
    if (this.moduloGTD)
      return;
    registerCommands3(this.plugin);
  }
  deactivate() {
    if (!this.moduloGTD)
      return;
    deactivateCommands3(this.plugin);
    this.moduloGTD = null;
  }
};

// src/modules/noteLifecycleManager/API/subsistemasAPI.ts
var import_obsidian61 = require("obsidian");
var subsistemasAPI = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.pathCampos = this.plugin.settings.file_camposCentral + ".md";
  }
  // Función para crear y mostrar el botón inicial "Menú hoy"
  async mostrarBotonCrearAV(dv) {
    dv.container.innerHTML = "";
    const botonMenuHoy = document.createElement("button");
    botonMenuHoy.textContent = "Procesar Areas de Vida";
    dv.container.appendChild(botonMenuHoy);
    botonMenuHoy.onclick = async () => {
      await this.procesarAV(dv);
    };
  }
  async mostrarBotonCrearAVTrimestral(dv) {
    dv.container.innerHTML = "";
    const botonMenuHoy = document.createElement("button");
    botonMenuHoy.textContent = "Procesar Areas de Vida del trimestre";
    dv.container.appendChild(botonMenuHoy);
    botonMenuHoy.onclick = async () => {
      await this.procesarAVTrimestre(dv);
    };
  }
  async procesarAV(dv) {
    var _a, _b;
    const folderQ = this.plugin.settings["folder_Trimestral"];
    const filesQ = app.vault.getMarkdownFiles().filter(
      (file) => file.path.includes(folderQ) && !file.path.includes("Plantillas") && !file.path.includes("Archivo")
    );
    let qCreados = [];
    for (let file of filesQ) {
      let metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if ((metadata == null ? void 0 : metadata.type) === "TQ" && (metadata == null ? void 0 : metadata.trimestre)) {
        let qActivo = { file };
        Object.assign(qActivo, metadata);
        qCreados.push(qActivo);
      }
    }
    let suggester = this.plugin.tp.system.static_functions.get("suggester");
    let q = await suggester(
      qCreados.map((b) => b.trimestre),
      qCreados.map((b) => b),
      true,
      `De que trimestre vamos a procesar tus Areas de Vida`
    );
    const resultadoAV = [];
    const fileCampos = app.vault.getAbstractFileByPath(this.pathCampos);
    try {
      if (fileCampos instanceof import_obsidian61.TFile) {
        const metadata = app.metadataCache.getFileCache(fileCampos);
        const arregloAV = ((_b = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _b.AreasVida) || [];
        if (Array.isArray(arregloAV)) {
          arregloAV.forEach((item) => {
            if (Array.isArray(item) && item.length >= 2) {
              resultadoAV.push({
                grupo: item[0],
                av: item[1],
                texto: item[0] + " / " + item[1]
              });
            }
          });
        }
      }
    } catch (error) {
      console.error("Error obteniendo el archivo de campos:", error);
      throw error;
    }
    const allFiles = app.vault.getMarkdownFiles();
    let basePath = this.plugin.settings.folder_AreasVida;
    for (let areaVida of resultadoAV) {
      const fullFolderPath = `${basePath}/${areaVida.av}`;
      const folder = app.vault.getAbstractFileByPath(fullFolderPath);
      if (folder instanceof import_obsidian61.TFolder) {
        console.log(`La carpeta ${areaVida.av} existe dentro de ${basePath}.`);
        const instancesOfAV = app.vault.getMarkdownFiles().filter(
          (file) => file.path.includes(fullFolderPath) && !file.path.includes("Plantillas") && !file.path.includes("Archivo")
        );
        const nodeAVExists = instancesOfAV.some(
          (file) => file.basename === areaVida.av
        );
        if (nodeAVExists) {
          console.log(
            `La nota ${areaVida.av} existe dentro de la carpeta ${areaVida.av}.`
          );
          await this.validacionAVQ(fullFolderPath, q, areaVida);
        } else {
          debugger;
          console.log(
            `La nota ${areaVida.av} no existe dentro de la carpeta ${areaVida.av}.`
          );
          let nAV = await this.agregarNodoAreaVida(areaVida);
          if (nAV) {
            await this.validacionAVQ(fullFolderPath, q, areaVida);
          } else if (nAV == false) {
            continue;
          } else {
            return;
          }
        }
      } else {
        console.log(
          `La carpeta ${areaVida.av} no existe a\xFAn dentro de ${basePath}.`
        );
        let nAV = await this.agregarNodoAreaVida(areaVida);
        if (nAV) {
          await this.validacionAVQ(fullFolderPath, q, areaVida);
        } else if (nAV == false) {
          continue;
        } else {
          return;
        }
      }
    }
  }
  // Fin procesarAV()
  async procesarAVTrimestre(dv) {
    var _a;
    let q = {};
    q.trimestre = dv.current().trimestre;
    const resultadoAV = [];
    const fileCampos = app.vault.getAbstractFileByPath(this.pathCampos);
    try {
      if (fileCampos instanceof import_obsidian61.TFile) {
        const metadata = app.metadataCache.getFileCache(fileCampos);
        const arregloAV = ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.AreasVida) || [];
        if (Array.isArray(arregloAV)) {
          arregloAV.forEach((item) => {
            if (Array.isArray(item) && item.length >= 2) {
              resultadoAV.push({
                grupo: item[0],
                av: item[1],
                texto: item[0] + " / " + item[1]
              });
            }
          });
        }
      }
    } catch (error) {
      console.error("Error obteniendo el archivo de campos:", error);
      throw error;
    }
    const allFiles = app.vault.getMarkdownFiles();
    let basePath = this.plugin.settings.folder_AreasVida;
    for (let areaVida of resultadoAV) {
      const fullFolderPath = `${basePath}/${areaVida.av}`;
      const folder = app.vault.getAbstractFileByPath(fullFolderPath);
      if (folder instanceof import_obsidian61.TFolder) {
        console.log(`La carpeta ${areaVida.av} existe dentro de ${basePath}.`);
        const instancesOfAV = app.vault.getMarkdownFiles().filter(
          (file) => file.path.includes(fullFolderPath) && !file.path.includes("Plantillas") && !file.path.includes("Archivo")
        );
        const nodeAVExists = instancesOfAV.some(
          (file) => file.basename === areaVida.av
        );
        if (nodeAVExists) {
          console.log(
            `La nota ${areaVida.av} existe dentro de la carpeta ${areaVida.av}.`
          );
          await this.validacionAVQ(fullFolderPath, q, areaVida);
        } else {
          debugger;
          console.log(
            `La nota ${areaVida.av} no existe dentro de la carpeta ${areaVida.av}.`
          );
          let nAV = await this.agregarNodoAreaVida(areaVida);
          if (nAV) {
            await this.validacionAVQ(fullFolderPath, q, areaVida);
          } else if (nAV == false) {
            continue;
          } else {
            return;
          }
        }
      } else {
        console.log(
          `La carpeta ${areaVida.av} no existe a\xFAn dentro de ${basePath}.`
        );
        let nAV = await this.agregarNodoAreaVida(areaVida);
        if (nAV) {
          await this.validacionAVQ(fullFolderPath, q, areaVida);
        } else if (nAV == false) {
          continue;
        } else {
          return;
        }
      }
    }
  }
  // Fin procesarAVTrimestre()
  //P2 areaVida Q Existe?
  async validacionAVQ(fullFolderPath, q, areaVida) {
    const pathAVQ = `${fullFolderPath}/${q.trimestre} - ${areaVida.av}.md`;
    const fileAVQ = app.vault.getAbstractFileByPath(pathAVQ);
    debugger;
    if (fileAVQ instanceof import_obsidian61.TFile) {
      let suggester = this.plugin.tp.system.static_functions.get("suggester");
      let nextStep = await suggester(
        [
          "Actualizar estado del AV",
          "Borrar y Crear de nuevo el AV",
          "Dejar el AV como est\xE1 "
        ],
        ["upd", "del+cre", "continue"],
        true,
        `\xBF${q.trimestre} ${areaVida.av} ya existe. Elige una opci\xF3n:`
      );
      switch (nextStep) {
        case "upd":
          await this.actualizarAVQ(fileAVQ);
          break;
        case "del+cre":
          await this.borrarAVQ(fileAVQ);
          await this.agregarAVQ(areaVida, q.trimestre);
          break;
        case "continue":
          console.log(`Continuar sin hacer nada con ${fileAVQ.basename}`);
          break;
      }
    } else {
      debugger;
      await this.agregarAVQ(areaVida, q.trimestre);
    }
  }
  // P3 Agregar nodoAreaVida?
  async agregarNodoAreaVida(areaVida) {
    let suggester = this.plugin.tp.system.static_functions.get("suggester");
    let agregar = await suggester(
      ["Si", "No"],
      [true, false],
      true,
      `\xBFDeseas agregar ${areaVida.av} a tu sistema de gesti\xF3n?`
    );
    if (agregar) {
      const filePath = `Plantillas/${this.plugin.settings[`folder_AreasVida`]}/Plt - nodoAreasVida.md`;
      const template = app.vault.getAbstractFileByPath(filePath);
      if (template instanceof import_obsidian61.TFile) {
        console.log("Archivo nodoAreaVida template encontrado:", template);
      } else {
        console.log("Archivo template nodoAreaVida no encontrado.");
      }
      const filename = areaVida.grupo + " - " + areaVida.av;
      let folderPath = `${this.plugin.settings[`folder_AreasVida`]}/${areaVida.av}`;
      await this.crearCarpeta(folderPath);
      const folder = app.vault.getAbstractFileByPath(folderPath);
      let crearNota;
      crearNota = this.plugin.tp.file.static_functions.get("create_new");
      try {
        let nota = await crearNota(template, filename, false, folder);
        return true;
      } catch (error) {
        console.error("Error creando NodoAreaVida: ", error);
        return error;
      }
    } else {
      return false;
    }
  }
  async agregarAVQ(areaVida, trimestre) {
    const filePath = `Plantillas/${this.plugin.settings.folder_AreasVida}/Plt - AreasVida.md`;
    const template = app.vault.getAbstractFileByPath(filePath);
    if (!(template instanceof import_obsidian61.TFile)) {
      console.log("Archivo no encontrado.");
      return false;
    }
    console.log("Archivo encontrado:", template);
    const filename = `${trimestre} -- ${areaVida.av} -- ${areaVida.grupo}`;
    let folderPath = `${this.plugin.settings[`folder_AreasVida`]}/${areaVida.av}`;
    const folder = app.vault.getAbstractFileByPath(folderPath);
    let crearNota = this.plugin.tp.file.static_functions.get("create_new");
    try {
      await crearNota(template, filename, false, folder);
      return true;
    } catch (error) {
      console.error("Error creando AreaVida: ", error);
      return false;
    }
  }
  async borrarAVQ(fileAVQ) {
    console.log(`Logica de borrado de ${fileAVQ.basename}`);
    try {
      if (fileAVQ instanceof import_obsidian61.TFile) {
        await app.vault.delete(fileAVQ);
        console.log(`${fileAVQ.basename} ha sido borrado con \xE9xito.`);
      } else {
        console.error(
          `${fileAVQ.basename} no es un archivo v\xE1lido o no existe.`
        );
      }
    } catch (err) {
      console.error(`Error al intentar borrar ${fileAVQ.basename}:`, err);
    }
  }
  async actualizarAVQ(fileAVQ) {
    console.log(`Logica de actualizaci\xF3n de estado de ${fileAVQ.basename}`);
    let suggester = this.plugin.tp.system.static_functions.get("suggester");
    let metadataCache = app.metadataCache.getFileCache(fileAVQ);
    let estadoActual = "";
    let nuevoEstado = "";
    if (metadataCache.frontmatter && metadataCache.frontmatter.hasOwnProperty("estado")) {
      estadoActual = metadataCache.frontmatter.estado;
    } else {
      console.log("No se encontr\xF3 el estado actual en el frontmatter.");
      return;
    }
    try {
      nuevoEstado = await suggester(
        ["\u{1F535} -> Archivado", "\u{1F7E2} -> Activo", "\u{1F7E1} -> En Pausa", "\u{1F534} -> Detenido"],
        // opciones para mostrar
        ["\u{1F535}", "\u{1F7E2}", "\u{1F7E1}", "\u{1F534}"],
        // valores a retornar
        false,
        // permite selección múltiple
        `${fileAVQ.basename} est\xE1 ${estadoActual}. Asignar estado:`
        // mensaje
      );
      if (!nuevoEstado) {
        console.log("No se seleccion\xF3 un nuevo estado.");
        return;
      }
      await app.fileManager.processFrontMatter(fileAVQ, (frontmatter) => {
        if (frontmatter.hasOwnProperty("estado")) {
          frontmatter.estado = nuevoEstado;
          console.log("Estado actualizado con \xE9xito a:", nuevoEstado);
        }
      });
    } catch (err) {
      console.error("Error al actualizar el estado en el frontmatter:", err);
    }
  }
  async crearCarpeta(folderPath) {
    try {
      const carpetaExistente = app.vault.getAbstractFileByPath(folderPath);
      if (carpetaExistente instanceof import_obsidian61.TFolder) {
        console.log(`La carpeta '${folderPath}' ya existe.`);
        return;
      }
      await app.vault.createFolder(folderPath);
      console.log(`Carpeta '${folderPath}' creada exitosamente.`);
    } catch (error) {
      console.error(`Error al crear la carpeta '${folderPath}':`, error);
    }
  }
  // PARA PROCESAR LOS COMPASS
  // Función para crear y mostrar el botón de procesar Objetivos de las AV anuales en el proceso de Compass.
  async mostrarBotonCompassAnual(dv) {
    dv.container.innerHTML = "";
    const boton = document.createElement("button");
    boton.textContent = "Procesar Objetivos AV Anual";
    dv.container.appendChild(boton);
    boton.onclick = async () => {
      await this.procesarCompassAnual(dv);
    };
  }
  async mostrarBotonCompassTrimestral(dv) {
    dv.container.innerHTML = "";
    const boton = document.createElement("button");
    boton.textContent = "Procesar Objetivos AV Trimestrales";
    dv.container.appendChild(boton);
    boton.onclick = async () => {
      await this.procesarCompassTrimestral(dv);
    };
  }
  async procesarCompassAnual(dv) {
    var _a;
    let a\u00F1o = dv.current().a\u00F1o;
    const resultadoAV = [];
    const fileCampos = app.vault.getAbstractFileByPath(this.pathCampos);
    try {
      if (fileCampos instanceof import_obsidian61.TFile) {
        const metadata = app.metadataCache.getFileCache(fileCampos);
        const arregloAV = ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.AreasVida) || [];
        if (Array.isArray(arregloAV)) {
          arregloAV.forEach((item) => {
            if (Array.isArray(item) && item.length >= 2) {
              resultadoAV.push({
                grupo: item[0],
                av: item[1],
                texto: item[0] + " / " + item[1]
              });
            }
          });
        }
      }
    } catch (error) {
      console.error("Error obteniendo el archivo de campos:", error);
      throw error;
    }
    const allFiles = app.vault.getMarkdownFiles();
    let basePath = this.plugin.settings.folder_AreasVida;
    debugger;
    for (let areaVida of resultadoAV) {
      const fullFolderPath = `${basePath}/${areaVida.av}`;
      const folder = app.vault.getAbstractFileByPath(fullFolderPath);
      if (folder instanceof import_obsidian61.TFolder) {
        console.log(`La carpeta ${areaVida.av} existe dentro de ${basePath}.`);
        const instancesOfAV = app.vault.getMarkdownFiles().filter(
          (file) => file.path.includes(fullFolderPath) && !file.path.includes("Plantillas") && !file.path.includes("Archivo")
        );
        const nodeAVExists = instancesOfAV.some(
          (file) => file.basename === areaVida.av
        );
        if (nodeAVExists) {
          console.log(
            `La nota ${areaVida.av} existe dentro de la carpeta ${areaVida.av}.`
          );
          await this.objetivoAnual(a\u00F1o, areaVida.av);
        } else {
          console.log(
            `La nota ${areaVida.av} no existe dentro de la carpeta ${areaVida.av}.`
          );
          let nAV = await this.agregarNodoAreaVida(areaVida);
          if (nAV) {
            await this.objetivoAnual(a\u00F1o, areaVida.av);
          } else if (nAV == false) {
            continue;
          } else {
            return;
          }
        }
      } else {
        console.log(
          `La carpeta ${areaVida.av} no existe a\xFAn dentro de ${basePath}.`
        );
        let nAV = await this.agregarNodoAreaVida(areaVida);
        if (nAV) {
          await this.objetivoAnual(a\u00F1o, areaVida.av);
        } else if (nAV == false) {
          continue;
        } else {
          return;
        }
      }
    }
  }
  // Metodo Procesar Compass Anual
  async procesarCompassTrimestral(dv) {
    var _a;
    debugger;
    let trimestre = dv.current().trimestre;
    const resultadoAV = [];
    const fileCampos = app.vault.getAbstractFileByPath(this.pathCampos);
    try {
      if (fileCampos instanceof import_obsidian61.TFile) {
        const metadata = app.metadataCache.getFileCache(fileCampos);
        const arregloAV = ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.AreasVida) || [];
        if (Array.isArray(arregloAV)) {
          arregloAV.forEach((item) => {
            if (Array.isArray(item) && item.length >= 2) {
              resultadoAV.push({
                grupo: item[0],
                av: item[1],
                texto: item[0] + " / " + item[1]
              });
            }
          });
        }
      }
    } catch (error) {
      console.error("Error obteniendo el archivo de campos:", error);
      throw error;
    }
    const allFiles = app.vault.getMarkdownFiles();
    let basePath = this.plugin.settings.folder_AreasVida;
    for (let areaVida of resultadoAV) {
      const fullFolderPath = `${basePath}/${areaVida.av}`;
      const folder = app.vault.getAbstractFileByPath(fullFolderPath);
      if (folder instanceof import_obsidian61.TFolder) {
        console.log(`La carpeta ${areaVida.av} existe dentro de ${basePath}.`);
        const instancesOfAV = app.vault.getMarkdownFiles().filter(
          (file) => file.path.includes(fullFolderPath) && !file.path.includes("Plantillas") && !file.path.includes("Archivo")
        );
        const nodeAVExists = instancesOfAV.some(
          (file) => file.basename === areaVida.av
        );
        if (nodeAVExists) {
          console.log(
            `La nota ${areaVida.av} existe dentro de la carpeta ${areaVida.av}.`
          );
          await this.objetivoTrimestral(trimestre, areaVida.av);
        } else {
          console.log(
            `La nota ${areaVida.av} no existe dentro de la carpeta ${areaVida.av}.`
          );
          let nAV = await this.agregarNodoAreaVida(areaVida);
          if (nAV) {
            await this.objetivoTrimestral(trimestre, areaVida.av);
          } else if (nAV == false) {
            continue;
          } else {
            return;
          }
        }
      } else {
        console.log(
          `La carpeta ${areaVida.av} no existe a\xFAn dentro de ${basePath}.`
        );
        let nAV = await this.agregarNodoAreaVida(areaVida);
        if (nAV) {
          await this.objetivoTrimestral(trimestre, areaVida.av);
        } else if (nAV == false) {
          continue;
        } else {
          return;
        }
      }
    }
  }
  // Metodo Procesar Compass Trimestral 
  async objetivoAnual(a\u00F1o, areaVida) {
    var _a;
    const folderObj = this.plugin.settings["folder_ObjCompassAnual"];
    const filesObj = app.vault.getMarkdownFiles().filter(
      (file) => file.path.includes(folderObj) && !file.path.includes("Plantillas") && !file.path.includes("Archivo")
    );
    let objCreados = [];
    for (let file of filesObj) {
      debugger;
      let metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      const regex = /\[\[\s*(.*?)\s*\]\]/;
      let fileAV = metadata == null ? void 0 : metadata.areaVida.match(regex)[1];
      const sameAV = fileAV === areaVida;
      if ((metadata == null ? void 0 : metadata.a\u00F1o) === a\u00F1o && sameAV) {
        let objActivo = { file };
        Object.assign(objActivo, metadata);
        objCreados.push(objActivo);
      }
    }
    let prompt = this.plugin.tp.system.static_functions.get("prompt");
    let suggester = this.plugin.tp.system.static_functions.get("suggester");
    let objetivos = [];
    let deseaAgregarObjetivo;
    if (objCreados.length > 0) {
      let nextStep = await suggester(
        [
          "Agregar Objetivos",
          "Borrar y Crear de nuevo los objetivos",
          "Dejar los objetivos como est\xE1n "
        ],
        ["upd", "del+cre", "continue"],
        true,
        `\xBFYa hay ${objCreados.length} objetivos creados para ${areaVida} en el ${a\u00F1o}. Elige una opci\xF3n:`
      );
      switch (nextStep) {
        case "upd":
          do {
            let objetivo = await this.crearObjetivo(areaVida, a\u00F1o);
            deseaAgregarObjetivo = await suggester(
              ["Si", "No"],
              [true, false],
              true,
              `\xBFDesea agregar otro objetivo para ${areaVida} en ${a\u00F1o}?`
            );
          } while (deseaAgregarObjetivo);
          break;
        case "del+cre":
          await this.borrarObjetivos(objCreados);
          deseaAgregarObjetivo = await suggester(
            ["Si", "No"],
            [true, false],
            true,
            `\xBFDesea agregar alg\xFAn objetivo para ${areaVida} en ${a\u00F1o}?`
          );
          while (deseaAgregarObjetivo) {
            let objetivo = await this.crearObjetivo(areaVida, a\u00F1o);
            deseaAgregarObjetivo = await suggester(
              ["Si", "No"],
              [true, false],
              true,
              `\xBFDesea agregar otro objetivo para ${areaVida} en ${a\u00F1o}?`
            );
          }
          break;
        case "continue":
          console.log(`Continuar sin hacer nada con los objetivos de ${areaVida}`);
          break;
      }
    } else {
      deseaAgregarObjetivo = await suggester(
        ["Si", "No"],
        [true, false],
        true,
        `\xBFDesea agregar alg\xFAn objetivo para ${areaVida} en ${a\u00F1o}?`
      );
      while (deseaAgregarObjetivo) {
        let objetivo = await this.crearObjetivo(areaVida, a\u00F1o);
        objetivos.push([objetivo]);
        deseaAgregarObjetivo = await suggester(
          ["Si", "No"],
          [true, false],
          true,
          `\xBFDesea agregar otro objetivo para ${areaVida} en ${a\u00F1o}?`
        );
      }
    }
  }
  // Método objetivoAnual.
  async objetivoTrimestral(trimestre, areaVida) {
    var _a, _b;
    debugger;
    const folderObj = this.plugin.settings["folder_ObjCompassAnual"];
    const filesObj = app.vault.getMarkdownFiles().filter(
      (file) => file.path.includes(folderObj) && !file.path.includes("Plantillas") && !file.path.includes("Archivo")
    );
    let objCreados = [];
    for (let file of filesObj) {
      debugger;
      let metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      const regex = /\[\[\s*(.*?)\s*\]\]/;
      let fileAV = metadata == null ? void 0 : metadata.areaVida.match(regex)[1];
      const sameAV = fileAV === areaVida;
      if (((_b = metadata == null ? void 0 : metadata.trimestre) == null ? void 0 : _b.path) && typeof (metadata.trimestre.path === "string") && metadata.trimestre.path.includes(trimestre) && sameAV) {
        let objActivo = { file };
        Object.assign(objActivo, metadata);
        objCreados.push(objActivo);
      }
    }
    let prompt = this.plugin.tp.system.static_functions.get("prompt");
    let suggester = this.plugin.tp.system.static_functions.get("suggester");
    let objetivos = [];
    let deseaAgregarObjetivo;
    if (objCreados.length > 0) {
      let nextStep = await suggester(
        [
          "Agregar Objetivos",
          "Borrar y Crear de nuevo los objetivos",
          "Dejar los objetivos como est\xE1n "
        ],
        ["upd", "del+cre", "continue"],
        true,
        `\xBFYa hay ${objCreados.length} objetivos creados para ${areaVida} en el ${trimestre}. Elige una opci\xF3n:`
      );
      switch (nextStep) {
        case "upd":
          do {
            let objetivo = await this.crearObjetivoTrimestre(areaVida, trimestre);
            deseaAgregarObjetivo = await suggester(
              ["Si", "No"],
              [true, false],
              true,
              `\xBFDesea agregar otro objetivo para ${areaVida} en ${trimestre}?`
            );
          } while (deseaAgregarObjetivo);
          break;
        case "del+cre":
          await this.borrarObjetivos(objCreados);
          deseaAgregarObjetivo = await suggester(
            ["Si", "No"],
            [true, false],
            true,
            `\xBFDesea agregar alg\xFAn objetivo para ${areaVida} en ${trimestre}?`
          );
          while (deseaAgregarObjetivo) {
            let objetivo = await this.crearObjetivoTrimestre(areaVida, trimestre);
            deseaAgregarObjetivo = await suggester(
              ["Si", "No"],
              [true, false],
              true,
              `\xBFDesea agregar otro objetivo para ${areaVida} en ${trimestre}?`
            );
          }
          break;
        case "continue":
          console.log(`Continuar sin hacer nada con los objetivos de ${areaVida}`);
          break;
      }
    } else {
      deseaAgregarObjetivo = await suggester(
        ["Si", "No"],
        [true, false],
        true,
        `\xBFDesea agregar alg\xFAn objetivo para ${areaVida} en ${trimestre}?`
      );
      while (deseaAgregarObjetivo) {
        let objetivo = await this.crearObjetivoTrimestre(areaVida, trimestre);
        objetivos.push([objetivo]);
        deseaAgregarObjetivo = await suggester(
          ["Si", "No"],
          [true, false],
          true,
          `\xBFDesea agregar otro objetivo para ${areaVida} en ${trimestre}?`
        );
      }
    }
  }
  // Método objetivoTrimestral.
  /* 
  ----------------------------------------------------------------
  Método que crea el botón que se agrega en la tabla de proyectos en el 
  Compass Anual, para crear el proyecto a cada Objetivo.
  ----------------------------------------------------------------
  */
  createButtonTable(dv, objetivo) {
    const buttonContainer = dv.el("div", "");
    const button = dv.el("button", "Nuevo Proyecto");
    button.addEventListener("click", async (event) => {
      event.preventDefault();
      await this.crearProyectoObjetivo(dv, objetivo);
    });
    buttonContainer.appendChild(button);
    return buttonContainer;
  }
  /* 
  ----------------------------------------------------------------
  Metodo invocado por el boton de la tabla del compass anual "Nuevo Proyecto" 
  para crear proyecto a un objetivo anual establecido.
  ----------------------------------------------------------------
  */
  async crearProyectoObjetivo(dv, objetivo) {
    debugger;
    let suggester = this.plugin.tp.system.static_functions.get("suggester");
    let tipoProyecto = await suggester(
      ["Proyecto GTD", "Proyecto de Q"],
      [true, false],
      true,
      `\xBFEl proyecto ${objetivo.file.name} requiere un Proyecto GTD o Proyecto de Q?`
    );
    let proyecto;
    if (tipoProyecto) {
      proyecto = this.crearProyectoGTD(objetivo);
    } else {
      debugger;
      const regexTrim = /\[?\[?(\d{4}-Q[1-4])\]?\]?/g;
      const trimestre = objetivo.trimestre.path.match(regexTrim);
      const confirmaTrim = await suggester(
        ["Si", "No"],
        [true, false],
        true,
        `\xBFVamos a crear el proyecto ${objetivo.file.name} en el trimestre ${trimestre}?`
      );
      if (!confirmaTrim) {
        const q = await this.establecerTrimestre("objetivo del a\xF1o");
        debugger;
        await this.actualizarYAMLs({ trimestre: `[[${q.trimestre}]]` }, objetivo.file.path);
      }
      proyecto = await this.crearProyectoQ(objetivo);
    }
  }
  /* 
  ----------------------------------------------------------------
  Metodo que inicializa la creación de la plantilla de objetivo Compass.
  ----------------------------------------------------------------
  */
  async crearObjetivo(areaVida, a\u00F1o) {
    debugger;
    const templatePath = `Plantillas/${this.plugin.settings["folder_ObjCompassAnual"]}/Plt - ObjCompassAnual.md`;
    const template = app.vault.getAbstractFileByPath(templatePath);
    const folder = app.vault.getAbstractFileByPath("Inbox");
    let crearNota = this.plugin.tp.file.static_functions.get("create_new");
    let filename = `${a\u00F1o} - Objetivo para ${areaVida}`;
    let objetivo = await crearNota(template, filename, false, folder);
    return objetivo;
  }
  async crearObjetivoTrimestre(areaVida, trimestre) {
    debugger;
    const templatePath = `Plantillas/${this.plugin.settings["folder_ObjCompassAnual"]}/Plt - ObjCompassAnual.md`;
    const template = app.vault.getAbstractFileByPath(templatePath);
    const folder = app.vault.getAbstractFileByPath("Inbox");
    let crearNota = this.plugin.tp.file.static_functions.get("create_new");
    let filename = `Trimestre ${trimestre} - Objetivo para ${areaVida}`;
    let objetivo = await crearNota(template, filename, false, folder);
    return objetivo;
  }
  /* 
  ----------------------------------------------------------------
  Metodo invocado desde crearProyectoObjetivo(dv, objetivo)
  Esté método hace parte del proceso de Compass Anual.
  Facilita la creación del un proyecto de Q para un objetivo anual establecido.
  ----------------------------------------------------------------
  */
  async crearProyectoQ(objetivo) {
    let suggester = this.plugin.tp.system.static_functions.get("suggester");
    debugger;
    const templatePath = `Plantillas/${this.plugin.settings["folder_ProyectosQ"]}/Plt - ProyectosQ.md`;
    const template = app.vault.getAbstractFileByPath(templatePath);
    const folder = app.vault.getAbstractFileByPath("Inbox");
    let crearNota = this.plugin.tp.file.static_functions.get("create_new");
    let filename = `Proyecto para Objetivo Compass Anual - ${objetivo.id}`;
    let proyecto = await crearNota(template, filename, true, folder);
    return proyecto;
  }
  async crearProyectoGTD(objetivo) {
    debugger;
    const templatePath = `Plantillas/${this.plugin.settings["folder_ProyectosGTD"]}/Plt - ProyectosGTD.md`;
    const template = app.vault.getAbstractFileByPath(templatePath);
    const folder = app.vault.getAbstractFileByPath("Inbox");
    let crearNota = this.plugin.tp.file.static_functions.get("create_new");
    let filename = `Proyecto para Objetivo Compass Anual - ${objetivo.id}`;
    let proyecto = await crearNota(template, filename, true, folder);
    return proyecto;
  }
  /* 
  ----------------------------------------------------------------
  Metodo invocado en el proceso de Compass Anual, cuando elijo volver
  a crear todos los proyectos de un area de vida para un año.
  ----------------------------------------------------------------
  */
  async borrarObjetivos(objetivos) {
    debugger;
    for (let objetivo of objetivos) {
      try {
        await app.vault.delete(objetivo.file);
        console.log(`Archivo borrado: ${objetivo.file.path}`);
      } catch (error) {
        console.error(`Error al borrar el archivo ${objetivo.file.path}: ${error}`);
      }
    }
  }
  /* 
  ----------------------------------------------------------------
  Metodo que permite para cualquier caso en el que se requiera elegir 
  un trimestre para continuar un proceso, hacer la verificación sobre los
  trimestres que esten creados a partir de la nota TQ.  
  ----------------------------------------------------------------
  */
  async establecerTrimestre(temaTrimestre) {
    var _a;
    const folderQ = this.plugin.settings["folder_Trimestral"];
    const filesQ = app.vault.getMarkdownFiles().filter(
      (file) => file.path.includes(folderQ) && !file.path.includes("Plantillas") && !file.path.includes("Archivo")
    );
    let qCreados = [];
    for (let file of filesQ) {
      let metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if ((metadata == null ? void 0 : metadata.type) === "TQ" && (metadata == null ? void 0 : metadata.trimestre)) {
        let qActivo = { file };
        Object.assign(qActivo, metadata);
        qCreados.push(qActivo);
      }
    }
    let suggester = this.plugin.tp.system.static_functions.get("suggester");
    try {
      let q = await suggester(
        qCreados.map((b) => b.trimestre),
        qCreados.map((b) => b),
        true,
        `De que trimestre vamos a procesar tus ${temaTrimestre}`
      );
      if (q === void 0) {
        console.log("Operaci\xF3n cancelada por el usuario.");
        return;
      }
      console.log("El usuario seleccion\xF3:", q);
      return q;
    } catch (error) {
      console.error("Error en el suggester:", error);
    }
  }
  /* 
  ----------------------------------------------------------------
  Con este método puedo actualizar valores en las notas ya existentes.
  Lo utilizo en esta clase, para actualizar el trimestre.
  Esta función solo actualiza, no crea el campos si no existe. 
  ----------------------------------------------------------------
  */
  async actualizarYAMLs(campos, ruta) {
    try {
      const file = app.vault.getAbstractFileByPath(ruta);
      await app.fileManager.processFrontMatter(file, (frontmatter) => {
        for (const campo in campos) {
          if (frontmatter.hasOwnProperty(campo)) {
            frontmatter[campo] = campos[campo];
          }
        }
      });
      console.log("Frontmatter actualizado con \xE9xito");
    } catch (err) {
      console.error("Error al actualizar el frontmatter", err);
    }
  }
};

// src/modules/noteLifecycleManager/views/vistaRegistroDiario.ts
var import_obsidian62 = require("obsidian");
init_luxon();
init_registroTiempoAPI();
var VistaRegistroDiario = class extends import_obsidian62.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
    this.plugin = plugin;
    this.registroTiempoAPI = new registroTiempoAPI(this.plugin);
  }
  getViewType() {
    return "vista-registro-diario";
  }
  getDisplayText() {
    return "Registro Diario";
  }
  getIcon() {
    return "file-clock";
  }
  async onOpen() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      this.contentEl.setText("No hay un archivo activo.");
      return;
    }
    await this.actualizarVista(activeFile);
    this.intervalId = window.setInterval(async () => {
      await this.actualizarVista(activeFile);
    }, 5e3);
  }
  onClose() {
    clearInterval(this.intervalId);
  }
  async actualizarVista(activeFile) {
    var _a;
    this.contentEl.empty();
    const fechaHoy = DateTime.fromFormat(activeFile.basename.split(" ")[0], "yyyy-MM-dd", { locale: "es" });
    const folder = this.plugin.settings.folder_RegistroTiempo;
    const files = this.app.vault.getMarkdownFiles().filter((file) => file.path.includes(folder));
    let totalDia = 0;
    let registrosHoy = [];
    for (let file of files) {
      let metadata = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if (metadata == null ? void 0 : metadata.horaInicio) {
        let horaInicio = DateTime.fromFormat(metadata.horaInicio, "yyyy-MM-dd EEEE HH:mm", { locale: "es" });
        if (horaInicio.startOf("day").ts === fechaHoy.startOf("day").ts) {
          registrosHoy.push({ path: file.path, frontmatter: metadata });
          totalDia += parseInt(metadata.tiempoTrabajado || "0");
        }
      }
    }
    registrosHoy.sort((a, b) => {
      let fechaA = DateTime.fromFormat(a.frontmatter.horaInicio, "yyyy-MM-dd EEEE HH:mm", { locale: "es" }).ts;
      let fechaB = DateTime.fromFormat(b.frontmatter.horaInicio, "yyyy-MM-dd EEEE HH:mm", { locale: "es" }).ts;
      return fechaA - fechaB;
    });
    const titulo = this.contentEl.createEl("h2", { text: `Registros de tiempo del ${fechaHoy.toFormat("EEEE, DD")}.` });
    titulo.style.textAlign = "center";
    const table = this.contentEl.createEl("table", { cls: "table-resumenSemanal" });
    const thead = table.createEl("thead");
    const headerRow = thead.createEl("tr");
    ["Registro", "Descripci\xF3n", "Periodo", "Tiempo", "Estado", "Id", "Acci\xF3n"].forEach((header) => {
      headerRow.createEl("th", { text: header });
    });
    const tbody = table.createEl("tbody");
    registrosHoy.forEach((registro) => {
      const row = tbody.createEl("tr");
      this.fillRowWithData(row, registro);
    });
    this.contentEl.appendChild(table);
  }
  fillRowWithData(row, registro) {
    const tdArchivo = row.createEl("td");
    const linkEl = document.createElement("a");
    linkEl.textContent = registro.frontmatter.aliases[0];
    linkEl.href = "#";
    linkEl.addEventListener("click", async (ev) => {
      ev.preventDefault();
      const file = this.app.vault.getAbstractFileByPath(registro.path);
      if (file instanceof import_obsidian62.TFile) {
        await this.app.workspace.getLeaf(true).openFile(file, { focus: true });
      }
    });
    tdArchivo.appendChild(linkEl);
    row.createEl("td", { text: registro.frontmatter.descripcion });
    row.createEl("td", { text: `${DateTime.fromFormat(registro.frontmatter.horaInicio, "yyyy-MM-dd EEEE HH:mm", { locale: "es" }).toFormat("h:mm a")} / ${DateTime.fromFormat(registro.frontmatter.horaFinal, "yyyy-MM-dd EEEE HH:mm", { locale: "es" }).toFormat("h:mm a")}` });
    const tdPeriodo = row.createEl("td");
    if (registro.frontmatter.estado === "\u{1F7E2}") {
      let ahora = DateTime.local();
      let inicio = DateTime.fromFormat(registro.frontmatter.horaInicio, "yyyy-MM-dd EEEE HH:mm", { locale: "es" });
      let duracion = ahora.diff(inicio, ["days", "hours", "minutes"]);
      tdPeriodo.textContent = this.formatDuration(duracion);
    } else {
      let tiempoTrabajado = this.formatDuration(registro.frontmatter.tiempoTrabajado);
      tdPeriodo.textContent = tiempoTrabajado;
    }
    row.createEl("td", { text: registro.frontmatter.estado });
    row.createEl("td", { text: registro.frontmatter.id });
    const actionCell = row.createEl("td");
    if (registro.frontmatter.estado === "\u{1F7E2}") {
      actionCell.appendChild(this.createButtonTable("Cerrar", async () => {
        await this.registroTiempoAPI.cerrarRegistro(registro.frontmatter.id);
      }));
    } else {
      actionCell.appendChild(this.createButtonTable("Retomar", () => {
        this.retomarTarea(registro.frontmatter.id);
      }));
    }
  }
  // Función auxiliar para formatear la duración de Luxon a un formato legible
  formatDuration(ms) {
    if (ms === null || ms === void 0 || isNaN(ms)) {
      return "No definido";
    } else {
      let minutos = Math.floor(ms / (1e3 * 60));
      let horas = Math.floor(minutos / 60);
      minutos = minutos % 60;
      let dias = Math.floor(horas / 24);
      horas = horas % 24;
      if (dias > 0) {
        return `${dias} d ${horas} h ${minutos} min`;
      } else if (horas > 0) {
        return `${horas} h ${minutos} min`;
      } else {
        return `${minutos} min`;
      }
    }
  }
  createButtonTable(buttonText, onClickCallback) {
    const button = document.createElement("button");
    button.textContent = buttonText;
    button.type = "button";
    button.classList.add("your-button-class");
    button.addEventListener("click", onClickCallback);
    return button;
  }
  async retomarTarea(id) {
    debugger;
    const filePath = `Plantillas/${this.plugin.settings[`folder_RegistroTiempo`]}/Plt - RegistroTiempo.md`;
    const template = app.vault.getAbstractFileByPath(filePath);
    if (template instanceof import_obsidian62.TFile) {
      console.log("Archivo encontrado:", template);
    } else {
      console.log("Archivo no encontrado.");
    }
    const filename = "Retomar " + id;
    const folder = app.vault.getAbstractFileByPath("Inbox");
    const tp = this.getTp();
    let crearNota = tp.file.static_functions.get("create_new");
    await crearNota(template, filename, false, folder).basename;
  }
  getTp() {
    if (!this.plugin || !this.plugin.app.plugins.enabledPlugins.has("templater-obsidian")) {
      console.error("El plugin Templater no est\xE1 habilitado.");
      return;
    }
    let tpGen = this.plugin.app.plugins.plugins["templater-obsidian"].templater;
    tpGen = tpGen.functions_generator.internal_functions.modules_array;
    let tp = {};
    tp.file = tpGen.find((m) => m.name == "file");
    tp.system = tpGen.find((m) => m.name == "system");
    if (!tp.file) {
      console.error("No se pudo acceder al objeto de funciones actuales de Templater.");
      return;
    }
    console.log('tp con propiedades "file" se ha cargado satisfactoriamente');
    return tp;
  }
  // Opcional: Implementa onClose si necesitas limpieza al cerrar la vista.
};

// src/modules/GPThora/GPThora.ts
var import_obsidian63 = require("obsidian");
var GPThora = class {
  constructor(app2) {
    this.app = app2;
  }
  onload() {
    this.app.commands.addCommand({
      id: "show-local-time",
      name: "Mostrar Hora Local",
      callback: () => this.showLocalTimeModal()
    });
  }
  showLocalTimeModal() {
    const modal = new LocalTimeModal(this.app);
    modal.open();
  }
};
var LocalTimeModal = class extends import_obsidian63.Modal {
  constructor(app2) {
    super(app2);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    const now2 = /* @__PURE__ */ new Date();
    const hours = now2.getHours() % 12 || 12;
    const minutes = now2.getMinutes().toString().padStart(2, "0");
    const ampm = now2.getHours() >= 12 ? "PM" : "AM";
    const timeString = `${hours}:${minutes} ${ampm}`;
    contentEl.createEl("h1", { text: "Hora Local" });
    contentEl.createEl("p", { text: timeString });
    contentEl.style.backgroundColor = "#2E3440";
    contentEl.style.color = "#D8DEE9";
    contentEl.style.padding = "20px";
    contentEl.style.textAlign = "center";
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/modules/moduloLibros/librosAPI.ts
var import_obsidian64 = require("obsidian");
init_luxon();
var librosAPI = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.tp = this.plugin.tp;
  }
  async kindle(dv) {
    let folderPrincipal = this.plugin.settings["folder_KindleNotes"];
    const libraryFolder = this.plugin.app.vault.getAbstractFileByPath(folderPrincipal);
    if (!(libraryFolder instanceof import_obsidian64.TFolder)) {
      new import_obsidian64.Notice(`La carpeta ${folderPrincipal} no existe.`);
      return;
    }
    let archivoActivo = this.plugin.app.workspace.getActiveFile();
    if (!archivoActivo) {
      new import_obsidian64.Notice("No hay una nota activa.");
      return;
    }
    const metadata = this.plugin.app.metadataCache.getFileCache(archivoActivo);
    const yamlData = (metadata == null ? void 0 : metadata.frontmatter) || {};
    if (yamlData.kindleNote) {
      const linkElement = document.createElement("a");
      linkElement.href = yamlData.kindleNote;
      linkElement.textContent = "Ver en Kindle";
      dv.container.innerHTML = "";
      dv.container.appendChild(linkElement);
    } else {
      const notesList = await this.getNotesFromFolder(folderPrincipal);
      if (notesList.length === 0) {
        new import_obsidian64.Notice("No hay notas en el folder de Kindle.");
        return;
      }
      const suggestorConfig = {
        onChooseItem: async (selectedNote, evt) => {
          yamlData.kindleNote = selectedNote.path;
          await this.plugin.app.vault.modify(archivoActivo, `---
${yamlData}
...`);
          new import_obsidian64.Notice("Se ha guardado el link de la nota Kindle en el archivo actual.");
        },
        getItems: () => notesList,
        renderSuggestion: (item, el) => {
          el.textContent = item.basename;
        }
      };
      new Suggester(this.plugin, suggestorConfig).start();
    }
  }
  async getNotesFromFolder(folderPath) {
    const folderFiles = await this.plugin.app.vault.getAllLoadedFiles();
    return folderFiles.filter((file) => file instanceof import_obsidian64.TFile && file.path.startsWith(folderPath));
  }
  // Función para crear y mostrar el botón inicial "Menú hoy"
  async mostrarBotonCrearLibro(dv) {
    let folderPrincipal = this.plugin.settings["folder_Biblioteca"];
    const libraryFolder = this.plugin.app.vault.getAbstractFileByPath(folderPrincipal);
    if (!(libraryFolder instanceof import_obsidian64.TFolder)) {
      new import_obsidian64.Notice(`La carpeta ${folderPrincipal} no existe.`);
      return;
    }
    let archivoActivo = this.plugin.app.workspace.getActiveFile();
    if (!archivoActivo) {
      new import_obsidian64.Notice("No hay una nota activa.");
      return;
    }
    const bookExists = await this.bookExistsInLibrary(folderPrincipal, archivoActivo);
    if (bookExists) {
      const alias = await this.getAlias(bookExists);
      const texto = document.createElement("p");
      const link = document.createElement("a");
      link.href = bookExists.path;
      link.textContent = alias;
      link.dataset.href = bookExists.path;
      link.className = "internal-link";
      texto.textContent = `El libro ya est\xE1 en la biblioteca: `;
      texto.appendChild(link);
      dv.container.appendChild(texto);
    } else {
      dv.container.innerHTML = "";
      const botonCrearLibro = document.createElement("button");
      botonCrearLibro.textContent = "Ingresar a mi Biblioteca";
      dv.container.appendChild(botonCrearLibro);
      botonCrearLibro.onclick = async () => {
        await this.ingresarLibroBiblioteca();
      };
    }
  }
  async bookExistsInLibrary(folderPrincipal, archivoActivo) {
    const files = this.plugin.app.vault.getFiles();
    const activeFileName = archivoActivo.basename;
    for (let file of files) {
      if (file.path.startsWith(folderPrincipal)) {
        const cache = this.plugin.app.metadataCache.getFileCache(file);
        const frontmatter = cache == null ? void 0 : cache.frontmatter;
        if (frontmatter && frontmatter.asunto) {
          const asunto = frontmatter.asunto;
          if (Array.isArray(asunto)) {
            for (let entry of asunto) {
              if (entry.includes(`[[${activeFileName}]]`)) {
                return file;
              }
            }
          } else if (typeof asunto === "string" && asunto.includes(`[[${activeFileName}]]`)) {
            return file;
          }
        }
      }
    }
    return false;
  }
  async getAlias(file) {
    const cache = this.plugin.app.metadataCache.getFileCache(file);
    const frontmatter = cache == null ? void 0 : cache.frontmatter;
    return frontmatter && frontmatter.aliases && frontmatter.aliases[0] ? frontmatter.aliases[0] : file.basename;
  }
  async ingresarLibroBiblioteca() {
    debugger;
    const template = app.vault.getAbstractFileByPath("Plantillas/Subsistemas/Libros/Biblioteca/Plt - Libro a Biblioteca.md");
    const filename = "Nuevo Libro";
    const folder = app.vault.getAbstractFileByPath("Inbox");
    if (template instanceof import_obsidian64.TFile) {
      console.log("Archivo encontrado:", template);
    } else {
      console.log("Archivo no encontrado.");
    }
    let crearNota = this.tp.file.static_functions.get("create_new");
    await crearNota(template, filename, false, folder).basename;
  }
};

// src/modules/moduloRegistroTiempo/API/updateSesionLectura.ts
init_utilsAPI();
var import_obsidian65 = require("obsidian");
init_luxon();
var updateSesionLectura = class extends YAMLUpdaterAPI2 {
  constructor(plugin) {
    super(plugin);
    this.plugin = plugin;
    this.plugin = plugin;
    this.utilsApi = new utilsAPI(plugin);
    this.tp = plugin.tp;
    this.nota = {};
    this.infoNota = {};
  }
  //actualizarNota(infoNota: any, campos: any): Promise<any>;
  //getFecha(): Promise<string>;
  //getHoraFinal(): Promise<string>;
  //getTiempoLeido(): Promise<string>;
  async getTiempoLeido(parametro, actual) {
    debugger;
    let horaInicioStr = this.infoNota.horaInicio;
    let cierre;
    let [fecha, , hora] = horaInicioStr.split(" ");
    let fechaHoraISO = `${fecha}T${hora}`;
    let horaInicio = new Date(fechaHoraISO);
    if (parametro == void 0) {
      cierre = /* @__PURE__ */ new Date();
    } else {
      let [fechaCierre, , horaCierre] = parametro.split(" ");
      let fechaHoraCierreISO = `${fechaCierre}T${horaCierre}`;
      cierre = new Date(fechaHoraCierreISO);
    }
    let diferenciaEnMilisegundos = cierre - horaInicio;
    return diferenciaEnMilisegundos;
  }
  async getEstado(parametro, actual) {
    let campo;
    if (parametro == void 0) {
      campo = "\u{1F535}";
      if (campo === null) {
        new Notice("Modificaci\xF3n de nota cancelada por el usuario.");
        return;
      }
    } else {
      campo = parametro;
    }
    this.nota.estado = campo;
    return campo;
  }
  async getPPM() {
    debugger;
    let palabrasPorHoja = parseInt(this.infoNota.palabrasPorHoja);
    let paginasLeidas = parseInt(this.nota.pagLeidas);
    let tiempoLeido = parseInt(this.nota.tiempoLeido);
    let PPM = palabrasPorHoja * paginasLeidas / (tiempoLeido / 6e4);
    return PPM;
  }
  async getPagLeidas() {
    debugger;
    let pagFin = parseInt(this.nota.pagFin);
    let paginasLeidas = pagFin - parseInt(this.infoNota.pagInicio);
    return parseInt(paginasLeidas);
  }
  async getPagFin() {
    debugger;
    let prompt = this.tp.system.static_functions.get("prompt");
    let pagFin = await prompt(`\xBFHasta que p\xE1gina le\xEDste?`, `${this.infoNota.pagInicio}`, true);
    return parseInt(pagFin);
  }
  async getPorLeer() {
    debugger;
    let porLeer = parseInt(this.infoNota.paginas) - parseInt(this.nota.pagFin);
    return porLeer;
  }
};

// src/modules/taskManager/api/tareasAPI.ts
var import_obsidian67 = require("obsidian");

// src/modules/taskManager/utils/taskUtils.ts
var import_obsidian66 = require("obsidian");
var TaskUtils = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  compararFechas(fecha1, fecha2) {
    if (!fecha1 && !fecha2)
      return 0;
    if (!fecha1)
      return 1;
    if (!fecha2)
      return -1;
    return fecha1.getTime() - fecha2.getTime();
  }
  normalizarHora(hora) {
    const patrones = [
      /^(\d{1,2})(?::(\d{2}))?\s*(am|pm)?$/i,
      /^(\d{1,2}):(\d{2})\s*(am|pm)?$/i,
      /^(\d{1,2}):(\d{2})$/
    ];
    for (const patron of patrones) {
      const match2 = hora.toLowerCase().match(patron);
      if (match2) {
        let horas = parseInt(match2[1]);
        const minutos = match2[2] ? match2[2] : "00";
        const periodo = match2[3];
        if (periodo === "pm" && horas < 12)
          horas += 12;
        if (periodo === "am" && horas === 12)
          horas = 0;
        return `${horas.toString().padStart(2, "0")}:${minutos}`;
      }
    }
    return null;
  }
  extraerFechasYHoras(linea) {
    var _a, _b, _c, _d;
    const horaInicioMatch = linea.match(/\[hI:\s*([^\]]+)\]/);
    const horaFinMatch = linea.match(/\[hF:\s*([^\]]+)\]/);
    return {
      fechaCreacion: (_a = linea.match(/➕ (\d{4}-\d{2}-\d{2})/)) == null ? void 0 : _a[1],
      fechaScheduled: (_b = linea.match(/⏳ (\d{4}-\d{2}-\d{2})/)) == null ? void 0 : _b[1],
      fechaStart: (_c = linea.match(/🛫 (\d{4}-\d{2}-\d{2})/)) == null ? void 0 : _c[1],
      fechaVencimiento: (_d = linea.match(/📅 (\d{4}-\d{2}-\d{2})/)) == null ? void 0 : _d[1],
      horaInicio: horaInicioMatch ? this.normalizarHora(horaInicioMatch[1].trim()) : void 0,
      horaFin: horaFinMatch ? this.normalizarHora(horaFinMatch[1].trim()) : void 0
    };
  }
  obtenerTituloNota(file) {
    var _a;
    const metadata = (_a = this.plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    if (metadata == null ? void 0 : metadata.aliases) {
      if (Array.isArray(metadata.aliases))
        return metadata.aliases[0];
      if (typeof metadata.aliases === "string")
        return metadata.aliases;
    }
    if (metadata == null ? void 0 : metadata.titulo)
      return metadata.titulo;
    const coincidencia = file.basename.match(/(?:PGTD|PQ|AI|AV|Ax|RR|DJ|OCA|CAC) - (.+)/);
    if (coincidencia && coincidencia[1])
      return coincidencia[1];
    return file.basename;
  }
  categorizarEtiquetas(etiquetas) {
    return {
      todoist: etiquetas.filter((e) => e.startsWith("#todoist")),
      contextos: etiquetas.filter((e) => e.match(/#cx(?:[/-].+)$/)).map((e) => this.limpiarPrefijo(e, "cx")),
      personas: etiquetas.filter((e) => e.startsWith("#px-")).map((e) => this.formatearEtiquetaPersona(e)),
      otras: etiquetas.filter(
        (e) => !e.startsWith("#todoist") && !e.match(/#cx(?:[/-]|$)/) && !e.startsWith("#px-")
      )
    };
  }
  // Nuevo método para formatear etiquetas de personas
  formatearEtiquetaPersona(etiqueta) {
    const nombre = etiqueta.replace("#px-", "");
    return nombre.replace(/_/g, " ");
  }
  limpiarPrefijo(etiqueta, prefijo) {
    const sinPrefijo = etiqueta.replace(new RegExp(`#${prefijo}[/-]`), "");
    return sinPrefijo.replace(/-/g, " \u2192 ").replace(/\//g, " \u2192 ");
  }
  limpiarTextoTarea(linea) {
    let textoLimpio = linea.replace(/^- \[ \]/, "").replace(/[➕📅⏳🛫] \d{4}-\d{2}-\d{2}/g, "").replace(/\[hI:[^\]]+\]/g, "").replace(/\[hF:[^\]]+\]/g, "").replace(/\[link\]\([^\)]+\)/g, "").replace(/%%\[todoist_id:: \d+\]%%/g, "").replace(/#[\w-]+(?:\/[\w-]+)*\b/g, "").replace(/#[\w-]+(?:-[\w-]+)*\b/g, "");
    textoLimpio = textoLimpio.replace(/\s+/g, " ").trim();
    return textoLimpio;
  }
  // Método de utilidad para obtener una representación jerárquica de las etiquetas
  obtenerJerarquiaEtiquetas(etiquetas) {
    const jerarquia = /* @__PURE__ */ new Map();
    etiquetas.forEach((etiqueta) => {
      var _a;
      const partes = etiqueta.slice(1).split(/[/-]/);
      const categoria = partes[0];
      if (!jerarquia.has(categoria)) {
        jerarquia.set(categoria, /* @__PURE__ */ new Set());
      }
      if (partes.length > 1) {
        const subetiquetas = partes.slice(1).join("/");
        (_a = jerarquia.get(categoria)) == null ? void 0 : _a.add(subetiquetas);
      }
    });
    return jerarquia;
  }
  obtenerFechaLocal() {
    const ahora = /* @__PURE__ */ new Date();
    return new Date(
      ahora.getFullYear(),
      ahora.getMonth(),
      ahora.getDate(),
      0,
      0,
      0
    );
  }
  parsearFechaVencimiento(fechaStr) {
    if (!fechaStr)
      return null;
    try {
      const [a\u00F1o, mes, dia] = fechaStr.split("-").map((num) => parseInt(num));
      if (isNaN(a\u00F1o) || isNaN(mes) || isNaN(dia))
        return null;
      const fecha = new Date(a\u00F1o, mes - 1, dia, 0, 0, 0);
      return fecha;
    } catch (error) {
      console.error("Error parseando fecha:", error);
      return null;
    }
  }
  normalizarFechaAString(fecha) {
    const a\u00F1o = fecha.getFullYear();
    const mes = String(fecha.getMonth() + 1).padStart(2, "0");
    const dia = String(fecha.getDate()).padStart(2, "0");
    return `${a\u00F1o}-${mes}-${dia}`;
  }
  extraerDependenciasYIds(linea) {
    console.log("Analizando l\xEDnea para IDs:", linea);
    const resultado = {
      taskId: void 0,
      dependencyId: void 0
    };
    const taskIdMatch = linea.match(/🆔\s*([a-z0-9]{5,7})/);
    if (taskIdMatch) {
      resultado.taskId = taskIdMatch[1];
      console.log("ID encontrado:", resultado.taskId);
    }
    const dependencyMatch = linea.match(/⛔\s*([a-z0-9]{5,7})/);
    if (dependencyMatch) {
      resultado.dependencyId = dependencyMatch[1];
      console.log("Dependencia encontrada:", resultado.dependencyId);
    }
    return resultado;
  }
  async verificarEstadoTarea(taskId) {
    console.log("\nVerificando estado de tarea:", taskId);
    const todosLosArchivos = this.plugin.app.vault.getMarkdownFiles();
    const filesParaProcesar = todosLosArchivos.filter((file) => !this.debeExcluirArchivo(file));
    console.log(`Buscando en ${filesParaProcesar.length} archivos (excluidos: ${todosLosArchivos.length - filesParaProcesar.length})`);
    for (const file of filesParaProcesar) {
      try {
        const contenido = await this.plugin.app.vault.cachedRead(file);
        const lineas = contenido.split("\n");
        for (const linea of lineas) {
          if (linea.includes(`\u{1F194} ${taskId}`)) {
            const estaCompletada = linea.trim().startsWith("- [x]");
            const tituloArchivo = this.obtenerTituloNota(file);
            const textoTarea = this.limpiarTextoTarea(linea);
            console.log("Tarea encontrada en:", file.path);
            console.log("Estado completada:", estaCompletada);
            console.log("Texto de la tarea:", textoTarea);
            return {
              completada: estaCompletada,
              rutaArchivo: file.path,
              tituloArchivo,
              textoTarea
            };
          }
        }
      } catch (error) {
        console.error(`Error procesando archivo ${file.path}:`, error);
      }
    }
    console.log("Tarea no encontrada en los archivos permitidos");
    return {
      completada: false
    };
  }
  // En la clase TaskUtils
  extraerEtiquetas(linea) {
    const etiquetas = [];
    const patronesEtiquetas = [
      // Etiquetas de personas con formato #px-Nombre_Apellido 
      /#px-[A-Za-z]+(?:_[A-Za-z]+)*(?:_[A-Za-z]+)?\b/g,
      // Etiquetas simples: #todoist
      /#[\w-]+\b/g,
      // Etiquetas con jerarquía usando "/": #cx/alguna/cosa
      /#[\w-]+(?:\/[\w-]+)+\b/g,
      // Etiquetas con jerarquía usando "-": #cx-alguna-cosa
      /#[\w-]+(?:-[\w-]+)+\b/g
    ];
    patronesEtiquetas.forEach((patron) => {
      const coincidencias = linea.match(patron);
      if (coincidencias) {
        coincidencias.forEach((etiqueta) => {
          if (!etiquetas.includes(etiqueta) && this.esEtiquetaValida(etiqueta)) {
            etiquetas.push(etiqueta);
          }
        });
      }
    });
    return this.organizarEtiquetas(etiquetas);
  }
  esEtiquetaValida(etiqueta) {
    if (!etiqueta.startsWith("#"))
      return false;
    if (etiqueta.startsWith("#px-")) {
      const nombreCompleto = etiqueta.slice(4);
      return /^[A-Za-z]+(?:_[A-Za-z]+)*$/.test(nombreCompleto);
    }
    const caracteresInvalidos = /[!@$%^&*()+={}\[\]:;"'<>,.?~\\|]/;
    if (caracteresInvalidos.test(etiqueta))
      return false;
    const partesEtiqueta = etiqueta.slice(1).split(/[/-]/);
    return partesEtiqueta.every((parte) => parte.length > 0);
  }
  organizarEtiquetas(etiquetas) {
    const categoriasConocidas = {
      todoist: [],
      cx: [],
      px: [],
      otras: []
    };
    etiquetas.forEach((etiqueta) => {
      if (etiqueta.startsWith("#px-")) {
        categoriasConocidas.px.push(etiqueta);
      } else if (etiqueta.startsWith("#todoist")) {
        categoriasConocidas.todoist.push(etiqueta);
      } else if (etiqueta.match(/#cx(?:[/-]|$)/)) {
        categoriasConocidas.cx.push(etiqueta);
      } else {
        categoriasConocidas.otras.push(etiqueta);
      }
    });
    Object.values(categoriasConocidas).forEach((categoria) => {
      categoria.sort((a, b) => a.localeCompare(b));
    });
    return [
      ...categoriasConocidas.todoist,
      ...categoriasConocidas.cx,
      ...categoriasConocidas.px,
      ...categoriasConocidas.otras
    ];
  }
  // Agregar método para verificar exclusiones
  debeExcluirArchivo(file) {
    if (file.path.startsWith("Plantillas/")) {
      return true;
    }
    if (file.path.startsWith(`${this.plugin.settings.folder_SistemaGTD}/`)) {
      return true;
    }
    if (file.path.startsWith("Archivo/")) {
      return true;
    }
    return false;
  }
  async encontrarLineasTarea(file) {
    const lineasTareas = /* @__PURE__ */ new Map();
    try {
      const contenido = await this.plugin.app.vault.cachedRead(file);
      const lineas = contenido.split("\n");
      lineas.forEach((linea, index) => {
        const textoLimpio = this.limpiarTextoTarea(linea);
        if (textoLimpio && linea.trim().startsWith("- [")) {
          lineasTareas.set(textoLimpio, {
            numero: index + 1,
            texto: linea.trim()
          });
        }
      });
    } catch (error) {
      console.error(`Error procesando l\xEDneas en ${file.path}:`, error);
    }
    return lineasTareas;
  }
};

// src/modules/taskManager/utils/taskWeightCalculator.ts
var _TaskWeightCalculator = class _TaskWeightCalculator {
  static setTaskUtils(utils) {
    _TaskWeightCalculator.taskUtils = utils;
  }
  static getFechaPrioritaria(task, tipoFecha = "any") {
    if (!task)
      return null;
    switch (tipoFecha) {
      case "start":
        return task.fechaStart || null;
      case "due":
        return task.fechaVencimiento || null;
      case "scheduled":
        return task.fechaScheduled || null;
      case "any":
        return task.fechaVencimiento || task.fechaScheduled || task.fechaStart || null;
      default:
        return null;
    }
  }
  static shouldIncludeTask(task, searchType, currentDate) {
    if (!_TaskWeightCalculator.taskUtils) {
      console.error("TaskUtils no inicializado en TaskWeightCalculator");
      return false;
    }
    try {
      switch (searchType) {
        case "start_vencidas": {
          const fechaStart = task.fechaStart;
          if (!fechaStart)
            return false;
          const fechaStartObj = _TaskWeightCalculator.taskUtils.parsearFechaVencimiento(fechaStart);
          return fechaStartObj !== null && fechaStartObj < currentDate;
        }
        case "vencidas": {
          const fechaVencimiento = task.fechaVencimiento;
          if (!fechaVencimiento)
            return false;
          const fechaVencObj = _TaskWeightCalculator.taskUtils.parsearFechaVencimiento(fechaVencimiento);
          return fechaVencObj !== null && fechaVencObj < currentDate;
        }
        case "hoy": {
          const fechas = [task.fechaVencimiento, task.fechaScheduled, task.fechaStart].filter((f) => f);
          return fechas.some((fecha) => {
            const fechaObj = _TaskWeightCalculator.taskUtils.parsearFechaVencimiento(fecha);
            return (fechaObj == null ? void 0 : fechaObj.toDateString()) === currentDate.toDateString();
          });
        }
        case "proximas": {
          const fechaVencimiento = task.fechaVencimiento;
          if (!fechaVencimiento)
            return false;
          const fechaVencObj = _TaskWeightCalculator.taskUtils.parsearFechaVencimiento(fechaVencimiento);
          if (!fechaVencObj)
            return false;
          const diasDiferencia = Math.ceil(
            (fechaVencObj.getTime() - currentDate.getTime()) / (1e3 * 60 * 60 * 24)
          );
          return diasDiferencia >= 0 && diasDiferencia <= 7;
        }
        default:
          return false;
      }
    } catch (error) {
      console.error("Error en shouldIncludeTask:", error);
      return false;
    }
  }
  static calculateWeight(task) {
    let baseWeight = 0;
    let timeWeight = 0;
    let priorityWeight = 0;
    if (task.fechaVencimiento)
      baseWeight += this.WEIGHTS.DUE_DATE;
    if (task.fechaScheduled)
      baseWeight += this.WEIGHTS.SCHEDULED;
    if (task.fechaStart)
      baseWeight += this.WEIGHTS.START;
    if (task.horaFin)
      timeWeight += this.WEIGHTS.HORA_FIN;
    if (task.horaInicio)
      timeWeight += this.WEIGHTS.HORA_INICIO;
    const texto = task.texto.toLowerCase();
    if (texto.includes("\u{1F53A}"))
      priorityWeight += this.WEIGHTS.PRIORITY.HIGHEST;
    if (texto.includes("\u23EB"))
      priorityWeight += this.WEIGHTS.PRIORITY.HIGH;
    if (texto.includes("\u{1F53C}"))
      priorityWeight += this.WEIGHTS.PRIORITY.MEDIUM;
    if (texto.includes("\u{1F53D}"))
      priorityWeight += this.WEIGHTS.PRIORITY.LOW;
    if (texto.includes("\u23EC"))
      priorityWeight += this.WEIGHTS.PRIORITY.LOWEST;
    return {
      baseWeight,
      timeWeight,
      priorityWeight,
      totalWeight: baseWeight + timeWeight + priorityWeight
    };
  }
  static sortTasks(tasks) {
    if (!_TaskWeightCalculator.taskUtils) {
      console.error("TaskUtils no inicializado en TaskWeightCalculator");
      return tasks;
    }
    return tasks.sort((a, b) => {
      var _a, _b, _c, _d;
      try {
        const fechaA = this.getFechaPrioritaria(a, "any");
        const fechaB = this.getFechaPrioritaria(b, "any");
        if (fechaA !== fechaB) {
          const dateA = fechaA ? _TaskWeightCalculator.taskUtils.parsearFechaVencimiento(fechaA) : null;
          const dateB = fechaB ? _TaskWeightCalculator.taskUtils.parsearFechaVencimiento(fechaB) : null;
          if (dateA && dateB) {
            return dateA.getTime() - dateB.getTime();
          }
          return 0;
        }
        if (a.horaInicio && b.horaInicio) {
          if (a.horaInicio !== b.horaInicio) {
            return a.horaInicio.localeCompare(b.horaInicio);
          }
        } else if (a.horaInicio) {
          return -1;
        } else if (b.horaInicio) {
          return 1;
        }
        const weightA = (_b = (_a = a.weight) == null ? void 0 : _a.totalWeight) != null ? _b : 0;
        const weightB = (_d = (_c = b.weight) == null ? void 0 : _c.totalWeight) != null ? _d : 0;
        return weightB - weightA;
      } catch (error) {
        console.error("Error ordenando tareas:", error);
        return 0;
      }
    });
  }
  static calculateBaseWeight(task) {
    let weight = 0;
    if (task.fechaVencimiento)
      weight += this.WEIGHTS.DUE_DATE;
    if (task.fechaScheduled)
      weight += this.WEIGHTS.SCHEDULED;
    if (task.fechaStart)
      weight += this.WEIGHTS.START;
    return weight;
  }
  static calculateTimeWeight(task) {
    let weight = 0;
    if (task.horaFin)
      weight += this.WEIGHTS.HORA_FIN;
    if (task.horaInicio)
      weight += this.WEIGHTS.HORA_INICIO;
    return weight;
  }
  static calculatePriorityWeight(task) {
    const texto = task.texto.toLowerCase();
    if (texto.includes("\u{1F53A}"))
      return this.WEIGHTS.PRIORITY.HIGHEST;
    if (texto.includes("\u23EB"))
      return this.WEIGHTS.PRIORITY.HIGH;
    if (texto.includes("\u{1F53C}"))
      return this.WEIGHTS.PRIORITY.MEDIUM;
    if (texto.includes("\u{1F53D}"))
      return this.WEIGHTS.PRIORITY.LOW;
    if (texto.includes("\u23EC"))
      return this.WEIGHTS.PRIORITY.LOWEST;
    return 0;
  }
  static esFechaValida(fecha) {
    try {
      const fechaObj = new Date(fecha);
      return fechaObj.toString() !== "Invalid Date";
    } catch (e) {
      return false;
    }
  }
};
_TaskWeightCalculator.WEIGHTS = {
  HORA_FIN: 5,
  HORA_INICIO: 5,
  DUE_DATE: 5,
  SCHEDULED: 4,
  START: 3,
  PRIORITY: {
    HIGHEST: 4,
    HIGH: 3,
    MEDIUM: 2,
    LOW: -1,
    LOWEST: -2
  }
};
var TaskWeightCalculator = _TaskWeightCalculator;

// src/modules/taskManager/api/tareasAPI.ts
var TareasAPI = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.taskUtils = new TaskUtils(plugin);
    TaskWeightCalculator.setTaskUtils(this.taskUtils);
  }
  debeExcluirArchivo(file) {
    if (file.path.startsWith("Plantillas/")) {
      return true;
    }
    if (file.path.startsWith(`${this.plugin.settings.folder_SistemaGTD}/`)) {
      return true;
    }
    if (file.path.startsWith("Archivo/")) {
      return true;
    }
    return false;
  }
  async procesarTareas(files, filtro, buscarEnEjecucion = false) {
    const tareas = [];
    const errores = [];
    try {
      const filesParaProcesar = files.filter((file) => !this.debeExcluirArchivo(file));
      console.log(`
=== INICIANDO PROCESAMIENTO DE TAREAS ===`);
      console.log(`Procesando ${filesParaProcesar.length} archivos de ${files.length} totales`);
      for (const file of filesParaProcesar) {
        try {
          const contenido = await this.plugin.app.vault.cachedRead(file);
          const lineas = contenido.split("\n");
          const tituloNota = this.taskUtils.obtenerTituloNota(file);
          console.log(`
Procesando archivo: ${file.path}`);
          for (const linea of lineas) {
            const esEnEjecucion = linea.trim().startsWith("- [/]");
            const esAbierta = linea.trim().startsWith("- [ ]");
            const esCompletada = linea.trim().startsWith("- [x]");
            if (!linea.trim().startsWith("- ["))
              continue;
            if (buscarEnEjecucion) {
              if (!esEnEjecucion)
                continue;
            } else {
              if (esCompletada || esEnEjecucion)
                continue;
              if (!esAbierta)
                continue;
            }
            const textoLimpio = this.taskUtils.limpiarTextoTarea(linea);
            const textoOriginal = linea.trim();
            const fechasYHoras = this.taskUtils.extraerFechasYHoras(linea);
            const etiquetasExtraidas = this.taskUtils.extraerEtiquetas(linea);
            const etiquetasCategorizadas = this.taskUtils.categorizarEtiquetas(etiquetasExtraidas);
            const { taskId, dependencyId } = this.taskUtils.extraerDependenciasYIds(linea);
            const tarea = {
              texto: textoLimpio,
              textoOriginal,
              rutaArchivo: file.path,
              nombreArchivo: file.basename,
              titulo: tituloNota,
              estado: esEnEjecucion ? "en_ejecucion" /* EnEjecucion */ : "abierta" /* Abierta */,
              ...fechasYHoras,
              etiquetas: {
                todas: etiquetasExtraidas,
                ...etiquetasCategorizadas
              },
              taskId,
              dependencyId
            };
            tarea.weight = TaskWeightCalculator.calculateWeight(tarea);
            if (dependencyId) {
              const estadoDependencia = await this.taskUtils.verificarEstadoTarea(dependencyId);
              tarea.isBlocked = !estadoDependencia.completada;
              tarea.dependencyLocation = estadoDependencia.rutaArchivo;
              tarea.dependencyTitle = estadoDependencia.tituloArchivo;
              tarea.dependencyTexto = estadoDependencia.textoTarea;
            }
            const cumpleFiltro = await Promise.resolve(filtro(tarea));
            if (cumpleFiltro) {
              console.log(`-> Tarea agregada: ${textoLimpio.substring(0, 50)}...`);
              tareas.push(tarea);
            }
          }
        } catch (fileError) {
          errores.push(`Error procesando archivo ${file.path}: ${fileError.message}`);
          console.error(`Error en archivo ${file.path}:`, fileError);
        }
      }
    } catch (error) {
      console.error("Error general procesando tareas:", error);
      new import_obsidian67.Notice("Error procesando tareas. Revisa la consola para m\xE1s detalles.");
    }
    if (errores.length > 0) {
      console.warn("\nErrores encontrados durante el procesamiento:", errores);
    }
    console.log(`
=== PROCESAMIENTO COMPLETADO ===`);
    console.log(`Total de tareas encontradas: ${tareas.length}`);
    return buscarEnEjecucion ? this.organizarTareasEnEjecucion(tareas) : TaskWeightCalculator.sortTasks(tareas);
  }
  guardarYAbrirArchivo(nombreArchivo, contenido) {
    return new Promise(async (resolve, reject) => {
      try {
        const carpetaGTD = this.plugin.app.vault.getAbstractFileByPath(
          this.plugin.settings.folder_SistemaGTD
        );
        if (!carpetaGTD) {
          await this.plugin.app.vault.createFolder(
            this.plugin.settings.folder_SistemaGTD
          );
        }
        const archivoExistente = this.plugin.app.vault.getAbstractFileByPath(nombreArchivo);
        if (archivoExistente instanceof import_obsidian67.TFile) {
          await this.plugin.app.vault.modify(archivoExistente, contenido);
          await this.plugin.app.workspace.getLeaf().openFile(archivoExistente);
        } else {
          const nuevoArchivo = await this.plugin.app.vault.create(nombreArchivo, contenido);
          await this.plugin.app.workspace.getLeaf().openFile(nuevoArchivo);
        }
        resolve();
      } catch (error) {
        console.error("Error al guardar/abrir archivo:", error);
        reject(error);
      }
    });
  }
  // Métodos principales de búsqueda de tareas
  async getTareasVencidasAbiertas() {
    return await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      (tarea) => TaskWeightCalculator.shouldIncludeTask(tarea, "vencidas", this.taskUtils.obtenerFechaLocal())
    );
  }
  async getTareasHoy() {
    return await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      (tarea) => TaskWeightCalculator.shouldIncludeTask(tarea, "hoy", this.taskUtils.obtenerFechaLocal())
    );
  }
  async getTareasProximas(diasProximos = 7) {
    return await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      (tarea) => TaskWeightCalculator.shouldIncludeTask(tarea, "proximas", this.taskUtils.obtenerFechaLocal())
    );
  }
  async getTareasStartVencidas() {
    return await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      (tarea) => TaskWeightCalculator.shouldIncludeTask(tarea, "start_vencidas", this.taskUtils.obtenerFechaLocal())
    );
  }
  async getTareasStartProximas(diasProximos = 7) {
    const hoy = this.taskUtils.obtenerFechaLocal();
    const limiteFuturo = new Date(hoy);
    limiteFuturo.setDate(limiteFuturo.getDate() + diasProximos);
    return await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      (tarea) => {
        if (!tarea.fechaStart)
          return false;
        const fechaStart = this.taskUtils.parsearFechaVencimiento(tarea.fechaStart);
        return fechaStart && fechaStart <= limiteFuturo && fechaStart >= hoy;
      }
    );
  }
  // Métodos de renderizado y visualización
  generarBotonActualizacion(metodo, parametros) {
    return `\`\`\`dataviewjs
const gp = app.plugins.plugins['obsidian-personal-management'];
if (!gp) {
    dv.paragraph("\u26A0\uFE0F Plugin de Gesti\xF3n Personal no encontrado");
    return;
}

const btn = this.container.createEl('button', {text: '\u{1F504} Actualizar Vista'});
btn.style.cssText = 'padding: 5px 15px; background-color: #1e1e1e; color: #ffffff; border: 1px solid #4a4a4a; border-radius: 4px; cursor: pointer; margin-bottom: 10px;';

btn.addEventListener('mouseenter', () => btn.style.backgroundColor = '#2e2e2e');
btn.addEventListener('mouseleave', () => btn.style.backgroundColor = '#1e1e1e');

btn.addEventListener('click', async () => {
    try {
        new Notice('Actualizando vista...');
        await gp.tareasAPI.${metodo}(${parametros || ""});
    } catch (error) {
        console.error('Error:', error);
        new Notice('Error al actualizar tareas');
    }
});
\`\`\`

`;
  }
  // Métodos públicos de visualización correspondientes a los comandos
  async mostrarTareasVencidas() {
    try {
      const tareas = await this.getTareasVencidasAbiertas();
      if (tareas.length === 0) {
        new import_obsidian67.Notice("No hay tareas vencidas abiertas.");
        return;
      }
      const contenido = this.generarVistaCompleta(
        tareas,
        "Tareas Vencidas",
        "mostrarTareasVencidas"
      );
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas Vencidas.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${tareas.length} tareas vencidas`);
    } catch (error) {
      console.error("Error en mostrarTareasVencidas:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  async mostrarTareasProximas(diasProximos = 7) {
    try {
      const tareas = await this.getTareasProximas(diasProximos);
      if (tareas.length === 0) {
        new import_obsidian67.Notice("No hay tareas pr\xF3ximas.");
        return;
      }
      const contenido = this.generarVistaCompleta(
        tareas,
        "Tareas Pr\xF3ximas",
        "mostrarTareasProximas",
        diasProximos
      );
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas Pr\xF3ximas.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${tareas.length} tareas pr\xF3ximas`);
    } catch (error) {
      console.error("Error en mostrarTareasProximas:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  async mostrarTareasHoy() {
    try {
      const tareas = await this.getTareasHoy();
      if (tareas.length === 0) {
        new import_obsidian67.Notice("No hay tareas programadas para hoy.");
        return;
      }
      const contenido = this.generarVistaCompleta(
        tareas,
        "Tareas para Hoy",
        "mostrarTareasHoy"
      );
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas para Hoy.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${tareas.length} tareas para hoy`);
    } catch (error) {
      console.error("Error en mostrarTareasHoy:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  async mostrarTareasStartVencidas() {
    try {
      const tareas = await this.getTareasStartVencidas();
      if (tareas.length === 0) {
        new import_obsidian67.Notice("No hay tareas con inicio vencido.");
        return;
      }
      const contenido = this.generarVistaCompleta(
        tareas,
        "Tareas con Inicio Vencido",
        "mostrarTareasStartVencidas"
      );
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas con Inicio Vencido.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${tareas.length} tareas con inicio vencido`);
    } catch (error) {
      console.error("Error en mostrarTareasStartVencidas:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  async mostrarTareasStartProximas(diasProximos = 7) {
    try {
      const tareas = await this.getTareasStartProximas(diasProximos);
      if (tareas.length === 0) {
        new import_obsidian67.Notice("No hay tareas por iniciar en el per\xEDodo especificado.");
        return;
      }
      const contenido = this.generarVistaCompleta(
        tareas,
        "Tareas por Iniciar",
        "mostrarTareasStartProximas",
        diasProximos
      );
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas por Iniciar.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${tareas.length} tareas por iniciar`);
    } catch (error) {
      console.error("Error en mostrarTareasStartProximas:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  // Métodos de utilidad privados
  tieneFechasValidas(fechasYHoras) {
    const { fechaVencimiento, fechaScheduled, fechaStart } = fechasYHoras;
    return fechaVencimiento || fechaScheduled || fechaStart;
  }
  generarVistaCompleta(tareas, titulo, metodoActualizacion, diasProximos) {
    const hoy = this.taskUtils.obtenerFechaLocal();
    let contenido = `# ${titulo}

`;
    contenido += this.generarBotonActualizacion(metodoActualizacion, diasProximos);
    contenido += `> [!info] Actualizado: ${hoy.toLocaleDateString()} ${(/* @__PURE__ */ new Date()).toLocaleTimeString()}
`;
    if (diasProximos) {
      contenido += `> Mostrando tareas para los pr\xF3ximos ${diasProximos} d\xEDas
`;
    }
    contenido += `> Total de tareas encontradas: ${tareas.length}

`;
    contenido += this.renderizarTareasAgrupadas(tareas);
    return contenido;
  }
  renderizarTareasAgrupadas(tareas) {
    const tareasPorArchivo = this.agruparTareasPorArchivo(tareas);
    let contenido = "";
    for (const [rutaArchivo, info] of Object.entries(tareasPorArchivo)) {
      contenido += `### [[${rutaArchivo}|${info.titulo}]]

`;
      info.tareas.forEach((tarea) => {
        contenido += this.renderizarTarea(tarea);
      });
      contenido += "\n";
    }
    return contenido;
  }
  renderizarTarea(tarea) {
    var _a, _b, _c, _d;
    let contenido = `- [ ] ${tarea.texto}
`;
    const fechas = [];
    if (tarea.fechaVencimiento) {
      fechas.push(`\u{1F4C5} ${this.formatearFechaConContexto(tarea.fechaVencimiento, "due")}`);
    }
    if (tarea.fechaScheduled) {
      fechas.push(`\u23F3 ${this.formatearFechaConContexto(tarea.fechaScheduled, "scheduled")}`);
    }
    if (tarea.fechaStart) {
      fechas.push(`\u{1F6EB} ${this.formatearFechaConContexto(tarea.fechaStart, "start")}`);
    }
    if (fechas.length > 0) {
      contenido += `    - Fechas:
        ${fechas.join("\n        ")}
`;
    }
    if (tarea.horaInicio || tarea.horaFin) {
      contenido += `    - \u23F0 Horario: ${tarea.horaInicio || "--:--"} - ${tarea.horaFin || "--:--"}
`;
    }
    if (((_a = tarea.etiquetas.contextos) == null ? void 0 : _a.length) > 0) {
      contenido += `    - \u{1F5C2}\uFE0F Contextos: ${tarea.etiquetas.contextos.join(" | ")}
`;
    }
    if (((_b = tarea.etiquetas.personas) == null ? void 0 : _b.length) > 0) {
      contenido += `    - \u{1F464} : ${tarea.etiquetas.personas.join(" | ")}
`;
    }
    if (((_c = tarea.etiquetas.todoist) == null ? void 0 : _c.length) > 0) {
      contenido += `    - \u{1F4F2} : ${tarea.etiquetas.todoist.join(" ")}
`;
    }
    if (((_d = tarea.etiquetas.otras) == null ? void 0 : _d.length) > 0) {
      contenido += `    - \u{1F3F7}\uFE0F Otras: ${tarea.etiquetas.otras.join(" ")}
`;
    }
    const prioridad = this.obtenerPrioridadTarea(tarea.texto);
    if (prioridad) {
      contenido += `    - ${prioridad.emoji} Prioridad: ${prioridad.nombre}
`;
    }
    return contenido;
  }
  obtenerPrioridadTarea(texto) {
    if (texto.includes("\u{1F53A}"))
      return { emoji: "\u{1F53A}", nombre: "Muy Alta" };
    if (texto.includes("\u23EB"))
      return { emoji: "\u23EB", nombre: "Alta" };
    if (texto.includes("\u{1F53C}"))
      return { emoji: "\u{1F53C}", nombre: "Media" };
    if (texto.includes("\u{1F53D}"))
      return { emoji: "\u{1F53D}", nombre: "Baja" };
    if (texto.includes("\u23EC"))
      return { emoji: "\u23EC", nombre: "Muy Baja" };
    return null;
  }
  agruparTareasPorArchivo(tareas) {
    return tareas.reduce((acc, tarea) => {
      if (!acc[tarea.rutaArchivo]) {
        acc[tarea.rutaArchivo] = {
          titulo: tarea.titulo,
          tareas: []
        };
      }
      acc[tarea.rutaArchivo].tareas.push(tarea);
      return acc;
    }, {});
  }
  formatearFechaConContexto(fecha, tipo) {
    try {
      const fechaObj = this.taskUtils.parsearFechaVencimiento(fecha);
      if (!fechaObj)
        return fecha;
      const hoy = this.taskUtils.obtenerFechaLocal();
      const diferenciaDias = Math.ceil(
        (fechaObj.getTime() - hoy.getTime()) / (1e3 * 60 * 60 * 24)
      );
      let textoBase = "";
      switch (tipo) {
        case "due":
          textoBase = diferenciaDias < 0 ? "Venci\xF3" : "Vence";
          break;
        case "scheduled":
          textoBase = "Programada";
          break;
        case "start":
          textoBase = diferenciaDias < 0 ? "Debi\xF3 iniciar" : "Inicia";
          break;
      }
      let contexto = "";
      if (diferenciaDias === 0) {
        contexto = "hoy";
      } else if (diferenciaDias === 1) {
        contexto = "ma\xF1ana";
      } else if (diferenciaDias === -1) {
        contexto = "ayer";
      } else if (diferenciaDias < 0) {
        contexto = `hace ${Math.abs(diferenciaDias)} d\xEDas`;
      } else {
        contexto = `en ${diferenciaDias} d\xEDas`;
      }
      return `${textoBase} ${fecha} (${contexto})`;
    } catch (error) {
      console.error("Error formateando fecha:", error);
      return fecha;
    }
  }
  // Añadir nuevo método para obtener tareas futuras
  async getTareasFuturas(diasFuturos = 7) {
    const hoy = this.taskUtils.obtenerFechaLocal();
    const limiteFuturo = new Date(hoy);
    limiteFuturo.setDate(limiteFuturo.getDate() + diasFuturos);
    return await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      (tarea) => {
        const fechasRelevantes = [
          tarea.fechaVencimiento,
          tarea.fechaScheduled,
          tarea.fechaStart
        ].filter(Boolean);
        return fechasRelevantes.some((fecha) => {
          const fechaObj = this.taskUtils.parsearFechaVencimiento(fecha);
          return fechaObj && fechaObj > hoy && fechaObj <= limiteFuturo;
        });
      }
    );
  }
  // Añadir método para mostrar tareas futuras
  async mostrarTareasFuturas(diasFuturos = 7) {
    try {
      const tareas = await this.getTareasFuturas(diasFuturos);
      if (tareas.length === 0) {
        new import_obsidian67.Notice(`No hay tareas programadas para los pr\xF3ximos ${diasFuturos} d\xEDas.`);
        return;
      }
      const contenido = this.generarVistaCompleta(
        tareas,
        `Tareas Programadas (Pr\xF3ximos ${diasFuturos} d\xEDas)`,
        "mostrarTareasFuturas",
        diasFuturos
      );
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas Programadas.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${tareas.length} tareas programadas para los pr\xF3ximos ${diasFuturos} d\xEDas`);
    } catch (error) {
      console.error("Error en mostrarTareasFuturas:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  // Añadir nuevo método para obtener tareas en ejecución
  async getTareasEnEjecucion() {
    return await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      (tarea) => {
        const taskLine = tarea.texto.trim();
        return taskLine.startsWith("- [/]");
      },
      true
      // nuevo parámetro para indicar que buscamos tareas en ejecución
    );
  }
  // Añadir método para mostrar tareas en ejecución
  async mostrarTareasEnEjecucion() {
    try {
      const tareas = await this.procesarTareas(
        this.plugin.app.vault.getMarkdownFiles(),
        (tarea) => true,
        // No aplicamos filtro adicional porque ya filtramos por estado en procesarTareas
        true
        // Indicar que buscamos tareas en ejecución
      );
      if (tareas.length === 0) {
        new import_obsidian67.Notice("No se encontraron tareas en ejecuci\xF3n");
        return;
      }
      const contenido = this.generarVistaEnEjecucion(tareas);
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas en Ejecuci\xF3n.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${tareas.length} tareas en ejecuci\xF3n`);
    } catch (error) {
      console.error("Error en mostrarTareasEnEjecucion:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  generarVistaEnEjecucion(tareas) {
    const hoy = this.taskUtils.obtenerFechaLocal();
    let contenido = `# Tareas en Ejecuci\xF3n

`;
    contenido += this.generarBotonActualizacion("mostrarTareasEnEjecucion");
    contenido += `> [!info] Actualizado: ${hoy.toLocaleDateString()} ${(/* @__PURE__ */ new Date()).toLocaleTimeString()}
`;
    contenido += `> Total de tareas en ejecuci\xF3n: ${tareas.length}

`;
    const tareasConVencimiento = tareas.filter((t) => t.fechaVencimiento);
    const tareasProgramadas = tareas.filter((t) => !t.fechaVencimiento && t.fechaScheduled);
    const tareasConInicio = tareas.filter((t) => !t.fechaVencimiento && !t.fechaScheduled && t.fechaStart);
    const tareasSinFecha = tareas.filter((t) => !t.fechaVencimiento && !t.fechaScheduled && !t.fechaStart);
    if (tareasConVencimiento.length > 0) {
      contenido += `## Con fecha de vencimiento (${tareasConVencimiento.length})

`;
      contenido += this.renderizarGrupoTareasEnEjecucion(tareasConVencimiento);
    }
    if (tareasProgramadas.length > 0) {
      contenido += `## Programadas (${tareasProgramadas.length})

`;
      contenido += this.renderizarGrupoTareasEnEjecucion(tareasProgramadas);
    }
    if (tareasConInicio.length > 0) {
      contenido += `## Con fecha de inicio (${tareasConInicio.length})

`;
      contenido += this.renderizarGrupoTareasEnEjecucion(tareasConInicio);
    }
    if (tareasSinFecha.length > 0) {
      contenido += `## Sin fecha asignada (${tareasSinFecha.length})

`;
      contenido += this.renderizarGrupoTareasEnEjecucion(tareasSinFecha);
      return contenido;
    }
  }
  // Añadir método específico para renderizar grupos de tareas en ejecución
  renderizarGrupoTareasEnEjecucion(tareas) {
    const tareasPorArchivo = this.agruparTareasPorArchivo(tareas);
    let contenido = "";
    for (const [rutaArchivo, info] of Object.entries(tareasPorArchivo)) {
      contenido += `### [[${rutaArchivo}|${info.titulo}]]

`;
      info.tareas.forEach((tarea) => {
        contenido += this.renderizarTareaEnEjecucion(tarea);
      });
      contenido += "\n";
    }
    return contenido;
  }
  renderizarGrupoTareas(tareas) {
    const tareasPorArchivo = this.agruparTareasPorArchivo(tareas);
    let contenido = "";
    for (const [rutaArchivo, info] of Object.entries(tareasPorArchivo)) {
      contenido += `### [[${rutaArchivo}|${info.titulo}]]

`;
      info.tareas.forEach((tarea) => {
        contenido += this.renderizarTareaEnEjecucion(tarea);
      });
      contenido += "\n";
    }
    return contenido;
  }
  renderizarTareaEnEjecucion(tarea) {
    var _a, _b, _c, _d;
    let contenido = `${tarea.texto}
`;
    if (tarea.fechaVencimiento || tarea.fechaScheduled || tarea.fechaStart) {
      contenido += `    - Fechas:
`;
      if (tarea.fechaVencimiento) {
        contenido += `        - \u{1F4C5} : ${this.formatearFechaConContexto(tarea.fechaVencimiento, "due")}
`;
      }
      if (tarea.fechaScheduled) {
        contenido += `        - \u23F3 : ${this.formatearFechaConContexto(tarea.fechaScheduled, "scheduled")}
`;
      }
      if (tarea.fechaStart) {
        contenido += `        - \u{1F6EB}: ${this.formatearFechaConContexto(tarea.fechaStart, "start")}
`;
      }
    }
    if (tarea.horaInicio || tarea.horaFin) {
      contenido += `    - \u23F0 Horario: ${tarea.horaInicio || "--:--"} - ${tarea.horaFin || "--:--"}
`;
    }
    if (((_a = tarea.etiquetas.contextos) == null ? void 0 : _a.length) > 0) {
      contenido += `    - \u{1F5C2}\uFE0F Contextos: ${tarea.etiquetas.contextos.join(" | ")}
`;
    }
    if (((_b = tarea.etiquetas.personas) == null ? void 0 : _b.length) > 0) {
      contenido += `    - \u{1F464} Personas: ${tarea.etiquetas.personas.join(" | ")}
`;
    }
    if (((_c = tarea.etiquetas.todoist) == null ? void 0 : _c.length) > 0) {
      contenido += `    - \u{1F4F2} Todoist: ${tarea.etiquetas.todoist.join(" ")}
`;
    }
    if (((_d = tarea.etiquetas.otras) == null ? void 0 : _d.length) > 0) {
      contenido += `    - \u{1F3F7}\uFE0F Otras: ${tarea.etiquetas.otras.join(" ")}
`;
    }
    const prioridad = this.obtenerPrioridadTarea(tarea.texto);
    if (prioridad) {
      contenido += `    - ${prioridad.emoji} Prioridad: ${prioridad.nombre}
`;
    }
    return contenido;
  }
  organizarTareasEnEjecucion(tareas) {
    return tareas.sort((a, b) => {
      var _a, _b;
      const fechaA = a.fechaVencimiento || a.fechaScheduled || a.fechaStart;
      const fechaB = b.fechaVencimiento || b.fechaScheduled || b.fechaStart;
      if (fechaA && fechaB) {
        const fechaObjA = this.taskUtils.parsearFechaVencimiento(fechaA);
        const fechaObjB = this.taskUtils.parsearFechaVencimiento(fechaB);
        if (fechaObjA && fechaObjB) {
          return fechaObjA.getTime() - fechaObjB.getTime();
        }
      }
      if (fechaA)
        return -1;
      if (fechaB)
        return 1;
      return (((_a = b.weight) == null ? void 0 : _a.totalWeight) || 0) - (((_b = a.weight) == null ? void 0 : _b.totalWeight) || 0);
    });
  }
  // Nuevo método para obtener tareas scheduled vencidas
  async getTareasScheduledVencidas() {
    const hoy = this.taskUtils.obtenerFechaLocal();
    return await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      (tarea) => {
        if (!tarea.fechaScheduled)
          return false;
        const fechaScheduled = this.taskUtils.parsearFechaVencimiento(tarea.fechaScheduled);
        return fechaScheduled !== null && fechaScheduled < hoy;
      }
    );
  }
  // Nuevo método para obtener tareas scheduled próximas
  async getTareasScheduledProximas(diasProximos = 7) {
    const hoy = this.taskUtils.obtenerFechaLocal();
    const limiteFuturo = new Date(hoy);
    limiteFuturo.setDate(limiteFuturo.getDate() + diasProximos);
    return await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      (tarea) => {
        if (!tarea.fechaScheduled)
          return false;
        const fechaScheduled = this.taskUtils.parsearFechaVencimiento(tarea.fechaScheduled);
        return fechaScheduled !== null && fechaScheduled >= hoy && fechaScheduled <= limiteFuturo;
      }
    );
  }
  // Método para mostrar tareas scheduled vencidas
  async mostrarTareasScheduledVencidas() {
    try {
      const tareas = await this.getTareasScheduledVencidas();
      if (tareas.length === 0) {
        new import_obsidian67.Notice("No hay tareas scheduled vencidas.");
        return;
      }
      const contenido = this.generarVistaCompleta(
        tareas,
        "Tareas Scheduled Vencidas",
        "mostrarTareasScheduledVencidas"
      );
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas Scheduled Vencidas.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${tareas.length} tareas scheduled vencidas`);
    } catch (error) {
      console.error("Error en mostrarTareasScheduledVencidas:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  // Método para mostrar tareas scheduled próximas
  async mostrarTareasScheduledProximas(diasProximos = 7) {
    try {
      const tareas = await this.getTareasScheduledProximas(diasProximos);
      if (tareas.length === 0) {
        new import_obsidian67.Notice("No hay tareas scheduled pr\xF3ximas.");
        return;
      }
      const contenido = this.generarVistaCompleta(
        tareas,
        `Tareas Scheduled Pr\xF3ximas (${diasProximos} d\xEDas)`,
        "mostrarTareasScheduledProximas",
        diasProximos
      );
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas Scheduled Pr\xF3ximas.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${tareas.length} tareas scheduled pr\xF3ximas`);
    } catch (error) {
      console.error("Error en mostrarTareasScheduledProximas:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  // Método auxiliar para la visualización de fechas scheduled
  formatearFechaScheduled(fecha) {
    const fechaObj = this.taskUtils.parsearFechaVencimiento(fecha);
    if (!fechaObj)
      return fecha;
    const hoy = this.taskUtils.obtenerFechaLocal();
    const diferenciaDias = Math.ceil(
      (fechaObj.getTime() - hoy.getTime()) / (1e3 * 60 * 60 * 24)
    );
    let contexto = "";
    if (diferenciaDias < 0) {
      contexto = `(retrasada ${Math.abs(diferenciaDias)} d\xEDas)`;
    } else if (diferenciaDias === 0) {
      contexto = "(hoy)";
    } else if (diferenciaDias === 1) {
      contexto = "(ma\xF1ana)";
    } else {
      contexto = `(en ${diferenciaDias} d\xEDas)`;
    }
    return `${fecha} ${contexto}`;
  }
  // Método para obtener todas las tareas vencidas
  async getTodasTareasVencidas() {
    const hoy = this.taskUtils.obtenerFechaLocal();
    return await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      (tarea) => {
        let estaVencida = false;
        if (tarea.fechaVencimiento) {
          const fechaVenc = this.taskUtils.parsearFechaVencimiento(tarea.fechaVencimiento);
          if (fechaVenc && fechaVenc < hoy) {
            tarea.tipoVencimiento = ["due"];
            estaVencida = true;
          }
        }
        if (tarea.fechaScheduled) {
          const fechaSched = this.taskUtils.parsearFechaVencimiento(tarea.fechaScheduled);
          if (fechaSched && fechaSched < hoy) {
            tarea.tipoVencimiento = tarea.tipoVencimiento || [];
            tarea.tipoVencimiento.push("scheduled");
            estaVencida = true;
          }
        }
        if (tarea.fechaStart) {
          const fechaStart = this.taskUtils.parsearFechaVencimiento(tarea.fechaStart);
          if (fechaStart && fechaStart < hoy) {
            tarea.tipoVencimiento = tarea.tipoVencimiento || [];
            tarea.tipoVencimiento.push("start");
            estaVencida = true;
          }
        }
        return estaVencida;
      }
    );
  }
  // Método para mostrar todas las tareas vencidas
  async mostrarTodasTareasVencidas() {
    try {
      const tareas = await this.getTodasTareasVencidas();
      if (tareas.length === 0) {
        new import_obsidian67.Notice("No hay tareas vencidas.");
        return;
      }
      const contenido = this.generarVistaTodasVencidas(tareas);
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Todas las Tareas Vencidas.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${tareas.length} tareas vencidas`);
    } catch (error) {
      console.error("Error en mostrarTodasTareasVencidas:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  // Método específico para generar la vista de todas las tareas vencidas
  generarVistaTodasVencidas(tareas) {
    const hoy = this.taskUtils.obtenerFechaLocal();
    let contenido = `# Todas las Tareas Vencidas

`;
    contenido += this.generarBotonActualizacion("mostrarTodasTareasVencidas");
    contenido += `> [!info] Actualizado: ${hoy.toLocaleDateString()} ${(/* @__PURE__ */ new Date()).toLocaleTimeString()}
`;
    contenido += `> Total de tareas vencidas: ${tareas.length}

`;
    const tareasVencDue = tareas.filter((t) => {
      var _a;
      return (_a = t.tipoVencimiento) == null ? void 0 : _a.includes("due");
    });
    const tareasVencScheduled = tareas.filter((t) => {
      var _a;
      return (_a = t.tipoVencimiento) == null ? void 0 : _a.includes("scheduled");
    });
    const tareasVencStart = tareas.filter((t) => {
      var _a;
      return (_a = t.tipoVencimiento) == null ? void 0 : _a.includes("start");
    });
    if (tareasVencDue.length > 0) {
      contenido += `## Tareas con Fecha de Vencimiento Pasada (${tareasVencDue.length})

`;
      contenido += this.renderizarGrupoTareasVencidas(tareasVencDue, "due");
    }
    if (tareasVencScheduled.length > 0) {
      contenido += `## Tareas Scheduled Retrasadas (${tareasVencScheduled.length})

`;
      contenido += this.renderizarGrupoTareasVencidas(tareasVencScheduled, "scheduled");
    }
    if (tareasVencStart.length > 0) {
      contenido += `## Tareas con Inicio Retrasado (${tareasVencStart.length})

`;
      contenido += this.renderizarGrupoTareasVencidas(tareasVencStart, "start");
    }
    return contenido;
  }
  // Método auxiliar para renderizar grupos de tareas vencidas
  renderizarGrupoTareasVencidas(tareas, tipo) {
    const tareasPorArchivo = this.agruparTareasPorArchivo(tareas);
    let contenido = "";
    for (const [rutaArchivo, info] of Object.entries(tareasPorArchivo)) {
      contenido += `### [[${rutaArchivo}|${info.titulo}]]

`;
      info.tareas.forEach((tarea) => {
        contenido += this.renderizarTareaVencida(tarea, tipo);
      });
      contenido += "\n";
    }
    return contenido;
  }
  // Método auxiliar para renderizar una tarea vencida
  renderizarTareaVencida(tarea, tipo) {
    var _a, _b, _c, _d;
    let contenido = `- [ ] ${tarea.texto}
`;
    switch (tipo) {
      case "due":
        contenido += `    - \u{1F4C5} ${this.formatearFechaConContexto(tarea.fechaVencimiento, "due")}
`;
        if (tarea.fechaScheduled) {
          contenido += `    - \u23F3 ${this.formatearFechaConContexto(tarea.fechaScheduled, "scheduled")}
`;
        }
        if (tarea.fechaStart) {
          contenido += `    - \u{1F6EB} ${this.formatearFechaConContexto(tarea.fechaStart, "start")}
`;
        }
        break;
      case "scheduled":
        contenido += `    - \u23F3 ${this.formatearFechaConContexto(tarea.fechaScheduled, "scheduled")}
`;
        if (tarea.fechaVencimiento) {
          contenido += `    - \u{1F4C5} ${this.formatearFechaConContexto(tarea.fechaVencimiento, "due")}
`;
        }
        if (tarea.fechaStart) {
          contenido += `    - \u{1F6EB} ${this.formatearFechaConContexto(tarea.fechaStart, "start")}
`;
        }
        break;
      case "start":
        contenido += `    - \u{1F6EB} ${this.formatearFechaConContexto(tarea.fechaStart, "start")}
`;
        if (tarea.fechaVencimiento) {
          contenido += `    - \u{1F4C5} ${this.formatearFechaConContexto(tarea.fechaVencimiento, "due")}
`;
        }
        if (tarea.fechaScheduled) {
          contenido += `    - \u23F3 ${this.formatearFechaConContexto(tarea.fechaScheduled, "scheduled")}
`;
        }
        break;
    }
    if (tarea.horaInicio || tarea.horaFin) {
      contenido += `    - \u23F0 Horario: ${tarea.horaInicio || "--:--"} - ${tarea.horaFin || "--:--"}
`;
    }
    if (((_a = tarea.etiquetas.contextos) == null ? void 0 : _a.length) > 0) {
      contenido += `    - \u{1F5C2}\uFE0F Contextos: ${tarea.etiquetas.contextos.join(" | ")}
`;
    }
    if (((_b = tarea.etiquetas.personas) == null ? void 0 : _b.length) > 0) {
      contenido += `    - \u{1F464}: ${tarea.etiquetas.personas.join(" | ")}
`;
    }
    if (((_c = tarea.etiquetas.todoist) == null ? void 0 : _c.length) > 0) {
      contenido += `    - \u{1F4F2}: ${tarea.etiquetas.todoist.join(" ")}
`;
    }
    if (((_d = tarea.etiquetas.otras) == null ? void 0 : _d.length) > 0) {
      contenido += `    - \u{1F3F7}\uFE0F Otras: ${tarea.etiquetas.otras.join(" ")}
`;
    }
    return contenido;
  }
  // Método principal para obtener tareas con dependencias
  async getTareasDependientes() {
    console.log("=== Iniciando b\xFAsqueda de tareas con dependencias ===");
    const tareas = await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      async (tarea) => {
        console.log("\nAnalizando tarea:", tarea.texto);
        console.log("DependencyId:", tarea.dependencyId);
        if (!tarea.dependencyId) {
          console.log("-> Ignorada: No tiene dependencia");
          return false;
        }
        const resultado = await this.taskUtils.verificarEstadoTarea(tarea.dependencyId);
        console.log(`-> Dependencia ${tarea.dependencyId} completada:`, resultado.completada);
        tarea.isBlocked = !resultado.completada;
        tarea.dependencyLocation = resultado.rutaArchivo;
        tarea.dependencyTitle = resultado.tituloArchivo;
        return true;
      }
    );
    return {
      ejecutables: tareas.filter((t) => !t.isBlocked),
      bloqueadas: tareas.filter((t) => t.isBlocked)
    };
  }
  // Método para mostrar las tareas dependientes
  async mostrarTareasDependientes() {
    try {
      const { ejecutables, bloqueadas } = await this.getTareasDependientes();
      if (ejecutables.length === 0 && bloqueadas.length === 0) {
        new import_obsidian67.Notice("No se encontraron tareas con dependencias.");
        return;
      }
      const contenido = this.generarVistaDependencias(ejecutables, bloqueadas);
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas con Dependencias.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${ejecutables.length + bloqueadas.length} tareas con dependencias`);
    } catch (error) {
      console.error("Error en mostrarTareasDependientes:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  // Método para generar la vista de dependencias
  generarVistaDependencias(ejecutables, bloqueadas) {
    const hoy = this.taskUtils.obtenerFechaLocal();
    let contenido = `# Tareas con Dependencias

`;
    contenido += this.generarBotonActualizacion("mostrarTareasDependientes");
    contenido += `> [!info] Actualizado: ${hoy.toLocaleDateString()} ${(/* @__PURE__ */ new Date()).toLocaleTimeString()}
`;
    contenido += `> Total de tareas con dependencias: ${ejecutables.length + bloqueadas.length}

`;
    if (ejecutables.length > 0) {
      contenido += `## Tareas Ejecutables (${ejecutables.length})
`;
      contenido += `> [!success] Estas tareas ya pueden ser ejecutadas porque sus dependencias est\xE1n completadas

`;
      contenido += this.renderizarGrupoDependencias(ejecutables, true);
    }
    if (bloqueadas.length > 0) {
      contenido += `
## Tareas Bloqueadas (${bloqueadas.length})
`;
      contenido += `> [!warning] Estas tareas est\xE1n esperando que se completen otras tareas

`;
      contenido += this.renderizarGrupoDependencias(bloqueadas, false);
    }
    return contenido;
  }
  // Método para renderizar grupos de tareas con dependencias
  renderizarGrupoDependencias(tareas, ejecutables) {
    const tareasPorArchivo = this.agruparTareasPorArchivo(tareas);
    let contenido = "";
    for (const [rutaArchivo, info] of Object.entries(tareasPorArchivo)) {
      contenido += `### [[${rutaArchivo}|${info.titulo}]]

`;
      info.tareas.forEach((tarea) => {
        contenido += this.renderizarTareaConDependencia(tarea, ejecutables);
      });
      contenido += "\n";
    }
    return contenido;
  }
  // Método para renderizar una tarea individual con dependencia
  renderizarTareaConDependencia(tarea, esEjecutable) {
    var _a, _b;
    console.log("\nRenderizando tarea:", tarea.texto);
    console.log("Es ejecutable:", esEjecutable);
    let contenido = `- [ ] ${tarea.texto}
`;
    if (tarea.taskId) {
      contenido += `    \u{1F194} ${tarea.taskId}
`;
    }
    if (tarea.dependencyId) {
      contenido += `    \u21B3 Depende de: ${tarea.dependencyTitle ? `[[${tarea.dependencyLocation}|${tarea.dependencyTitle}]]` : "No encontrada"}`;
      if (tarea.dependencyTexto) {
        contenido += `: "${tarea.dependencyTexto}"`;
      }
      contenido += esEjecutable ? " \u2705" : " \u23F3";
      contenido += "\n";
    }
    if (tarea.fechaVencimiento) {
      contenido += `    \u{1F4C5} ${this.formatearFechaConContexto(tarea.fechaVencimiento, "due")}
`;
    }
    if (tarea.fechaScheduled) {
      contenido += `    \u23F3 ${this.formatearFechaConContexto(tarea.fechaScheduled, "scheduled")}
`;
    }
    if (tarea.fechaStart) {
      contenido += `    \u{1F6EB} ${this.formatearFechaConContexto(tarea.fechaStart, "start")}
`;
    }
    if (((_a = tarea.etiquetas.contextos) == null ? void 0 : _a.length) > 0) {
      contenido += `    \u{1F5C2}\uFE0F ${tarea.etiquetas.contextos.join(" | ")}
`;
    }
    if (((_b = tarea.etiquetas.personas) == null ? void 0 : _b.length) > 0) {
      contenido += `    \u{1F464} ${tarea.etiquetas.personas.join(" | ")}
`;
    }
    return contenido;
  }
  async mostrarTareasPersonas() {
    try {
      const { personasConTareas, totalPersonas, totalTareas } = await this.getTareasPersonas();
      if (totalPersonas === 0) {
        new import_obsidian67.Notice("No se encontraron tareas asignadas a personas.");
        return;
      }
      const contenido = this.generarVistaPersonas(personasConTareas, totalPersonas, totalTareas);
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas por Persona.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${totalTareas} tareas asignadas a ${totalPersonas} personas`);
    } catch (error) {
      console.error("Error en mostrarTareasPersonas:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  generarVistaPersonas(personasConTareas, totalPersonas, totalTareas) {
    const hoy = this.taskUtils.obtenerFechaLocal();
    let contenido = `# Tareas Asignadas por Persona

`;
    contenido += this.generarBotonActualizacion("mostrarTareasPersonas");
    contenido += `> [!info] Actualizado: ${hoy.toLocaleDateString()} ${(/* @__PURE__ */ new Date()).toLocaleTimeString()}
`;
    contenido += `> Total de personas con tareas: ${totalPersonas}
`;
    contenido += `> Total de tareas asignadas: ${totalTareas}

`;
    contenido += `## Resumen de Asignaciones
`;
    Array.from(personasConTareas.entries()).sort(([, tareasA], [, tareasB]) => tareasB.length - tareasA.length).forEach(([persona, tareas]) => {
      const nombreFormateado = this.formatearNombrePersona(persona);
      contenido += `- [[#${nombreFormateado}|${nombreFormateado}]] (${tareas.length} tareas)
`;
    });
    contenido += "\n";
    contenido += `## Tareas por Persona

`;
    Array.from(personasConTareas.entries()).sort(([, tareasA], [, tareasB]) => tareasB.length - tareasA.length).forEach(([persona, tareas]) => {
      contenido += `### ${this.formatearNombrePersona(persona)}
[[#Resumen de Asignaciones|\u2B06\uFE0F]]
`;
      const tareasOrdenadas = TaskWeightCalculator.sortTasks(tareas);
      tareasOrdenadas.forEach((tarea) => {
        contenido += this.renderizarTareaPersona(tarea);
      });
      contenido += "\n";
    });
    return contenido;
  }
  renderizarTareaPersona(tarea) {
    var _a, _b;
    let contenido = `- [ ] ${tarea.texto}
`;
    contenido += `    \u{1F4CD} [[${tarea.rutaArchivo}|${tarea.titulo}]]`;
    if ((_a = tarea.lineInfo) == null ? void 0 : _a.numero) {
      contenido += ` (l\xEDnea ${tarea.lineInfo.numero})`;
    }
    contenido += "\n";
    const fechas = [];
    if (tarea.fechaVencimiento) {
      fechas.push(`\u{1F4C5} ${this.formatearFechaConContexto(tarea.fechaVencimiento, "due")}`);
    }
    if (tarea.fechaScheduled) {
      fechas.push(`\u23F3 ${this.formatearFechaConContexto(tarea.fechaScheduled, "scheduled")}`);
    }
    if (tarea.fechaStart) {
      fechas.push(`\u{1F6EB} ${this.formatearFechaConContexto(tarea.fechaStart, "start")}`);
    }
    if (fechas.length > 0) {
      contenido += `    \u23F0 Fechas:
        ${fechas.join("\n        ")}
`;
    }
    if (tarea.horaInicio || tarea.horaFin) {
      contenido += `    \u231A Horario: ${tarea.horaInicio || "--:--"} - ${tarea.horaFin || "--:--"}
`;
    }
    if (((_b = tarea.etiquetas.contextos) == null ? void 0 : _b.length) > 0) {
      contenido += `    \u{1F5C2}\uFE0F Contextos: ${tarea.etiquetas.contextos.join(" | ")}
`;
    }
    if (tarea.weight) {
      const prioridad = this.obtenerPrioridadTarea(tarea.texto);
      if (prioridad) {
        contenido += `    ${prioridad.emoji} Prioridad: ${prioridad.nombre}
`;
      }
    }
    return contenido;
  }
  formatearNombrePersona(tag) {
    return tag.replace("#px-", "").replace(/_/g, " ").split(" ").map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(" ");
  }
  normalizarContexto(contexto) {
    return contexto.replace(/[/-]/g, " \u2192 ").trim();
  }
  async mostrarTareasContextos() {
    try {
      const { contextosConTareas, totalContextos, totalTareas } = await this.getTareasContextos();
      if (totalContextos === 0) {
        new import_obsidian67.Notice("No se encontraron tareas con contextos asignados.");
        return;
      }
      const contenido = this.generarVistaContextos(contextosConTareas, totalContextos, totalTareas);
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas por Contexto.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${totalTareas} tareas en ${totalContextos} contextos`);
    } catch (error) {
      console.error("Error en mostrarTareasContextos:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  generarVistaContextos(contextosConTareas, totalContextos, totalTareas) {
    const hoy = this.taskUtils.obtenerFechaLocal();
    let contenido = `# Tareas por Contexto

`;
    contenido += this.generarBotonActualizacion("mostrarTareasContextos");
    contenido += `> [!info] Actualizado: ${hoy.toLocaleDateString()} ${(/* @__PURE__ */ new Date()).toLocaleTimeString()}
`;
    contenido += `> Total de contextos con tareas: ${totalContextos}
`;
    contenido += `> Total de tareas encontradas: ${totalTareas}

`;
    const arbolContextos = this.construirArbolContextos(contextosConTareas);
    contenido += `## Resumen de Contextos
`;
    this.generarResumenContextos(arbolContextos, 0).forEach((linea) => {
      contenido += linea + "\n";
    });
    contenido += "\n";
    contenido += `## Tareas por Contexto

`;
    this.generarDetalleContextos(arbolContextos, contextosConTareas).forEach((bloque) => {
      contenido += bloque;
    });
    return contenido;
  }
  construirArbolContextos(contextosConTareas) {
    const arbol = /* @__PURE__ */ new Map();
    Array.from(contextosConTareas.keys()).forEach((contexto) => {
      const niveles = contexto.split(" \u2192 ");
      let nodoActual = arbol;
      niveles.forEach((nivel, index) => {
        if (!nodoActual.has(nivel)) {
          nodoActual.set(nivel, {
            tareas: index === niveles.length - 1 ? contextosConTareas.get(contexto) : [],
            subcontextos: /* @__PURE__ */ new Map(),
            rutaCompleta: niveles.slice(0, index + 1).join(" \u2192 ")
          });
        }
        nodoActual = nodoActual.get(nivel).subcontextos;
      });
    });
    return arbol;
  }
  generarResumenContextos(arbol, nivel) {
    const lineas = [];
    arbol.forEach((nodo, contexto) => {
      const indentacion = "  ".repeat(nivel);
      const rutaContexto = nodo.rutaCompleta;
      const cantidadTareas = nodo.tareas.length;
      if (cantidadTareas > 0) {
        lineas.push(`${indentacion}- [[#${rutaContexto}|${contexto}]] (${cantidadTareas} tareas)`);
      } else {
        lineas.push(`${indentacion}- ${contexto}`);
      }
      if (nodo.subcontextos.size > 0) {
        lineas.push(...this.generarResumenContextos(nodo.subcontextos, nivel + 1));
      }
    });
    return lineas;
  }
  generarBloqueContexto(contexto, tareas) {
    let bloque = `### ${contexto}
[[#Resumen de Contextos|\u2B06\uFE0F]]
`;
    tareas.forEach((tarea) => {
      bloque += this.renderizarTareaContexto(tarea);
    });
    return bloque + "\n";
  }
  async getTareasPersonas() {
    console.log("\n=== INICIANDO B\xDASQUEDA DE TAREAS ASIGNADAS A PERSONAS ===");
    const personasConTareas = /* @__PURE__ */ new Map();
    const lineasPorArchivo = /* @__PURE__ */ new Map();
    const tareas = await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      async (tarea) => {
        if (!tarea.etiquetas.personas || tarea.etiquetas.personas.length === 0) {
          return false;
        }
        if (!lineasPorArchivo.has(tarea.rutaArchivo)) {
          lineasPorArchivo.set(
            tarea.rutaArchivo,
            await this.taskUtils.encontrarLineasTarea(
              this.plugin.app.vault.getAbstractFileByPath(tarea.rutaArchivo)
            )
          );
        }
        const lineasArchivo = lineasPorArchivo.get(tarea.rutaArchivo);
        if (lineasArchivo) {
          const lineInfo = lineasArchivo.get(tarea.texto);
          if (lineInfo) {
            tarea.lineInfo = lineInfo;
          }
        }
        tarea.etiquetas.personas.forEach((tag) => {
          const personaTag = `#px-${tag}`;
          if (!personasConTareas.has(personaTag)) {
            personasConTareas.set(personaTag, []);
          }
          personasConTareas.get(personaTag).push(tarea);
        });
        return true;
      }
    );
    personasConTareas.forEach((tareas2, persona) => {
      const tareasOrdenadas = TaskWeightCalculator.sortTasks(tareas2);
      personasConTareas.set(persona, tareasOrdenadas);
    });
    return {
      personasConTareas,
      totalPersonas: personasConTareas.size,
      totalTareas: Array.from(personasConTareas.values()).reduce((sum, tareas2) => sum + tareas2.length, 0)
    };
  }
  async getTareasContextos() {
    console.log("\n=== INICIANDO B\xDASQUEDA DE TAREAS POR CONTEXTO ===");
    const contextosConTareas = /* @__PURE__ */ new Map();
    const lineasPorArchivo = /* @__PURE__ */ new Map();
    const tareas = await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      async (tarea) => {
        console.log("\nAnalizando tarea:", tarea.texto);
        if (!tarea.etiquetas.contextos || tarea.etiquetas.contextos.length === 0) {
          return false;
        }
        if (!lineasPorArchivo.has(tarea.rutaArchivo)) {
          lineasPorArchivo.set(
            tarea.rutaArchivo,
            await this.taskUtils.encontrarLineasTarea(
              this.plugin.app.vault.getAbstractFileByPath(tarea.rutaArchivo)
            )
          );
        }
        const lineasArchivo = lineasPorArchivo.get(tarea.rutaArchivo);
        if (lineasArchivo) {
          const lineInfo = lineasArchivo.get(tarea.texto);
          if (lineInfo) {
            tarea.lineInfo = lineInfo;
          }
        }
        tarea.etiquetas.contextos.forEach((contexto) => {
          const contextoNormalizado = this.normalizarContexto(contexto);
          if (!contextosConTareas.has(contextoNormalizado)) {
            contextosConTareas.set(contextoNormalizado, []);
          }
          contextosConTareas.get(contextoNormalizado).push(tarea);
        });
        return true;
      }
    );
    contextosConTareas.forEach((tareas2, contexto) => {
      const tareasOrdenadas = TaskWeightCalculator.sortTasks(tareas2);
      contextosConTareas.set(contexto, tareasOrdenadas);
    });
    return {
      contextosConTareas,
      totalContextos: contextosConTareas.size,
      totalTareas: Array.from(contextosConTareas.values()).reduce((sum, tareas2) => sum + tareas2.length, 0)
    };
  }
  generarDetalleContextos(arbol, contextosConTareas) {
    const bloques = [];
    const procesarNodo = (nodo, rutaActual = []) => {
      nodo.forEach((info, contexto) => {
        const rutaCompleta = info.rutaCompleta;
        if (info.tareas.length > 0) {
          const tareasOrdenadas = TaskWeightCalculator.sortTasks(info.tareas);
          bloques.push(this.generarBloqueContexto(rutaCompleta, tareasOrdenadas));
        }
        if (info.subcontextos.size > 0) {
          procesarNodo(info.subcontextos, [...rutaActual, contexto]);
        }
      });
    };
    procesarNodo(arbol);
    return bloques;
  }
  renderizarTareaContexto(tarea) {
    var _a, _b;
    let contenido = `- [ ] ${tarea.texto}
`;
    contenido += `    \u{1F4CD} [[${tarea.rutaArchivo}|${tarea.titulo}]]`;
    if ((_a = tarea.lineInfo) == null ? void 0 : _a.numero) {
      contenido += ` (l\xEDnea ${tarea.lineInfo.numero})`;
    }
    contenido += "\n";
    const prioridad = this.obtenerPrioridadTarea(tarea.texto);
    if (prioridad) {
      contenido += `    ${prioridad.emoji} Prioridad: ${prioridad.nombre}
`;
    }
    if (tarea.weight) {
      const { baseWeight, timeWeight, priorityWeight } = tarea.weight;
      if (baseWeight + timeWeight + priorityWeight > 0) {
        contenido += `    \u2696\uFE0F Peso total: ${tarea.weight.totalWeight}
`;
      }
    }
    const fechas = [];
    if (tarea.fechaVencimiento) {
      fechas.push(`\u{1F4C5} ${this.formatearFechaConContexto(tarea.fechaVencimiento, "due")}`);
    }
    if (tarea.fechaScheduled) {
      fechas.push(`\u23F3 ${this.formatearFechaConContexto(tarea.fechaScheduled, "scheduled")}`);
    }
    if (tarea.fechaStart) {
      fechas.push(`\u{1F6EB} ${this.formatearFechaConContexto(tarea.fechaStart, "start")}`);
    }
    if (fechas.length > 0) {
      contenido += `    \u23F0 Fechas:
        ${fechas.join("\n        ")}
`;
    }
    if (tarea.horaInicio || tarea.horaFin) {
      contenido += `    \u231A Horario: ${tarea.horaInicio || "--:--"} - ${tarea.horaFin || "--:--"}
`;
    }
    if (((_b = tarea.etiquetas.personas) == null ? void 0 : _b.length) > 0) {
      contenido += `    \u{1F464} Asignado a: ${tarea.etiquetas.personas.map(
        (p) => this.formatearNombrePersona(`#px-${p}`)
      ).join(" | ")}
`;
    }
    if (tarea.dependencyId) {
      contenido += `    \u21B3 Depende de: `;
      if (tarea.dependencyTitle) {
        contenido += `[[${tarea.dependencyLocation}|${tarea.dependencyTitle}]]`;
        if (tarea.dependencyTexto) {
          contenido += `: "${tarea.dependencyTexto}"`;
        }
      }
      contenido += tarea.isBlocked ? " \u23F3" : " \u2705";
      contenido += "\n";
    }
    return contenido;
  }
};

// src/modules/moduloTabTitle/index.ts
var import_obsidian71 = require("obsidian");

// src/modules/moduloTabTitle/commands.ts
var import_obsidian68 = require("obsidian");
function registerCommands4(plugin, settings) {
  plugin.addCommand({
    id: "set-tab-title-alias",
    name: "Mostrar alias en pesta\xF1as",
    callback: () => {
      settings.titleDisplayMode = "alias";
      plugin.saveData(settings);
    }
  });
  plugin.addCommand({
    id: "set-tab-title-title",
    name: "Mostrar t\xEDtulo en pesta\xF1as",
    callback: () => {
      settings.titleDisplayMode = "title";
      plugin.saveData(settings);
    }
  });
  plugin.addCommand({
    id: "set-tab-title-filename",
    name: "Mostrar nombre de archivo en pesta\xF1as",
    callback: () => {
      settings.titleDisplayMode = "filename";
      plugin.saveData(settings);
    }
  });
}

// src/modules/moduloTabTitle/TabTitleManager.ts
var import_obsidian70 = require("obsidian");

// src/modules/moduloTabTitle/views/CustomMarkdownView.ts
var import_obsidian69 = require("obsidian");

// src/modules/moduloTabTitle/utils/logger.ts
var Logger = class {
  static debug(message, ...args) {
    console.debug(`${this.PREFIX} ${message}`, ...args);
  }
  static info(message, ...args) {
    console.info(`${this.PREFIX} ${message}`, ...args);
  }
  static error(message, error) {
    console.error(`${this.PREFIX} ${message}`, error || "");
  }
  static warn(message, ...args) {
    console.warn(`${this.PREFIX} ${message}`, ...args);
  }
};
Logger.PREFIX = "\u{1F3F7}\uFE0F [TabTitle]";

// src/modules/moduloTabTitle/TabTitleManager.ts
var TabTitleManager = class {
  constructor(plugin, settings) {
    this.plugin = plugin;
    this.settings = settings;
    this.customViews = /* @__PURE__ */ new Map();
    Logger.info("TabTitleManager initialized");
  }
  updateAllTabs() {
    const leaves = this.plugin.app.workspace.getLeavesOfType("markdown");
    for (const leaf of leaves) {
      if (leaf.view instanceof import_obsidian70.MarkdownView) {
        this.updateTab(leaf);
      }
    }
  }
  async updateTabForFile(file) {
    var _a;
    const leaves = this.plugin.app.workspace.getLeavesOfType("markdown");
    for (const leaf of leaves) {
      if (leaf.view instanceof import_obsidian70.MarkdownView && ((_a = leaf.view.file) == null ? void 0 : _a.path) === file.path) {
        await this.updateTab(leaf);
      }
    }
  }
  async getPreferredTitleWithSource(file) {
    try {
      const metadata = await this.waitForMetadata(file);
      if (metadata == null ? void 0 : metadata.aliases) {
        if (Array.isArray(metadata.aliases) && metadata.aliases.length >= 3) {
          return {
            displayTitle: `${metadata.aliases[2]} / ${metadata.aliases[0]}`,
            source: "aliases-special"
          };
        } else if (Array.isArray(metadata.aliases) && metadata.aliases.length > 0) {
          return {
            displayTitle: metadata.aliases[0],
            source: "aliases"
          };
        } else if (typeof metadata.aliases === "string") {
          return {
            displayTitle: metadata.aliases,
            source: "aliases"
          };
        }
      }
      if (metadata == null ? void 0 : metadata.titulo) {
        return {
          displayTitle: metadata.titulo,
          source: "titulo"
        };
      }
      return {
        displayTitle: null,
        source: "basename"
      };
    } catch (error) {
      Logger.error(`Error getting title for ${file.path}:`, error);
      return {
        displayTitle: null,
        source: "error"
      };
    }
  }
  async waitForMetadata(file) {
    return new Promise((resolve) => {
      const maxAttempts = 10;
      let attempts = 0;
      const checkMetadata = () => {
        const cache = this.plugin.app.metadataCache.getFileCache(file);
        if ((cache == null ? void 0 : cache.frontmatter) || attempts >= maxAttempts) {
          resolve((cache == null ? void 0 : cache.frontmatter) || {});
        } else {
          attempts++;
          setTimeout(checkMetadata, 100);
        }
      };
      checkMetadata();
    });
  }
  // Método para aplicar scroll horizontal a un elemento de título de pestaña
  applyHorizontalScrollToTab(tabElement) {
    if (tabElement.getAttribute("data-scroll-enabled") === "true")
      return;
    const originalStyles = {
      overflow: tabElement.style.overflow,
      textOverflow: tabElement.style.textOverflow,
      whiteSpace: tabElement.style.whiteSpace,
      maxWidth: tabElement.style.maxWidth,
      transition: tabElement.style.transition
    };
    tabElement.style.overflow = "hidden";
    tabElement.style.textOverflow = "ellipsis";
    tabElement.style.whiteSpace = "nowrap";
    tabElement.style.maxWidth = "150px";
    tabElement.style.transition = "max-width 0.3s ease-in-out";
    const mouseEnterHandler = () => {
      const fullWidth = tabElement.scrollWidth;
      tabElement.style.overflow = "auto";
      tabElement.style.textOverflow = "clip";
      tabElement.style.maxWidth = Math.min(fullWidth, 300) + "px";
    };
    const mouseLeaveHandler = () => {
      tabElement.style.overflow = "hidden";
      tabElement.style.textOverflow = "ellipsis";
      tabElement.style.maxWidth = "150px";
      setTimeout(() => {
        tabElement.scrollLeft = 0;
      }, 300);
    };
    tabElement.addEventListener("mouseenter", mouseEnterHandler);
    tabElement.addEventListener("mouseleave", mouseLeaveHandler);
    tabElement.setAttribute("data-scroll-enabled", "true");
    if (!this.scrollEnabledElements)
      this.scrollEnabledElements = /* @__PURE__ */ new Map();
    this.scrollEnabledElements.set(tabElement, {
      mouseEnterHandler,
      mouseLeaveHandler,
      originalStyles
    });
  }
  // Método para limpiar el scroll de un elemento
  removeHorizontalScrollFromTab(tabElement) {
    if (!tabElement || !this.scrollEnabledElements)
      return;
    const handlers = this.scrollEnabledElements.get(tabElement);
    if (!handlers)
      return;
    tabElement.removeEventListener("mouseenter", handlers.mouseEnterHandler);
    tabElement.removeEventListener("mouseleave", handlers.mouseLeaveHandler);
    Object.assign(tabElement.style, handlers.originalStyles);
    tabElement.removeAttribute("data-scroll-enabled");
    this.scrollEnabledElements.delete(tabElement);
  }
  // Sobrescritura del método updateTab
  async updateTab(leaf) {
    if (!(leaf.view instanceof import_obsidian70.MarkdownView) || !leaf.view.file)
      return;
    const { displayTitle, source } = await this.getPreferredTitleWithSource(leaf.view.file);
    if (displayTitle) {
      let formattedTitle;
      if (source === "aliases-special" || source === "aliases-two") {
        formattedTitle = displayTitle;
      } else {
        formattedTitle = `${leaf.view.file.basename} / ${displayTitle}`;
      }
      leaf.view.titleEl.innerText = formattedTitle;
      if (leaf.tabHeaderInnerTitleEl) {
        leaf.tabHeaderInnerTitleEl.innerText = formattedTitle;
        this.applyHorizontalScrollToTab(leaf.tabHeaderInnerTitleEl);
      }
    }
  }
  // Método para limpiar recursos al desactivar
  cleanupScrollHandlers() {
    if (!this.scrollEnabledElements)
      return;
    this.scrollEnabledElements.forEach((handlers, element) => {
      this.removeHorizontalScrollFromTab(element);
    });
    this.scrollEnabledElements.clear();
  }
  // Sobrescribir restoreDefaultTitles para incluir la limpieza
  restoreDefaultTitles() {
    this.cleanupScrollHandlers();
    const leaves = this.plugin.app.workspace.getLeavesOfType("markdown");
    for (const leaf of leaves) {
      if (leaf.view instanceof import_obsidian70.MarkdownView && leaf.view.file) {
        leaf.view.titleEl.innerText = leaf.view.file.basename;
        if (leaf.tabHeaderInnerTitleEl) {
          leaf.tabHeaderInnerTitleEl.innerText = leaf.view.file.basename;
        }
      }
    }
  }
};

// src/modules/moduloTabTitle/defaults/defaultSettings.ts
var DEFAULT_TAB_SETTINGS = {
  titleDisplayMode: "filename"
};

// src/modules/moduloTabTitle/index.ts
var ModuloTabTitle = class {
  constructor(plugin) {
    this.tabManager = null;
    this.plugin = plugin;
    this.settings = DEFAULT_TAB_SETTINGS;
  }
  async activate() {
    try {
      await this.loadSettings();
      if (!this.settings.titleDisplayMode) {
        this.settings.titleDisplayMode = "alias";
        await this.saveSettings();
      }
      this.tabManager = new TabTitleManager(this.plugin, this.settings);
      registerCommands4(this.plugin, this.settings);
      this.plugin.registerEvent(
        this.plugin.app.workspace.on("layout-change", () => {
          var _a;
          try {
            (_a = this.tabManager) == null ? void 0 : _a.updateAllTabs();
          } catch (error) {
            Logger.error("Error updating tabs on layout change:", error);
          }
        })
      );
      this.plugin.registerEvent(
        this.plugin.app.workspace.on("file-open", (file) => {
          try {
            if (file && this.tabManager) {
              this.tabManager.updateTabForFile(file);
            }
          } catch (error) {
            Logger.error("Error updating tab on file open:", error);
          }
        })
      );
      setTimeout(() => {
        var _a;
        (_a = this.tabManager) == null ? void 0 : _a.updateAllTabs();
      }, 1e3);
    } catch (error) {
      Logger.error("Error activating TabTitle module:", error);
    }
  }
  deactivate() {
    try {
      if (this.tabManager) {
        this.tabManager.restoreDefaultTitles();
        this.tabManager = null;
      }
    } catch (error) {
      Logger.error("Error deactivating TabTitle module:", error);
    }
  }
  async loadSettings() {
    try {
      const loadedData = await this.plugin.loadData();
      this.settings = Object.assign({}, DEFAULT_TAB_SETTINGS, loadedData);
    } catch (error) {
      Logger.error("Error loading TabTitle settings:", error);
      this.settings = DEFAULT_TAB_SETTINGS;
    }
  }
  async saveSettings() {
    try {
      await this.plugin.saveData(this.settings);
    } catch (error) {
      Logger.error("Error saving TabTitle settings:", error);
    }
  }
};

// src/modules/taskManager/index.ts
var import_obsidian73 = require("obsidian");

// src/modules/taskManager/commands.ts
var import_obsidian72 = require("obsidian");
var TaskDaysModal = class extends import_obsidian72.Modal {
  constructor(pluginInstance) {
    super(pluginInstance.app);
    this.pluginInstance = pluginInstance;
    this.dias = 7;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Mostrar tareas pr\xF3ximas" });
    new import_obsidian72.Setting(contentEl).setName("N\xFAmero de d\xEDas").setDesc("Mostrar tareas para los pr\xF3ximos X d\xEDas").addText((text) => text.setValue("7").onChange((value) => {
      this.dias = parseInt(value) || 7;
    }));
    new import_obsidian72.Setting(contentEl).addButton((btn) => btn.setButtonText("Mostrar tareas").setCta().onClick(async () => {
      this.close();
      if (this.pluginInstance.tareasAPI) {
        await this.pluginInstance.tareasAPI.mostrarTareasProximas(this.dias);
      }
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var FutureTasksModal = class extends import_obsidian72.Modal {
  constructor(pluginInstance, defaultDays = 7) {
    super(pluginInstance.app);
    this.pluginInstance = pluginInstance;
    this.defaultDays = defaultDays;
    this.dias = 7;
    this.dias = defaultDays;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Mostrar tareas futuras" });
    new import_obsidian72.Setting(contentEl).setName("N\xFAmero de d\xEDas hacia adelante").setDesc("Mostrar tareas programadas para los pr\xF3ximos X d\xEDas").addText((text) => text.setValue(this.defaultDays.toString()).onChange((value) => {
      this.dias = parseInt(value) || 7;
    }));
    new import_obsidian72.Setting(contentEl).addButton((btn) => btn.setButtonText("Mostrar tareas").setCta().onClick(async () => {
      this.close();
      if (this.pluginInstance.tareasAPI) {
        await this.pluginInstance.tareasAPI.mostrarTareasFuturas(this.dias);
      }
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ScheduledTaskDaysModal = class extends import_obsidian72.Modal {
  constructor(pluginInstance, defaultDays = 7) {
    super(pluginInstance.app);
    this.pluginInstance = pluginInstance;
    this.defaultDays = defaultDays;
    this.dias = 7;
    this.dias = defaultDays;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Mostrar tareas programadas pr\xF3ximas" });
    new import_obsidian72.Setting(contentEl).setName("N\xFAmero de d\xEDas").setDesc("Mostrar tareas programadas para los pr\xF3ximos X d\xEDas").addText((text) => text.setValue(this.defaultDays.toString()).onChange((value) => {
      this.dias = parseInt(value) || 7;
    }));
    new import_obsidian72.Setting(contentEl).addButton((btn) => btn.setButtonText("Mostrar tareas").setCta().onClick(async () => {
      this.close();
      if (this.pluginInstance.tareasAPI) {
        await this.pluginInstance.tareasAPI.mostrarTareasScheduledProximas(this.dias);
      }
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
function registerTaskManagerCommands(plugin) {
  const managementPlugin = plugin;
  const commandIds = [];
  const tareasVencidasCommand = plugin.addCommand({
    id: "mostrar-tareas-vencidas",
    name: "Mostrar Tareas Vencidas",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasVencidas();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasVencidasCommand.id);
  const tareasProximasCommand = plugin.addCommand({
    id: "mostrar-tareas-proximas",
    name: "Mostrar Tareas Pr\xF3ximas",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasProximas();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasProximasCommand.id);
  const tareasProximasCustomCommand = plugin.addCommand({
    id: "mostrar-tareas-proximas-custom",
    name: "Mostrar Tareas Pr\xF3ximas (Especificar d\xEDas)",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        const modal = new TaskDaysModal(managementPlugin);
        modal.open();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasProximasCustomCommand.id);
  const tareasHoyCommand = plugin.addCommand({
    id: "mostrar-tareas-hoy",
    name: "Mostrar Tareas para Hoy",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasHoy();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasHoyCommand.id);
  const tareasStartVencidasCommand = plugin.addCommand({
    id: "mostrar-tareas-start-vencidas",
    name: "Mostrar Tareas Pendientes de Iniciar",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasStartVencidas();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasStartVencidasCommand.id);
  const tareasStartProximasCommand = plugin.addCommand({
    id: "mostrar-tareas-start-proximas",
    name: "Mostrar Tareas por Iniciar (Vencidas y Pr\xF3ximas)",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasStartProximas();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasStartProximasCommand.id);
  const tareasFuturasCommand = plugin.addCommand({
    id: "mostrar-tareas-futuras",
    name: "Mostrar Tareas Futuras Programadas",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        const modal = new FutureTasksModal(managementPlugin);
        modal.open();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasFuturasCommand.id);
  const tareasEnEjecucionCommand = plugin.addCommand({
    id: "mostrar-tareas-en-ejecucion",
    name: "Mostrar Tareas en Ejecuci\xF3n",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasEnEjecucion();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasEnEjecucionCommand.id);
  const tareasScheduledVencidasCommand = plugin.addCommand({
    id: "mostrar-tareas-scheduled-vencidas",
    name: "Mostrar Tareas Scheduled Vencidas",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasScheduledVencidas();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasScheduledVencidasCommand.id);
  const tareasScheduledProximasCommand = plugin.addCommand({
    id: "mostrar-tareas-scheduled-proximas",
    name: "Mostrar Tareas Scheduled Pr\xF3ximas",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        const modal = new ScheduledTaskDaysModal(managementPlugin);
        modal.open();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasScheduledProximasCommand.id);
  const todasTareasVencidasCommand = plugin.addCommand({
    id: "mostrar-todas-tareas-vencidas",
    name: "Mostrar Todas las Tareas Vencidas (Due, Scheduled, Start)",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTodasTareasVencidas();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(todasTareasVencidasCommand.id);
  const tareasDependientesCommand = plugin.addCommand({
    id: "mostrar-tareas-dependientes",
    name: "Mostrar Tareas con Dependencias",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasDependientes();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasDependientesCommand.id);
  const tareasPersonasCommand = plugin.addCommand({
    id: "mostrar-tareas-personas",
    name: "Mostrar Tareas por Persona",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasPersonas();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasPersonasCommand.id);
  const tareasContextosCommand = plugin.addCommand({
    id: "mostrar-tareas-contextos",
    name: "Mostrar Tareas por Contexto",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasContextos();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasContextosCommand.id);
  plugin.registeredTaskManagerCommandIds = commandIds;
}
function deactivateTaskManagerCommands(plugin) {
  const commandIds = plugin.registeredTaskManagerCommandIds;
  if (!commandIds)
    return;
  commandIds.forEach((commandId) => {
    const command = plugin.app.commands.commands[commandId];
    if (command) {
      command.callback = () => new import_obsidian72.Notice("Este comando ha sido desactivado.");
    }
  });
  plugin.registeredTaskManagerCommandIds = [];
}

// src/modules/taskManager/index.ts
var ModuloTaskManager = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  activate() {
    registerTaskManagerCommands(this.plugin);
  }
  deactivate() {
    deactivateTaskManagerCommands(this.plugin);
  }
};

// src/modules/dataviewQueries/index.ts
var import_obsidian76 = require("obsidian");

// src/modules/dataviewQueries/DataviewQueryManager.ts
var import_obsidian74 = require("obsidian");
var DataviewQueryManager = class extends import_obsidian74.Component {
  constructor(plugin) {
    super();
    // Cache para almacenar resultados de consultas frecuentes
    this.queryCache = /* @__PURE__ */ new Map();
    this.plugin = plugin;
  }
  // Método para ejecutar consultas con caché
  async executeQuery(queryKey, queryFn, ttl = 6e4) {
    const cached = this.queryCache.get(queryKey);
    const now2 = Date.now();
    if (cached && now2 - cached.timestamp < cached.ttl) {
      return cached.data;
    }
    const result = await queryFn();
    this.queryCache.set(queryKey, {
      data: result,
      timestamp: now2,
      ttl
    });
    return result;
  }
  // Método para limpiar caché
  clearCache(queryKey) {
    if (queryKey) {
      this.queryCache.delete(queryKey);
    } else {
      this.queryCache.clear();
    }
  }
};

// src/modules/dataviewQueries/commands.ts
var import_obsidian75 = require("obsidian");
function registerCommands5(plugin) {
  const clearCacheCommand = plugin.addCommand({
    id: "clear-dataview-queries-cache",
    name: "Limpiar cach\xE9 de consultas",
    callback: () => {
      try {
        const moduleInstance = plugin.moduloDataviewQueries;
        if (moduleInstance == null ? void 0 : moduleInstance.queryManager) {
          moduleInstance.queryManager.clearCache();
          new import_obsidian75.Notice("Cach\xE9 de consultas limpiado");
        }
      } catch (error) {
        console.error("Error al limpiar cach\xE9:", error);
        new import_obsidian75.Notice("Error al limpiar cach\xE9 de consultas");
      }
    }
  });
  const reloadQueriesCommand = plugin.addCommand({
    id: "reload-dataview-queries",
    name: "Recargar consultas activas",
    callback: () => {
      try {
        const moduleInstance = plugin.moduloDataviewQueries;
        if (moduleInstance == null ? void 0 : moduleInstance.queryManager) {
          moduleInstance.clearCache();
          app.workspace.trigger("dataview:refresh-views");
          new import_obsidian75.Notice("Consultas recargadas");
        }
      } catch (error) {
        console.error("Error al recargar consultas:", error);
        new import_obsidian75.Notice("Error al recargar consultas");
      }
    }
  });
  plugin.registeredDataviewQueryCommandIds = [
    clearCacheCommand.id,
    reloadQueriesCommand.id
  ];
}
function deactivateCommands4(plugin) {
  const commandIds = plugin.registeredDataviewQueryCommandIds;
  if (!commandIds)
    return;
  commandIds.forEach((commandId) => {
    const command = plugin.app.commands.commands[commandId];
    if (command) {
      command.callback = () => new import_obsidian75.Notice("Este comando ha sido desactivado.");
    }
  });
  plugin.registeredDataviewQueryCommandIds = [];
}

// src/modules/dataviewQueries/QueryRenderer.ts
var QueryRenderer = class {
  async renderTaskButtons(container, options = {}) {
    const buttonContainer = container.createEl("div", {
      cls: "task-buttons-container",
      attr: { style: "display: grid; grid-gap: 8px; padding: 16px; background: var(--background-secondary); border-radius: 8px;" }
    });
    if (options.showTitle !== false) {
      buttonContainer.createEl("h4", {
        text: "\u{1F4CB} Gesti\xF3n de Tareas",
        attr: { style: "margin: 0 0 12px 0;" }
      });
    }
    const buttons = [
      {
        id: "today",
        text: "Tareas de Hoy",
        icon: "\u{1F4C5}",
        color: "#4CAF50",
        action: () => app.plugins.plugins["obsidian-personal-management"].tareasAPI.mostrarTareasHoy()
      },
      {
        id: "overdue",
        text: "Tareas Vencidas",
        icon: "\u26A0\uFE0F",
        color: "#f44336",
        action: () => app.plugins.plugins["obsidian-personal-management"].tareasAPI.mostrarTareasVencidas()
      },
      {
        id: "upcoming",
        text: "Tareas Pr\xF3ximas",
        icon: "\u{1F3AF}",
        color: "#2196F3",
        action: () => app.plugins.plugins["obsidian-personal-management"].tareasAPI.mostrarTareasProximas()
      },
      {
        id: "start",
        text: "Todas las Vencidas",
        icon: "\u{1F313}",
        color: "#FF9800",
        action: () => app.plugins.plugins["obsidian-personal-management"].tareasAPI.mostrarTodasTareasVencidas()
      }
    ];
    const buttonGrid = buttonContainer.createEl("div", {
      attr: { style: "display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 8px;" }
    });
    buttons.forEach((btn) => {
      const button = buttonGrid.createEl("button", {
        attr: {
          style: `
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        gap: 8px;
                        padding: 8px 16px;
                        background-color: ${btn.color};
                        color: white;
                        border: none;
                        border-radius: 6px;
                        cursor: pointer;
                        transition: all 0.2s ease;
                    `
        }
      });
      button.createEl("span", { text: btn.icon });
      button.createEl("span", { text: btn.text });
      button.addEventListener("mouseenter", () => {
        button.style.filter = "brightness(1.1)";
        button.style.transform = "translateY(-1px)";
      });
      button.addEventListener("mouseleave", () => {
        button.style.filter = "brightness(1)";
        button.style.transform = "translateY(0)";
      });
      button.addEventListener("click", async () => {
        try {
          button.style.opacity = "0.7";
          new Notice("Actualizando vista...");
          await btn.action();
        } catch (error) {
          console.error(`Error en acci\xF3n ${btn.id}:`, error);
          new Notice(`Error: ${error.message}`);
        } finally {
          button.style.opacity = "1";
        }
      });
    });
    if (options.showTimestamp) {
      buttonContainer.createEl("div", {
        text: `\xDAltima actualizaci\xF3n: ${(/* @__PURE__ */ new Date()).toLocaleTimeString()}`,
        attr: {
          style: "margin-top: 8px; text-align: right; font-size: 0.8em; color: var(--text-muted);"
        }
      });
    }
  }
  async renderProjectHierarchy(container, options = {}) {
  }
};

// src/modules/dataviewQueries/index.ts
var ModuloDataviewQueries = class {
  constructor(plugin) {
    this._isActive = false;
    console.log("ModuloDataviewQueries: Inicializando...");
    this.plugin = plugin;
    this.queryManager = new DataviewQueryManager(plugin);
    this.queryRenderer = new QueryRenderer();
  }
  activate() {
    console.log("ModuloDataviewQueries: Iniciando activaci\xF3n...");
    if (this._isActive) {
      console.log("ModuloDataviewQueries: Ya est\xE1 activo");
      return;
    }
    try {
      registerCommands5(this.plugin);
      this.registerDataviewExtensions();
      this._isActive = true;
      console.log("ModuloDataviewQueries: Activaci\xF3n exitosa");
    } catch (error) {
      console.error("ModuloDataviewQueries: Error en activaci\xF3n:", error);
      this._isActive = false;
      throw error;
    }
  }
  deactivate() {
    console.log("ModuloDataviewQueries: Iniciando desactivaci\xF3n...");
    if (!this._isActive) {
      console.log("ModuloDataviewQueries: Ya est\xE1 inactivo");
      return;
    }
    try {
      deactivateCommands4(this.plugin);
      this.unregisterDataviewExtensions();
      this._isActive = false;
      console.log("ModuloDataviewQueries: Desactivaci\xF3n exitosa");
    } catch (error) {
      console.error("ModuloDataviewQueries: Error en desactivaci\xF3n:", error);
      throw error;
    }
  }
  isActive() {
    return this._isActive;
  }
  async renderQuery(queryType, params) {
    if (!this._isActive) {
      throw new Error("El m\xF3dulo no est\xE1 activo");
    }
    switch (queryType) {
      case "taskButtons":
        await this.queryRenderer.renderTaskButtons(params.container, params.options);
        break;
      default:
        throw new Error(`Tipo de consulta no soportado: ${queryType}`);
    }
  }
  registerDataviewExtensions() {
    const boundFunctions = {
      renderTaskButtons: (dv, container, options) => {
        return this.queryRenderer.renderTaskButtons(container, options);
      },
      renderProjectHierarchy: (dv, container, options) => {
        return this.queryRenderer.renderProjectHierarchy(container, options);
      }
    };
    window.customQueries = boundFunctions;
    console.log("ModuloDataviewQueries: Extensions registradas");
  }
  unregisterDataviewExtensions() {
    delete window.customQueries;
    console.log("ModuloDataviewQueries: Extensions eliminadas");
  }
};

// src/modules/taskNavigator/index.ts
var import_obsidian79 = require("obsidian");

// src/modules/taskNavigator/commands.ts
var import_obsidian78 = require("obsidian");

// src/modules/taskNavigator/taskNavigator.ts
var import_obsidian77 = require("obsidian");
init_seleccionModalTareas();
var TaskNavigator = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.app = plugin.app;
  }
  /**
   * Navega a la tarea seleccionada por el usuario
   */
  async navigateToTask() {
    try {
      const tasks = await this.findPendingTasks();
      if (tasks.length === 0) {
        new import_obsidian77.Notice("No se encontraron tareas en ejecuci\xF3n.");
        return;
      }
      const displayOptions = tasks.map((task) => task.displayText);
      const placeholder = "Selecciona una tarea para navegar";
      const modalMenu = new SeleccionModalTareas(
        this.app,
        displayOptions,
        tasks.map((_, index) => index.toString()),
        placeholder
      );
      try {
        const selectedIndex = parseInt(await modalMenu.openAndAwaitSelection());
        const selectedTask = tasks[selectedIndex];
        await this.openFileAtLine(selectedTask.file, selectedTask.lineNumber);
        new import_obsidian77.Notice(`Navegando a la tarea en ${selectedTask.file.basename}`);
      } catch (error) {
        console.log("Selecci\xF3n de tarea cancelada por el usuario");
      }
    } catch (error) {
      console.error("Error en navegaci\xF3n de tareas:", error);
      throw error;
    }
  }
  /**
   * Encuentra todas las tareas pendientes (con estado [/]) en los archivos
   */
  async findPendingTasks() {
    var _a;
    const tasks = [];
    const archivos = this.app.vault.getMarkdownFiles();
    const archivosRelevantes = archivos.filter((archivo) => {
      return !archivo.path.includes("Plantillas") && !archivo.path.includes("Estructura/GTD/Sistema GTD/Sistema") && !archivo.path.includes("Archivo");
    });
    for (const archivo of archivosRelevantes) {
      try {
        const contenido = await this.app.vault.read(archivo);
        const lineas = contenido.split("\n");
        const metadata = this.app.metadataCache.getFileCache(archivo);
        let aliasDisplay = "";
        if ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.aliases) {
          let aliases = metadata.frontmatter.aliases;
          if (!Array.isArray(aliases))
            aliases = [aliases];
          if (aliases.length >= 2) {
            aliasDisplay = aliases[1];
          } else if (aliases.length >= 1) {
            aliasDisplay = aliases[0];
          }
        }
        if (!aliasDisplay) {
          aliasDisplay = archivo.basename;
        }
        for (let i = 0; i < lineas.length; i++) {
          const linea = lineas[i];
          if (linea.match(/^ *- \[\/\] .*/)) {
            const textoTarea = await this.limpiarTextoTarea(linea);
            const displayText = `${aliasDisplay} / ${textoTarea}`;
            tasks.push({
              text: textoTarea,
              file: archivo,
              lineNumber: i,
              displayText
            });
          }
        }
      } catch (error) {
        console.error(`Error al procesar el archivo ${archivo.path}:`, error);
      }
    }
    return tasks;
  }
  /**
   * Limpia el texto de una tarea para mostrarla de forma legible
   * @param titulo Texto completo de la línea de la tarea
   */
  async limpiarTextoTarea(titulo) {
    return new Promise((resolve) => {
      let textoLimpio = titulo.split("\n")[0];
      textoLimpio = textoLimpio.replace(/#([\w-/]+)/g, (match2, p1) => {
        let transformado = p1.replace(/\//g, "_");
        transformado = transformado.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
        return transformado;
      });
      textoLimpio = textoLimpio.replace(/\[\w+::[^\]]+\]/g, "");
      textoLimpio = textoLimpio.replace(/^\s*-\s*\[\/\]\s*/, "");
      textoLimpio = textoLimpio.replace(
        /\p{Extended_Pictographic}\s*\d{4}-\d{2}-\d{2}(?:\s*\d{2}:\d{2}(?::\d{2})?)?/gu,
        ""
      );
      textoLimpio = textoLimpio.replace(/\p{Extended_Pictographic}/gu, "");
      textoLimpio = textoLimpio.replace(/\[[^\]]*\]/g, "");
      const caracteresNoPermitidos = /[<>:"\/\\|?*\x00-\x1F]/g;
      textoLimpio = textoLimpio.replace(caracteresNoPermitidos, "_");
      textoLimpio = textoLimpio.replace(/\s+/g, " ");
      resolve(textoLimpio.trim());
    });
  }
  /**
   * Abre un archivo y navega a una línea específica
   * @param file Archivo a abrir
   * @param line Número de línea a la que navegar
   */
  async openFileAtLine(file, line) {
    const leaf = this.app.workspace.getLeaf(true);
    await leaf.openFile(file);
    const view = this.app.workspace.getActiveViewOfType(import_obsidian77.MarkdownView);
    if (view) {
      const editor = view.editor;
      const position = { line, ch: 0 };
      editor.setCursor(position);
      editor.scrollIntoView({ from: position, to: position }, true);
      const lineLength = editor.getLine(line).length;
      editor.setSelection(
        { line, ch: 0 },
        { line, ch: lineLength }
      );
      editor.focus();
    }
  }
};

// src/modules/taskNavigator/commands.ts
function registerCommands6(plugin) {
  const taskNavigator = new TaskNavigator(plugin);
  const navigatorCommand = plugin.addCommand({
    id: "navigate-to-tasks",
    name: "Navegar a tareas en ejecuci\xF3n",
    callback: async () => {
      try {
        await taskNavigator.navigateToTask();
      } catch (error) {
        console.error("Error al navegar a la tarea:", error);
        new import_obsidian78.Notice("No se pudo navegar a la tarea seleccionada.");
      }
    }
  });
  if (!plugin.registeredTaskNavigatorIDs) {
    plugin.registeredTaskNavigatorIDs = [];
  }
  plugin.registeredTaskNavigatorIDs.push(navigatorCommand.id);
}
function deactivateCommands5(plugin) {
  if (!plugin.registeredTaskNavigatorIDs)
    return;
  plugin.registeredTaskNavigatorIDs.forEach((commandId) => {
    const command = plugin.app.commands.commands[commandId];
    if (command) {
      command.callback = () => new import_obsidian78.Notice("Este comando ha sido desactivado.");
    }
  });
  plugin.registeredTaskNavigatorIDs = [];
}

// src/modules/taskNavigator/index.ts
var TaskNavigatorModule = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  /**
   * Activa el módulo registrando los comandos
   */
  activate() {
    registerCommands6(this.plugin);
  }
  /**
   * Desactiva el módulo, asegurándose de limpiar todos los comandos registrados
   */
  deactivate() {
    deactivateCommands5(this.plugin);
  }
};

// src/main.ts
var ManagementPlugin = class extends import_obsidian80.Plugin {
  constructor() {
    super(...arguments);
    // Declara una propiedad `settings` para almacenar la configuración del plugin.
    this.statusBarExtension = null;
    this.moduloRegistroTiempo = null;
    this.moduloBase = null;
    this.moduloGTD = null;
    //moduloTerceros: ModuloTerceros | null = null;
    this.registeredCommandIdsRT = [];
    this.registeredCommandIdsMB = [];
    this.registeredCommandIdsGTD = [];
    this.registeredCommandIds_Terceros = [];
    this.ribbonButtonRT = null;
    this.moduloTabTitle = null;
    this.moduloTaskManager = null;
    this.moduloDataviewQueries = null;
    this.taskNavigatorModule = null;
  }
  // Declara una propiedad para mantener una instancia de `StatusBarExtension`.
  async onload() {
    var _a, _b, _c, _d;
    await this.loadSettings();
    this.tp = this.getTp();
    this.registerView(
      "vista-registro-activo",
      (leaf) => new VistaRegistroActivo(leaf, this)
    );
    this.registerView(
      "vista-resumen-semanal",
      (leaf) => new VistaResumenSemanal(leaf, this)
    );
    this.registerView(
      "vista-registro-diario",
      (leaf) => new VistaRegistroDiario(leaf, this)
    );
    this.registroTiempoAPI = new registroTiempoAPI(this);
    this.starterAPI = new starterAPI(this);
    this.addOnsAPI = new addOnsAPI(this);
    this.YAMLUpdaterAPI = new YAMLUpdaterAPI2(this);
    this.updateSesionLectura = new updateSesionLectura(this);
    this.menuHoyAPI = new menuHoyAPI(this);
    this.menuSemanalAPI = new menuSemanalAPI(this);
    this.subsistemasAPI = new subsistemasAPI(this);
    this.librosAPI = new librosAPI(this);
    this.newInbox = ingresarBandejaEntrada.bind(this);
    this.taskNavigatorModule = new TaskNavigatorModule(this);
    this.addSettingTab(new PluginMainSettingsTab(this));
    this.statusBarExtension = new StatusBarExtension(this);
    this.moduloRegistroTiempo = new ModuloRegistroTiempo(this);
    this.moduloBase = new ModuloBase(this);
    this.moduloGTD = new ModuloGTD(this);
    this.tareasAPI = new TareasAPI(this);
    this.moduloTabTitle = new ModuloTabTitle(this);
    this.moduloTaskManager = new ModuloTaskManager(this);
    this.moduloDataviewQueries = new ModuloDataviewQueries(this);
    this.applyConfiguration();
    console.log("Iniciando carga de plugin de Gesti\xF3n Personal");
    this.registerGPThora();
    if (this.settings.moduloTabTitle) {
      (_a = this.moduloTabTitle) == null ? void 0 : _a.activate();
    } else {
      (_b = this.moduloTabTitle) == null ? void 0 : _b.deactivate();
    }
    if (this.settings.moduloTaskManager) {
      this.moduloTaskManager.activate();
    }
    if (this.settings.moduloDataviewQueries) {
      console.log("ManagementPlugin: Aplicando configuraci\xF3n DataviewQueries...");
      try {
        if (!this.moduloDataviewQueries.isActive()) {
          this.moduloDataviewQueries.activate();
        }
      } catch (error) {
        console.error("Error en applyConfiguration:", error);
      }
    } else {
      (_c = this.moduloDataviewQueries) == null ? void 0 : _c.deactivate();
    }
    if (this.settings.taskNavigatorModule) {
      (_d = this.taskNavigatorModule) == null ? void 0 : _d.activate();
    }
  }
  registerGPThora() {
    const gptHora = new GPThora(this.app);
    gptHora.onload();
  }
  applyConfiguration() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
    if (this.settings.moduloBase) {
      (_a = this.moduloBase) == null ? void 0 : _a.activate(this);
    } else {
      (_b = this.moduloBase) == null ? void 0 : _b.deactivate(this);
    }
    if (this.settings.moduloRegistroTiempo) {
      (_c = this.moduloRegistroTiempo) == null ? void 0 : _c.activate(this);
    } else {
      (_d = this.moduloRegistroTiempo) == null ? void 0 : _d.deactivate(this);
    }
    if (this.settings.moduloAliasStatusBar) {
      (_e = this.statusBarExtension) == null ? void 0 : _e.activate();
    } else {
      (_f = this.statusBarExtension) == null ? void 0 : _f.deactivate();
    }
    if (this.settings.moduloGTD) {
      (_g = this.moduloGTD) == null ? void 0 : _g.activate(this);
    } else {
      (_h = this.moduloGTD) == null ? void 0 : _h.deactivate(this);
    }
    if (this.settings.moduloTaskManager) {
      (_i = this.moduloTaskManager) == null ? void 0 : _i.activate();
    } else {
      (_j = this.moduloTaskManager) == null ? void 0 : _j.deactivate();
    }
    if (this.settings.moduloDataviewQueries) {
      console.log("Aplicando configuraci\xF3n: Activando DataviewQueries");
      (_k = this.moduloDataviewQueries) == null ? void 0 : _k.activate();
    } else {
      console.log("Aplicando configuraci\xF3n: Desactivando DataviewQueries");
      (_l = this.moduloDataviewQueries) == null ? void 0 : _l.deactivate();
    }
    if (this.settings.taskNavigatorModule) {
      (_m = this.taskNavigatorModule) == null ? void 0 : _m.activate();
    } else {
      (_n = this.taskNavigatorModule) == null ? void 0 : _n.deactivate();
    }
  }
  async onunload() {
    console.log("Descargando plugin Gesti\xF3n Personal");
    if (this.moduloDataviewQueries) {
      this.moduloDataviewQueries.deactivate();
    }
    if (this.taskNavigatorModule) {
      this.taskNavigatorModule.deactivate();
    }
    delete this.app.gpManagement;
    return Promise.resolve();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.applyConfiguration();
  }
  getTp() {
    if (!this.app || !this.app.plugins.enabledPlugins.has("templater-obsidian")) {
      console.error("El plugin Templater no est\xE1 habilitado.");
      return;
    }
    let tpGen = this.app.plugins.plugins["templater-obsidian"].templater;
    tpGen = tpGen.functions_generator.internal_functions.modules_array;
    let tp = {};
    tp.file = tpGen.find((m) => m.name == "file");
    tp.system = tpGen.find((m) => m.name == "system");
    if (!tp.system) {
      console.error(
        "No se pudo acceder al objeto de funciones actuales de Templater."
      );
      return;
    }
    console.log("Instancia de tp cargada satisfactoriamente en Plugin");
    return tp;
  }
};
//# sourceMappingURL=data:application/json;base64,
