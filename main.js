/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  ExampleModal: () => ExampleModal,
  ExampleModal2: () => ExampleModal2,
  ExampleModal3: () => ExampleModal3,
  ExampleModal4: () => ExampleModal4,
  ExampleSettingTab: () => ExampleSettingTab,
  ExampleView: () => ExampleView,
  VIEW_TYPE_EXAMPLE: () => VIEW_TYPE_EXAMPLE,
  default: () => SamplePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  dateFormat: "YYYY-MM-DD",
  nombre: "Andr\xE9s Juli\xE1n"
};
var SamplePlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Cargando mi plugin de ejemplo.");
    this.addCommand({
      id: "Saludo a la consola",
      name: "Imprimir saludo en la consola",
      callback: () => {
        console.log("\xA1Hey, t\xFA!");
      }
    });
    this.addCommand({
      id: "insert-current-date-time",
      name: "Insertar Fecha y Hora Actual",
      checkCallback: (checking) => {
        const editor = getActiveEditor();
        if (editor) {
          if (checking)
            return true;
          const dateTime = (/* @__PURE__ */ new Date()).toLocaleString();
          editor.replaceRange(dateTime, editor.getCursor());
        } else {
          return false;
        }
      }
    });
    this.addCommand({
      id: "example-command",
      name: "Comando de ejemplo",
      editorCallback: (editor, view) => {
        const sel = editor.getSelection();
        console.log(`Has seleccionado: ${sel}`);
      }
    });
    this.addCommand({
      id: "highlight-selected-text",
      name: "Resaltar Texto Seleccionado",
      editorCheckCallback: (checking, editor, view) => {
        const value = getRequiredValue(editor);
        if (value) {
          if (!checking) {
            doCommand(editor, value);
          }
          return true;
        }
        return false;
      }
    });
    this.addCommand({
      id: "example-command",
      name: "Comando de ejemplo",
      hotkeys: [{ modifiers: ["Mod", "Shift"], key: "a" }],
      callback: () => {
        console.log("\xA1Hey, t\xFA!");
      }
    });
    this.addRibbonIcon("brain", "Abrir men\xFA", (evento) => {
      const menu = new import_obsidian.Menu();
      menu.addItem(
        (item2) => item2.setTitle("Copiar").setIcon("documents").onClick(() => {
          new import_obsidian.Notice("Copiado");
        })
      );
      menu.addItem(
        (item2) => item2.setTitle("Pegar").setIcon("paste").onClick(() => {
          new import_obsidian.Notice("Pegado");
        })
      );
      menu.showAtMouseEvent(evento);
    });
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, archivo) => {
        menu.addItem((item2) => {
          item2.setTitle("Imprimir ruta del archivo \u{1F970}").setIcon("document").onClick(async () => {
            new import_obsidian.Notice(archivo.path);
          });
        });
      })
    );
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor, vista) => {
        menu.addItem((item2) => {
          item2.setTitle("Imprimir ruta del archivo \u{1F448}").setIcon("document").onClick(async () => {
            new import_obsidian.Notice(vista.file.path);
          });
        });
      })
    );
    this.addRibbonIcon("aperture", "Plantillas r\xE1pidas", (event) => {
      const menu = new import_obsidian.Menu();
      menu.addItem(
        (item2) => item2.setTitle("Encabezado").setIcon("header").onClick(() => {
          this.insertText("# Encabezado\n");
        })
      );
      menu.addItem(
        (item2) => item2.setTitle("Pie de p\xE1gina").setIcon("footer").onClick(() => {
          this.insertText("\n\n---\nPie de p\xE1gina");
        })
      );
      menu.showAtMouseEvent(event);
    });
    this.addSettingTab(new ExampleSettingTab_1(this.app, this));
    const item = this.addStatusBarItem();
    (0, import_obsidian.setIcon)(item, "fingerprint");
    (0, import_obsidian.addIcon)("circle", `<circle cx="50" cy="50" r="50" fill="currentColor" />`);
    this.addRibbonIcon("circle", "Haz clic en m\xED", () => {
      console.log("\xA1Hola, t\xFA!");
    });
    this.addCommand({
      id: "display-modal",
      name: "Mostrar modal",
      callback: () => {
        new ExampleModal(this.app).open();
      }
    });
    this.addCommand({
      id: "display-modal2",
      name: "Mostrar modal Nombre",
      callback: () => {
        new ExampleModal2(this.app, (result) => {
          new import_obsidian.Notice(`Hola, ${result}!`);
        }).open();
      }
    });
    this.addCommand({
      id: "display-modal3",
      name: "Mostrar modal Listado",
      callback: () => {
        new ExampleModal3(this.app, (result) => {
          new import_obsidian.Notice(`Has elegido, ${result}!`);
        }).open();
      }
    });
    this.addCommand({
      id: "open-book-fuzzy-modal",
      name: "Fuzzy modal",
      callback: () => {
        new ExampleModal4(this.app).open();
      }
    });
    this.addCommand({
      id: "open-book-suggest-modal",
      name: "Abrir modal de sugerencia de libros Fuzzy",
      callback: () => {
        new BookSuggestModal(this.app).open();
      }
    });
    await this.loadSettings();
    this.addSettingTab(new ExampleSettingTab(this.app, this));
    this.registerView(
      VIEW_TYPE_EXAMPLE,
      (leaf) => new ExampleView(leaf)
    );
    this.addRibbonIcon("dice", "Activar vista", () => {
      this.activateView();
    });
    this.addRibbonIcon("croissant", "Imprimir tipos de hoja", () => {
      this.app.workspace.iterateAllLeaves((leaf) => {
        console.log(leaf.getViewState().type);
      });
    });
    this.addRibbonIcon("info", "Calcular longitud promedio de archivo", async () => {
      const longitudArchivo = await this.longitudPromedioArchivo();
      new import_obsidian.Notice(`La longitud promedio del archivo es de ${longitudArchivo} caracteres.`);
    });
  }
  async onunload() {
    console.log("Descargando mi plugin de ejemplo.");
    return Promise.resolve();
  }
  // Función para insertar texto en la nota activa
  insertText(text) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView) {
      const editor = activeView.editor;
      editor.replaceSelection(text);
    }
  }
  // Ejemplo Settings 4/5
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // Del ejemplo de VIEWS
  async activateView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_EXAMPLE);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      await leaf.setViewState({ type: VIEW_TYPE_EXAMPLE, active: true });
    }
    workspace.revealLeaf(leaf);
  }
  // Función del ejemplo de acceso a la boveda
  async longitudPromedioArchivo() {
    const { vault } = this.app;
    const contenidosArchivo = await Promise.all(
      vault.getMarkdownFiles().map((archivo) => vault.cachedRead(archivo))
    );
    let longitudTotal = 0;
    contenidosArchivo.forEach((contenido) => {
      longitudTotal += contenido.length;
    });
    return longitudTotal / contenidosArchivo.length;
  }
};
function getActiveEditor() {
  const activeLeaf = app.workspace.activeLeaf;
  if (!activeLeaf) {
    return null;
  }
  return activeLeaf.view instanceof import_obsidian.MarkdownView ? activeLeaf.view.editor : null;
}
function getRequiredValue(editor) {
  const selectedText = editor.getSelection();
  return selectedText ? selectedText : null;
}
function doCommand(editor, value) {
  const highlightedText = `==${value}==`;
  editor.replaceSelection(highlightedText);
}
var ExampleSettingTab_1 = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings Tab!" });
    const book = containerEl.createEl("div", { cls: "libro" });
    book.createEl("h3", { text: "C\xF3mo tomar notas inteligentes", cls: "libro__titulo" });
    book.createEl("p", { text: "Autor: S\xF6nke Ahrens", cls: "libro__autor" });
  }
};
var ExampleModal = class extends import_obsidian.Modal {
  constructor(app2) {
    super(app2);
  }
  onOpen() {
    let { contentEl } = this;
    contentEl.setText("\xA1M\xEDrame, soy un modal! \u{1F440}");
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
var ExampleModal2 = class extends import_obsidian.Modal {
  constructor(app2, onSubmit) {
    super(app2);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "\xBFCu\xE1l es tu nombre?" });
    new import_obsidian.Setting(contentEl).setName("Nombre").addText((text) => text.onChange((value) => {
      this.result = value;
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Enviar").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.result);
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
var ALL_BOOKS = [
  {
    title: "C\xF3mo tomar notas inteligentes",
    author: "S\xF6nke Ahrens"
  },
  {
    title: "Pensar r\xE1pido, pensar despacio",
    author: "Daniel Kahneman"
  },
  {
    title: "Trabajo profundo",
    author: "Cal Newport"
  }
];
var ExampleModal3 = class extends import_obsidian.SuggestModal {
  // Devuelve todas las sugerencias disponibles.
  getSuggestions(query) {
    return ALL_BOOKS.filter(
      (book) => book.title.toLowerCase().includes(query.toLowerCase())
    );
  }
  // Renderiza cada ítem de sugerencia.
  renderSuggestion(book, el) {
    el.createEl("div", { text: book.title });
    el.createEl("small", { text: book.author });
  }
  // Realiza una acción con la sugerencia seleccionada.
  onChooseSuggestion(book, evt) {
    new import_obsidian.Notice(`Seleccionado ${book.title}`);
  }
};
var ExampleModal4 = class extends import_obsidian.FuzzySuggestModal {
  getItems() {
    return ALL_BOOKS;
  }
  getItemText(book) {
    return book.title;
  }
  onChooseItem(book, evt) {
    new import_obsidian.Notice(`Selected ${book.title}`);
  }
};
var BookSuggestModal = class extends import_obsidian.FuzzySuggestModal {
  constructor(app2) {
    super(app2);
  }
  getItems() {
    return ALL_BOOKS;
  }
  getItemText(book) {
    return `${book.title} por ${book.author}`;
  }
  onChooseItem(book, evt) {
    new import_obsidian.Notice(`Seleccionado: ${book.title} por ${book.author}`);
  }
};
var ExampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Formato de fecha").setDesc("Formato de fecha predeterminado").addText(
      (text) => text.setPlaceholder("MMMM dd, yyyy").setValue(this.plugin.settings.dateFormat).onChange(async (value) => {
        this.plugin.settings.dateFormat = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Nombre del Usuario").setDesc("Nombre del suscriptor").addText(
      (text) => text.setPlaceholder("Apellidos, Nombre").setValue(this.plugin.settings.nombre).onChange(async (value) => {
        this.plugin.settings.nombre = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
var VIEW_TYPE_EXAMPLE = "example-view";
var ExampleView = class extends import_obsidian.ItemView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return VIEW_TYPE_EXAMPLE;
  }
  getDisplayText() {
    return "Vista de ejemplo";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.createEl("h4", { text: "Vista de ejemplo" });
  }
  async onClose() {
  }
};
//# sourceMappingURL=data:application/json;base64,
