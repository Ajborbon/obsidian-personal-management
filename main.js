/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ManagementPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian15 = require("obsidian");

// src/settingsTab.ts
var import_obsidian = require("obsidian");
var PluginMainSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Configuraci\xF3n del plugin de Gesti\xF3n Personal" });
    const tabContainer = containerEl.createDiv({ cls: "tab-container" });
    const tabContentContainer = containerEl.createDiv({ cls: "tab-content-container" });
    const tabTitles = ["Activar M\xF3dulos", "Directorios Subsistemas", "Pesta\xF1a 3"];
    tabTitles.forEach((title, index) => {
      const tabButton = document.createElement("button");
      tabButton.textContent = title;
      tabButton.classList.add("tab-link");
      tabButton.dataset.tab = `tab${index}`;
      tabButton.onclick = () => this.openTab(`tab${index}`);
      tabContainer.appendChild(tabButton);
      const tabContent = document.createElement("div");
      tabContent.id = `tab${index}`;
      tabContent.classList.add("tab-content");
      tabContentContainer.appendChild(tabContent);
      if (index > 0)
        tabContent.style.display = "none";
      if (index === 0) {
        new import_obsidian.Setting(tabContent).setName("Ver Alias en el Status Bar").setDesc("Elige si deseas ver el Aliases de las notas en el Status Bar.").addToggle((toggle) => toggle.setValue(this.plugin.settings.moduloAliasStatusBar).onChange(async (value) => {
          this.plugin.settings.moduloAliasStatusBar = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(tabContent).setName("Activar M\xF3dulo Registro Tiempo").setDesc("Activa o desactiva el m\xF3dulo de registro de tiempo.").addToggle((toggle) => toggle.setValue(this.plugin.settings.moduloRegistroTiempo).onChange(async (value) => {
          this.plugin.settings.moduloRegistroTiempo = value;
          await this.plugin.saveSettings();
        }));
      }
      if (index === 1) {
        const toggleCollapse = (event) => {
          const nextElement = event.target.nextElementSibling;
          if (nextElement.style.display === "none") {
            nextElement.style.display = "block";
            event.target.innerHTML = "&#9660; " + event.target.getAttribute("data-title");
          } else {
            nextElement.style.display = "none";
            event.target.innerHTML = "&#9654; " + event.target.getAttribute("data-title");
          }
        };
        const blogTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Art\xEDculos de Blog"' });
        blogTitle.setAttribute("data-title", 'Subsistema de "Art\xEDculos de Blog"');
        blogTitle.style.cursor = "pointer";
        const blogContent = tabContent.createDiv();
        blogContent.style.display = "none";
        blogTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(blogContent).setName("Carpeta de Art\xEDculos del Blog").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los art\xEDculos del blog.").addText((text) => text.setValue(this.plugin.settings.folder_ABlog).onChange(async (value) => {
          this.plugin.settings.folder_ABlog = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(blogContent).setName("Indice de Art\xEDculos del Blog").setDesc("Establece la ruta del \xEDndice de los art\xEDculos del blog.").addText((text) => text.setValue(this.plugin.settings.indice_ABlog).onChange(async (value) => {
          this.plugin.settings.indice_ABlog = value;
          await this.plugin.saveSettings();
        }));
        const desarrollosTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Desarrollos y c\xF3digos"' });
        desarrollosTitle.setAttribute("data-title", 'Subsistema de "Desarrollos y c\xF3digos"');
        desarrollosTitle.style.cursor = "pointer";
        const desarrollosContent = tabContent.createDiv();
        desarrollosContent.style.display = "none";
        desarrollosTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(desarrollosContent).setName("Carpeta de Desarrollos y C\xF3digos").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los desarrollos y c\xF3digos.").addText((text) => text.setValue(this.plugin.settings.folder_Desarrollos).onChange(async (value) => {
          this.plugin.settings.folder_Desarrollos = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(desarrollosContent).setName("\xCDndice de Desarrollos y C\xF3digos").setDesc("Establece la ruta del \xEDndice de los desarrollos y c\xF3digos.").addText((text) => text.setValue(this.plugin.settings.indice_Desarrollos).onChange(async (value) => {
          this.plugin.settings.indice_Desarrollos = value;
          await this.plugin.saveSettings();
        }));
        const estudioTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Estudio"' });
        estudioTitle.setAttribute("data-title", 'Subsistema de "Estudio"');
        estudioTitle.style.cursor = "pointer";
        const estudioContent = tabContent.createDiv();
        estudioContent.style.display = "none";
        estudioTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(estudioContent).setName("Carpeta de Temas de Estudio").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los temas de estudio.").addText((text) => text.setValue(this.plugin.settings.folder_Estudio).onChange(async (value) => {
          this.plugin.settings.folder_Estudio = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(estudioContent).setName("\xCDndice de Estudio").setDesc("Establece la ruta del \xEDndice de los temas de estudio.").addText((text) => text.setValue(this.plugin.settings.indice_Estudio).onChange(async (value) => {
          this.plugin.settings.indice_Estudio = value;
          await this.plugin.saveSettings();
        }));
        const gtdTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "GTD"' });
        gtdTitle.setAttribute("data-title", 'Subsistema de "GTD"');
        gtdTitle.style.cursor = "pointer";
        const gtdContent = tabContent.createDiv();
        gtdContent.style.display = "none";
        gtdTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(gtdContent).setName("Carpeta de Proyectos GTD").setDesc("Establece la ruta de la carpeta para proyectos GTD.").addText((text) => text.setValue(this.plugin.settings.folder_ProyectosGTD).onChange(async (value) => {
          this.plugin.settings.folder_ProyectosGTD = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(gtdContent).setName("\xCDndice de Proyectos GTD").setDesc("Establece la ruta del \xEDndice para proyectos GTD.").addText((text) => text.setValue(this.plugin.settings.indice_ProyectosGTD).onChange(async (value) => {
          this.plugin.settings.indice_ProyectosGTD = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(gtdContent).setName("Carpeta de Revisiones Semanales GTD").setDesc("Establece la ruta de la carpeta para las revisiones semanales GTD.").addText((text) => text.setValue(this.plugin.settings.folder_RSGTD).onChange(async (value) => {
          this.plugin.settings.folder_RSGTD = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(gtdContent).setName("\xCDndice de Revisiones Semanales GTD").setDesc("Establece la ruta del \xEDndice para las revisiones semanales GTD.").addText((text) => text.setValue(this.plugin.settings.indice_RSGTD).onChange(async (value) => {
          this.plugin.settings.indice_RSGTD = value;
          await this.plugin.saveSettings();
        }));
        const lecturaTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Lectura"' });
        lecturaTitle.setAttribute("data-title", 'Subsistema de "Lectura"');
        lecturaTitle.style.cursor = "pointer";
        const lecturaContent = tabContent.createDiv();
        lecturaContent.style.display = "none";
        lecturaTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(lecturaContent).setName("Carpeta de Sesiones de Lectura").setDesc("Establece la ruta de la carpeta para las sesiones de lectura.").addText((text) => text.setValue(this.plugin.settings.folder_LecturaSesiones).onChange(async (value) => {
          this.plugin.settings.folder_LecturaSesiones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(lecturaContent).setName("\xCDndice de Sesiones de Lectura").setDesc("Establece la ruta del \xEDndice para las sesiones de lectura.").addText((text) => text.setValue(this.plugin.settings.indice_LecturaSesiones).onChange(async (value) => {
          this.plugin.settings.indice_LecturaSesiones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(lecturaContent).setName("Carpeta de Res\xFAmenes de Libros").setDesc("Establece la ruta de la carpeta para los res\xFAmenes de libros.").addText((text) => text.setValue(this.plugin.settings.folder_LecturaResumenes).onChange(async (value) => {
          this.plugin.settings.folder_LecturaResumenes = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(lecturaContent).setName("\xCDndice de Res\xFAmenes de Libros").setDesc("Establece la ruta del \xEDndice para los res\xFAmenes de libros.").addText((text) => text.setValue(this.plugin.settings.indice_LecturaResumenes).onChange(async (value) => {
          this.plugin.settings.indice_LecturaResumenes = value;
          await this.plugin.saveSettings();
        }));
        const mentoriasTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Mentor\xEDas"' });
        mentoriasTitle.setAttribute("data-title", 'Subsistema de "Mentor\xEDas"');
        mentoriasTitle.style.cursor = "pointer";
        const mentoriasContent = tabContent.createDiv();
        mentoriasContent.style.display = "none";
        mentoriasTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(mentoriasContent).setName("Carpeta de Sesiones de Mentor\xEDa").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las sesiones de mentor\xEDa.").addText((text) => text.setValue(this.plugin.settings.folder_Mentorias).onChange(async (value) => {
          this.plugin.settings.folder_Mentorias = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(mentoriasContent).setName("\xCDndice de Mentor\xEDas").setDesc("Establece la ruta del \xEDndice de las sesiones de mentor\xEDa.").addText((text) => text.setValue(this.plugin.settings.indice_Mentorias).onChange(async (value) => {
          this.plugin.settings.indice_Mentorias = value;
          await this.plugin.saveSettings();
        }));
        const mercadoTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Mercado"' });
        mercadoTitle.setAttribute("data-title", 'Subsistema de "Mercado"');
        mercadoTitle.style.cursor = "pointer";
        const mercadoContent = tabContent.createDiv();
        mercadoContent.style.display = "none";
        mercadoTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(mercadoContent).setName("Carpeta de Listados de Mercado").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las listas de mercado.").addText((text) => text.setValue(this.plugin.settings.folder_Mercado).onChange(async (value) => {
          this.plugin.settings.folder_Mercado = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(mercadoContent).setName("\xCDndice de listados de mercado").setDesc("Establece la ruta del \xEDndice de los listados de mercado.").addText((text) => text.setValue(this.plugin.settings.indice_Mercado).onChange(async (value) => {
          this.plugin.settings.indice_Mercado = value;
          await this.plugin.saveSettings();
        }));
        const modulosTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "M\xF3dulos Sistema Gesti\xF3n"' });
        modulosTitle.setAttribute("data-title", 'Subsistema de "M\xF3dulos Sistema Gesti\xF3n"');
        modulosTitle.style.cursor = "pointer";
        const modulosContent = tabContent.createDiv();
        modulosContent.style.display = "none";
        modulosTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(modulosContent).setName("Carpeta de Modulos del Sistema de Gestion").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los m\xF3dulos del Sistema de Gesti\xF3n.").addText((text) => text.setValue(this.plugin.settings.folder_ModulosSistema).onChange(async (value) => {
          this.plugin.settings.folder_ModulosSistema = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(modulosContent).setName("\xCDndice de los Modulos del sistema de Gestion").setDesc("Establece la ruta del \xEDndice de los M\xF3dulos del sistema de Gesti\xF3n.").addText((text) => text.setValue(this.plugin.settings.indice_ModulosSistema).onChange(async (value) => {
          this.plugin.settings.indice_ModulosSistema = value;
          await this.plugin.saveSettings();
        }));
        const pagosTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Pagos"' });
        pagosTitle.setAttribute("data-title", 'Subsistema de "Pagos"');
        pagosTitle.style.cursor = "pointer";
        const pagosContent = tabContent.createDiv();
        pagosContent.style.display = "none";
        pagosTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(pagosContent).setName("Carpeta de Modulos del Sistema de Pagos").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los comprobantes de pagos.").addText((text) => text.setValue(this.plugin.settings.folder_Pagos).onChange(async (value) => {
          this.plugin.settings.folder_Pagos = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(pagosContent).setName("\xCDndice de Pagos").setDesc("Establece la ruta del \xEDndice de Pagos.").addText((text) => text.setValue(this.plugin.settings.indice_Pagos).onChange(async (value) => {
          this.plugin.settings.indice_Pagos = value;
          await this.plugin.saveSettings();
        }));
        const presentacionesTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Presentaciones"' });
        presentacionesTitle.setAttribute("data-title", 'Subsistema de "Presentaciones"');
        presentacionesTitle.style.cursor = "pointer";
        const presentacionesContent = tabContent.createDiv();
        presentacionesContent.style.display = "none";
        presentacionesTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(presentacionesContent).setName("Carpeta de Notas de Presentaciones").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las notas de presentaciones.").addText((text) => text.setValue(this.plugin.settings.folder_Presentaciones).onChange(async (value) => {
          this.plugin.settings.folder_Presentaciones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(presentacionesContent).setName("\xCDndice de Presentaciones").setDesc("Establece la ruta del \xEDndice de presentaciones.").addText((text) => text.setValue(this.plugin.settings.indice_Presentaciones).onChange(async (value) => {
          this.plugin.settings.indice_Presentaciones = value;
          await this.plugin.saveSettings();
        }));
        const proyectosQTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Proyectos de Q"' });
        proyectosQTitle.setAttribute("data-title", 'Subsistema de "Proyectos de Q"');
        proyectosQTitle.style.cursor = "pointer";
        const proyectosQContent = tabContent.createDiv();
        proyectosQContent.style.display = "none";
        proyectosQTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(proyectosQContent).setName("Carpeta de Proyectos de Q").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los proyectos de Q.").addText((text) => text.setValue(this.plugin.settings.folder_ProyectosQ).onChange(async (value) => {
          this.plugin.settings.folder_ProyectosQ = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(proyectosQContent).setName("\xCDndice de Proyectos de Q").setDesc("Establece la ruta del \xEDndice de proyectos de Q.").addText((text) => text.setValue(this.plugin.settings.indice_ProyectosQ).onChange(async (value) => {
          this.plugin.settings.indice_ProyectosQ = value;
          await this.plugin.saveSettings();
        }));
        const publicacionesTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Publicaciones"' });
        publicacionesTitle.setAttribute("data-title", 'Subsistema de "Publicaciones"');
        publicacionesTitle.style.cursor = "pointer";
        const publicacionesContent = tabContent.createDiv();
        publicacionesContent.style.display = "none";
        publicacionesTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(publicacionesContent).setName("Carpeta de Piezas de Publicaciones").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las piezas de publicaciones.").addText((text) => text.setValue(this.plugin.settings.folder_Publicaciones).onChange(async (value) => {
          this.plugin.settings.folder_Publicaciones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(publicacionesContent).setName("\xCDndice de Publicaciones").setDesc("Establece la ruta del \xEDndice de publicaciones.").addText((text) => text.setValue(this.plugin.settings.indice_Publicaciones).onChange(async (value) => {
          this.plugin.settings.indice_Publicaciones = value;
          await this.plugin.saveSettings();
        }));
        const recetasTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Recetas"' });
        recetasTitle.setAttribute("data-title", 'Subsistema de "Recetas"');
        recetasTitle.style.cursor = "pointer";
        const recetasContent = tabContent.createDiv();
        recetasContent.style.display = "none";
        recetasTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(recetasContent).setName("Carpeta de Recetas").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las recetas.").addText((text) => text.setValue(this.plugin.settings.folder_Recetas).onChange(async (value) => {
          this.plugin.settings.folder_Recetas = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(recetasContent).setName("\xCDndice de Recetas").setDesc("Establece la ruta del \xEDndice de recetas.").addText((text) => text.setValue(this.plugin.settings.indice_Recetas).onChange(async (value) => {
          this.plugin.settings.indice_Recetas = value;
          await this.plugin.saveSettings();
        }));
        const recursosRecurrentesTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Recursos Recurrentes"' });
        recursosRecurrentesTitle.setAttribute("data-title", 'Subsistema de "Recursos Recurrentes"');
        recursosRecurrentesTitle.style.cursor = "pointer";
        const recursosRecurrentesContent = tabContent.createDiv();
        recursosRecurrentesContent.style.display = "none";
        recursosRecurrentesTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(recursosRecurrentesContent).setName("Carpeta de Recursos Recurrentes").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los recursos recurrentes.").addText((text) => text.setValue(this.plugin.settings.folder_RecursosRecurrentes).onChange(async (value) => {
          this.plugin.settings.folder_RecursosRecurrentes = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(recursosRecurrentesContent).setName("\xCDndice de Recursos Recurrentes").setDesc("Establece la ruta del \xEDndice de recursos recurrentes.").addText((text) => text.setValue(this.plugin.settings.indice_RecursosRecurrentes).onChange(async (value) => {
          this.plugin.settings.indice_RecursosRecurrentes = value;
          await this.plugin.saveSettings();
        }));
        const registroTiempoTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Registro Tiempo"' });
        registroTiempoTitle.setAttribute("data-title", 'Subsistema de "Registro Tiempo"');
        registroTiempoTitle.style.cursor = "pointer";
        const registroTiempoContent = tabContent.createDiv();
        registroTiempoContent.style.display = "none";
        registroTiempoTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(registroTiempoContent).setName("Carpeta de Registros de Tiempo").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los registros de tiempo.").addText((text) => text.setValue(this.plugin.settings.folder_RegistroTiempo).onChange(async (value) => {
          this.plugin.settings.folder_RegistroTiempo = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(registroTiempoContent).setName("\xCDndice de Registro de Tiempo").setDesc("Establece la ruta del \xEDndice de registros de tiempo.").addText((text) => text.setValue(this.plugin.settings.indice_RegistroTiempo).onChange(async (value) => {
          this.plugin.settings.indice_RegistroTiempo = value;
          await this.plugin.saveSettings();
        }));
      }
      if (index === 2) {
        const dateLabel = tabContent.createEl("label");
        dateLabel.textContent = "Fecha";
        const dateInput = tabContent.createEl("input");
        dateInput.type = "datetime-local";
      }
    });
    containerEl.createEl("style", {
      text: `
                .tab-content { display: none; padding-top: 20px; } // A\xF1adido padding-top para el espacio
                .tab-content.active { display: block; }
                .tab-link { cursor: pointer; padding: 5px 10px; margin-right: 5px; background: #f0f0f0; border: 1px solid #ddd; border-radius: 5px; }
                .tab-link.active { background: #e0e0e0; }
                .setting-item { margin-bottom: 10px; }
            `
    });
    this.openTab = (tabName) => {
      document.querySelectorAll(".tab-content").forEach((content) => {
        content.style.display = "none";
        content.classList.remove("active");
      });
      document.querySelectorAll(".tab-link").forEach((link) => {
        link.classList.remove("active");
      });
      const activeTabContent = document.getElementById(tabName);
      const activeTabLink = document.querySelector(`[data-tab="${tabName}"]`);
      if (activeTabContent)
        activeTabContent.style.display = "block";
      if (activeTabLink)
        activeTabLink.classList.add("active");
    };
    this.openTab("tab0");
  }
};

// src/modules/moduloBase/index.ts
var import_obsidian3 = require("obsidian");

// src/modules/moduloBase/commands.ts
var import_obsidian2 = require("obsidian");

// src/modules/M_busquedaAvanzada/activadores.ts
var import_obsidian7 = require("obsidian");

// src/modules/M_busquedaAvanzada/ui/ribbonButton.ts
var import_obsidian6 = require("obsidian");

// src/modules/M_busquedaAvanzada/ui/modal.ts
var import_obsidian5 = require("obsidian");

// src/modules/M_busquedaAvanzada/search/FuzzyNoteSuggester.ts
var import_obsidian4 = require("obsidian");
var FuzzyNoteSuggester = class extends import_obsidian4.FuzzySuggestModal {
  constructor(app2, notas) {
    super(app2);
    this.notas = notas;
  }
  getItems() {
    return this.notas;
  }
  getItemText(item) {
    return item.basename;
  }
  onChooseItem(item, evt) {
    const leaf = this.app.workspace.getLeaf(true);
    this.app.workspace.setActiveLeaf(leaf, false);
    leaf.openFile(item);
  }
};

// src/modules/M_busquedaAvanzada/ui/modal.ts
var SearchAreasDeVidaModal = class extends import_obsidian5.Modal {
  // Estado por defecto como emoji directamente
  constructor(app2, onSelectEstado) {
    super(app2);
    this.estadoSeleccionado = "\u{1F7E2}";
    this.onSelectEstado = onSelectEstado;
  }
  onOpen() {
    let { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h3", { text: "Buscar \xC1reas de Vida" });
    new import_obsidian5.Setting(contentEl).setName("Estado").setDesc("Elige el estado:").addDropdown((dropdown) => {
      dropdown.addOptions({ "\u{1F7E2}": "Verde", "\u{1F535}": "Azul", "\u{1F7E1}": "Amarillo", "\u{1F534}": "Rojo" });
      dropdown.setValue(this.estadoSeleccionado);
      dropdown.onChange((value) => {
        this.estadoSeleccionado = value;
      });
    });
    new import_obsidian5.Setting(contentEl).addButton((button) => {
      button.setButtonText("Buscar").onClick(async () => {
        const notasFiltradas = await this.filtrarNotasPorEstadoYDirectorio("Estructura/Areas de Vida", this.estadoSeleccionado);
        console.log("Notas filtradas:", notasFiltradas.length, notasFiltradas);
        new FuzzyNoteSuggester(this.app, notasFiltradas).open();
        this.close();
      });
    });
  }
  // Método para filtrar notas por estado y directorio
  async filtrarNotasPorEstadoYDirectorio(directorio, estado) {
    const archivos = this.app.vault.getMarkdownFiles();
    let notasFiltradas = archivos.filter((archivo) => {
      const path = archivo.path;
      if (!path.startsWith(directorio))
        return false;
      const datos = this.app.metadataCache.getFileCache(archivo);
      console.log("Archivo procesado:", archivo.path);
      if (datos.frontmatter && datos.frontmatter.estado === estado) {
        console.log("Archivo incluido:", archivo.path);
        return true;
      }
      return false;
    });
    notasFiltradas.sort((a, b) => {
      return b.stat.mtime - a.stat.mtime;
    });
    return notasFiltradas;
  }
};

// src/modules/M_busquedaAvanzada/ui/ribbonButton.ts
function registerRibbonMenu(plugin) {
  plugin.addRibbonIcon("folder-search-2", "B\xFAsqueda Avanzada", async (event) => {
    const menu = new import_obsidian6.Menu(plugin.app);
    menu.addItem((item) => item.setTitle("\xC1reas de Vida").onClick(() => {
      new SearchAreasDeVidaModal(plugin.app, (estadoSeleccionado) => {
        console.log("Estado seleccionado:", estadoSeleccionado);
      }).open();
    }));
    menu.addItem((item) => item.setTitle("\xC1reas de Inter\xE9s").onClick(() => {
      console.log("\xC1reas de Inter\xE9s");
    }));
    menu.addItem((item) => item.setTitle("Anotaci\xF3n").onClick(() => {
      console.log("Anotaci\xF3n");
    }));
    menu.addItem((item) => item.setTitle("Recurso Recurrente").onClick(() => {
      console.log("Recurso Recurrente");
    }));
    menu.addItem((item) => item.setTitle("Gesti\xF3n Diaria").onClick(() => {
      console.log("Gesti\xF3n Diaria");
    }));
    menu.addItem((item) => item.setTitle("Registro de Tiempo").onClick(() => {
      console.log("Registro de Tiempo");
    }));
    menu.showAtPosition({ x: event.pageX, y: event.pageY });
  });
}

// src/modules/M_busquedaAvanzada/activadores.ts
function activateModuloBusquedaAvanzada(plugin) {
  registerRibbonMenu(plugin);
}

// src/modules/moduloAliasStatusBar/statusBar.ts
var import_obsidian8 = require("obsidian");
var StatusBarExtension = class {
  constructor(plugin) {
    this.statusBar = null;
    this.plugin = plugin;
  }
  activate() {
    if (this.statusBar)
      return;
    this.statusBar = this.plugin.addStatusBarItem();
    this.updateStatusBar();
    this.plugin.registerEvent(
      this.plugin.app.workspace.on("file-open", (file) => {
        this.updateStatusBar(file);
      })
    );
  }
  deactivate() {
    if (!this.statusBar)
      return;
    this.statusBar.remove();
    this.statusBar = null;
  }
  updateStatusBar(file) {
    var _a, _b;
    const currentFile = file || this.plugin.app.workspace.getActiveFile();
    if (!currentFile || !this.statusBar) {
      (_a = this.statusBar) == null ? void 0 : _a.setText("");
      return;
    }
    const fileCache = this.plugin.app.metadataCache.getFileCache(currentFile);
    const aliases = ((_b = fileCache.frontmatter) == null ? void 0 : _b.aliases) || [];
    this.statusBar.setText(aliases.length > 0 ? `Alias: ${aliases[0]}` : "No Alias");
  }
};

// src/modules/moduloRegistroTiempo/index.ts
var import_obsidian14 = require("obsidian");

// src/modules/moduloRegistroTiempo/ribbonMenu.ts
var import_obsidian11 = require("obsidian");

// src/modules/moduloRegistroTiempo/utils.ts
var import_obsidian10 = require("obsidian");

// src/modules/modales/seleccionModal.ts
var import_obsidian9 = require("obsidian");
var SeleccionModal = class extends import_obsidian9.FuzzySuggestModal {
  // Flag para determinar si se ha hecho una selección.
  // Constructor de la clase.
  constructor(app2, titles, values, placeholder) {
    super(app2);
    // Objeto para mapear títulos a valores.
    this.seleccionHecha = false;
    this.titles = titles;
    this.values = values;
    this.valueMap = titles.reduce((acc, title, index) => {
      acc[title] = values[index];
      return acc;
    }, {});
    this.setPlaceholder(placeholder);
  }
  // Método para obtener los ítems (títulos) que se mostrarán en el modal.
  getItems() {
    return this.titles;
  }
  // Método para obtener el texto que se mostrará para cada ítem en el modal.
  getItemText(item) {
    return item;
  }
  // Método que se llama al cerrar el modal.
  onClose() {
    if (!this.seleccionHecha) {
      this.reject(new Error("Modal cerrado sin selecci\xF3n"));
    }
  }
  // Método para manejar la selección de un ítem.
  selectSuggestion(item, evt) {
    this.seleccionHecha = true;
    super.selectSuggestion(item, evt);
  }
  // Método que se llama al elegir un ítem, donde se resuelve la promesa con el valor asociado al ítem seleccionado.
  onChooseItem(item, evt) {
    const value = this.valueMap[item];
    this.resolve(value);
  }
  // Método para abrir el modal y esperar a que el usuario haga una selección, devolviendo una promesa con el valor seleccionado.
  openAndAwaitSelection() {
    return new Promise((resolve, reject) => {
      this.resolve = resolve;
      this.reject = reject;
      this.open();
    });
  }
};

// src/modules/moduloRegistroTiempo/utils.ts
async function cumpleCondicion(app2) {
  var _a;
  const files = app2.vault.getMarkdownFiles();
  for (let file of files) {
    if (file.path.startsWith("Estructura/Registro Tiempo")) {
      const metadata = app2.metadataCache.getFileCache(file);
      if (((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.estado) === "\u{1F7E2}") {
        return true;
      }
    }
  }
  return false;
}
async function buscarRegistrosActivos(app2) {
  var _a;
  const files = app2.vault.getMarkdownFiles();
  for (let file of files) {
    if (file.path.startsWith("Subsistemas/Registro Tiempo/Registros")) {
      const metadata = app2.metadataCache.getFileCache(file);
      if (((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.estado) === "\u{1F7E2}") {
        return file;
      }
    }
  }
  return;
}
async function crearObjetoRegistro(plugin) {
  const activo = plugin.app.workspace.getActiveFile();
  if (!activo) {
    console.error("No hay un archivo activo para la creaci\xF3n de registro de tiempo. Se descarta para la creaci\xF3n de registro de tiempo.");
    return null;
  }
  const folder = plugin.settings.folder_RegistroTiempo;
  const indice = plugin.settings.indice_RegistroTiempo;
  let maxId = 0;
  const files = app.vault.getMarkdownFiles();
  const registrosExistentes = files.filter((file) => file.path.startsWith(folder));
  registrosExistentes.forEach((file) => {
    var _a;
    const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    if (metadata && metadata.id && !isNaN(metadata.id)) {
      const id = parseInt(metadata.id);
      if (id > maxId)
        maxId = id;
    }
  });
  const nextId = maxId + 1;
  const fechaCompleta = formatearFecha(/* @__PURE__ */ new Date());
  return {
    activo,
    nombre: activo.basename,
    folder,
    indice,
    id: nextId,
    fecha: fechaCompleta,
    indice_DVJS: `"${indice}"`
  };
}
function formatearFecha(fecha) {
  const offset = fecha.getTimezoneOffset() * 6e4;
  const fechaLocal = new Date(fecha.getTime() - offset);
  const fechaFormato = fechaLocal.toISOString().split("T")[0];
  const dias = ["Domingo", "Lunes", "Martes", "Mi\xE9rcoles", "Jueves", "Viernes", "S\xE1bado"];
  const diaSemana = dias[fecha.getDay()];
  const horaFormato = fecha.toTimeString().split(" ")[0].substring(0, 5);
  return `${fechaFormato} ${diaSemana} ${horaFormato}`;
}
async function verificarTareasActivas(registro, app2) {
  var _a;
  const files = app2.vault.getMarkdownFiles();
  const tareasActivas = [];
  for (let file of files) {
    if (file.path.startsWith(registro.folder)) {
      const metadata = (_a = app2.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if ((metadata == null ? void 0 : metadata.estado) === "\u{1F7E2}") {
        tareasActivas.push({ file, aliases: metadata.aliases || file.basename });
      }
    }
  }
  if (tareasActivas.length === 1) {
    const tareaActiva = tareasActivas[0];
    debugger;
    const deseaDetener = await mostrarSugerencia(`La tarea ${tareaActiva.aliases} est\xE1 corriendo. \xBFDesea detenerla?`);
    if (deseaDetener === void 0) {
      new import_obsidian10.Notice(`Creaci\xF3n de registro cancelado por el usuario.`);
      registro.detener = true;
      return;
    }
    if (deseaDetener) {
      await detenerTarea(tareaActiva, app2);
      registro.detener = false;
    } else {
      new import_obsidian10.Notice(`La tarea ${tareaActiva.aliases} seguir\xE1 registr\xE1ndose.`);
      registro.detener = true;
      return;
    }
  } else if (tareasActivas.length > 1) {
    new import_obsidian10.Notice("Hay un error con la cantidad de tareas corriendo en este momento.");
    registro.detener = true;
  } else {
    console.log("No hay m\xE1s tareas corriendo.");
    registro.detener = false;
  }
}
function mostrarSugerencia(mensaje) {
  return new Promise((resolve) => {
    let seleccionado = false;
    const modal = new import_obsidian10.Modal(app);
    modal.contentEl.createEl("h1", { text: mensaje });
    const buttonsContainer = modal.contentEl.createEl("div");
    const yesButton = buttonsContainer.createEl("button", {
      text: "S\xED"
    });
    yesButton.addEventListener("click", () => {
      seleccionado = true;
      modal.close();
      resolve(true);
    });
    const noButton = buttonsContainer.createEl("button", {
      text: "No"
    });
    noButton.addEventListener("click", () => {
      seleccionado = true;
      modal.close();
      resolve(false);
    });
    modal.onClose = () => {
      if (!seleccionado) {
        resolve(void 0);
      }
    };
    modal.open();
  });
}
async function definirTipoRegistro(registro, app2) {
  const totTareas = await encontrarTareasPendientes(app2);
  let opcionesTitulo, valoresOpcion;
  if (totTareas.length > 0) {
    opcionesTitulo = [registro.nombre, "Alguna tarea en Ejecuci\xF3n", "Otro"];
    valoresOpcion = ["Nota", "Tarea", "Otro"];
  } else {
    opcionesTitulo = [registro.nombre, "Otro"];
    valoresOpcion = ["Nota", "Otro"];
  }
  const placeholder = "\xBFSobre qu\xE9 es el registro de tiempo?";
  const modalMenu1 = new SeleccionModal(app2, opcionesTitulo, valoresOpcion, placeholder);
  try {
    const selection = await modalMenu1.openAndAwaitSelection();
    registro.tipoRegistro = selection;
    switch (registro.tipoRegistro) {
      case "Nota":
        registro.titulo = registro.nombre;
        registro.siAsunto = true;
        break;
      case "Tarea":
        await elegirTareaParaRegistro(app2, registro, totTareas);
        break;
      default:
        registro.siAsunto = registro.tituloDefinido !== "Otro";
        break;
    }
  } catch (error) {
    console.error("Error o modal cerrado sin selecci\xF3n:", error);
  }
}
async function encontrarTareasPendientes(app2) {
  let tareasPendientes = [];
  const archivos = app2.vault.getMarkdownFiles();
  const archivosRelevantes = archivos.filter((archivo) => !archivo.path.includes("Plantillas"));
  for (const archivo of archivosRelevantes) {
    const contenido = await app2.vault.read(archivo);
    const coincidencias = contenido.match(/^ *- \[\/\] .*/gm) || [];
    const tareasLimpias = coincidencias.map((tarea) => tarea.trim());
    tareasPendientes = tareasPendientes.concat(tareasLimpias);
  }
  return tareasPendientes;
}
async function elegirTareaParaRegistro(app2, registro, tareasPendientes) {
  const placeholder = "Elige la tarea que vas a registrar.";
  let promesasLimpias = tareasPendientes.map((tarea) => limpiarTextoTarea(tarea));
  Promise.all(promesasLimpias).then((tareasLimpias) => {
    const modalMenu = new SeleccionModal(app2, tareasLimpias, tareasLimpias, placeholder);
    modalMenu.openAndAwaitSelection().then((selection) => {
      debugger;
      registro.titulo = limpiarTextoTarea(selection);
    }).catch((error) => {
      registro.detener = true;
      console.error("Error o modal cerrado sin selecci\xF3n:", error);
    });
  }).catch((error) => {
    console.error("Hubo un error al limpiar las tareas:", error);
  });
}
function limpiarTextoTarea(titulo) {
  return new Promise((resolve) => {
    let textoLimpio = titulo.split("\n")[0];
    textoLimpio = textoLimpio.replace(/#[\w-/]+/g, "");
    textoLimpio = textoLimpio.replace(/\[\w+::[^\]]+\]/g, "");
    textoLimpio = textoLimpio.replace(/^\s*-\s*\[\/\]\s*/, "");
    const caracteresNoPermitidos = /[<>:"\/\\|?*\x00-\x1F]/g;
    textoLimpio = textoLimpio.replace(caracteresNoPermitidos, "_");
    textoLimpio = textoLimpio.replace(/\s+/g, " ");
    resolve(textoLimpio.trim());
  });
}
async function detenerTarea(tareaActiva, app2) {
  console.log(`Deteniendo la tarea: ${tareaActiva.titulo}`);
  const fileContents = await app2.vault.read(tareaActiva.file);
  const newContents = fileContents.replace("estado: \u{1F7E2}", "estado: \u{1F535}");
  await app2.vault.modify(tareaActiva.file, newContents);
}
async function createNoteFromTemplate(plugin, template, folder, filename, openNewNote = true) {
  if (!plugin || !plugin.app.plugins.enabledPlugins.has("templater-obsidian")) {
    console.error("El plugin Templater no est\xE1 habilitado.");
    return;
  }
  const templaterPlugin = plugin.app.plugins.plugins["templater-obsidian"];
  const tp = templaterPlugin.templater.current_functions_object;
  if (!tp) {
    console.error("No se pudo acceder al objeto de funciones actuales de Templater.");
    return;
  }
  debugger;
  let templateFile = tp.file.find_tfile(template);
  try {
    const newNote = await tp.file.create_new(templateFile, filename, openNewNote, folder);
    return newNote;
  } catch (error) {
    console.error("Error al crear la nota desde la plantilla:", error);
    return;
  }
}

// src/modules/moduloRegistroTiempo/ribbonMenu.ts
function registerRibbonMenu2(plugin) {
  plugin.ribbonButtonRT = plugin.addRibbonIcon("clock", "Registro de Tiempo", async (event) => {
    const menu = new import_obsidian11.Menu(plugin.app);
    if (await cumpleCondicion(plugin.app)) {
      menu.addItem((item) => item.setTitle("Ahora").onClick(() => {
        console.log("Ahora");
      }));
    }
    menu.addItem((item) => item.setTitle("Registrar Tiempo").onClick(() => {
      console.log("Registrar Tiempo");
    }));
    if (await cumpleCondicion(plugin.app)) {
      menu.addItem((item) => item.setTitle("Detener Registro").onClick(() => {
        console.log("Detener Registro");
      }));
    }
    menu.addItem((item) => item.setTitle("Tareas en progreso").onClick(() => {
      console.log("Tareas en progreso");
    }));
    menu.addItem((item) => item.setTitle("Registros de hoy").onClick(() => {
      console.log("Registros de hoy");
    }));
    menu.showAtPosition({ x: event.pageX, y: event.pageY });
  });
}
function deactivateRibbonMenu(plugin) {
  if (plugin.ribbonButtonRT) {
    plugin.ribbonButtonRT.remove();
    plugin.ribbonButtonRT = null;
  }
}

// src/modules/moduloRegistroTiempo/commands.ts
var import_obsidian13 = require("obsidian");

// src/modules/moduloRegistroTiempo/modals/modal_Ahora.ts
var import_obsidian12 = require("obsidian");
var modal_Ahora = class extends import_obsidian12.Modal {
  constructor(app2, file) {
    super(app2);
    this.app = app2;
    this.file = file;
  }
  async onOpen() {
    var _a, _b;
    const { contentEl } = this;
    const metadata = this.app.metadataCache.getFileCache(this.file);
    const aliases = ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.aliases) || "Actividad sin alias";
    const horaInicioStr = ((_b = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _b.horaInicio) ? window.moment(metadata.frontmatter.horaInicio, "YYYY-MM-DD dddd HH:mm").format("YYYY-MM-DDTHH:mm") : "";
    contentEl.createEl("h2", { text: `Registro de actividad.` });
    contentEl.createEl("p", { text: `Tarea: "${aliases}"` });
    if (horaInicioStr) {
      const horaInicio = window.moment(horaInicioStr, "YYYY-MM-DD dddd HH:mm");
      const ahora = window.moment();
      const diff = ahora.diff(horaInicio);
      const duracion = window.moment.duration(diff);
      const diffFormatted = `${duracion.hours()}h ${duracion.minutes()}m`;
      contentEl.createEl("p", { text: `Esta actividad lleva ${diffFormatted} en ejecuci\xF3n.` });
    } else {
      contentEl.createEl("p", { text: "No se pudo determinar el tiempo de inicio de la actividad." });
    }
    contentEl.createEl("p", { text: "Hora de inicio:" });
    this.horaInicioInput = contentEl.createEl("input", {
      type: "datetime-local",
      value: horaInicioStr
    });
    const saveButton = contentEl.createEl("button", { text: "Guardar cambios" });
    saveButton.onclick = () => this.guardarCambios();
  }
  async guardarCambios() {
    const nuevaHoraInicioLocal = this.horaInicioInput.value;
    if (!nuevaHoraInicioLocal) {
      new import_obsidian12.Notice("Por favor, seleccione una hora de inicio.");
      return;
    }
    const nuevaHoraInicio = window.moment(nuevaHoraInicioLocal).format("YYYY-MM-DD dddd HH:mm");
    try {
      const contenidoOriginal = await this.app.vault.read(this.file);
      const contenidoActualizado = contenidoOriginal.replace(/(horaInicio: ).*/, `$1${nuevaHoraInicio}`);
      await this.app.vault.modify(this.file, contenidoActualizado);
      this.close();
      new import_obsidian12.Notice("Hora de inicio actualizada correctamente.");
    } catch (error) {
      console.error("Error al guardar cambios en la nota:", error);
      new import_obsidian12.Notice("Error al guardar los cambios en la nota.");
    }
  }
};

// src/modules/moduloRegistroTiempo/commands.ts
function registerCommands(plugin) {
  const id1 = plugin.addCommand({
    id: "registros-de-tiempo-del-dia",
    name: "Registros de tiempo del d\xEDa",
    checkCallback: (checking) => {
      var _a;
      const activeLeaf = plugin.app.workspace.activeLeaf;
      if (activeLeaf) {
        const filePath = ((_a = activeLeaf.view.file) == null ? void 0 : _a.path) || "";
        if (filePath.startsWith("Estructura/Periodos/Diario/")) {
          if (!checking) {
            console.log("Registros de tiempo del d\xEDa");
          }
          return true;
        }
      }
      return false;
    }
  });
  plugin.registeredCommandIdsRT.push(id1.id);
  const id2 = plugin.addCommand({
    id: "ahora-RegistroTiempo",
    name: "Tarea activa en registro de tiempo",
    callback: async () => {
      const activa = await buscarRegistrosActivos(plugin.app);
      if (!activa) {
        new import_obsidian13.Notice("No hay notas activas");
      } else {
        let modal = new modal_Ahora(plugin.app, activa);
        modal.open();
      }
    }
  });
  plugin.registeredCommandIdsRT.push(id2.id);
  const id3 = plugin.addCommand({
    id: "crear-registro-tiempo",
    name: "Crear Registro de Tiempo",
    callback: async () => {
      const registro = await crearObjetoRegistro(plugin);
      if (!registro) {
        new import_obsidian13.Notice("No se pudo crear el objeto de registro.");
        return;
      }
      await verificarTareasActivas(registro, plugin.app);
      await definirTipoRegistro(registro, plugin.app);
    }
  });
  plugin.registeredCommandIdsRT.push(id3.id);
  const id4 = plugin.addCommand({
    id: "crear-archivo-template",
    name: "Crear archivo desde template",
    callback: async () => {
      const pluginId = "templater-obsidian";
      const isPluginInstalled = plugin.app.plugins.enabledPlugins.has(pluginId);
      let template = "Plantillas/Anotaciones/Plt - Anotaciones.md";
      let folderObj = plugin.app.vault.getAbstractFileByPath("Inbox");
      if (!(folderObj instanceof import_obsidian13.TFolder)) {
        new import_obsidian13.Notice("La carpeta especificada no existe o no es una carpeta.");
        return;
      }
      let fileName = "toDefine";
      let openNote = true;
      debugger;
      const archivo = await createNoteFromTemplate(plugin, template, folderObj, fileName, openNote);
      if (!archivo) {
        new import_obsidian13.Notice("No se pudo crear el archivo.");
        return;
      }
    }
  });
  plugin.registeredCommandIdsRT.push(id4.id);
}
function deactivateCommands(plugin) {
  if (!plugin.registeredCommandIdsRT)
    return;
  plugin.registeredCommandIdsRT.forEach((commandId) => {
    const command = plugin.app.commands.commands[commandId];
    if (command) {
      command.callback = () => new import_obsidian13.Notice("Este comando ha sido desactivado.");
    }
  });
}

// src/modules/moduloRegistroTiempo/index.ts
var ModuloRegistroTiempo = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  activate() {
    if (!this.plugin.ribbonButtonRT) {
      registerRibbonMenu2(this.plugin);
    }
    registerCommands(this.plugin);
  }
  deactivate() {
    deactivateRibbonMenu(this.plugin);
    deactivateCommands(this.plugin);
  }
};

// src/defaults/defaultSettings.ts
var DEFAULT_SETTINGS = {
  moduloRegistroTiempo: true,
  moduloAliasStatusBar: true,
  folder_ABlog: "Subsistemas/Articulos Blog/Articulos/",
  indice_ABlog: "Subsistemas/Articulos Blog/Indice Articulos Blog",
  folder_Desarrollos: "Subsistemas/Desarrollos/Codigos/",
  indice_Desarrollos: "Subsistemas/Desarrollos/Indice Desarrollo",
  folder_Estudio: "Subsistemas/Estudio/Temas/",
  indice_Estudio: "Subsistemas/Estudio/Indice Estudio",
  folder_ProyectosGTD: "Subsistemas/GTD/Proyectos GTD/Proyectos/",
  indice_ProyectosGTD: "Subsistemas/GTD/Proyectos GTD/Indice Proyectos GTD",
  folder_RSGTD: "Subsistemas/GTD/Revision Semanal/Revisiones/",
  indice_RSGTD: "Subsistemas/GTD/Revision Semanal/Indice Revision Semanal",
  folder_LecturaSesiones: "Subsistemas/Lectura/Sesiones de Lectura/Sesiones/",
  indice_LecturaSesiones: "Subsistemas/Lectura/Sesiones de Lectura/Indice Sesiones Lectura",
  folder_LecturaResumenes: "Subsistemas/Lectura/Libros/Resumenes/",
  indice_LecturaResumenes: "Subsistemas/Lectura/Libros/Indice Resumenes",
  folder_Mentorias: "Subsistemas/Mentorias/Sesiones Mentoria/",
  indice_Mentorias: "Subsistemas/Mentorias/Indice Mentorias",
  folder_Mercado: "Subsistemas/Mercado/Listas/",
  indice_Mercado: "Subsistemas/Mercado/Indice Mercado",
  folder_ModulosSistema: "Subsistemas/Modulos Sistema Gestion/Modulos/",
  indice_ModulosSistema: "Subsistemas/Modulos Sistema Gestion/Indice Modulos",
  folder_Pagos: "Subsistemas/Pagos/Notas/",
  indice_Pagos: "Subsistemas/Pagos/Indice Pagos",
  folder_Presentaciones: "Subsistemas/Presentaciones/Notas/",
  indice_Presentaciones: "Subsistemas/Presentaciones/Indice Presentaciones",
  folder_ProyectosQ: "Subsistemas/Proyectos de Q/Proyectos/",
  indice_ProyectosQ: "Subsistemas/Proyectos de Q/Indice Proyectos de Q",
  folder_Publicaciones: "Subsistemas/Publicaciones/Piezas/",
  indice_Publicaciones: "Subsistemas/Publicaciones/Indice Publicaciones",
  folder_Recetas: "Subsistemas/Recetas/Recetas/",
  indice_Recetas: "Subsistemas/Recetas/Indice Recetas",
  folder_RecursosRecurrentes: "Subsistemas/Recursos Recurrentes/Recursos/",
  indice_RecursosRecurrentes: "Subsistemas/Recursos Recurrentes/Indice Recursos Recurrentes",
  folder_RegistroTiempo: "Subsistemas/Registro Tiempo/Registros/",
  indice_RegistroTiempo: "Subsistemas/Registro Tiempo/Indice Registro Tiempo"
  // Añade aquí más valores predeterminados si es necesario
};

// src/main.ts
var ManagementPlugin = class extends import_obsidian15.Plugin {
  constructor() {
    super(...arguments);
    // Declara una propiedad `settings` para almacenar la configuración del plugin.
    this.statusBarExtension = null;
    this.moduloRegistroTiempo = null;
    this.registeredCommandIdsRT = [];
    this.ribbonButtonRT = null;
  }
  // Declara una propiedad para mantener una instancia de `StatusBarExtension`.
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new PluginMainSettingsTab(this));
    this.statusBarExtension = new StatusBarExtension(this);
    this.moduloRegistroTiempo = new ModuloRegistroTiempo(this);
    this.applyConfiguration();
    console.log("Iniciando carga de plugin de Gesti\xF3n Personal");
  }
  applyConfiguration() {
    var _a, _b, _c, _d;
    if (this.settings.moduloRegistroTiempo) {
      (_a = this.moduloRegistroTiempo) == null ? void 0 : _a.activate(this);
    } else {
      (_b = this.moduloRegistroTiempo) == null ? void 0 : _b.deactivate(this);
    }
    if (this.settings.moduloBusquedaAvanzada) {
      activateModuloBusquedaAvanzada(this);
    }
    if (this.settings.moduloAliasStatusBar) {
      (_c = this.statusBarExtension) == null ? void 0 : _c.activate();
    } else {
      (_d = this.statusBarExtension) == null ? void 0 : _d.deactivate();
    }
  }
  async onunload() {
    console.log("Descargando plugin Gesti\xF3n Personal");
    return Promise.resolve();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.applyConfiguration();
  }
};
//# sourceMappingURL=data:application/json;base64,
