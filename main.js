/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/modules/modales/seleccionModal.ts
var import_obsidian12, SeleccionModal;
var init_seleccionModal = __esm({
  "src/modules/modales/seleccionModal.ts"() {
    "use strict";
    import_obsidian12 = require("obsidian");
    SeleccionModal = class extends import_obsidian12.FuzzySuggestModal {
      // Flag para determinar si se ha hecho una selección.
      // Constructor de la clase.
      constructor(app2, titles, values, placeholder) {
        super(app2);
        // Objeto para mapear títulos a valores.
        this.seleccionHecha = false;
        this.titles = titles;
        this.values = values;
        this.valueMap = titles.reduce((acc, title, index) => {
          acc[title] = values[index];
          return acc;
        }, {});
        this.setPlaceholder(placeholder);
      }
      // Método para obtener los ítems (títulos) que se mostrarán en el modal.
      getItems() {
        return this.titles;
      }
      // Método para obtener el texto que se mostrará para cada ítem en el modal.
      getItemText(item) {
        return item;
      }
      // Método que se llama al cerrar el modal.
      onClose() {
        if (!this.seleccionHecha) {
          this.reject(new Error("Modal cerrado sin selecci\xF3n"));
        }
      }
      // Método para manejar la selección de un ítem.
      selectSuggestion(item, evt) {
        this.seleccionHecha = true;
        super.selectSuggestion(item, evt);
      }
      // Método que se llama al elegir un ítem, donde se resuelve la promesa con el valor asociado al ítem seleccionado.
      onChooseItem(item, evt) {
        const value = this.valueMap[item];
        this.resolve(value);
      }
      // Método para abrir el modal y esperar a que el usuario haga una selección, devolviendo una promesa con el valor seleccionado.
      openAndAwaitSelection() {
        return new Promise((resolve, reject) => {
          this.resolve = resolve;
          this.reject = reject;
          this.open();
        });
      }
    };
  }
});

// src/modules/modales/seleccionModalTareas.ts
var import_obsidian18, SeleccionModalTareas;
var init_seleccionModalTareas = __esm({
  "src/modules/modales/seleccionModalTareas.ts"() {
    "use strict";
    import_obsidian18 = require("obsidian");
    SeleccionModalTareas = class extends import_obsidian18.FuzzySuggestModal {
      /**
       * @param app Obsidian App
       * @param options Lista de cadenas (PUEDE INCLUIR HTML) que se mostrarán en el modal
       * @param values  Lista de valores asociados a cada opción
       * @param placeholder Texto en la barra de búsqueda
       */
      constructor(app2, options, values, placeholder) {
        super(app2);
        // Valores que se retornan al elegir
        this.seleccionHecha = false;
        this.options = options;
        this.values = values;
        this.setPlaceholder(placeholder);
      }
      /**
       * Retorna la lista de ítems (en este caso, cadenas) sobre las que se hará la búsqueda difusa.
       */
      getItems() {
        return this.options;
      }
      /**
       * Determina el texto que se usa internamente para la búsqueda difusa.
       * Aquí quitamos etiquetas HTML, para que la búsqueda sea sobre texto plano.
       */
      getItemText(item) {
        return item.replace(/<[^>]+>/g, "");
      }
      /**
       * Controla cómo se muestra cada opción en la lista de sugerencias.
       * Asignamos 'el.innerHTML' para que se renderice el HTML con estilos,
       * en lugar de mostrar las etiquetas en crudo.
       */
      renderSuggestion(result, el) {
        el.innerHTML = result.item;
      }
      /**
       * Maneja la selección de un ítem. Marcamos que se ha hecho selección y delegamos al método padre.
       */
      selectSuggestion(item, evt) {
        this.seleccionHecha = true;
        super.selectSuggestion(item, evt);
      }
      /**
       * Se llama cuando el usuario confirma la elección de un ítem de la lista.
       * Obtenemos el valor asociado y resolvemos la promesa.
       */
      onChooseItem(item, evt) {
        const index = this.options.indexOf(item);
        const value = this.values[index];
        this.resolveSelection(value);
      }
      /**
       * Si el modal se cierra sin que el usuario seleccione nada, rechazamos la promesa.
       */
      onClose() {
        if (!this.seleccionHecha) {
          this.rejectSelection(new Error("Modal cerrado sin selecci\xF3n"));
        }
      }
      /**
       * Método para abrir el modal y retornar una promesa que se resuelve cuando
       * el usuario elige un ítem o se rechaza si cierra sin elegir.
       */
      openAndAwaitSelection() {
        return new Promise((resolve, reject) => {
          this.resolveSelection = resolve;
          this.rejectSelection = reject;
          this.open();
        });
      }
    };
  }
});

// src/modules/modales/fuzzySelectOrCreate.ts
var import_obsidian19, fuzzySelectOrCreate;
var init_fuzzySelectOrCreate = __esm({
  "src/modules/modales/fuzzySelectOrCreate.ts"() {
    "use strict";
    import_obsidian19 = require("obsidian");
    init_seleccionModal();
    fuzzySelectOrCreate = class {
      constructor(app2, plugin) {
        this.pathCampos = "Estructura/Campos Sistema Gestion/Campos Registro Tiempo.md";
        this.app = app2;
        this.plugin = plugin;
      }
      createModal() {
        const modal = document.createElement("div");
        modal.setAttribute("id", "fuzzySearchModal");
        modal.style.position = "fixed";
        modal.style.top = "50%";
        modal.style.left = "50%";
        modal.style.transform = "translate(-50%, -50%)";
        modal.style.zIndex = "1000";
        modal.style.padding = "20px";
        modal.style.backgroundColor = "white";
        modal.style.border = "1px solid #ccc";
        modal.style.borderRadius = "5px";
        modal.style.boxShadow = "0 4px 6px rgba(0,0,0,.1)";
        modal.style.width = "300px";
        const closeButton = document.createElement("button");
        closeButton.textContent = "\xD7";
        closeButton.style.position = "absolute";
        closeButton.style.top = "5px";
        closeButton.style.right = "5px";
        closeButton.style.border = "none";
        closeButton.style.background = "none";
        closeButton.style.cursor = "pointer";
        closeButton.style.fontSize = "16px";
        closeButton.style.fontWeight = "bold";
        closeButton.style.padding = "0px 4px";
        closeButton.style.borderRadius = "10px";
        closeButton.style.outline = "none";
        closeButton.style.boxShadow = "none";
        closeButton.onclick = () => modal.remove();
        modal.appendChild(closeButton);
        return modal;
      }
      filterItems(query, items) {
        return items.filter(
          (item) => item.value.toLowerCase().includes(query.toLowerCase())
        );
      }
      async updateYAMLFields(tipo, selectedValue, selectedGroup) {
        try {
          debugger;
          const file = app.vault.getAbstractFileByPath(this.pathCampos);
          await app.fileManager.processFrontMatter(file, (frontmatter) => {
            debugger;
            let currentActs = frontmatter[tipo] || [];
            let newValueForActs = [...currentActs, [selectedGroup, selectedValue]];
            frontmatter[tipo] = newValueForActs;
          });
          console.log("Frontmatter actualizado con \xE9xito");
        } catch (err) {
          console.error("Error al actualizar el frontmatter", err);
        }
      }
      async showFuzzySearchModal(items, groups, tipo) {
        return new Promise((resolve, reject) => {
          let selectedValue = "";
          let selectedGroup = "";
          const modal = this.createModal();
          const title = document.createElement("h2");
          title.textContent = "Busca o crea tu actividad";
          title.style.textAlign = "center";
          modal.appendChild(title);
          const input = document.createElement("input");
          input.type = "text";
          input.placeholder = "Escribe tu actividad...";
          input.style.width = "80%";
          input.style.textAlign = "center";
          modal.style.display = "flex";
          modal.style.flexDirection = "column";
          modal.style.alignItems = "center";
          modal.appendChild(input);
          const spacer = document.createElement("div");
          spacer.style.height = "16px";
          modal.appendChild(spacer);
          const resultsDiv = document.createElement("div");
          modal.appendChild(resultsDiv);
          function updateResultsDisplay(filteredResults, menuOtro2) {
            resultsDiv.innerHTML = "";
            filteredResults.forEach((result) => {
              const div = document.createElement("div");
              div.textContent = result.value;
              div.style.cursor = "pointer";
              div.onmouseover = () => div.style.backgroundColor = "#f0f0f0";
              div.onmouseout = () => div.style.backgroundColor = "transparent";
              div.onclick = () => {
                selectedValue = result.activity;
                selectedGroup = result.group;
                modal.remove();
                resolve([selectedValue, selectedGroup]);
              };
              resultsDiv.appendChild(div);
            });
            if (filteredResults.length === 0 && input.value.trim() !== "") {
              const createNewDiv = document.createElement("div");
              createNewDiv.textContent = `Crear nueva actividad: "${input.value}"`;
              createNewDiv.style.cursor = "pointer";
              createNewDiv.style.color = "blue";
              createNewDiv.onclick = () => {
                selectedValue = input.value;
                debugger;
                if (tipo == void 0) {
                  tipo = "actsTemas";
                }
                selectGroupForNewActivity(menuOtro2, tipo);
              };
              resultsDiv.appendChild(createNewDiv);
            }
          }
          function selectGroupForNewActivity(menuOtro2, tipo2) {
            resultsDiv.innerHTML = "";
            input.remove();
            spacer.remove();
            title.remove();
            const texto = document.createElement("p");
            texto.textContent = `Vamos a crear la actividad: "${selectedValue}". Selecciona un grupo:`;
            ;
            texto.style.textAlign = "center";
            resultsDiv.appendChild(texto);
            groups.forEach((group) => {
              const groupDiv = document.createElement("div");
              groupDiv.textContent = group;
              groupDiv.style.cursor = "pointer";
              groupDiv.onmouseover = () => groupDiv.style.backgroundColor = "#f0f0f0";
              groupDiv.onmouseout = () => groupDiv.style.backgroundColor = "transparent";
              groupDiv.onclick = async () => {
                selectedGroup = group;
                modal.remove();
                let recurrente = await menuOtro2.esRecurrente(selectedValue);
                if (recurrente) {
                  await menuOtro2.updateYAMLFields(tipo2, selectedValue, selectedGroup);
                }
                resolve([selectedValue, selectedGroup]);
              };
              resultsDiv.appendChild(groupDiv);
            });
          }
          function displaySelectedValue(activity, group) {
            resultsDiv.innerHTML = `Seleccionado: ${activity} / ${group}`;
          }
          input.oninput = () => {
            const filteredItems = this.filterItems(input.value, items);
            updateResultsDisplay(filteredItems, this);
          };
          document.body.appendChild(modal);
        });
      }
      async esRecurrente(tarea) {
        const opciones = ["Si", "No"];
        const valores = [true, false];
        const placeholder = `${tarea} es tarea recurrente?`;
        const modal = new SeleccionModal(app, opciones, valores, placeholder);
        try {
          return await modal.openAndAwaitSelection();
        } catch (error) {
          console.error("Error o modal cerrado sin selecci\xF3n:", error);
          return false;
        }
      }
    };
  }
});

// node_modules/luxon/src/errors.js
var LuxonError, InvalidDateTimeError, InvalidIntervalError, InvalidDurationError, ConflictingSpecificationError, InvalidUnitError, InvalidArgumentError, ZoneIsAbstractError;
var init_errors = __esm({
  "node_modules/luxon/src/errors.js"() {
    LuxonError = class extends Error {
    };
    InvalidDateTimeError = class extends LuxonError {
      constructor(reason) {
        super(`Invalid DateTime: ${reason.toMessage()}`);
      }
    };
    InvalidIntervalError = class extends LuxonError {
      constructor(reason) {
        super(`Invalid Interval: ${reason.toMessage()}`);
      }
    };
    InvalidDurationError = class extends LuxonError {
      constructor(reason) {
        super(`Invalid Duration: ${reason.toMessage()}`);
      }
    };
    ConflictingSpecificationError = class extends LuxonError {
    };
    InvalidUnitError = class extends LuxonError {
      constructor(unit) {
        super(`Invalid unit ${unit}`);
      }
    };
    InvalidArgumentError = class extends LuxonError {
    };
    ZoneIsAbstractError = class extends LuxonError {
      constructor() {
        super("Zone is an abstract class");
      }
    };
  }
});

// node_modules/luxon/src/impl/formats.js
var n, s, l, DATE_SHORT, DATE_MED, DATE_MED_WITH_WEEKDAY, DATE_FULL, DATE_HUGE, TIME_SIMPLE, TIME_WITH_SECONDS, TIME_WITH_SHORT_OFFSET, TIME_WITH_LONG_OFFSET, TIME_24_SIMPLE, TIME_24_WITH_SECONDS, TIME_24_WITH_SHORT_OFFSET, TIME_24_WITH_LONG_OFFSET, DATETIME_SHORT, DATETIME_SHORT_WITH_SECONDS, DATETIME_MED, DATETIME_MED_WITH_SECONDS, DATETIME_MED_WITH_WEEKDAY, DATETIME_FULL, DATETIME_FULL_WITH_SECONDS, DATETIME_HUGE, DATETIME_HUGE_WITH_SECONDS;
var init_formats = __esm({
  "node_modules/luxon/src/impl/formats.js"() {
    n = "numeric";
    s = "short";
    l = "long";
    DATE_SHORT = {
      year: n,
      month: n,
      day: n
    };
    DATE_MED = {
      year: n,
      month: s,
      day: n
    };
    DATE_MED_WITH_WEEKDAY = {
      year: n,
      month: s,
      day: n,
      weekday: s
    };
    DATE_FULL = {
      year: n,
      month: l,
      day: n
    };
    DATE_HUGE = {
      year: n,
      month: l,
      day: n,
      weekday: l
    };
    TIME_SIMPLE = {
      hour: n,
      minute: n
    };
    TIME_WITH_SECONDS = {
      hour: n,
      minute: n,
      second: n
    };
    TIME_WITH_SHORT_OFFSET = {
      hour: n,
      minute: n,
      second: n,
      timeZoneName: s
    };
    TIME_WITH_LONG_OFFSET = {
      hour: n,
      minute: n,
      second: n,
      timeZoneName: l
    };
    TIME_24_SIMPLE = {
      hour: n,
      minute: n,
      hourCycle: "h23"
    };
    TIME_24_WITH_SECONDS = {
      hour: n,
      minute: n,
      second: n,
      hourCycle: "h23"
    };
    TIME_24_WITH_SHORT_OFFSET = {
      hour: n,
      minute: n,
      second: n,
      hourCycle: "h23",
      timeZoneName: s
    };
    TIME_24_WITH_LONG_OFFSET = {
      hour: n,
      minute: n,
      second: n,
      hourCycle: "h23",
      timeZoneName: l
    };
    DATETIME_SHORT = {
      year: n,
      month: n,
      day: n,
      hour: n,
      minute: n
    };
    DATETIME_SHORT_WITH_SECONDS = {
      year: n,
      month: n,
      day: n,
      hour: n,
      minute: n,
      second: n
    };
    DATETIME_MED = {
      year: n,
      month: s,
      day: n,
      hour: n,
      minute: n
    };
    DATETIME_MED_WITH_SECONDS = {
      year: n,
      month: s,
      day: n,
      hour: n,
      minute: n,
      second: n
    };
    DATETIME_MED_WITH_WEEKDAY = {
      year: n,
      month: s,
      day: n,
      weekday: s,
      hour: n,
      minute: n
    };
    DATETIME_FULL = {
      year: n,
      month: l,
      day: n,
      hour: n,
      minute: n,
      timeZoneName: s
    };
    DATETIME_FULL_WITH_SECONDS = {
      year: n,
      month: l,
      day: n,
      hour: n,
      minute: n,
      second: n,
      timeZoneName: s
    };
    DATETIME_HUGE = {
      year: n,
      month: l,
      day: n,
      weekday: l,
      hour: n,
      minute: n,
      timeZoneName: l
    };
    DATETIME_HUGE_WITH_SECONDS = {
      year: n,
      month: l,
      day: n,
      weekday: l,
      hour: n,
      minute: n,
      second: n,
      timeZoneName: l
    };
  }
});

// node_modules/luxon/src/zone.js
var Zone;
var init_zone = __esm({
  "node_modules/luxon/src/zone.js"() {
    init_errors();
    Zone = class {
      /**
       * The type of zone
       * @abstract
       * @type {string}
       */
      get type() {
        throw new ZoneIsAbstractError();
      }
      /**
       * The name of this zone.
       * @abstract
       * @type {string}
       */
      get name() {
        throw new ZoneIsAbstractError();
      }
      get ianaName() {
        return this.name;
      }
      /**
       * Returns whether the offset is known to be fixed for the whole year.
       * @abstract
       * @type {boolean}
       */
      get isUniversal() {
        throw new ZoneIsAbstractError();
      }
      /**
       * Returns the offset's common name (such as EST) at the specified timestamp
       * @abstract
       * @param {number} ts - Epoch milliseconds for which to get the name
       * @param {Object} opts - Options to affect the format
       * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
       * @param {string} opts.locale - What locale to return the offset name in.
       * @return {string}
       */
      offsetName(ts, opts) {
        throw new ZoneIsAbstractError();
      }
      /**
       * Returns the offset's value as a string
       * @abstract
       * @param {number} ts - Epoch milliseconds for which to get the offset
       * @param {string} format - What style of offset to return.
       *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
       * @return {string}
       */
      formatOffset(ts, format) {
        throw new ZoneIsAbstractError();
      }
      /**
       * Return the offset in minutes for this zone at the specified timestamp.
       * @abstract
       * @param {number} ts - Epoch milliseconds for which to compute the offset
       * @return {number}
       */
      offset(ts) {
        throw new ZoneIsAbstractError();
      }
      /**
       * Return whether this Zone is equal to another zone
       * @abstract
       * @param {Zone} otherZone - the zone to compare
       * @return {boolean}
       */
      equals(otherZone) {
        throw new ZoneIsAbstractError();
      }
      /**
       * Return whether this Zone is valid.
       * @abstract
       * @type {boolean}
       */
      get isValid() {
        throw new ZoneIsAbstractError();
      }
    };
  }
});

// node_modules/luxon/src/zones/systemZone.js
var singleton, SystemZone;
var init_systemZone = __esm({
  "node_modules/luxon/src/zones/systemZone.js"() {
    init_util();
    init_zone();
    singleton = null;
    SystemZone = class _SystemZone extends Zone {
      /**
       * Get a singleton instance of the local zone
       * @return {SystemZone}
       */
      static get instance() {
        if (singleton === null) {
          singleton = new _SystemZone();
        }
        return singleton;
      }
      /** @override **/
      get type() {
        return "system";
      }
      /** @override **/
      get name() {
        return new Intl.DateTimeFormat().resolvedOptions().timeZone;
      }
      /** @override **/
      get isUniversal() {
        return false;
      }
      /** @override **/
      offsetName(ts, { format, locale }) {
        return parseZoneInfo(ts, format, locale);
      }
      /** @override **/
      formatOffset(ts, format) {
        return formatOffset(this.offset(ts), format);
      }
      /** @override **/
      offset(ts) {
        return -new Date(ts).getTimezoneOffset();
      }
      /** @override **/
      equals(otherZone) {
        return otherZone.type === "system";
      }
      /** @override **/
      get isValid() {
        return true;
      }
    };
  }
});

// node_modules/luxon/src/zones/IANAZone.js
function makeDTF(zone) {
  if (!dtfCache[zone]) {
    dtfCache[zone] = new Intl.DateTimeFormat("en-US", {
      hour12: false,
      timeZone: zone,
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      era: "short"
    });
  }
  return dtfCache[zone];
}
function hackyOffset(dtf, date) {
  const formatted = dtf.format(date).replace(/\u200E/g, ""), parsed = /(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(formatted), [, fMonth, fDay, fYear, fadOrBc, fHour, fMinute, fSecond] = parsed;
  return [fYear, fMonth, fDay, fadOrBc, fHour, fMinute, fSecond];
}
function partsOffset(dtf, date) {
  const formatted = dtf.formatToParts(date);
  const filled = [];
  for (let i = 0; i < formatted.length; i++) {
    const { type: type2, value } = formatted[i];
    const pos = typeToPos[type2];
    if (type2 === "era") {
      filled[pos] = value;
    } else if (!isUndefined(pos)) {
      filled[pos] = parseInt(value, 10);
    }
  }
  return filled;
}
var dtfCache, typeToPos, ianaZoneCache, IANAZone;
var init_IANAZone = __esm({
  "node_modules/luxon/src/zones/IANAZone.js"() {
    init_util();
    init_zone();
    dtfCache = {};
    typeToPos = {
      year: 0,
      month: 1,
      day: 2,
      era: 3,
      hour: 4,
      minute: 5,
      second: 6
    };
    ianaZoneCache = {};
    IANAZone = class _IANAZone extends Zone {
      /**
       * @param {string} name - Zone name
       * @return {IANAZone}
       */
      static create(name) {
        if (!ianaZoneCache[name]) {
          ianaZoneCache[name] = new _IANAZone(name);
        }
        return ianaZoneCache[name];
      }
      /**
       * Reset local caches. Should only be necessary in testing scenarios.
       * @return {void}
       */
      static resetCache() {
        ianaZoneCache = {};
        dtfCache = {};
      }
      /**
       * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
       * @param {string} s - The string to check validity on
       * @example IANAZone.isValidSpecifier("America/New_York") //=> true
       * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
       * @deprecated This method returns false for some valid IANA names. Use isValidZone instead.
       * @return {boolean}
       */
      static isValidSpecifier(s2) {
        return this.isValidZone(s2);
      }
      /**
       * Returns whether the provided string identifies a real zone
       * @param {string} zone - The string to check
       * @example IANAZone.isValidZone("America/New_York") //=> true
       * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
       * @example IANAZone.isValidZone("Sport~~blorp") //=> false
       * @return {boolean}
       */
      static isValidZone(zone) {
        if (!zone) {
          return false;
        }
        try {
          new Intl.DateTimeFormat("en-US", { timeZone: zone }).format();
          return true;
        } catch (e) {
          return false;
        }
      }
      constructor(name) {
        super();
        this.zoneName = name;
        this.valid = _IANAZone.isValidZone(name);
      }
      /** @override **/
      get type() {
        return "iana";
      }
      /** @override **/
      get name() {
        return this.zoneName;
      }
      /** @override **/
      get isUniversal() {
        return false;
      }
      /** @override **/
      offsetName(ts, { format, locale }) {
        return parseZoneInfo(ts, format, locale, this.name);
      }
      /** @override **/
      formatOffset(ts, format) {
        return formatOffset(this.offset(ts), format);
      }
      /** @override **/
      offset(ts) {
        const date = new Date(ts);
        if (isNaN(date))
          return NaN;
        const dtf = makeDTF(this.name);
        let [year, month, day, adOrBc, hour, minute, second] = dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date);
        if (adOrBc === "BC") {
          year = -Math.abs(year) + 1;
        }
        const adjustedHour = hour === 24 ? 0 : hour;
        const asUTC = objToLocalTS({
          year,
          month,
          day,
          hour: adjustedHour,
          minute,
          second,
          millisecond: 0
        });
        let asTS = +date;
        const over = asTS % 1e3;
        asTS -= over >= 0 ? over : 1e3 + over;
        return (asUTC - asTS) / (60 * 1e3);
      }
      /** @override **/
      equals(otherZone) {
        return otherZone.type === "iana" && otherZone.name === this.name;
      }
      /** @override **/
      get isValid() {
        return this.valid;
      }
    };
  }
});

// node_modules/luxon/src/impl/locale.js
function getCachedLF(locString, opts = {}) {
  const key = JSON.stringify([locString, opts]);
  let dtf = intlLFCache[key];
  if (!dtf) {
    dtf = new Intl.ListFormat(locString, opts);
    intlLFCache[key] = dtf;
  }
  return dtf;
}
function getCachedDTF(locString, opts = {}) {
  const key = JSON.stringify([locString, opts]);
  let dtf = intlDTCache[key];
  if (!dtf) {
    dtf = new Intl.DateTimeFormat(locString, opts);
    intlDTCache[key] = dtf;
  }
  return dtf;
}
function getCachedINF(locString, opts = {}) {
  const key = JSON.stringify([locString, opts]);
  let inf = intlNumCache[key];
  if (!inf) {
    inf = new Intl.NumberFormat(locString, opts);
    intlNumCache[key] = inf;
  }
  return inf;
}
function getCachedRTF(locString, opts = {}) {
  const { base, ...cacheKeyOpts } = opts;
  const key = JSON.stringify([locString, cacheKeyOpts]);
  let inf = intlRelCache[key];
  if (!inf) {
    inf = new Intl.RelativeTimeFormat(locString, opts);
    intlRelCache[key] = inf;
  }
  return inf;
}
function systemLocale() {
  if (sysLocaleCache) {
    return sysLocaleCache;
  } else {
    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;
    return sysLocaleCache;
  }
}
function getCachedWeekInfo(locString) {
  let data = weekInfoCache[locString];
  if (!data) {
    const locale = new Intl.Locale(locString);
    data = "getWeekInfo" in locale ? locale.getWeekInfo() : locale.weekInfo;
    weekInfoCache[locString] = data;
  }
  return data;
}
function parseLocaleString(localeStr) {
  const xIndex = localeStr.indexOf("-x-");
  if (xIndex !== -1) {
    localeStr = localeStr.substring(0, xIndex);
  }
  const uIndex = localeStr.indexOf("-u-");
  if (uIndex === -1) {
    return [localeStr];
  } else {
    let options;
    let selectedStr;
    try {
      options = getCachedDTF(localeStr).resolvedOptions();
      selectedStr = localeStr;
    } catch (e) {
      const smaller = localeStr.substring(0, uIndex);
      options = getCachedDTF(smaller).resolvedOptions();
      selectedStr = smaller;
    }
    const { numberingSystem, calendar } = options;
    return [selectedStr, numberingSystem, calendar];
  }
}
function intlConfigString(localeStr, numberingSystem, outputCalendar) {
  if (outputCalendar || numberingSystem) {
    if (!localeStr.includes("-u-")) {
      localeStr += "-u";
    }
    if (outputCalendar) {
      localeStr += `-ca-${outputCalendar}`;
    }
    if (numberingSystem) {
      localeStr += `-nu-${numberingSystem}`;
    }
    return localeStr;
  } else {
    return localeStr;
  }
}
function mapMonths(f) {
  const ms = [];
  for (let i = 1; i <= 12; i++) {
    const dt = DateTime.utc(2009, i, 1);
    ms.push(f(dt));
  }
  return ms;
}
function mapWeekdays(f) {
  const ms = [];
  for (let i = 1; i <= 7; i++) {
    const dt = DateTime.utc(2016, 11, 13 + i);
    ms.push(f(dt));
  }
  return ms;
}
function listStuff(loc, length, englishFn, intlFn) {
  const mode = loc.listingMode();
  if (mode === "error") {
    return null;
  } else if (mode === "en") {
    return englishFn(length);
  } else {
    return intlFn(length);
  }
}
function supportsFastNumbers(loc) {
  if (loc.numberingSystem && loc.numberingSystem !== "latn") {
    return false;
  } else {
    return loc.numberingSystem === "latn" || !loc.locale || loc.locale.startsWith("en") || new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn";
  }
}
var intlLFCache, intlDTCache, intlNumCache, intlRelCache, sysLocaleCache, weekInfoCache, PolyNumberFormatter, PolyDateFormatter, PolyRelFormatter, fallbackWeekSettings, Locale;
var init_locale = __esm({
  "node_modules/luxon/src/impl/locale.js"() {
    init_util();
    init_english();
    init_settings();
    init_datetime();
    init_IANAZone();
    intlLFCache = {};
    intlDTCache = {};
    intlNumCache = {};
    intlRelCache = {};
    sysLocaleCache = null;
    weekInfoCache = {};
    PolyNumberFormatter = class {
      constructor(intl, forceSimple, opts) {
        this.padTo = opts.padTo || 0;
        this.floor = opts.floor || false;
        const { padTo, floor, ...otherOpts } = opts;
        if (!forceSimple || Object.keys(otherOpts).length > 0) {
          const intlOpts = { useGrouping: false, ...opts };
          if (opts.padTo > 0)
            intlOpts.minimumIntegerDigits = opts.padTo;
          this.inf = getCachedINF(intl, intlOpts);
        }
      }
      format(i) {
        if (this.inf) {
          const fixed = this.floor ? Math.floor(i) : i;
          return this.inf.format(fixed);
        } else {
          const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);
          return padStart(fixed, this.padTo);
        }
      }
    };
    PolyDateFormatter = class {
      constructor(dt, intl, opts) {
        this.opts = opts;
        this.originalZone = void 0;
        let z = void 0;
        if (this.opts.timeZone) {
          this.dt = dt;
        } else if (dt.zone.type === "fixed") {
          const gmtOffset = -1 * (dt.offset / 60);
          const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;
          if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {
            z = offsetZ;
            this.dt = dt;
          } else {
            z = "UTC";
            this.dt = dt.offset === 0 ? dt : dt.setZone("UTC").plus({ minutes: dt.offset });
            this.originalZone = dt.zone;
          }
        } else if (dt.zone.type === "system") {
          this.dt = dt;
        } else if (dt.zone.type === "iana") {
          this.dt = dt;
          z = dt.zone.name;
        } else {
          z = "UTC";
          this.dt = dt.setZone("UTC").plus({ minutes: dt.offset });
          this.originalZone = dt.zone;
        }
        const intlOpts = { ...this.opts };
        intlOpts.timeZone = intlOpts.timeZone || z;
        this.dtf = getCachedDTF(intl, intlOpts);
      }
      format() {
        if (this.originalZone) {
          return this.formatToParts().map(({ value }) => value).join("");
        }
        return this.dtf.format(this.dt.toJSDate());
      }
      formatToParts() {
        const parts = this.dtf.formatToParts(this.dt.toJSDate());
        if (this.originalZone) {
          return parts.map((part) => {
            if (part.type === "timeZoneName") {
              const offsetName = this.originalZone.offsetName(this.dt.ts, {
                locale: this.dt.locale,
                format: this.opts.timeZoneName
              });
              return {
                ...part,
                value: offsetName
              };
            } else {
              return part;
            }
          });
        }
        return parts;
      }
      resolvedOptions() {
        return this.dtf.resolvedOptions();
      }
    };
    PolyRelFormatter = class {
      constructor(intl, isEnglish, opts) {
        this.opts = { style: "long", ...opts };
        if (!isEnglish && hasRelative()) {
          this.rtf = getCachedRTF(intl, opts);
        }
      }
      format(count, unit) {
        if (this.rtf) {
          return this.rtf.format(count, unit);
        } else {
          return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
        }
      }
      formatToParts(count, unit) {
        if (this.rtf) {
          return this.rtf.formatToParts(count, unit);
        } else {
          return [];
        }
      }
    };
    fallbackWeekSettings = {
      firstDay: 1,
      minimalDays: 4,
      weekend: [6, 7]
    };
    Locale = class _Locale {
      static fromOpts(opts) {
        return _Locale.create(
          opts.locale,
          opts.numberingSystem,
          opts.outputCalendar,
          opts.weekSettings,
          opts.defaultToEN
        );
      }
      static create(locale, numberingSystem, outputCalendar, weekSettings, defaultToEN = false) {
        const specifiedLocale = locale || Settings.defaultLocale;
        const localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale());
        const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;
        const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
        const weekSettingsR = validateWeekSettings(weekSettings) || Settings.defaultWeekSettings;
        return new _Locale(localeR, numberingSystemR, outputCalendarR, weekSettingsR, specifiedLocale);
      }
      static resetCache() {
        sysLocaleCache = null;
        intlDTCache = {};
        intlNumCache = {};
        intlRelCache = {};
      }
      static fromObject({ locale, numberingSystem, outputCalendar, weekSettings } = {}) {
        return _Locale.create(locale, numberingSystem, outputCalendar, weekSettings);
      }
      constructor(locale, numbering, outputCalendar, weekSettings, specifiedLocale) {
        const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);
        this.locale = parsedLocale;
        this.numberingSystem = numbering || parsedNumberingSystem || null;
        this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
        this.weekSettings = weekSettings;
        this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);
        this.weekdaysCache = { format: {}, standalone: {} };
        this.monthsCache = { format: {}, standalone: {} };
        this.meridiemCache = null;
        this.eraCache = {};
        this.specifiedLocale = specifiedLocale;
        this.fastNumbersCached = null;
      }
      get fastNumbers() {
        if (this.fastNumbersCached == null) {
          this.fastNumbersCached = supportsFastNumbers(this);
        }
        return this.fastNumbersCached;
      }
      listingMode() {
        const isActuallyEn = this.isEnglish();
        const hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === "latn") && (this.outputCalendar === null || this.outputCalendar === "gregory");
        return isActuallyEn && hasNoWeirdness ? "en" : "intl";
      }
      clone(alts) {
        if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
          return this;
        } else {
          return _Locale.create(
            alts.locale || this.specifiedLocale,
            alts.numberingSystem || this.numberingSystem,
            alts.outputCalendar || this.outputCalendar,
            validateWeekSettings(alts.weekSettings) || this.weekSettings,
            alts.defaultToEN || false
          );
        }
      }
      redefaultToEN(alts = {}) {
        return this.clone({ ...alts, defaultToEN: true });
      }
      redefaultToSystem(alts = {}) {
        return this.clone({ ...alts, defaultToEN: false });
      }
      months(length, format = false) {
        return listStuff(this, length, months, () => {
          const intl = format ? { month: length, day: "numeric" } : { month: length }, formatStr = format ? "format" : "standalone";
          if (!this.monthsCache[formatStr][length]) {
            this.monthsCache[formatStr][length] = mapMonths((dt) => this.extract(dt, intl, "month"));
          }
          return this.monthsCache[formatStr][length];
        });
      }
      weekdays(length, format = false) {
        return listStuff(this, length, weekdays, () => {
          const intl = format ? { weekday: length, year: "numeric", month: "long", day: "numeric" } : { weekday: length }, formatStr = format ? "format" : "standalone";
          if (!this.weekdaysCache[formatStr][length]) {
            this.weekdaysCache[formatStr][length] = mapWeekdays(
              (dt) => this.extract(dt, intl, "weekday")
            );
          }
          return this.weekdaysCache[formatStr][length];
        });
      }
      meridiems() {
        return listStuff(
          this,
          void 0,
          () => meridiems,
          () => {
            if (!this.meridiemCache) {
              const intl = { hour: "numeric", hourCycle: "h12" };
              this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(
                (dt) => this.extract(dt, intl, "dayperiod")
              );
            }
            return this.meridiemCache;
          }
        );
      }
      eras(length) {
        return listStuff(this, length, eras, () => {
          const intl = { era: length };
          if (!this.eraCache[length]) {
            this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(
              (dt) => this.extract(dt, intl, "era")
            );
          }
          return this.eraCache[length];
        });
      }
      extract(dt, intlOpts, field) {
        const df = this.dtFormatter(dt, intlOpts), results = df.formatToParts(), matching = results.find((m) => m.type.toLowerCase() === field);
        return matching ? matching.value : null;
      }
      numberFormatter(opts = {}) {
        return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
      }
      dtFormatter(dt, intlOpts = {}) {
        return new PolyDateFormatter(dt, this.intl, intlOpts);
      }
      relFormatter(opts = {}) {
        return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
      }
      listFormatter(opts = {}) {
        return getCachedLF(this.intl, opts);
      }
      isEnglish() {
        return this.locale === "en" || this.locale.toLowerCase() === "en-us" || new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us");
      }
      getWeekSettings() {
        if (this.weekSettings) {
          return this.weekSettings;
        } else if (!hasLocaleWeekInfo()) {
          return fallbackWeekSettings;
        } else {
          return getCachedWeekInfo(this.locale);
        }
      }
      getStartOfWeek() {
        return this.getWeekSettings().firstDay;
      }
      getMinDaysInFirstWeek() {
        return this.getWeekSettings().minimalDays;
      }
      getWeekendDays() {
        return this.getWeekSettings().weekend;
      }
      equals(other) {
        return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;
      }
    };
  }
});

// node_modules/luxon/src/zones/fixedOffsetZone.js
var singleton2, FixedOffsetZone;
var init_fixedOffsetZone = __esm({
  "node_modules/luxon/src/zones/fixedOffsetZone.js"() {
    init_util();
    init_zone();
    singleton2 = null;
    FixedOffsetZone = class _FixedOffsetZone extends Zone {
      /**
       * Get a singleton instance of UTC
       * @return {FixedOffsetZone}
       */
      static get utcInstance() {
        if (singleton2 === null) {
          singleton2 = new _FixedOffsetZone(0);
        }
        return singleton2;
      }
      /**
       * Get an instance with a specified offset
       * @param {number} offset - The offset in minutes
       * @return {FixedOffsetZone}
       */
      static instance(offset2) {
        return offset2 === 0 ? _FixedOffsetZone.utcInstance : new _FixedOffsetZone(offset2);
      }
      /**
       * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
       * @param {string} s - The offset string to parse
       * @example FixedOffsetZone.parseSpecifier("UTC+6")
       * @example FixedOffsetZone.parseSpecifier("UTC+06")
       * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
       * @return {FixedOffsetZone}
       */
      static parseSpecifier(s2) {
        if (s2) {
          const r = s2.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
          if (r) {
            return new _FixedOffsetZone(signedOffset(r[1], r[2]));
          }
        }
        return null;
      }
      constructor(offset2) {
        super();
        this.fixed = offset2;
      }
      /** @override **/
      get type() {
        return "fixed";
      }
      /** @override **/
      get name() {
        return this.fixed === 0 ? "UTC" : `UTC${formatOffset(this.fixed, "narrow")}`;
      }
      get ianaName() {
        if (this.fixed === 0) {
          return "Etc/UTC";
        } else {
          return `Etc/GMT${formatOffset(-this.fixed, "narrow")}`;
        }
      }
      /** @override **/
      offsetName() {
        return this.name;
      }
      /** @override **/
      formatOffset(ts, format) {
        return formatOffset(this.fixed, format);
      }
      /** @override **/
      get isUniversal() {
        return true;
      }
      /** @override **/
      offset() {
        return this.fixed;
      }
      /** @override **/
      equals(otherZone) {
        return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
      }
      /** @override **/
      get isValid() {
        return true;
      }
    };
  }
});

// node_modules/luxon/src/zones/invalidZone.js
var InvalidZone;
var init_invalidZone = __esm({
  "node_modules/luxon/src/zones/invalidZone.js"() {
    init_zone();
    InvalidZone = class extends Zone {
      constructor(zoneName) {
        super();
        this.zoneName = zoneName;
      }
      /** @override **/
      get type() {
        return "invalid";
      }
      /** @override **/
      get name() {
        return this.zoneName;
      }
      /** @override **/
      get isUniversal() {
        return false;
      }
      /** @override **/
      offsetName() {
        return null;
      }
      /** @override **/
      formatOffset() {
        return "";
      }
      /** @override **/
      offset() {
        return NaN;
      }
      /** @override **/
      equals() {
        return false;
      }
      /** @override **/
      get isValid() {
        return false;
      }
    };
  }
});

// node_modules/luxon/src/impl/zoneUtil.js
function normalizeZone(input, defaultZone2) {
  let offset2;
  if (isUndefined(input) || input === null) {
    return defaultZone2;
  } else if (input instanceof Zone) {
    return input;
  } else if (isString(input)) {
    const lowered = input.toLowerCase();
    if (lowered === "default")
      return defaultZone2;
    else if (lowered === "local" || lowered === "system")
      return SystemZone.instance;
    else if (lowered === "utc" || lowered === "gmt")
      return FixedOffsetZone.utcInstance;
    else
      return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);
  } else if (isNumber(input)) {
    return FixedOffsetZone.instance(input);
  } else if (typeof input === "object" && "offset" in input && typeof input.offset === "function") {
    return input;
  } else {
    return new InvalidZone(input);
  }
}
var init_zoneUtil = __esm({
  "node_modules/luxon/src/impl/zoneUtil.js"() {
    init_zone();
    init_IANAZone();
    init_fixedOffsetZone();
    init_invalidZone();
    init_util();
    init_systemZone();
  }
});

// node_modules/luxon/src/settings.js
var now, defaultZone, defaultLocale, defaultNumberingSystem, defaultOutputCalendar, twoDigitCutoffYear, throwOnInvalid, defaultWeekSettings, Settings;
var init_settings = __esm({
  "node_modules/luxon/src/settings.js"() {
    init_systemZone();
    init_IANAZone();
    init_locale();
    init_zoneUtil();
    init_util();
    now = () => Date.now();
    defaultZone = "system";
    defaultLocale = null;
    defaultNumberingSystem = null;
    defaultOutputCalendar = null;
    twoDigitCutoffYear = 60;
    defaultWeekSettings = null;
    Settings = class {
      /**
       * Get the callback for returning the current timestamp.
       * @type {function}
       */
      static get now() {
        return now;
      }
      /**
       * Set the callback for returning the current timestamp.
       * The function should return a number, which will be interpreted as an Epoch millisecond count
       * @type {function}
       * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
       * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
       */
      static set now(n2) {
        now = n2;
      }
      /**
       * Set the default time zone to create DateTimes in. Does not affect existing instances.
       * Use the value "system" to reset this value to the system's time zone.
       * @type {string}
       */
      static set defaultZone(zone) {
        defaultZone = zone;
      }
      /**
       * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.
       * The default value is the system's time zone (the one set on the machine that runs this code).
       * @type {Zone}
       */
      static get defaultZone() {
        return normalizeZone(defaultZone, SystemZone.instance);
      }
      /**
       * Get the default locale to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static get defaultLocale() {
        return defaultLocale;
      }
      /**
       * Set the default locale to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static set defaultLocale(locale) {
        defaultLocale = locale;
      }
      /**
       * Get the default numbering system to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static get defaultNumberingSystem() {
        return defaultNumberingSystem;
      }
      /**
       * Set the default numbering system to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static set defaultNumberingSystem(numberingSystem) {
        defaultNumberingSystem = numberingSystem;
      }
      /**
       * Get the default output calendar to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static get defaultOutputCalendar() {
        return defaultOutputCalendar;
      }
      /**
       * Set the default output calendar to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static set defaultOutputCalendar(outputCalendar) {
        defaultOutputCalendar = outputCalendar;
      }
      /**
       * @typedef {Object} WeekSettings
       * @property {number} firstDay
       * @property {number} minimalDays
       * @property {number[]} weekend
       */
      /**
       * @return {WeekSettings|null}
       */
      static get defaultWeekSettings() {
        return defaultWeekSettings;
      }
      /**
       * Allows overriding the default locale week settings, i.e. the start of the week, the weekend and
       * how many days are required in the first week of a year.
       * Does not affect existing instances.
       *
       * @param {WeekSettings|null} weekSettings
       */
      static set defaultWeekSettings(weekSettings) {
        defaultWeekSettings = validateWeekSettings(weekSettings);
      }
      /**
       * Get the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.
       * @type {number}
       */
      static get twoDigitCutoffYear() {
        return twoDigitCutoffYear;
      }
      /**
       * Set the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.
       * @type {number}
       * @example Settings.twoDigitCutoffYear = 0 // cut-off year is 0, so all 'yy' are interpreted as current century
       * @example Settings.twoDigitCutoffYear = 50 // '49' -> 1949; '50' -> 2050
       * @example Settings.twoDigitCutoffYear = 1950 // interpreted as 50
       * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpreted as 50
       */
      static set twoDigitCutoffYear(cutoffYear) {
        twoDigitCutoffYear = cutoffYear % 100;
      }
      /**
       * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
       * @type {boolean}
       */
      static get throwOnInvalid() {
        return throwOnInvalid;
      }
      /**
       * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
       * @type {boolean}
       */
      static set throwOnInvalid(t) {
        throwOnInvalid = t;
      }
      /**
       * Reset Luxon's global caches. Should only be necessary in testing scenarios.
       * @return {void}
       */
      static resetCaches() {
        Locale.resetCache();
        IANAZone.resetCache();
      }
    };
  }
});

// node_modules/luxon/src/impl/invalid.js
var Invalid;
var init_invalid = __esm({
  "node_modules/luxon/src/impl/invalid.js"() {
    Invalid = class {
      constructor(reason, explanation) {
        this.reason = reason;
        this.explanation = explanation;
      }
      toMessage() {
        if (this.explanation) {
          return `${this.reason}: ${this.explanation}`;
        } else {
          return this.reason;
        }
      }
    };
  }
});

// node_modules/luxon/src/impl/conversions.js
function unitOutOfRange(unit, value) {
  return new Invalid(
    "unit out of range",
    `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`
  );
}
function dayOfWeek(year, month, day) {
  const d = new Date(Date.UTC(year, month - 1, day));
  if (year < 100 && year >= 0) {
    d.setUTCFullYear(d.getUTCFullYear() - 1900);
  }
  const js = d.getUTCDay();
  return js === 0 ? 7 : js;
}
function computeOrdinal(year, month, day) {
  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
}
function uncomputeOrdinal(year, ordinal) {
  const table = isLeapYear(year) ? leapLadder : nonLeapLadder, month0 = table.findIndex((i) => i < ordinal), day = ordinal - table[month0];
  return { month: month0 + 1, day };
}
function isoWeekdayToLocal(isoWeekday, startOfWeek) {
  return (isoWeekday - startOfWeek + 7) % 7 + 1;
}
function gregorianToWeek(gregObj, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const { year, month, day } = gregObj, ordinal = computeOrdinal(year, month, day), weekday = isoWeekdayToLocal(dayOfWeek(year, month, day), startOfWeek);
  let weekNumber = Math.floor((ordinal - weekday + 14 - minDaysInFirstWeek) / 7), weekYear;
  if (weekNumber < 1) {
    weekYear = year - 1;
    weekNumber = weeksInWeekYear(weekYear, minDaysInFirstWeek, startOfWeek);
  } else if (weekNumber > weeksInWeekYear(year, minDaysInFirstWeek, startOfWeek)) {
    weekYear = year + 1;
    weekNumber = 1;
  } else {
    weekYear = year;
  }
  return { weekYear, weekNumber, weekday, ...timeObject(gregObj) };
}
function weekToGregorian(weekData, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const { weekYear, weekNumber, weekday } = weekData, weekdayOfJan4 = isoWeekdayToLocal(dayOfWeek(weekYear, 1, minDaysInFirstWeek), startOfWeek), yearInDays = daysInYear(weekYear);
  let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 7 + minDaysInFirstWeek, year;
  if (ordinal < 1) {
    year = weekYear - 1;
    ordinal += daysInYear(year);
  } else if (ordinal > yearInDays) {
    year = weekYear + 1;
    ordinal -= daysInYear(weekYear);
  } else {
    year = weekYear;
  }
  const { month, day } = uncomputeOrdinal(year, ordinal);
  return { year, month, day, ...timeObject(weekData) };
}
function gregorianToOrdinal(gregData) {
  const { year, month, day } = gregData;
  const ordinal = computeOrdinal(year, month, day);
  return { year, ordinal, ...timeObject(gregData) };
}
function ordinalToGregorian(ordinalData) {
  const { year, ordinal } = ordinalData;
  const { month, day } = uncomputeOrdinal(year, ordinal);
  return { year, month, day, ...timeObject(ordinalData) };
}
function usesLocalWeekValues(obj, loc) {
  const hasLocaleWeekData = !isUndefined(obj.localWeekday) || !isUndefined(obj.localWeekNumber) || !isUndefined(obj.localWeekYear);
  if (hasLocaleWeekData) {
    const hasIsoWeekData = !isUndefined(obj.weekday) || !isUndefined(obj.weekNumber) || !isUndefined(obj.weekYear);
    if (hasIsoWeekData) {
      throw new ConflictingSpecificationError(
        "Cannot mix locale-based week fields with ISO-based week fields"
      );
    }
    if (!isUndefined(obj.localWeekday))
      obj.weekday = obj.localWeekday;
    if (!isUndefined(obj.localWeekNumber))
      obj.weekNumber = obj.localWeekNumber;
    if (!isUndefined(obj.localWeekYear))
      obj.weekYear = obj.localWeekYear;
    delete obj.localWeekday;
    delete obj.localWeekNumber;
    delete obj.localWeekYear;
    return {
      minDaysInFirstWeek: loc.getMinDaysInFirstWeek(),
      startOfWeek: loc.getStartOfWeek()
    };
  } else {
    return { minDaysInFirstWeek: 4, startOfWeek: 1 };
  }
}
function hasInvalidWeekData(obj, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const validYear = isInteger(obj.weekYear), validWeek = integerBetween(
    obj.weekNumber,
    1,
    weeksInWeekYear(obj.weekYear, minDaysInFirstWeek, startOfWeek)
  ), validWeekday = integerBetween(obj.weekday, 1, 7);
  if (!validYear) {
    return unitOutOfRange("weekYear", obj.weekYear);
  } else if (!validWeek) {
    return unitOutOfRange("week", obj.weekNumber);
  } else if (!validWeekday) {
    return unitOutOfRange("weekday", obj.weekday);
  } else
    return false;
}
function hasInvalidOrdinalData(obj) {
  const validYear = isInteger(obj.year), validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));
  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validOrdinal) {
    return unitOutOfRange("ordinal", obj.ordinal);
  } else
    return false;
}
function hasInvalidGregorianData(obj) {
  const validYear = isInteger(obj.year), validMonth = integerBetween(obj.month, 1, 12), validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));
  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validMonth) {
    return unitOutOfRange("month", obj.month);
  } else if (!validDay) {
    return unitOutOfRange("day", obj.day);
  } else
    return false;
}
function hasInvalidTimeData(obj) {
  const { hour, minute, second, millisecond } = obj;
  const validHour = integerBetween(hour, 0, 23) || hour === 24 && minute === 0 && second === 0 && millisecond === 0, validMinute = integerBetween(minute, 0, 59), validSecond = integerBetween(second, 0, 59), validMillisecond = integerBetween(millisecond, 0, 999);
  if (!validHour) {
    return unitOutOfRange("hour", hour);
  } else if (!validMinute) {
    return unitOutOfRange("minute", minute);
  } else if (!validSecond) {
    return unitOutOfRange("second", second);
  } else if (!validMillisecond) {
    return unitOutOfRange("millisecond", millisecond);
  } else
    return false;
}
var nonLeapLadder, leapLadder;
var init_conversions = __esm({
  "node_modules/luxon/src/impl/conversions.js"() {
    init_util();
    init_invalid();
    init_errors();
    nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
    leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];
  }
});

// node_modules/luxon/src/impl/util.js
function isUndefined(o) {
  return typeof o === "undefined";
}
function isNumber(o) {
  return typeof o === "number";
}
function isInteger(o) {
  return typeof o === "number" && o % 1 === 0;
}
function isString(o) {
  return typeof o === "string";
}
function isDate(o) {
  return Object.prototype.toString.call(o) === "[object Date]";
}
function hasRelative() {
  try {
    return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
  } catch (e) {
    return false;
  }
}
function hasLocaleWeekInfo() {
  try {
    return typeof Intl !== "undefined" && !!Intl.Locale && ("weekInfo" in Intl.Locale.prototype || "getWeekInfo" in Intl.Locale.prototype);
  } catch (e) {
    return false;
  }
}
function maybeArray(thing) {
  return Array.isArray(thing) ? thing : [thing];
}
function bestBy(arr, by, compare) {
  if (arr.length === 0) {
    return void 0;
  }
  return arr.reduce((best, next) => {
    const pair = [by(next), next];
    if (!best) {
      return pair;
    } else if (compare(best[0], pair[0]) === best[0]) {
      return best;
    } else {
      return pair;
    }
  }, null)[1];
}
function pick(obj, keys) {
  return keys.reduce((a, k) => {
    a[k] = obj[k];
    return a;
  }, {});
}
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
function validateWeekSettings(settings) {
  if (settings == null) {
    return null;
  } else if (typeof settings !== "object") {
    throw new InvalidArgumentError("Week settings must be an object");
  } else {
    if (!integerBetween(settings.firstDay, 1, 7) || !integerBetween(settings.minimalDays, 1, 7) || !Array.isArray(settings.weekend) || settings.weekend.some((v) => !integerBetween(v, 1, 7))) {
      throw new InvalidArgumentError("Invalid week settings");
    }
    return {
      firstDay: settings.firstDay,
      minimalDays: settings.minimalDays,
      weekend: Array.from(settings.weekend)
    };
  }
}
function integerBetween(thing, bottom, top) {
  return isInteger(thing) && thing >= bottom && thing <= top;
}
function floorMod(x, n2) {
  return x - n2 * Math.floor(x / n2);
}
function padStart(input, n2 = 2) {
  const isNeg = input < 0;
  let padded;
  if (isNeg) {
    padded = "-" + ("" + -input).padStart(n2, "0");
  } else {
    padded = ("" + input).padStart(n2, "0");
  }
  return padded;
}
function parseInteger(string) {
  if (isUndefined(string) || string === null || string === "") {
    return void 0;
  } else {
    return parseInt(string, 10);
  }
}
function parseFloating(string) {
  if (isUndefined(string) || string === null || string === "") {
    return void 0;
  } else {
    return parseFloat(string);
  }
}
function parseMillis(fraction) {
  if (isUndefined(fraction) || fraction === null || fraction === "") {
    return void 0;
  } else {
    const f = parseFloat("0." + fraction) * 1e3;
    return Math.floor(f);
  }
}
function roundTo(number, digits, towardZero = false) {
  const factor = 10 ** digits, rounder = towardZero ? Math.trunc : Math.round;
  return rounder(number * factor) / factor;
}
function isLeapYear(year) {
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}
function daysInMonth(year, month) {
  const modMonth = floorMod(month - 1, 12) + 1, modYear = year + (month - modMonth) / 12;
  if (modMonth === 2) {
    return isLeapYear(modYear) ? 29 : 28;
  } else {
    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
  }
}
function objToLocalTS(obj) {
  let d = Date.UTC(
    obj.year,
    obj.month - 1,
    obj.day,
    obj.hour,
    obj.minute,
    obj.second,
    obj.millisecond
  );
  if (obj.year < 100 && obj.year >= 0) {
    d = new Date(d);
    d.setUTCFullYear(obj.year, obj.month - 1, obj.day);
  }
  return +d;
}
function firstWeekOffset(year, minDaysInFirstWeek, startOfWeek) {
  const fwdlw = isoWeekdayToLocal(dayOfWeek(year, 1, minDaysInFirstWeek), startOfWeek);
  return -fwdlw + minDaysInFirstWeek - 1;
}
function weeksInWeekYear(weekYear, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const weekOffset = firstWeekOffset(weekYear, minDaysInFirstWeek, startOfWeek);
  const weekOffsetNext = firstWeekOffset(weekYear + 1, minDaysInFirstWeek, startOfWeek);
  return (daysInYear(weekYear) - weekOffset + weekOffsetNext) / 7;
}
function untruncateYear(year) {
  if (year > 99) {
    return year;
  } else
    return year > Settings.twoDigitCutoffYear ? 1900 + year : 2e3 + year;
}
function parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {
  const date = new Date(ts), intlOpts = {
    hourCycle: "h23",
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit"
  };
  if (timeZone) {
    intlOpts.timeZone = timeZone;
  }
  const modified = { timeZoneName: offsetFormat, ...intlOpts };
  const parsed = new Intl.DateTimeFormat(locale, modified).formatToParts(date).find((m) => m.type.toLowerCase() === "timezonename");
  return parsed ? parsed.value : null;
}
function signedOffset(offHourStr, offMinuteStr) {
  let offHour = parseInt(offHourStr, 10);
  if (Number.isNaN(offHour)) {
    offHour = 0;
  }
  const offMin = parseInt(offMinuteStr, 10) || 0, offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
  return offHour * 60 + offMinSigned;
}
function asNumber(value) {
  const numericValue = Number(value);
  if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue))
    throw new InvalidArgumentError(`Invalid unit value ${value}`);
  return numericValue;
}
function normalizeObject(obj, normalizer) {
  const normalized = {};
  for (const u in obj) {
    if (hasOwnProperty(obj, u)) {
      const v = obj[u];
      if (v === void 0 || v === null)
        continue;
      normalized[normalizer(u)] = asNumber(v);
    }
  }
  return normalized;
}
function formatOffset(offset2, format) {
  const hours = Math.trunc(Math.abs(offset2 / 60)), minutes = Math.trunc(Math.abs(offset2 % 60)), sign = offset2 >= 0 ? "+" : "-";
  switch (format) {
    case "short":
      return `${sign}${padStart(hours, 2)}:${padStart(minutes, 2)}`;
    case "narrow":
      return `${sign}${hours}${minutes > 0 ? `:${minutes}` : ""}`;
    case "techie":
      return `${sign}${padStart(hours, 2)}${padStart(minutes, 2)}`;
    default:
      throw new RangeError(`Value format ${format} is out of range for property format`);
  }
}
function timeObject(obj) {
  return pick(obj, ["hour", "minute", "second", "millisecond"]);
}
var init_util = __esm({
  "node_modules/luxon/src/impl/util.js"() {
    init_errors();
    init_settings();
    init_conversions();
  }
});

// node_modules/luxon/src/impl/english.js
function months(length) {
  switch (length) {
    case "narrow":
      return [...monthsNarrow];
    case "short":
      return [...monthsShort];
    case "long":
      return [...monthsLong];
    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
    case "2-digit":
      return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
    default:
      return null;
  }
}
function weekdays(length) {
  switch (length) {
    case "narrow":
      return [...weekdaysNarrow];
    case "short":
      return [...weekdaysShort];
    case "long":
      return [...weekdaysLong];
    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7"];
    default:
      return null;
  }
}
function eras(length) {
  switch (length) {
    case "narrow":
      return [...erasNarrow];
    case "short":
      return [...erasShort];
    case "long":
      return [...erasLong];
    default:
      return null;
  }
}
function meridiemForDateTime(dt) {
  return meridiems[dt.hour < 12 ? 0 : 1];
}
function weekdayForDateTime(dt, length) {
  return weekdays(length)[dt.weekday - 1];
}
function monthForDateTime(dt, length) {
  return months(length)[dt.month - 1];
}
function eraForDateTime(dt, length) {
  return eras(length)[dt.year < 0 ? 0 : 1];
}
function formatRelativeTime(unit, count, numeric = "always", narrow = false) {
  const units = {
    years: ["year", "yr."],
    quarters: ["quarter", "qtr."],
    months: ["month", "mo."],
    weeks: ["week", "wk."],
    days: ["day", "day", "days"],
    hours: ["hour", "hr."],
    minutes: ["minute", "min."],
    seconds: ["second", "sec."]
  };
  const lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;
  if (numeric === "auto" && lastable) {
    const isDay = unit === "days";
    switch (count) {
      case 1:
        return isDay ? "tomorrow" : `next ${units[unit][0]}`;
      case -1:
        return isDay ? "yesterday" : `last ${units[unit][0]}`;
      case 0:
        return isDay ? "today" : `this ${units[unit][0]}`;
      default:
    }
  }
  const isInPast = Object.is(count, -0) || count < 0, fmtValue = Math.abs(count), singular = fmtValue === 1, lilUnits = units[unit], fmtUnit = narrow ? singular ? lilUnits[1] : lilUnits[2] || lilUnits[1] : singular ? units[unit][0] : unit;
  return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;
}
var monthsLong, monthsShort, monthsNarrow, weekdaysLong, weekdaysShort, weekdaysNarrow, meridiems, erasLong, erasShort, erasNarrow;
var init_english = __esm({
  "node_modules/luxon/src/impl/english.js"() {
    init_formats();
    init_util();
    monthsLong = [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ];
    monthsShort = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];
    monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];
    weekdaysLong = [
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday",
      "Sunday"
    ];
    weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
    weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];
    meridiems = ["AM", "PM"];
    erasLong = ["Before Christ", "Anno Domini"];
    erasShort = ["BC", "AD"];
    erasNarrow = ["B", "A"];
  }
});

// node_modules/luxon/src/impl/formatter.js
function stringifyTokens(splits, tokenToString) {
  let s2 = "";
  for (const token of splits) {
    if (token.literal) {
      s2 += token.val;
    } else {
      s2 += tokenToString(token.val);
    }
  }
  return s2;
}
var macroTokenToFormatOpts, Formatter;
var init_formatter = __esm({
  "node_modules/luxon/src/impl/formatter.js"() {
    init_english();
    init_formats();
    init_util();
    macroTokenToFormatOpts = {
      D: DATE_SHORT,
      DD: DATE_MED,
      DDD: DATE_FULL,
      DDDD: DATE_HUGE,
      t: TIME_SIMPLE,
      tt: TIME_WITH_SECONDS,
      ttt: TIME_WITH_SHORT_OFFSET,
      tttt: TIME_WITH_LONG_OFFSET,
      T: TIME_24_SIMPLE,
      TT: TIME_24_WITH_SECONDS,
      TTT: TIME_24_WITH_SHORT_OFFSET,
      TTTT: TIME_24_WITH_LONG_OFFSET,
      f: DATETIME_SHORT,
      ff: DATETIME_MED,
      fff: DATETIME_FULL,
      ffff: DATETIME_HUGE,
      F: DATETIME_SHORT_WITH_SECONDS,
      FF: DATETIME_MED_WITH_SECONDS,
      FFF: DATETIME_FULL_WITH_SECONDS,
      FFFF: DATETIME_HUGE_WITH_SECONDS
    };
    Formatter = class _Formatter {
      static create(locale, opts = {}) {
        return new _Formatter(locale, opts);
      }
      static parseFormat(fmt) {
        let current = null, currentFull = "", bracketed = false;
        const splits = [];
        for (let i = 0; i < fmt.length; i++) {
          const c = fmt.charAt(i);
          if (c === "'") {
            if (currentFull.length > 0) {
              splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
            }
            current = null;
            currentFull = "";
            bracketed = !bracketed;
          } else if (bracketed) {
            currentFull += c;
          } else if (c === current) {
            currentFull += c;
          } else {
            if (currentFull.length > 0) {
              splits.push({ literal: /^\s+$/.test(currentFull), val: currentFull });
            }
            currentFull = c;
            current = c;
          }
        }
        if (currentFull.length > 0) {
          splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
        }
        return splits;
      }
      static macroTokenToFormatOpts(token) {
        return macroTokenToFormatOpts[token];
      }
      constructor(locale, formatOpts) {
        this.opts = formatOpts;
        this.loc = locale;
        this.systemLoc = null;
      }
      formatWithSystemDefault(dt, opts) {
        if (this.systemLoc === null) {
          this.systemLoc = this.loc.redefaultToSystem();
        }
        const df = this.systemLoc.dtFormatter(dt, { ...this.opts, ...opts });
        return df.format();
      }
      dtFormatter(dt, opts = {}) {
        return this.loc.dtFormatter(dt, { ...this.opts, ...opts });
      }
      formatDateTime(dt, opts) {
        return this.dtFormatter(dt, opts).format();
      }
      formatDateTimeParts(dt, opts) {
        return this.dtFormatter(dt, opts).formatToParts();
      }
      formatInterval(interval, opts) {
        const df = this.dtFormatter(interval.start, opts);
        return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());
      }
      resolvedOptions(dt, opts) {
        return this.dtFormatter(dt, opts).resolvedOptions();
      }
      num(n2, p = 0) {
        if (this.opts.forceSimple) {
          return padStart(n2, p);
        }
        const opts = { ...this.opts };
        if (p > 0) {
          opts.padTo = p;
        }
        return this.loc.numberFormatter(opts).format(n2);
      }
      formatDateTimeFromString(dt, fmt) {
        const knownEnglish = this.loc.listingMode() === "en", useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory", string = (opts, extract) => this.loc.extract(dt, opts, extract), formatOffset2 = (opts) => {
          if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
            return "Z";
          }
          return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
        }, meridiem = () => knownEnglish ? meridiemForDateTime(dt) : string({ hour: "numeric", hourCycle: "h12" }, "dayperiod"), month = (length, standalone) => knownEnglish ? monthForDateTime(dt, length) : string(standalone ? { month: length } : { month: length, day: "numeric" }, "month"), weekday = (length, standalone) => knownEnglish ? weekdayForDateTime(dt, length) : string(
          standalone ? { weekday: length } : { weekday: length, month: "long", day: "numeric" },
          "weekday"
        ), maybeMacro = (token) => {
          const formatOpts = _Formatter.macroTokenToFormatOpts(token);
          if (formatOpts) {
            return this.formatWithSystemDefault(dt, formatOpts);
          } else {
            return token;
          }
        }, era = (length) => knownEnglish ? eraForDateTime(dt, length) : string({ era: length }, "era"), tokenToString = (token) => {
          switch (token) {
            case "S":
              return this.num(dt.millisecond);
            case "u":
            case "SSS":
              return this.num(dt.millisecond, 3);
            case "s":
              return this.num(dt.second);
            case "ss":
              return this.num(dt.second, 2);
            case "uu":
              return this.num(Math.floor(dt.millisecond / 10), 2);
            case "uuu":
              return this.num(Math.floor(dt.millisecond / 100));
            case "m":
              return this.num(dt.minute);
            case "mm":
              return this.num(dt.minute, 2);
            case "h":
              return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);
            case "hh":
              return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);
            case "H":
              return this.num(dt.hour);
            case "HH":
              return this.num(dt.hour, 2);
            case "Z":
              return formatOffset2({ format: "narrow", allowZ: this.opts.allowZ });
            case "ZZ":
              return formatOffset2({ format: "short", allowZ: this.opts.allowZ });
            case "ZZZ":
              return formatOffset2({ format: "techie", allowZ: this.opts.allowZ });
            case "ZZZZ":
              return dt.zone.offsetName(dt.ts, { format: "short", locale: this.loc.locale });
            case "ZZZZZ":
              return dt.zone.offsetName(dt.ts, { format: "long", locale: this.loc.locale });
            case "z":
              return dt.zoneName;
            case "a":
              return meridiem();
            case "d":
              return useDateTimeFormatter ? string({ day: "numeric" }, "day") : this.num(dt.day);
            case "dd":
              return useDateTimeFormatter ? string({ day: "2-digit" }, "day") : this.num(dt.day, 2);
            case "c":
              return this.num(dt.weekday);
            case "ccc":
              return weekday("short", true);
            case "cccc":
              return weekday("long", true);
            case "ccccc":
              return weekday("narrow", true);
            case "E":
              return this.num(dt.weekday);
            case "EEE":
              return weekday("short", false);
            case "EEEE":
              return weekday("long", false);
            case "EEEEE":
              return weekday("narrow", false);
            case "L":
              return useDateTimeFormatter ? string({ month: "numeric", day: "numeric" }, "month") : this.num(dt.month);
            case "LL":
              return useDateTimeFormatter ? string({ month: "2-digit", day: "numeric" }, "month") : this.num(dt.month, 2);
            case "LLL":
              return month("short", true);
            case "LLLL":
              return month("long", true);
            case "LLLLL":
              return month("narrow", true);
            case "M":
              return useDateTimeFormatter ? string({ month: "numeric" }, "month") : this.num(dt.month);
            case "MM":
              return useDateTimeFormatter ? string({ month: "2-digit" }, "month") : this.num(dt.month, 2);
            case "MMM":
              return month("short", false);
            case "MMMM":
              return month("long", false);
            case "MMMMM":
              return month("narrow", false);
            case "y":
              return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt.year);
            case "yy":
              return useDateTimeFormatter ? string({ year: "2-digit" }, "year") : this.num(dt.year.toString().slice(-2), 2);
            case "yyyy":
              return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt.year, 4);
            case "yyyyyy":
              return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt.year, 6);
            case "G":
              return era("short");
            case "GG":
              return era("long");
            case "GGGGG":
              return era("narrow");
            case "kk":
              return this.num(dt.weekYear.toString().slice(-2), 2);
            case "kkkk":
              return this.num(dt.weekYear, 4);
            case "W":
              return this.num(dt.weekNumber);
            case "WW":
              return this.num(dt.weekNumber, 2);
            case "n":
              return this.num(dt.localWeekNumber);
            case "nn":
              return this.num(dt.localWeekNumber, 2);
            case "ii":
              return this.num(dt.localWeekYear.toString().slice(-2), 2);
            case "iiii":
              return this.num(dt.localWeekYear, 4);
            case "o":
              return this.num(dt.ordinal);
            case "ooo":
              return this.num(dt.ordinal, 3);
            case "q":
              return this.num(dt.quarter);
            case "qq":
              return this.num(dt.quarter, 2);
            case "X":
              return this.num(Math.floor(dt.ts / 1e3));
            case "x":
              return this.num(dt.ts);
            default:
              return maybeMacro(token);
          }
        };
        return stringifyTokens(_Formatter.parseFormat(fmt), tokenToString);
      }
      formatDurationFromString(dur, fmt) {
        const tokenToField = (token) => {
          switch (token[0]) {
            case "S":
              return "millisecond";
            case "s":
              return "second";
            case "m":
              return "minute";
            case "h":
              return "hour";
            case "d":
              return "day";
            case "w":
              return "week";
            case "M":
              return "month";
            case "y":
              return "year";
            default:
              return null;
          }
        }, tokenToString = (lildur) => (token) => {
          const mapped = tokenToField(token);
          if (mapped) {
            return this.num(lildur.get(mapped), token.length);
          } else {
            return token;
          }
        }, tokens = _Formatter.parseFormat(fmt), realTokens = tokens.reduce(
          (found, { literal, val }) => literal ? found : found.concat(val),
          []
        ), collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t) => t));
        return stringifyTokens(tokens, tokenToString(collapsed));
      }
    };
  }
});

// node_modules/luxon/src/impl/regexParser.js
function combineRegexes(...regexes) {
  const full = regexes.reduce((f, r) => f + r.source, "");
  return RegExp(`^${full}$`);
}
function combineExtractors(...extractors) {
  return (m) => extractors.reduce(
    ([mergedVals, mergedZone, cursor], ex) => {
      const [val, zone, next] = ex(m, cursor);
      return [{ ...mergedVals, ...val }, zone || mergedZone, next];
    },
    [{}, null, 1]
  ).slice(0, 2);
}
function parse(s2, ...patterns) {
  if (s2 == null) {
    return [null, null];
  }
  for (const [regex, extractor] of patterns) {
    const m = regex.exec(s2);
    if (m) {
      return extractor(m);
    }
  }
  return [null, null];
}
function simpleParse(...keys) {
  return (match2, cursor) => {
    const ret = {};
    let i;
    for (i = 0; i < keys.length; i++) {
      ret[keys[i]] = parseInteger(match2[cursor + i]);
    }
    return [ret, null, cursor + i];
  };
}
function int(match2, pos, fallback) {
  const m = match2[pos];
  return isUndefined(m) ? fallback : parseInteger(m);
}
function extractISOYmd(match2, cursor) {
  const item = {
    year: int(match2, cursor),
    month: int(match2, cursor + 1, 1),
    day: int(match2, cursor + 2, 1)
  };
  return [item, null, cursor + 3];
}
function extractISOTime(match2, cursor) {
  const item = {
    hours: int(match2, cursor, 0),
    minutes: int(match2, cursor + 1, 0),
    seconds: int(match2, cursor + 2, 0),
    milliseconds: parseMillis(match2[cursor + 3])
  };
  return [item, null, cursor + 4];
}
function extractISOOffset(match2, cursor) {
  const local = !match2[cursor] && !match2[cursor + 1], fullOffset = signedOffset(match2[cursor + 1], match2[cursor + 2]), zone = local ? null : FixedOffsetZone.instance(fullOffset);
  return [{}, zone, cursor + 3];
}
function extractIANAZone(match2, cursor) {
  const zone = match2[cursor] ? IANAZone.create(match2[cursor]) : null;
  return [{}, zone, cursor + 1];
}
function extractISODuration(match2) {
  const [s2, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] = match2;
  const hasNegativePrefix = s2[0] === "-";
  const negativeSeconds = secondStr && secondStr[0] === "-";
  const maybeNegate = (num, force = false) => num !== void 0 && (force || num && hasNegativePrefix) ? -num : num;
  return [
    {
      years: maybeNegate(parseFloating(yearStr)),
      months: maybeNegate(parseFloating(monthStr)),
      weeks: maybeNegate(parseFloating(weekStr)),
      days: maybeNegate(parseFloating(dayStr)),
      hours: maybeNegate(parseFloating(hourStr)),
      minutes: maybeNegate(parseFloating(minuteStr)),
      seconds: maybeNegate(parseFloating(secondStr), secondStr === "-0"),
      milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds)
    }
  ];
}
function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  const result = {
    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
    month: monthsShort.indexOf(monthStr) + 1,
    day: parseInteger(dayStr),
    hour: parseInteger(hourStr),
    minute: parseInteger(minuteStr)
  };
  if (secondStr)
    result.second = parseInteger(secondStr);
  if (weekdayStr) {
    result.weekday = weekdayStr.length > 3 ? weekdaysLong.indexOf(weekdayStr) + 1 : weekdaysShort.indexOf(weekdayStr) + 1;
  }
  return result;
}
function extractRFC2822(match2) {
  const [
    ,
    weekdayStr,
    dayStr,
    monthStr,
    yearStr,
    hourStr,
    minuteStr,
    secondStr,
    obsOffset,
    milOffset,
    offHourStr,
    offMinuteStr
  ] = match2, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  let offset2;
  if (obsOffset) {
    offset2 = obsOffsets[obsOffset];
  } else if (milOffset) {
    offset2 = 0;
  } else {
    offset2 = signedOffset(offHourStr, offMinuteStr);
  }
  return [result, new FixedOffsetZone(offset2)];
}
function preprocessRFC2822(s2) {
  return s2.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").trim();
}
function extractRFC1123Or850(match2) {
  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match2, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}
function extractASCII(match2) {
  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match2, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}
function parseISODate(s2) {
  return parse(
    s2,
    [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
    [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset],
    [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime],
    [isoTimeCombinedRegex, extractISOTimeAndOffset]
  );
}
function parseRFC2822Date(s2) {
  return parse(preprocessRFC2822(s2), [rfc2822, extractRFC2822]);
}
function parseHTTPDate(s2) {
  return parse(
    s2,
    [rfc1123, extractRFC1123Or850],
    [rfc850, extractRFC1123Or850],
    [ascii, extractASCII]
  );
}
function parseISODuration(s2) {
  return parse(s2, [isoDuration, extractISODuration]);
}
function parseISOTimeOnly(s2) {
  return parse(s2, [isoTimeOnly, extractISOTimeOnly]);
}
function parseSQL(s2) {
  return parse(
    s2,
    [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
    [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]
  );
}
var ianaRegex, offsetRegex, isoExtendedZone, isoTimeBaseRegex, isoTimeRegex, isoTimeExtensionRegex, isoYmdRegex, isoWeekRegex, isoOrdinalRegex, extractISOWeekData, extractISOOrdinalData, sqlYmdRegex, sqlTimeRegex, sqlTimeExtensionRegex, isoTimeOnly, isoDuration, obsOffsets, rfc2822, rfc1123, rfc850, ascii, isoYmdWithTimeExtensionRegex, isoWeekWithTimeExtensionRegex, isoOrdinalWithTimeExtensionRegex, isoTimeCombinedRegex, extractISOYmdTimeAndOffset, extractISOWeekTimeAndOffset, extractISOOrdinalDateAndTime, extractISOTimeAndOffset, extractISOTimeOnly, sqlYmdWithTimeExtensionRegex, sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone;
var init_regexParser = __esm({
  "node_modules/luxon/src/impl/regexParser.js"() {
    init_util();
    init_english();
    init_fixedOffsetZone();
    init_IANAZone();
    ianaRegex = /[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;
    offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/;
    isoExtendedZone = `(?:${offsetRegex.source}?(?:\\[(${ianaRegex.source})\\])?)?`;
    isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/;
    isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${isoExtendedZone}`);
    isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`);
    isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/;
    isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/;
    isoOrdinalRegex = /(\d{4})-?(\d{3})/;
    extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay");
    extractISOOrdinalData = simpleParse("year", "ordinal");
    sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/;
    sqlTimeRegex = RegExp(
      `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`
    );
    sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);
    isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}$`);
    isoDuration = /^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;
    obsOffsets = {
      GMT: 0,
      EDT: -4 * 60,
      EST: -5 * 60,
      CDT: -5 * 60,
      CST: -6 * 60,
      MDT: -6 * 60,
      MST: -7 * 60,
      PDT: -7 * 60,
      PST: -8 * 60
    };
    rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;
    rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/;
    rfc850 = /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/;
    ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;
    isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
    isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
    isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
    isoTimeCombinedRegex = combineRegexes(isoTimeRegex);
    extractISOYmdTimeAndOffset = combineExtractors(
      extractISOYmd,
      extractISOTime,
      extractISOOffset,
      extractIANAZone
    );
    extractISOWeekTimeAndOffset = combineExtractors(
      extractISOWeekData,
      extractISOTime,
      extractISOOffset,
      extractIANAZone
    );
    extractISOOrdinalDateAndTime = combineExtractors(
      extractISOOrdinalData,
      extractISOTime,
      extractISOOffset,
      extractIANAZone
    );
    extractISOTimeAndOffset = combineExtractors(
      extractISOTime,
      extractISOOffset,
      extractIANAZone
    );
    extractISOTimeOnly = combineExtractors(extractISOTime);
    sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
    sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);
    extractISOTimeOffsetAndIANAZone = combineExtractors(
      extractISOTime,
      extractISOOffset,
      extractIANAZone
    );
  }
});

// node_modules/luxon/src/duration.js
function clone(dur, alts, clear = false) {
  const conf = {
    values: clear ? alts.values : { ...dur.values, ...alts.values || {} },
    loc: dur.loc.clone(alts.loc),
    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,
    matrix: alts.matrix || dur.matrix
  };
  return new Duration(conf);
}
function durationToMillis(matrix, vals) {
  var _a;
  let sum = (_a = vals.milliseconds) != null ? _a : 0;
  for (const unit of reverseUnits.slice(1)) {
    if (vals[unit]) {
      sum += vals[unit] * matrix[unit]["milliseconds"];
    }
  }
  return sum;
}
function normalizeValues(matrix, vals) {
  const factor = durationToMillis(matrix, vals) < 0 ? -1 : 1;
  orderedUnits.reduceRight((previous, current) => {
    if (!isUndefined(vals[current])) {
      if (previous) {
        const previousVal = vals[previous] * factor;
        const conv = matrix[current][previous];
        const rollUp = Math.floor(previousVal / conv);
        vals[current] += rollUp * factor;
        vals[previous] -= rollUp * conv * factor;
      }
      return current;
    } else {
      return previous;
    }
  }, null);
  orderedUnits.reduce((previous, current) => {
    if (!isUndefined(vals[current])) {
      if (previous) {
        const fraction = vals[previous] % 1;
        vals[previous] -= fraction;
        vals[current] += fraction * matrix[previous][current];
      }
      return current;
    } else {
      return previous;
    }
  }, null);
}
function removeZeroes(vals) {
  const newVals = {};
  for (const [key, value] of Object.entries(vals)) {
    if (value !== 0) {
      newVals[key] = value;
    }
  }
  return newVals;
}
var INVALID, lowOrderMatrix, casualMatrix, daysInYearAccurate, daysInMonthAccurate, accurateMatrix, orderedUnits, reverseUnits, Duration;
var init_duration = __esm({
  "node_modules/luxon/src/duration.js"() {
    init_errors();
    init_formatter();
    init_invalid();
    init_locale();
    init_regexParser();
    init_util();
    init_settings();
    init_datetime();
    INVALID = "Invalid Duration";
    lowOrderMatrix = {
      weeks: {
        days: 7,
        hours: 7 * 24,
        minutes: 7 * 24 * 60,
        seconds: 7 * 24 * 60 * 60,
        milliseconds: 7 * 24 * 60 * 60 * 1e3
      },
      days: {
        hours: 24,
        minutes: 24 * 60,
        seconds: 24 * 60 * 60,
        milliseconds: 24 * 60 * 60 * 1e3
      },
      hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1e3 },
      minutes: { seconds: 60, milliseconds: 60 * 1e3 },
      seconds: { milliseconds: 1e3 }
    };
    casualMatrix = {
      years: {
        quarters: 4,
        months: 12,
        weeks: 52,
        days: 365,
        hours: 365 * 24,
        minutes: 365 * 24 * 60,
        seconds: 365 * 24 * 60 * 60,
        milliseconds: 365 * 24 * 60 * 60 * 1e3
      },
      quarters: {
        months: 3,
        weeks: 13,
        days: 91,
        hours: 91 * 24,
        minutes: 91 * 24 * 60,
        seconds: 91 * 24 * 60 * 60,
        milliseconds: 91 * 24 * 60 * 60 * 1e3
      },
      months: {
        weeks: 4,
        days: 30,
        hours: 30 * 24,
        minutes: 30 * 24 * 60,
        seconds: 30 * 24 * 60 * 60,
        milliseconds: 30 * 24 * 60 * 60 * 1e3
      },
      ...lowOrderMatrix
    };
    daysInYearAccurate = 146097 / 400;
    daysInMonthAccurate = 146097 / 4800;
    accurateMatrix = {
      years: {
        quarters: 4,
        months: 12,
        weeks: daysInYearAccurate / 7,
        days: daysInYearAccurate,
        hours: daysInYearAccurate * 24,
        minutes: daysInYearAccurate * 24 * 60,
        seconds: daysInYearAccurate * 24 * 60 * 60,
        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1e3
      },
      quarters: {
        months: 3,
        weeks: daysInYearAccurate / 28,
        days: daysInYearAccurate / 4,
        hours: daysInYearAccurate * 24 / 4,
        minutes: daysInYearAccurate * 24 * 60 / 4,
        seconds: daysInYearAccurate * 24 * 60 * 60 / 4,
        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1e3 / 4
      },
      months: {
        weeks: daysInMonthAccurate / 7,
        days: daysInMonthAccurate,
        hours: daysInMonthAccurate * 24,
        minutes: daysInMonthAccurate * 24 * 60,
        seconds: daysInMonthAccurate * 24 * 60 * 60,
        milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1e3
      },
      ...lowOrderMatrix
    };
    orderedUnits = [
      "years",
      "quarters",
      "months",
      "weeks",
      "days",
      "hours",
      "minutes",
      "seconds",
      "milliseconds"
    ];
    reverseUnits = orderedUnits.slice(0).reverse();
    Duration = class _Duration {
      /**
       * @private
       */
      constructor(config) {
        const accurate = config.conversionAccuracy === "longterm" || false;
        let matrix = accurate ? accurateMatrix : casualMatrix;
        if (config.matrix) {
          matrix = config.matrix;
        }
        this.values = config.values;
        this.loc = config.loc || Locale.create();
        this.conversionAccuracy = accurate ? "longterm" : "casual";
        this.invalid = config.invalid || null;
        this.matrix = matrix;
        this.isLuxonDuration = true;
      }
      /**
       * Create Duration from a number of milliseconds.
       * @param {number} count of milliseconds
       * @param {Object} opts - options for parsing
       * @param {string} [opts.locale='en-US'] - the locale to use
       * @param {string} opts.numberingSystem - the numbering system to use
       * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
       * @return {Duration}
       */
      static fromMillis(count, opts) {
        return _Duration.fromObject({ milliseconds: count }, opts);
      }
      /**
       * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.
       * If this object is empty then a zero milliseconds duration is returned.
       * @param {Object} obj - the object to create the DateTime from
       * @param {number} obj.years
       * @param {number} obj.quarters
       * @param {number} obj.months
       * @param {number} obj.weeks
       * @param {number} obj.days
       * @param {number} obj.hours
       * @param {number} obj.minutes
       * @param {number} obj.seconds
       * @param {number} obj.milliseconds
       * @param {Object} [opts=[]] - options for creating this Duration
       * @param {string} [opts.locale='en-US'] - the locale to use
       * @param {string} opts.numberingSystem - the numbering system to use
       * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
       * @param {string} [opts.matrix=Object] - the custom conversion system to use
       * @return {Duration}
       */
      static fromObject(obj, opts = {}) {
        if (obj == null || typeof obj !== "object") {
          throw new InvalidArgumentError(
            `Duration.fromObject: argument expected to be an object, got ${obj === null ? "null" : typeof obj}`
          );
        }
        return new _Duration({
          values: normalizeObject(obj, _Duration.normalizeUnit),
          loc: Locale.fromObject(opts),
          conversionAccuracy: opts.conversionAccuracy,
          matrix: opts.matrix
        });
      }
      /**
       * Create a Duration from DurationLike.
       *
       * @param {Object | number | Duration} durationLike
       * One of:
       * - object with keys like 'years' and 'hours'.
       * - number representing milliseconds
       * - Duration instance
       * @return {Duration}
       */
      static fromDurationLike(durationLike) {
        if (isNumber(durationLike)) {
          return _Duration.fromMillis(durationLike);
        } else if (_Duration.isDuration(durationLike)) {
          return durationLike;
        } else if (typeof durationLike === "object") {
          return _Duration.fromObject(durationLike);
        } else {
          throw new InvalidArgumentError(
            `Unknown duration argument ${durationLike} of type ${typeof durationLike}`
          );
        }
      }
      /**
       * Create a Duration from an ISO 8601 duration string.
       * @param {string} text - text to parse
       * @param {Object} opts - options for parsing
       * @param {string} [opts.locale='en-US'] - the locale to use
       * @param {string} opts.numberingSystem - the numbering system to use
       * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
       * @param {string} [opts.matrix=Object] - the preset conversion system to use
       * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
       * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
       * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
       * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
       * @return {Duration}
       */
      static fromISO(text, opts) {
        const [parsed] = parseISODuration(text);
        if (parsed) {
          return _Duration.fromObject(parsed, opts);
        } else {
          return _Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
        }
      }
      /**
       * Create a Duration from an ISO 8601 time string.
       * @param {string} text - text to parse
       * @param {Object} opts - options for parsing
       * @param {string} [opts.locale='en-US'] - the locale to use
       * @param {string} opts.numberingSystem - the numbering system to use
       * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
       * @param {string} [opts.matrix=Object] - the conversion system to use
       * @see https://en.wikipedia.org/wiki/ISO_8601#Times
       * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }
       * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
       * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
       * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
       * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
       * @return {Duration}
       */
      static fromISOTime(text, opts) {
        const [parsed] = parseISOTimeOnly(text);
        if (parsed) {
          return _Duration.fromObject(parsed, opts);
        } else {
          return _Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
        }
      }
      /**
       * Create an invalid Duration.
       * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
       * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
       * @return {Duration}
       */
      static invalid(reason, explanation = null) {
        if (!reason) {
          throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
        }
        const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
        if (Settings.throwOnInvalid) {
          throw new InvalidDurationError(invalid);
        } else {
          return new _Duration({ invalid });
        }
      }
      /**
       * @private
       */
      static normalizeUnit(unit) {
        const normalized = {
          year: "years",
          years: "years",
          quarter: "quarters",
          quarters: "quarters",
          month: "months",
          months: "months",
          week: "weeks",
          weeks: "weeks",
          day: "days",
          days: "days",
          hour: "hours",
          hours: "hours",
          minute: "minutes",
          minutes: "minutes",
          second: "seconds",
          seconds: "seconds",
          millisecond: "milliseconds",
          milliseconds: "milliseconds"
        }[unit ? unit.toLowerCase() : unit];
        if (!normalized)
          throw new InvalidUnitError(unit);
        return normalized;
      }
      /**
       * Check if an object is a Duration. Works across context boundaries
       * @param {object} o
       * @return {boolean}
       */
      static isDuration(o) {
        return o && o.isLuxonDuration || false;
      }
      /**
       * Get  the locale of a Duration, such 'en-GB'
       * @type {string}
       */
      get locale() {
        return this.isValid ? this.loc.locale : null;
      }
      /**
       * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
       *
       * @type {string}
       */
      get numberingSystem() {
        return this.isValid ? this.loc.numberingSystem : null;
      }
      /**
       * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
       * * `S` for milliseconds
       * * `s` for seconds
       * * `m` for minutes
       * * `h` for hours
       * * `d` for days
       * * `w` for weeks
       * * `M` for months
       * * `y` for years
       * Notes:
       * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
       * * Tokens can be escaped by wrapping with single quotes.
       * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.
       * @param {string} fmt - the format string
       * @param {Object} opts - options
       * @param {boolean} [opts.floor=true] - floor numerical values
       * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
       * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
       * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
       * @return {string}
       */
      toFormat(fmt, opts = {}) {
        const fmtOpts = {
          ...opts,
          floor: opts.round !== false && opts.floor !== false
        };
        return this.isValid ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt) : INVALID;
      }
      /**
       * Returns a string representation of a Duration with all units included.
       * To modify its behavior, use `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options
       * @param {Object} opts - Formatting options. Accepts the same keys as the options parameter of the native `Intl.NumberFormat` constructor, as well as `listStyle`.
       * @param {string} [opts.listStyle='narrow'] - How to format the merged list. Corresponds to the `style` property of the options parameter of the native `Intl.ListFormat` constructor.
       * @example
       * ```js
       * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })
       * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'
       * dur.toHuman({ listStyle: "long" }) //=> '1 day, 5 hours, and 6 minutes'
       * dur.toHuman({ unitDisplay: "short" }) //=> '1 day, 5 hr, 6 min'
       * ```
       */
      toHuman(opts = {}) {
        if (!this.isValid)
          return INVALID;
        const l2 = orderedUnits.map((unit) => {
          const val = this.values[unit];
          if (isUndefined(val)) {
            return null;
          }
          return this.loc.numberFormatter({ style: "unit", unitDisplay: "long", ...opts, unit: unit.slice(0, -1) }).format(val);
        }).filter((n2) => n2);
        return this.loc.listFormatter({ type: "conjunction", style: opts.listStyle || "narrow", ...opts }).format(l2);
      }
      /**
       * Returns a JavaScript object with this Duration's values.
       * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
       * @return {Object}
       */
      toObject() {
        if (!this.isValid)
          return {};
        return { ...this.values };
      }
      /**
       * Returns an ISO 8601-compliant string representation of this Duration.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
       * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
       * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
       * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
       * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
       * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
       * @return {string}
       */
      toISO() {
        if (!this.isValid)
          return null;
        let s2 = "P";
        if (this.years !== 0)
          s2 += this.years + "Y";
        if (this.months !== 0 || this.quarters !== 0)
          s2 += this.months + this.quarters * 3 + "M";
        if (this.weeks !== 0)
          s2 += this.weeks + "W";
        if (this.days !== 0)
          s2 += this.days + "D";
        if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)
          s2 += "T";
        if (this.hours !== 0)
          s2 += this.hours + "H";
        if (this.minutes !== 0)
          s2 += this.minutes + "M";
        if (this.seconds !== 0 || this.milliseconds !== 0)
          s2 += roundTo(this.seconds + this.milliseconds / 1e3, 3) + "S";
        if (s2 === "P")
          s2 += "T0S";
        return s2;
      }
      /**
       * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.
       * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Times
       * @param {Object} opts - options
       * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
       * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
       * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
       * @param {string} [opts.format='extended'] - choose between the basic and extended format
       * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'
       * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'
       * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'
       * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'
       * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'
       * @return {string}
       */
      toISOTime(opts = {}) {
        if (!this.isValid)
          return null;
        const millis = this.toMillis();
        if (millis < 0 || millis >= 864e5)
          return null;
        opts = {
          suppressMilliseconds: false,
          suppressSeconds: false,
          includePrefix: false,
          format: "extended",
          ...opts,
          includeOffset: false
        };
        const dateTime = DateTime.fromMillis(millis, { zone: "UTC" });
        return dateTime.toISOTime(opts);
      }
      /**
       * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
       * @return {string}
       */
      toJSON() {
        return this.toISO();
      }
      /**
       * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
       * @return {string}
       */
      toString() {
        return this.toISO();
      }
      /**
       * Returns a string representation of this Duration appropriate for the REPL.
       * @return {string}
       */
      [Symbol.for("nodejs.util.inspect.custom")]() {
        if (this.isValid) {
          return `Duration { values: ${JSON.stringify(this.values)} }`;
        } else {
          return `Duration { Invalid, reason: ${this.invalidReason} }`;
        }
      }
      /**
       * Returns an milliseconds value of this Duration.
       * @return {number}
       */
      toMillis() {
        if (!this.isValid)
          return NaN;
        return durationToMillis(this.matrix, this.values);
      }
      /**
       * Returns an milliseconds value of this Duration. Alias of {@link toMillis}
       * @return {number}
       */
      valueOf() {
        return this.toMillis();
      }
      /**
       * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
       * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
       * @return {Duration}
       */
      plus(duration) {
        if (!this.isValid)
          return this;
        const dur = _Duration.fromDurationLike(duration), result = {};
        for (const k of orderedUnits) {
          if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {
            result[k] = dur.get(k) + this.get(k);
          }
        }
        return clone(this, { values: result }, true);
      }
      /**
       * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
       * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
       * @return {Duration}
       */
      minus(duration) {
        if (!this.isValid)
          return this;
        const dur = _Duration.fromDurationLike(duration);
        return this.plus(dur.negate());
      }
      /**
       * Scale this Duration by the specified amount. Return a newly-constructed Duration.
       * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
       * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }
       * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === "hours" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
       * @return {Duration}
       */
      mapUnits(fn) {
        if (!this.isValid)
          return this;
        const result = {};
        for (const k of Object.keys(this.values)) {
          result[k] = asNumber(fn(this.values[k], k));
        }
        return clone(this, { values: result }, true);
      }
      /**
       * Get the value of unit.
       * @param {string} unit - a unit such as 'minute' or 'day'
       * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2
       * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0
       * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3
       * @return {number}
       */
      get(unit) {
        return this[_Duration.normalizeUnit(unit)];
      }
      /**
       * "Set" the values of specified units. Return a newly-constructed Duration.
       * @param {Object} values - a mapping of units to numbers
       * @example dur.set({ years: 2017 })
       * @example dur.set({ hours: 8, minutes: 30 })
       * @return {Duration}
       */
      set(values) {
        if (!this.isValid)
          return this;
        const mixed = { ...this.values, ...normalizeObject(values, _Duration.normalizeUnit) };
        return clone(this, { values: mixed });
      }
      /**
       * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
       * @example dur.reconfigure({ locale: 'en-GB' })
       * @return {Duration}
       */
      reconfigure({ locale, numberingSystem, conversionAccuracy, matrix } = {}) {
        const loc = this.loc.clone({ locale, numberingSystem });
        const opts = { loc, matrix, conversionAccuracy };
        return clone(this, opts);
      }
      /**
       * Return the length of the duration in the specified unit.
       * @param {string} unit - a unit such as 'minutes' or 'days'
       * @example Duration.fromObject({years: 1}).as('days') //=> 365
       * @example Duration.fromObject({years: 1}).as('months') //=> 12
       * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
       * @return {number}
       */
      as(unit) {
        return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
      }
      /**
       * Reduce this Duration to its canonical representation in its current units.
       * Assuming the overall value of the Duration is positive, this means:
       * - excessive values for lower-order units are converted to higher-order units (if possible, see first and second example)
       * - negative lower-order units are converted to higher order units (there must be such a higher order unit, otherwise
       *   the overall value would be negative, see third example)
       * - fractional values for higher-order units are converted to lower-order units (if possible, see fourth example)
       *
       * If the overall value is negative, the result of this method is equivalent to `this.negate().normalize().negate()`.
       * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
       * @example Duration.fromObject({ days: 5000 }).normalize().toObject() //=> { days: 5000 }
       * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
       * @example Duration.fromObject({ years: 2.5, days: 0, hours: 0 }).normalize().toObject() //=> { years: 2, days: 182, hours: 12 }
       * @return {Duration}
       */
      normalize() {
        if (!this.isValid)
          return this;
        const vals = this.toObject();
        normalizeValues(this.matrix, vals);
        return clone(this, { values: vals }, true);
      }
      /**
       * Rescale units to its largest representation
       * @example Duration.fromObject({ milliseconds: 90000 }).rescale().toObject() //=> { minutes: 1, seconds: 30 }
       * @return {Duration}
       */
      rescale() {
        if (!this.isValid)
          return this;
        const vals = removeZeroes(this.normalize().shiftToAll().toObject());
        return clone(this, { values: vals }, true);
      }
      /**
       * Convert this Duration into its representation in a different set of units.
       * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
       * @return {Duration}
       */
      shiftTo(...units) {
        if (!this.isValid)
          return this;
        if (units.length === 0) {
          return this;
        }
        units = units.map((u) => _Duration.normalizeUnit(u));
        const built = {}, accumulated = {}, vals = this.toObject();
        let lastUnit;
        for (const k of orderedUnits) {
          if (units.indexOf(k) >= 0) {
            lastUnit = k;
            let own = 0;
            for (const ak in accumulated) {
              own += this.matrix[ak][k] * accumulated[ak];
              accumulated[ak] = 0;
            }
            if (isNumber(vals[k])) {
              own += vals[k];
            }
            const i = Math.trunc(own);
            built[k] = i;
            accumulated[k] = (own * 1e3 - i * 1e3) / 1e3;
          } else if (isNumber(vals[k])) {
            accumulated[k] = vals[k];
          }
        }
        for (const key in accumulated) {
          if (accumulated[key] !== 0) {
            built[lastUnit] += key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
          }
        }
        normalizeValues(this.matrix, built);
        return clone(this, { values: built }, true);
      }
      /**
       * Shift this Duration to all available units.
       * Same as shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds")
       * @return {Duration}
       */
      shiftToAll() {
        if (!this.isValid)
          return this;
        return this.shiftTo(
          "years",
          "months",
          "weeks",
          "days",
          "hours",
          "minutes",
          "seconds",
          "milliseconds"
        );
      }
      /**
       * Return the negative of this Duration.
       * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
       * @return {Duration}
       */
      negate() {
        if (!this.isValid)
          return this;
        const negated = {};
        for (const k of Object.keys(this.values)) {
          negated[k] = this.values[k] === 0 ? 0 : -this.values[k];
        }
        return clone(this, { values: negated }, true);
      }
      /**
       * Get the years.
       * @type {number}
       */
      get years() {
        return this.isValid ? this.values.years || 0 : NaN;
      }
      /**
       * Get the quarters.
       * @type {number}
       */
      get quarters() {
        return this.isValid ? this.values.quarters || 0 : NaN;
      }
      /**
       * Get the months.
       * @type {number}
       */
      get months() {
        return this.isValid ? this.values.months || 0 : NaN;
      }
      /**
       * Get the weeks
       * @type {number}
       */
      get weeks() {
        return this.isValid ? this.values.weeks || 0 : NaN;
      }
      /**
       * Get the days.
       * @type {number}
       */
      get days() {
        return this.isValid ? this.values.days || 0 : NaN;
      }
      /**
       * Get the hours.
       * @type {number}
       */
      get hours() {
        return this.isValid ? this.values.hours || 0 : NaN;
      }
      /**
       * Get the minutes.
       * @type {number}
       */
      get minutes() {
        return this.isValid ? this.values.minutes || 0 : NaN;
      }
      /**
       * Get the seconds.
       * @return {number}
       */
      get seconds() {
        return this.isValid ? this.values.seconds || 0 : NaN;
      }
      /**
       * Get the milliseconds.
       * @return {number}
       */
      get milliseconds() {
        return this.isValid ? this.values.milliseconds || 0 : NaN;
      }
      /**
       * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
       * on invalid DateTimes or Intervals.
       * @return {boolean}
       */
      get isValid() {
        return this.invalid === null;
      }
      /**
       * Returns an error code if this Duration became invalid, or null if the Duration is valid
       * @return {string}
       */
      get invalidReason() {
        return this.invalid ? this.invalid.reason : null;
      }
      /**
       * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
       * @type {string}
       */
      get invalidExplanation() {
        return this.invalid ? this.invalid.explanation : null;
      }
      /**
       * Equality check
       * Two Durations are equal iff they have the same units and the same values for each unit.
       * @param {Duration} other
       * @return {boolean}
       */
      equals(other) {
        if (!this.isValid || !other.isValid) {
          return false;
        }
        if (!this.loc.equals(other.loc)) {
          return false;
        }
        function eq(v1, v2) {
          if (v1 === void 0 || v1 === 0)
            return v2 === void 0 || v2 === 0;
          return v1 === v2;
        }
        for (const u of orderedUnits) {
          if (!eq(this.values[u], other.values[u])) {
            return false;
          }
        }
        return true;
      }
    };
  }
});

// node_modules/luxon/src/interval.js
function validateStartEnd(start, end) {
  if (!start || !start.isValid) {
    return Interval.invalid("missing or invalid start");
  } else if (!end || !end.isValid) {
    return Interval.invalid("missing or invalid end");
  } else if (end < start) {
    return Interval.invalid(
      "end before start",
      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`
    );
  } else {
    return null;
  }
}
var INVALID2, Interval;
var init_interval = __esm({
  "node_modules/luxon/src/interval.js"() {
    init_datetime();
    init_duration();
    init_settings();
    init_errors();
    init_invalid();
    init_formatter();
    init_formats();
    INVALID2 = "Invalid Interval";
    Interval = class _Interval {
      /**
       * @private
       */
      constructor(config) {
        this.s = config.start;
        this.e = config.end;
        this.invalid = config.invalid || null;
        this.isLuxonInterval = true;
      }
      /**
       * Create an invalid Interval.
       * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
       * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
       * @return {Interval}
       */
      static invalid(reason, explanation = null) {
        if (!reason) {
          throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
        }
        const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
        if (Settings.throwOnInvalid) {
          throw new InvalidIntervalError(invalid);
        } else {
          return new _Interval({ invalid });
        }
      }
      /**
       * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
       * @param {DateTime|Date|Object} start
       * @param {DateTime|Date|Object} end
       * @return {Interval}
       */
      static fromDateTimes(start, end) {
        const builtStart = friendlyDateTime(start), builtEnd = friendlyDateTime(end);
        const validateError = validateStartEnd(builtStart, builtEnd);
        if (validateError == null) {
          return new _Interval({
            start: builtStart,
            end: builtEnd
          });
        } else {
          return validateError;
        }
      }
      /**
       * Create an Interval from a start DateTime and a Duration to extend to.
       * @param {DateTime|Date|Object} start
       * @param {Duration|Object|number} duration - the length of the Interval.
       * @return {Interval}
       */
      static after(start, duration) {
        const dur = Duration.fromDurationLike(duration), dt = friendlyDateTime(start);
        return _Interval.fromDateTimes(dt, dt.plus(dur));
      }
      /**
       * Create an Interval from an end DateTime and a Duration to extend backwards to.
       * @param {DateTime|Date|Object} end
       * @param {Duration|Object|number} duration - the length of the Interval.
       * @return {Interval}
       */
      static before(end, duration) {
        const dur = Duration.fromDurationLike(duration), dt = friendlyDateTime(end);
        return _Interval.fromDateTimes(dt.minus(dur), dt);
      }
      /**
       * Create an Interval from an ISO 8601 string.
       * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
       * @param {string} text - the ISO string to parse
       * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}
       * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
       * @return {Interval}
       */
      static fromISO(text, opts) {
        const [s2, e] = (text || "").split("/", 2);
        if (s2 && e) {
          let start, startIsValid;
          try {
            start = DateTime.fromISO(s2, opts);
            startIsValid = start.isValid;
          } catch (e2) {
            startIsValid = false;
          }
          let end, endIsValid;
          try {
            end = DateTime.fromISO(e, opts);
            endIsValid = end.isValid;
          } catch (e2) {
            endIsValid = false;
          }
          if (startIsValid && endIsValid) {
            return _Interval.fromDateTimes(start, end);
          }
          if (startIsValid) {
            const dur = Duration.fromISO(e, opts);
            if (dur.isValid) {
              return _Interval.after(start, dur);
            }
          } else if (endIsValid) {
            const dur = Duration.fromISO(s2, opts);
            if (dur.isValid) {
              return _Interval.before(end, dur);
            }
          }
        }
        return _Interval.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
      }
      /**
       * Check if an object is an Interval. Works across context boundaries
       * @param {object} o
       * @return {boolean}
       */
      static isInterval(o) {
        return o && o.isLuxonInterval || false;
      }
      /**
       * Returns the start of the Interval
       * @type {DateTime}
       */
      get start() {
        return this.isValid ? this.s : null;
      }
      /**
       * Returns the end of the Interval
       * @type {DateTime}
       */
      get end() {
        return this.isValid ? this.e : null;
      }
      /**
       * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
       * @type {boolean}
       */
      get isValid() {
        return this.invalidReason === null;
      }
      /**
       * Returns an error code if this Interval is invalid, or null if the Interval is valid
       * @type {string}
       */
      get invalidReason() {
        return this.invalid ? this.invalid.reason : null;
      }
      /**
       * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
       * @type {string}
       */
      get invalidExplanation() {
        return this.invalid ? this.invalid.explanation : null;
      }
      /**
       * Returns the length of the Interval in the specified unit.
       * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
       * @return {number}
       */
      length(unit = "milliseconds") {
        return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;
      }
      /**
       * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
       * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
       * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
       * @param {string} [unit='milliseconds'] - the unit of time to count.
       * @param {Object} opts - options
       * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; this operation will always use the locale of the start DateTime
       * @return {number}
       */
      count(unit = "milliseconds", opts) {
        if (!this.isValid)
          return NaN;
        const start = this.start.startOf(unit, opts);
        let end;
        if (opts == null ? void 0 : opts.useLocaleWeeks) {
          end = this.end.reconfigure({ locale: start.locale });
        } else {
          end = this.end;
        }
        end = end.startOf(unit, opts);
        return Math.floor(end.diff(start, unit).get(unit)) + (end.valueOf() !== this.end.valueOf());
      }
      /**
       * Returns whether this Interval's start and end are both in the same unit of time
       * @param {string} unit - the unit of time to check sameness on
       * @return {boolean}
       */
      hasSame(unit) {
        return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
      }
      /**
       * Return whether this Interval has the same start and end DateTimes.
       * @return {boolean}
       */
      isEmpty() {
        return this.s.valueOf() === this.e.valueOf();
      }
      /**
       * Return whether this Interval's start is after the specified DateTime.
       * @param {DateTime} dateTime
       * @return {boolean}
       */
      isAfter(dateTime) {
        if (!this.isValid)
          return false;
        return this.s > dateTime;
      }
      /**
       * Return whether this Interval's end is before the specified DateTime.
       * @param {DateTime} dateTime
       * @return {boolean}
       */
      isBefore(dateTime) {
        if (!this.isValid)
          return false;
        return this.e <= dateTime;
      }
      /**
       * Return whether this Interval contains the specified DateTime.
       * @param {DateTime} dateTime
       * @return {boolean}
       */
      contains(dateTime) {
        if (!this.isValid)
          return false;
        return this.s <= dateTime && this.e > dateTime;
      }
      /**
       * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
       * @param {Object} values - the values to set
       * @param {DateTime} values.start - the starting DateTime
       * @param {DateTime} values.end - the ending DateTime
       * @return {Interval}
       */
      set({ start, end } = {}) {
        if (!this.isValid)
          return this;
        return _Interval.fromDateTimes(start || this.s, end || this.e);
      }
      /**
       * Split this Interval at each of the specified DateTimes
       * @param {...DateTime} dateTimes - the unit of time to count.
       * @return {Array}
       */
      splitAt(...dateTimes) {
        if (!this.isValid)
          return [];
        const sorted = dateTimes.map(friendlyDateTime).filter((d) => this.contains(d)).sort((a, b) => a.toMillis() - b.toMillis()), results = [];
        let { s: s2 } = this, i = 0;
        while (s2 < this.e) {
          const added = sorted[i] || this.e, next = +added > +this.e ? this.e : added;
          results.push(_Interval.fromDateTimes(s2, next));
          s2 = next;
          i += 1;
        }
        return results;
      }
      /**
       * Split this Interval into smaller Intervals, each of the specified length.
       * Left over time is grouped into a smaller interval
       * @param {Duration|Object|number} duration - The length of each resulting interval.
       * @return {Array}
       */
      splitBy(duration) {
        const dur = Duration.fromDurationLike(duration);
        if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
          return [];
        }
        let { s: s2 } = this, idx = 1, next;
        const results = [];
        while (s2 < this.e) {
          const added = this.start.plus(dur.mapUnits((x) => x * idx));
          next = +added > +this.e ? this.e : added;
          results.push(_Interval.fromDateTimes(s2, next));
          s2 = next;
          idx += 1;
        }
        return results;
      }
      /**
       * Split this Interval into the specified number of smaller intervals.
       * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
       * @return {Array}
       */
      divideEqually(numberOfParts) {
        if (!this.isValid)
          return [];
        return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
      }
      /**
       * Return whether this Interval overlaps with the specified Interval
       * @param {Interval} other
       * @return {boolean}
       */
      overlaps(other) {
        return this.e > other.s && this.s < other.e;
      }
      /**
       * Return whether this Interval's end is adjacent to the specified Interval's start.
       * @param {Interval} other
       * @return {boolean}
       */
      abutsStart(other) {
        if (!this.isValid)
          return false;
        return +this.e === +other.s;
      }
      /**
       * Return whether this Interval's start is adjacent to the specified Interval's end.
       * @param {Interval} other
       * @return {boolean}
       */
      abutsEnd(other) {
        if (!this.isValid)
          return false;
        return +other.e === +this.s;
      }
      /**
       * Return whether this Interval engulfs the start and end of the specified Interval.
       * @param {Interval} other
       * @return {boolean}
       */
      engulfs(other) {
        if (!this.isValid)
          return false;
        return this.s <= other.s && this.e >= other.e;
      }
      /**
       * Return whether this Interval has the same start and end as the specified Interval.
       * @param {Interval} other
       * @return {boolean}
       */
      equals(other) {
        if (!this.isValid || !other.isValid) {
          return false;
        }
        return this.s.equals(other.s) && this.e.equals(other.e);
      }
      /**
       * Return an Interval representing the intersection of this Interval and the specified Interval.
       * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
       * Returns null if the intersection is empty, meaning, the intervals don't intersect.
       * @param {Interval} other
       * @return {Interval}
       */
      intersection(other) {
        if (!this.isValid)
          return this;
        const s2 = this.s > other.s ? this.s : other.s, e = this.e < other.e ? this.e : other.e;
        if (s2 >= e) {
          return null;
        } else {
          return _Interval.fromDateTimes(s2, e);
        }
      }
      /**
       * Return an Interval representing the union of this Interval and the specified Interval.
       * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
       * @param {Interval} other
       * @return {Interval}
       */
      union(other) {
        if (!this.isValid)
          return this;
        const s2 = this.s < other.s ? this.s : other.s, e = this.e > other.e ? this.e : other.e;
        return _Interval.fromDateTimes(s2, e);
      }
      /**
       * Merge an array of Intervals into a equivalent minimal set of Intervals.
       * Combines overlapping and adjacent Intervals.
       * @param {Array} intervals
       * @return {Array}
       */
      static merge(intervals) {
        const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce(
          ([sofar, current], item) => {
            if (!current) {
              return [sofar, item];
            } else if (current.overlaps(item) || current.abutsStart(item)) {
              return [sofar, current.union(item)];
            } else {
              return [sofar.concat([current]), item];
            }
          },
          [[], null]
        );
        if (final) {
          found.push(final);
        }
        return found;
      }
      /**
       * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
       * @param {Array} intervals
       * @return {Array}
       */
      static xor(intervals) {
        let start = null, currentCount = 0;
        const results = [], ends = intervals.map((i) => [
          { time: i.s, type: "s" },
          { time: i.e, type: "e" }
        ]), flattened = Array.prototype.concat(...ends), arr = flattened.sort((a, b) => a.time - b.time);
        for (const i of arr) {
          currentCount += i.type === "s" ? 1 : -1;
          if (currentCount === 1) {
            start = i.time;
          } else {
            if (start && +start !== +i.time) {
              results.push(_Interval.fromDateTimes(start, i.time));
            }
            start = null;
          }
        }
        return _Interval.merge(results);
      }
      /**
       * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
       * @param {...Interval} intervals
       * @return {Array}
       */
      difference(...intervals) {
        return _Interval.xor([this].concat(intervals)).map((i) => this.intersection(i)).filter((i) => i && !i.isEmpty());
      }
      /**
       * Returns a string representation of this Interval appropriate for debugging.
       * @return {string}
       */
      toString() {
        if (!this.isValid)
          return INVALID2;
        return `[${this.s.toISO()} \u2013 ${this.e.toISO()})`;
      }
      /**
       * Returns a string representation of this Interval appropriate for the REPL.
       * @return {string}
       */
      [Symbol.for("nodejs.util.inspect.custom")]() {
        if (this.isValid) {
          return `Interval { start: ${this.s.toISO()}, end: ${this.e.toISO()} }`;
        } else {
          return `Interval { Invalid, reason: ${this.invalidReason} }`;
        }
      }
      /**
       * Returns a localized string representing this Interval. Accepts the same options as the
       * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as
       * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method
       * is browser-specific, but in general it will return an appropriate representation of the
       * Interval in the assigned locale. Defaults to the system's locale if no locale has been
       * specified.
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
       * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or
       * Intl.DateTimeFormat constructor options.
       * @param {Object} opts - Options to override the configuration of the start DateTime.
       * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022
       * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022
       * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022
       * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM
       * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p
       * @return {string}
       */
      toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
        return this.isValid ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this) : INVALID2;
      }
      /**
       * Returns an ISO 8601-compliant string representation of this Interval.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
       * @param {Object} opts - The same options as {@link DateTime#toISO}
       * @return {string}
       */
      toISO(opts) {
        if (!this.isValid)
          return INVALID2;
        return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;
      }
      /**
       * Returns an ISO 8601-compliant string representation of date of this Interval.
       * The time components are ignored.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
       * @return {string}
       */
      toISODate() {
        if (!this.isValid)
          return INVALID2;
        return `${this.s.toISODate()}/${this.e.toISODate()}`;
      }
      /**
       * Returns an ISO 8601-compliant string representation of time of this Interval.
       * The date components are ignored.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
       * @param {Object} opts - The same options as {@link DateTime#toISO}
       * @return {string}
       */
      toISOTime(opts) {
        if (!this.isValid)
          return INVALID2;
        return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;
      }
      /**
       * Returns a string representation of this Interval formatted according to the specified format
       * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible
       * formatting tool.
       * @param {string} dateFormat - The format string. This string formats the start and end time.
       * See {@link DateTime#toFormat} for details.
       * @param {Object} opts - Options.
       * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end
       * representations.
       * @return {string}
       */
      toFormat(dateFormat, { separator = " \u2013 " } = {}) {
        if (!this.isValid)
          return INVALID2;
        return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;
      }
      /**
       * Return a Duration representing the time spanned by this interval.
       * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
       * @param {Object} opts - options that affect the creation of the Duration
       * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
       * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
       * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
       * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
       * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
       * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
       * @return {Duration}
       */
      toDuration(unit, opts) {
        if (!this.isValid) {
          return Duration.invalid(this.invalidReason);
        }
        return this.e.diff(this.s, unit, opts);
      }
      /**
       * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
       * @param {function} mapFn
       * @return {Interval}
       * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
       * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
       */
      mapEndpoints(mapFn) {
        return _Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
      }
    };
  }
});

// node_modules/luxon/src/info.js
var Info;
var init_info = __esm({
  "node_modules/luxon/src/info.js"() {
    init_datetime();
    init_settings();
    init_locale();
    init_IANAZone();
    init_zoneUtil();
    init_util();
    Info = class {
      /**
       * Return whether the specified zone contains a DST.
       * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
       * @return {boolean}
       */
      static hasDST(zone = Settings.defaultZone) {
        const proto = DateTime.now().setZone(zone).set({ month: 12 });
        return !zone.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;
      }
      /**
       * Return whether the specified zone is a valid IANA specifier.
       * @param {string} zone - Zone to check
       * @return {boolean}
       */
      static isValidIANAZone(zone) {
        return IANAZone.isValidZone(zone);
      }
      /**
       * Converts the input into a {@link Zone} instance.
       *
       * * If `input` is already a Zone instance, it is returned unchanged.
       * * If `input` is a string containing a valid time zone name, a Zone instance
       *   with that name is returned.
       * * If `input` is a string that doesn't refer to a known time zone, a Zone
       *   instance with {@link Zone#isValid} == false is returned.
       * * If `input is a number, a Zone instance with the specified fixed offset
       *   in minutes is returned.
       * * If `input` is `null` or `undefined`, the default zone is returned.
       * @param {string|Zone|number} [input] - the value to be converted
       * @return {Zone}
       */
      static normalizeZone(input) {
        return normalizeZone(input, Settings.defaultZone);
      }
      /**
       * Get the weekday on which the week starts according to the given locale.
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @param {string} [opts.locObj=null] - an existing locale object to use
       * @returns {number} the start of the week, 1 for Monday through 7 for Sunday
       */
      static getStartOfWeek({ locale = null, locObj = null } = {}) {
        return (locObj || Locale.create(locale)).getStartOfWeek();
      }
      /**
       * Get the minimum number of days necessary in a week before it is considered part of the next year according
       * to the given locale.
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @param {string} [opts.locObj=null] - an existing locale object to use
       * @returns {number}
       */
      static getMinimumDaysInFirstWeek({ locale = null, locObj = null } = {}) {
        return (locObj || Locale.create(locale)).getMinDaysInFirstWeek();
      }
      /**
       * Get the weekdays, which are considered the weekend according to the given locale
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @param {string} [opts.locObj=null] - an existing locale object to use
       * @returns {number[]} an array of weekdays, 1 for Monday through 7 for Sunday
       */
      static getWeekendWeekdays({ locale = null, locObj = null } = {}) {
        return (locObj || Locale.create(locale)).getWeekendDays().slice();
      }
      /**
       * Return an array of standalone month names.
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
       * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @param {string} [opts.numberingSystem=null] - the numbering system
       * @param {string} [opts.locObj=null] - an existing locale object to use
       * @param {string} [opts.outputCalendar='gregory'] - the calendar
       * @example Info.months()[0] //=> 'January'
       * @example Info.months('short')[0] //=> 'Jan'
       * @example Info.months('numeric')[0] //=> '1'
       * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
       * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
       * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
       * @return {Array}
       */
      static months(length = "long", { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}) {
        return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);
      }
      /**
       * Return an array of format month names.
       * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
       * changes the string.
       * See {@link Info#months}
       * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @param {string} [opts.numberingSystem=null] - the numbering system
       * @param {string} [opts.locObj=null] - an existing locale object to use
       * @param {string} [opts.outputCalendar='gregory'] - the calendar
       * @return {Array}
       */
      static monthsFormat(length = "long", { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}) {
        return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);
      }
      /**
       * Return an array of standalone week names.
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
       * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @param {string} [opts.numberingSystem=null] - the numbering system
       * @param {string} [opts.locObj=null] - an existing locale object to use
       * @example Info.weekdays()[0] //=> 'Monday'
       * @example Info.weekdays('short')[0] //=> 'Mon'
       * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
       * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
       * @return {Array}
       */
      static weekdays(length = "long", { locale = null, numberingSystem = null, locObj = null } = {}) {
        return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);
      }
      /**
       * Return an array of format week names.
       * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
       * changes the string.
       * See {@link Info#weekdays}
       * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
       * @param {Object} opts - options
       * @param {string} [opts.locale=null] - the locale code
       * @param {string} [opts.numberingSystem=null] - the numbering system
       * @param {string} [opts.locObj=null] - an existing locale object to use
       * @return {Array}
       */
      static weekdaysFormat(length = "long", { locale = null, numberingSystem = null, locObj = null } = {}) {
        return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);
      }
      /**
       * Return an array of meridiems.
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @example Info.meridiems() //=> [ 'AM', 'PM' ]
       * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
       * @return {Array}
       */
      static meridiems({ locale = null } = {}) {
        return Locale.create(locale).meridiems();
      }
      /**
       * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
       * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @example Info.eras() //=> [ 'BC', 'AD' ]
       * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
       * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
       * @return {Array}
       */
      static eras(length = "short", { locale = null } = {}) {
        return Locale.create(locale, null, "gregory").eras(length);
      }
      /**
       * Return the set of available features in this environment.
       * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.
       * Keys:
       * * `relative`: whether this environment supports relative time formatting
       * * `localeWeek`: whether this environment supports different weekdays for the start of the week based on the locale
       * @example Info.features() //=> { relative: false, localeWeek: true }
       * @return {Object}
       */
      static features() {
        return { relative: hasRelative(), localeWeek: hasLocaleWeekInfo() };
      }
    };
  }
});

// node_modules/luxon/src/impl/diff.js
function dayDiff(earlier, later) {
  const utcDayStart = (dt) => dt.toUTC(0, { keepLocalTime: true }).startOf("day").valueOf(), ms = utcDayStart(later) - utcDayStart(earlier);
  return Math.floor(Duration.fromMillis(ms).as("days"));
}
function highOrderDiffs(cursor, later, units) {
  const differs = [
    ["years", (a, b) => b.year - a.year],
    ["quarters", (a, b) => b.quarter - a.quarter + (b.year - a.year) * 4],
    ["months", (a, b) => b.month - a.month + (b.year - a.year) * 12],
    [
      "weeks",
      (a, b) => {
        const days = dayDiff(a, b);
        return (days - days % 7) / 7;
      }
    ],
    ["days", dayDiff]
  ];
  const results = {};
  const earlier = cursor;
  let lowestOrder, highWater;
  for (const [unit, differ] of differs) {
    if (units.indexOf(unit) >= 0) {
      lowestOrder = unit;
      results[unit] = differ(cursor, later);
      highWater = earlier.plus(results);
      if (highWater > later) {
        results[unit]--;
        cursor = earlier.plus(results);
        if (cursor > later) {
          highWater = cursor;
          results[unit]--;
          cursor = earlier.plus(results);
        }
      } else {
        cursor = highWater;
      }
    }
  }
  return [cursor, results, highWater, lowestOrder];
}
function diff_default(earlier, later, units, opts) {
  let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);
  const remainingMillis = later - cursor;
  const lowerOrderUnits = units.filter(
    (u) => ["hours", "minutes", "seconds", "milliseconds"].indexOf(u) >= 0
  );
  if (lowerOrderUnits.length === 0) {
    if (highWater < later) {
      highWater = cursor.plus({ [lowestOrder]: 1 });
    }
    if (highWater !== cursor) {
      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
    }
  }
  const duration = Duration.fromObject(results, opts);
  if (lowerOrderUnits.length > 0) {
    return Duration.fromMillis(remainingMillis, opts).shiftTo(...lowerOrderUnits).plus(duration);
  } else {
    return duration;
  }
}
var init_diff = __esm({
  "node_modules/luxon/src/impl/diff.js"() {
    init_duration();
  }
});

// node_modules/luxon/src/impl/digits.js
function parseDigits(str) {
  let value = parseInt(str, 10);
  if (isNaN(value)) {
    value = "";
    for (let i = 0; i < str.length; i++) {
      const code = str.charCodeAt(i);
      if (str[i].search(numberingSystems.hanidec) !== -1) {
        value += hanidecChars.indexOf(str[i]);
      } else {
        for (const key in numberingSystemsUTF16) {
          const [min, max] = numberingSystemsUTF16[key];
          if (code >= min && code <= max) {
            value += code - min;
          }
        }
      }
    }
    return parseInt(value, 10);
  } else {
    return value;
  }
}
function digitRegex({ numberingSystem }, append = "") {
  return new RegExp(`${numberingSystems[numberingSystem || "latn"]}${append}`);
}
var numberingSystems, numberingSystemsUTF16, hanidecChars;
var init_digits = __esm({
  "node_modules/luxon/src/impl/digits.js"() {
    numberingSystems = {
      arab: "[\u0660-\u0669]",
      arabext: "[\u06F0-\u06F9]",
      bali: "[\u1B50-\u1B59]",
      beng: "[\u09E6-\u09EF]",
      deva: "[\u0966-\u096F]",
      fullwide: "[\uFF10-\uFF19]",
      gujr: "[\u0AE6-\u0AEF]",
      hanidec: "[\u3007|\u4E00|\u4E8C|\u4E09|\u56DB|\u4E94|\u516D|\u4E03|\u516B|\u4E5D]",
      khmr: "[\u17E0-\u17E9]",
      knda: "[\u0CE6-\u0CEF]",
      laoo: "[\u0ED0-\u0ED9]",
      limb: "[\u1946-\u194F]",
      mlym: "[\u0D66-\u0D6F]",
      mong: "[\u1810-\u1819]",
      mymr: "[\u1040-\u1049]",
      orya: "[\u0B66-\u0B6F]",
      tamldec: "[\u0BE6-\u0BEF]",
      telu: "[\u0C66-\u0C6F]",
      thai: "[\u0E50-\u0E59]",
      tibt: "[\u0F20-\u0F29]",
      latn: "\\d"
    };
    numberingSystemsUTF16 = {
      arab: [1632, 1641],
      arabext: [1776, 1785],
      bali: [6992, 7001],
      beng: [2534, 2543],
      deva: [2406, 2415],
      fullwide: [65296, 65303],
      gujr: [2790, 2799],
      khmr: [6112, 6121],
      knda: [3302, 3311],
      laoo: [3792, 3801],
      limb: [6470, 6479],
      mlym: [3430, 3439],
      mong: [6160, 6169],
      mymr: [4160, 4169],
      orya: [2918, 2927],
      tamldec: [3046, 3055],
      telu: [3174, 3183],
      thai: [3664, 3673],
      tibt: [3872, 3881]
    };
    hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");
  }
});

// node_modules/luxon/src/impl/tokenParser.js
function intUnit(regex, post = (i) => i) {
  return { regex, deser: ([s2]) => post(parseDigits(s2)) };
}
function fixListRegex(s2) {
  return s2.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);
}
function stripInsensitivities(s2) {
  return s2.replace(/\./g, "").replace(spaceOrNBSPRegExp, " ").toLowerCase();
}
function oneOf(strings, startIndex) {
  if (strings === null) {
    return null;
  } else {
    return {
      regex: RegExp(strings.map(fixListRegex).join("|")),
      deser: ([s2]) => strings.findIndex((i) => stripInsensitivities(s2) === stripInsensitivities(i)) + startIndex
    };
  }
}
function offset(regex, groups) {
  return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };
}
function simple(regex) {
  return { regex, deser: ([s2]) => s2 };
}
function escapeToken(value) {
  return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
}
function unitForToken(token, loc) {
  const one = digitRegex(loc), two = digitRegex(loc, "{2}"), three = digitRegex(loc, "{3}"), four = digitRegex(loc, "{4}"), six = digitRegex(loc, "{6}"), oneOrTwo = digitRegex(loc, "{1,2}"), oneToThree = digitRegex(loc, "{1,3}"), oneToSix = digitRegex(loc, "{1,6}"), oneToNine = digitRegex(loc, "{1,9}"), twoToFour = digitRegex(loc, "{2,4}"), fourToSix = digitRegex(loc, "{4,6}"), literal = (t) => ({ regex: RegExp(escapeToken(t.val)), deser: ([s2]) => s2, literal: true }), unitate = (t) => {
    if (token.literal) {
      return literal(t);
    }
    switch (t.val) {
      case "G":
        return oneOf(loc.eras("short"), 0);
      case "GG":
        return oneOf(loc.eras("long"), 0);
      case "y":
        return intUnit(oneToSix);
      case "yy":
        return intUnit(twoToFour, untruncateYear);
      case "yyyy":
        return intUnit(four);
      case "yyyyy":
        return intUnit(fourToSix);
      case "yyyyyy":
        return intUnit(six);
      case "M":
        return intUnit(oneOrTwo);
      case "MM":
        return intUnit(two);
      case "MMM":
        return oneOf(loc.months("short", true), 1);
      case "MMMM":
        return oneOf(loc.months("long", true), 1);
      case "L":
        return intUnit(oneOrTwo);
      case "LL":
        return intUnit(two);
      case "LLL":
        return oneOf(loc.months("short", false), 1);
      case "LLLL":
        return oneOf(loc.months("long", false), 1);
      case "d":
        return intUnit(oneOrTwo);
      case "dd":
        return intUnit(two);
      case "o":
        return intUnit(oneToThree);
      case "ooo":
        return intUnit(three);
      case "HH":
        return intUnit(two);
      case "H":
        return intUnit(oneOrTwo);
      case "hh":
        return intUnit(two);
      case "h":
        return intUnit(oneOrTwo);
      case "mm":
        return intUnit(two);
      case "m":
        return intUnit(oneOrTwo);
      case "q":
        return intUnit(oneOrTwo);
      case "qq":
        return intUnit(two);
      case "s":
        return intUnit(oneOrTwo);
      case "ss":
        return intUnit(two);
      case "S":
        return intUnit(oneToThree);
      case "SSS":
        return intUnit(three);
      case "u":
        return simple(oneToNine);
      case "uu":
        return simple(oneOrTwo);
      case "uuu":
        return intUnit(one);
      case "a":
        return oneOf(loc.meridiems(), 0);
      case "kkkk":
        return intUnit(four);
      case "kk":
        return intUnit(twoToFour, untruncateYear);
      case "W":
        return intUnit(oneOrTwo);
      case "WW":
        return intUnit(two);
      case "E":
      case "c":
        return intUnit(one);
      case "EEE":
        return oneOf(loc.weekdays("short", false), 1);
      case "EEEE":
        return oneOf(loc.weekdays("long", false), 1);
      case "ccc":
        return oneOf(loc.weekdays("short", true), 1);
      case "cccc":
        return oneOf(loc.weekdays("long", true), 1);
      case "Z":
      case "ZZ":
        return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);
      case "ZZZ":
        return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);
      case "z":
        return simple(/[a-z_+-/]{1,256}?/i);
      case " ":
        return simple(/[^\S\n\r]/);
      default:
        return literal(t);
    }
  };
  const unit = unitate(token) || {
    invalidReason: MISSING_FTP
  };
  unit.token = token;
  return unit;
}
function tokenForPart(part, formatOpts, resolvedOpts) {
  const { type: type2, value } = part;
  if (type2 === "literal") {
    const isSpace = /^\s+$/.test(value);
    return {
      literal: !isSpace,
      val: isSpace ? " " : value
    };
  }
  const style = formatOpts[type2];
  let actualType = type2;
  if (type2 === "hour") {
    if (formatOpts.hour12 != null) {
      actualType = formatOpts.hour12 ? "hour12" : "hour24";
    } else if (formatOpts.hourCycle != null) {
      if (formatOpts.hourCycle === "h11" || formatOpts.hourCycle === "h12") {
        actualType = "hour12";
      } else {
        actualType = "hour24";
      }
    } else {
      actualType = resolvedOpts.hour12 ? "hour12" : "hour24";
    }
  }
  let val = partTypeStyleToTokenVal[actualType];
  if (typeof val === "object") {
    val = val[style];
  }
  if (val) {
    return {
      literal: false,
      val
    };
  }
  return void 0;
}
function buildRegex(units) {
  const re = units.map((u) => u.regex).reduce((f, r) => `${f}(${r.source})`, "");
  return [`^${re}$`, units];
}
function match(input, regex, handlers) {
  const matches = input.match(regex);
  if (matches) {
    const all = {};
    let matchIndex = 1;
    for (const i in handlers) {
      if (hasOwnProperty(handlers, i)) {
        const h = handlers[i], groups = h.groups ? h.groups + 1 : 1;
        if (!h.literal && h.token) {
          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
        }
        matchIndex += groups;
      }
    }
    return [matches, all];
  } else {
    return [matches, {}];
  }
}
function dateTimeFromMatches(matches) {
  const toField = (token) => {
    switch (token) {
      case "S":
        return "millisecond";
      case "s":
        return "second";
      case "m":
        return "minute";
      case "h":
      case "H":
        return "hour";
      case "d":
        return "day";
      case "o":
        return "ordinal";
      case "L":
      case "M":
        return "month";
      case "y":
        return "year";
      case "E":
      case "c":
        return "weekday";
      case "W":
        return "weekNumber";
      case "k":
        return "weekYear";
      case "q":
        return "quarter";
      default:
        return null;
    }
  };
  let zone = null;
  let specificOffset;
  if (!isUndefined(matches.z)) {
    zone = IANAZone.create(matches.z);
  }
  if (!isUndefined(matches.Z)) {
    if (!zone) {
      zone = new FixedOffsetZone(matches.Z);
    }
    specificOffset = matches.Z;
  }
  if (!isUndefined(matches.q)) {
    matches.M = (matches.q - 1) * 3 + 1;
  }
  if (!isUndefined(matches.h)) {
    if (matches.h < 12 && matches.a === 1) {
      matches.h += 12;
    } else if (matches.h === 12 && matches.a === 0) {
      matches.h = 0;
    }
  }
  if (matches.G === 0 && matches.y) {
    matches.y = -matches.y;
  }
  if (!isUndefined(matches.u)) {
    matches.S = parseMillis(matches.u);
  }
  const vals = Object.keys(matches).reduce((r, k) => {
    const f = toField(k);
    if (f) {
      r[f] = matches[k];
    }
    return r;
  }, {});
  return [vals, zone, specificOffset];
}
function getDummyDateTime() {
  if (!dummyDateTimeCache) {
    dummyDateTimeCache = DateTime.fromMillis(1555555555555);
  }
  return dummyDateTimeCache;
}
function maybeExpandMacroToken(token, locale) {
  if (token.literal) {
    return token;
  }
  const formatOpts = Formatter.macroTokenToFormatOpts(token.val);
  const tokens = formatOptsToTokens(formatOpts, locale);
  if (tokens == null || tokens.includes(void 0)) {
    return token;
  }
  return tokens;
}
function expandMacroTokens(tokens, locale) {
  return Array.prototype.concat(...tokens.map((t) => maybeExpandMacroToken(t, locale)));
}
function explainFromTokens(locale, input, format) {
  const tokens = expandMacroTokens(Formatter.parseFormat(format), locale), units = tokens.map((t) => unitForToken(t, locale)), disqualifyingUnit = units.find((t) => t.invalidReason);
  if (disqualifyingUnit) {
    return { input, tokens, invalidReason: disqualifyingUnit.invalidReason };
  } else {
    const [regexString, handlers] = buildRegex(units), regex = RegExp(regexString, "i"), [rawMatches, matches] = match(input, regex, handlers), [result, zone, specificOffset] = matches ? dateTimeFromMatches(matches) : [null, null, void 0];
    if (hasOwnProperty(matches, "a") && hasOwnProperty(matches, "H")) {
      throw new ConflictingSpecificationError(
        "Can't include meridiem when specifying 24-hour format"
      );
    }
    return { input, tokens, regex, rawMatches, matches, result, zone, specificOffset };
  }
}
function parseFromTokens(locale, input, format) {
  const { result, zone, specificOffset, invalidReason } = explainFromTokens(locale, input, format);
  return [result, zone, specificOffset, invalidReason];
}
function formatOptsToTokens(formatOpts, locale) {
  if (!formatOpts) {
    return null;
  }
  const formatter = Formatter.create(locale, formatOpts);
  const df = formatter.dtFormatter(getDummyDateTime());
  const parts = df.formatToParts();
  const resolvedOpts = df.resolvedOptions();
  return parts.map((p) => tokenForPart(p, formatOpts, resolvedOpts));
}
var MISSING_FTP, NBSP, spaceOrNBSP, spaceOrNBSPRegExp, partTypeStyleToTokenVal, dummyDateTimeCache;
var init_tokenParser = __esm({
  "node_modules/luxon/src/impl/tokenParser.js"() {
    init_util();
    init_formatter();
    init_fixedOffsetZone();
    init_IANAZone();
    init_datetime();
    init_digits();
    init_errors();
    MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";
    NBSP = String.fromCharCode(160);
    spaceOrNBSP = `[ ${NBSP}]`;
    spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");
    partTypeStyleToTokenVal = {
      year: {
        "2-digit": "yy",
        numeric: "yyyyy"
      },
      month: {
        numeric: "M",
        "2-digit": "MM",
        short: "MMM",
        long: "MMMM"
      },
      day: {
        numeric: "d",
        "2-digit": "dd"
      },
      weekday: {
        short: "EEE",
        long: "EEEE"
      },
      dayperiod: "a",
      dayPeriod: "a",
      hour12: {
        numeric: "h",
        "2-digit": "hh"
      },
      hour24: {
        numeric: "H",
        "2-digit": "HH"
      },
      minute: {
        numeric: "m",
        "2-digit": "mm"
      },
      second: {
        numeric: "s",
        "2-digit": "ss"
      },
      timeZoneName: {
        long: "ZZZZZ",
        short: "ZZZ"
      }
    };
    dummyDateTimeCache = null;
  }
});

// node_modules/luxon/src/datetime.js
function unsupportedZone(zone) {
  return new Invalid("unsupported zone", `the zone "${zone.name}" is not supported`);
}
function possiblyCachedWeekData(dt) {
  if (dt.weekData === null) {
    dt.weekData = gregorianToWeek(dt.c);
  }
  return dt.weekData;
}
function possiblyCachedLocalWeekData(dt) {
  if (dt.localWeekData === null) {
    dt.localWeekData = gregorianToWeek(
      dt.c,
      dt.loc.getMinDaysInFirstWeek(),
      dt.loc.getStartOfWeek()
    );
  }
  return dt.localWeekData;
}
function clone2(inst, alts) {
  const current = {
    ts: inst.ts,
    zone: inst.zone,
    c: inst.c,
    o: inst.o,
    loc: inst.loc,
    invalid: inst.invalid
  };
  return new DateTime({ ...current, ...alts, old: current });
}
function fixOffset(localTS, o, tz) {
  let utcGuess = localTS - o * 60 * 1e3;
  const o2 = tz.offset(utcGuess);
  if (o === o2) {
    return [utcGuess, o];
  }
  utcGuess -= (o2 - o) * 60 * 1e3;
  const o3 = tz.offset(utcGuess);
  if (o2 === o3) {
    return [utcGuess, o2];
  }
  return [localTS - Math.min(o2, o3) * 60 * 1e3, Math.max(o2, o3)];
}
function tsToObj(ts, offset2) {
  ts += offset2 * 60 * 1e3;
  const d = new Date(ts);
  return {
    year: d.getUTCFullYear(),
    month: d.getUTCMonth() + 1,
    day: d.getUTCDate(),
    hour: d.getUTCHours(),
    minute: d.getUTCMinutes(),
    second: d.getUTCSeconds(),
    millisecond: d.getUTCMilliseconds()
  };
}
function objToTS(obj, offset2, zone) {
  return fixOffset(objToLocalTS(obj), offset2, zone);
}
function adjustTime(inst, dur) {
  const oPre = inst.o, year = inst.c.year + Math.trunc(dur.years), month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3, c = {
    ...inst.c,
    year,
    month,
    day: Math.min(inst.c.day, daysInMonth(year, month)) + Math.trunc(dur.days) + Math.trunc(dur.weeks) * 7
  }, millisToAdd = Duration.fromObject({
    years: dur.years - Math.trunc(dur.years),
    quarters: dur.quarters - Math.trunc(dur.quarters),
    months: dur.months - Math.trunc(dur.months),
    weeks: dur.weeks - Math.trunc(dur.weeks),
    days: dur.days - Math.trunc(dur.days),
    hours: dur.hours,
    minutes: dur.minutes,
    seconds: dur.seconds,
    milliseconds: dur.milliseconds
  }).as("milliseconds"), localTS = objToLocalTS(c);
  let [ts, o] = fixOffset(localTS, oPre, inst.zone);
  if (millisToAdd !== 0) {
    ts += millisToAdd;
    o = inst.zone.offset(ts);
  }
  return { ts, o };
}
function parseDataToDateTime(parsed, parsedZone, opts, format, text, specificOffset) {
  const { setZone, zone } = opts;
  if (parsed && Object.keys(parsed).length !== 0 || parsedZone) {
    const interpretationZone = parsedZone || zone, inst = DateTime.fromObject(parsed, {
      ...opts,
      zone: interpretationZone,
      specificOffset
    });
    return setZone ? inst : inst.setZone(zone);
  } else {
    return DateTime.invalid(
      new Invalid("unparsable", `the input "${text}" can't be parsed as ${format}`)
    );
  }
}
function toTechFormat(dt, format, allowZ = true) {
  return dt.isValid ? Formatter.create(Locale.create("en-US"), {
    allowZ,
    forceSimple: true
  }).formatDateTimeFromString(dt, format) : null;
}
function toISODate(o, extended) {
  const longFormat = o.c.year > 9999 || o.c.year < 0;
  let c = "";
  if (longFormat && o.c.year >= 0)
    c += "+";
  c += padStart(o.c.year, longFormat ? 6 : 4);
  if (extended) {
    c += "-";
    c += padStart(o.c.month);
    c += "-";
    c += padStart(o.c.day);
  } else {
    c += padStart(o.c.month);
    c += padStart(o.c.day);
  }
  return c;
}
function toISOTime(o, extended, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone) {
  let c = padStart(o.c.hour);
  if (extended) {
    c += ":";
    c += padStart(o.c.minute);
    if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {
      c += ":";
    }
  } else {
    c += padStart(o.c.minute);
  }
  if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {
    c += padStart(o.c.second);
    if (o.c.millisecond !== 0 || !suppressMilliseconds) {
      c += ".";
      c += padStart(o.c.millisecond, 3);
    }
  }
  if (includeOffset) {
    if (o.isOffsetFixed && o.offset === 0 && !extendedZone) {
      c += "Z";
    } else if (o.o < 0) {
      c += "-";
      c += padStart(Math.trunc(-o.o / 60));
      c += ":";
      c += padStart(Math.trunc(-o.o % 60));
    } else {
      c += "+";
      c += padStart(Math.trunc(o.o / 60));
      c += ":";
      c += padStart(Math.trunc(o.o % 60));
    }
  }
  if (extendedZone) {
    c += "[" + o.zone.ianaName + "]";
  }
  return c;
}
function normalizeUnit(unit) {
  const normalized = {
    year: "year",
    years: "year",
    month: "month",
    months: "month",
    day: "day",
    days: "day",
    hour: "hour",
    hours: "hour",
    minute: "minute",
    minutes: "minute",
    quarter: "quarter",
    quarters: "quarter",
    second: "second",
    seconds: "second",
    millisecond: "millisecond",
    milliseconds: "millisecond",
    weekday: "weekday",
    weekdays: "weekday",
    weeknumber: "weekNumber",
    weeksnumber: "weekNumber",
    weeknumbers: "weekNumber",
    weekyear: "weekYear",
    weekyears: "weekYear",
    ordinal: "ordinal"
  }[unit.toLowerCase()];
  if (!normalized)
    throw new InvalidUnitError(unit);
  return normalized;
}
function normalizeUnitWithLocalWeeks(unit) {
  switch (unit.toLowerCase()) {
    case "localweekday":
    case "localweekdays":
      return "localWeekday";
    case "localweeknumber":
    case "localweeknumbers":
      return "localWeekNumber";
    case "localweekyear":
    case "localweekyears":
      return "localWeekYear";
    default:
      return normalizeUnit(unit);
  }
}
function quickDT(obj, opts) {
  const zone = normalizeZone(opts.zone, Settings.defaultZone), loc = Locale.fromObject(opts), tsNow = Settings.now();
  let ts, o;
  if (!isUndefined(obj.year)) {
    for (const u of orderedUnits2) {
      if (isUndefined(obj[u])) {
        obj[u] = defaultUnitValues[u];
      }
    }
    const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);
    if (invalid) {
      return DateTime.invalid(invalid);
    }
    const offsetProvis = zone.offset(tsNow);
    [ts, o] = objToTS(obj, offsetProvis, zone);
  } else {
    ts = tsNow;
  }
  return new DateTime({ ts, zone, loc, o });
}
function diffRelative(start, end, opts) {
  const round = isUndefined(opts.round) ? true : opts.round, format = (c, unit) => {
    c = roundTo(c, round || opts.calendary ? 0 : 2, true);
    const formatter = end.loc.clone(opts).relFormatter(opts);
    return formatter.format(c, unit);
  }, differ = (unit) => {
    if (opts.calendary) {
      if (!end.hasSame(start, unit)) {
        return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);
      } else
        return 0;
    } else {
      return end.diff(start, unit).get(unit);
    }
  };
  if (opts.unit) {
    return format(differ(opts.unit), opts.unit);
  }
  for (const unit of opts.units) {
    const count = differ(unit);
    if (Math.abs(count) >= 1) {
      return format(count, unit);
    }
  }
  return format(start > end ? -0 : 0, opts.units[opts.units.length - 1]);
}
function lastOpts(argList) {
  let opts = {}, args;
  if (argList.length > 0 && typeof argList[argList.length - 1] === "object") {
    opts = argList[argList.length - 1];
    args = Array.from(argList).slice(0, argList.length - 1);
  } else {
    args = Array.from(argList);
  }
  return [opts, args];
}
function friendlyDateTime(dateTimeish) {
  if (DateTime.isDateTime(dateTimeish)) {
    return dateTimeish;
  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {
    return DateTime.fromJSDate(dateTimeish);
  } else if (dateTimeish && typeof dateTimeish === "object") {
    return DateTime.fromObject(dateTimeish);
  } else {
    throw new InvalidArgumentError(
      `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`
    );
  }
}
var INVALID3, MAX_DATE, defaultUnitValues, defaultWeekUnitValues, defaultOrdinalUnitValues, orderedUnits2, orderedWeekUnits, orderedOrdinalUnits, DateTime;
var init_datetime = __esm({
  "node_modules/luxon/src/datetime.js"() {
    init_duration();
    init_interval();
    init_settings();
    init_info();
    init_formatter();
    init_fixedOffsetZone();
    init_locale();
    init_util();
    init_zoneUtil();
    init_diff();
    init_regexParser();
    init_tokenParser();
    init_conversions();
    init_formats();
    init_errors();
    init_invalid();
    INVALID3 = "Invalid DateTime";
    MAX_DATE = 864e13;
    defaultUnitValues = {
      month: 1,
      day: 1,
      hour: 0,
      minute: 0,
      second: 0,
      millisecond: 0
    };
    defaultWeekUnitValues = {
      weekNumber: 1,
      weekday: 1,
      hour: 0,
      minute: 0,
      second: 0,
      millisecond: 0
    };
    defaultOrdinalUnitValues = {
      ordinal: 1,
      hour: 0,
      minute: 0,
      second: 0,
      millisecond: 0
    };
    orderedUnits2 = ["year", "month", "day", "hour", "minute", "second", "millisecond"];
    orderedWeekUnits = [
      "weekYear",
      "weekNumber",
      "weekday",
      "hour",
      "minute",
      "second",
      "millisecond"
    ];
    orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"];
    DateTime = class _DateTime {
      /**
       * @access private
       */
      constructor(config) {
        const zone = config.zone || Settings.defaultZone;
        let invalid = config.invalid || (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) || (!zone.isValid ? unsupportedZone(zone) : null);
        this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;
        let c = null, o = null;
        if (!invalid) {
          const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);
          if (unchanged) {
            [c, o] = [config.old.c, config.old.o];
          } else {
            const ot = zone.offset(this.ts);
            c = tsToObj(this.ts, ot);
            invalid = Number.isNaN(c.year) ? new Invalid("invalid input") : null;
            c = invalid ? null : c;
            o = invalid ? null : ot;
          }
        }
        this._zone = zone;
        this.loc = config.loc || Locale.create();
        this.invalid = invalid;
        this.weekData = null;
        this.localWeekData = null;
        this.c = c;
        this.o = o;
        this.isLuxonDateTime = true;
      }
      // CONSTRUCT
      /**
       * Create a DateTime for the current instant, in the system's time zone.
       *
       * Use Settings to override these default values if needed.
       * @example DateTime.now().toISO() //~> now in the ISO format
       * @return {DateTime}
       */
      static now() {
        return new _DateTime({});
      }
      /**
       * Create a local DateTime
       * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
       * @param {number} [month=1] - The month, 1-indexed
       * @param {number} [day=1] - The day of the month, 1-indexed
       * @param {number} [hour=0] - The hour of the day, in 24-hour time
       * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
       * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
       * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
       * @example DateTime.local()                                  //~> now
       * @example DateTime.local({ zone: "America/New_York" })      //~> now, in US east coast time
       * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00
       * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00
       * @example DateTime.local(2017, 3, 12, { locale: "fr" })     //~> 2017-03-12T00:00:00, with a French locale
       * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00
       * @example DateTime.local(2017, 3, 12, 5, { zone: "utc" })   //~> 2017-03-12T05:00:00, in UTC
       * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00
       * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10
       * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765
       * @return {DateTime}
       */
      static local() {
        const [opts, args] = lastOpts(arguments), [year, month, day, hour, minute, second, millisecond] = args;
        return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
      }
      /**
       * Create a DateTime in UTC
       * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
       * @param {number} [month=1] - The month, 1-indexed
       * @param {number} [day=1] - The day of the month
       * @param {number} [hour=0] - The hour of the day, in 24-hour time
       * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
       * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
       * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
       * @param {Object} options - configuration options for the DateTime
       * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
       * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance
       * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance
       * @example DateTime.utc()                                              //~> now
       * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z
       * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z
       * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z
       * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z
       * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z
       * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: "fr" })          //~> 2017-03-12T05:45:00Z with a French locale
       * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z
       * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: "fr" }) //~> 2017-03-12T05:45:10.765Z with a French locale
       * @return {DateTime}
       */
      static utc() {
        const [opts, args] = lastOpts(arguments), [year, month, day, hour, minute, second, millisecond] = args;
        opts.zone = FixedOffsetZone.utcInstance;
        return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
      }
      /**
       * Create a DateTime from a JavaScript Date object. Uses the default zone.
       * @param {Date} date - a JavaScript Date object
       * @param {Object} options - configuration options for the DateTime
       * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
       * @return {DateTime}
       */
      static fromJSDate(date, options = {}) {
        const ts = isDate(date) ? date.valueOf() : NaN;
        if (Number.isNaN(ts)) {
          return _DateTime.invalid("invalid input");
        }
        const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);
        if (!zoneToUse.isValid) {
          return _DateTime.invalid(unsupportedZone(zoneToUse));
        }
        return new _DateTime({
          ts,
          zone: zoneToUse,
          loc: Locale.fromObject(options)
        });
      }
      /**
       * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
       * @param {number} milliseconds - a number of milliseconds since 1970 UTC
       * @param {Object} options - configuration options for the DateTime
       * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
       * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
       * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @return {DateTime}
       */
      static fromMillis(milliseconds, options = {}) {
        if (!isNumber(milliseconds)) {
          throw new InvalidArgumentError(
            `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`
          );
        } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
          return _DateTime.invalid("Timestamp out of range");
        } else {
          return new _DateTime({
            ts: milliseconds,
            zone: normalizeZone(options.zone, Settings.defaultZone),
            loc: Locale.fromObject(options)
          });
        }
      }
      /**
       * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
       * @param {number} seconds - a number of seconds since 1970 UTC
       * @param {Object} options - configuration options for the DateTime
       * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
       * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
       * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @return {DateTime}
       */
      static fromSeconds(seconds, options = {}) {
        if (!isNumber(seconds)) {
          throw new InvalidArgumentError("fromSeconds requires a numerical input");
        } else {
          return new _DateTime({
            ts: seconds * 1e3,
            zone: normalizeZone(options.zone, Settings.defaultZone),
            loc: Locale.fromObject(options)
          });
        }
      }
      /**
       * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.
       * @param {Object} obj - the object to create the DateTime from
       * @param {number} obj.year - a year, such as 1987
       * @param {number} obj.month - a month, 1-12
       * @param {number} obj.day - a day of the month, 1-31, depending on the month
       * @param {number} obj.ordinal - day of the year, 1-365 or 366
       * @param {number} obj.weekYear - an ISO week year
       * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
       * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
       * @param {number} obj.localWeekYear - a week year, according to the locale
       * @param {number} obj.localWeekNumber - a week number, between 1 and 52 or 53, depending on the year, according to the locale
       * @param {number} obj.localWeekday - a weekday, 1-7, where 1 is the first and 7 is the last day of the week, according to the locale
       * @param {number} obj.hour - hour of the day, 0-23
       * @param {number} obj.minute - minute of the hour, 0-59
       * @param {number} obj.second - second of the minute, 0-59
       * @param {number} obj.millisecond - millisecond of the second, 0-999
       * @param {Object} opts - options for creating this DateTime
       * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
       * @param {string} [opts.locale='system\'s locale'] - a locale to set on the resulting DateTime instance
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
       * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
       * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
       * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),
       * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })
       * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })
       * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
       * @example DateTime.fromObject({ localWeekYear: 2022, localWeekNumber: 1, localWeekday: 1 }, { locale: "en-US" }).toISODate() //=> '2021-12-26'
       * @return {DateTime}
       */
      static fromObject(obj, opts = {}) {
        obj = obj || {};
        const zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);
        if (!zoneToUse.isValid) {
          return _DateTime.invalid(unsupportedZone(zoneToUse));
        }
        const loc = Locale.fromObject(opts);
        const normalized = normalizeObject(obj, normalizeUnitWithLocalWeeks);
        const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, loc);
        const tsNow = Settings.now(), offsetProvis = !isUndefined(opts.specificOffset) ? opts.specificOffset : zoneToUse.offset(tsNow), containsOrdinal = !isUndefined(normalized.ordinal), containsGregorYear = !isUndefined(normalized.year), containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber;
        if ((containsGregor || containsOrdinal) && definiteWeekDef) {
          throw new ConflictingSpecificationError(
            "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
          );
        }
        if (containsGregorMD && containsOrdinal) {
          throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
        }
        const useWeekData = definiteWeekDef || normalized.weekday && !containsGregor;
        let units, defaultValues, objNow = tsToObj(tsNow, offsetProvis);
        if (useWeekData) {
          units = orderedWeekUnits;
          defaultValues = defaultWeekUnitValues;
          objNow = gregorianToWeek(objNow, minDaysInFirstWeek, startOfWeek);
        } else if (containsOrdinal) {
          units = orderedOrdinalUnits;
          defaultValues = defaultOrdinalUnitValues;
          objNow = gregorianToOrdinal(objNow);
        } else {
          units = orderedUnits2;
          defaultValues = defaultUnitValues;
        }
        let foundFirst = false;
        for (const u of units) {
          const v = normalized[u];
          if (!isUndefined(v)) {
            foundFirst = true;
          } else if (foundFirst) {
            normalized[u] = defaultValues[u];
          } else {
            normalized[u] = objNow[u];
          }
        }
        const higherOrderInvalid = useWeekData ? hasInvalidWeekData(normalized, minDaysInFirstWeek, startOfWeek) : containsOrdinal ? hasInvalidOrdinalData(normalized) : hasInvalidGregorianData(normalized), invalid = higherOrderInvalid || hasInvalidTimeData(normalized);
        if (invalid) {
          return _DateTime.invalid(invalid);
        }
        const gregorian = useWeekData ? weekToGregorian(normalized, minDaysInFirstWeek, startOfWeek) : containsOrdinal ? ordinalToGregorian(normalized) : normalized, [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse), inst = new _DateTime({
          ts: tsFinal,
          zone: zoneToUse,
          o: offsetFinal,
          loc
        });
        if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
          return _DateTime.invalid(
            "mismatched weekday",
            `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`
          );
        }
        return inst;
      }
      /**
       * Create a DateTime from an ISO 8601 string
       * @param {string} text - the ISO string
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
       * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
       * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
       * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance
       * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance
       * @example DateTime.fromISO('2016-05-25T09:08:34.123')
       * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
       * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
       * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
       * @example DateTime.fromISO('2016-W05-4')
       * @return {DateTime}
       */
      static fromISO(text, opts = {}) {
        const [vals, parsedZone] = parseISODate(text);
        return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
      }
      /**
       * Create a DateTime from an RFC 2822 string
       * @param {string} text - the RFC 2822 string
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
       * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
       * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
       * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
       * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
       * @return {DateTime}
       */
      static fromRFC2822(text, opts = {}) {
        const [vals, parsedZone] = parseRFC2822Date(text);
        return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
      }
      /**
       * Create a DateTime from an HTTP header date
       * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
       * @param {string} text - the HTTP header date
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
       * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
       * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
       * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
       * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
       * @return {DateTime}
       */
      static fromHTTP(text, opts = {}) {
        const [vals, parsedZone] = parseHTTPDate(text);
        return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
      }
      /**
       * Create a DateTime from an input string and format string.
       * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).
       * @param {string} text - the string to parse
       * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
       * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
       * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
       * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @return {DateTime}
       */
      static fromFormat(text, fmt, opts = {}) {
        if (isUndefined(text) || isUndefined(fmt)) {
          throw new InvalidArgumentError("fromFormat requires an input string and a format");
        }
        const { locale = null, numberingSystem = null } = opts, localeToUse = Locale.fromOpts({
          locale,
          numberingSystem,
          defaultToEN: true
        }), [vals, parsedZone, specificOffset, invalid] = parseFromTokens(localeToUse, text, fmt);
        if (invalid) {
          return _DateTime.invalid(invalid);
        } else {
          return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text, specificOffset);
        }
      }
      /**
       * @deprecated use fromFormat instead
       */
      static fromString(text, fmt, opts = {}) {
        return _DateTime.fromFormat(text, fmt, opts);
      }
      /**
       * Create a DateTime from a SQL date, time, or datetime
       * Defaults to en-US if no locale has been specified, regardless of the system's locale
       * @param {string} text - the string to parse
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
       * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
       * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
       * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @example DateTime.fromSQL('2017-05-15')
       * @example DateTime.fromSQL('2017-05-15 09:12:34')
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
       * @example DateTime.fromSQL('09:12:34.342')
       * @return {DateTime}
       */
      static fromSQL(text, opts = {}) {
        const [vals, parsedZone] = parseSQL(text);
        return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
      }
      /**
       * Create an invalid DateTime.
       * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent.
       * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
       * @return {DateTime}
       */
      static invalid(reason, explanation = null) {
        if (!reason) {
          throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
        }
        const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
        if (Settings.throwOnInvalid) {
          throw new InvalidDateTimeError(invalid);
        } else {
          return new _DateTime({ invalid });
        }
      }
      /**
       * Check if an object is an instance of DateTime. Works across context boundaries
       * @param {object} o
       * @return {boolean}
       */
      static isDateTime(o) {
        return o && o.isLuxonDateTime || false;
      }
      /**
       * Produce the format string for a set of options
       * @param formatOpts
       * @param localeOpts
       * @returns {string}
       */
      static parseFormatForOpts(formatOpts, localeOpts = {}) {
        const tokenList = formatOptsToTokens(formatOpts, Locale.fromObject(localeOpts));
        return !tokenList ? null : tokenList.map((t) => t ? t.val : null).join("");
      }
      /**
       * Produce the the fully expanded format token for the locale
       * Does NOT quote characters, so quoted tokens will not round trip correctly
       * @param fmt
       * @param localeOpts
       * @returns {string}
       */
      static expandFormat(fmt, localeOpts = {}) {
        const expanded = expandMacroTokens(Formatter.parseFormat(fmt), Locale.fromObject(localeOpts));
        return expanded.map((t) => t.val).join("");
      }
      // INFO
      /**
       * Get the value of unit.
       * @param {string} unit - a unit such as 'minute' or 'day'
       * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
       * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
       * @return {number}
       */
      get(unit) {
        return this[unit];
      }
      /**
       * Returns whether the DateTime is valid. Invalid DateTimes occur when:
       * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
       * * The DateTime was created by an operation on another invalid date
       * @type {boolean}
       */
      get isValid() {
        return this.invalid === null;
      }
      /**
       * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
       * @type {string}
       */
      get invalidReason() {
        return this.invalid ? this.invalid.reason : null;
      }
      /**
       * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
       * @type {string}
       */
      get invalidExplanation() {
        return this.invalid ? this.invalid.explanation : null;
      }
      /**
       * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
       *
       * @type {string}
       */
      get locale() {
        return this.isValid ? this.loc.locale : null;
      }
      /**
       * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
       *
       * @type {string}
       */
      get numberingSystem() {
        return this.isValid ? this.loc.numberingSystem : null;
      }
      /**
       * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
       *
       * @type {string}
       */
      get outputCalendar() {
        return this.isValid ? this.loc.outputCalendar : null;
      }
      /**
       * Get the time zone associated with this DateTime.
       * @type {Zone}
       */
      get zone() {
        return this._zone;
      }
      /**
       * Get the name of the time zone.
       * @type {string}
       */
      get zoneName() {
        return this.isValid ? this.zone.name : null;
      }
      /**
       * Get the year
       * @example DateTime.local(2017, 5, 25).year //=> 2017
       * @type {number}
       */
      get year() {
        return this.isValid ? this.c.year : NaN;
      }
      /**
       * Get the quarter
       * @example DateTime.local(2017, 5, 25).quarter //=> 2
       * @type {number}
       */
      get quarter() {
        return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
      }
      /**
       * Get the month (1-12).
       * @example DateTime.local(2017, 5, 25).month //=> 5
       * @type {number}
       */
      get month() {
        return this.isValid ? this.c.month : NaN;
      }
      /**
       * Get the day of the month (1-30ish).
       * @example DateTime.local(2017, 5, 25).day //=> 25
       * @type {number}
       */
      get day() {
        return this.isValid ? this.c.day : NaN;
      }
      /**
       * Get the hour of the day (0-23).
       * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
       * @type {number}
       */
      get hour() {
        return this.isValid ? this.c.hour : NaN;
      }
      /**
       * Get the minute of the hour (0-59).
       * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
       * @type {number}
       */
      get minute() {
        return this.isValid ? this.c.minute : NaN;
      }
      /**
       * Get the second of the minute (0-59).
       * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
       * @type {number}
       */
      get second() {
        return this.isValid ? this.c.second : NaN;
      }
      /**
       * Get the millisecond of the second (0-999).
       * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
       * @type {number}
       */
      get millisecond() {
        return this.isValid ? this.c.millisecond : NaN;
      }
      /**
       * Get the week year
       * @see https://en.wikipedia.org/wiki/ISO_week_date
       * @example DateTime.local(2014, 12, 31).weekYear //=> 2015
       * @type {number}
       */
      get weekYear() {
        return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
      }
      /**
       * Get the week number of the week year (1-52ish).
       * @see https://en.wikipedia.org/wiki/ISO_week_date
       * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
       * @type {number}
       */
      get weekNumber() {
        return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
      }
      /**
       * Get the day of the week.
       * 1 is Monday and 7 is Sunday
       * @see https://en.wikipedia.org/wiki/ISO_week_date
       * @example DateTime.local(2014, 11, 31).weekday //=> 4
       * @type {number}
       */
      get weekday() {
        return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
      }
      /**
       * Returns true if this date is on a weekend according to the locale, false otherwise
       * @returns {boolean}
       */
      get isWeekend() {
        return this.isValid && this.loc.getWeekendDays().includes(this.weekday);
      }
      /**
       * Get the day of the week according to the locale.
       * 1 is the first day of the week and 7 is the last day of the week.
       * If the locale assigns Sunday as the first day of the week, then a date which is a Sunday will return 1,
       * @returns {number}
       */
      get localWeekday() {
        return this.isValid ? possiblyCachedLocalWeekData(this).weekday : NaN;
      }
      /**
       * Get the week number of the week year according to the locale. Different locales assign week numbers differently,
       * because the week can start on different days of the week (see localWeekday) and because a different number of days
       * is required for a week to count as the first week of a year.
       * @returns {number}
       */
      get localWeekNumber() {
        return this.isValid ? possiblyCachedLocalWeekData(this).weekNumber : NaN;
      }
      /**
       * Get the week year according to the locale. Different locales assign week numbers (and therefor week years)
       * differently, see localWeekNumber.
       * @returns {number}
       */
      get localWeekYear() {
        return this.isValid ? possiblyCachedLocalWeekData(this).weekYear : NaN;
      }
      /**
       * Get the ordinal (meaning the day of the year)
       * @example DateTime.local(2017, 5, 25).ordinal //=> 145
       * @type {number|DateTime}
       */
      get ordinal() {
        return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
      }
      /**
       * Get the human readable short month name, such as 'Oct'.
       * Defaults to the system's locale if no locale has been specified
       * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
       * @type {string}
       */
      get monthShort() {
        return this.isValid ? Info.months("short", { locObj: this.loc })[this.month - 1] : null;
      }
      /**
       * Get the human readable long month name, such as 'October'.
       * Defaults to the system's locale if no locale has been specified
       * @example DateTime.local(2017, 10, 30).monthLong //=> October
       * @type {string}
       */
      get monthLong() {
        return this.isValid ? Info.months("long", { locObj: this.loc })[this.month - 1] : null;
      }
      /**
       * Get the human readable short weekday, such as 'Mon'.
       * Defaults to the system's locale if no locale has been specified
       * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
       * @type {string}
       */
      get weekdayShort() {
        return this.isValid ? Info.weekdays("short", { locObj: this.loc })[this.weekday - 1] : null;
      }
      /**
       * Get the human readable long weekday, such as 'Monday'.
       * Defaults to the system's locale if no locale has been specified
       * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
       * @type {string}
       */
      get weekdayLong() {
        return this.isValid ? Info.weekdays("long", { locObj: this.loc })[this.weekday - 1] : null;
      }
      /**
       * Get the UTC offset of this DateTime in minutes
       * @example DateTime.now().offset //=> -240
       * @example DateTime.utc().offset //=> 0
       * @type {number}
       */
      get offset() {
        return this.isValid ? +this.o : NaN;
      }
      /**
       * Get the short human name for the zone's current offset, for example "EST" or "EDT".
       * Defaults to the system's locale if no locale has been specified
       * @type {string}
       */
      get offsetNameShort() {
        if (this.isValid) {
          return this.zone.offsetName(this.ts, {
            format: "short",
            locale: this.locale
          });
        } else {
          return null;
        }
      }
      /**
       * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
       * Defaults to the system's locale if no locale has been specified
       * @type {string}
       */
      get offsetNameLong() {
        if (this.isValid) {
          return this.zone.offsetName(this.ts, {
            format: "long",
            locale: this.locale
          });
        } else {
          return null;
        }
      }
      /**
       * Get whether this zone's offset ever changes, as in a DST.
       * @type {boolean}
       */
      get isOffsetFixed() {
        return this.isValid ? this.zone.isUniversal : null;
      }
      /**
       * Get whether the DateTime is in a DST.
       * @type {boolean}
       */
      get isInDST() {
        if (this.isOffsetFixed) {
          return false;
        } else {
          return this.offset > this.set({ month: 1, day: 1 }).offset || this.offset > this.set({ month: 5 }).offset;
        }
      }
      /**
       * Get those DateTimes which have the same local time as this DateTime, but a different offset from UTC
       * in this DateTime's zone. During DST changes local time can be ambiguous, for example
       * `2023-10-29T02:30:00` in `Europe/Berlin` can have offset `+01:00` or `+02:00`.
       * This method will return both possible DateTimes if this DateTime's local time is ambiguous.
       * @returns {DateTime[]}
       */
      getPossibleOffsets() {
        if (!this.isValid || this.isOffsetFixed) {
          return [this];
        }
        const dayMs = 864e5;
        const minuteMs = 6e4;
        const localTS = objToLocalTS(this.c);
        const oEarlier = this.zone.offset(localTS - dayMs);
        const oLater = this.zone.offset(localTS + dayMs);
        const o1 = this.zone.offset(localTS - oEarlier * minuteMs);
        const o2 = this.zone.offset(localTS - oLater * minuteMs);
        if (o1 === o2) {
          return [this];
        }
        const ts1 = localTS - o1 * minuteMs;
        const ts2 = localTS - o2 * minuteMs;
        const c1 = tsToObj(ts1, o1);
        const c2 = tsToObj(ts2, o2);
        if (c1.hour === c2.hour && c1.minute === c2.minute && c1.second === c2.second && c1.millisecond === c2.millisecond) {
          return [clone2(this, { ts: ts1 }), clone2(this, { ts: ts2 })];
        }
        return [this];
      }
      /**
       * Returns true if this DateTime is in a leap year, false otherwise
       * @example DateTime.local(2016).isInLeapYear //=> true
       * @example DateTime.local(2013).isInLeapYear //=> false
       * @type {boolean}
       */
      get isInLeapYear() {
        return isLeapYear(this.year);
      }
      /**
       * Returns the number of days in this DateTime's month
       * @example DateTime.local(2016, 2).daysInMonth //=> 29
       * @example DateTime.local(2016, 3).daysInMonth //=> 31
       * @type {number}
       */
      get daysInMonth() {
        return daysInMonth(this.year, this.month);
      }
      /**
       * Returns the number of days in this DateTime's year
       * @example DateTime.local(2016).daysInYear //=> 366
       * @example DateTime.local(2013).daysInYear //=> 365
       * @type {number}
       */
      get daysInYear() {
        return this.isValid ? daysInYear(this.year) : NaN;
      }
      /**
       * Returns the number of weeks in this DateTime's year
       * @see https://en.wikipedia.org/wiki/ISO_week_date
       * @example DateTime.local(2004).weeksInWeekYear //=> 53
       * @example DateTime.local(2013).weeksInWeekYear //=> 52
       * @type {number}
       */
      get weeksInWeekYear() {
        return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
      }
      /**
       * Returns the number of weeks in this DateTime's local week year
       * @example DateTime.local(2020, 6, {locale: 'en-US'}).weeksInLocalWeekYear //=> 52
       * @example DateTime.local(2020, 6, {locale: 'de-DE'}).weeksInLocalWeekYear //=> 53
       * @type {number}
       */
      get weeksInLocalWeekYear() {
        return this.isValid ? weeksInWeekYear(
          this.localWeekYear,
          this.loc.getMinDaysInFirstWeek(),
          this.loc.getStartOfWeek()
        ) : NaN;
      }
      /**
       * Returns the resolved Intl options for this DateTime.
       * This is useful in understanding the behavior of formatting methods
       * @param {Object} opts - the same options as toLocaleString
       * @return {Object}
       */
      resolvedLocaleOptions(opts = {}) {
        const { locale, numberingSystem, calendar } = Formatter.create(
          this.loc.clone(opts),
          opts
        ).resolvedOptions(this);
        return { locale, numberingSystem, outputCalendar: calendar };
      }
      // TRANSFORM
      /**
       * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
       *
       * Equivalent to {@link DateTime#setZone}('utc')
       * @param {number} [offset=0] - optionally, an offset from UTC in minutes
       * @param {Object} [opts={}] - options to pass to `setZone()`
       * @return {DateTime}
       */
      toUTC(offset2 = 0, opts = {}) {
        return this.setZone(FixedOffsetZone.instance(offset2), opts);
      }
      /**
       * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
       *
       * Equivalent to `setZone('local')`
       * @return {DateTime}
       */
      toLocal() {
        return this.setZone(Settings.defaultZone);
      }
      /**
       * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
       *
       * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.
       * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.
       * @param {Object} opts - options
       * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
       * @return {DateTime}
       */
      setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {
        zone = normalizeZone(zone, Settings.defaultZone);
        if (zone.equals(this.zone)) {
          return this;
        } else if (!zone.isValid) {
          return _DateTime.invalid(unsupportedZone(zone));
        } else {
          let newTS = this.ts;
          if (keepLocalTime || keepCalendarTime) {
            const offsetGuess = zone.offset(this.ts);
            const asObj = this.toObject();
            [newTS] = objToTS(asObj, offsetGuess, zone);
          }
          return clone2(this, { ts: newTS, zone });
        }
      }
      /**
       * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
       * @param {Object} properties - the properties to set
       * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
       * @return {DateTime}
       */
      reconfigure({ locale, numberingSystem, outputCalendar } = {}) {
        const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });
        return clone2(this, { loc });
      }
      /**
       * "Set" the locale. Returns a newly-constructed DateTime.
       * Just a convenient alias for reconfigure({ locale })
       * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
       * @return {DateTime}
       */
      setLocale(locale) {
        return this.reconfigure({ locale });
      }
      /**
       * "Set" the values of specified units. Returns a newly-constructed DateTime.
       * You can only set units with this method; for "setting" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.
       *
       * This method also supports setting locale-based week units, i.e. `localWeekday`, `localWeekNumber` and `localWeekYear`.
       * They cannot be mixed with ISO-week units like `weekday`.
       * @param {Object} values - a mapping of units to numbers
       * @example dt.set({ year: 2017 })
       * @example dt.set({ hour: 8, minute: 30 })
       * @example dt.set({ weekday: 5 })
       * @example dt.set({ year: 2005, ordinal: 234 })
       * @return {DateTime}
       */
      set(values) {
        if (!this.isValid)
          return this;
        const normalized = normalizeObject(values, normalizeUnitWithLocalWeeks);
        const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, this.loc);
        const settingWeekStuff = !isUndefined(normalized.weekYear) || !isUndefined(normalized.weekNumber) || !isUndefined(normalized.weekday), containsOrdinal = !isUndefined(normalized.ordinal), containsGregorYear = !isUndefined(normalized.year), containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber;
        if ((containsGregor || containsOrdinal) && definiteWeekDef) {
          throw new ConflictingSpecificationError(
            "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
          );
        }
        if (containsGregorMD && containsOrdinal) {
          throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
        }
        let mixed;
        if (settingWeekStuff) {
          mixed = weekToGregorian(
            { ...gregorianToWeek(this.c, minDaysInFirstWeek, startOfWeek), ...normalized },
            minDaysInFirstWeek,
            startOfWeek
          );
        } else if (!isUndefined(normalized.ordinal)) {
          mixed = ordinalToGregorian({ ...gregorianToOrdinal(this.c), ...normalized });
        } else {
          mixed = { ...this.toObject(), ...normalized };
          if (isUndefined(normalized.day)) {
            mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
          }
        }
        const [ts, o] = objToTS(mixed, this.o, this.zone);
        return clone2(this, { ts, o });
      }
      /**
       * Add a period of time to this DateTime and return the resulting DateTime
       *
       * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
       * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
       * @example DateTime.now().plus(123) //~> in 123 milliseconds
       * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes
       * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow
       * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday
       * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
       * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
       * @return {DateTime}
       */
      plus(duration) {
        if (!this.isValid)
          return this;
        const dur = Duration.fromDurationLike(duration);
        return clone2(this, adjustTime(this, dur));
      }
      /**
       * Subtract a period of time to this DateTime and return the resulting DateTime
       * See {@link DateTime#plus}
       * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
       @return {DateTime}
       */
      minus(duration) {
        if (!this.isValid)
          return this;
        const dur = Duration.fromDurationLike(duration).negate();
        return clone2(this, adjustTime(this, dur));
      }
      /**
       * "Set" this DateTime to the beginning of a unit of time.
       * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
       * @param {Object} opts - options
       * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
       * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
       * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
       * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays
       * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
       * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
       * @return {DateTime}
       */
      startOf(unit, { useLocaleWeeks = false } = {}) {
        if (!this.isValid)
          return this;
        const o = {}, normalizedUnit = Duration.normalizeUnit(unit);
        switch (normalizedUnit) {
          case "years":
            o.month = 1;
          case "quarters":
          case "months":
            o.day = 1;
          case "weeks":
          case "days":
            o.hour = 0;
          case "hours":
            o.minute = 0;
          case "minutes":
            o.second = 0;
          case "seconds":
            o.millisecond = 0;
            break;
          case "milliseconds":
            break;
        }
        if (normalizedUnit === "weeks") {
          if (useLocaleWeeks) {
            const startOfWeek = this.loc.getStartOfWeek();
            const { weekday } = this;
            if (weekday < startOfWeek) {
              o.weekNumber = this.weekNumber - 1;
            }
            o.weekday = startOfWeek;
          } else {
            o.weekday = 1;
          }
        }
        if (normalizedUnit === "quarters") {
          const q = Math.ceil(this.month / 3);
          o.month = (q - 1) * 3 + 1;
        }
        return this.set(o);
      }
      /**
       * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
       * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
       * @param {Object} opts - options
       * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
       * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
       * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
       * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays
       * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
       * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
       * @return {DateTime}
       */
      endOf(unit, opts) {
        return this.isValid ? this.plus({ [unit]: 1 }).startOf(unit, opts).minus(1) : this;
      }
      // OUTPUT
      /**
       * Returns a string representation of this DateTime formatted according to the specified format string.
       * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).
       * Defaults to en-US if no locale has been specified, regardless of the system's locale.
       * @param {string} fmt - the format string
       * @param {Object} opts - opts to override the configuration options on this DateTime
       * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
       * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
       * @example DateTime.now().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
       * @example DateTime.now().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
       * @return {string}
       */
      toFormat(fmt, opts = {}) {
        return this.isValid ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt) : INVALID3;
      }
      /**
       * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
       * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
       * of the DateTime in the assigned locale.
       * Defaults to the system's locale if no locale has been specified
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
       * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options
       * @param {Object} opts - opts to override the configuration options on this DateTime
       * @example DateTime.now().toLocaleString(); //=> 4/20/2017
       * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
       * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
       * @example DateTime.now().toLocaleString(DateTime.DATE_FULL, { locale: 'fr' }); //=> '28 août 2022'
       * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
       * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
       * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
       * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
       * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'
       * @return {string}
       */
      toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
        return this.isValid ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this) : INVALID3;
      }
      /**
       * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
       * Defaults to the system's locale if no locale has been specified
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
       * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
       * @example DateTime.now().toLocaleParts(); //=> [
       *                                   //=>   { type: 'day', value: '25' },
       *                                   //=>   { type: 'literal', value: '/' },
       *                                   //=>   { type: 'month', value: '05' },
       *                                   //=>   { type: 'literal', value: '/' },
       *                                   //=>   { type: 'year', value: '1982' }
       *                                   //=> ]
       */
      toLocaleParts(opts = {}) {
        return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this) : [];
      }
      /**
       * Returns an ISO 8601-compliant string representation of this DateTime
       * @param {Object} opts - options
       * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
       * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
       * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
       * @param {boolean} [opts.extendedZone=false] - add the time zone format extension
       * @param {string} [opts.format='extended'] - choose between the basic and extended format
       * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
       * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'
       * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
       * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
       * @return {string}
       */
      toISO({
        format = "extended",
        suppressSeconds = false,
        suppressMilliseconds = false,
        includeOffset = true,
        extendedZone = false
      } = {}) {
        if (!this.isValid) {
          return null;
        }
        const ext = format === "extended";
        let c = toISODate(this, ext);
        c += "T";
        c += toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
        return c;
      }
      /**
       * Returns an ISO 8601-compliant string representation of this DateTime's date component
       * @param {Object} opts - options
       * @param {string} [opts.format='extended'] - choose between the basic and extended format
       * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
       * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
       * @return {string}
       */
      toISODate({ format = "extended" } = {}) {
        if (!this.isValid) {
          return null;
        }
        return toISODate(this, format === "extended");
      }
      /**
       * Returns an ISO 8601-compliant string representation of this DateTime's week date
       * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
       * @return {string}
       */
      toISOWeekDate() {
        return toTechFormat(this, "kkkk-'W'WW-c");
      }
      /**
       * Returns an ISO 8601-compliant string representation of this DateTime's time component
       * @param {Object} opts - options
       * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
       * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
       * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
       * @param {boolean} [opts.extendedZone=true] - add the time zone format extension
       * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
       * @param {string} [opts.format='extended'] - choose between the basic and extended format
       * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
       * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
       * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
       * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'
       * @return {string}
       */
      toISOTime({
        suppressMilliseconds = false,
        suppressSeconds = false,
        includeOffset = true,
        includePrefix = false,
        extendedZone = false,
        format = "extended"
      } = {}) {
        if (!this.isValid) {
          return null;
        }
        let c = includePrefix ? "T" : "";
        return c + toISOTime(
          this,
          format === "extended",
          suppressSeconds,
          suppressMilliseconds,
          includeOffset,
          extendedZone
        );
      }
      /**
       * Returns an RFC 2822-compatible string representation of this DateTime
       * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
       * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
       * @return {string}
       */
      toRFC2822() {
        return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
      }
      /**
       * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.
       * Specifically, the string conforms to RFC 1123.
       * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
       * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
       * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
       * @return {string}
       */
      toHTTP() {
        return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
      }
      /**
       * Returns a string representation of this DateTime appropriate for use in SQL Date
       * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
       * @return {string}
       */
      toSQLDate() {
        if (!this.isValid) {
          return null;
        }
        return toISODate(this, true);
      }
      /**
       * Returns a string representation of this DateTime appropriate for use in SQL Time
       * @param {Object} opts - options
       * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
       * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
       * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
       * @example DateTime.utc().toSQL() //=> '05:15:16.345'
       * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'
       * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'
       * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
       * @return {string}
       */
      toSQLTime({ includeOffset = true, includeZone = false, includeOffsetSpace = true } = {}) {
        let fmt = "HH:mm:ss.SSS";
        if (includeZone || includeOffset) {
          if (includeOffsetSpace) {
            fmt += " ";
          }
          if (includeZone) {
            fmt += "z";
          } else if (includeOffset) {
            fmt += "ZZ";
          }
        }
        return toTechFormat(this, fmt, true);
      }
      /**
       * Returns a string representation of this DateTime appropriate for use in SQL DateTime
       * @param {Object} opts - options
       * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
       * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
       * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
       * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
       * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
       * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
       * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
       * @return {string}
       */
      toSQL(opts = {}) {
        if (!this.isValid) {
          return null;
        }
        return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;
      }
      /**
       * Returns a string representation of this DateTime appropriate for debugging
       * @return {string}
       */
      toString() {
        return this.isValid ? this.toISO() : INVALID3;
      }
      /**
       * Returns a string representation of this DateTime appropriate for the REPL.
       * @return {string}
       */
      [Symbol.for("nodejs.util.inspect.custom")]() {
        if (this.isValid) {
          return `DateTime { ts: ${this.toISO()}, zone: ${this.zone.name}, locale: ${this.locale} }`;
        } else {
          return `DateTime { Invalid, reason: ${this.invalidReason} }`;
        }
      }
      /**
       * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}
       * @return {number}
       */
      valueOf() {
        return this.toMillis();
      }
      /**
       * Returns the epoch milliseconds of this DateTime.
       * @return {number}
       */
      toMillis() {
        return this.isValid ? this.ts : NaN;
      }
      /**
       * Returns the epoch seconds of this DateTime.
       * @return {number}
       */
      toSeconds() {
        return this.isValid ? this.ts / 1e3 : NaN;
      }
      /**
       * Returns the epoch seconds (as a whole number) of this DateTime.
       * @return {number}
       */
      toUnixInteger() {
        return this.isValid ? Math.floor(this.ts / 1e3) : NaN;
      }
      /**
       * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
       * @return {string}
       */
      toJSON() {
        return this.toISO();
      }
      /**
       * Returns a BSON serializable equivalent to this DateTime.
       * @return {Date}
       */
      toBSON() {
        return this.toJSDate();
      }
      /**
       * Returns a JavaScript object with this DateTime's year, month, day, and so on.
       * @param opts - options for generating the object
       * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
       * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
       * @return {Object}
       */
      toObject(opts = {}) {
        if (!this.isValid)
          return {};
        const base = { ...this.c };
        if (opts.includeConfig) {
          base.outputCalendar = this.outputCalendar;
          base.numberingSystem = this.loc.numberingSystem;
          base.locale = this.loc.locale;
        }
        return base;
      }
      /**
       * Returns a JavaScript Date equivalent to this DateTime.
       * @return {Date}
       */
      toJSDate() {
        return new Date(this.isValid ? this.ts : NaN);
      }
      // COMPARE
      /**
       * Return the difference between two DateTimes as a Duration.
       * @param {DateTime} otherDateTime - the DateTime to compare this one to
       * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
       * @param {Object} opts - options that affect the creation of the Duration
       * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
       * @example
       * var i1 = DateTime.fromISO('1982-05-25T09:45'),
       *     i2 = DateTime.fromISO('1983-10-14T10:30');
       * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
       * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
       * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
       * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
       * @return {Duration}
       */
      diff(otherDateTime, unit = "milliseconds", opts = {}) {
        if (!this.isValid || !otherDateTime.isValid) {
          return Duration.invalid("created by diffing an invalid DateTime");
        }
        const durOpts = { locale: this.locale, numberingSystem: this.numberingSystem, ...opts };
        const units = maybeArray(unit).map(Duration.normalizeUnit), otherIsLater = otherDateTime.valueOf() > this.valueOf(), earlier = otherIsLater ? this : otherDateTime, later = otherIsLater ? otherDateTime : this, diffed = diff_default(earlier, later, units, durOpts);
        return otherIsLater ? diffed.negate() : diffed;
      }
      /**
       * Return the difference between this DateTime and right now.
       * See {@link DateTime#diff}
       * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
       * @param {Object} opts - options that affect the creation of the Duration
       * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
       * @return {Duration}
       */
      diffNow(unit = "milliseconds", opts = {}) {
        return this.diff(_DateTime.now(), unit, opts);
      }
      /**
       * Return an Interval spanning between this DateTime and another DateTime
       * @param {DateTime} otherDateTime - the other end point of the Interval
       * @return {Interval}
       */
      until(otherDateTime) {
        return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
      }
      /**
       * Return whether this DateTime is in the same unit of time as another DateTime.
       * Higher-order units must also be identical for this function to return `true`.
       * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.
       * @param {DateTime} otherDateTime - the other DateTime
       * @param {string} unit - the unit of time to check sameness on
       * @param {Object} opts - options
       * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; only the locale of this DateTime is used
       * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day
       * @return {boolean}
       */
      hasSame(otherDateTime, unit, opts) {
        if (!this.isValid)
          return false;
        const inputMs = otherDateTime.valueOf();
        const adjustedToZone = this.setZone(otherDateTime.zone, { keepLocalTime: true });
        return adjustedToZone.startOf(unit, opts) <= inputMs && inputMs <= adjustedToZone.endOf(unit, opts);
      }
      /**
       * Equality check
       * Two DateTimes are equal if and only if they represent the same millisecond, have the same zone and location, and are both valid.
       * To compare just the millisecond values, use `+dt1 === +dt2`.
       * @param {DateTime} other - the other DateTime
       * @return {boolean}
       */
      equals(other) {
        return this.isValid && other.isValid && this.valueOf() === other.valueOf() && this.zone.equals(other.zone) && this.loc.equals(other.loc);
      }
      /**
       * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
       * platform supports Intl.RelativeTimeFormat. Rounds down by default.
       * @param {Object} options - options that affect the output
       * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
       * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
       * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
       * @param {boolean} [options.round=true] - whether to round the numbers in the output.
       * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
       * @param {string} options.locale - override the locale of this DateTime
       * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
       * @example DateTime.now().plus({ days: 1 }).toRelative() //=> "in 1 day"
       * @example DateTime.now().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
       * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
       * @example DateTime.now().minus({ days: 2 }).toRelative() //=> "2 days ago"
       * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
       * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
       */
      toRelative(options = {}) {
        if (!this.isValid)
          return null;
        const base = options.base || _DateTime.fromObject({}, { zone: this.zone }), padding = options.padding ? this < base ? -options.padding : options.padding : 0;
        let units = ["years", "months", "days", "hours", "minutes", "seconds"];
        let unit = options.unit;
        if (Array.isArray(options.unit)) {
          units = options.unit;
          unit = void 0;
        }
        return diffRelative(base, this.plus(padding), {
          ...options,
          numeric: "always",
          units,
          unit
        });
      }
      /**
       * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
       * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
       * @param {Object} options - options that affect the output
       * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
       * @param {string} options.locale - override the locale of this DateTime
       * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
       * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
       * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
       * @example DateTime.now().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
       * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
       * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
       */
      toRelativeCalendar(options = {}) {
        if (!this.isValid)
          return null;
        return diffRelative(options.base || _DateTime.fromObject({}, { zone: this.zone }), this, {
          ...options,
          numeric: "auto",
          units: ["years", "months", "days"],
          calendary: true
        });
      }
      /**
       * Return the min of several date times
       * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
       * @return {DateTime} the min DateTime, or undefined if called with no argument
       */
      static min(...dateTimes) {
        if (!dateTimes.every(_DateTime.isDateTime)) {
          throw new InvalidArgumentError("min requires all arguments be DateTimes");
        }
        return bestBy(dateTimes, (i) => i.valueOf(), Math.min);
      }
      /**
       * Return the max of several date times
       * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
       * @return {DateTime} the max DateTime, or undefined if called with no argument
       */
      static max(...dateTimes) {
        if (!dateTimes.every(_DateTime.isDateTime)) {
          throw new InvalidArgumentError("max requires all arguments be DateTimes");
        }
        return bestBy(dateTimes, (i) => i.valueOf(), Math.max);
      }
      // MISC
      /**
       * Explain how a string would be parsed by fromFormat()
       * @param {string} text - the string to parse
       * @param {string} fmt - the format the string is expected to be in (see description)
       * @param {Object} options - options taken by fromFormat()
       * @return {Object}
       */
      static fromFormatExplain(text, fmt, options = {}) {
        const { locale = null, numberingSystem = null } = options, localeToUse = Locale.fromOpts({
          locale,
          numberingSystem,
          defaultToEN: true
        });
        return explainFromTokens(localeToUse, text, fmt);
      }
      /**
       * @deprecated use fromFormatExplain instead
       */
      static fromStringExplain(text, fmt, options = {}) {
        return _DateTime.fromFormatExplain(text, fmt, options);
      }
      // FORMAT PRESETS
      /**
       * {@link DateTime#toLocaleString} format like 10/14/1983
       * @type {Object}
       */
      static get DATE_SHORT() {
        return DATE_SHORT;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'
       * @type {Object}
       */
      static get DATE_MED() {
        return DATE_MED;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'
       * @type {Object}
       */
      static get DATE_MED_WITH_WEEKDAY() {
        return DATE_MED_WITH_WEEKDAY;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'October 14, 1983'
       * @type {Object}
       */
      static get DATE_FULL() {
        return DATE_FULL;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'
       * @type {Object}
       */
      static get DATE_HUGE() {
        return DATE_HUGE;
      }
      /**
       * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get TIME_SIMPLE() {
        return TIME_SIMPLE;
      }
      /**
       * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get TIME_WITH_SECONDS() {
        return TIME_WITH_SECONDS;
      }
      /**
       * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get TIME_WITH_SHORT_OFFSET() {
        return TIME_WITH_SHORT_OFFSET;
      }
      /**
       * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get TIME_WITH_LONG_OFFSET() {
        return TIME_WITH_LONG_OFFSET;
      }
      /**
       * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.
       * @type {Object}
       */
      static get TIME_24_SIMPLE() {
        return TIME_24_SIMPLE;
      }
      /**
       * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.
       * @type {Object}
       */
      static get TIME_24_WITH_SECONDS() {
        return TIME_24_WITH_SECONDS;
      }
      /**
       * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.
       * @type {Object}
       */
      static get TIME_24_WITH_SHORT_OFFSET() {
        return TIME_24_WITH_SHORT_OFFSET;
      }
      /**
       * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
       * @type {Object}
       */
      static get TIME_24_WITH_LONG_OFFSET() {
        return TIME_24_WITH_LONG_OFFSET;
      }
      /**
       * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_SHORT() {
        return DATETIME_SHORT;
      }
      /**
       * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_SHORT_WITH_SECONDS() {
        return DATETIME_SHORT_WITH_SECONDS;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_MED() {
        return DATETIME_MED;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_MED_WITH_SECONDS() {
        return DATETIME_MED_WITH_SECONDS;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_MED_WITH_WEEKDAY() {
        return DATETIME_MED_WITH_WEEKDAY;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_FULL() {
        return DATETIME_FULL;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_FULL_WITH_SECONDS() {
        return DATETIME_FULL_WITH_SECONDS;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_HUGE() {
        return DATETIME_HUGE;
      }
      /**
       * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_HUGE_WITH_SECONDS() {
        return DATETIME_HUGE_WITH_SECONDS;
      }
    };
  }
});

// node_modules/luxon/src/luxon.js
var init_luxon = __esm({
  "node_modules/luxon/src/luxon.js"() {
    init_datetime();
    init_duration();
    init_interval();
    init_info();
    init_zone();
    init_fixedOffsetZone();
    init_IANAZone();
    init_invalidZone();
    init_systemZone();
    init_settings();
  }
});

// src/modules/moduloRegistroTiempo/API/menuOtro.ts
var import_obsidian20, menuOtro;
var init_menuOtro = __esm({
  "src/modules/moduloRegistroTiempo/API/menuOtro.ts"() {
    "use strict";
    import_obsidian20 = require("obsidian");
    init_seleccionModal();
    init_fuzzySelectOrCreate();
    init_luxon();
    menuOtro = class {
      constructor(plugin) {
        this.pathCampos = "Estructura/Campos Sistema Gestion/Campos Registro Tiempo.md";
        this.selectedActivity = "";
        this.selectedGroup = "";
        this.plugin = plugin;
        this.fuzzySelectOrC = new fuzzySelectOrCreate(this.app, plugin);
      }
      async menuOtro(app2, registro) {
        const opcionesOtro = ["Propias", "Areas de Vida", "Areas de Inter\xE9s", "Proyectos de Q", "Proyectos GTD", "Tema de Inter\xE9s", "Recurso Recurrente"];
        const valoresOtro = ["hab", "actsAV", "actsAI", "actsPQ", "actsPGTD", "actsTI", "actsRR"];
        const placeholderOtro = "\xBFQue categoria?";
        const modalOtro = new SeleccionModal(app2, opcionesOtro, valoresOtro, placeholderOtro);
        let temaOtro;
        let siAsunto = false;
        try {
          const selectionOtro = await modalOtro.openAndAwaitSelection();
          switch (selectionOtro) {
            case "hab":
              temaOtro = await this.habitual(app2);
              break;
            case "actsAV":
            case "actsAI":
            case "actsPQ":
            case "actsPGTD":
            case "actsTI":
            case "actsRR":
              temaOtro = await this.elemSG(app2, selectionOtro);
              siAsunto = true;
              break;
            case "bus":
              break;
          }
        } catch (error) {
          console.error("Error o modal cerrado sin selecci\xF3n:", error);
          registro.detener = true;
          return error;
        }
        debugger;
        return { titulo: temaOtro.actividad + " / " + temaOtro.grupo, siAsunto, nombre: temaOtro.grupo, areaVida: temaOtro.grupo };
      }
      async habitual(app2) {
        const grupos = await this.getFrontmatterField(app2, this.pathCampos, "temas");
        const actsGrupos = await this.resultYaml(app2, "actsTemas");
        let itemsForSearch = actsGrupos.filter((item) => grupos.includes(item.grupo)).map((item) => ({
          value: `${item.actividad} / ${item.grupo}`,
          // Cambia el orden si es necesario
          activity: item.actividad,
          // Usa la propiedad 'actividad' en lugar de item[1]
          group: item.grupo
          // Usa la propiedad 'grupo' en lugar de item[0]
        }));
        let eleccion = await this.fuzzySelectOrC.showFuzzySearchModal(itemsForSearch, grupos);
        let objEleccion = { grupo: eleccion[1], actividad: eleccion[0], nombre: "" };
        return objEleccion;
      }
      async ninguno(app2) {
      }
      async elemSG(app2, tipo) {
        const actividades = await this.resultYaml(app2, tipo);
        const activeSG = await this.findMainFilesWithState(app2, tipo);
        let groups;
        debugger;
        switch (tipo) {
          case "actsAV":
            groups = activeSG.map((page) => page.frontmatter.areaVida);
            break;
          default:
            groups = activeSG.map((page) => page.frontmatter.aliases ? page.frontmatter.aliases[0] : null).filter((alias2) => alias2 !== null);
            break;
        }
        let itemsForSearch = actividades.filter((item) => groups.includes(item.grupo)).map((item) => ({
          value: `${item.actividad} / ${item.grupo}`,
          // Cambia el orden si es necesario
          activity: item.actividad,
          // Usa la propiedad 'actividad' en lugar de item[1]
          group: item.grupo
          // Usa la propiedad 'grupo' en lugar de item[0]
        }));
        let eleccion = await this.fuzzySelectOrC.showFuzzySearchModal(itemsForSearch, groups, tipo);
        const foundElement = activeSG.find((b) => b.frontmatter.aliases[0] === eleccion[1]);
        let alias = foundElement == null ? void 0 : foundElement.file.path;
        let objEleccion = { grupo: eleccion[1], actividad: eleccion[0], nombre: alias };
        return objEleccion;
      }
      async buscar(app2) {
      }
      async resultYaml(app2, tema) {
        var _a;
        const file = app2.vault.getAbstractFileByPath(this.pathCampos);
        try {
          if (file instanceof import_obsidian20.TFile) {
            const metadata = app2.metadataCache.getFileCache(file);
            const arregloResult = ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a[tema]) || [];
            const resultado = [];
            if (Array.isArray(arregloResult)) {
              arregloResult.forEach((item) => {
                if (Array.isArray(item) && item.length >= 2) {
                  resultado.push({ grupo: item[0], actividad: item[1] });
                }
              });
            }
            return resultado;
          }
        } catch (error) {
          console.error("Error obteniendo el archivo de campos:", error);
          throw error;
        }
        return [];
      }
      async getFrontmatterField(app2, file, field) {
        try {
          const tFile = app2.vault.getAbstractFileByPath(file);
          if (tFile instanceof import_obsidian20.TFile) {
            const cache = app2.metadataCache.getFileCache(tFile);
            const frontmatter = cache == null ? void 0 : cache.frontmatter;
            if (frontmatter && frontmatter.hasOwnProperty(field)) {
              const fieldValue = frontmatter[field];
              if (fieldValue === void 0 || fieldValue === null || fieldValue === "") {
                console.log("El campo est\xE1 vac\xEDo o no existe.");
                return null;
              } else {
                console.log("Frontmatter consultado con \xE9xito");
                return fieldValue;
              }
            } else {
              console.log("El campo no existe en el frontmatter.");
              return null;
            }
          } else {
            console.error("El archivo no existe o no es un archivo de texto.");
            return null;
          }
        } catch (err) {
          console.error("Error al consultar el frontmatter", err);
          return null;
        }
      }
      // Esta función encuentra los archivos de subsistemas y cuyo estado es 🟢
      async findMainFilesWithState(app2, tipo) {
        var _a;
        const propertiesTipo = {
          actsAV: {
            folder: this.plugin.settings.folder_AreasVida,
            sameName: false,
            nameFile: this.plugin.settings.nameFile_AreasVida
          },
          actsAI: {
            folder: this.plugin.settings.folder_AreasInteres,
            sameName: true,
            nameFile: this.plugin.settings.nameFile_AreasInteres
          },
          actsPQ: {
            folder: this.plugin.settings.folder_ProyectosQ,
            sameName: false,
            nameFile: ""
          },
          actsPGTD: {
            folder: this.plugin.settings.folder_ProyectosGTD,
            sameName: false,
            nameFile: ""
          },
          actsTI: {
            folder: this.plugin.settings.folder_TemasInteres,
            sameName: false,
            nameFile: ""
          },
          actsRR: {
            folder: this.plugin.settings.folder_RecursosRecurrentes,
            sameName: false,
            nameFile: ""
          }
          // Puedes continuar añadiendo más casos aquí
        };
        debugger;
        const activeFilesWithFrontmatter = [];
        switch (tipo) {
          case "actsAV":
            const { folder, sameName, nameFile } = propertiesTipo[tipo];
            let ahora = DateTime.now().toFormat("yyyy-Qq");
            const files = app2.vault.getMarkdownFiles().filter((file) => file.path.includes(folder) && !file.path.includes("Plantillas") && file.name.startsWith(ahora));
            for (let file of files) {
              let metadata = (_a = app2.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
              if ((metadata == null ? void 0 : metadata.estado) === "\u{1F7E2}") {
                activeFilesWithFrontmatter.push({ file, frontmatter: metadata });
              }
            }
            break;
          default:
            if (propertiesTipo.hasOwnProperty(tipo)) {
              const { folder: folder2, sameName: sameName2, nameFile: nameFile2 } = propertiesTipo[tipo];
              const filesInFolder = app2.vault.getFiles().filter((file) => file.path.startsWith(folder2));
              for (const file of filesInFolder) {
                if (sameName2 && file.basename === nameFile2 || !sameName2) {
                  const metadata = app2.metadataCache.getFileCache(file);
                  if (metadata.frontmatter && metadata.frontmatter.estado === "\u{1F7E2}") {
                    activeFilesWithFrontmatter.push({ file, frontmatter: metadata.frontmatter });
                  }
                }
              }
            } else {
              console.log("Selecci\xF3n no reconocida:", tipo);
              return [];
            }
            break;
        }
        return activeFilesWithFrontmatter;
      }
    };
  }
});

// src/modules/moduloRegistroTiempo/API/utilsAPI.ts
var import_obsidian21, utilsAPI;
var init_utilsAPI = __esm({
  "src/modules/moduloRegistroTiempo/API/utilsAPI.ts"() {
    "use strict";
    import_obsidian21 = require("obsidian");
    init_seleccionModalTareas();
    init_menuOtro();
    init_registroTiempoAPI();
    utilsAPI = class {
      constructor(plugin) {
        this.plugin = plugin;
        this.menuOtro = new menuOtro(plugin);
      }
      // La declaración del método estaba asi: buscarRegistrosActivos(app: App, registro: any)
      // Devuelve el file del registro activo. Utilizado para cuando necesito obtener el dato solamente de si hay algún registro activo.
      async buscarRegistrosActivos(app2) {
        var _a;
        const files = app2.vault.getMarkdownFiles();
        const folder = this.plugin.settings.folder_RegistroTiempo;
        for (let file of files) {
          if (file.path.startsWith(folder)) {
            const metadata = app2.metadataCache.getFileCache(file);
            if (((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.estado) === "\u{1F7E2}") {
              return file;
            }
          }
        }
        return;
      }
      // Suponemos que esta función se ubicará en algún lugar donde pueda acceder a `app` de Obsidian.
      async crearObjetoRegistro(plugin) {
        const activo = plugin.app.workspace.getActiveFile();
        if (!activo) {
          return {
            activo: null,
            nombre: "Registro sin archivo activo",
            folder: plugin.settings.folder_RegistroTiempo,
            indice: plugin.settings.indice_RegistroTiempo,
            id: null,
            fecha: this.formatearFecha(/* @__PURE__ */ new Date()),
            indice_DVJS: `"${plugin.settings.indice_RegistroTiempo}"`,
            aliases: []
            // o incluso podrías asignar algún alias por defecto si lo deseas
          };
        }
        const folder = plugin.settings.folder_RegistroTiempo;
        const indice = plugin.settings.indice_RegistroTiempo;
        let maxId = 0;
        const files = plugin.app.vault.getMarkdownFiles();
        const registrosExistentes = files.filter(
          (file) => file.path.startsWith(folder)
        );
        registrosExistentes.forEach((file) => {
          var _a;
          const metadata = (_a = plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
          if (metadata && metadata.id && !isNaN(metadata.id)) {
            const id = parseInt(metadata.id);
            if (id > maxId)
              maxId = id;
          }
        });
        const nextId = maxId + 1;
        const fechaCompleta = this.formatearFecha(/* @__PURE__ */ new Date());
        const metadataActivo = plugin.app.metadataCache.getFileCache(activo);
        const aliases = metadataActivo && metadataActivo.frontmatter && metadataActivo.frontmatter.aliases ? metadataActivo.frontmatter.aliases : [];
        return {
          activo,
          nombre: activo.basename,
          folder,
          indice,
          id: nextId,
          fecha: fechaCompleta,
          indice_DVJS: `"${indice}"`,
          aliases
          // Se agrega el campo aliases al registro
        };
      }
      formatearFecha(fecha) {
        const offset2 = fecha.getTimezoneOffset() * 6e4;
        const fechaLocal = new Date(fecha.getTime() - offset2);
        const fechaFormato = fechaLocal.toISOString().split("T")[0];
        const dias = [
          "Domingo",
          "Lunes",
          "Martes",
          "Mi\xE9rcoles",
          "Jueves",
          "Viernes",
          "S\xE1bado"
        ];
        const diaSemana = dias[fecha.getDay()];
        const horaFormato = fecha.toTimeString().split(" ")[0].substring(0, 5);
        return `${fechaFormato} ${diaSemana} ${horaFormato}`;
      }
      // Método que verifica si hay registros ACtivos y pregunta si quiere cerrarlos.
      async verificarTareasActivas(registro, app2) {
        var _a;
        const files = app2.vault.getMarkdownFiles();
        const tareasActivas = [];
        for (let file of files) {
          if (file.path.startsWith(registro.folder)) {
            const metadata = (_a = app2.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
            if ((metadata == null ? void 0 : metadata.estado) === "\u{1F7E2}") {
              tareasActivas.push({
                file,
                titulo: metadata.titulo,
                aliases: metadata.aliases || file.basename
              });
            }
          }
        }
        if (tareasActivas.length === 1) {
          const tareaActiva = tareasActivas[0];
          const deseaDetener = await this.mostrarSugerencia(
            `La tarea ${tareaActiva.aliases} est\xE1 corriendo. \xBFDesea detenerla?`
          );
          if (deseaDetener === void 0) {
            new import_obsidian21.Notice(`Creaci\xF3n de registro cancelado por el usuario.`);
            registro.detener = true;
            return;
          }
          if (deseaDetener) {
            debugger;
            const registroTiempoAPInstance = new registroTiempoAPI(this.plugin);
            await registroTiempoAPInstance.cerrarRegistro(tareaActiva.file);
            registro.detener = false;
          } else {
            new import_obsidian21.Notice(`La tarea ${tareaActiva.aliases} seguir\xE1 registr\xE1ndose.`);
            registro.detener = true;
            return;
          }
        } else if (tareasActivas.length > 1) {
          new import_obsidian21.Notice(
            "Hay un error con la cantidad de tareas corriendo en este momento."
          );
          registro.detener = true;
        } else {
          console.log("No hay m\xE1s tareas corriendo.");
          registro.detener = false;
        }
      }
      mostrarSugerencia(mensaje) {
        return new Promise((resolve, reject) => {
          let seleccionado = false;
          const modal = new import_obsidian21.Modal(app);
          modal.contentEl.createEl("h1", { text: mensaje });
          const buttonsContainer = modal.contentEl.createEl("div");
          const hacerSeleccion = (seleccion) => {
            seleccionado = true;
            modal.close();
            resolve(seleccion);
          };
          const yesButton = buttonsContainer.createEl("button", {
            text: "S\xED"
          });
          yesButton.addEventListener("click", () => hacerSeleccion(true));
          const noButton = buttonsContainer.createEl("button", {
            text: "No"
          });
          noButton.addEventListener("click", () => hacerSeleccion(false));
          modal.onClose = () => {
            if (!seleccionado) {
              reject(new Error("Modal cerrado sin selecci\xF3n"));
            }
          };
          modal.contentEl.addEventListener("keydown", (e) => {
            var _a;
            switch (e.key) {
              case "ArrowLeft":
                yesButton.focus();
                break;
              case "ArrowRight":
                noButton.focus();
                break;
              case "Enter":
                (_a = document.activeElement) == null ? void 0 : _a.click();
                break;
            }
          });
          yesButton.focus();
          modal.open();
        });
      }
      async definirTipoRegistro(registro, app2) {
        const totTareas = await this.encontrarTareasPendientes(app2);
        let opcionesTitulo;
        let valoresOpcion;
        if (registro.activo) {
          let valorMostrar;
          if (registro.aliases && registro.aliases.length >= 2) {
            valorMostrar = registro.aliases[1];
          } else if (registro.aliases && registro.aliases.length >= 1) {
            valorMostrar = registro.aliases[0];
          } else {
            valorMostrar = registro.nombre;
          }
          if (totTareas.length > 0) {
            opcionesTitulo = [valorMostrar, "Alguna tarea en Ejecuci\xF3n", "Otro"];
            valoresOpcion = ["Nota", "Tarea", "Otro"];
          } else {
            opcionesTitulo = [valorMostrar, "Otro"];
            valoresOpcion = ["Nota", "Otro"];
          }
        } else {
          if (totTareas.length > 0) {
            opcionesTitulo = ["Alguna tarea en Ejecuci\xF3n", "Otro"];
            valoresOpcion = ["Tarea", "Otro"];
          } else {
            opcionesTitulo = ["Otro"];
            valoresOpcion = ["Otro"];
          }
        }
        const placeholder = "\xBFSobre qu\xE9 es el registro de tiempo?";
        const modalMenu1 = new SeleccionModalTareas(app2, opcionesTitulo, valoresOpcion, placeholder);
        try {
          const selection = await modalMenu1.openAndAwaitSelection();
          registro.tipoRegistro = selection;
          switch (registro.tipoRegistro) {
            case "Nota":
              if (registro.activo) {
                registro.titulo = registro.nombre;
                registro.siAsunto = true;
                registro.tarea = false;
                registro = this.copiarCampos(registro);
              } else {
                new import_obsidian21.Notice("No hay nota activa para asignar");
                registro.tipoRegistro = "Otro";
              }
              break;
            case "Tarea":
              await this.elegirTareaParaRegistro(app2, registro, totTareas);
              break;
            default:
              let respuesta = await this.menuOtro.menuOtro(app2, registro);
              Object.assign(registro, respuesta);
              break;
          }
        } catch (error) {
          console.error("Error o modal cerrado sin selecci\xF3n:", error);
        }
      }
      copiarCampos(registro) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _i;
        let nombre = registro.activo.basename;
        let nota = app.metadataCache.getFileCache(registro.activo);
        if (((_a = nota.frontmatter) == null ? void 0 : _a.type) === "PQ") {
          registro.proyectoQ = nombre;
          registro.proyectoGTD = "";
          if (Array.isArray(nota.frontmatter.proyectoGTD)) {
            registro.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
          } else if (nota.frontmatter.proyectoGTD) {
            registro.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
          }
        } else if (((_b = nota.frontmatter) == null ? void 0 : _b.type) === "PGTD") {
          registro.proyectoGTD = [nombre];
          if (Array.isArray(nota.frontmatter.proyectoGTD)) {
            registro.proyectoGTD = registro.proyectoGTD.concat(nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
          } else if (nota.frontmatter.proyectoGTD) {
            registro.proyectoGTD.push(nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
          }
          registro.proyectoQ = "";
          if (Array.isArray(nota.frontmatter.proyectoQ)) {
            registro.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
          } else if (nota.frontmatter.proyectoQ) {
            registro.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
          }
        } else {
          registro.proyectoQ = "";
          if (Array.isArray((_c = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _c.proyectoQ)) {
            registro.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
          } else if ((_d = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _d.proyectoQ) {
            registro.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
          }
          registro.proyectoGTD = "";
          if (Array.isArray((_e = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _e.proyectoGTD)) {
            registro.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
          } else if ((_f = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _f.proyectoGTD) {
            registro.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
          }
        }
        registro.areaInteres = [];
        if (Array.isArray((_g = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _g.areaInteres)) {
          registro.areaInteres = registro.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
        } else {
          if ((_h = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _h.areaInteres) {
            registro.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
          }
        }
        registro.areaVida = "";
        if ((_i = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _i.areaVida) {
          if (Array.isArray(nota.frontmatter.areaVida)) {
            registro.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
          } else if (typeof nota.frontmatter.areaVida === "string") {
            registro.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
          }
        } else {
          registro.areaVida = "No es de ning\xFAn Area de Vida";
        }
        return registro;
      }
      async encontrarTareasPendientes(app2) {
        let tareasPendientes = [];
        const archivos = app2.vault.getMarkdownFiles();
        const archivosRelevantes = archivos.filter((archivo) => {
          return !archivo.path.includes("Plantillas") && !archivo.path.includes("Estructura/GTD/Sistema GTD/Sistema") && !archivo.path.includes("Archivo");
        });
        for (const archivo of archivosRelevantes) {
          const contenido = await app2.vault.read(archivo);
          const coincidencias = contenido.match(/^ *- \[\/\] .*/gm) || [];
          const tareasConArchivo = coincidencias.map((tarea) => {
            return { tarea: tarea.trim(), archivo };
          });
          tareasPendientes = tareasPendientes.concat(tareasConArchivo);
        }
        return tareasPendientes;
      }
      async elegirTareaParaRegistro(app2, registro, tareasPendientes) {
        var _a;
        const placeholder = "Elige la tarea que vas a registrar.";
        const promesasLimpias = tareasPendientes.map(
          (tareaObj) => this.limpiarTextoTarea(tareaObj.tarea)
        );
        try {
          const tareasLimpias = await Promise.all(promesasLimpias);
          const displayOptions = [];
          const values = [];
          for (let i = 0; i < tareasPendientes.length; i++) {
            const { tarea, archivo } = tareasPendientes[i];
            const textoTarea = tareasLimpias[i];
            let aliasDisplay = "";
            const metadata = app2.metadataCache.getFileCache(archivo);
            if ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.aliases) {
              let aliases = metadata.frontmatter.aliases;
              if (!Array.isArray(aliases))
                aliases = [aliases];
              if (aliases.length >= 2) {
                aliasDisplay = aliases[1];
              } else if (aliases.length >= 1) {
                aliasDisplay = aliases[0];
              }
            }
            if (!aliasDisplay) {
              aliasDisplay = archivo.basename;
            }
            const displayText = `${aliasDisplay} / ${textoTarea}`;
            displayOptions.push(displayText);
            values.push(i);
          }
          const modalMenu = new SeleccionModalTareas(app2, displayOptions, values, placeholder);
          try {
            const selectedIndex = await modalMenu.openAndAwaitSelection();
            const seleccion = tareasPendientes[selectedIndex];
            registro.titulo = await this.limpiarTextoTarea(seleccion.tarea);
            registro.nombre = seleccion.archivo.basename;
            registro.archivoTarea = seleccion.archivo;
            registro.siAsunto = true;
            registro.tarea = true;
            registro = this.copiarCampos(registro);
          } catch (error) {
            registro.detener = true;
            console.error("Error o modal cerrado sin selecci\xF3n:", error);
          }
        } catch (error) {
          console.error("Hubo un error al limpiar las tareas:", error);
        }
      }
      limpiarTextoTarea(titulo) {
        return new Promise((resolve) => {
          let textoLimpio = titulo.split("\n")[0];
          textoLimpio = textoLimpio.replace(/#([\w-/]+)/g, (match2, p1) => {
            let transformado = p1.replace(/\//g, "_");
            transformado = transformado.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
            return transformado;
          });
          textoLimpio = textoLimpio.replace(/\[\w+::[^\]]+\]/g, "");
          textoLimpio = textoLimpio.replace(/^\s*-\s*\[\/\]\s*/, "");
          textoLimpio = textoLimpio.replace(
            /\p{Extended_Pictographic}\s*\d{4}-\d{2}-\d{2}(?:\s*\d{2}:\d{2}(?::\d{2})?)?/gu,
            ""
          );
          textoLimpio = textoLimpio.replace(/\p{Extended_Pictographic}/gu, "");
          textoLimpio = textoLimpio.replace(/\[[^\]]*\]/g, "");
          const caracteresNoPermitidos = /[<>:"\/\\|?*\x00-\x1F]/g;
          textoLimpio = textoLimpio.replace(caracteresNoPermitidos, "_");
          textoLimpio = textoLimpio.replace(/\s+/g, " ");
          resolve(textoLimpio.trim());
        });
      }
      async construirNombreyAlias(registro, app2) {
        var _a;
        const maxIdSec = await this.calcularUltimoIdSec(registro.titulo, registro.folder, app2);
        registro.idSec = maxIdSec + 1;
        const suffix = registro.idSec > 1 ? ` - ${registro.idSec}` : "";
        const originalAliases = Array.isArray(registro.aliases) ? [...registro.aliases] : [];
        function cleanPrefix(value) {
          if (!value)
            return "";
          return value.replace(/^RT -\s*/, "").trim();
        }
        if (!registro.tarea) {
          const noteName = cleanPrefix(registro.nombre || "");
          const newAliases = [
            `RT - ${noteName}${suffix}`
            // Alias 0: Nombre de la nota + sufijo
          ];
          if (originalAliases.length >= 1) {
            newAliases.push(`RT - ${cleanPrefix(originalAliases[0])}${suffix}`);
            if (originalAliases.length >= 2) {
              newAliases.push(`RT - ${cleanPrefix(originalAliases[1])}${suffix}`);
            }
          }
          registro.aliases = newAliases;
        } else {
          const metadataNota = app2.metadataCache.getFileCache(
            registro.archivoTarea
            // Este es el archivo donde está la tarea, lo tienes en `registro.nombre` o en alguna propiedad que guarde la referencia
          );
          const taskText = cleanPrefix(registro.titulo || "");
          const noteName = cleanPrefix(registro.nombre || "");
          debugger;
          let noteAliases = [];
          if ((_a = metadataNota == null ? void 0 : metadataNota.frontmatter) == null ? void 0 : _a.aliases) {
            noteAliases = Array.isArray(metadataNota.frontmatter.aliases) ? metadataNota.frontmatter.aliases : [metadataNota.frontmatter.aliases];
          }
          const newAliases = [
            `RT - ${taskText}${suffix}`,
            `RT - ${noteName} / ${taskText}${suffix}`
          ];
          if (noteAliases.length > 0) {
            newAliases.push(`RT - ${cleanPrefix(noteAliases[0])} / ${taskText}${suffix}`);
          }
          registro.aliases = newAliases;
          registro.descripcion = taskText;
        }
        if (!registro.id) {
          console.error("Error: registro.id es null o undefined");
          registro.id = Date.now();
        }
        registro.nameFile = `${registro.folder}/RT - ${registro.id}`;
      }
      /**
      * Calcula el último idSec usado para registros con el mismo título en la carpeta especificada.
      */
      async calcularUltimoIdSec(titulo, folder, app2) {
        const archivos = app2.vault.getFiles();
        let max = 0;
        for (const archivo of archivos) {
          if (archivo.path.startsWith(folder)) {
            const metadatos = app2.metadataCache.getFileCache(archivo);
            if (metadatos && metadatos.frontmatter && metadatos.frontmatter.titulo === titulo) {
              const idSec = metadatos.frontmatter.idSec;
              if (idSec !== void 0 && idSec > max) {
                max = idSec;
              }
            }
          }
        }
        return max;
      }
      limpiarAlias(titulo) {
        const caracteresNoPermitidos = /[<>:"\/\\|?*\x00-\x1F]/g;
        let tituloLimpio = titulo.replace(caracteresNoPermitidos, "_");
        tituloLimpio = tituloLimpio.replace(/\s+/g, " ");
        return tituloLimpio.trim();
      }
    };
  }
});

// src/modules/moduloRegistroTiempo/Interfaces/RegistroTiempo.ts
var init_RegistroTiempo = __esm({
  "src/modules/moduloRegistroTiempo/Interfaces/RegistroTiempo.ts"() {
    "use strict";
  }
});

// src/modules/moduloRegistroTiempo/Interfaces/SesionLectura.ts
var init_SesionLectura = __esm({
  "src/modules/moduloRegistroTiempo/Interfaces/SesionLectura.ts"() {
    "use strict";
  }
});

// src/modules/moduloRegistroTiempo/API/SesionLectura.ts
var SesionLectura_exports = {};
__export(SesionLectura_exports, {
  SesionLectura: () => SesionLectura
});
var import_obsidian22, SesionLectura;
var init_SesionLectura2 = __esm({
  "src/modules/moduloRegistroTiempo/API/SesionLectura.ts"() {
    "use strict";
    init_utilsAPI();
    import_obsidian22 = require("obsidian");
    init_SesionLectura();
    init_RTBase();
    init_luxon();
    SesionLectura = class extends RTBase {
      constructor(plugin, infoSubsistema) {
        super(plugin);
        this.plugin = plugin;
        this.plugin = plugin;
        this.utilsApi = new utilsAPI(plugin);
        this.tp = plugin.tp;
        this.nota = {};
        this.infoSubsistema = infoSubsistema;
      }
      async getId() {
        var _a, _b, _c;
        let maxId = 0;
        debugger;
        const files = app.vault.getMarkdownFiles();
        const registrosExistentes = files.filter((file) => file.path.startsWith(this.infoSubsistema.folder));
        registrosExistentes.forEach((file) => {
          var _a2;
          const metadata = (_a2 = app.metadataCache.getFileCache(file)) == null ? void 0 : _a2.frontmatter;
          if (metadata && metadata.id && !isNaN(metadata.id)) {
            const id = parseInt(metadata.id);
            if (id > maxId)
              maxId = id;
          }
        });
        this.nota.id = maxId + 1;
        const currentNotePath = (_a = app.workspace.getActiveFile()) == null ? void 0 : _a.path;
        const currentNota = (_b = app.metadataCache.getFileCache(app.workspace.getActiveFile())) == null ? void 0 : _b.frontmatter;
        if (currentNota) {
          const existingSessions = registrosExistentes.filter((file) => {
            var _a2, _b2;
            return file.path !== currentNotePath && ((_b2 = (_a2 = app.metadataCache.getFileCache(file)) == null ? void 0 : _a2.frontmatter) == null ? void 0 : _b2.titulo) === currentNota.titulo;
          });
          if (existingSessions.length > 0) {
            const sortedSessions = existingSessions.sort((a, B) => parseInt(B.path.match(/[0-9]+/)[0]) - parseInt(A.path.match(/[0-9]+/)[0]));
            const lastSL = (_c = app.metadataCache.getFileCache(sortedSessions[0])) == null ? void 0 : _c.frontmatter;
            this.nota.idSec = parseInt(lastSL.idSec) + 1;
            this.nota.pagInicio = lastSL.pagFin;
          } else {
            this.nota.idSec = 1;
            this.nota.pagInicio = 1;
          }
        } else {
          this.nota.idSec = 1;
          this.nota.pagInicio = 1;
        }
        return this.nota.id;
      }
      async getNota() {
        return this.nota;
      }
      async getParametrosLibro() {
        debugger;
        const currentFile = app.workspace.getActiveFile();
        if (!currentFile || !currentFile.path)
          return;
        const metadataCache = app.metadataCache;
        const fileCache = metadataCache.getFileCache(currentFile);
        if (!fileCache || !fileCache.frontmatter || fileCache.frontmatter.type !== "LB") {
          new Notice("La nota activa debe ser de tipo Libro en la Bibloteca para poder crear una sesi\xF3n de Lectura.");
          return;
        }
        const frontMatter = fileCache.frontmatter;
        this.nota["paginas"] = frontMatter.paginas;
        this.nota["titulo"] = frontMatter.titulo;
        this.nota["palabrasPorHoja"] = frontMatter.palabrasPorHoja;
      }
      async getAsunto() {
        var _a, _b, _c, _d, _e, _f, _g;
        let padres = [];
        let activo = app.workspace.getActiveFile();
        let siAsunto = true;
        let nombre = "";
        let nota;
        if (activo != null) {
          nombre = activo.basename;
          nota = app.metadataCache.getFileCache(activo);
          nota.frontmatter = nota.frontmatter || {};
          nota.frontmatter.file = {};
          Object.assign(nota.frontmatter.file, activo);
          padres.unshift(nombre);
          debugger;
          this.nota.asuntoDefinido = true;
          this.nota.proyectoQ = "";
          if (Array.isArray((_a = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _a.proyectoQ)) {
            this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
          } else if ((_b = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _b.proyectoQ) {
            this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
          }
          this.nota.proyectoGTD = "";
          if (Array.isArray((_c = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _c.proyectoGTD)) {
            this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
          } else if ((_d = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _d.proyectoGTD) {
            this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
          }
          this.nota.areaInteres = [];
          if (Array.isArray((_e = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _e.areaInteres)) {
            this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
          } else {
            if ((_f = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _f.areaInteres) {
              this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
            }
          }
          this.nota.areaVida = "";
          if ((_g = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _g.areaVida) {
            if (Array.isArray(nota.frontmatter.areaVida)) {
              this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
            } else if (typeof nota.frontmatter.areaVida === "string") {
              this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
            }
          } else {
            this.nota.areaVida = "No es de ning\xFAn Area de Vida";
          }
          return { siAsunto, nombre: padres };
        }
      }
      async getAliases() {
        this.nota.aliases = [];
        this.nota.aliases.push(`SL - ${this.nota.idSec} / ${this.nota.titulo}`);
        return this.nota.aliases;
      }
      async getFecha() {
        let fechaActual = DateTime.now();
        fechaActual = fechaActual.setLocale("es");
        fechaActual = fechaActual.toFormat("yyyy-MM-dd EEEE HH:mm");
        this.nota.fecha = fechaActual;
        return fechaActual;
      }
      async getRename() {
        debugger;
        const newName = `${this.infoSubsistema.folder}/${this.infoSubsistema.type} - ${this.nota.id}.md`;
        const file = this.tp.file.config.target_file;
        const existe = app.vault.getAbstractFileByPath(newName);
        try {
          if (existe instanceof import_obsidian22.TFile) {
            const nombreFile = newName.split("/");
            const borrar = await this.suggester(
              ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
              [true, false],
              true,
              `\xBF${nombreFile.pop()} ya existe. Qu\xE9 deseas hacer?`
            );
            if (borrar) {
              await app.vault.delete(existe);
              if (file instanceof import_obsidian22.TFile) {
                await app.vault.rename(file, newName);
                console.log("Archivo renombrado con \xE9xito.");
                return newName;
              }
            } else {
              console.log("Cancelando la creaci\xF3n del archivo.");
              throw new Error("Proceso cancelado por el usuario.");
            }
          } else {
            if (file instanceof import_obsidian22.TFile) {
              await app.vault.rename(file, newName);
              console.log("Archivo renombrado con \xE9xito.");
              return newName;
            }
          }
        } catch (error) {
          console.error("Error al cambiar el nombre", error);
          throw error;
        }
      }
    };
  }
});

// src/modules/moduloRegistroTiempo/API/RTBase.ts
var import_obsidian23, import_obsidian24, RTBase;
var init_RTBase = __esm({
  "src/modules/moduloRegistroTiempo/API/RTBase.ts"() {
    "use strict";
    init_utilsAPI();
    import_obsidian23 = require("obsidian");
    import_obsidian24 = require("obsidian");
    init_SesionLectura();
    RTBase = class {
      constructor(plugin) {
        this.plugin = plugin;
        this.utilsApi = new utilsAPI(plugin);
        this.tp = plugin.tp;
        this.infoSubsistema = {};
      }
      async iniciarRegistro(infoSubsistema, campos) {
        if (typeof infoSubsistema === "object" && infoSubsistema !== null) {
          if (!campos || !Array.isArray(campos)) {
            throw new Error("Campos debe ser un array definido.");
          }
          this.nota = {};
          let nota;
          Object.assign(this.infoSubsistema, infoSubsistema);
          debugger;
          if (this.infoSubsistema.defined) {
            this.infoSubsistema.folder = this.plugin.settings[infoSubsistema.folder];
            this.infoSubsistema.indice = this.plugin.settings[infoSubsistema.indice];
            Object.assign(this.nota, infoSubsistema);
          }
          let fieldHandler;
          switch (this.infoSubsistema.type) {
            case "SL":
              const SesionLectura3 = await Promise.resolve().then(() => (init_SesionLectura2(), SesionLectura_exports));
              fieldHandler = new SesionLectura3.SesionLectura(this.plugin, this.infoSubsistema);
              break;
            default:
              throw new Error(`No se ha definido un manejador de campos para el tipo ${this.infoSubsistema.type}`);
          }
          try {
            for (let campo of campos) {
              const functionName = `get${campo.charAt(0).toUpperCase() + campo.slice(1)}`;
              if (typeof fieldHandler[functionName] === "function") {
                this.nota[campo] = await fieldHandler[functionName]();
                nota = await fieldHandler.getNota();
                for (const key in nota) {
                  if (!(key in this.nota)) {
                    this.nota[key] = nota[key];
                  }
                }
              } else {
                console.error(`La funci\xF3n ${functionName} no est\xE1 definida.`);
              }
            }
          } catch (error) {
            console.error("No se pudo crear el objeto de registro.", error);
            new Notice("No se pudo crear el objeto de registro.");
            return null;
          }
          return this.nota;
        } else {
          try {
            const registro = await this.utilsApi.crearObjetoRegistro(this.plugin);
            await this.utilsApi.verificarTareasActivas(registro, this.plugin.app);
            if (registro.detener) {
              return registro;
            }
            await this.utilsApi.definirTipoRegistro(registro, this.plugin.app);
            if (registro.detener) {
              return registro;
            }
            await this.utilsApi.construirNombreyAlias(registro, this.plugin.app);
            return registro;
          } catch (error) {
            new Notice("No se pudo crear el objeto de registro.");
            return null;
          }
        }
      }
      async cerrarRegistro(registro) {
        var _a, _b, _c;
        const folder = this.plugin.settings.folder_RegistroTiempo;
        if (typeof registro === "string") {
          registro = parseInt(registro);
        }
        if (typeof registro === "number") {
          const files = app.vault.getMarkdownFiles();
          let infoNota;
          for (let file of files) {
            if (file.path.startsWith(folder)) {
              const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
              if ((metadata == null ? void 0 : metadata.id) === registro) {
                infoNota = { file };
                Object.assign(infoNota, metadata);
              }
            }
          }
          let campos = ["fecha", "horaFinal", "tiempoTrabajado"];
          let resultado = await this.plugin.YAMLUpdaterAPI.archivarNota(infoNota, campos);
          let textoResultado = Object.entries(resultado).map(([propiedad, valor]) => `${propiedad}: ${valor}`).join(", ");
          new Notice(`Tarea cerrada. Campos actualizados: ${textoResultado}`);
        } else if (registro instanceof import_obsidian23.TFile) {
          const metadata = (_b = app.metadataCache.getFileCache(registro)) == null ? void 0 : _b.frontmatter;
          let infoNota = { file: registro };
          Object.assign(infoNota, metadata);
          let campos = ["fecha", "horaFinal", "tiempoTrabajado"];
          let resultado = await this.plugin.YAMLUpdaterAPI.archivarNota(infoNota, campos);
          let textoResultado = Object.entries(resultado).map(([propiedad, valor]) => `${propiedad}: ${valor}`).join(", ");
          new Notice(`Tarea cerrada. Campos actualizados: ${textoResultado}`);
        } else {
          const registro2 = await this.utilsApi.buscarRegistrosActivos(app);
          const metadata = (_c = app.metadataCache.getFileCache(registro2)) == null ? void 0 : _c.frontmatter;
          let infoNota = { file: registro2 };
          Object.assign(infoNota, metadata);
          let campos = ["fecha", "horaFinal", "tiempoTrabajado"];
          let resultado = await this.plugin.YAMLUpdaterAPI.archivarNota(infoNota, campos);
          let textoResultado = Object.entries(resultado).map(([propiedad, valor]) => `${propiedad}: ${valor}`).join(", ");
          new Notice(`Tarea cerrada. Campos actualizados: ${textoResultado}`);
        }
      }
    };
  }
});

// src/modules/moduloRegistroTiempo/API/registroTiempoAPI.ts
var import_obsidian25, registroTiempoAPI;
var init_registroTiempoAPI = __esm({
  "src/modules/moduloRegistroTiempo/API/registroTiempoAPI.ts"() {
    "use strict";
    init_utilsAPI();
    import_obsidian25 = require("obsidian");
    init_RegistroTiempo();
    init_RTBase();
    registroTiempoAPI = class extends RTBase {
      constructor(plugin) {
        super(plugin);
        this.plugin = plugin;
        this.plugin = plugin;
        this.utilsApi = new utilsAPI(plugin);
        this.tp = plugin.tp;
      }
      // Invocado desde el template de templater Paso 3 de 3
      async retomarRegistro(id) {
        var _a, _b, _c, _d;
        const folder = this.plugin.settings.folder_RegistroTiempo;
        try {
          let quitarDobleCorchete2 = function(str) {
            if (str.startsWith("[[") && str.endsWith("]]")) {
              return str.slice(2, -2);
            }
            return str;
          }, normalizarArray2 = function(arr) {
            return arr.map((item) => {
              if (typeof item === "string") {
                return quitarDobleCorchete2(item);
              }
              return item;
            });
          };
          var quitarDobleCorchete = quitarDobleCorchete2, normalizarArray = normalizarArray2;
          const registro = await this.utilsApi.crearObjetoRegistro(this.plugin);
          await this.utilsApi.verificarTareasActivas(registro, this.plugin.app);
          if (registro.detener) {
            return registro;
          }
          const files = this.plugin.app.vault.getMarkdownFiles();
          let registroAntiguo;
          for (let file of files) {
            if (file.path.startsWith(folder)) {
              const metadata = (_a = this.plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
              if ((metadata == null ? void 0 : metadata.id) === parseInt(id)) {
                registroAntiguo = { file, frontmatter: metadata };
                break;
              }
            }
          }
          if (!registroAntiguo) {
            new Notice(`No se encontr\xF3 el registro antiguo con ID: ${id}`);
            registro.detener = true;
            return registro;
          }
          const fm = registroAntiguo.frontmatter;
          registro.titulo = (_b = fm.titulo) != null ? _b : "Sin Titulo";
          registro.asuntoRetomado = (_c = fm.asunto) != null ? _c : null;
          registro.idSec = ((_d = fm.idSec) != null ? _d : 0) + 1;
          registro.areaVida = "";
          if (typeof fm.areaVida === "string") {
            registro.areaVida = quitarDobleCorchete2(fm.areaVida);
          }
          registro.areaInteres = [];
          if (Array.isArray(fm.areaInteres)) {
            registro.areaInteres = normalizarArray2(fm.areaInteres);
          }
          registro.proyectoGTD = [];
          if (Array.isArray(fm.proyectoGTD)) {
            registro.proyectoGTD = normalizarArray2(fm.proyectoGTD);
          }
          registro.proyectoQ = [];
          if (Array.isArray(fm.proyectoQ)) {
            registro.proyectoQ = normalizarArray2(fm.proyectoQ);
          }
          registro.aliases = [];
          if (Array.isArray(fm.aliases)) {
            registro.aliases = normalizarArray2(fm.aliases);
          }
          await this.utilsApi.construirNombreyAlias(registro, this.plugin.app);
          return registro;
        } catch (error) {
          console.error(error);
          new Notice("No se pudo crear el objeto de registro al retomar.");
          return null;
        }
      }
      // Invocado para crear el template de Retomar Paso 1 de 3
      async retomarTarea(id) {
        debugger;
        const filePath = `Plantillas/${this.plugin.settings[`folder_RegistroTiempo`]}/Plt - RegistroTiempo.md`;
        const template = app.vault.getAbstractFileByPath(filePath);
        if (template instanceof import_obsidian25.TFile) {
          console.log("Archivo encontrado:", template);
        } else {
          console.log("Archivo no encontrado.");
        }
        const filename = "Retomar " + id;
        const folder = app.vault.getAbstractFileByPath("Inbox");
        let crearNota = this.tp.file.static_functions.get("create_new");
        await crearNota(template, filename, false, folder).basename;
      }
      // Implementación del método con unión de tipos para el parámetro id
      async detalleRegistro(registro) {
        var _a, _b, _c;
        const folder = this.plugin.settings.folder_RegistroTiempo;
        let infoNota;
        debugger;
        if (typeof registro === "string") {
          registro = parseInt(registro);
        }
        if (typeof registro === "number") {
          const files = app.vault.getMarkdownFiles();
          for (let file of files) {
            if (file.path.startsWith(folder)) {
              const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
              if ((metadata == null ? void 0 : metadata.id) === registro) {
                infoNota = { file };
                Object.assign(infoNota, metadata);
              }
            }
          }
        } else if (registro instanceof import_obsidian25.TFile) {
          const metadata = (_b = app.metadataCache.getFileCache(registro)) == null ? void 0 : _b.frontmatter;
          infoNota = { file: registro };
          Object.assign(infoNota, metadata);
        } else {
          const registro2 = await this.utilsApi.buscarRegistrosActivos(app);
          const metadata = (_c = app.metadataCache.getFileCache(registro2)) == null ? void 0 : _c.frontmatter;
          infoNota = { file: registro2 };
          Object.assign(infoNota, metadata);
        }
        let campos = ["descripcion_RegistroTiempo"];
        debugger;
        let resultado = await this.plugin.YAMLUpdaterAPI.actualizarNota(infoNota, campos);
        let textoResultado = Object.entries(resultado).map(([propiedad, valor]) => `${propiedad}: ${valor}`).join(", ");
        new Notice(`Descripci\xF3n actualizada: ${textoResultado}`);
      }
    };
  }
});

// src/modules/taskNavigator/models/Task.ts
var import_obsidian80, TaskListType, Task3;
var init_Task = __esm({
  "src/modules/taskNavigator/models/Task.ts"() {
    "use strict";
    init_Entity();
    import_obsidian80 = require("obsidian");
    TaskListType = /* @__PURE__ */ ((TaskListType2) => {
      TaskListType2["INBOX"] = "inbox";
      TaskListType2["NEXT_ACTIONS"] = "nextActions";
      TaskListType2["CALENDAR"] = "calendar";
      TaskListType2["HOPEFULLY_TODAY"] = "hopefullyToday";
      TaskListType2["ASSIGNED"] = "assigned";
      TaskListType2["PROJECTS"] = "projects";
      TaskListType2["SOMEDAY_MAYBE"] = "somedayMaybe";
      TaskListType2["NOT_THIS_WEEK"] = "notThisWeek";
      TaskListType2["WAITING"] = "waiting";
      return TaskListType2;
    })(TaskListType || {});
    Task3 = class {
      // Razón por la que está bloqueada
      constructor(id, text, rawText, completed, file, lineInfo) {
        // Tipo de lista GTD donde se encuentra
        this.isBlocked = false;
        this.id = id;
        this.taskId = id;
        this.text = text;
        this.rawText = rawText;
        this.completed = completed;
        this.file = file;
        this.filePath = file.path;
        this.lineInfo = lineInfo;
        this.priority = "normal" /* NORMAL */;
        this.tags = {
          contexts: [],
          people: [],
          gtdTags: [],
          otherTags: [],
          all: []
        };
        this.timing = {};
        this.dependencies = [];
      }
      /**
       * Comprueba si la tarea tiene un contexto específico
       */
      hasContext(context) {
        return this.tags.contexts.some((ctx) => ctx.toLowerCase() === context.toLowerCase());
      }
      /**
       * Comprueba si la tarea está asignada a una persona específica
       */
      isAssignedTo(person) {
        return this.tags.people.some((p) => p.toLowerCase() === person.toLowerCase());
      }
      /**
       * Comprueba si la tarea tiene una etiqueta GTD específica
       */
      hasGTDTag(tag) {
        return this.tags.gtdTags.some((t) => t.toLowerCase() === tag.toLowerCase());
      }
      /**
       * Determina si una tarea está vencida
       */
      isOverdue() {
        if (!this.timing.dueDate && !this.timing.scheduledDate) {
          return false;
        }
        const today = /* @__PURE__ */ new Date();
        today.setHours(0, 0, 0, 0);
        if (this.timing.dueDate) {
          const dueDate = new Date(this.timing.dueDate);
          dueDate.setHours(0, 0, 0, 0);
          if (dueDate < today) {
            return true;
          }
        }
        if (this.timing.scheduledDate) {
          const scheduledDate = new Date(this.timing.scheduledDate);
          scheduledDate.setHours(0, 0, 0, 0);
          if (scheduledDate < today) {
            return true;
          }
        }
        return false;
      }
      /**
       * Determina si una tarea está programada para hoy
       */
      isForToday() {
        if (!this.timing.dueDate && !this.timing.scheduledDate) {
          return false;
        }
        const today = /* @__PURE__ */ new Date();
        today.setHours(0, 0, 0, 0);
        if (this.timing.dueDate) {
          const dueDate = new Date(this.timing.dueDate);
          dueDate.setHours(0, 0, 0, 0);
          if (dueDate.getTime() === today.getTime()) {
            return true;
          }
        }
        if (this.timing.scheduledDate) {
          const scheduledDate = new Date(this.timing.scheduledDate);
          scheduledDate.setHours(0, 0, 0, 0);
          if (scheduledDate.getTime() === today.getTime()) {
            return true;
          }
        }
        return false;
      }
      /**
       * Determina si una tarea tiene hora de inicio establecida
       */
      hasStartTime() {
        return !!this.timing.startTime;
      }
      /**
       * Determina los días hasta la fecha límite (positivo si aún hay tiempo, negativo si está vencida)
       */
      getDaysUntilDue() {
        if (!this.timing.dueDate) {
          return null;
        }
        const today = /* @__PURE__ */ new Date();
        today.setHours(0, 0, 0, 0);
        const dueDate = new Date(this.timing.dueDate);
        dueDate.setHours(0, 0, 0, 0);
        const diffTime = dueDate.getTime() - today.getTime();
        return Math.ceil(diffTime / (1e3 * 60 * 60 * 24));
      }
    };
  }
});

// src/modules/taskNavigator/models/Entity.ts
function createEntity(type2, id, title, description, file, state, metadata = {}) {
  switch (type2) {
    case "AV" /* AREA_VIDA */:
      return new AreaVida(id, title, description, file, state, metadata.trimestre || "");
    case "AI" /* AREA_INTERES */:
      return new AreaInteres(id, title, description, file, state, metadata.nivelAI || 0);
    case "PQ" /* PROYECTO_Q */:
      return new ProyectoQ(id, title, description, file, state, metadata.trimestres || []);
    case "PGTD" /* PROYECTO_GTD */:
      return new ProyectoGTD(id, title, description, file, state, metadata.nivelP || 0);
    default:
      const entity = new Entity(id, type2, title, description, file, state);
      entity.metadata = metadata;
      return entity;
  }
}
var import_obsidian81, EntityType, Entity, AreaVida, AreaInteres, ProyectoQ, ProyectoGTD;
var init_Entity = __esm({
  "src/modules/taskNavigator/models/Entity.ts"() {
    "use strict";
    import_obsidian81 = require("obsidian");
    init_Task();
    EntityType = /* @__PURE__ */ ((EntityType3) => {
      EntityType3["AREA_VIDA"] = "AV";
      EntityType3["AREA_INTERES"] = "AI";
      EntityType3["PROYECTO_Q"] = "PQ";
      EntityType3["PROYECTO_GTD"] = "PGTD";
      EntityType3["ANOTACION"] = "Ax";
      EntityType3["CAMPANA"] = "Cp";
      EntityType3["ENTREGABLE"] = "EMkt";
      EntityType3["REGISTRO_TIEMPO"] = "RT";
      EntityType3["TRANSACCION"] = "Tx";
      EntityType3["OTHER"] = "OTHER";
      EntityType3["UNKNOWN"] = "UNKNOWN";
      return EntityType3;
    })(EntityType || {});
    Entity = class {
      constructor(id, type2, title, description, file, state = "" /* UNKNOWN */) {
        this.tasks = [];
        this.children = [];
        this.metadata = {};
        this.id = id;
        this.type = type2;
        this.title = title;
        this.description = description;
        this.file = file;
        this.state = state;
      }
      /**
       * Añade una tarea a esta entidad
       */
      addTask(task) {
        this.tasks.push(task);
        task.parentEntity = this;
      }
      /**
       * Añade una entidad hija
       */
      addChild(child) {
        this.children.push(child);
        child.parent = this;
      }
      /**
       * Devuelve el número total de tareas (incluyendo las de entidades hijas)
       */
      getTotalTaskCount() {
        let count = this.tasks.length;
        for (const child of this.children) {
          count += child.getTotalTaskCount();
        }
        return count;
      }
      /**
       * Devuelve el número total de tareas pendientes (incluyendo las de entidades hijas)
       */
      getPendingTaskCount() {
        let count = this.tasks.filter((task) => !task.completed).length;
        for (const child of this.children) {
          count += child.getPendingTaskCount();
        }
        return count;
      }
    };
    AreaVida = class extends Entity {
      constructor(id, title, description, file, state, trimestre) {
        super(id, "AV" /* AREA_VIDA */, title, description, file, state);
        this.trimestre = trimestre;
        this.metadata.trimestre = trimestre;
      }
    };
    AreaInteres = class extends Entity {
      constructor(id, title, description, file, state, nivelAI = 0) {
        super(id, "AI" /* AREA_INTERES */, title, description, file, state);
        this.nivelAI = nivelAI;
        this.level = nivelAI;
        this.metadata.nivelAI = nivelAI;
      }
    };
    ProyectoQ = class extends Entity {
      constructor(id, title, description, file, state, trimestres = []) {
        super(id, "PQ" /* PROYECTO_Q */, title, description, file, state);
        this.trimestres = [];
        this.trimestres = trimestres;
        this.metadata.trimestres = trimestres;
      }
    };
    ProyectoGTD = class extends Entity {
      constructor(id, title, description, file, state, nivelP = 0) {
        super(id, "PGTD" /* PROYECTO_GTD */, title, description, file, state);
        this.nivelP = nivelP;
        this.level = nivelP;
        this.metadata.nivelP = nivelP;
      }
    };
  }
});

// src/modules/taskNavigator/models/HierarchyViewModel.ts
var HierarchyViewModel;
var init_HierarchyViewModel = __esm({
  "src/modules/taskNavigator/models/HierarchyViewModel.ts"() {
    "use strict";
    init_Entity();
    init_Task();
    HierarchyViewModel = class {
      constructor() {
        // Entidad en foco (la nota activa actual)
        this.focusEntity = null;
        // Entidades raíz para la jerarquía
        this.rootEntities = [];
        // Todas las entidades disponibles
        this.allEntities = [];
        // Todas las tareas clasificadas por tipo de lista GTD
        this.gtdLists = /* @__PURE__ */ new Map();
        // Todas las tareas sin clasificar
        this.allTasks = [];
        // Modo de visualización actual
        this.viewMode = "hierarchy" /* HIERARCHY */;
        // Resultados filtrados (para mostrar)
        this.filteredEntities = [];
        this.filteredTasks = /* @__PURE__ */ new Map();
        this.filters = {
          showCompleted: false,
          showActive: true,
          showPaused: true,
          showStopped: false,
          showArchived: false,
          showAreasVida: true,
          showAreasInteres: true,
          showProyectosQ: true,
          showProyectosGTD: true,
          showOtherEntities: true,
          contexts: [],
          people: [],
          enabledLists: Object.values(TaskListType),
          searchText: "",
          daysRange: 7
        };
      }
      /**
       * Aplica los filtros seleccionados a las entidades y tareas
       */
      applyFilters(filters) {
        this.filters = { ...this.filters, ...filters };
        this.filteredEntities = this.filterEntities(this.rootEntities);
        this.filteredTasks = /* @__PURE__ */ new Map();
        for (const listType of Object.values(TaskListType)) {
          const tasks = this.gtdLists.get(listType) || [];
          const filteredTasks = this.filterTasks(tasks);
          if (this.filters.enabledLists.includes(listType)) {
            this.filteredTasks.set(listType, filteredTasks);
          }
        }
      }
      /**
       * Filtra un conjunto de entidades y sus hijos recursivamente
       */
      filterEntities(entities) {
        const result = [];
        for (const entity of entities) {
          if (!this.isEntityTypeEnabled(entity.type)) {
            continue;
          }
          if (!this.isEntityStateEnabled(entity.state)) {
            continue;
          }
          if (this.filters.searchText && !this.matchesSearchText(entity)) {
            continue;
          }
          const filteredEntity = { ...entity };
          filteredEntity.children = this.filterEntities(entity.children);
          filteredEntity.tasks = this.filterTasks(entity.tasks);
          if (filteredEntity.children.length > 0 || filteredEntity.tasks.length > 0 || entity === this.focusEntity) {
            result.push(filteredEntity);
          }
        }
        return result;
      }
      /**
       * Filtra un conjunto de tareas según los criterios
       */
      filterTasks(tasks) {
        return tasks.filter((task) => {
          if (task.completed && !this.filters.showCompleted) {
            return false;
          }
          if (this.filters.searchText && !this.taskMatchesSearchText(task)) {
            return false;
          }
          if (this.filters.contexts.length > 0) {
            const hasMatchingContext = this.filters.contexts.some((ctx) => task.tags.contexts.includes(ctx));
            if (!hasMatchingContext) {
              return false;
            }
          }
          if (this.filters.people.length > 0) {
            const hasMatchingPerson = this.filters.people.some((person) => task.tags.people.includes(person));
            if (!hasMatchingPerson) {
              return false;
            }
          }
          if (task.timing.dueDate || task.timing.scheduledDate) {
            const daysUntilDue = task.getDaysUntilDue();
            if (daysUntilDue !== null && Math.abs(daysUntilDue) > this.filters.daysRange) {
              return false;
            }
          }
          return true;
        });
      }
      /**
       * Comprueba si el tipo de entidad está habilitado en los filtros
       */
      isEntityTypeEnabled(type2) {
        switch (type2) {
          case "AV" /* AREA_VIDA */:
            return this.filters.showAreasVida;
          case "AI" /* AREA_INTERES */:
            return this.filters.showAreasInteres;
          case "PQ" /* PROYECTO_Q */:
            return this.filters.showProyectosQ;
          case "PGTD" /* PROYECTO_GTD */:
            return this.filters.showProyectosGTD;
          default:
            return this.filters.showOtherEntities;
        }
      }
      /**
       * Comprueba si el estado de la entidad está habilitado en los filtros
       */
      isEntityStateEnabled(state) {
        switch (state) {
          case "\u{1F7E2}":
            return this.filters.showActive;
          case "\u{1F7E1}":
            return this.filters.showPaused;
          case "\u{1F534}":
            return this.filters.showStopped;
          case "\u{1F535}":
            return this.filters.showArchived;
          default:
            return true;
        }
      }
      /**
       * Comprueba si la entidad coincide con el texto de búsqueda
       */
      matchesSearchText(entity) {
        const searchText = this.filters.searchText.toLowerCase();
        return entity.title.toLowerCase().includes(searchText) || entity.description.toLowerCase().includes(searchText);
      }
      /**
       * Comprueba si la tarea coincide con el texto de búsqueda
       */
      taskMatchesSearchText(task) {
        const searchText = this.filters.searchText.toLowerCase();
        return task.text.toLowerCase().includes(searchText);
      }
    };
  }
});

// src/modules/taskNavigator/utils/DebugUtils.ts
var DebugUtils_exports = {};
__export(DebugUtils_exports, {
  DebugUtils: () => DebugUtils
});
var DebugUtils;
var init_DebugUtils = __esm({
  "src/modules/taskNavigator/utils/DebugUtils.ts"() {
    "use strict";
    init_Task();
    init_Entity();
    init_HierarchyViewModel();
    DebugUtils = class {
      /**
       * Muestra información detallada sobre el modelo de jerarquía en la consola
       */
      static dumpModelInfo(model) {
        console.group("[TaskNavigator] Informaci\xF3n del modelo de jerarqu\xEDa");
        console.log("Entidades totales:", model.allEntities.length);
        console.log("Entidades ra\xEDz:", model.rootEntities.length);
        console.log("Entidad en foco:", model.focusEntity ? model.focusEntity.title : "Ninguna");
        console.log("Tareas totales:", model.allTasks.length);
        const entityTypes = {};
        model.allEntities.forEach((entity) => {
          entityTypes[entity.type] = (entityTypes[entity.type] || 0) + 1;
        });
        console.log("Distribuci\xF3n de tipos de entidad:", entityTypes);
        console.group("Distribuci\xF3n de tareas por lista GTD:");
        model.gtdLists.forEach((tasks, listType) => {
          console.log(`${listType}: ${tasks.length} tareas`);
        });
        console.groupEnd();
        console.group("Entidades ra\xEDz:");
        model.rootEntities.forEach((entity) => {
          this.dumpEntityInfo(entity, 0);
        });
        console.groupEnd();
        console.groupEnd();
      }
      /**
       * Muestra información sobre una entidad y sus descendientes
       */
      static dumpEntityInfo(entity, level) {
        const indent = "  ".repeat(level);
        console.group(`${indent}${entity.title} (${entity.type})`);
        console.log(`${indent}ID:`, entity.id);
        console.log(`${indent}Estado:`, entity.state);
        console.log(`${indent}Archivo:`, entity.file.path);
        console.log(`${indent}Tareas:`, entity.tasks.length);
        console.log(`${indent}Hijos:`, entity.children.length);
        if (entity.areaVida)
          console.log(`${indent}\xC1rea de Vida:`, entity.areaVida);
        if (entity.areaInteres)
          console.log(`${indent}\xC1rea de Inter\xE9s:`, entity.areaInteres);
        if (entity.proyectoQ)
          console.log(`${indent}Proyecto Q:`, entity.proyectoQ);
        if (entity.proyectoGTD)
          console.log(`${indent}Proyecto GTD:`, entity.proyectoGTD);
        if (entity.tasks.length > 0) {
          console.group(`${indent}Tareas:`);
          entity.tasks.forEach((task) => {
            this.dumpTaskInfo(task, level + 1);
          });
          console.groupEnd();
        }
        if (entity.children.length > 0) {
          console.group(`${indent}Entidades hijas:`);
          entity.children.forEach((child) => {
            this.dumpEntityInfo(child, level + 1);
          });
          console.groupEnd();
        }
        console.groupEnd();
      }
      /**
       * Muestra información sobre una tarea
       */
      static dumpTaskInfo(task, level) {
        const indent = "  ".repeat(level);
        console.group(`${indent}Tarea: ${task.text}`);
        console.log(`${indent}ID:`, task.id);
        console.log(`${indent}Completada:`, task.completed);
        console.log(`${indent}Texto original:`, task.rawText);
        console.log(`${indent}Archivo:`, task.file.path);
        console.log(`${indent}L\xEDnea:`, task.lineInfo.number);
        if (task.listType)
          console.log(`${indent}Lista GTD:`, task.listType);
        if (task.tags.contexts.length > 0)
          console.log(`${indent}Contextos:`, task.tags.contexts);
        if (task.tags.people.length > 0)
          console.log(`${indent}Personas:`, task.tags.people);
        if (task.tags.gtdTags.length > 0)
          console.log(`${indent}Tags GTD:`, task.tags.gtdTags);
        if (task.timing.dueDate)
          console.log(`${indent}Fecha l\xEDmite:`, task.timing.dueDate);
        if (task.timing.scheduledDate)
          console.log(`${indent}Fecha programada:`, task.timing.scheduledDate);
        if (task.timing.startDate)
          console.log(`${indent}Fecha de inicio:`, task.timing.startDate);
        if (task.timing.startTime)
          console.log(`${indent}Hora de inicio:`, task.timing.startTime);
        if (task.timing.endTime)
          console.log(`${indent}Hora final:`, task.timing.endTime);
        if (task.timing.duration)
          console.log(`${indent}Duraci\xF3n:`, task.timing.duration, "minutos");
        if (task.timing.week)
          console.log(`${indent}Semana:`, task.timing.week);
        if (task.dependencies.length > 0)
          console.log(`${indent}Dependencias:`, task.dependencies);
        if (task.isBlocked)
          console.log(`${indent}Bloqueada:`, task.blockReason);
        console.groupEnd();
      }
    };
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ManagementPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian89 = require("obsidian");

// src/settingsTab.ts
var import_obsidian = require("obsidian");
var PluginMainSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Configuraci\xF3n del plugin de Gesti\xF3n Personal" });
    const tabContainer = containerEl.createDiv({ cls: "tab-container" });
    const tabContentContainer = containerEl.createDiv({ cls: "tab-content-container" });
    const tabTitles = ["Activar M\xF3dulos", "Directorios Subsistemas", "Pesta\xF1a 3"];
    tabTitles.forEach((title, index) => {
      const tabButton = document.createElement("button");
      tabButton.textContent = title;
      tabButton.classList.add("tab-link");
      tabButton.dataset.tab = `tab${index}`;
      tabButton.onclick = () => this.openTab(`tab${index}`);
      tabContainer.appendChild(tabButton);
      const tabContent = document.createElement("div");
      tabContent.id = `tab${index}`;
      tabContent.classList.add("tab-content");
      tabContentContainer.appendChild(tabContent);
      if (index > 0)
        tabContent.style.display = "none";
      if (index === 0) {
        new import_obsidian.Setting(tabContent).setName("Ver Alias en el Status Bar").setDesc("Elige si deseas ver el Aliases de las notas en el Status Bar.").addToggle((toggle) => toggle.setValue(this.plugin.settings.moduloAliasStatusBar).onChange(async (value) => {
          this.plugin.settings.moduloAliasStatusBar = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(tabContent).setName("Activar M\xF3dulo Registro Tiempo").setDesc("Activa o desactiva el m\xF3dulo de registro de tiempo.").addToggle((toggle) => toggle.setValue(this.plugin.settings.moduloRegistroTiempo).onChange(async (value) => {
          this.plugin.settings.moduloRegistroTiempo = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(tabContent).setName("Activar M\xF3dulo Base - Pruebas").setDesc("Activa o desactiva el m\xF3dulo de pruebas.").addToggle((toggle) => toggle.setValue(this.plugin.settings.moduloBase).onChange(async (value) => {
          this.plugin.settings.moduloBase = value;
          await this.plugin.saveSettings();
        }));
        containerEl.createEl("h3", { text: "Navegador de Tareas" });
        new import_obsidian.Setting(containerEl).setName("Task Execution Navigator").setDesc("Permite navegar r\xE1pidamente a tareas en ejecuci\xF3n").addToggle((toggle) => toggle.setValue(this.plugin.settings.taskExecutionNavigatorModule).onChange(async (value) => {
          var _a, _b;
          this.plugin.settings.taskExecutionNavigatorModule = value;
          if (value) {
            (_a = this.plugin.taskExecutionNavigatorModule) == null ? void 0 : _a.activate();
          } else {
            (_b = this.plugin.taskExecutionNavigatorModule) == null ? void 0 : _b.deactivate();
          }
          await this.plugin.saveSettings();
        }));
      }
      if (index === 1) {
        const toggleCollapse = (event) => {
          const nextElement = event.target.nextElementSibling;
          if (nextElement.style.display === "none") {
            nextElement.style.display = "block";
            event.target.innerHTML = "&#9660; " + event.target.getAttribute("data-title");
          } else {
            nextElement.style.display = "none";
            event.target.innerHTML = "&#9654; " + event.target.getAttribute("data-title");
          }
        };
        const anotacionesTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Anotaciones"' });
        anotacionesTitle.setAttribute("data-title", 'Subsistema de "Anotaciones"');
        anotacionesTitle.style.cursor = "pointer";
        const anotacionesContent = tabContent.createDiv();
        anotacionesContent.style.display = "none";
        anotacionesTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(anotacionesContent).setName("Carpeta de Anotaciones").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n todas las Anotaciones.").addText((text) => text.setValue(this.plugin.settings.folder_Anotaciones).onChange(async (value) => {
          this.plugin.settings.folder_Anotaciones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(anotacionesContent).setName("Indice de Anotaciones").setDesc("Establece la ruta del \xEDndice de las Anotaciones.").addText((text) => text.setValue(this.plugin.settings.indice_Anotaciones).onChange(async (value) => {
          this.plugin.settings.indice_Anotaciones = value;
          await this.plugin.saveSettings();
        }));
        const campa\u00F1asTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Campa\xF1as"' });
        campa\u00F1asTitle.setAttribute("data-title", 'Subsistema de "Campa\xF1as"');
        campa\u00F1asTitle.style.cursor = "pointer";
        const campa\u00F1asContent = tabContent.createDiv();
        campa\u00F1asContent.style.display = "none";
        campa\u00F1asTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(campa\u00F1asContent).setName("Carpeta de Campa\xF1as").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las campa\xF1as.").addText((text) => text.setValue(this.plugin.settings.folder_Campa\u00F1as).onChange(async (value) => {
          this.plugin.settings.folder_Campa\u00F1as = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(campa\u00F1asContent).setName("\xCDndice de Campa\xF1as").setDesc("Establece la ruta del \xEDndice de campa\xF1as.").addText((text) => text.setValue(this.plugin.settings.indice_Campa\u00F1as).onChange(async (value) => {
          this.plugin.settings.indice_Campa\u00F1as = value;
          await this.plugin.saveSettings();
        }));
        const blogTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Art\xEDculos de Blog"' });
        blogTitle.setAttribute("data-title", 'Subsistema de "Art\xEDculos de Blog"');
        blogTitle.style.cursor = "pointer";
        const blogContent = tabContent.createDiv();
        blogContent.style.display = "none";
        blogTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(blogContent).setName("Carpeta de Art\xEDculos del Blog").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los art\xEDculos del blog.").addText((text) => text.setValue(this.plugin.settings.folder_ABlog).onChange(async (value) => {
          this.plugin.settings.folder_ABlog = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(blogContent).setName("Indice de Art\xEDculos del Blog").setDesc("Establece la ruta del \xEDndice de los art\xEDculos del blog.").addText((text) => text.setValue(this.plugin.settings.indice_ABlog).onChange(async (value) => {
          this.plugin.settings.indice_ABlog = value;
          await this.plugin.saveSettings();
        }));
        const desarrollosTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Desarrollos y c\xF3digos"' });
        desarrollosTitle.setAttribute("data-title", 'Subsistema de "Desarrollos y c\xF3digos"');
        desarrollosTitle.style.cursor = "pointer";
        const desarrollosContent = tabContent.createDiv();
        desarrollosContent.style.display = "none";
        desarrollosTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(desarrollosContent).setName("Carpeta de Desarrollos y C\xF3digos").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los desarrollos y c\xF3digos.").addText((text) => text.setValue(this.plugin.settings.folder_Desarrollos).onChange(async (value) => {
          this.plugin.settings.folder_Desarrollos = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(desarrollosContent).setName("\xCDndice de Desarrollos y C\xF3digos").setDesc("Establece la ruta del \xEDndice de los desarrollos y c\xF3digos.").addText((text) => text.setValue(this.plugin.settings.indice_Desarrollos).onChange(async (value) => {
          this.plugin.settings.indice_Desarrollos = value;
          await this.plugin.saveSettings();
        }));
        const estudioTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Estudio"' });
        estudioTitle.setAttribute("data-title", 'Subsistema de "Estudio"');
        estudioTitle.style.cursor = "pointer";
        const estudioContent = tabContent.createDiv();
        estudioContent.style.display = "none";
        estudioTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(estudioContent).setName("Carpeta de Temas de Estudio").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los temas de estudio.").addText((text) => text.setValue(this.plugin.settings.folder_Estudio).onChange(async (value) => {
          this.plugin.settings.folder_Estudio = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(estudioContent).setName("\xCDndice de Estudio").setDesc("Establece la ruta del \xEDndice de los temas de estudio.").addText((text) => text.setValue(this.plugin.settings.indice_Estudio).onChange(async (value) => {
          this.plugin.settings.indice_Estudio = value;
          await this.plugin.saveSettings();
        }));
        const gtdTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "GTD"' });
        gtdTitle.setAttribute("data-title", 'Subsistema de "GTD"');
        gtdTitle.style.cursor = "pointer";
        const gtdContent = tabContent.createDiv();
        gtdContent.style.display = "none";
        gtdTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(gtdContent).setName("Archivo de Bandeja de Entrada.").setDesc("Establece la ruta de la Bandeja de entrada GTD.").addText((text) => text.setValue(this.plugin.settings.file_Inbox).onChange(async (value) => {
          this.plugin.settings.file_Inbox = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(gtdContent).setName("Carpeta de Proyectos GTD").setDesc("Establece la ruta de la carpeta para proyectos GTD.").addText((text) => text.setValue(this.plugin.settings.folder_ProyectosGTD).onChange(async (value) => {
          this.plugin.settings.folder_ProyectosGTD = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(gtdContent).setName("\xCDndice de Proyectos GTD").setDesc("Establece la ruta del \xEDndice para proyectos GTD.").addText((text) => text.setValue(this.plugin.settings.indice_ProyectosGTD).onChange(async (value) => {
          this.plugin.settings.indice_ProyectosGTD = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(gtdContent).setName("Carpeta de Revisiones Semanales GTD").setDesc("Establece la ruta de la carpeta para las revisiones semanales GTD.").addText((text) => text.setValue(this.plugin.settings.folder_RSGTD).onChange(async (value) => {
          this.plugin.settings.folder_RSGTD = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(gtdContent).setName("\xCDndice de Revisiones Semanales GTD").setDesc("Establece la ruta del \xEDndice para las revisiones semanales GTD.").addText((text) => text.setValue(this.plugin.settings.indice_RSGTD).onChange(async (value) => {
          this.plugin.settings.indice_RSGTD = value;
          await this.plugin.saveSettings();
        }));
        const lecturaTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Lectura"' });
        lecturaTitle.setAttribute("data-title", 'Subsistema de "Lectura"');
        lecturaTitle.style.cursor = "pointer";
        const lecturaContent = tabContent.createDiv();
        lecturaContent.style.display = "none";
        lecturaTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(lecturaContent).setName("Carpeta de Sesiones de Lectura").setDesc("Establece la ruta de la carpeta para las sesiones de lectura.").addText((text) => text.setValue(this.plugin.settings.folder_LecturaSesiones).onChange(async (value) => {
          this.plugin.settings.folder_LecturaSesiones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(lecturaContent).setName("\xCDndice de Sesiones de Lectura").setDesc("Establece la ruta del \xEDndice para las sesiones de lectura.").addText((text) => text.setValue(this.plugin.settings.indice_LecturaSesiones).onChange(async (value) => {
          this.plugin.settings.indice_LecturaSesiones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(lecturaContent).setName("Carpeta de Res\xFAmenes de Libros").setDesc("Establece la ruta de la carpeta para los res\xFAmenes de libros.").addText((text) => text.setValue(this.plugin.settings.folder_LecturaResumenes).onChange(async (value) => {
          this.plugin.settings.folder_LecturaResumenes = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(lecturaContent).setName("\xCDndice de Res\xFAmenes de Libros").setDesc("Establece la ruta del \xEDndice para los res\xFAmenes de libros.").addText((text) => text.setValue(this.plugin.settings.indice_LecturaResumenes).onChange(async (value) => {
          this.plugin.settings.indice_LecturaResumenes = value;
          await this.plugin.saveSettings();
        }));
        const mentoriasTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Mentor\xEDas"' });
        mentoriasTitle.setAttribute("data-title", 'Subsistema de "Mentor\xEDas"');
        mentoriasTitle.style.cursor = "pointer";
        const mentoriasContent = tabContent.createDiv();
        mentoriasContent.style.display = "none";
        mentoriasTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(mentoriasContent).setName("Carpeta de Sesiones de Mentor\xEDa").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las sesiones de mentor\xEDa.").addText((text) => text.setValue(this.plugin.settings.folder_Mentorias).onChange(async (value) => {
          this.plugin.settings.folder_Mentorias = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(mentoriasContent).setName("\xCDndice de Mentor\xEDas").setDesc("Establece la ruta del \xEDndice de las sesiones de mentor\xEDa.").addText((text) => text.setValue(this.plugin.settings.indice_Mentorias).onChange(async (value) => {
          this.plugin.settings.indice_Mentorias = value;
          await this.plugin.saveSettings();
        }));
        const mercadoTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Mercado"' });
        mercadoTitle.setAttribute("data-title", 'Subsistema de "Mercado"');
        mercadoTitle.style.cursor = "pointer";
        const mercadoContent = tabContent.createDiv();
        mercadoContent.style.display = "none";
        mercadoTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(mercadoContent).setName("Carpeta de Listados de Mercado").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las listas de mercado.").addText((text) => text.setValue(this.plugin.settings.folder_Mercado).onChange(async (value) => {
          this.plugin.settings.folder_Mercado = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(mercadoContent).setName("\xCDndice de listados de mercado").setDesc("Establece la ruta del \xEDndice de los listados de mercado.").addText((text) => text.setValue(this.plugin.settings.indice_Mercado).onChange(async (value) => {
          this.plugin.settings.indice_Mercado = value;
          await this.plugin.saveSettings();
        }));
        const modulosTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "M\xF3dulos Sistema Gesti\xF3n"' });
        modulosTitle.setAttribute("data-title", 'Subsistema de "M\xF3dulos Sistema Gesti\xF3n"');
        modulosTitle.style.cursor = "pointer";
        const modulosContent = tabContent.createDiv();
        modulosContent.style.display = "none";
        modulosTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(modulosContent).setName("Carpeta de Modulos del Sistema de Gestion").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los m\xF3dulos del Sistema de Gesti\xF3n.").addText((text) => text.setValue(this.plugin.settings.folder_ModulosSistema).onChange(async (value) => {
          this.plugin.settings.folder_ModulosSistema = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(modulosContent).setName("\xCDndice de los Modulos del sistema de Gestion").setDesc("Establece la ruta del \xEDndice de los M\xF3dulos del sistema de Gesti\xF3n.").addText((text) => text.setValue(this.plugin.settings.indice_ModulosSistema).onChange(async (value) => {
          this.plugin.settings.indice_ModulosSistema = value;
          await this.plugin.saveSettings();
        }));
        const transaccionesTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Transacciones"' });
        transaccionesTitle.setAttribute("data-title", 'Subsistema de "transacciones"');
        transaccionesTitle.style.cursor = "pointer";
        const transaccionesContent = tabContent.createDiv();
        transaccionesContent.style.display = "none";
        transaccionesTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(transaccionesContent).setName("Carpeta de Modulos del Sistema de Transacciones").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los comprobantes de las transacciones.").addText((text) => text.setValue(this.plugin.settings.folder_Transacciones).onChange(async (value) => {
          this.plugin.settings.folder_Transacciones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(transaccionesContent).setName("\xCDndice de Transacciones").setDesc("Establece la ruta del \xEDndice de Transacciones.").addText((text) => text.setValue(this.plugin.settings.indice_Transacciones).onChange(async (value) => {
          this.plugin.settings.indice_Transacciones = value;
          await this.plugin.saveSettings();
        }));
        const presentacionesTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Presentaciones"' });
        presentacionesTitle.setAttribute("data-title", 'Subsistema de "Presentaciones"');
        presentacionesTitle.style.cursor = "pointer";
        const presentacionesContent = tabContent.createDiv();
        presentacionesContent.style.display = "none";
        presentacionesTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(presentacionesContent).setName("Carpeta de Notas de Presentaciones").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las notas de presentaciones.").addText((text) => text.setValue(this.plugin.settings.folder_Presentaciones).onChange(async (value) => {
          this.plugin.settings.folder_Presentaciones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(presentacionesContent).setName("\xCDndice de Presentaciones").setDesc("Establece la ruta del \xEDndice de presentaciones.").addText((text) => text.setValue(this.plugin.settings.indice_Presentaciones).onChange(async (value) => {
          this.plugin.settings.indice_Presentaciones = value;
          await this.plugin.saveSettings();
        }));
        const proyectosQTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Proyectos de Q"' });
        proyectosQTitle.setAttribute("data-title", 'Subsistema de "Proyectos de Q"');
        proyectosQTitle.style.cursor = "pointer";
        const proyectosQContent = tabContent.createDiv();
        proyectosQContent.style.display = "none";
        proyectosQTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(proyectosQContent).setName("Carpeta de Proyectos de Q").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los proyectos de Q.").addText((text) => text.setValue(this.plugin.settings.folder_ProyectosQ).onChange(async (value) => {
          this.plugin.settings.folder_ProyectosQ = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(proyectosQContent).setName("\xCDndice de Proyectos de Q").setDesc("Establece la ruta del \xEDndice de proyectos de Q.").addText((text) => text.setValue(this.plugin.settings.indice_ProyectosQ).onChange(async (value) => {
          this.plugin.settings.indice_ProyectosQ = value;
          await this.plugin.saveSettings();
        }));
        const publicacionesTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Publicaciones"' });
        publicacionesTitle.setAttribute("data-title", 'Subsistema de "Publicaciones"');
        publicacionesTitle.style.cursor = "pointer";
        const publicacionesContent = tabContent.createDiv();
        publicacionesContent.style.display = "none";
        publicacionesTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(publicacionesContent).setName("Carpeta de Piezas de Publicaciones").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las piezas de publicaciones.").addText((text) => text.setValue(this.plugin.settings.folder_Publicaciones).onChange(async (value) => {
          this.plugin.settings.folder_Publicaciones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(publicacionesContent).setName("\xCDndice de Publicaciones").setDesc("Establece la ruta del \xEDndice de publicaciones.").addText((text) => text.setValue(this.plugin.settings.indice_Publicaciones).onChange(async (value) => {
          this.plugin.settings.indice_Publicaciones = value;
          await this.plugin.saveSettings();
        }));
        const recetasTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Recetas"' });
        recetasTitle.setAttribute("data-title", 'Subsistema de "Recetas"');
        recetasTitle.style.cursor = "pointer";
        const recetasContent = tabContent.createDiv();
        recetasContent.style.display = "none";
        recetasTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(recetasContent).setName("Carpeta de Recetas").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las recetas.").addText((text) => text.setValue(this.plugin.settings.folder_Recetas).onChange(async (value) => {
          this.plugin.settings.folder_Recetas = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(recetasContent).setName("\xCDndice de Recetas").setDesc("Establece la ruta del \xEDndice de recetas.").addText((text) => text.setValue(this.plugin.settings.indice_Recetas).onChange(async (value) => {
          this.plugin.settings.indice_Recetas = value;
          await this.plugin.saveSettings();
        }));
        const recursosRecurrentesTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Recursos Recurrentes"' });
        recursosRecurrentesTitle.setAttribute("data-title", 'Subsistema de "Recursos Recurrentes"');
        recursosRecurrentesTitle.style.cursor = "pointer";
        const recursosRecurrentesContent = tabContent.createDiv();
        recursosRecurrentesContent.style.display = "none";
        recursosRecurrentesTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(recursosRecurrentesContent).setName("Carpeta de Recursos Recurrentes").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los recursos recurrentes.").addText((text) => text.setValue(this.plugin.settings.folder_RecursosRecurrentes).onChange(async (value) => {
          this.plugin.settings.folder_RecursosRecurrentes = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(recursosRecurrentesContent).setName("\xCDndice de Recursos Recurrentes").setDesc("Establece la ruta del \xEDndice de recursos recurrentes.").addText((text) => text.setValue(this.plugin.settings.indice_RecursosRecurrentes).onChange(async (value) => {
          this.plugin.settings.indice_RecursosRecurrentes = value;
          await this.plugin.saveSettings();
        }));
        const registroTiempoTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Registro Tiempo"' });
        registroTiempoTitle.setAttribute("data-title", 'Subsistema de "Registro Tiempo"');
        registroTiempoTitle.style.cursor = "pointer";
        const registroTiempoContent = tabContent.createDiv();
        registroTiempoContent.style.display = "none";
        registroTiempoTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(registroTiempoContent).setName("Carpeta de Registros de Tiempo").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los registros de tiempo.").addText((text) => text.setValue(this.plugin.settings.folder_RegistroTiempo).onChange(async (value) => {
          this.plugin.settings.folder_RegistroTiempo = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(registroTiempoContent).setName("\xCDndice de Registro de Tiempo").setDesc("Establece la ruta del \xEDndice de registros de tiempo.").addText((text) => text.setValue(this.plugin.settings.indice_RegistroTiempo).onChange(async (value) => {
          this.plugin.settings.indice_RegistroTiempo = value;
          await this.plugin.saveSettings();
        }));
      }
      if (index === 2) {
        const dateLabel = tabContent.createEl("label");
        dateLabel.textContent = "Fecha";
        const dateInput = tabContent.createEl("input");
        dateInput.type = "datetime-local";
      }
    });
    containerEl.createEl("style", {
      text: `
                .tab-content { display: none; padding-top: 20px; } // A\xF1adido padding-top para el espacio
                .tab-content.active { display: block; }
                .tab-link { cursor: pointer; padding: 5px 10px; margin-right: 5px; background: #f0f0f0; border: 1px solid #ddd; border-radius: 5px; }
                .tab-link.active { background: #e0e0e0; }
                .setting-item { margin-bottom: 10px; }
            `
    });
    this.openTab = (tabName) => {
      document.querySelectorAll(".tab-content").forEach((content) => {
        content.style.display = "none";
        content.classList.remove("active");
      });
      document.querySelectorAll(".tab-link").forEach((link) => {
        link.classList.remove("active");
      });
      const activeTabContent = document.getElementById(tabName);
      const activeTabLink = document.querySelector(`[data-tab="${tabName}"]`);
      if (activeTabContent)
        activeTabContent.style.display = "block";
      if (activeTabLink)
        activeTabLink.classList.add("active");
    };
    this.openTab("tab0");
  }
  openTab(arg0) {
    throw new Error("Method not implemented.");
  }
};

// src/modules/moduloBase/index.ts
var import_obsidian6 = require("obsidian");

// src/modules/moduloBase/utils/crearCarpeta.ts
async function crearCarpeta(rutaCarpeta) {
  try {
    debugger;
    const carpetaExistente = app.vault.getAbstractFileByPath(rutaCarpeta);
    if (carpetaExistente) {
      console.log(`La carpeta '${rutaCarpeta}' ya existe.`);
      return;
    }
    debugger;
    await app.vault.createFolder(rutaCarpeta);
    console.log(`Carpeta '${rutaCarpeta}' creada exitosamente.`);
  } catch (error) {
    console.error(`Error al crear la carpeta '${rutaCarpeta}':`, error);
  }
}

// src/modules/moduloBase/utils/crearPlantilla.ts
var import_obsidian2 = require("obsidian");

// src/modules/moduloBase/utils/fileLinkModal.ts
var import_obsidian3 = require("obsidian");
var FileLinkModal = class extends import_obsidian3.Modal {
  constructor(app2) {
    super(app2);
  }
  onOpen() {
    let { contentEl } = this;
    contentEl.style.display = "flex";
    contentEl.style.flexDirection = "column";
    contentEl.style.justifyContent = "center";
    contentEl.style.alignItems = "center";
    contentEl.style.height = "50%";
    contentEl.createEl("h1", {
      text: "Insertar el link de un archivo.",
      attr: { style: "text-align: center;" }
      // Asegura que el texto del título esté centrado si es más largo que una línea
    });
    const inputContainer = contentEl.createDiv();
    inputContainer.style.margin = "10px";
    const fileInput = inputContainer.createEl("input", { type: "file" });
    fileInput.style.display = "none";
    const fileButton = inputContainer.createEl("button", {
      text: "Seleccione su archivo",
      cls: "mod-cta"
    });
    fileButton.style.padding = "5px 10px";
    fileButton.style.fontSize = "16px";
    fileButton.style.marginTop = "5px";
    fileButton.style.cursor = "pointer";
    fileButton.onclick = () => fileInput.click();
    fileInput.onchange = (e) => {
      const file = e.target.files[0];
      if (file) {
        this.insertLinkAtCursor(file.path, file.name);
      }
      this.close();
    };
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
  async insertLinkAtCursor(filePath, fileName) {
    const activeLeaf = this.app.workspace.activeLeaf;
    if (activeLeaf) {
      const editor = activeLeaf.view.sourceMode.cmEditor;
      const cursor = editor.getCursor();
      const linkText = `[${fileName}](<file://${filePath}>)`;
      editor.replaceRange(linkText, cursor);
    }
  }
};
async function insertFileLink(app2) {
  new FileLinkModal(app2).open();
}

// src/modules/moduloBase/commands.ts
var import_obsidian5 = require("obsidian");

// src/modules/moduloBase/utils/createNoteFromTemplate.ts
var import_obsidian4 = require("obsidian");
async function createNoteFromTemplate(plugin, template, folder, filename, openNewNote = true) {
  if (!plugin || !plugin.app.plugins.enabledPlugins.has("templater-obsidian")) {
    console.error("El plugin Templater no est\xE1 habilitado.");
    return;
  }
  const templaterPlugin = plugin.app.plugins.plugins["templater-obsidian"];
  const tp = templaterPlugin.templater.current_functions_object;
  if (!tp) {
    console.error("No se pudo acceder al objeto de funciones actuales de Templater.");
    return;
  }
  debugger;
  let templateFile = tp.file.find_tfile(template);
  try {
    const newNote = await tp.file.create_new(templateFile, filename, openNewNote, folder);
    return newNote;
  } catch (error) {
    console.error("Error al crear la nota desde la plantilla:", error);
    return;
  }
}

// src/modules/moduloBase/commands.ts
function registerCommands(plugin) {
  const comando1 = plugin.addCommand({
    id: "Creacion-Carpeta",
    name: "Creaci\xF3n de Carpeta",
    callback: async () => {
      debugger;
      await crearCarpeta("Mi Carpeta de plugin");
    }
  });
  plugin.registeredCommandIdsMB.push(comando1.id);
  const comando3 = plugin.addCommand({
    id: "crear-archivo-template",
    name: "Crear archivo desde template",
    callback: async () => {
      const pluginId = "templater-obsidian";
      const isPluginInstalled = plugin.app.plugins.enabledPlugins.has(pluginId);
      let template = "Plantillas/Anotaciones/Plt - Anotaciones.md";
      let folderObj = plugin.app.vault.getAbstractFileByPath("Inbox");
      if (!(folderObj instanceof import_obsidian5.TFolder)) {
        new Notice("La carpeta especificada no existe o no es una carpeta.");
        return;
      }
      let fileName = "toDefine";
      let openNote = true;
      debugger;
      const archivo = await createNoteFromTemplate(plugin, template, folderObj, fileName, openNote);
      if (!archivo) {
        new Notice("No se pudo crear el archivo.");
        return;
      }
    }
  });
  plugin.registeredCommandIdsMB.push(comando3.id);
  const comando4 = plugin.addCommand({
    id: "crear-link-Archivo",
    name: "Crear un link a archivo del Disco.",
    callback: async () => {
      await insertFileLink(app);
    }
  });
  plugin.registeredCommandIdsMB.push(comando4.id);
  const comando5 = plugin.addCommand({
    id: "abrir-nota-activa",
    name: "Abrir Nota Activa",
    callback: async () => {
      app.workspace.detachLeavesOfType("vista-nota-activa");
      await app.workspace.getRightLeaf(true).setViewState({
        type: "vista-nota-activa"
      });
      app.workspace.revealLeaf(
        app.workspace.getLeavesOfType("vista-nota-activa")[0]
      );
    }
  });
  plugin.registeredCommandIdsMB.push(comando5.id);
}
function deactivateCommands(plugin) {
  if (!plugin.registeredCommandIdsMB)
    return;
  plugin.registeredCommandIdsMB.forEach((commandId) => {
    const command = plugin.app.commands.commands[commandId];
    if (command) {
      command.callback = () => new Notice("Este comando ha sido desactivado.");
    }
  });
}

// src/modules/moduloBase/index.ts
var ModuloBase = class {
  constructor(plugin) {
    this.moduloBase = null;
    this.plugin = plugin;
  }
  activate() {
    if (this.moduloBase)
      return;
    registerCommands(this.plugin);
  }
  deactivate() {
    if (!this.statusBar)
      return;
    deactivateCommands(this.plugin);
  }
};

// src/modules/M_busquedaAvanzada/activadores.ts
var import_obsidian10 = require("obsidian");

// src/modules/M_busquedaAvanzada/ui/ribbonButton.ts
var import_obsidian9 = require("obsidian");

// src/modules/M_busquedaAvanzada/ui/modal.ts
var import_obsidian8 = require("obsidian");

// src/modules/M_busquedaAvanzada/search/FuzzyNoteSuggester.ts
var import_obsidian7 = require("obsidian");

// src/modules/moduloAliasStatusBar/statusBar.ts
var import_obsidian11 = require("obsidian");
var StatusBarExtension = class {
  constructor(plugin) {
    this.statusBar = null;
    this.plugin = plugin;
  }
  activate() {
    if (this.statusBar)
      return;
    this.statusBar = this.plugin.addStatusBarItem();
    this.updateStatusBar();
    this.plugin.registerEvent(
      this.plugin.app.workspace.on("file-open", (file) => {
        this.updateStatusBar(file);
      })
    );
  }
  deactivate() {
    if (!this.statusBar)
      return;
    this.statusBar.remove();
    this.statusBar = null;
  }
  updateStatusBar(file) {
    var _a, _b;
    const currentFile = file || this.plugin.app.workspace.getActiveFile();
    if (!currentFile || !this.statusBar) {
      (_a = this.statusBar) == null ? void 0 : _a.setText("");
      return;
    }
    const fileCache = this.plugin.app.metadataCache.getFileCache(currentFile);
    const aliases = ((_b = fileCache.frontmatter) == null ? void 0 : _b.aliases) || [];
    this.statusBar.setText(aliases.length > 0 ? `Alias: ${aliases[0]}` : "No Alias");
  }
};

// src/modules/moduloRegistroTiempo/index.ts
var import_obsidian17 = require("obsidian");

// src/modules/moduloRegistroTiempo/ribbonMenu.ts
var import_obsidian14 = require("obsidian");

// src/modules/moduloRegistroTiempo/utils.ts
var import_obsidian13 = require("obsidian");
init_seleccionModal();
async function cumpleCondicion(app2) {
  var _a;
  const files = app2.vault.getMarkdownFiles();
  for (let file of files) {
    if (file.path.startsWith("Estructura/Registro Tiempo")) {
      const metadata = app2.metadataCache.getFileCache(file);
      if (((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.estado) === "\u{1F7E2}") {
        return true;
      }
    }
  }
  return false;
}
async function buscarRegistrosActivos(app2) {
  var _a;
  const files = app2.vault.getMarkdownFiles();
  for (let file of files) {
    if (file.path.startsWith("Subsistemas/Registro Tiempo/Registros")) {
      const metadata = app2.metadataCache.getFileCache(file);
      if (((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.estado) === "\u{1F7E2}") {
        return file;
      }
    }
  }
  return;
}
async function crearObjetoRegistro(plugin) {
  const activo = plugin.app.workspace.getActiveFile();
  if (!activo) {
    console.error("No hay un archivo activo para la creaci\xF3n de registro de tiempo. Se descarta para la creaci\xF3n de registro de tiempo.");
    return null;
  }
  const folder = plugin.settings.folder_RegistroTiempo;
  const indice = plugin.settings.indice_RegistroTiempo;
  let maxId = 0;
  const files = app.vault.getMarkdownFiles();
  const registrosExistentes = files.filter((file) => file.path.startsWith(folder));
  registrosExistentes.forEach((file) => {
    var _a;
    const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    if (metadata && metadata.id && !isNaN(metadata.id)) {
      const id = parseInt(metadata.id);
      if (id > maxId)
        maxId = id;
    }
  });
  const nextId = maxId + 1;
  const fechaCompleta = formatearFecha(/* @__PURE__ */ new Date());
  return {
    activo,
    nombre: activo.basename,
    folder,
    indice,
    id: nextId,
    fecha: fechaCompleta,
    indice_DVJS: `"${indice}"`
  };
}
function formatearFecha(fecha) {
  const offset2 = fecha.getTimezoneOffset() * 6e4;
  const fechaLocal = new Date(fecha.getTime() - offset2);
  const fechaFormato = fechaLocal.toISOString().split("T")[0];
  const dias = ["Domingo", "Lunes", "Martes", "Mi\xE9rcoles", "Jueves", "Viernes", "S\xE1bado"];
  const diaSemana = dias[fecha.getDay()];
  const horaFormato = fecha.toTimeString().split(" ")[0].substring(0, 5);
  return `${fechaFormato} ${diaSemana} ${horaFormato}`;
}
async function verificarTareasActivas(registro, app2) {
  var _a;
  const files = app2.vault.getMarkdownFiles();
  const tareasActivas = [];
  for (let file of files) {
    if (file.path.startsWith(registro.folder)) {
      const metadata = (_a = app2.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if ((metadata == null ? void 0 : metadata.estado) === "\u{1F7E2}") {
        tareasActivas.push({ file, aliases: metadata.aliases || file.basename });
      }
    }
  }
  if (tareasActivas.length === 1) {
    const tareaActiva = tareasActivas[0];
    debugger;
    const deseaDetener = await mostrarSugerencia(`La tarea ${tareaActiva.aliases} est\xE1 corriendo. \xBFDesea detenerla?`);
    if (deseaDetener === void 0) {
      new import_obsidian13.Notice(`Creaci\xF3n de registro cancelado por el usuario.`);
      registro.detener = true;
      return;
    }
    if (deseaDetener) {
      await detenerTarea(tareaActiva, app2);
      registro.detener = false;
    } else {
      new import_obsidian13.Notice(`La tarea ${tareaActiva.aliases} seguir\xE1 registr\xE1ndose.`);
      registro.detener = true;
      return;
    }
  } else if (tareasActivas.length > 1) {
    new import_obsidian13.Notice("Hay un error con la cantidad de tareas corriendo en este momento.");
    registro.detener = true;
  } else {
    console.log("No hay m\xE1s tareas corriendo.");
    registro.detener = false;
  }
}
function mostrarSugerencia(mensaje) {
  return new Promise((resolve) => {
    let seleccionado = false;
    const modal = new import_obsidian13.Modal(app);
    modal.contentEl.createEl("h1", { text: mensaje });
    const buttonsContainer = modal.contentEl.createEl("div");
    const yesButton = buttonsContainer.createEl("button", {
      text: "S\xED"
    });
    yesButton.addEventListener("click", () => {
      seleccionado = true;
      modal.close();
      resolve(true);
    });
    const noButton = buttonsContainer.createEl("button", {
      text: "No"
    });
    noButton.addEventListener("click", () => {
      seleccionado = true;
      modal.close();
      resolve(false);
    });
    modal.onClose = () => {
      if (!seleccionado) {
        resolve(void 0);
      }
    };
    modal.open();
  });
}
async function definirTipoRegistro(registro, app2) {
  const totTareas = await encontrarTareasPendientes(app2);
  let opcionesTitulo, valoresOpcion;
  if (totTareas.length > 0) {
    opcionesTitulo = [registro.nombre, "Alguna tarea en Ejecuci\xF3n", "Otro"];
    valoresOpcion = ["Nota", "Tarea", "Otro"];
  } else {
    opcionesTitulo = [registro.nombre, "Otro"];
    valoresOpcion = ["Nota", "Otro"];
  }
  const placeholder = "\xBFSobre qu\xE9 es el registro de tiempo?";
  const modalMenu1 = new SeleccionModal(app2, opcionesTitulo, valoresOpcion, placeholder);
  try {
    const selection = await modalMenu1.openAndAwaitSelection();
    registro.tipoRegistro = selection;
    switch (registro.tipoRegistro) {
      case "Nota":
        registro.titulo = registro.nombre;
        registro.siAsunto = true;
        break;
      case "Tarea":
        await elegirTareaParaRegistro(app2, registro, totTareas);
        break;
      default:
        registro.siAsunto = registro.tituloDefinido !== "Otro";
        break;
    }
  } catch (error) {
    console.error("Error o modal cerrado sin selecci\xF3n:", error);
  }
}
async function encontrarTareasPendientes(app2) {
  let tareasPendientes = [];
  const archivos = app2.vault.getMarkdownFiles();
  const archivosRelevantes = archivos.filter((archivo) => !archivo.path.includes("Plantillas"));
  for (const archivo of archivosRelevantes) {
    const contenido = await app2.vault.read(archivo);
    const coincidencias = contenido.match(/^ *- \[\/\] .*/gm) || [];
    const tareasLimpias = coincidencias.map((tarea) => tarea.trim());
    tareasPendientes = tareasPendientes.concat(tareasLimpias);
  }
  return tareasPendientes;
}
async function elegirTareaParaRegistro(app2, registro, tareasPendientes) {
  const placeholder = "Elige la tarea que vas a registrar.";
  let promesasLimpias = tareasPendientes.map((tarea) => limpiarTextoTarea(tarea));
  Promise.all(promesasLimpias).then((tareasLimpias) => {
    const modalMenu = new SeleccionModal(app2, tareasLimpias, tareasLimpias, placeholder);
    modalMenu.openAndAwaitSelection().then((selection) => {
      debugger;
      registro.titulo = limpiarTextoTarea(selection);
    }).catch((error) => {
      registro.detener = true;
      console.error("Error o modal cerrado sin selecci\xF3n:", error);
    });
  }).catch((error) => {
    console.error("Hubo un error al limpiar las tareas:", error);
  });
}
function limpiarTextoTarea(titulo) {
  return new Promise((resolve) => {
    let textoLimpio = titulo.split("\n")[0];
    textoLimpio = textoLimpio.replace(/#[\w-/]+/g, "");
    textoLimpio = textoLimpio.replace(/\[\w+::[^\]]+\]/g, "");
    textoLimpio = textoLimpio.replace(/^\s*-\s*\[\/\]\s*/, "");
    const caracteresNoPermitidos = /[<>:"\/\\|?*\x00-\x1F]/g;
    textoLimpio = textoLimpio.replace(caracteresNoPermitidos, "_");
    textoLimpio = textoLimpio.replace(/\s+/g, " ");
    resolve(textoLimpio.trim());
  });
}
async function detenerTarea(tareaActiva, app2) {
  console.log(`Deteniendo la tarea: ${tareaActiva.titulo}`);
  const fileContents = await app2.vault.read(tareaActiva.file);
  const newContents = fileContents.replace("estado: \u{1F7E2}", "estado: \u{1F535}");
  await app2.vault.modify(tareaActiva.file, newContents);
}

// src/modules/moduloRegistroTiempo/ribbonMenu.ts
function registerRibbonMenu2(plugin) {
  plugin.ribbonButtonRT = plugin.addRibbonIcon("clock", "Registro de Tiempo", async (event) => {
    const menu = new import_obsidian14.Menu(plugin.app);
    if (await cumpleCondicion(plugin.app)) {
      menu.addItem((item) => item.setTitle("Ahora").onClick(() => {
        console.log("Ahora");
      }));
    }
    menu.addItem((item) => item.setTitle("Registrar Tiempo").onClick(() => {
      console.log("Registrar Tiempo");
    }));
    if (await cumpleCondicion(plugin.app)) {
      menu.addItem((item) => item.setTitle("Detener Registro").onClick(() => {
        console.log("Detener Registro");
      }));
    }
    menu.addItem((item) => item.setTitle("Tareas en progreso").onClick(() => {
      console.log("Tareas en progreso");
    }));
    menu.addItem((item) => item.setTitle("Registros de hoy").onClick(() => {
      console.log("Registros de hoy");
    }));
    menu.showAtPosition({ x: event.pageX, y: event.pageY });
  });
}
function deactivateRibbonMenu(plugin) {
  if (plugin.ribbonButtonRT) {
    plugin.ribbonButtonRT.remove();
    plugin.ribbonButtonRT = null;
  }
}

// src/modules/moduloRegistroTiempo/commands.ts
var import_obsidian16 = require("obsidian");

// src/modules/moduloRegistroTiempo/modals/modal_Ahora.ts
var import_obsidian15 = require("obsidian");
var modal_Ahora = class extends import_obsidian15.Modal {
  constructor(app2, file) {
    super(app2);
    this.app = app2;
    this.file = file;
  }
  async onOpen() {
    var _a, _b;
    const { contentEl } = this;
    const metadata = this.app.metadataCache.getFileCache(this.file);
    const aliases = ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.aliases) || "Actividad sin alias";
    const horaInicioStr = ((_b = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _b.horaInicio) ? window.moment(metadata.frontmatter.horaInicio, "YYYY-MM-DD dddd HH:mm").format("YYYY-MM-DDTHH:mm") : "";
    contentEl.createEl("h2", { text: `Registro de actividad.` });
    contentEl.createEl("p", { text: `Tarea: "${aliases}"` });
    if (horaInicioStr) {
      const horaInicio = window.moment(horaInicioStr, "YYYY-MM-DD dddd HH:mm");
      const ahora = window.moment();
      const diff = ahora.diff(horaInicio);
      const duracion = window.moment.duration(diff);
      const diffFormatted = `${duracion.hours()}h ${duracion.minutes()}m`;
      contentEl.createEl("p", { text: `Esta actividad lleva ${diffFormatted} en ejecuci\xF3n.` });
    } else {
      contentEl.createEl("p", { text: "No se pudo determinar el tiempo de inicio de la actividad." });
    }
    contentEl.createEl("p", { text: "Hora de inicio:" });
    this.horaInicioInput = contentEl.createEl("input", {
      type: "datetime-local",
      value: horaInicioStr
    });
    const saveButton = contentEl.createEl("button", { text: "Guardar cambios" });
    saveButton.onclick = () => this.guardarCambios();
  }
  async guardarCambios() {
    const nuevaHoraInicioLocal = this.horaInicioInput.value;
    if (!nuevaHoraInicioLocal) {
      new import_obsidian15.Notice("Por favor, seleccione una hora de inicio.");
      return;
    }
    const nuevaHoraInicio = window.moment(nuevaHoraInicioLocal).format("YYYY-MM-DD dddd HH:mm");
    try {
      const contenidoOriginal = await this.app.vault.read(this.file);
      const contenidoActualizado = contenidoOriginal.replace(/(horaInicio: ).*/, `$1${nuevaHoraInicio}`);
      await this.app.vault.modify(this.file, contenidoActualizado);
      this.close();
      new import_obsidian15.Notice("Hora de inicio actualizada correctamente.");
    } catch (error) {
      console.error("Error al guardar cambios en la nota:", error);
      new import_obsidian15.Notice("Error al guardar los cambios en la nota.");
    }
  }
};

// src/modules/moduloRegistroTiempo/commands.ts
function registerCommands2(plugin) {
  const id1 = plugin.addCommand({
    id: "registros-de-tiempo-del-dia",
    name: "Registros de tiempo del d\xEDa",
    checkCallback: (checking) => {
      var _a;
      const activeLeaf = plugin.app.workspace.activeLeaf;
      if (activeLeaf) {
        const filePath = ((_a = activeLeaf.view.file) == null ? void 0 : _a.path) || "";
        if (filePath.startsWith("Estructura/Periodos/Diario/")) {
          if (!checking) {
            console.log("Registros de tiempo del d\xEDa");
          }
          return true;
        }
      }
      return false;
    }
  });
  plugin.registeredCommandIdsRT.push(id1.id);
  const id2 = plugin.addCommand({
    id: "ahora-RegistroTiempo",
    name: "Tarea activa en registro de tiempo",
    callback: async () => {
      const activa = await buscarRegistrosActivos(plugin.app);
      if (!activa) {
        new import_obsidian16.Notice("No hay notas activas");
      } else {
        let modal = new modal_Ahora(plugin.app, activa);
        modal.open();
      }
    }
  });
  plugin.registeredCommandIdsRT.push(id2.id);
  const id3 = plugin.addCommand({
    id: "crear-registro-tiempo",
    name: "Crear Registro de Tiempo",
    callback: async () => {
      const registro = await crearObjetoRegistro(plugin);
      if (!registro) {
        new import_obsidian16.Notice("No se pudo crear el objeto de registro.");
        return;
      }
      await verificarTareasActivas(registro, plugin.app);
      await definirTipoRegistro(registro, plugin.app);
    }
  });
  plugin.registeredCommandIdsRT.push(id3.id);
  const id4 = plugin.addCommand({
    id: "vista-registro-tiempo-activa",
    name: "Mostrar RT Activo",
    callback: async () => {
      app.workspace.detachLeavesOfType("vista-registro-activo");
      await app.workspace.getRightLeaf(true).setViewState({
        type: "vista-registro-activo"
      });
      app.workspace.revealLeaf(
        app.workspace.getLeavesOfType("vista-registro-activo")[0]
      );
    }
  });
  plugin.registeredCommandIdsRT.push(id4.id);
}
function deactivateCommands2(plugin) {
  if (!plugin.registeredCommandIdsRT)
    return;
  plugin.registeredCommandIdsRT.forEach((commandId) => {
    const command = plugin.app.commands.commands[commandId];
    if (command) {
      command.callback = () => new import_obsidian16.Notice("Este comando ha sido desactivado.");
    }
  });
}

// src/modules/moduloRegistroTiempo/index.ts
var ModuloRegistroTiempo = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  activate() {
    if (!this.plugin.ribbonButtonRT) {
      registerRibbonMenu2(this.plugin);
    }
    registerCommands2(this.plugin);
  }
  deactivate() {
    deactivateRibbonMenu(this.plugin);
    deactivateCommands2(this.plugin);
  }
};

// src/defaults/defaultSettings.ts
var DEFAULT_SETTINGS = {
  moduloRegistroTiempo: true,
  moduloAliasStatusBar: true,
  moduloBase: true,
  moduloGTD: true,
  moduloTabTitle: true,
  // Modulo titulo de pestañas.
  moduloTaskManager: true,
  moduloDataviewQueries: true,
  taskExecutionNavigatorModule: true,
  // Activado por defecto
  taskNavigatorModule: true,
  file_camposCentral: "Estructura/Campos Sistema Gestion/Campos Sistema Central",
  folder_Anotaciones: "Anotaciones/Notas",
  indice_Anotaciones: "Anotaciones/Indice Anotaciones",
  folder_ABlog: "Subsistemas/Articulos Blog/Articulos",
  indice_ABlog: "Subsistemas/Articulos Blog/Indice Articulos Blog",
  folder_Desarrollos: "Subsistemas/Desarrollos/Codigos",
  indice_Desarrollos: "Subsistemas/Desarrollos/Indice Desarrollo",
  folder_Estudio: "Subsistemas/Estudio/Temas",
  indice_Estudio: "Subsistemas/Estudio/Indice Estudio",
  folder_RepositorioLibros: "Subsistemas/Libros/Repositorio",
  indice_RepositorioLibros: "Subsistemas/Libros/Indice Repositorio Libros",
  folder_Biblioteca: "Subsistemas/Libros/Biblioteca",
  indice_Biblioteca: "Subsistemas/Libros/Indice Biblioteca",
  folder_KindleNotes: "Subsistemas/Libros/Kindle",
  indice_KindleNotes: "Subsistemas/Libros/Kindle/Indice Kindle",
  //folder_LecturaSesiones: "Subsistemas/Lectura/Sesiones de Lectura/Sesiones",
  //indice_LecturaSesiones: "Subsistemas/Lectura/Sesiones de Lectura/Indice Sesiones Lectura",
  folder_LecturaResumenes: "Subsistemas/Lectura/Libros/Resumenes",
  indice_LecturaResumenes: "Subsistemas/Lectura/Libros/Indice Resumenes",
  folder_Mentorias: "Subsistemas/Mentorias/Sesiones Mentoria",
  indice_Mentorias: "Subsistemas/Mentorias/Indice Mentorias",
  folder_Mercado: "Subsistemas/Mercado/Listas",
  indice_Mercado: "Subsistemas/Mercado/Indice Mercado",
  folder_ModulosSistema: "Subsistemas/Modulos Sistema Gestion/Modulos",
  indice_ModulosSistema: "Subsistemas/Modulos Sistema Gestion/Indice Modulos",
  folder_Transacciones: "Subsistemas/Transacciones",
  indice_Transacciones: "Subsistemas/Transacciones/Indice Transacciones",
  folder_Presentaciones: "Subsistemas/Presentaciones/Notas",
  indice_Presentaciones: "Subsistemas/Presentaciones/Indice Presentaciones",
  folder_Publicaciones: "Subsistemas/Publicaciones/Piezas",
  indice_Publicaciones: "Subsistemas/Publicaciones/Indice Publicaciones",
  folder_Recetas: "Subsistemas/Recetas/Recetas",
  indice_Recetas: "Subsistemas/Recetas/Indice Recetas",
  folder_RegistroTiempo: "Subsistemas/Registro Tiempo/Registros",
  indice_RegistroTiempo: "Subsistemas/Registro Tiempo/Indice Registro Tiempo",
  folder_ContenidoParaEstudio: "Subsistemas/Contenido para Estudio/Contenido",
  indice_ContenidoParaEstudio: "Subsistemas/Contenido para Estudio/Indice Contenido para Estudio",
  folder_Campa\u00F1a: "Subsistemas/Marketing/Proyectos",
  indice_Campa\u00F1a: "Subsistemas/Marketing/Indice Campa\xF1as",
  folder_Entregable: "Subsistemas/Marketing/Entregables",
  indice_Entregable: "Subsistemas/Marketing/Indice Entregables",
  // Estructura
  folder_AreasVida: "Estructura/Areas de Vida",
  indice_AreasVida: "Estructura/Areas de Vida/Indice Areas de Vida",
  folder_AreasInteres: "Estructura/Areas de Interes",
  indice_AreasInteres: "Estructura/Areas de Interes/Indice Areas de Interes",
  folder_TemasInteres: "Estructura/Temas de Interes",
  indice_TemasInteres: "Estructura/Temas de Interes/Indice Temas de Interes",
  folder_RecursosRecurrentes: "Estructura/Recursos Recurrentes/Recursos",
  indice_RecursosRecurrentes: "Estructura/Recursos Recurrentes/Indice Recursos Recurrentes",
  folder_ProyectosQ: "Estructura/Proyectos de Q",
  indice_ProyectosQ: "Estructura/Proyectos de Q/Indice Proyectos de Q",
  file_Inbox: "Estructura/GTD/Bandeja de Entrada/Bandeja de Entrada",
  folder_ProyectosGTD: "Estructura/GTD/Proyectos GTD/Proyectos",
  indice_ProyectosGTD: "Estructura/GTD/Proyectos GTD/Indice Proyectos GTD",
  folder_RSGTD: "Estructura/GTD/Revision Semanal/Revisiones",
  indice_RSGTD: "Estructura/GTD/Revision Semanal/Indice Revision Semanal",
  folder_SistemaGTD: "Estructura/GTD/Sistema GTD/Sistema",
  indice_SistemaGTD: "Estructura/GTD/Sistema GTD/Indice Sistema GTD",
  // Journal
  folder_Diario: "Estructura/Journal/Diario/Notas",
  indice_Diario: "Estructura/Journal/Diario/Indice Diario",
  folder_Semanal: "Estructura/Journal/Semanal/Notas",
  indice_Semanal: "Estructura/Journal/Semanal/Indice Semanal",
  folder_Mensual: "Estructura/Journal/Mensual/Notas",
  indice_Mensual: "Estructura/Journal/Mensual/Indice Mensual",
  folder_Trimestral: "Estructura/Journal/Trimestral/Notas",
  indice_Trimestral: "Estructura/Journal/Trimestral/Indice Trimestral",
  folder_Anual: "Estructura/Journal/Anual/Notas",
  indice_Anual: "Estructura/Journal/Anual/Indice Anual",
  // COMPASS
  folder_CompassAnual: "Estructura/Compass/Reportes/Anual",
  indice_CompassAnual: "Estructura/Compass/Reportes/Indice Compass Anual",
  folder_CompassTrimestral: "Estructura/Compass/Reportes/Trimestral",
  indice_CompassTrimestral: "Estructura/Compass/Reportes/Indice Compass trimestral",
  folder_ObjCompassAnual: "Estructura/Compass/Objetivos/Anual",
  indice_ObjCompassAnual: "Estructura/Compass/Objetivos/Indice Compass Anual",
  folder_ObjCompassTrimestral: "Estructura/Compass/Objetivos/Trimestral",
  indice_ObjCompassTrimestral: "Estructura/Compass/Objetivos/Indice Compass trimestral",
  // Registros Personales
  folder_Agradecimientos: "Registros Personales/Agradecimientos/Notas",
  indice_Agradecimientos: "Registros Personales/Agradecimientos/Indice Agradecimientos",
  folder_Reflexiones: "Registros Personales/Reflexiones/Notas",
  indice_Reflexiones: "Registros Personales/Reflexiones/Indice Reflexiones",
  folder_RegistrosAkashikos: "Registros Personales/Registros Akashikos/Notas",
  indice_RegistrosAkashikos: "Registros Personales/Registros Akashikos/Indice Registros Akashikos"
};

// src/main.ts
init_registroTiempoAPI();

// src/modules/noteLifecycleManager/API/starterAPI.ts
var import_obsidian50 = require("obsidian");
init_luxon();

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/AgradecimientosFieldHandler.ts
var import_obsidian28 = require("obsidian");

// src/modules/noteLifecycleManager/FieldHandlerUtils.ts
var import_obsidian26 = require("obsidian");
init_luxon();
var FieldHandlerUtils = class {
  static async crearCarpeta(folderPath) {
    try {
      const carpetaExistente = app.vault.getAbstractFileByPath(folderPath);
      if (carpetaExistente instanceof import_obsidian26.TFolder) {
        console.log(`La carpeta '${folderPath}' ya existe.`);
        return;
      }
      await app.vault.createFolder(folderPath);
      console.log(`Carpeta '${folderPath}' creada exitosamente.`);
    } catch (error) {
      console.error(`Error al crear la carpeta '${folderPath}':`, error);
    }
  }
  // Esta función encuentra los archivos de subsistemas y cuyo estado es 🟢
  // Esta función sale de menuOtro, de registro Tiempo. Revisar si debo sincronizarlas.
  static async findMainFilesWithState(tipo, parametro, plugin) {
    var _a, _b, _c;
    const propertiesTipo = {
      AV: {
        folder: plugin.settings.folder_AreasVida
      },
      AI: {
        folder: plugin.settings.folder_AreasInteres
      },
      PQ: {
        folder: plugin.settings.folder_ProyectosQ
      },
      PGTD: {
        folder: plugin.settings.folder_ProyectosGTD
      },
      TI: {
        folder: plugin.settings.folder_TemasInteres
      },
      RR: {
        folder: plugin.settings.folder_RecursosRecurrentes
      },
      TQ: {
        folder: plugin.settings.folder_Trimestral
      },
      AY: {
        folder: plugin.settings.folder_Anual
      }
      // Puedes continuar añadiendo más casos aquí
    };
    if (!propertiesTipo[tipo]) {
      throw new Error(`Tipo ${tipo} no es v\xE1lido.`);
    }
    const activeFilesWithFrontmatter = [];
    let files, trimestre;
    const folder = propertiesTipo[tipo].folder;
    switch (tipo) {
      case "AV":
        if (!parametro) {
          trimestre = DateTime.now().toFormat("yyyy-Qq");
        } else {
          trimestre = parametro;
        }
        files = app.vault.getMarkdownFiles().filter((file) => file.path.includes(folder) && !file.path.includes("Plantillas") && !file.path.includes("Archivo") && file.name.startsWith(trimestre));
        for (let file of files) {
          let metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
          if ((metadata == null ? void 0 : metadata.estado) === "\u{1F7E2}") {
            let activeFile = Object.assign({}, metadata);
            activeFile.file = file;
            activeFilesWithFrontmatter.push(activeFile);
          }
        }
        break;
      case "AI":
      case "TQ":
      case "AY":
        files = app.vault.getMarkdownFiles().filter((file) => file.path.includes(folder) && !file.path.includes("Plantillas") && !file.path.includes("Archivo"));
        for (let file of files) {
          let metadata = (_b = app.metadataCache.getFileCache(file)) == null ? void 0 : _b.frontmatter;
          if ((metadata == null ? void 0 : metadata.estado) === "\u{1F7E2}") {
            let activeFile = Object.assign({}, metadata);
            activeFile.file = file;
            activeFilesWithFrontmatter.push(activeFile);
          }
        }
        break;
      default:
        files = app.vault.getMarkdownFiles().filter((file) => file.path.includes(folder) && !file.path.includes("Plantillas") && !file.path.includes("Archivo"));
        for (let file of files) {
          let metadata = (_c = app.metadataCache.getFileCache(file)) == null ? void 0 : _c.frontmatter;
          if ((metadata == null ? void 0 : metadata.estado) === "\u{1F7E2}") {
            let activeFile = Object.assign({}, metadata);
            activeFile.file = file;
            activeFilesWithFrontmatter.push(activeFile);
          }
        }
        break;
    }
    return activeFilesWithFrontmatter;
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Base/NoteFieldHandlerBase.ts
var import_obsidian27 = require("obsidian");
var NoteFieldHandlerBase = class {
  constructor(tp, infoSubsistema, plugin) {
    this.tp = tp;
    this.infoSubsistema = infoSubsistema;
    this.suggester = tp.system.static_functions.get("suggester");
    this.prompt = tp.system.static_functions.get("prompt");
    this.plugin = plugin;
    this.nota = {};
  }
  async getId() {
    let maxId = 0;
    const files = app.vault.getMarkdownFiles();
    const registrosExistentes = files.filter((file) => file.path.startsWith(this.infoSubsistema.folder));
    registrosExistentes.forEach((file) => {
      var _a;
      const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if (metadata && metadata.id && !isNaN(metadata.id)) {
        const id = parseInt(metadata.id);
        if (id > maxId)
          maxId = id;
      }
    });
    return maxId + 1;
  }
  async getFecha() {
    const currentDate = (/* @__PURE__ */ new Date()).toISOString().slice(0, 10);
    const currentDay = (/* @__PURE__ */ new Date()).toLocaleDateString("es-ES", { weekday: "long" });
    const formattedDate = `${currentDate} ${currentDay}`;
    this.nota.fecha = formattedDate;
    return formattedDate;
  }
  async getAliases() {
    const id = await this.getId();
    return [`${this.infoSubsistema.typeName} ${id}`];
  }
  async getRename() {
    const fecha = this.nota.fecha;
    const newName = `${this.infoSubsistema.folder}/${this.infoSubsistema.typeName} ${fecha}.md`;
    await FieldHandlerUtils.crearCarpeta(this.infoSubsistema.folder);
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    try {
      if (existe instanceof import_obsidian27.TFile) {
        const nombreFile = newName.split("/");
        const borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [true, false],
          true,
          `\xBF${nombreFile.pop()} ya existe. Qu\xE9 deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian27.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            return newName;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian27.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          return newName;
        }
      }
    } catch (error) {
      console.error("Error al cambiar el nombre", error);
      throw error;
    }
  }
  async getEstado() {
    return "\u{1F7E2}";
  }
  async getNota() {
    return this.nota;
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/AgradecimientosFieldHandler.ts
var AgradecimientosFieldHandler = class extends NoteFieldHandlerBase {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  // getFecha para determinar si la fecha de la que inicia esta en el archivo de origen.
  async getFecha() {
    const activo = app.workspace.getActiveFile();
    let fecha;
    const title = this.tp.file.dynamic_functions.get("title");
    if (title && title.startsWith("Agradecimiento")) {
      fecha = title.split("Agradecimiento ")[1];
    } else if (activo.path && (activo == null ? void 0 : activo.path.startsWith("Estructura/Journal/Diario/Notas"))) {
      fecha = activo.basename;
    } else {
      const currentDate = moment().format("YYYY-MM-DD dddd");
      fecha = await this.prompt("\xBFDe qu\xE9 dia es el agradecimiento??", currentDate, false, false);
    }
    this.nota.fecha = fecha;
    return fecha;
  }
  async getAgradecimientos() {
    let agradecimientos = [];
    let numAgradecimientos = 0;
    let otra;
    do {
      const agradecimiento = await this.prompt("\xBFDe qu\xE9 est\xE1s agradecido?", `Gracias por ${numAgradecimientos}`, false, true);
      agradecimientos.push(agradecimiento);
      numAgradecimientos += 1;
      otra = await this.suggester(["S\xED", "No"], [true, false], true, "\xBFQuieres agregar otro agradecimiento?");
    } while (otra);
    return agradecimientos;
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/ReflexionesFieldHandlers.ts
var import_obsidian29 = require("obsidian");
var ReflexionesFieldHandler = class extends NoteFieldHandlerBase {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  // getFecha para determinar si la fecha de la que inicia esta en el archivo de origen.
  async getFecha() {
    const activo = app.workspace.getActiveFile();
    let fecha;
    const title = this.tp.file.dynamic_functions.get("title");
    if (title && title.startsWith("Reflexion")) {
      fecha = title.split("Reflexion ")[1];
    } else if (activo.path && (activo == null ? void 0 : activo.path.startsWith("Estructura/Journal/Diario/Notas"))) {
      fecha = activo.basename;
    } else {
      const currentDate = moment().format("YYYY-MM-DD dddd");
      fecha = await this.prompt("\xBFDe qu\xE9 dia es la reflexi\xF3n??", currentDate, false, false);
    }
    this.nota.fecha = fecha;
    return fecha;
  }
  async getReflexion() {
    let reflexiones = [];
    let numReflexiones = 0;
    let otra;
    do {
      const reflexion = await this.prompt("Que estas pensando?", `P${numReflexiones}`, false, true);
      reflexiones.push(reflexion);
      numReflexiones += 1;
      otra = await this.suggester(["S\xED", "No"], [true, false], true, "\xBFQuieres agregar otro p\xE1rrafo?");
    } while (otra);
    return reflexiones;
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Base/NoteFieldHandler.ts
var import_obsidian30 = require("obsidian");
init_luxon();
var NoteFieldHandler = class {
  constructor(tp, infoSubsistema, plugin) {
    this.tp = tp;
    this.infoSubsistema = infoSubsistema;
    this.suggester = tp.system.static_functions.get("suggester");
    this.prompt = tp.system.static_functions.get("prompt");
    this.nota = {};
    this.plugin = plugin;
  }
  async getId() {
    let maxId = 0;
    const files = app.vault.getMarkdownFiles();
    const registrosExistentes = files.filter((file) => file.path.startsWith(this.infoSubsistema.folder));
    registrosExistentes.forEach((file) => {
      var _a;
      const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if (metadata && metadata.id && !isNaN(metadata.id)) {
        const id = parseInt(metadata.id);
        if (id > maxId)
          maxId = id;
      }
    });
    this.nota.id = maxId + 1;
    return this.nota.id;
  }
  async getFecha() {
    let fechaActual = DateTime.now();
    fechaActual = fechaActual.setLocale("es");
    fechaActual = fechaActual.toFormat("yyyy-MM-dd EEEE HH:mm");
    this.nota.fecha = fechaActual;
    return fechaActual;
  }
  async getTitulo() {
    const title = await this.prompt(`T\xEDtulo de ${this.infoSubsistema.typeName}:`, "", false, false);
    this.nota.titulo = title;
    return title;
  }
  async getDescripcion() {
    const descripcion = await this.prompt(`Descripci\xF3n del ${this.infoSubsistema.typeName}:`, "", false, true);
    this.nota.descripcion = descripcion;
    return descripcion;
  }
  async getEstado() {
    return "\u{1F7E2}";
  }
  async getNota() {
    return this.nota;
  }
  async getAsunto() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q;
    let padres = [];
    let activo = app.workspace.getActiveFile();
    let siAsunto = false;
    let nombre = "";
    let nota;
    if (activo != null) {
      nombre = activo.basename;
      nota = app.metadataCache.getFileCache(activo);
      nota.frontmatter = nota.frontmatter || {};
      nota.frontmatter.file = {};
      Object.assign(nota.frontmatter.file, activo);
      padres.unshift(nombre);
      siAsunto = await this.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
      if (siAsunto) {
        debugger;
        this.nota.asuntoDefinido = true;
        let nivel;
        switch ((_a = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _a.type) {
          default:
          case "PGTD":
          case "PQ":
            if (((_b = nota.frontmatter) == null ? void 0 : _b.type) === "PQ") {
              this.nota.proyectoQ = nombre;
              this.nota.proyectoGTD = "";
              if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if (nota.frontmatter.proyectoGTD) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else if (((_c = nota.frontmatter) == null ? void 0 : _c.type) === "PGTD") {
              this.nota.proyectoGTD = [nombre];
              if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                this.nota.proyectoGTD = this.nota.proyectoGTD.concat(nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
              } else if (nota.frontmatter.proyectoGTD) {
                this.nota.proyectoGTD.push(nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
              }
              this.nota.proyectoQ = "";
              if (Array.isArray(nota.frontmatter.proyectoQ)) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if (nota.frontmatter.proyectoQ) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.proyectoQ = "";
              if (Array.isArray((_d = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _d.proyectoQ)) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if ((_e = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _e.proyectoQ) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
              }
              this.nota.proyectoGTD = "";
              if (Array.isArray((_f = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _f.proyectoGTD)) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if ((_g = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _g.proyectoGTD) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            }
            this.nota.areaInteres = [];
            if (Array.isArray((_h = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _h.areaInteres)) {
              this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
            } else {
              if ((_i = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _i.areaInteres) {
                this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
              }
            }
            this.nota.areaVida = "";
            if ((_j = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _j.areaVida) {
              if (Array.isArray(nota.frontmatter.areaVida)) {
                this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
              } else if (typeof nota.frontmatter.areaVida === "string") {
                this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.areaVida = "No es de ning\xFAn Area de Vida";
            }
            if (!isNaN(parseInt((_k = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _k.nivelP))) {
              nivel = parseInt(nota.frontmatter.nivelP) + 1;
            } else {
              nivel = 0;
            }
            this.nota.nivelP = nivel;
            break;
          case "AI":
            debugger;
            if (((_l = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _l.type) === "AI") {
              this.nota.areaInteres = [nota.frontmatter.file.basename];
            }
            if (Array.isArray((_m = nota.frontmatter) == null ? void 0 : _m.areaInteres)) {
              this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
            } else {
              if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
                this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else {
              }
            }
          case "AV":
            if ((_n = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _n.areaVida) {
              if (Array.isArray(nota.frontmatter.areaVida)) {
                this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
              } else if (typeof nota.frontmatter.areaVida === "string") {
                this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.areaVida = "No es de ning\xFAn Area de Vida";
            }
            if (((_o = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _o.type) === "AI" || ((_p = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _p.type) === "AV") {
              siAsunto = false;
            }
            if (!isNaN(parseInt((_q = nota.frontmatter) == null ? void 0 : _q.nivelP))) {
              nivel = parseInt(nota.frontmatter.nivelP) + 1;
            } else {
              nivel = 0;
            }
            this.nota.nivelP = nivel;
            break;
        }
      } else {
      }
    } else {
      siAsunto = false;
    }
    return { siAsunto, nombre: padres };
  }
  async getProyectoGTD() {
    if (!this.nota.asuntoDefinido) {
      let notasF = await FieldHandlerUtils.findMainFilesWithState("PGTD", null, this.plugin);
      let titulo, nivel;
      let padrePGTD = await this.suggester(["Si", "No"], [true, false], false, ` ${this.nota.titulo} es hijo de un Proyecto GTD?`);
      if (padrePGTD) {
        let notaF = await this.suggester(notasF.map((b) => b.titulo), notasF.map((b) => b), false, `\xBFQu\xE9 Proyecto GTD es padre de ${this.nota.titulo}?:`);
        if (notaF === null) {
          new import_obsidian30.Notice("Sin proyecto GTD definido.");
          titulo = [];
          return;
        } else {
          this.nota.areaInteres = [];
          if (Array.isArray(notaF == null ? void 0 : notaF.areaInteres)) {
            this.nota.areaInteres = this.nota.areaInteres.concat(notaF.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
          } else if (notaF == null ? void 0 : notaF.areaInteres) {
            this.nota.areaInteres.push(notaF.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
          }
          this.nota.areaVida = [];
          if (notaF == null ? void 0 : notaF.areaVida) {
            if (Array.isArray(notaF.areaVida)) {
              this.nota.areaVida = notaF.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
            } else if (typeof notaF.areaVida === "string") {
              this.nota.areaVida = notaF.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
            }
          } else {
            this.nota.areaVida = "No es de ning\xFAn Area de Vida";
          }
          this.nota.proyectoQ = [];
          if (Array.isArray(notaF == null ? void 0 : notaF.proyectoQ)) {
            this.nota.proyectoQ = notaF.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
          } else if (notaF == null ? void 0 : notaF.proyectoQ) {
            this.nota.proyectoQ = [notaF.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "")];
          }
          titulo = [notaF.titulo];
          if (Array.isArray(notaF == null ? void 0 : notaF.proyectoGTD)) {
            titulo = titulo.concat(notaF.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
          } else if (notaF == null ? void 0 : notaF.proyectoGTD) {
            titulo.push(notaF.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
          }
          this.nota.asuntoDefinido = true;
        }
      } else {
        titulo = [];
        nivel = 0;
      }
      return titulo;
    } else {
      return this.nota.proyectoGTD;
    }
  }
  async getProyectoQ() {
    let notaF, titulo, nivel;
    if (!this.nota.asuntoDefinido) {
      let notasF = await FieldHandlerUtils.findMainFilesWithState("PQ", null, this.plugin);
      let padreQ = await this.suggester(["Si", "No"], [true, false], false, ` ${this.nota.titulo} es hijo de un Proyecto Q?`);
      if (padreQ) {
        notaF = await this.suggester(notasF.map((b) => b.titulo), notasF.map((b) => b), false, `\xBFQu\xE9 Proyecto Q es padre de ${this.nota.titulo}?:`);
        if (notaF === null) {
          new import_obsidian30.Notice("Sin proyecto Q definido.");
          titulo = [];
          return;
        } else {
          this.nota.areaInteres = [];
          if (Array.isArray(notaF == null ? void 0 : notaF.areaInteres)) {
            this.nota.areaInteres = this.nota.areaInteres.concat(notaF.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
          } else if (notaF == null ? void 0 : notaF.areaInteres) {
            this.nota.areaInteres.push(notaF.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
          }
          this.nota.areaVida = [];
          if (notaF == null ? void 0 : notaF.areaVida) {
            if (Array.isArray(notaF.areaVida)) {
              this.nota.areaVida = notaF.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
            } else if (typeof notaF.areaVida === "string") {
              this.nota.areaVida = notaF.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
            }
          } else {
            this.nota.areaVida = "No es de ning\xFAn Area de Vida";
          }
          titulo = [notaF == null ? void 0 : notaF.titulo];
          this.nota.proyectoGTD = [];
          if (Array.isArray(notaF == null ? void 0 : notaF.proyectoGTD)) {
            this.nota.proyectoGTD = notaF.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
          } else if (notaF == null ? void 0 : notaF.proyectoGTD) {
            this.nota.proyectoGTD = [notaF.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "")];
          }
          this.nota.asuntoDefinido = true;
        }
      } else {
        titulo = [];
        nivel = 0;
      }
      return titulo;
    } else {
      return this.nota.proyectoQ;
    }
  }
  async getAreaInteres() {
    let areaInteres, nivel, titulo, padreAI, arrayAI;
    if (!this.nota.asuntoDefinido) {
      let areasInteres = await FieldHandlerUtils.findMainFilesWithState("AI", null, this.plugin);
      padreAI = await this.suggester(["Si", "No"], [true, false], false, ` ${this.nota.titulo} es hijo de un \xC1rea de Inter\xE9s:`);
      if (padreAI) {
        areaInteres = await this.suggester(areasInteres.map((b) => b.titulo), areasInteres.map((b) => b), false, `\xBFQu\xE9 \xC1rea de Inter\xE9s es padre de ${this.nota.titulo}?:`);
        if (areaInteres === null) {
          new import_obsidian30.Notice("Sin \xC1rea de Inter\xE9s");
          titulo = [];
          nivel = 0;
          return;
        } else {
          titulo = [areaInteres.titulo];
          if (Array.isArray(areaInteres == null ? void 0 : areaInteres.areaInteres)) {
            titulo = titulo.concat(areaInteres.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
          } else if (areaInteres == null ? void 0 : areaInteres.areaInteres) {
            titulo.push(areaInteres.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
          }
          if (areaInteres == null ? void 0 : areaInteres.areaVida) {
            if (Array.isArray(areaInteres.areaVida)) {
              this.nota.areaVida = areaInteres.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
            } else if (typeof areaInteres.areaVida === "string") {
              this.nota.areaVida = areaInteres.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
            }
          } else {
            this.nota.areaVida = "No es de ning\xFAn Area de Vida";
          }
          this.nota.asuntoDefinido = true;
          nivel = parseInt(areaInteres.nivelAI);
        }
      } else {
        titulo = [];
        nivel = 0;
      }
      this.nota.nivelAI = nivel;
      return titulo;
    } else {
      return this.nota.areaInteres;
    }
  }
  async getAreaVida() {
    let areasVida = {};
    let noAV = {
      file: {
        basename: "No es de ning\xFAn Area de Vida"
      },
      areaVida: "No es de ning\xFAn Area de Vida"
    };
    if (!this.nota.asuntoDefinido) {
      let padreAV = await this.suggester(["Si", "No"], [true, false], false, ` ${this.nota.titulo} es hijo de un \xC1rea de Vida?`);
      if (padreAV) {
        areasVida = await FieldHandlerUtils.findMainFilesWithState("AV", null, this.plugin);
        areasVida.push(noAV);
        this.nota.areaVida = await this.suggester(areasVida.map((b) => b.file.basename), areasVida.map((b) => b.file.basename), false, `\xBFA qu\xE9 \xC1rea de Vida pertenece $${this.nota.titulo}?:`);
      } else {
        this.nota.areaVida = "No es de ning\xFAn Area de Vida";
      }
      return this.nota.areaVida;
    } else {
      return this.nota.areaVida;
    }
  }
  async getAliases() {
    this.nota.aliases = [];
    this.nota.aliases.push(`${this.nota.titulo}`);
    this.nota.aliases.push(`${this.infoSubsistema.type}/${this.nota.titulo}`);
    return this.nota.aliases;
  }
  // Actualización del método getRename en NoteFieldHandlerBase.ts
  // (Este es el método que se utilizará en la mayoría de las clases de manejo de notas)
  async getRename() {
    const newName = `${this.infoSubsistema.folder}/${this.infoSubsistema.type} - ${this.nota.id}.md`;
    await FieldHandlerUtils.crearCarpeta(this.infoSubsistema.folder);
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    try {
      if (existe instanceof import_obsidian30.TFile) {
        const nombreFile = newName.split("/");
        const borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [true, false],
          true,
          `\xBF${nombreFile.pop()} ya existe. Qu\xE9 deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian30.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            const nuevoArchivo = app.vault.getAbstractFileByPath(newName);
            if (nuevoArchivo instanceof import_obsidian30.TFile) {
              await app.workspace.getLeaf(true).openFile(nuevoArchivo);
            }
            return newName;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian30.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          const nuevoArchivo = app.vault.getAbstractFileByPath(newName);
          if (nuevoArchivo instanceof import_obsidian30.TFile) {
            await app.workspace.getLeaf(true).openFile(nuevoArchivo);
          }
          return newName;
        }
      }
    } catch (error) {
      console.error("Error al cambiar el nombre", error);
      throw error;
    }
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/CPEFieldHandler.ts
var ContenidoParaEstudioFieldHandler = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/RRFieldHandler.ts
var RecursosRecurrentesFieldHandler = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Estructura/PGTDFieldHandler.ts
var import_obsidian31 = require("obsidian");
var PGTDFieldHandler = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  async getAsunto() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D;
    let tipoSistema = this.infoSubsistema.type;
    let nombreSistema = this.infoSubsistema.typeName;
    let subsistemas, padres = [];
    let activo = app.workspace.getActiveFile();
    let siAsunto = false;
    let nombre = "";
    let nota;
    if (activo != null) {
      nombre = activo.basename;
      nota = app.metadataCache.getFileCache(activo);
      nota.frontmatter = nota.frontmatter || {};
      nota.frontmatter.file = {};
      Object.assign(nota.frontmatter.file, activo);
      padres.unshift(nombre);
      switch (tipoSistema) {
        case "RR":
        case "PGTD":
        case "Ax":
        case "Tx":
        case "CPE":
          siAsunto = await this.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
          if (siAsunto) {
            debugger;
            this.nota.asuntoDefinido = true;
            let nivel2;
            switch ((_a = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _a.type) {
              default:
              case "PGTD":
              case "PQ":
                if (((_b = nota.frontmatter) == null ? void 0 : _b.type) === "PQ") {
                  this.nota.proyectoQ = nombre;
                  this.nota.proyectoGTD = "";
                  if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                    this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
                  } else if (nota.frontmatter.proyectoGTD) {
                    this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                } else if (((_c = nota.frontmatter) == null ? void 0 : _c.type) === "PGTD") {
                  this.nota.proyectoGTD = [nombre];
                  if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                    this.nota.proyectoGTD = this.nota.proyectoGTD.concat(nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                  } else if (nota.frontmatter.proyectoGTD) {
                    this.nota.proyectoGTD.push(nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
                  }
                  this.nota.proyectoQ = "";
                  if (Array.isArray(nota.frontmatter.proyectoQ)) {
                    this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
                  } else if (nota.frontmatter.proyectoQ) {
                    this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                } else {
                  this.nota.proyectoQ = "";
                  if (Array.isArray((_d = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _d.proyectoQ)) {
                    this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
                  } else if ((_e = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _e.proyectoQ) {
                    this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                  this.nota.proyectoGTD = "";
                  if (Array.isArray((_f = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _f.proyectoGTD)) {
                    this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
                  } else if ((_g = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _g.proyectoGTD) {
                    this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                }
                this.nota.areaInteres = [];
                if (Array.isArray((_h = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _h.areaInteres)) {
                  this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                } else {
                  if ((_i = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _i.areaInteres) {
                    this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
                  }
                }
                this.nota.areaVida = "";
                if ((_j = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _j.areaVida) {
                  if (Array.isArray(nota.frontmatter.areaVida)) {
                    this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
                  } else if (typeof nota.frontmatter.areaVida === "string") {
                    this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                } else {
                  this.nota.areaVida = "No es de ning\xFAn Area de Vida";
                }
                if (!isNaN(parseInt((_k = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _k.nivelP))) {
                  nivel2 = parseInt(nota.frontmatter.nivelP) + 1;
                } else {
                  nivel2 = 0;
                }
                this.nota.nivelP = nivel2;
                break;
              case "AI":
                debugger;
                if (((_l = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _l.type) === "AI") {
                  this.nota.areaInteres = [nota.frontmatter.file.basename];
                }
                if (Array.isArray((_m = nota.frontmatter) == null ? void 0 : _m.areaInteres)) {
                  this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                } else {
                  if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
                    this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
                  } else {
                  }
                }
              case "AV":
                if ((_n = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _n.areaVida) {
                  if (Array.isArray(nota.frontmatter.areaVida)) {
                    this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
                  } else if (typeof nota.frontmatter.areaVida === "string") {
                    this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                } else {
                  this.nota.areaVida = "No es de ning\xFAn Area de Vida";
                }
                if (((_o = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _o.type) === "AI" || ((_p = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _p.type) === "AV") {
                  siAsunto = false;
                }
                if (!isNaN(parseInt((_q = nota.frontmatter) == null ? void 0 : _q.nivelP))) {
                  nivel2 = parseInt(nota.frontmatter.nivelP) + 1;
                } else {
                  nivel2 = 0;
                }
                this.nota.nivelP = nivel2;
                break;
            }
          } else {
          }
          break;
        case "PQ":
          siAsunto = await this.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
          if (siAsunto) {
            debugger;
            if (((_r = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _r.areaVida) !== void 0 && nota.frontmatter.areaVida !== "") {
              if (Array.isArray(nota.frontmatter.areaVida)) {
                this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
              } else if (typeof nota.frontmatter.areaVida === "string") {
                this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
              }
              if (((_s = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _s.type) === "AI" || ((_t = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _t.type) === "AV") {
                siAsunto = false;
              }
              let nivel2;
              switch ((_u = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _u.type) {
                case "PGTD":
                  this.nota.proyectoGTD = [nombre];
                  if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                    this.nota.proyectoGTD = this.nota.proyectoGTD.concat(nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                  } else if (nota.frontmatter.proyectoGTD) {
                    this.nota.proyectoGTD.push(nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
                  }
                case "AI":
                  if (((_v = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _v.type) === "AI") {
                    this.nota.areaInteres = [nota.frontmatter.file.basename];
                  } else {
                    this.nota.areaInteres = [];
                  }
                  if (Array.isArray((_w = nota.frontmatter) == null ? void 0 : _w.areaInteres)) {
                    this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                  } else {
                    if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
                      this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
                    } else {
                      this.nota.areaInteres = "";
                    }
                  }
                case "AV":
                case "nAV":
                  if (!isNaN(parseInt((_x = nota.frontmatter) == null ? void 0 : _x.nivelP))) {
                    nivel2 = parseInt(nota.frontmatter.nivelP) + 1;
                  } else {
                    nivel2 = 0;
                  }
                  this.nota.nivelP = nivel2;
                  this.nota.asuntoDefinido = true;
                  break;
                default:
                  new import_obsidian31.Notice("Un Proyecto de Q solo puede iniciar de un AV, AI o PGTD. Asunto no definido.");
                  break;
              }
            } else {
              new import_obsidian31.Notice("Todos los proyectos de Q requieren Area de Vida. Asunto no definido.");
              siAsunto = false;
            }
          } else {
          }
          break;
        case "AI":
          let nivel;
          switch ((_y = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _y.type) {
            case "AI":
            case "AV":
            case "nAV":
              siAsunto = await this.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
              if (siAsunto) {
                this.nota.asuntoDefinido = true;
                if (((_z = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _z.type) === "AI") {
                  this.nota.areaInteres = [nota.frontmatter.file.basename];
                  if (Array.isArray(nota.frontmatter.areaInteres)) {
                    this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                  } else {
                    if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
                      this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
                    }
                  }
                }
                if ((_A = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _A.areaVida) {
                  if (Array.isArray(nota.frontmatter.areaVida)) {
                    this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
                  } else if (typeof nota.frontmatter.areaVida === "string") {
                    this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                } else {
                  this.nota.areaVida = "No es de ning\xFAn Area de Vida";
                }
                if (((_B = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _B.type) === "AI" || ((_C = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _C.type) === "AV") {
                  siAsunto = false;
                }
                if (!isNaN(parseInt((_D = nota.frontmatter) == null ? void 0 : _D.nivelAI))) {
                  nivel = parseInt(nota.frontmatter.nivelAI) + 1;
                } else {
                  nivel = 0;
                }
                this.nota.nivelAI = nivel;
              }
              break;
          }
          break;
        default:
          console.log("Dependiendo de la estructura, getAsunto deberia tener su clasificaci\xF3n. Aqui vas a tener un error.");
          break;
      }
    } else {
      siAsunto = false;
    }
    return { siAsunto, nombre: padres };
  }
  async getProyectoGTD() {
    let tipo = this.infoSubsistema.type;
    let notasF = await FieldHandlerUtils.findMainFilesWithState("PGTD", null, this.plugin);
    let notaF, titulo = [];
    let padrePGTD;
    if (!this.nota.asuntoDefinido) {
      padrePGTD = await this.suggester(["Si", "No"], [true, false], false, `${this.nota.titulo} es hijo de un Proyecto GTD?`);
      if (padrePGTD) {
        notaF = await this.suggester(notasF.map((b) => b.titulo), notasF.map((b) => b), false, `\xBFQu\xE9 Proyecto GTD es padre de ${this.nota.titulo}?:`);
        if (notaF === null) {
          new import_obsidian31.Notice("Sin proyecto GTD definido.");
          return [];
        } else {
          this.nota.areaInteres = Array.isArray(notaF == null ? void 0 : notaF.areaInteres) ? notaF.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")) : (notaF == null ? void 0 : notaF.areaInteres) ? [notaF.areaInteres.replace(/\[\[\s*|\s*\]\]/g, "")] : [];
          this.nota.areaVida = (notaF == null ? void 0 : notaF.areaVida) ? Array.isArray(notaF.areaVida) ? notaF.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "") : notaF.areaVida.replace(/\[\[\s*|\s*\]\]/g, "") : "No es de ning\xFAn Area de Vida";
          this.nota.proyectoQ = Array.isArray(notaF == null ? void 0 : notaF.proyectoQ) ? notaF.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")) : (notaF == null ? void 0 : notaF.proyectoQ) ? [notaF.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "")] : [];
          titulo = [notaF.titulo];
          if (Array.isArray(notaF == null ? void 0 : notaF.proyectoGTD)) {
            titulo = titulo.concat(notaF.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
          } else if (notaF == null ? void 0 : notaF.proyectoGTD) {
            titulo.push(notaF.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
          }
          this.nota.asuntoDefinido = true;
          debugger;
          this.nota.nivelP = !isNaN(parseInt(notaF == null ? void 0 : notaF.nivelP)) ? parseInt(notaF.nivelP) + 1 : 0;
        }
      } else {
        titulo = [];
        this.nota.nivelP = 0;
      }
      return titulo;
    } else {
      return this.nota.proyectoGTD;
    }
  }
  async getRename() {
    let newName, folder;
    debugger;
    if (this.nota.areaVida === "No es de ning\xFAn Area de Vida") {
      newName = `${this.infoSubsistema.folder}/Otras/${this.infoSubsistema.type} - ${this.nota.id}.md`;
      folder = `${this.infoSubsistema.folder}/Otras`;
    } else {
      newName = `${this.infoSubsistema.folder}/${this.nota.areaVida}/${this.infoSubsistema.type} - ${this.nota.id}.md`;
      folder = `${this.infoSubsistema.folder}/${this.nota.areaVida}`;
    }
    await FieldHandlerUtils.crearCarpeta(folder);
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    try {
      if (existe instanceof import_obsidian31.TFile) {
        const nombreFile = newName.split("/");
        const borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [true, false],
          true,
          `\xBF${nombreFile.pop()} ya existe. Qu\xE9 deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian31.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            return newName;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian31.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          return newName;
        }
      }
    } catch (error) {
      console.error("Error al cambiar el nombre", error);
      throw error;
    }
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Estructura/PQFieldHandler.ts
var import_obsidian32 = require("obsidian");
var PQFieldHandler = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  async getAsunto() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D;
    let tipoSistema = this.infoSubsistema.type;
    let nombreSistema = this.infoSubsistema.typeName;
    let subsistemas, padres = [];
    let activo = app.workspace.getActiveFile();
    let siAsunto = false;
    let nombre = "";
    let nota;
    if (activo != null) {
      nombre = activo.basename;
      nota = app.metadataCache.getFileCache(activo);
      nota.frontmatter = nota.frontmatter || {};
      nota.frontmatter.file = {};
      Object.assign(nota.frontmatter.file, activo);
      padres.unshift(nombre);
      switch (tipoSistema) {
        case "RR":
        case "PGTD":
        case "Ax":
        case "Tx":
        case "CPE":
          siAsunto = await this.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
          if (siAsunto) {
            debugger;
            this.nota.asuntoDefinido = true;
            let nivel2;
            switch ((_a = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _a.type) {
              default:
              case "PGTD":
              case "PQ":
                if (((_b = nota.frontmatter) == null ? void 0 : _b.type) === "PQ") {
                  this.nota.proyectoQ = nombre;
                  this.nota.proyectoGTD = "";
                  if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                    this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
                  } else if (nota.frontmatter.proyectoGTD) {
                    this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                } else if (((_c = nota.frontmatter) == null ? void 0 : _c.type) === "PGTD") {
                  this.nota.proyectoGTD = [nombre];
                  if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                    this.nota.proyectoGTD = this.nota.proyectoGTD.concat(nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                  } else if (nota.frontmatter.proyectoGTD) {
                    this.nota.proyectoGTD.push(nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
                  }
                  this.nota.proyectoQ = "";
                  if (Array.isArray(nota.frontmatter.proyectoQ)) {
                    this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
                  } else if (nota.frontmatter.proyectoQ) {
                    this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                } else {
                  this.nota.proyectoQ = "";
                  if (Array.isArray((_d = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _d.proyectoQ)) {
                    this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
                  } else if ((_e = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _e.proyectoQ) {
                    this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                  this.nota.proyectoGTD = "";
                  if (Array.isArray((_f = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _f.proyectoGTD)) {
                    this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
                  } else if ((_g = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _g.proyectoGTD) {
                    this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                }
                this.nota.areaInteres = [];
                if (Array.isArray((_h = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _h.areaInteres)) {
                  this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                } else {
                  if ((_i = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _i.areaInteres) {
                    this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
                  }
                }
                this.nota.areaVida = "";
                if ((_j = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _j.areaVida) {
                  if (Array.isArray(nota.frontmatter.areaVida)) {
                    this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
                  } else if (typeof nota.frontmatter.areaVida === "string") {
                    this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                } else {
                  this.nota.areaVida = "No es de ning\xFAn Area de Vida";
                }
                if (!isNaN(parseInt((_k = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _k.nivelP))) {
                  nivel2 = parseInt(nota.frontmatter.nivelP) + 1;
                } else {
                  nivel2 = 0;
                }
                this.nota.nivelP = nivel2;
                break;
              case "AI":
                debugger;
                if (((_l = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _l.type) === "AI") {
                  this.nota.areaInteres = [nota.frontmatter.file.basename];
                }
                if (Array.isArray((_m = nota.frontmatter) == null ? void 0 : _m.areaInteres)) {
                  this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                } else {
                  if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
                    this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
                  } else {
                  }
                }
              case "AV":
                if ((_n = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _n.areaVida) {
                  if (Array.isArray(nota.frontmatter.areaVida)) {
                    this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
                  } else if (typeof nota.frontmatter.areaVida === "string") {
                    this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                } else {
                  this.nota.areaVida = "No es de ning\xFAn Area de Vida";
                }
                if (((_o = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _o.type) === "AI" || ((_p = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _p.type) === "AV") {
                  siAsunto = false;
                }
                if (!isNaN(parseInt((_q = nota.frontmatter) == null ? void 0 : _q.nivelP))) {
                  nivel2 = parseInt(nota.frontmatter.nivelP) + 1;
                } else {
                  nivel2 = 0;
                }
                this.nota.nivelP = nivel2;
                break;
            }
          } else {
          }
          break;
        case "PQ":
          siAsunto = await this.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
          if (siAsunto) {
            debugger;
            if (((_r = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _r.areaVida) !== void 0 && nota.frontmatter.areaVida !== "") {
              if (Array.isArray(nota.frontmatter.areaVida)) {
                this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
              } else if (typeof nota.frontmatter.areaVida === "string") {
                this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
              }
              if (((_s = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _s.type) === "AI" || ((_t = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _t.type) === "AV") {
                siAsunto = false;
              }
              let nivel2;
              switch ((_u = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _u.type) {
                case "PGTD":
                  this.nota.proyectoGTD = [nombre];
                  if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                    this.nota.proyectoGTD = this.nota.proyectoGTD.concat(nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                  } else if (nota.frontmatter.proyectoGTD) {
                    this.nota.proyectoGTD.push(nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
                  }
                case "AI":
                  if (((_v = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _v.type) === "AI") {
                    this.nota.areaInteres = [nota.frontmatter.file.basename];
                  } else {
                    this.nota.areaInteres = [];
                  }
                  if (Array.isArray((_w = nota.frontmatter) == null ? void 0 : _w.areaInteres)) {
                    this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                  } else {
                    if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
                      this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
                    } else {
                      this.nota.areaInteres = "";
                    }
                  }
                case "AV":
                case "nAV":
                  if (!isNaN(parseInt((_x = nota.frontmatter) == null ? void 0 : _x.nivelP))) {
                    nivel2 = parseInt(nota.frontmatter.nivelP) + 1;
                  } else {
                    nivel2 = 0;
                  }
                  this.nota.nivelP = nivel2;
                  this.nota.asuntoDefinido = true;
                  break;
                default:
                  new import_obsidian32.Notice("Un Proyecto de Q solo puede iniciar de un AV, AI o PGTD. Asunto no definido.");
                  break;
              }
            } else {
              new import_obsidian32.Notice("Todos los proyectos de Q requieren Area de Vida. Asunto no definido.");
              siAsunto = false;
            }
          } else {
          }
          break;
        case "AI":
          let nivel;
          switch ((_y = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _y.type) {
            case "AI":
            case "AV":
            case "nAV":
              siAsunto = await this.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
              if (siAsunto) {
                this.nota.asuntoDefinido = true;
                if (((_z = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _z.type) === "AI") {
                  this.nota.areaInteres = [nota.frontmatter.file.basename];
                  if (Array.isArray(nota.frontmatter.areaInteres)) {
                    this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
                  } else {
                    if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
                      this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
                    }
                  }
                }
                if ((_A = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _A.areaVida) {
                  if (Array.isArray(nota.frontmatter.areaVida)) {
                    this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
                  } else if (typeof nota.frontmatter.areaVida === "string") {
                    this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
                  }
                } else {
                  this.nota.areaVida = "No es de ning\xFAn Area de Vida";
                }
                if (((_B = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _B.type) === "AI" || ((_C = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _C.type) === "AV") {
                  siAsunto = false;
                }
                if (!isNaN(parseInt((_D = nota.frontmatter) == null ? void 0 : _D.nivelAI))) {
                  nivel = parseInt(nota.frontmatter.nivelAI) + 1;
                } else {
                  nivel = 0;
                }
                this.nota.nivelAI = nivel;
              }
              break;
          }
          break;
        default:
          console.log("Dependiendo de la estructura, getAsunto deberia tener su clasificaci\xF3n. Aqui vas a tener un error.");
          break;
      }
    } else {
      siAsunto = false;
    }
    return { siAsunto, nombre: padres };
  }
  async getProyectoGTD() {
    let tipo = this.infoSubsistema.type;
    let notasF = await FieldHandlerUtils.findMainFilesWithState("PGTD", null, this.plugin);
    let notaF, titulo = [];
    let padrePGTD;
    if (!this.nota.asuntoDefinido) {
      padrePGTD = await this.suggester(["Si", "No"], [true, false], false, `${this.nota.titulo} es hijo de un Proyecto GTD?`);
      if (padrePGTD) {
        notaF = await this.suggester(notasF.map((b) => b.titulo), notasF.map((b) => b), false, `\xBFQu\xE9 Proyecto GTD es padre de ${this.nota.titulo}?:`);
        if (notaF === null) {
          new import_obsidian32.Notice("Sin proyecto GTD definido.");
          return [];
        } else {
          this.nota.areaInteres = Array.isArray(notaF == null ? void 0 : notaF.areaInteres) ? notaF.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")) : (notaF == null ? void 0 : notaF.areaInteres) ? [notaF.areaInteres.replace(/\[\[\s*|\s*\]\]/g, "")] : [];
          this.nota.areaVida = (notaF == null ? void 0 : notaF.areaVida) ? Array.isArray(notaF.areaVida) ? notaF.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "") : notaF.areaVida.replace(/\[\[\s*|\s*\]\]/g, "") : "No es de ning\xFAn Area de Vida";
          this.nota.proyectoQ = Array.isArray(notaF == null ? void 0 : notaF.proyectoQ) ? notaF.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")) : (notaF == null ? void 0 : notaF.proyectoQ) ? [notaF.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "")] : [];
          titulo = [notaF.titulo];
          if (Array.isArray(notaF == null ? void 0 : notaF.proyectoGTD)) {
            titulo = titulo.concat(notaF.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
          } else if (notaF == null ? void 0 : notaF.proyectoGTD) {
            titulo.push(notaF.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
          }
          this.nota.asuntoDefinido = true;
          debugger;
          this.nota.nivelP = !isNaN(parseInt(notaF == null ? void 0 : notaF.nivelP)) ? parseInt(notaF.nivelP) + 1 : 0;
        }
      } else {
        titulo = [];
        this.nota.nivelP = 0;
      }
      return titulo;
    } else {
      return this.nota.proyectoGTD;
    }
  }
  async getRename() {
    let newName, folder;
    debugger;
    let folderAV = Array.isArray(this.nota.areaVida) ? this.nota.areaVida[0] : this.nota.areaVida;
    newName = `${this.infoSubsistema.folder}/${this.nota.trimestre}/${folderAV}/${this.infoSubsistema.type} - ${this.nota.id}.md`;
    folder = `${this.infoSubsistema.folder}/${this.nota.trimestre}/${folderAV}`;
    await FieldHandlerUtils.crearCarpeta(folder);
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    try {
      if (existe instanceof import_obsidian32.TFile) {
        const nombreFile = newName.split("/");
        const borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [true, false],
          true,
          `\xBF${nombreFile.pop()} ya existe. Qu\xE9 deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian32.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            return newName;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian32.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          return newName;
        }
      }
    } catch (error) {
      console.error("Error al cambiar el nombre", error);
      throw error;
    }
  }
  async getTrimestre() {
    let tipoSistema = this.infoSubsistema.type;
    let nombreSistema = this.infoSubsistema.typeName;
    let trimestre;
    let trimestres = await FieldHandlerUtils.findMainFilesWithState("TQ", null, this.plugin);
    switch (tipoSistema) {
      case "AV":
      case "PQ":
        trimestre = await this.suggester(trimestres.map((b) => b.file.basename), trimestres.map((b) => b.file.basename), false, `Trimestre del ${nombreSistema}:`);
        break;
      case "OCA":
        trimestre = await this.suggester(
          ["Q1", "Q2", "Q3", "Q4"],
          [
            `${this.nota.a\u00F1o}-Q1`,
            `${this.nota.a\u00F1o}-Q2`,
            `${this.nota.a\u00F1o}-Q3`,
            `${this.nota.a\u00F1o}-Q4`
          ],
          true,
          `\xBFEn qu\xE9 trimestre del ${this.nota.a\u00F1o} consideras que se puede realizar ese objetivo?`
        );
        break;
      case "CTI":
        trimestre = await this.suggester(
          ["Q1", "Q2", "Q3", "Q4"],
          [
            `${this.nota.a\u00F1o}-Q1`,
            `${this.nota.a\u00F1o}-Q2`,
            `${this.nota.a\u00F1o}-Q3`,
            `${this.nota.a\u00F1o}-Q4`
          ],
          true,
          `\xBFDe qu\xE9 trimestre del ${this.nota.a\u00F1o} es esta planeaci\xF3n?`
        );
        break;
      default:
        trimestre = await this.suggester(trimestres.map((b) => b.file.basename), trimestres.map((b) => b.file.path), false, `Trimestre del ${nombreSistema}:`);
    }
    if (trimestre === null) {
      new import_obsidian32.Notice("Modificaci\xF3n de nota cancelada por el usuario.");
      return;
    }
    this.nota.trimestre = trimestre;
    return trimestre;
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/AnotacionesFieldHandler.ts
var import_obsidian33 = require("obsidian");
var AnotacionesFieldHandler = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
    this.pathCampos = this.plugin.settings.file_camposCentral + ".md";
  }
  async getClasificacion() {
    var _a;
    let clasificacion2 = null;
    let tagClasificacion2 = null;
    let clasificacionAX = {};
    let tagsClasificacionAX = [];
    let nuevaClasificacion2 = false;
    const file = app.vault.getAbstractFileByPath(this.pathCampos);
    if (!file) {
      new import_obsidian33.Notice("Archivo no encontrado.");
      return;
    }
    const frontmatter = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    if (frontmatter) {
      clasificacionAX = frontmatter.tituloClasificacionAX || [];
      tagsClasificacionAX = frontmatter.tagsClasificacionAX || [];
      const suggester = this.tp.system.static_functions.get("suggester");
      tagClasificacion2 = await suggester(clasificacionAX, tagsClasificacionAX, false, "\xBFClasificar\xEDas esta nota bajo alguna de las siguientes categor\xEDas?");
      if (tagClasificacion2 === null) {
        new import_obsidian33.Notice("Creaci\xF3n de nota cancelada por el usuario.");
        return;
      } else if (tagClasificacion2 === "Nuevo") {
        const prompt = this.tp.system.static_functions.get("prompt");
        clasificacion2 = await prompt("\xBFCual es el nombre de la nueva clasificaci\xF3n que vas a ingresar?", "MiClasificaci\xF3n", true);
        if (clasificacion2 === null) {
          new import_obsidian33.Notice("Creaci\xF3n de nota cancelada por el usuario.");
          return;
        }
        tagClasificacion2 = await prompt("\xBFCual es el tag que utilizaras para " + clasificacion2 + "?. No utilices espacios en la definici\xF3n del tag.", "nuevoTag", true);
        if (tagClasificacion2 === null) {
          new import_obsidian33.Notice("Creaci\xF3n de nota cancelada por el usuario.");
          return;
        }
        nuevaClasificacion2 = true;
      } else if (tagClasificacion2 === "Ninguna") {
        tagClasificacion2 = "";
        clasificacion2 = "";
      } else {
        const indice = tagsClasificacionAX.indexOf(tagClasificacion2);
        clasificacion2 = clasificacionAX[indice];
      }
    }
    if (nuevaClasificacion2) {
      try {
        await app.fileManager.processFrontMatter(file, (frontmatter2) => {
          const newClasificacion = [...clasificacionAX, clasificacion2];
          const newTagClasificacion = [...tagsClasificacionAX, tagClasificacion2];
          frontmatter2.tituloClasificacionAX = newClasificacion;
          frontmatter2.tagsClasificacionAX = newTagClasificacion;
          console.log("Frontmatter actualizado con \xE9xito");
        });
      } catch (err) {
        console.error("Error al actualizar el frontmatter", err);
      }
    }
    if (tagClasificacion2 !== "") {
      tagClasificacion2 = "cl/" + tagClasificacion2;
    }
    this.nota.clasificacionAX = clasificacion2;
    this.nota.tagClasificacionAX = tagClasificacion2;
    return { clase: clasificacion2, tag: tagClasificacion2 };
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/TransaccionesFieldHandler.ts
var import_obsidian34 = require("obsidian");
var TransaccionesFieldHandler = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  async getFecha() {
    let fecha;
    let fechaOriginal = await this.prompt(`Confirma la fecha de la transacci\xF3n: `, `${moment().format("YYYY-MM-DD HH:mm")}`, true);
    let fechaMoment = moment(fechaOriginal, "YYYY-MM-DD HH:mm");
    fecha = fechaMoment.format("YYYY-MM-DD dddd HH:mm");
    this.nota.fecha = fecha;
    return fecha;
  }
  async getRename() {
    debugger;
    let fecha = moment(this.nota.fecha, "YYYY-MM-DD dddd HH:mm");
    let fechaY = fecha.format("YYYY");
    let fechaMes = fecha.format("MM - MMMM");
    const newName = `${this.infoSubsistema.folder}/${fechaY}/${fechaMes}/${this.infoSubsistema.type} - ${this.nota.id}.md`;
    const folder = `${this.infoSubsistema.folder}/${fechaY}/${fechaMes}`;
    await FieldHandlerUtils.crearCarpeta(folder);
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    try {
      if (existe instanceof import_obsidian34.TFile) {
        const nombreFile = newName.split("/");
        const borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [true, false],
          true,
          `\xBF${nombreFile.pop()} ya existe. Qu\xE9 deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian34.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            return newName;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian34.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          return newName;
        }
      }
    } catch (error) {
      console.error("Error al cambiar el nombre", error);
      throw error;
    }
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Estructura/AreasInteresFieldHandler.ts
var import_obsidian35 = require("obsidian");
var AreasInteresFieldHandler = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  async getAsunto() {
    var _a, _b, _c, _d, _e;
    let tipoSistema = this.infoSubsistema.type;
    let padres = [];
    let activo = app.workspace.getActiveFile();
    let siAsunto = false;
    let nombre = "";
    let nota;
    if (activo != null) {
      nombre = activo.basename;
      nota = app.metadataCache.getFileCache(activo);
      nota.frontmatter = nota.frontmatter || {};
      nota.frontmatter.file = {};
      Object.assign(nota.frontmatter.file, activo);
      padres.unshift(nombre);
      let nivel;
      siAsunto = await this.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
      if (siAsunto) {
        this.nota.asuntoDefinido = true;
        if (((_a = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _a.type) === "AI") {
          this.nota.areaInteres = [nota.frontmatter.file.basename];
          if (Array.isArray(nota.frontmatter.areaInteres)) {
            this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
          } else {
            if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
              this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
            }
          }
        }
        if ((_b = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _b.areaVida) {
          if (Array.isArray(nota.frontmatter.areaVida)) {
            this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
          } else if (typeof nota.frontmatter.areaVida === "string") {
            this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
          }
        } else {
          this.nota.areaVida = "No es de ning\xFAn Area de Vida";
        }
        if (((_c = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _c.type) === "AI" || ((_d = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _d.type) === "AV") {
          siAsunto = false;
        }
        if (!isNaN(parseInt((_e = nota.frontmatter) == null ? void 0 : _e.nivelAI))) {
          nivel = parseInt(nota.frontmatter.nivelAI) + 1;
        } else {
          nivel = 0;
        }
        this.nota.nivelAI = nivel;
      }
    } else {
      siAsunto = false;
    }
    return { siAsunto, nombre: padres };
  }
  async getAliases() {
    this.nota.aliases = [];
    this.nota.aliases.push(`${this.infoSubsistema.type}/${this.nota.titulo}`);
    debugger;
    if (this.nota.areaVida != "No es de ning\xFAn Area de Vida") {
      this.nota.aliases.push(`${this.infoSubsistema.type}/${this.nota.areaVida}/${this.nota.titulo}`);
    }
    return this.nota.aliases;
  }
  async getRename() {
    let newName, folder;
    debugger;
    if (this.nota.areaVida === "No es de ning\xFAn Area de Vida") {
      newName = `${this.infoSubsistema.folder}/Otras/${this.infoSubsistema.type} - ${this.nota.id}.md`;
      folder = `${this.infoSubsistema.folder}/Otras`;
    } else {
      newName = `${this.infoSubsistema.folder}/${this.nota.areaVida}/${this.infoSubsistema.type} - ${this.nota.id}.md`;
      folder = `${this.infoSubsistema.folder}/${this.nota.areaVida}`;
    }
    await FieldHandlerUtils.crearCarpeta(folder);
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    try {
      if (existe instanceof import_obsidian35.TFile) {
        const nombreFile = newName.split("/");
        const borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [true, false],
          true,
          `\xBF${nombreFile.pop()} ya existe. Qu\xE9 deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian35.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            return newName;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian35.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          return newName;
        }
      }
    } catch (error) {
      console.error("Error al cambiar el nombre", error);
      throw error;
    }
  }
  async getAreaInteres() {
    let nombreTipo = this.infoSubsistema.typeName;
    let areasInteres = await FieldHandlerUtils.findMainFilesWithState("AI", null, this.plugin);
    let areaInteres, nivel, titulo, padreAI, arrayAI;
    if (!this.nota.asuntoDefinido) {
      padreAI = await this.suggester(["Si", "No"], [true, false], false, ` ${this.nota.titulo} es hijo de otra ${nombreTipo}:`);
      if (padreAI) {
        areaInteres = await this.suggester(areasInteres.map((b) => b.titulo), areasInteres.map((b) => b), false, `Que Area de Inter\xE9s es padre de ${this.nota.titulo}?:`);
        if (areaInteres === null) {
          new import_obsidian35.Notice("Sin Area de Interes");
          titulo = "";
          nivel = 0;
          return;
        } else {
          this.nota.asuntoDefinido = true;
          if (areaInteres.areaVida === null) {
            this.nota.areaVida = "No es de ning\xFAn Area de Vida";
          } else {
            debugger;
            this.nota.areaVida = areaInteres.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
          }
          titulo = areaInteres.titulo;
          nivel = parseInt(areaInteres.nivelAI) + 1;
        }
      } else {
        titulo = "";
        nivel = 0;
      }
      this.nota.nivelAI = nivel;
      return titulo;
    } else {
      return this.nota.areaInteres;
    }
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Estructura/AreaVidaFieldHandler.ts
var import_obsidian36 = require("obsidian");
var AreaVidaFieldHandler = class extends NoteFieldHandlerBase {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
    this.pathCampos = this.plugin.settings.file_camposCentral + ".md";
  }
  async getArea() {
    let area, grupo;
    let tipoArea = this.infoSubsistema.typeName;
    let nuevaArea = false;
    let areasGrupos = this.getDuplasFijas(app, tipoArea);
    let areaGrupo = await this.suggester(areasGrupos.map((b) => b.texto), areasGrupos.map((b) => b.texto), false, `\xBFCu\xE1l ${tipoArea} deseas crear?`);
    if (areaGrupo === null) {
      new import_obsidian36.Notice("Creaci\xF3n de nota cancelada por el usuario.");
      return;
    } else if (areaGrupo == "Nuevo") {
      clasificacion = await this.prompt("\xBFCual es el nombre de la nueva clasificaci\xF3n que vas a ingresar?", "MiClasificaci\xF3n", true);
      if (clasificacion === null) {
        new import_obsidian36.Notice("Creaci\xF3n de nota cancelada por el usuario.");
        return;
      }
      tagClasificacion = await this.prompt("\xBFCual es el tag que utilizaras para " + clasificacion + "?. No utilices espacios en la definici\xF3n del tag.", "nuevoTag", true);
      if (tagClasificacion === null) {
        new import_obsidian36.Notice("Creaci\xF3n de nota cancelada por el usuario.");
        return;
      }
      nuevaClasificacion = true;
    } else {
      let indice = areasGrupos.findIndex((objeto) => objeto.texto === areaGrupo);
      grupo = areasGrupos[indice].grupo;
      area = areasGrupos[indice].area;
      this.nota.grupo = grupo;
      this.nota.titulo = area;
      return { grupo, titulo: area };
    }
  }
  getDuplasFijas(app2, area) {
    var _a;
    const file = app2.vault.getAbstractFileByPath(this.pathCampos);
    try {
      if (file instanceof import_obsidian36.TFile) {
        const metadata = app2.metadataCache.getFileCache(file);
        const arregloResult = ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a[area]) || [];
        const resultado = [];
        if (Array.isArray(arregloResult)) {
          arregloResult.forEach((item) => {
            if (Array.isArray(item) && item.length >= 2) {
              resultado.push({ grupo: item[0], area: item[1], texto: item[0] + "/" + item[1] });
            }
          });
        }
        return resultado;
      }
    } catch (error) {
      console.error("Error obteniendo el archivo de campos:", error);
      throw error;
    }
    return [];
  }
  async getFilename() {
    let fileName;
    if (this.infoSubsistema.hasOwnProperty("fileName")) {
      const partes = this.infoSubsistema.fileName.split(" -- ");
      this.nota.trimestre = partes[0];
      this.nota.titulo = partes[1];
      this.nota.areaVida = partes[1];
      this.nota.grupo = partes[2];
    }
    fileName = `${this.nota.trimestre} - ${this.nota.titulo}`;
    this.nota.filename = fileName;
    return fileName;
  }
  async getTrimestre() {
    let tipoSistema = this.infoSubsistema.type;
    let nombreSistema = this.infoSubsistema.typeName;
    let trimestre;
    let trimestres = await FieldHandlerUtils.findMainFilesWithState("TQ", null, this.plugin);
    trimestre = await this.suggester(trimestres.map((b) => b.file.basename), trimestres.map((b) => b.file.basename), false, `Trimestre del ${nombreSistema}:`);
    if (trimestre === null) {
      new import_obsidian36.Notice("Modificaci\xF3n de nota cancelada por el usuario.");
      return;
    }
    this.nota.trimestre = trimestre;
    return trimestre;
  }
  async getNota() {
    return this.nota;
  }
  async getRename() {
    debugger;
    let newName, name, folder;
    newName = `${this.infoSubsistema.folder}/${this.nota.titulo}/${this.nota.filename}.md`;
    folder = `${this.infoSubsistema.folder}/${this.nota.titulo}/`;
    await FieldHandlerUtils.crearCarpeta(folder);
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    debugger;
    try {
      if (existe instanceof import_obsidian36.TFile) {
        let nombreFile = newName == null ? void 0 : newName.split("/");
        let borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [
            true,
            false
          ],
          true,
          `\xBF${nombreFile.pop()} ya existe. Que deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian36.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            return true;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian36.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          return true;
        }
      }
    } catch (error) {
      console.error(error);
      throw error;
    }
  }
  async getDescripcion() {
    const descripcion = await this.prompt(`Descripci\xF3n del ${this.infoSubsistema.typeName}:`, "", false, true);
    this.nota.descripcion = descripcion;
    return descripcion;
  }
  async getAliases() {
    this.nota.aliases = [];
    this.nota.aliases.push(`${this.infoSubsistema.type}/${this.nota.trimestre}/${this.nota.titulo}`);
    this.nota.aliases.push(`${this.infoSubsistema.type}/${this.nota.grupo}/${this.nota.trimestre}/${this.nota.titulo}`);
    return this.nota.aliases;
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Estructura/nodoAreaVidaFieldHandler.ts
var import_obsidian37 = require("obsidian");
var nodoAreaVidaFieldHandler = class extends NoteFieldHandlerBase {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
    this.pathCampos = this.plugin.settings.file_camposCentral + ".md";
  }
  async getId() {
    let maxId = 0;
    const files = app.vault.getMarkdownFiles();
    let registrosExistentes = files.filter((file) => file.path.startsWith(this.infoSubsistema.folder));
    registrosExistentes.forEach((file) => {
      var _a;
      const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if (metadata && metadata.id && !isNaN(metadata.id) && metadata.type && metadata.type === this.infoSubsistema.type) {
        const id = parseInt(metadata.id);
        if (id > maxId)
          maxId = id;
      }
    });
  }
  async getRename() {
    debugger;
    const file = this.tp.file.config.target_file;
    const partes = file.basename.split(" - ");
    this.nota.grupo = partes[0];
    this.nota.areaVida = partes[1];
    const fullPath = file.path;
    const directoryPath = fullPath.substring(0, fullPath.lastIndexOf("/") + 1);
    const fileName = `${directoryPath}${partes[1]}.md`;
    debugger;
    let newName, folder;
    const existe = app.vault.getAbstractFileByPath(fileName);
    debugger;
    try {
      if (existe instanceof import_obsidian37.TFile) {
        let nombreFile = newName == null ? void 0 : newName.split("/");
        let borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [
            true,
            false
          ],
          true,
          `\xBF${nombreFile.pop()} ya existe. Que deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian37.TFile) {
            await app.vault.rename(file, fileName);
            console.log("Archivo renombrado con \xE9xito.");
            return true;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian37.TFile) {
          await app.vault.rename(file, fileName);
          console.log("Archivo renombrado con \xE9xito.");
          return true;
        }
      }
    } catch (error) {
      console.error(error);
      throw error;
    }
  }
  async getNota() {
    return this.nota;
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/ObjCompassAnualFieldHandler.ts
var import_obsidian38 = require("obsidian");
var ObjCompassAnualFieldHandler = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  async getEstado() {
    return "\u{1F7E1}";
  }
  async getAreaVida() {
    let areaVida;
    if (!this.nota.asuntoDefinido) {
      let nombreArchivo = this.infoSubsistema.fileName;
      const regex = /Objetivo para (.+)\.md$/;
      const resultado = nombreArchivo.match(regex);
      if (resultado && resultado[1]) {
        areaVida = resultado[1];
      } else {
        return null;
      }
      this.nota.areaVida = areaVida;
      return areaVida;
    } else {
      return this.nota.areaVida;
    }
  }
  async getTitulo() {
    let titulo;
    titulo = await this.prompt(`Cual es tu objetivo en ${this.nota.a\u00F1o} para ${this.nota.areaVida}?`, `Voy a `, true, true);
    if (titulo === null) {
      new Notice("Creaci\xF3n de nota cancelada por el usuario.");
      return;
    }
    this.nota.titulo = titulo;
    return titulo;
  }
  async getA\u00F1o() {
    let suggester = this.tp.system.static_functions.get("suggester");
    let tipoSistema = this.infoSubsistema.type;
    let nombreSistema = this.infoSubsistema.typeName;
    let a\u00F1o;
    let a\u00F1os = await FieldHandlerUtils.findMainFilesWithState("AY", null, this.plugin);
    let nombreArchivo = this.infoSubsistema.fileName;
    const regex = /\/(\d{4})/;
    const resultado = nombreArchivo.match(regex);
    if (resultado && resultado[1]) {
      a\u00F1o = resultado[1];
    } else {
      return null;
    }
    if (a\u00F1o === null) {
      new Notice("Creaci\xF3n cancelada por el usuario.");
      return;
    }
    this.nota.a\u00F1o = a\u00F1o;
    return a\u00F1o;
  }
  async getDescripcion() {
    const descripcion = await this.prompt(`\xBFQuieres agregar detalles de tu objetivo?`, "", false, true);
    this.nota.descripcion = descripcion;
    return descripcion;
  }
  async getTrimestre() {
    let trimestre;
    let trimestres = await FieldHandlerUtils.findMainFilesWithState("TQ", null, this.plugin);
    trimestre = await this.suggester(
      ["Q1", "Q2", "Q3", "Q4"],
      [
        `${this.nota.a\u00F1o}-Q1`,
        `${this.nota.a\u00F1o}-Q2`,
        `${this.nota.a\u00F1o}-Q3`,
        `${this.nota.a\u00F1o}-Q4`
      ],
      true,
      `\xBFEn qu\xE9 trimestre del ${this.nota.a\u00F1o} consideras que se puede realizar ese objetivo?`
    );
    if (trimestre === null) {
      new Notice("Modificaci\xF3n de nota cancelada por el usuario.");
      return;
    }
    this.nota.trimestre = trimestre;
    return trimestre;
  }
  async getAliases() {
    this.nota.aliases = [];
    this.nota.aliases.push(`${this.infoSubsistema.type}/${this.nota.a\u00F1o}/${this.nota.id}`);
    this.nota.aliases.push(`${this.infoSubsistema.type}/${this.nota.a\u00F1o}/${this.nota.areaVida}/${this.nota.id}`);
    this.nota.aliases.push(`${this.infoSubsistema.type}/${this.nota.titulo}`);
    return this.nota.aliases;
  }
  async getRename() {
    let folder = `${this.infoSubsistema.folder}/${this.nota.a\u00F1o}`;
    const newName = `${this.infoSubsistema.folder}/${this.nota.a\u00F1o}/${this.infoSubsistema.type} - ${this.nota.id}.md`;
    await FieldHandlerUtils.crearCarpeta(folder);
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    try {
      if (existe instanceof import_obsidian38.TFile) {
        const nombreFile = newName.split("/");
        const borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [true, false],
          true,
          `\xBF${nombreFile.pop()} ya existe. Qu\xE9 deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian38.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            return newName;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian38.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          return newName;
        }
      }
    } catch (error) {
      console.error("Error al cambiar el nombre", error);
      throw error;
    }
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/CompassPlaneacionAnual_FH.ts
var import_obsidian39 = require("obsidian");
var CompassPlaneacionAnual_FH = class extends NoteFieldHandlerBase {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  async getA\u00F1o() {
    let nombreSistema = this.infoSubsistema.typeName;
    let a\u00F1o;
    let a\u00F1os = await FieldHandlerUtils.findMainFilesWithState("AY", null, this.plugin);
    a\u00F1o = await this.suggester(a\u00F1os.map((b) => b.file.basename), a\u00F1os.map((b) => b.file.basename), false, `Selecciona el a\xF1o que deseas para el ${nombreSistema}:`);
    if (a\u00F1o === null) {
      new import_obsidian39.Notice("Creaci\xF3n cancelada por el usuario.");
      return;
    }
    this.nota.a\u00F1o = a\u00F1o;
    return a\u00F1o;
  }
  async getNota() {
    return this.nota;
  }
  async getAliases() {
    this.nota.aliases = [];
    this.nota.aliases.push(`${this.infoSubsistema.typeName}/${this.nota.a\u00F1o}`);
    this.nota.aliases.push(`${this.infoSubsistema.typeName}/${this.nota.id}`);
    return this.nota.aliases;
  }
  async getRename() {
    let folder = `${this.infoSubsistema.folder}/${this.nota.a\u00F1o}`;
    const newName = `${this.infoSubsistema.folder}/${this.nota.a\u00F1o}/Planeaci\xF3n ${this.nota.a\u00F1o}.md`;
    await FieldHandlerUtils.crearCarpeta(folder);
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    try {
      if (existe instanceof import_obsidian39.TFile) {
        const nombreFile = newName.split("/");
        const borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [true, false],
          true,
          `\xBF${nombreFile.pop()} ya existe. Qu\xE9 deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian39.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            return newName;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian39.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          return newName;
        }
      }
    } catch (error) {
      console.error("Error al cambiar el nombre", error);
      throw error;
    }
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/RepositorioLibros_FH.ts
var import_obsidian40 = require("obsidian");
var RepositorioLibros_FH = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  async getDescripcion() {
    const descripcion = await this.prompt(`\xBFPorque est\xE1s agregando este libro?:`, "", false, true);
    this.nota.descripcion = descripcion;
    return descripcion;
  }
  async getEstado() {
    let estado;
    estado = await this.suggester(["\u{1F535} -> Para Archivo - Leido", "\u{1F7E2} -> En Lectura - Comprado", "\u{1F7E1} -> Por Adquirir", "\u{1F534} -> Cancelado"], ["\u{1F535}", "\u{1F7E2}", "\u{1F7E1}", "\u{1F534}"], false, `En que estado est\xE1 este libro?`);
    if (estado === null) {
      new import_obsidian40.Notice("Creaci\xF3n de Libro cancelada por el usuario.");
      return;
    }
    return estado;
  }
  async getTitulo() {
    const titulo = this.infoSubsistema.titulo;
    this.nota.titulo = titulo;
    return titulo;
  }
  async getAsunto() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q;
    let padres = [];
    let activo = this.infoSubsistema.activo;
    let siAsunto = false;
    let nombre = "";
    let nota;
    if (activo != null) {
      nombre = activo.basename;
      nota = app.metadataCache.getFileCache(activo);
      nota.frontmatter = nota.frontmatter || {};
      nota.frontmatter.file = {};
      Object.assign(nota.frontmatter.file, activo);
      padres.unshift(nombre);
      siAsunto = await this.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
      if (siAsunto) {
        debugger;
        this.nota.asuntoDefinido = true;
        let nivel;
        switch ((_a = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _a.type) {
          default:
          case "PGTD":
          case "PQ":
            if (((_b = nota.frontmatter) == null ? void 0 : _b.type) === "PQ") {
              this.nota.proyectoQ = nombre;
              this.nota.proyectoGTD = "";
              if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if (nota.frontmatter.proyectoGTD) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else if (((_c = nota.frontmatter) == null ? void 0 : _c.type) === "PGTD") {
              this.nota.proyectoGTD = [nombre];
              if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                this.nota.proyectoGTD = this.nota.proyectoGTD.concat(nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
              } else if (nota.frontmatter.proyectoGTD) {
                this.nota.proyectoGTD.push(nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
              }
              this.nota.proyectoQ = "";
              if (Array.isArray(nota.frontmatter.proyectoQ)) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if (nota.frontmatter.proyectoQ) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.proyectoQ = "";
              if (Array.isArray((_d = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _d.proyectoQ)) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if ((_e = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _e.proyectoQ) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
              }
              this.nota.proyectoGTD = "";
              if (Array.isArray((_f = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _f.proyectoGTD)) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if ((_g = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _g.proyectoGTD) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            }
            this.nota.areaInteres = [];
            if (Array.isArray((_h = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _h.areaInteres)) {
              this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
            } else {
              if ((_i = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _i.areaInteres) {
                this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
              }
            }
            this.nota.areaVida = "";
            if ((_j = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _j.areaVida) {
              if (Array.isArray(nota.frontmatter.areaVida)) {
                this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
              } else if (typeof nota.frontmatter.areaVida === "string") {
                this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.areaVida = "No es de ning\xFAn Area de Vida";
            }
            if (!isNaN(parseInt((_k = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _k.nivelP))) {
              nivel = parseInt(nota.frontmatter.nivelP) + 1;
            } else {
              nivel = 0;
            }
            this.nota.nivelP = nivel;
            break;
          case "AI":
            debugger;
            if (((_l = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _l.type) === "AI") {
              this.nota.areaInteres = [nota.frontmatter.file.basename];
            }
            if (Array.isArray((_m = nota.frontmatter) == null ? void 0 : _m.areaInteres)) {
              this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
            } else {
              if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
                this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else {
              }
            }
          case "AV":
            if ((_n = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _n.areaVida) {
              if (Array.isArray(nota.frontmatter.areaVida)) {
                this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
              } else if (typeof nota.frontmatter.areaVida === "string") {
                this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.areaVida = "No es de ning\xFAn Area de Vida";
            }
            if (((_o = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _o.type) === "AI" || ((_p = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _p.type) === "AV") {
              siAsunto = false;
            }
            if (!isNaN(parseInt((_q = nota.frontmatter) == null ? void 0 : _q.nivelP))) {
              nivel = parseInt(nota.frontmatter.nivelP) + 1;
            } else {
              nivel = 0;
            }
            this.nota.nivelP = nivel;
            break;
        }
      } else {
      }
    } else {
      siAsunto = false;
    }
    return { siAsunto, nombre: padres };
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/Biblioteca_FH.ts
var import_obsidian41 = require("obsidian");
var Biblioteca_FH = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  async getParametrosLibro() {
    let archivoActivo = app.workspace.getActiveFile();
    if (!archivoActivo) {
      console.error("No se pudo obtener el archivo activo.");
      return null;
    }
    debugger;
    const campos = ["id", "titulo", "autor", "publisher", "publicado", "paginas", "isbn10", "isbn13"];
    let parametros = {};
    for (let campo of campos) {
      let valorCampo = await this.getFrontmatterField(archivoActivo.path, campo);
      this.nota[campo] = valorCampo;
      parametros[campo] = valorCampo;
    }
    return parametros;
  }
  async getFrontmatterField(file, field) {
    try {
      const tFile = app.vault.getAbstractFileByPath(file);
      if (tFile instanceof import_obsidian41.TFile) {
        const cache = app.metadataCache.getFileCache(tFile);
        const frontmatter = cache == null ? void 0 : cache.frontmatter;
        if (frontmatter && frontmatter.hasOwnProperty(field)) {
          const fieldValue = frontmatter[field];
          return fieldValue !== void 0 && fieldValue !== null && fieldValue !== "" ? fieldValue : null;
        } else {
          console.log(`El campo '${field}' no existe en el frontmatter.`);
          return null;
        }
      } else {
        console.error("El archivo no existe o no es un archivo de texto.");
        return null;
      }
    } catch (err) {
      console.error("Error al consultar el frontmatter", err);
      return null;
    }
  }
  async getFormato() {
    let campo;
    campo = await this.suggester(["Kindle", "Google Books", "PDF", "F\xEDsico"], ["Kindle", "Google Books", "PDF", "F\xEDsico"], false, `\xBFComo tienes este libro?`);
    if (campo === null) {
      new import_obsidian41.Notice("Creaci\xF3n de Libro cancelada por el usuario.");
      return;
    }
    return campo;
  }
  async getPaginas() {
    let campo, paginas;
    campo = await this.suggester(["Si", "No"], [true, false], false, `\xBFEl libro tiene ${this.nota.paginas} p\xE1ginas?`);
    if (campo === null) {
      new import_obsidian41.Notice("Creaci\xF3n de Libro cancelada por el usuario.");
      return;
    } else if (campo === false) {
      paginas = await this.prompt(`Cuantas p\xE1ginas tiene el libro?`, "", false, false);
      this.nota.paginas = paginas;
      return paginas;
    }
    return this.nota.paginas;
  }
  async getAsunto() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q;
    let padres = [];
    let activo = app.workspace.getActiveFile();
    let siAsunto = false;
    let nombre = "";
    let nota;
    if (activo != null) {
      nombre = activo.basename;
      nota = app.metadataCache.getFileCache(activo);
      nota.frontmatter = nota.frontmatter || {};
      nota.frontmatter.file = {};
      Object.assign(nota.frontmatter.file, activo);
      padres.unshift(nombre);
      siAsunto = true;
      if (siAsunto) {
        debugger;
        this.nota.asuntoDefinido = true;
        let nivel;
        switch ((_a = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _a.type) {
          default:
          case "PGTD":
          case "PQ":
            if (((_b = nota.frontmatter) == null ? void 0 : _b.type) === "PQ") {
              this.nota.proyectoQ = nombre;
              this.nota.proyectoGTD = "";
              if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if (nota.frontmatter.proyectoGTD) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else if (((_c = nota.frontmatter) == null ? void 0 : _c.type) === "PGTD") {
              this.nota.proyectoGTD = [nombre];
              if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                this.nota.proyectoGTD = this.nota.proyectoGTD.concat(nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
              } else if (nota.frontmatter.proyectoGTD) {
                this.nota.proyectoGTD.push(nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
              }
              this.nota.proyectoQ = "";
              if (Array.isArray(nota.frontmatter.proyectoQ)) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if (nota.frontmatter.proyectoQ) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.proyectoQ = "";
              if (Array.isArray((_d = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _d.proyectoQ)) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if ((_e = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _e.proyectoQ) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
              }
              this.nota.proyectoGTD = "";
              if (Array.isArray((_f = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _f.proyectoGTD)) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if ((_g = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _g.proyectoGTD) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            }
            this.nota.areaInteres = [];
            if (Array.isArray((_h = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _h.areaInteres)) {
              this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
            } else {
              if ((_i = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _i.areaInteres) {
                this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
              }
            }
            this.nota.areaVida = "";
            if ((_j = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _j.areaVida) {
              if (Array.isArray(nota.frontmatter.areaVida)) {
                this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
              } else if (typeof nota.frontmatter.areaVida === "string") {
                this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.areaVida = "No es de ning\xFAn Area de Vida";
            }
            if (!isNaN(parseInt((_k = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _k.nivelP))) {
              nivel = parseInt(nota.frontmatter.nivelP) + 1;
            } else {
              nivel = 0;
            }
            this.nota.nivelP = nivel;
            break;
          case "AI":
            debugger;
            if (((_l = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _l.type) === "AI") {
              this.nota.areaInteres = [nota.frontmatter.file.basename];
            }
            if (Array.isArray((_m = nota.frontmatter) == null ? void 0 : _m.areaInteres)) {
              this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
            } else {
              if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
                this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else {
              }
            }
          case "AV":
            if ((_n = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _n.areaVida) {
              if (Array.isArray(nota.frontmatter.areaVida)) {
                this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
              } else if (typeof nota.frontmatter.areaVida === "string") {
                this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.areaVida = "No es de ning\xFAn Area de Vida";
            }
            if (((_o = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _o.type) === "AI" || ((_p = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _p.type) === "AV") {
              siAsunto = false;
            }
            if (!isNaN(parseInt((_q = nota.frontmatter) == null ? void 0 : _q.nivelP))) {
              nivel = parseInt(nota.frontmatter.nivelP) + 1;
            } else {
              nivel = 0;
            }
            this.nota.nivelP = nivel;
            break;
        }
      } else {
      }
    } else {
      siAsunto = false;
    }
    return { siAsunto, nombre: padres };
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Journals/Anual_FH.ts
var import_obsidian42 = require("obsidian");
init_luxon();
var Anual_FH = class extends NoteFieldHandlerBase {
  constructor(tp, infoSubsistema, plugin) {
    super(tp, infoSubsistema, plugin);
  }
  /**
   * Genera un UUID para el ID de la nota
   */
  async getId() {
    this.nota.id = this.generateUUID();
    return this.nota.id;
  }
  /**
   * Obtiene la fecha actual en formato ISO
   */
  async getFecha() {
    this.nota.fecha = DateTime.now().toISODate();
    return this.nota.fecha;
  }
  /**
   * Permite seleccionar el año para la nota anual
   * Muestra años disponibles (no ocupados) en un rango de -3 a +3 del año actual
   */
  async getA\u00F1o() {
    const currentYear = DateTime.now().year;
    const years = Array.from({ length: 7 }, (_, i) => currentYear - 3 + i);
    const existingYears = await this.getExistingYears();
    const availableYears = years.filter((year2) => !existingYears.includes(year2.toString()));
    if (availableYears.length === 0) {
      new import_obsidian42.Notice("No hay a\xF1os disponibles en el rango seleccionado.");
      throw new Error("No hay a\xF1os disponibles");
    }
    const year = await this.suggester(
      availableYears.map(String),
      availableYears.map(String),
      false,
      "Selecciona el a\xF1o:"
    );
    if (year === null) {
      new import_obsidian42.Notice("Selecci\xF3n de a\xF1o cancelada por el usuario.");
      throw new Error("Selecci\xF3n cancelada");
    }
    this.nota.a\u00F1o = year;
    return year;
  }
  /**
   * Establece el estado inicial como activo
   */
  async getEstado() {
    this.nota.estado = "\u{1F7E2}";
    return this.nota.estado;
  }
  /**
   * Renombra el archivo según el año seleccionado
   */
  async getRename() {
    await this.crearCarpeta(this.infoSubsistema.folder);
    const newName = `${this.infoSubsistema.folder}/${this.nota.a\u00F1o}.md`;
    const file = this.tp.file.config.target_file;
    const exists = app.vault.getAbstractFileByPath(newName);
    if (exists instanceof import_obsidian42.TFile) {
      const overwrite = await this.suggester(
        ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
        [true, false],
        true,
        `El archivo ${newName} ya existe. \xBFQu\xE9 deseas hacer?`
      );
      if (overwrite) {
        await app.vault.delete(exists);
        if (file instanceof import_obsidian42.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          const nuevoArchivo = app.vault.getAbstractFileByPath(newName);
          if (nuevoArchivo instanceof import_obsidian42.TFile) {
            await app.workspace.getLeaf(true).openFile(nuevoArchivo);
          }
          return true;
        }
      } else {
        console.log("Cancelando la creaci\xF3n del archivo.");
        throw new Error("Proceso cancelado por el usuario.");
      }
    } else {
      if (file instanceof import_obsidian42.TFile) {
        await app.vault.rename(file, newName);
        console.log("Archivo renombrado con \xE9xito.");
        const nuevoArchivo = app.vault.getAbstractFileByPath(newName);
        if (nuevoArchivo instanceof import_obsidian42.TFile) {
          await app.workspace.getLeaf(true).openFile(nuevoArchivo);
        }
        return true;
      }
    }
  }
  /**
   * Retorna el objeto nota completo
   */
  async getNota() {
    return this.nota;
  }
  /**
   * Genera un UUID único para la nota
   */
  generateUUID() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
      const r = Math.random() * 16 | 0;
      const v = c === "x" ? r : r & 3 | 8;
      return v.toString(16);
    });
  }
  /**
   * Obtiene los años que ya tienen notas anuales
   */
  async getExistingYears() {
    const files = app.vault.getMarkdownFiles();
    const yearFiles = files.filter((file) => file.path.startsWith(this.infoSubsistema.folder));
    const years = yearFiles.map((file) => file.basename);
    return years;
  }
  /**
   * Crea la carpeta si no existe
   */
  async crearCarpeta(folderPath) {
    try {
      const existingFolder = app.vault.getAbstractFileByPath(folderPath);
      if (existingFolder) {
        console.log(`La carpeta '${folderPath}' ya existe.`);
        return;
      }
      await app.vault.createFolder(folderPath);
      console.log(`Carpeta '${folderPath}' creada exitosamente.`);
    } catch (error) {
      console.error(`Error al crear la carpeta '${folderPath}':`, error);
    }
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Journals/TrimestralFieldHandler.ts
var import_obsidian43 = require("obsidian");
init_luxon();
var TrimestralFieldHandler = class extends NoteFieldHandlerBase {
  constructor(tp, infoSubsistema, plugin) {
    super(tp, infoSubsistema, plugin);
  }
  /**
   * Genera un UUID para el ID de la nota
   */
  async getId() {
    this.nota.id = this.generateUUID();
    return this.nota.id;
  }
  /**
   * Obtiene la fecha actual en formato ISO
   */
  async getFecha() {
    this.nota.fecha = DateTime.now().toISODate();
    return this.nota.fecha;
  }
  /**
   * Permite seleccionar el trimestre para la nota
   * Muestra solo los trimestres disponibles (no utilizados)
   */
  async getTrimestre() {
    const trimestres = ["Q1", "Q2", "Q3", "Q4"];
    const existingTrimestres = await this.getExistingTrimestres();
    const availableTrimestres = trimestres.filter((q) => !existingTrimestres.includes(q));
    if (availableTrimestres.length === 0) {
      new import_obsidian43.Notice("Todos los trimestres ya han sido creados en esta carpeta.");
      throw new Error("No hay trimestres disponibles");
    }
    const trimestre = await this.suggester(
      availableTrimestres,
      availableTrimestres,
      false,
      "Selecciona el trimestre:"
    );
    if (trimestre === null) {
      new import_obsidian43.Notice("Selecci\xF3n de trimestre cancelada por el usuario.");
      throw new Error("Selecci\xF3n cancelada");
    }
    this.nota.trimestre = trimestre;
    return trimestre;
  }
  /**
   * Establece el estado inicial como activo
   */
  async getEstado() {
    this.nota.estado = "\u{1F7E2}";
    return this.nota.estado;
  }
  /**
   * Renombra el archivo según el trimestre seleccionado
   */
  async getRename() {
    await this.crearCarpeta(this.infoSubsistema.folder);
    const newName = `${this.infoSubsistema.folder}/${this.nota.trimestre}.md`;
    const file = this.tp.file.config.target_file;
    const exists = app.vault.getAbstractFileByPath(newName);
    if (exists instanceof import_obsidian43.TFile) {
      const overwrite = await this.suggester(
        ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
        [true, false],
        true,
        `El archivo ${newName} ya existe. \xBFQu\xE9 deseas hacer?`
      );
      if (overwrite) {
        await app.vault.delete(exists);
        if (file instanceof import_obsidian43.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          const nuevoArchivo = app.vault.getAbstractFileByPath(newName);
          if (nuevoArchivo instanceof import_obsidian43.TFile) {
            await app.workspace.getLeaf(true).openFile(nuevoArchivo);
          }
          return true;
        }
      } else {
        console.log("Cancelando la creaci\xF3n del archivo.");
        throw new Error("Proceso cancelado por el usuario.");
      }
    } else {
      if (file instanceof import_obsidian43.TFile) {
        await app.vault.rename(file, newName);
        console.log("Archivo renombrado con \xE9xito.");
        const nuevoArchivo = app.vault.getAbstractFileByPath(newName);
        if (nuevoArchivo instanceof import_obsidian43.TFile) {
          await app.workspace.getLeaf(true).openFile(nuevoArchivo);
        }
        return true;
      }
    }
  }
  /**
   * Retorna el objeto nota completo
   */
  async getNota() {
    return this.nota;
  }
  /**
   * Genera un UUID único para la nota
   */
  generateUUID() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
      const r = Math.random() * 16 | 0;
      const v = c === "x" ? r : r & 3 | 8;
      return v.toString(16);
    });
  }
  /**
   * Obtiene los trimestres que ya tienen notas trimestrales
   */
  async getExistingTrimestres() {
    const files = app.vault.getMarkdownFiles();
    const trimestreFiles = files.filter((file) => file.path.startsWith(this.infoSubsistema.folder));
    const trimestres = trimestreFiles.map((file) => file.basename);
    return trimestres;
  }
  /**
   * Crea la carpeta si no existe
   */
  async crearCarpeta(folderPath) {
    try {
      const existingFolder = app.vault.getAbstractFileByPath(folderPath);
      if (existingFolder) {
        console.log(`La carpeta '${folderPath}' ya existe.`);
        return;
      }
      await app.vault.createFolder(folderPath);
      console.log(`Carpeta '${folderPath}' creada exitosamente.`);
    } catch (error) {
      console.error(`Error al crear la carpeta '${folderPath}':`, error);
    }
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/CampañasFieldHandler.ts
var import_obsidian44 = require("obsidian");
init_luxon();
var Campa\u00F1asFieldHandler = class extends NoteFieldHandler {
  constructor(tp, folder, plugin) {
    super(tp, folder, plugin);
  }
  // Obtiene el trimestre de la campaña desde las notas de trimestres existentes
  async getTrimestre() {
    let trimestres = await FieldHandlerUtils.findMainFilesWithState("TQ", null, this.plugin);
    const trimestre = await this.suggester(
      trimestres.map((b) => b.file.basename),
      trimestres.map((b) => b.file.basename),
      false,
      "Trimestre al que pertenece esta campa\xF1a:"
    );
    if (trimestre === null) {
      new import_obsidian44.Notice("Selecci\xF3n de trimestre cancelada.");
      return;
    }
    this.nota.trimestre = `[[${trimestre}]]`;
    return this.nota.trimestre;
  }
  // Obtiene el estado de la campaña (status)
  async getStatus() {
    const estados = [
      "Pendiente",
      "Planificando",
      "Dise\xF1o",
      "Revisi\xF3n Interna",
      "Revisi\xF3n Cliente",
      "Publicando",
      "Recoger Indicadores",
      "En pausa",
      "Terminado",
      "Cancelado"
    ];
    const status = await this.suggester(
      estados,
      estados,
      false,
      "Estado actual de la campa\xF1a:"
    );
    if (status === null) {
      new import_obsidian44.Notice("Selecci\xF3n de estado cancelada.");
      return;
    }
    this.nota.status = status;
    return status;
  }
  // Obtiene la fecha de inicio de la campaña
  async getFechaInicio() {
    const fechaActual = DateTime.now().toFormat("yyyy-MM-dd");
    const prompt = this.tp.system.static_functions.get("prompt");
    const fechaInicio = await prompt(
      "Fecha de inicio de la campa\xF1a (YYYY-MM-DD):",
      fechaActual,
      true
    );
    if (fechaInicio === null) {
      new import_obsidian44.Notice("Selecci\xF3n de fecha de inicio cancelada.");
      return;
    }
    this.nota.fechaInicio = fechaInicio;
    return fechaInicio;
  }
  // Obtiene la fecha de fin de la campaña
  async getFechaFin() {
    const fechaInicioObj = this.nota.fechaInicio ? DateTime.fromFormat(this.nota.fechaInicio, "yyyy-MM-dd") : DateTime.now();
    const fechaSugerida = fechaInicioObj.plus({ days: 30 }).toFormat("yyyy-MM-dd");
    const prompt = this.tp.system.static_functions.get("prompt");
    const fechaFin = await prompt(
      "Fecha de fin de la campa\xF1a (YYYY-MM-DD):",
      fechaSugerida,
      true
    );
    if (fechaFin === null) {
      new import_obsidian44.Notice("Selecci\xF3n de fecha de fin cancelada.");
      return;
    }
    this.nota.fechaFin = fechaFin;
    return fechaFin;
  }
  // Obtiene la prioridad de la campaña
  async getPrioridad() {
    const prioridades = ["Baja", "Media", "Alta"];
    const prioridad = await this.suggester(
      prioridades,
      prioridades,
      false,
      "Prioridad de la campa\xF1a:"
    );
    if (prioridad === null) {
      new import_obsidian44.Notice("Selecci\xF3n de prioridad cancelada.");
      return;
    }
    this.nota.prioridad = prioridad;
    return prioridad;
  }
  // Obtiene la URL de los indicadores
  async getIndicadores() {
    const prompt = this.tp.system.static_functions.get("prompt");
    const indicadores = await prompt(
      "URL de los indicadores de la campa\xF1a:",
      "https://",
      true
    );
    if (indicadores === null) {
      new import_obsidian44.Notice("Ingreso de URL de indicadores cancelado.");
      return;
    }
    this.nota.indicadores = indicadores;
    return indicadores;
  }
  // Sobrescribe la función getAliases para ajustarla a los requerimientos específicos
  async getAliases() {
    this.nota.aliases = [];
    this.nota.aliases.push(this.nota.titulo);
    this.nota.aliases.push(`CP-${this.nota.titulo}`);
    this.nota.aliases.push(`CP-${this.nota.id}`);
    return this.nota.aliases;
  }
  // Implementación de getRename para la estructura de carpetas basada en trimestres
  // Implementación de getRename para la estructura de carpetas basada en trimestres
  async getRename() {
    const trimestreMatch = this.nota.trimestre.match(/\[\[(.*?)\]\]/);
    const trimestre = trimestreMatch ? trimestreMatch[1] : "Sin-Trimestre";
    const basePath = "Subsistemas/Marketing/Proyectos";
    const folderPath = `${basePath}/${trimestre}`;
    await FieldHandlerUtils.crearCarpeta(folderPath);
    const newName = `${folderPath}/${this.nota.titulo}.md`;
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    try {
      if (existe instanceof import_obsidian44.TFile) {
        const nombreFile = newName.split("/");
        const borrar = await this.suggester(
          ["Sobreescribir Archivo Actual", "Detener creaci\xF3n del archivo."],
          [true, false],
          true,
          `\xBF${nombreFile.pop()} ya existe. Qu\xE9 deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian44.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            const nuevoArchivo = app.vault.getAbstractFileByPath(newName);
            if (nuevoArchivo instanceof import_obsidian44.TFile) {
              await app.workspace.getLeaf(true).openFile(nuevoArchivo);
            }
            return newName;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian44.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          const nuevoArchivo = app.vault.getAbstractFileByPath(newName);
          if (nuevoArchivo instanceof import_obsidian44.TFile) {
            await app.workspace.getLeaf(true).openFile(nuevoArchivo);
          }
          return newName;
        }
      }
    } catch (error) {
      console.error("Error al cambiar el nombre", error);
      throw error;
    }
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/EntregableFieldHandler.ts
var import_obsidian49 = require("obsidian");
init_seleccionModal();
init_seleccionModalTareas();
init_fuzzySelectOrCreate();

// src/modules/modales/seleccionMultipleModal.ts
var import_obsidian45 = require("obsidian");
var SeleccionMultipleModal = class extends import_obsidian45.Modal {
  constructor(app2, opciones, titulo) {
    super(app2);
    this.checkboxes = [];
    this.opciones = opciones;
    this.titleEl.setText(titulo);
  }
  onOpen() {
    const { contentEl } = this;
    const contenedor = contentEl.createEl("div", { cls: "seleccion-multiple-container" });
    this.opciones.forEach((opcion) => {
      const wrapper = contenedor.createEl("div", { cls: "checkbox-wrapper" });
      const checkbox = wrapper.createEl("input", {
        type: "checkbox",
        attr: { id: `opcion-${opcion.nombre}` }
      });
      checkbox.checked = opcion.seleccionado;
      this.checkboxes.push(checkbox);
      wrapper.createEl("label", {
        text: opcion.nombre,
        attr: { for: `opcion-${opcion.nombre}` }
      });
    });
    const botonesContainer = contentEl.createEl("div", { cls: "modal-button-container" });
    const seleccionarTodosBtn = botonesContainer.createEl("button", { text: "Seleccionar todos" });
    seleccionarTodosBtn.addEventListener("click", () => {
      this.checkboxes.forEach((cb) => cb.checked = true);
    });
    const deseleccionarTodosBtn = botonesContainer.createEl("button", { text: "Deseleccionar todos" });
    deseleccionarTodosBtn.addEventListener("click", () => {
      this.checkboxes.forEach((cb) => cb.checked = false);
    });
    const confirmarBtn = contentEl.createEl("button", {
      text: "Confirmar",
      cls: "mod-cta"
    });
    confirmarBtn.addEventListener("click", () => {
      this.confirmarSeleccion();
    });
    contentEl.createEl("style", {
      text: `
                .seleccion-multiple-container {
                    margin-bottom: 1rem;
                    max-height: 300px;
                    overflow-y: auto;
                    padding: 10px;
                }
                .checkbox-wrapper {
                    display: flex;
                    align-items: center;
                    margin-bottom: 8px;
                }
                .checkbox-wrapper label {
                    margin-left: 8px;
                }
                .modal-button-container {
                    display: flex;
                    justify-content: space-between;
                    margin-bottom: 1rem;
                }
                button.mod-cta {
                    display: block;
                    width: 100%;
                    margin-top: 1rem;
                }
            `
    });
  }
  confirmarSeleccion() {
    const seleccionados = [];
    this.checkboxes.forEach((checkbox, index) => {
      if (checkbox.checked) {
        seleccionados.push(this.opciones[index].nombre);
      }
    });
    if (seleccionados.length === 0) {
      new import_obsidian45.Notice("Debes seleccionar al menos un canal");
      return;
    }
    this.close();
    this.resolver(seleccionados);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  openAndAwaitSelection() {
    return new Promise((resolve) => {
      this.resolver = resolve;
      this.open();
    });
  }
};

// src/modules/modales/spinnerModal.ts
var import_obsidian46 = require("obsidian");
var SpinnerModal = class extends import_obsidian46.Modal {
  constructor(app2, initialValue = 1, max = 100) {
    super(app2);
    this.resolver = null;
    this.numberDisplay = null;
    const min = 1;
    this.initialValue = Math.max(min, Math.min(max, initialValue));
    this.currentValue = this.initialValue;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.addClass("number-selector-modal");
    const container = contentEl.createDiv({ cls: "number-selector-container" });
    container.createEl("h2", { text: "\xBFCu\xE1ntos Hits representa este entregable?" });
    const controlsContainer = container.createDiv({ cls: "controls-container" });
    const decrementBtn = controlsContainer.createEl("button", {
      text: "\u25B2",
      cls: "increment-btn"
    });
    decrementBtn.addEventListener("click", () => this.changeValue(1));
    this.numberDisplay = controlsContainer.createEl("div", {
      text: this.currentValue.toString(),
      cls: "number-display"
    });
    const incrementBtn = controlsContainer.createEl("button", {
      text: "\u25BC",
      cls: "decrement-btn"
    });
    incrementBtn.addEventListener("click", () => this.changeValue(-1));
    const confirmBtn = container.createEl("button", {
      text: "Confirmar",
      cls: "confirm-btn"
    });
    confirmBtn.addEventListener("click", () => this.confirm());
    const cancelBtn = container.createEl("button", {
      text: "Cancelar",
      cls: "cancel-btn"
    });
    cancelBtn.addEventListener("click", () => this.cancel());
    const styleEl = document.createElement("style");
    styleEl.innerHTML = `
            .number-selector-modal {
                text-align: center;
                padding: 20px;
            }
            .number-selector-container {
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 15px;
            }
            .controls-container {
                display: flex;
                align-items: center;
                gap: 15px;
            }
            .number-display {
                font-size: 24px;
                font-weight: bold;
                width: 50px;
                text-align: center;
            }
            .increment-btn, .decrement-btn {
                background: none;
                border: 1px solid #ccc;
                padding: 5px 10px;
                cursor: pointer;
            }
            .confirm-btn, .cancel-btn {
                margin: 0 10px;
                padding: 10px 15px;
                cursor: pointer;
            }
        `;
    document.head.appendChild(styleEl);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    if (this.resolver && this.currentValue === null) {
      this.resolver(null);
    }
  }
  changeValue(direction) {
    if (!this.numberDisplay)
      return;
    let newValue = this.currentValue;
    if (direction > 0) {
      if (newValue < 1) {
        if (newValue === 0.33) {
          newValue = 0.5;
        } else if (newValue === 0.5) {
          newValue = 1;
        }
      } else {
        newValue = newValue + 1;
      }
    } else if (direction < 0) {
      if (newValue > 1) {
        newValue = newValue - 1;
      } else if (newValue === 1) {
        newValue = 0.5;
      } else if (newValue === 0.5) {
        newValue = 0.33;
      } else {
        newValue = 0.33;
      }
    }
    this.currentValue = newValue;
    this.numberDisplay.textContent = newValue.toString();
  }
  confirm() {
    if (this.resolver) {
      this.resolver(this.currentValue);
    }
    this.close();
  }
  cancel() {
    if (this.resolver) {
      this.resolver(null);
    }
    this.close();
  }
  openAndAwaitSelection() {
    return new Promise((resolve) => {
      this.resolver = resolve;
      this.open();
    });
  }
};

// src/modules/modales/datePickerModal.ts
var import_obsidian47 = require("obsidian");
init_luxon();
var DatePickerModal = class extends import_obsidian47.Modal {
  constructor(app2, initialDate, format = "yyyy-MM-dd") {
    super(app2);
    this.format = format;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Que d\xEDa se va a publicar la pieza?" });
    this.dateInput = contentEl.createEl("input", { type: "date" });
    if (this.initialDate) {
      const date = DateTime.fromFormat(this.initialDate, this.format);
      this.dateInput.value = date.toISODate();
    } else {
      this.dateInput.value = (/* @__PURE__ */ new Date()).toISOString().split("T")[0];
    }
    const buttonContainer = contentEl.createEl("div", { cls: "button-container" });
    const cancelButton = buttonContainer.createEl("button", { text: "Cancelar" });
    cancelButton.addEventListener("click", () => {
      this.close();
      this.resolver(null);
    });
    const confirmButton = buttonContainer.createEl("button", { text: "Confirmar" });
    confirmButton.addEventListener("click", () => {
      const selectedDate = this.dateInput.value;
      const formattedDate = DateTime.fromISO(selectedDate).toFormat(this.format);
      this.close();
      this.resolver(formattedDate);
    });
    buttonContainer.style.marginTop = "20px";
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "flex-end";
    buttonContainer.style.gap = "10px";
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  waitForInput() {
    return new Promise((resolve) => {
      this.resolver = resolve;
    });
  }
};

// src/modules/modales/pedidosClienteModal.ts
var import_obsidian48 = require("obsidian");
var PedidosClienteModal = class extends import_obsidian48.Modal {
  constructor(app2) {
    super(app2);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("pedidos-cliente-modal");
    this.titleEl.setText("Pedidos al cliente");
    const container = contentEl.createDiv({ cls: "pedidos-cliente-container" });
    container.createEl("h3", { text: "\xBFHay algo que se deba pedir al cliente?" });
    this.textarea = container.createEl("textarea", {
      attr: {
        rows: "6",
        placeholder: "Escribe aqu\xED tus pedidos al cliente..."
      }
    });
    const checkboxContainer = container.createEl("div", { cls: "custom-checkbox-container" });
    this.checkbox = checkboxContainer.createEl("input", {
      attr: {
        type: "checkbox",
        id: "pendientes-checkbox",
        class: "hidden-checkbox"
      }
    });
    const customCheckbox = checkboxContainer.createEl("div", {
      cls: "custom-checkbox"
    });
    const checkboxLabel = checkboxContainer.createEl("label", {
      text: "Marcar como pendiente del cliente",
      attr: {
        for: "pendientes-checkbox",
        class: "checkbox-label"
      }
    });
    this.textarea.addEventListener("input", () => {
      if (this.textarea.value.trim() !== "") {
        this.checkbox.checked = true;
        customCheckbox.classList.add("checked");
      } else {
        this.checkbox.checked = false;
        customCheckbox.classList.remove("checked");
      }
    });
    customCheckbox.addEventListener("click", () => {
      this.checkbox.checked = !this.checkbox.checked;
      if (this.checkbox.checked) {
        customCheckbox.classList.add("checked");
      } else {
        customCheckbox.classList.remove("checked");
      }
    });
    checkboxLabel.addEventListener("click", () => {
      this.checkbox.checked = !this.checkbox.checked;
      if (this.checkbox.checked) {
        customCheckbox.classList.add("checked");
      } else {
        customCheckbox.classList.remove("checked");
      }
    });
    const buttonContainer = container.createEl("div", { cls: "button-container" });
    const cancelarBtn = buttonContainer.createEl("button", {
      text: "Cancelar",
      cls: "mod-secondary"
    });
    cancelarBtn.addEventListener("click", () => this.cancel());
    const confirmarBtn = buttonContainer.createEl("button", {
      text: "Confirmar",
      cls: "mod-cta"
    });
    confirmarBtn.addEventListener("click", () => this.confirm());
    contentEl.createEl("style", {
      text: `
                .pedidos-cliente-modal .pedidos-cliente-container {
                    display: flex;
                    flex-direction: column;
                    gap: 12px;
                    padding: 16px;
                    width: 100%;
                    box-sizing: border-box;
                }
                
                .pedidos-cliente-modal h3 {
                    font-size: 16px;
                    margin: 0 0 8px 0;
                    font-weight: 500;
                }
                
                .pedidos-cliente-modal textarea {
                    width: 100%;
                    min-height: 120px;
                    resize: vertical;
                    padding: 8px;
                    font-size: 14px;
                    line-height: 1.4;
                    border-radius: 4px;
                    margin-bottom: 8px;
                }
                
                /* Estilo para el contenedor del checkbox personalizado */
                .pedidos-cliente-modal .custom-checkbox-container {
                    display: flex;
                    align-items: center;
                    padding: 4px 0;
                    margin-bottom: 8px;
                    cursor: pointer;
                }
                
                /* Ocultar el checkbox real */
                .pedidos-cliente-modal .hidden-checkbox {
                    position: absolute;
                    opacity: 0;
                    cursor: pointer;
                    height: 0;
                    width: 0;
                }
                
                /* Crear un checkbox personalizado */
                .pedidos-cliente-modal .custom-checkbox {
                    width: 18px;
                    height: 18px;
                    border: 1px solid #888;
                    border-radius: 3px;
                    margin-right: 10px;
                    position: relative;
                    flex-shrink: 0;
                    background-color: var(--background-primary, #fff);
                }
                
                /* Estilo para cuando est\xE1 marcado - crear una X */
                .pedidos-cliente-modal .custom-checkbox.checked::before,
                .pedidos-cliente-modal .custom-checkbox.checked::after {
                    content: '';
                    position: absolute;
                    width: 3px;
                    height: 12px;
                    background-color: var(--text-normal, #333);
                    top: 2px;
                }
                
                .pedidos-cliente-modal .custom-checkbox.checked::before {
                    left: 9px;
                    transform: rotate(45deg);
                }
                
                .pedidos-cliente-modal .custom-checkbox.checked::after {
                    left: 9px;
                    transform: rotate(-45deg);
                }
                
                /* Estilo para la etiqueta del checkbox */
                .pedidos-cliente-modal .checkbox-label {
                    font-size: 14px;
                    cursor: pointer;
                    user-select: none;
                    white-space: nowrap;
                }
                
                .pedidos-cliente-modal .button-container {
                    display: flex;
                    gap: 12px;
                    justify-content: flex-end;
                    margin-top: 8px;
                }
                
                .pedidos-cliente-modal .button-container button {
                    padding: 6px 12px;
                    border-radius: 4px;
                    cursor: pointer;
                }
            `
    });
  }
  confirm() {
    const pedidos = this.textarea.value.trim();
    const pendientes = this.checkbox.checked;
    const resolver = this.resolver;
    this.resolver = null;
    this.close();
    resolver({
      pedidos,
      pendientes
    });
  }
  cancel() {
    const resolver = this.resolver;
    this.resolver = null;
    this.close();
    resolver(null);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    if (this.resolver) {
      this.resolver(null);
      this.resolver = null;
    }
  }
  openAndAwaitSelection() {
    return new Promise((resolve) => {
      this.resolver = resolve;
      this.open();
    });
  }
};

// src/modules/noteLifecycleManager/fieldHandlers/FH Subsistemas/EntregableFieldHandler.ts
var EntregableFieldHandler = class extends NoteFieldHandler {
  constructor(tp, infoSubsistema, plugin) {
    super(tp, infoSubsistema, plugin);
  }
  // Sobrescribimos el método getAsunto para manejar NotionID
  async getAsunto() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q;
    let padres = [];
    let activo = app.workspace.getActiveFile();
    let siAsunto = false;
    let nombre = "";
    let nota;
    if (activo != null) {
      nombre = activo.basename;
      nota = app.metadataCache.getFileCache(activo);
      nota.frontmatter = nota.frontmatter || {};
      nota.frontmatter.file = {};
      Object.assign(nota.frontmatter.file, activo);
      padres.unshift(nombre);
      siAsunto = await this.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
      if (siAsunto) {
        this.nota.asuntoDefinido = true;
        let notionID = null;
        for (const key in nota.frontmatter) {
          if (key.startsWith("NotionID-")) {
            notionID = nota.frontmatter[key];
            console.log(`Encontrado NotionID: ${notionID} con clave: ${key}`);
            break;
          }
        }
        if (notionID) {
          this.nota.proyecto = [notionID];
          console.log(`Asignado NotionID al proyecto: ${notionID}`);
        }
        let nivel;
        switch ((_a = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _a.type) {
          default:
          case "PGTD":
          case "PQ":
            if (((_b = nota.frontmatter) == null ? void 0 : _b.type) === "PQ") {
              this.nota.proyectoQ = nombre;
              this.nota.proyectoGTD = "";
              if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if (nota.frontmatter.proyectoGTD) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else if (((_c = nota.frontmatter) == null ? void 0 : _c.type) === "PGTD") {
              this.nota.proyectoGTD = [nombre];
              if (Array.isArray(nota.frontmatter.proyectoGTD)) {
                this.nota.proyectoGTD = this.nota.proyectoGTD.concat(nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
              } else if (nota.frontmatter.proyectoGTD) {
                this.nota.proyectoGTD.push(nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, ""));
              }
              this.nota.proyectoQ = "";
              if (Array.isArray(nota.frontmatter.proyectoQ)) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if (nota.frontmatter.proyectoQ) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.proyectoQ = "";
              if (Array.isArray((_d = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _d.proyectoQ)) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if ((_e = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _e.proyectoQ) {
                this.nota.proyectoQ = nota.frontmatter.proyectoQ.replace(/\[\[\s*|\s*\]\]/g, "");
              }
              this.nota.proyectoGTD = "";
              if (Array.isArray((_f = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _f.proyectoGTD)) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else if ((_g = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _g.proyectoGTD) {
                this.nota.proyectoGTD = nota.frontmatter.proyectoGTD.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            }
            this.nota.areaInteres = [];
            if (Array.isArray((_h = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _h.areaInteres)) {
              this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
            } else {
              if ((_i = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _i.areaInteres) {
                this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
              }
            }
            this.nota.areaVida = "";
            if ((_j = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _j.areaVida) {
              if (Array.isArray(nota.frontmatter.areaVida)) {
                this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
              } else if (typeof nota.frontmatter.areaVida === "string") {
                this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.areaVida = "No es de ning\xFAn Area de Vida";
            }
            if (!isNaN(parseInt((_k = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _k.nivelP))) {
              nivel = parseInt(nota.frontmatter.nivelP) + 1;
            } else {
              nivel = 0;
            }
            this.nota.nivelP = nivel;
            break;
          case "AI":
            if (((_l = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _l.type) === "AI") {
              this.nota.areaInteres = [nota.frontmatter.file.basename];
            }
            if (Array.isArray((_m = nota.frontmatter) == null ? void 0 : _m.areaInteres)) {
              this.nota.areaInteres = this.nota.areaInteres.concat(nota.frontmatter.areaInteres.map((elemento) => elemento.replace(/\[\[\s*|\s*\]\]/g, "")));
            } else {
              if (nota == null ? void 0 : nota.frontmatter.areaInteres) {
                this.nota.areaInteres.push(nota.frontmatter.areaInteres.replace(/\[\[\s*|\s*\]\]/g, ""));
              } else {
              }
            }
          case "AV":
            if ((_n = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _n.areaVida) {
              if (Array.isArray(nota.frontmatter.areaVida)) {
                this.nota.areaVida = nota.frontmatter.areaVida[0].replace(/\[\[\s*|\s*\]\]/g, "");
              } else if (typeof nota.frontmatter.areaVida === "string") {
                this.nota.areaVida = nota.frontmatter.areaVida.replace(/\[\[\s*|\s*\]\]/g, "");
              }
            } else {
              this.nota.areaVida = "No es de ning\xFAn Area de Vida";
            }
            if (((_o = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _o.type) === "AI" || ((_p = nota == null ? void 0 : nota.frontmatter) == null ? void 0 : _p.type) === "AV") {
              siAsunto = false;
            }
            if (!isNaN(parseInt((_q = nota.frontmatter) == null ? void 0 : _q.nivelP))) {
              nivel = parseInt(nota.frontmatter.nivelP) + 1;
            } else {
              nivel = 0;
            }
            this.nota.nivelP = nivel;
            break;
        }
      } else {
      }
    } else {
      siAsunto = false;
    }
    return { siAsunto, nombre: padres };
  }
  async getTrimestre() {
    var _a;
    const activo = app.workspace.getActiveFile();
    debugger;
    if (activo) {
      const metadata = (_a = app.metadataCache.getFileCache(activo)) == null ? void 0 : _a.frontmatter;
      if (metadata && metadata.type === "Cp") {
        const esContinuacion = await this.suggester(
          ["S\xED", "No"],
          [true, false],
          false,
          `\xBFEste entregable es parte de la campa\xF1a ${activo.basename}?`
        );
        debugger;
        if (esContinuacion && metadata.trimestre) {
          this.nota.trimestre = metadata.trimestre;
          return metadata.trimestre;
        }
      }
    }
    const trimestres = await FieldHandlerUtils.findMainFilesWithState("TQ", null, this.plugin);
    const trimestre = await this.suggester(
      trimestres.map((t) => t.file.basename),
      trimestres.map((t) => t.file.basename),
      false,
      "Selecciona el trimestre para este entregable:"
    );
    if (!trimestre) {
      throw new Error("Debe seleccionar un trimestre para continuar");
    }
    this.nota.trimestre = `[[${trimestre}]]`;
    return `[[${trimestre}]]`;
  }
  async getTipo() {
    const tiposEntregable = [
      "Blog",
      "Correo Electr\xF3nico",
      "Dise\xF1o Personalizado",
      "Entrenamiento",
      "Estudio de caso",
      "Historia",
      "Infograf\xEDa",
      "Pauta",
      "Podcast",
      "Post",
      "Reel",
      "Tarea Avanzada",
      "Video",
      "Webinar"
    ];
    const tipo = await this.suggester(
      tiposEntregable,
      tiposEntregable,
      false,
      "Selecciona el tipo de entregable:"
    );
    if (!tipo) {
      throw new Error("Debe seleccionar un tipo de entregable para continuar");
    }
    this.nota.tipo = tipo;
    return tipo;
  }
  async getCanales() {
    const todosLosCanales = [
      "Whatsapp",
      "Instagram",
      "Facebook",
      "Tik Tok",
      "Sitio Web",
      "Email marketing",
      "Youtube",
      "Twitter",
      "LinkedIn",
      "Otro"
    ];
    let canalesPreseleccionados = [];
    switch (this.nota.tipo) {
      case "Historia":
        canalesPreseleccionados = ["Whatsapp", "Instagram", "Facebook"];
        break;
      case "Post":
        canalesPreseleccionados = ["Instagram", "Facebook"];
        break;
      case "Reel":
        canalesPreseleccionados = ["Instagram", "Tik Tok", "Youtube"];
        break;
      case "Video":
        canalesPreseleccionados = ["Youtube"];
        break;
      case "Blog":
        canalesPreseleccionados = ["Sitio Web", "LinkedIn"];
        break;
      case "Pauta":
        canalesPreseleccionados = ["Instagram", "Facebook"];
        break;
      case "Correo Electr\xF3nico":
        canalesPreseleccionados = ["Email marketing"];
        break;
      case "Infograf\xEDa":
        canalesPreseleccionados = ["Instagram", "Facebook"];
        break;
      case "Estudio de caso":
        canalesPreseleccionados = ["LinkedIn"];
        break;
      default:
        canalesPreseleccionados = [];
    }
    const opciones = todosLosCanales.map((canal) => {
      return {
        nombre: canal,
        seleccionado: canalesPreseleccionados.includes(canal)
      };
    });
    const multiSelectModal = new SeleccionMultipleModal(this.plugin.app, opciones, "Selecciona los canales para este entregable");
    const canalesSeleccionados = await multiSelectModal.openAndAwaitSelection();
    if (!canalesSeleccionados || canalesSeleccionados.length === 0) {
      this.nota.canales = canalesPreseleccionados;
      return canalesPreseleccionados;
    }
    this.nota.canales = canalesSeleccionados;
    return canalesSeleccionados;
  }
  async getStatus() {
    const estados = [
      "Sin empezar",
      "Dise\xF1ando - En Desarrollo",
      "Revisi\xF3n Interna",
      "Revisi\xF3n Cliente",
      "Programaci\xF3n Parrilla",
      "Publicado",
      "Completado",
      "Archivado"
    ];
    const status = await this.suggester(
      estados,
      estados,
      false,
      "Selecciona el estado actual del entregable:"
    );
    if (!status) {
      this.nota.status = "Sin empezar";
      return "Sin empezar";
    }
    this.nota.status = status;
    return status;
  }
  async getPrioridad() {
    const prioridades = ["Baja", "Media", "Alta"];
    const prioridad = await this.suggester(
      prioridades,
      prioridades,
      false,
      "Selecciona la prioridad del entregable:"
    );
    if (!prioridad) {
      this.nota.prioridad = "Media";
      return "Media";
    }
    this.nota.prioridad = prioridad;
    return prioridad;
  }
  async getPublicacion() {
    const modal = new DatePickerModal(this.plugin.app);
    modal.open();
    const selectedDate = await modal.waitForInput();
    if (selectedDate === null) {
      return "";
    }
    this.nota.publicacion = selectedDate;
    return selectedDate;
  }
  async getPiezaNube() {
    const url = await this.prompt(
      "URL de la pieza en la nube (Google Drive, Dropbox, etc.):",
      "https://",
      false,
      false
    );
    this.nota.piezaNube = url || "";
    return url || "";
  }
  async getUrlCanva() {
    const url = await this.prompt(
      "URL del dise\xF1o en Canva:",
      "https://",
      false,
      false
    );
    this.nota.urlCanva = url || "";
    return url || "";
  }
  async getHits() {
    const spinnerModal = new SpinnerModal(this.plugin.app, 1, 1, 1e3);
    const hits = await spinnerModal.openAndAwaitSelection();
    if (hits === null || hits === void 0) {
      this.nota.hits = 1;
      return 1;
    }
    this.nota.hits = hits;
    return hits;
  }
  async getPedidosAlCliente() {
    const pedidosModal = new PedidosClienteModal(this.plugin.app);
    const resultado = await pedidosModal.openAndAwaitSelection();
    if (!resultado) {
      this.nota.pedidosAlCliente = "";
      this.nota.pendientesCliente = false;
      return { pedidos: "", pendientes: false };
    }
    this.nota.pedidosAlCliente = resultado.pedidos;
    this.nota.pendientesCliente = resultado.pendientes;
    return resultado;
  }
  // Método para determinar si el entregable es facturable basado en quién lo realizará
  async getFacturable() {
    const opciones = ["Un tercero", "Andr\xE9s Juli\xE1n Borb\xF3n"];
    const valores = [false, true];
    const realizador = await this.suggester(
      opciones,
      valores,
      false,
      // No es multiselección
      "\xBFQui\xE9n realizar\xE1 este entregable?"
    );
    if (realizador === null) {
      this.nota.facturable = false;
      return false;
    }
    this.nota.facturable = realizador;
    return realizador;
  }
  async getAliases() {
    const aliases = [];
    aliases.push(`${this.nota.titulo}`);
    aliases.push(`EMkt-${this.nota.titulo}`);
    aliases.push(`EMkt-${this.nota.id}`);
    this.nota.aliases = aliases;
    return aliases;
  }
  // Implementación de getRename para la estructura de carpetas basada en trimestres
  async getRename() {
    const folderBase = `${this.infoSubsistema.folder}`;
    const trimestreLimpio = this.nota.trimestre.replace(/\[\[|\]\]/g, "").trim();
    const folderTrimestre = `${folderBase}/${trimestreLimpio}`;
    await FieldHandlerUtils.crearCarpeta(folderBase);
    await FieldHandlerUtils.crearCarpeta(folderTrimestre);
    const newName = `${folderTrimestre}/${this.nota.titulo}.md`;
    const file = this.tp.file.config.target_file;
    const existe = app.vault.getAbstractFileByPath(newName);
    try {
      if (existe instanceof import_obsidian49.TFile) {
        const nombreFile = newName.split("/");
        const borrar = await this.suggester(
          ["Sobreescribir archivo actual", "Detener creaci\xF3n del archivo"],
          [true, false],
          true,
          `\xBF${nombreFile.pop()} ya existe. \xBFQu\xE9 deseas hacer?`
        );
        if (borrar) {
          await app.vault.delete(existe);
          if (file instanceof import_obsidian49.TFile) {
            await app.vault.rename(file, newName);
            console.log("Archivo renombrado con \xE9xito.");
            const newFile = app.vault.getAbstractFileByPath(newName);
            if (newFile instanceof import_obsidian49.TFile) {
              const leaf = app.workspace.getLeaf(true);
              await leaf.openFile(newFile);
            }
            return newName;
          }
        } else {
          console.log("Cancelando la creaci\xF3n del archivo.");
          throw new Error("Proceso cancelado por el usuario.");
        }
      } else {
        if (file instanceof import_obsidian49.TFile) {
          await app.vault.rename(file, newName);
          console.log("Archivo renombrado con \xE9xito.");
          const newFile = app.vault.getAbstractFileByPath(newName);
          if (newFile instanceof import_obsidian49.TFile) {
            const leaf = app.workspace.getLeaf(true);
            await leaf.openFile(newFile);
          }
          return newName;
        }
      }
    } catch (error) {
      console.error("Error al cambiar el nombre", error);
      throw error;
    }
  }
};

// src/modules/noteLifecycleManager/API/starterAPI.ts
var starterAPI = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.infoSubsistema = {};
    this.tp = this.getTp();
    this.pathCampos = this.plugin.settings.file_camposCentral + ".md";
  }
  async fillNote(infoSubsistema, campos) {
    this.nota = {};
    let nota;
    Object.assign(this.infoSubsistema, infoSubsistema);
    if (this.infoSubsistema.defined) {
      this.infoSubsistema.folder = this.plugin.settings[infoSubsistema.folder];
      this.infoSubsistema.indice = this.plugin.settings[infoSubsistema.indice];
      Object.assign(this.nota, infoSubsistema);
    }
    let fieldHandler;
    switch (this.infoSubsistema.type) {
      case "Agr":
        fieldHandler = new AgradecimientosFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "PGTD":
        fieldHandler = new PGTDFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "PQ":
        fieldHandler = new PQFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "Ax":
        fieldHandler = new AnotacionesFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "CPE":
        fieldHandler = new ContenidoParaEstudioFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "RR":
        fieldHandler = new RecursosRecurrentesFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "Tx":
        fieldHandler = new TransaccionesFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "AI":
        fieldHandler = new AreasInteresFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "AV":
        fieldHandler = new AreaVidaFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "nAV":
        fieldHandler = new nodoAreaVidaFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "OCA":
        fieldHandler = new ObjCompassAnualFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "CAI":
        fieldHandler = new CompassPlaneacionAnual_FH(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "RL":
        fieldHandler = new RepositorioLibros_FH(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "LB":
        fieldHandler = new Biblioteca_FH(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "Rx":
        fieldHandler = new ReflexionesFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "Cp":
        fieldHandler = new Campa\u00F1asFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "EMkt":
        fieldHandler = new EntregableFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "TQ":
        fieldHandler = new TrimestralFieldHandler(this.tp, this.infoSubsistema, this.plugin);
        break;
      case "AY":
        fieldHandler = new Anual_FH(this.tp, this.infoSubsistema, this.plugin);
        break;
      default:
        throw new Error(`No se ha definido un manejador de campos para el tipo ${this.infoSubsistema.type}`);
    }
    try {
      for (let campo of campos) {
        const functionName = `get${campo.charAt(0).toUpperCase() + campo.slice(1)}`;
        if (typeof fieldHandler[functionName] === "function") {
          this.nota[campo] = await fieldHandler[functionName]();
          nota = await fieldHandler.getNota();
          for (const key in nota) {
            if (!(key in this.nota)) {
              this.nota[key] = nota[key];
            }
          }
        } else {
          console.error(`La funci\xF3n ${functionName} no est\xE1 definida.`);
        }
      }
    } catch (error) {
      console.error("No se pudo crear el objeto de registro.", error);
      new import_obsidian50.Notice("No se pudo crear el objeto de registro.");
      return null;
    }
    return this.nota;
  }
  getTp() {
    if (!this.plugin || !this.plugin.app.plugins.enabledPlugins.has("templater-obsidian")) {
      console.error("El plugin Templater no est\xE1 habilitado.");
      return;
    }
    let tpGen = this.plugin.app.plugins.plugins["templater-obsidian"].templater;
    tpGen = tpGen.functions_generator.internal_functions.modules_array;
    let tp = {};
    tp.file = tpGen.find((m) => m.name == "file");
    tp.system = tpGen.find((m) => m.name == "system");
    if (!tp.system) {
      console.error("No se pudo acceder al objeto de funciones actuales de Templater.");
      return;
    }
    console.log("tp en YAMLUpdaterAPI se ha cargado satisfactoriamente");
    return tp;
  }
  // Crear Nota desde template
  async createNote(subsistema) {
    try {
      const templatePath = `Plantillas/${this.plugin.settings[`folder_${subsistema}`]}/Plt - ${subsistema}.md`;
      const templateFile = app.vault.getAbstractFileByPath(templatePath);
      if (!(templateFile instanceof import_obsidian50.TFile)) {
        throw new Error(`El template para "${subsistema}" no se encontr\xF3 o no es un archivo v\xE1lido.`);
      }
      const dtConseq = DateTime.now().toFormat("yyyy-MM-dd HHmmss");
      const filename = `${subsistema} ${dtConseq}`;
      const folder = app.vault.getAbstractFileByPath("Inbox");
      if (!folder) {
        throw new Error(`La carpeta "Inbox" no se encontr\xF3.`);
      }
      const tp = this.getTp();
      let crearNota = tp.file.static_functions.get("create_new");
      if (typeof crearNota !== "function") {
        throw new Error("La funci\xF3n para crear notas no est\xE1 disponible.");
      }
      await crearNota(templateFile, filename, true, folder).basename;
    } catch (error) {
      console.error(error);
      alert(`Error al crear la nota: ${error.message}`);
    }
  }
  async getOtrosAsuntos(subsistemas) {
    let suggester = this.tp.system.static_functions.get("suggester");
    let campo = [];
    for (let subsistema of subsistemas) {
      let incluye = await suggester(["Si", "No"], [true, false], true, `Desea agregar algun ${subsistema} activo como origen?`);
      if (!incluye)
        continue;
      debugger;
      let recursosActivos = await this.activeStructureResources(subsistema);
      let primerAlias = recursosActivos.map((file) => {
        var _a;
        const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
        return metadata && metadata.aliases && metadata.aliases.length > 0 ? metadata.aliases[0] : null;
      }).filter((alias) => alias !== null);
      while (recursosActivos.length > 0) {
        let indiceSeleccionado;
        if (subsistema === "AreasVida" || subsistema === "AreasInteres") {
          let seleccion = await suggester(primerAlias, recursosActivos.map((b) => b.path), false, `${subsistema} activos:`);
          if (!seleccion)
            break;
          indiceSeleccionado = recursosActivos.findIndex((b) => b.path === seleccion);
        } else {
          let seleccion = await suggester(primerAlias, recursosActivos.map((b) => b.basename), false, `${subsistema} activos:`);
          if (!seleccion)
            break;
          indiceSeleccionado = recursosActivos.findIndex((b) => b.basename === seleccion);
        }
        if (indiceSeleccionado !== -1) {
          if (subsistema === "AreasVida" || subsistema === "AreasInteres") {
            campo.push(recursosActivos[indiceSeleccionado].path);
          } else {
            campo.push(recursosActivos[indiceSeleccionado].basename);
          }
          recursosActivos.splice(indiceSeleccionado, 1);
          primerAlias.splice(indiceSeleccionado, 1);
        }
        if (recursosActivos.length === 0)
          break;
        let deseaAgregarOtro = await suggester(["Si", "No"], [true, false], true, `Desea agregar otro ${subsistema} como origen?`);
        debugger;
        if (!deseaAgregarOtro)
          break;
      }
    }
    return campo;
  }
  // FUNCION QUE TRAE TODAS LAS NOTAS ACTIVAS DE LOS SISTEMAS. - Revisar en que la uso...
  async activeStructureResources(typeName) {
    try {
      const files = app.vault.getMarkdownFiles();
      switch (type) {
        case "AreasInteres":
          debugger;
          break;
        default:
          let resourceFolderName = "folder_" + typeName;
          let resourceFolder = this.plugin.settings[resourceFolderName];
          if (!resourceFolder) {
            console.error(`La carpeta "${resourceFolderName}" no existe en la configuraci\xF3n del plugin.`);
            return [];
          }
          let activeResources2 = [];
          const registrosExistentes = files.filter((file) => file.path.startsWith(resourceFolder));
          registrosExistentes.forEach((file) => {
            var _a;
            const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
            if (metadata && metadata.estado === "\u{1F7E2}") {
              activeResources2.push(file);
            }
          });
          break;
      }
      return activeResources;
    } catch (error) {
      console.error("Error al buscar recursos activos:", error);
      return [];
    }
  }
};

// src/modules/noteLifecycleManager/API/utils/DOMUtils.ts
var DOMUtils = class {
  /**
   * Crea un elemento con atributos, clases y eventos opcionales
   */
  static createElement(tag, options = {}) {
    const element = document.createElement(tag);
    if (options.className) {
      element.className = options.className;
    }
    if (options.textContent) {
      element.textContent = options.textContent;
    }
    if (options.attributes) {
      Object.entries(options.attributes).forEach(([key, value]) => {
        element.setAttribute(key, value);
      });
    }
    if (options.styles) {
      Object.assign(element.style, options.styles);
    }
    if (options.children) {
      options.children.forEach((child) => element.appendChild(child));
    }
    if (options.events) {
      Object.entries(options.events).forEach(([event, listener]) => {
        element.addEventListener(event, listener);
      });
    }
    return element;
  }
  /**
   * Crea un botón con opciones comunes
   */
  static createButton(text, onClick, options = {}) {
    const buttonText = options.icon ? `${options.icon} ${text}` : text;
    return this.createElement("button", {
      className: options.className || "default-button",
      textContent: buttonText,
      styles: options.styles,
      events: { click: onClick }
    });
  }
  /**
   * Crea una sección colapsable
   */
  static createCollapsibleSection(headerContent, bodyContent, options = {}) {
    const isExpanded = options.isExpanded || false;
    const toggleIconExpanded = options.toggleIconExpanded || "\u25BC";
    const toggleIconCollapsed = options.toggleIconCollapsed || "\u25B6";
    const toggleSpan = this.createElement("span", {
      className: `toggle-icon ${isExpanded ? "open" : ""}`,
      textContent: isExpanded ? toggleIconExpanded : toggleIconCollapsed
    });
    const header = this.createElement("div", {
      className: options.headerClassName || "collapsible-header"
    });
    if (typeof headerContent === "string") {
      const headerTextSpan = this.createElement("span", {
        textContent: headerContent
      });
      header.appendChild(toggleSpan);
      header.appendChild(headerTextSpan);
    } else {
      header.appendChild(toggleSpan);
      header.appendChild(headerContent);
    }
    const body = this.createElement("div", {
      className: options.bodyClassName || "collapsible-body",
      styles: {
        display: isExpanded ? "block" : "none"
      },
      children: [bodyContent]
    });
    const container = this.createElement("div", {
      className: options.containerClassName || "collapsible-container",
      children: [header, body]
    });
    header.addEventListener("click", (event) => {
      if (event.target instanceof HTMLAnchorElement || event.target instanceof HTMLButtonElement) {
        return;
      }
      const isCurrentlyExpanded = toggleSpan.classList.contains("open");
      if (isCurrentlyExpanded) {
        toggleSpan.classList.remove("open");
        toggleSpan.textContent = toggleIconCollapsed;
        body.style.display = "none";
      } else {
        toggleSpan.classList.add("open");
        toggleSpan.textContent = toggleIconExpanded;
        body.style.display = "block";
      }
    });
    return container;
  }
  /**
   * Crea un elemento de carga (spinner)
   */
  static createLoadingIndicator(message = "Cargando...") {
    const spinner = this.createElement("div", {
      className: "spinner"
    });
    const loadingText = this.createElement("div", {
      textContent: message
    });
    return this.createElement("div", {
      className: "loading-indicator",
      children: [spinner, loadingText]
    });
  }
  /**
   * Crea un mensaje de error
   */
  static createErrorMessage(message, details) {
    const container = this.createElement("div", {
      className: "error-message",
      textContent: message
    });
    if (details) {
      const detailsElement = this.createElement("small", {
        textContent: details,
        styles: {
          display: "block",
          marginTop: "8px"
        }
      });
      container.appendChild(detailsElement);
    }
    return container;
  }
};

// src/modules/noteLifecycleManager/API/utils/NavigationUtils.ts
var NavigationUtils = class {
  /**
   * Navega a una tarea específica en una nota con resaltado de línea
   */
  static navegarATareaConResaltado(path, lineNumber, textoTarea, nuevaPesta\u00F1a = true) {
    try {
      const file = app.vault.getAbstractFileByPath(path);
      if (!file) {
        new app.Notice(`Archivo no encontrado: ${path}`);
        return;
      }
      const leaf = app.workspace.getLeaf(nuevaPesta\u00F1a);
      leaf.openFile(file).then(() => {
        setTimeout(() => {
          const editor = leaf.view.editor;
          if (!editor)
            return;
          if (lineNumber > 0) {
            editor.setCursor({ line: lineNumber - 1, ch: 0 });
            editor.scrollIntoView(
              { from: { line: lineNumber - 1, ch: 0 }, to: { line: lineNumber - 1, ch: 0 } },
              true
            );
            this.resaltarLineaTemporalmente(editor, lineNumber - 1);
          } else if (textoTarea) {
            const contenido = editor.getValue();
            const lineas = contenido.split("\n");
            for (let i = 0; i < lineas.length; i++) {
              const textoLimpio = textoTarea.replace(/^-\s*\[[^\]]+\]\s*/, "").trim();
              const lineaLimpia = lineas[i].replace(/^-\s*\[[^\]]+\]\s*/, "").trim();
              if (lineas[i].includes(textoTarea) || lineaLimpia.includes(textoLimpio)) {
                editor.setCursor({ line: i, ch: 0 });
                editor.scrollIntoView(
                  { from: { line: i, ch: 0 }, to: { line: i, ch: lineas[i].length } },
                  true
                );
                this.resaltarLineaTemporalmente(editor, i);
                break;
              }
            }
          }
        }, 300);
      });
    } catch (error) {
      console.error("Error en navegarATareaConResaltado:", error);
      new app.Notice(`Error al navegar: ${error.message}`);
    }
  }
  /**
   * Resalta temporalmente una línea en el editor
   */
  static resaltarLineaTemporalmente(editor, lineIndex) {
    try {
      if (editor.cm && editor.cm.state) {
        const lineDiv = editor.cm.dom.querySelector(".cm-content");
        if (lineDiv) {
          const lineElements = lineDiv.querySelectorAll(".cm-line");
          if (lineElements && lineElements.length > lineIndex) {
            lineElements[lineIndex].classList.add("highlighted-line");
            setTimeout(() => {
              lineElements[lineIndex].classList.remove("highlighted-line");
            }, 2e3);
          }
        }
      } else {
        const lineDiv = editor.lineDiv || editor.getScrollerElement();
        if (lineDiv) {
          const lineElements = lineDiv.querySelectorAll(".CodeMirror-line");
          if (lineElements && lineElements.length > lineIndex) {
            lineElements[lineIndex].classList.add("highlighted-line");
            setTimeout(() => {
              lineElements[lineIndex].classList.remove("highlighted-line");
            }, 2e3);
          }
        }
      }
    } catch (error) {
      console.error("Error al resaltar l\xEDnea:", error);
    }
  }
};

// src/modules/noteLifecycleManager/API/components/TareasInboxComponent.ts
var TareasInboxComponent = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  /**
   * Genera un componente visual para mostrar tareas con etiqueta #inbox
   */
  async generar(dv2) {
    try {
      const container = DOMUtils.createElement("div", {
        className: "tareas-inbox-container"
      });
      this.a\u00F1adirEstilos(container);
      const heading = DOMUtils.createElement("h3", {
        className: "inbox-heading",
        children: [
          DOMUtils.createElement("span", {
            textContent: "\u{1F4E5} Tareas en Bandeja de Entrada"
          })
        ]
      });
      container.appendChild(heading);
      const controlsDiv = this.crearControles(container);
      container.appendChild(controlsDiv);
      const loadingDiv = DOMUtils.createLoadingIndicator("Buscando tareas en bandeja de entrada...");
      container.appendChild(loadingDiv);
      try {
        const { tareasPorNota, totalTareas, totalNotas } = await this.plugin.tareasAPI.getTareasInbox();
        container.removeChild(loadingDiv);
        if (totalTareas === 0) {
          container.appendChild(
            DOMUtils.createElement("div", {
              className: "empty-message",
              textContent: "\xA1Bandeja de entrada vac\xEDa! No se encontraron tareas con etiqueta #inbox."
            })
          );
          return container;
        }
        heading.appendChild(
          DOMUtils.createElement("span", {
            className: "stats-badge",
            textContent: `${totalTareas} tareas en ${totalNotas} notas`
          })
        );
        const statsContainer = this.crearContenedorEstadisticas(totalTareas, totalNotas);
        container.appendChild(statsContainer);
        const notasOrdenadas = Array.from(tareasPorNota.values()).sort((a, b) => b.tareas.length - a.tareas.length);
        for (const notaInfo of notasOrdenadas) {
          const grupoTareas = this.crearGrupoTareas(notaInfo, dv2);
          container.appendChild(grupoTareas);
        }
        if (notasOrdenadas.length > 0) {
          const primerGrupo = container.querySelector(".tarea-group");
          if (primerGrupo) {
            const toggle = primerGrupo.querySelector(".tarea-group-toggle");
            const list = primerGrupo.querySelector(".tarea-list");
            if (toggle && list) {
              toggle.classList.add("open");
              toggle.textContent = "\u25BC";
              list.classList.add("open");
              list.style.display = "block";
            }
          }
        }
      } catch (error) {
        container.removeChild(loadingDiv);
        container.appendChild(
          DOMUtils.createErrorMessage(
            `Error al cargar tareas de bandeja de entrada: ${error.message}`,
            "Revisa la consola para m\xE1s detalles."
          )
        );
        console.error("Error en mostrarTareasInbox:", error);
      }
      return container;
    } catch (error) {
      console.error("Error general en mostrarTareasInbox:", error);
      return DOMUtils.createErrorMessage(
        `Error al cargar tareas de bandeja de entrada: ${error.message}`,
        "Revisa la consola para m\xE1s detalles."
      );
    }
  }
  /**
   * Crea los controles para la gestión de tareas inbox
   */
  crearControles(container) {
    const controlsDiv = DOMUtils.createElement("div", {
      className: "tareas-controls"
    });
    const expandBtn = DOMUtils.createButton(
      "Expandir Todo",
      () => this.expandirTodas(container),
      { className: "tareas-btn expand-btn", icon: "\u{1F4C2}" }
    );
    const collapseBtn = DOMUtils.createButton(
      "Colapsar Todo",
      () => this.colapsarTodas(container),
      { className: "tareas-btn collapse-btn", icon: "\u{1F4C1}" }
    );
    const refreshBtn = DOMUtils.createButton(
      "Actualizar",
      async () => {
        var _a;
        const nuevoContainer = await this.generar(dv);
        (_a = container.parentNode) == null ? void 0 : _a.replaceChild(nuevoContainer, container);
      },
      { className: "tareas-btn refresh-btn", icon: "\u{1F504}" }
    );
    const procesarBtn = DOMUtils.createButton(
      "Procesar Inbox",
      () => {
        new this.plugin.app.Notice("Para procesar una tarea, haz clic en ella para abrirla y clasificarla", 5e3);
      },
      {
        className: "tareas-btn process-btn",
        icon: "\u{1F50D}",
        styles: {
          backgroundColor: "var(--interactive-accent)",
          color: "white"
        }
      }
    );
    controlsDiv.appendChild(expandBtn);
    controlsDiv.appendChild(collapseBtn);
    controlsDiv.appendChild(refreshBtn);
    controlsDiv.appendChild(procesarBtn);
    return controlsDiv;
  }
  /**
   * Crea un contenedor con tarjetas de estadísticas
   */
  crearContenedorEstadisticas(totalTareas, totalNotas) {
    const statsContainer = DOMUtils.createElement("div", {
      className: "inbox-stats-container",
      styles: {
        display: "flex",
        flexWrap: "wrap",
        gap: "10px",
        margin: "10px 0 20px"
      }
    });
    this.crearTarjetaEstadistica(statsContainer, "\u{1F4E5}", "Tareas totales", totalTareas);
    this.crearTarjetaEstadistica(statsContainer, "\u{1F4DD}", "Notas con tareas", totalNotas);
    return statsContainer;
  }
  /**
   * Crea una tarjeta de estadística
   */
  crearTarjetaEstadistica(container, icono, titulo, valor) {
    const tarjeta = DOMUtils.createElement("div", {
      className: "stats-card",
      styles: {
        flex: "1",
        minWidth: "150px",
        backgroundColor: "var(--background-secondary)",
        padding: "15px",
        borderRadius: "8px",
        textAlign: "center",
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "center"
      }
    });
    const iconoEl = DOMUtils.createElement("div", {
      textContent: icono,
      styles: {
        fontSize: "24px",
        marginBottom: "5px"
      }
    });
    const tituloEl = DOMUtils.createElement("div", {
      textContent: titulo,
      styles: {
        fontSize: "12px",
        color: "var(--text-muted)",
        marginBottom: "5px"
      }
    });
    const valorEl = DOMUtils.createElement("div", {
      textContent: valor.toString(),
      styles: {
        fontWeight: "bold",
        fontSize: "18px"
      }
    });
    tarjeta.appendChild(iconoEl);
    tarjeta.appendChild(tituloEl);
    tarjeta.appendChild(valorEl);
    container.appendChild(tarjeta);
  }
  /**
   * Crea un grupo de tareas para una nota específica
   */
  crearGrupoTareas(notaInfo, dv2) {
    const { titulo, ruta, tareas } = notaInfo;
    const tareasList = DOMUtils.createElement("div", {
      className: "tarea-list",
      styles: {
        display: "none"
      }
    });
    for (const tarea of tareas) {
      const tareaElement = this.crearTareaElement(tarea, dv2);
      tareasList.appendChild(tareaElement);
    }
    let titleElement;
    try {
      const enlaceNota = DOMUtils.createElement("a", {
        className: "internal-link",
        textContent: titulo,
        attributes: {
          "data-href": ruta
        },
        events: {
          click: (event) => {
            event.preventDefault();
            event.stopPropagation();
            this.plugin.app.workspace.openLinkText(ruta, "", true);
          }
        }
      });
      titleElement = DOMUtils.createElement("div", {
        className: "tarea-group-title",
        children: [
          DOMUtils.createElement("span", {
            className: "tarea-group-toggle",
            textContent: "\u25B6"
          }),
          enlaceNota
        ]
      });
    } catch (e) {
      titleElement = DOMUtils.createElement("div", {
        className: "tarea-group-title",
        children: [
          DOMUtils.createElement("span", {
            className: "tarea-group-toggle",
            textContent: "\u25B6"
          }),
          DOMUtils.createElement("span", {
            textContent: titulo
          })
        ]
      });
    }
    const headerDiv = DOMUtils.createElement("div", {
      className: "tarea-group-header",
      children: [
        titleElement,
        DOMUtils.createElement("span", {
          className: "tarea-group-count",
          textContent: tareas.length.toString()
        })
      ]
    });
    const grupoDiv = DOMUtils.createElement("div", {
      className: "tarea-group",
      children: [headerDiv, tareasList]
    });
    headerDiv.addEventListener("click", (event) => {
      if (event.target instanceof HTMLAnchorElement)
        return;
      const toggleSpan = titleElement.querySelector(".tarea-group-toggle");
      if (!toggleSpan)
        return;
      toggleSpan.classList.toggle("open");
      tareasList.classList.toggle("open");
      if (toggleSpan.classList.contains("open")) {
        toggleSpan.textContent = "\u25BC";
        tareasList.style.display = "block";
      } else {
        toggleSpan.textContent = "\u25B6";
        tareasList.style.display = "none";
      }
    });
    return grupoDiv;
  }
  /**
   * Crea un elemento DOM para una tarea de bandeja de entrada
   */
  crearTareaElement(tarea, dv2) {
    var _a, _b;
    const tareaDiv = DOMUtils.createElement("div", {
      className: "tarea-item",
      styles: {
        borderLeft: "4px solid #E67E22"
        // Color naranja para mostrar que está en inbox
      }
    });
    const textoDiv = DOMUtils.createElement("div", {
      className: "tarea-texto"
    });
    const checkboxSpan = DOMUtils.createElement("span", {
      className: "tarea-checkbox",
      textContent: "\u2610",
      attributes: {
        "data-path": tarea.rutaArchivo,
        "data-line": String(((_a = tarea.lineInfo) == null ? void 0 : _a.numero) || 0)
      },
      events: {
        click: () => {
          var _a2;
          NavigationUtils.navegarATareaConResaltado(
            tarea.rutaArchivo,
            ((_a2 = tarea.lineInfo) == null ? void 0 : _a2.numero) || 0,
            tarea.textoOriginal || tarea.texto,
            true
          );
        }
      }
    });
    textoDiv.appendChild(checkboxSpan);
    const contenidoSpan = DOMUtils.createElement("span", {
      className: "tarea-contenido",
      textContent: tarea.texto,
      attributes: {
        "data-path": tarea.rutaArchivo,
        "data-line": String(((_b = tarea.lineInfo) == null ? void 0 : _b.numero) || 0)
      },
      styles: {
        cursor: "pointer"
      },
      events: {
        click: () => {
          var _a2;
          NavigationUtils.navegarATareaConResaltado(
            tarea.rutaArchivo,
            ((_a2 = tarea.lineInfo) == null ? void 0 : _a2.numero) || 0,
            tarea.textoOriginal || tarea.texto,
            true
          );
        }
      }
    });
    textoDiv.appendChild(contenidoSpan);
    tareaDiv.appendChild(textoDiv);
    const metadatosDiv = DOMUtils.createElement("div", {
      className: "tarea-metadatos"
    });
    this.a\u00F1adirMetadatosUbicacion(tarea, metadatosDiv);
    this.a\u00F1adirMetadatosFechas(tarea, metadatosDiv);
    this.a\u00F1adirMetadatosPersonas(tarea, metadatosDiv);
    this.a\u00F1adirMetadatosContextos(tarea, metadatosDiv);
    this.a\u00F1adirMetadatosEtiquetas(tarea, metadatosDiv);
    this.a\u00F1adirBotonesAccion(tarea, metadatosDiv);
    tareaDiv.appendChild(metadatosDiv);
    return tareaDiv;
  }
  /**
   * Añade metadatos de ubicación a una tarea
   */
  a\u00F1adirMetadatosUbicacion(tarea, container) {
    var _a;
    const ubicacionDiv = DOMUtils.createElement("div", {
      className: "tarea-meta-item"
    });
    const iconoUbicacion = DOMUtils.createElement("span", {
      className: "metadato-icono",
      textContent: "\u{1F4CD}"
    });
    ubicacionDiv.appendChild(iconoUbicacion);
    const valorUbicacion = DOMUtils.createElement("span", {
      className: "ubicacion-valor",
      textContent: ((_a = tarea.lineInfo) == null ? void 0 : _a.numero) ? `L\xEDnea ${tarea.lineInfo.numero}` : "Posici\xF3n desconocida"
    });
    ubicacionDiv.appendChild(valorUbicacion);
    container.appendChild(ubicacionDiv);
  }
  /**
   * Añade metadatos de fechas a una tarea
   */
  a\u00F1adirMetadatosFechas(tarea, container) {
    if (!tarea.fechaVencimiento && !tarea.fechaScheduled && !tarea.fechaStart) {
      return;
    }
    const fechasDiv = DOMUtils.createElement("div", {
      className: "tarea-meta-item"
    });
    const iconoFecha = DOMUtils.createElement("span", {
      className: "metadato-icono",
      textContent: "\u{1F4C5}"
    });
    fechasDiv.appendChild(iconoFecha);
    const valorFechas = DOMUtils.createElement("span");
    let textofechas = [];
    if (tarea.fechaVencimiento) {
      textofechas.push(`Vence: ${tarea.fechaVencimiento}`);
    }
    if (tarea.fechaScheduled) {
      textofechas.push(`Programada: ${tarea.fechaScheduled}`);
    }
    if (tarea.fechaStart) {
      textofechas.push(`Inicia: ${tarea.fechaStart}`);
    }
    valorFechas.textContent = textofechas.join(" | ");
    fechasDiv.appendChild(valorFechas);
    container.appendChild(fechasDiv);
  }
  /**
   * Añade metadatos de personas asignadas a una tarea
   */
  a\u00F1adirMetadatosPersonas(tarea, container) {
    var _a;
    if (!((_a = tarea.etiquetas.personas) == null ? void 0 : _a.length)) {
      return;
    }
    const personasDiv = DOMUtils.createElement("div", {
      className: "tarea-meta-item"
    });
    const iconoPersonas = DOMUtils.createElement("span", {
      className: "metadato-icono",
      textContent: "\u{1F464}"
    });
    personasDiv.appendChild(iconoPersonas);
    const valorPersonas = DOMUtils.createElement("span", {
      textContent: tarea.etiquetas.personas.join(" | ")
    });
    personasDiv.appendChild(valorPersonas);
    container.appendChild(personasDiv);
  }
  /**
   * Añade metadatos de contextos a una tarea
   */
  a\u00F1adirMetadatosContextos(tarea, container) {
    var _a;
    if (!((_a = tarea.etiquetas.contextos) == null ? void 0 : _a.length)) {
      return;
    }
    const contextosDiv = DOMUtils.createElement("div", {
      className: "tarea-meta-item"
    });
    const iconoContextos = DOMUtils.createElement("span", {
      className: "metadato-icono",
      textContent: "\u{1F5C2}\uFE0F"
    });
    contextosDiv.appendChild(iconoContextos);
    const valorContextos = DOMUtils.createElement("span", {
      textContent: tarea.etiquetas.contextos.join(" | ")
    });
    contextosDiv.appendChild(valorContextos);
    container.appendChild(contextosDiv);
  }
  /**
   * Añade metadatos de etiquetas (excluyendo #inbox) a una tarea
   */
  a\u00F1adirMetadatosEtiquetas(tarea, container) {
    const otrasEtiquetas = tarea.etiquetas.otras.filter((tag) => tag.toLowerCase() !== "#inbox");
    if (!otrasEtiquetas.length) {
      return;
    }
    const etiquetasDiv = DOMUtils.createElement("div", {
      className: "tarea-meta-item"
    });
    const iconoEtiquetas = DOMUtils.createElement("span", {
      className: "metadato-icono",
      textContent: "\u{1F3F7}\uFE0F"
    });
    etiquetasDiv.appendChild(iconoEtiquetas);
    const valorEtiquetas = DOMUtils.createElement("span", {
      textContent: otrasEtiquetas.join(" ")
    });
    etiquetasDiv.appendChild(valorEtiquetas);
    container.appendChild(etiquetasDiv);
  }
  /**
   * Añade botones de acción rápida para clasificar la tarea
   */
  a\u00F1adirBotonesAccion(tarea, container) {
    const accionesDiv = DOMUtils.createElement("div", {
      className: "tarea-acciones",
      styles: {
        marginTop: "8px",
        display: "flex",
        gap: "8px",
        flexWrap: "wrap"
      }
    });
    const estilosBotones = {
      fontSize: "12px",
      padding: "3px 8px",
      borderRadius: "4px",
      border: "1px solid var(--background-modifier-border)",
      backgroundColor: "var(--background-secondary)",
      cursor: "pointer"
    };
    const btnEditar = DOMUtils.createElement("button", {
      className: "tarea-accion-btn",
      textContent: "\u270F\uFE0F Editar",
      styles: estilosBotones,
      events: {
        click: () => {
          var _a;
          NavigationUtils.navegarATareaConResaltado(
            tarea.rutaArchivo,
            ((_a = tarea.lineInfo) == null ? void 0 : _a.numero) || 0,
            tarea.textoOriginal || tarea.texto,
            true
          );
        }
      }
    });
    accionesDiv.appendChild(btnEditar);
    const contextosComunes = ["#cx/trabajo", "#cx/personal", "#cx/hogar"];
    for (const contexto of contextosComunes) {
      const btnContexto = DOMUtils.createElement("button", {
        className: "tarea-accion-btn contexto-btn",
        textContent: contexto,
        styles: estilosBotones,
        events: {
          click: () => {
            var _a;
            NavigationUtils.navegarATareaConResaltado(
              tarea.rutaArchivo,
              ((_a = tarea.lineInfo) == null ? void 0 : _a.numero) || 0,
              tarea.textoOriginal || tarea.texto,
              true
            );
            new this.plugin.app.Notice(
              `Para a\xF1adir "${contexto}" a esta tarea, ed\xEDtala en el archivo abierto.`,
              5e3
            );
          }
        }
      });
      accionesDiv.appendChild(btnContexto);
    }
    container.appendChild(accionesDiv);
  }
  /**
   * Expande todos los grupos de tareas en el contenedor
   */
  expandirTodas(container) {
    const toggles = container.querySelectorAll(".tarea-group-toggle");
    const listas = container.querySelectorAll(".tarea-list");
    toggles.forEach((toggle, index) => {
      toggle.classList.add("open");
      toggle.textContent = "\u25BC";
      if (listas[index]) {
        listas[index].classList.add("open");
        listas[index].style.display = "block";
      }
    });
  }
  /**
   * Colapsa todos los grupos de tareas en el contenedor
   */
  colapsarTodas(container) {
    const toggles = container.querySelectorAll(".tarea-group-toggle");
    const listas = container.querySelectorAll(".tarea-list");
    toggles.forEach((toggle, index) => {
      toggle.classList.remove("open");
      toggle.textContent = "\u25B6";
      if (listas[index]) {
        listas[index].classList.remove("open");
        listas[index].style.display = "none";
      }
    });
  }
  /**
   * Añade estilos inline al contenedor (solución temporal)
   * En una refactorización completa, estos estilos deberían moverse a un archivo CSS
   */
  a\u00F1adirEstilos(container) {
    const styleEl = DOMUtils.createElement("style", {
      textContent: `
      .tareas-inbox-container {
          font-size: 0.95em;
          width: 100%;
          max-width: 100%;
          margin: 0;
          padding: 0;
      }
      
      .inbox-heading {
          margin-top: 1rem;
          margin-bottom: 0.5rem;
          border-bottom: 1px solid var(--background-modifier-border);
          padding-bottom: 6px;
          font-weight: 600;
          font-size: 1.3em;
          display: flex;
          align-items: center;
          justify-content: space-between;
      }
      
      .stats-badge {
          background-color: var(--interactive-accent);
          color: white;
          border-radius: 12px;
          padding: 2px 10px;
          font-size: 0.8em;
          font-weight: normal;
      }
      
      .tareas-controls {
          display: flex;
          gap: 10px;
          margin-bottom: 1rem;
          justify-content: center;
      }
      
      .tareas-btn {
          background-color: var(--background-secondary-alt);
          border: 1px solid var(--background-modifier-border);
          border-radius: 6px;
          padding: 6px 12px;
          cursor: pointer;
          transition: all 0.2s ease;
      }
      
      .tareas-btn:hover {
          background-color: var(--background-modifier-hover);
      }
      
      .expand-btn:hover {
          background-color: var(--interactive-accent);
          color: white;
      }
      
      .tarea-group {
          background-color: var(--background-secondary);
          border-radius: 8px;
          margin-bottom: 1rem;
          overflow: hidden;
      }
      
      .tarea-group-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 8px 12px;
          background-color: var(--background-secondary-alt);
          cursor: pointer;
          user-select: none;
      }
      
      .tarea-group-header:hover {
          background-color: var(--background-modifier-hover);
      }
      
      .tarea-group-title {
          display: flex;
          align-items: center;
          gap: 8px;
          font-weight: 500;
      }
      
      .tarea-group-toggle {
          font-family: monospace;
          transition: transform 0.2s ease;
      }
      
      .tarea-group-toggle.open {
          transform: rotate(90deg);
      }
      
      .tarea-group-count {
          background-color: var(--interactive-accent);
          color: white;
          border-radius: 12px;
          padding: 1px 8px;
          font-size: 0.85em;
      }
      
      .tarea-list {
          padding: 0 12px 12px;
      }
      
      .tarea-item {
          margin: 8px 0;
          padding: 8px;
          border-radius: 6px;
          background-color: var(--background-primary);
          border: 1px solid var(--background-modifier-border);
          transition: all 0.2s ease;
      }
      
      .tarea-item:hover {
          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
          transform: translateY(-2px);
          border-color: var(--interactive-accent);
      }
      
      .tarea-texto {
          margin-bottom: 6px;
          display: flex;
          gap: 8px;
          align-items: flex-start;
      }
      
      .tarea-checkbox {
          color: var(--text-faint);
          font-size: 1.1em;
          flex-shrink: 0;
          cursor: pointer;
      }
      
      .tarea-contenido {
          flex-grow: 1;
          line-height: 1.4;
      }
      
      .tarea-metadatos {
          margin-left: 28px;
          font-size: 0.9em;
          color: var(--text-muted);
      }
      
      .tarea-meta-item {
          margin-bottom: 3px;
          display: flex;
          align-items: baseline;
      }
      
      .metadato-icono {
          margin-right: 6px;
          width: 16px;
          text-align: center;
      }
      
      .loading-indicator {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          padding: 2rem;
          color: var(--text-muted);
      }
      
      .spinner {
          border: 3px solid rgba(0, 0, 0, 0.1);
          border-radius: 50%;
          border-top: 3px solid var(--interactive-accent);
          width: 30px;
          height: 30px;
          animation: spin 1s linear infinite;
          margin-bottom: 1rem;
      }
      
      @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
      }
      
      .error-message {
          color: var(--text-error);
          background-color: rgba(var(--text-error-rgb), 0.1);
          padding: 10px;
          border-radius: 6px;
          text-align: center;
          margin: 10px 0;
      }
      
      .empty-message {
          color: var(--text-muted);
          text-align: center;
          padding: 2rem;
          font-style: italic;
      }
      `
    });
    container.appendChild(styleEl);
  }
};

// src/modules/noteLifecycleManager/API/components/ProyectoCampanasComponent.ts
var ProyectoCampanasComponent = class {
  constructor(plugin) {
    this.plugin = plugin;
    console.log("\u{1F50D} ProyectoCampanasComponent iniciado");
  }
  /**
   * Genera un componente visual para mostrar la relación entre Proyectos GTD y Campañas
   */
  async generar(dv2, options = {}) {
    var _a, _b, _c;
    console.log("\u{1F50D} M\xE9todo generar iniciado con opciones:", options);
    try {
      const configuracion = {
        modo: options.modo || "hits",
        proyectoActualPath: options.proyectoActualPath || ((_b = (_a = dv2.current()) == null ? void 0 : _a.file) == null ? void 0 : _b.path)
      };
      console.log("\u{1F50D} Configuraci\xF3n final:", configuracion);
      const container = DOMUtils.createElement("div", {
        className: "proyecto-campanas-container"
      });
      const heading = DOMUtils.createElement("h3", {
        className: "dashboard-heading",
        textContent: "Dashboard de Proyectos y Campa\xF1as"
      });
      container.appendChild(heading);
      const controlsDiv = this.crearControles(container, configuracion, async (nuevoModo) => {
        var _a2;
        const nuevoContainer = await this.generar(dv2, {
          ...configuracion,
          modo: nuevoModo
        });
        (_a2 = container.parentNode) == null ? void 0 : _a2.replaceChild(nuevoContainer, container);
      });
      container.appendChild(controlsDiv);
      const loadingDiv = DOMUtils.createLoadingIndicator("Cargando datos de proyectos y campa\xF1as...");
      container.appendChild(loadingDiv);
      try {
        console.log("\u{1F50D} Iniciando carga de datos");
        let proyectos = [];
        let estaEnProyecto = false;
        if (configuracion.proyectoActualPath) {
          console.log("\u{1F50D} Buscando proyecto actual:", configuracion.proyectoActualPath);
          const archivoActual = this.plugin.app.vault.getAbstractFileByPath(configuracion.proyectoActualPath);
          if (archivoActual) {
            console.log("\u{1F50D} Archivo encontrado:", archivoActual.path);
            const metadataActual = (_c = this.plugin.app.metadataCache.getFileCache(archivoActual)) == null ? void 0 : _c.frontmatter;
            console.log("\u{1F50D} Frontmatter del archivo:", metadataActual);
            if (metadataActual && metadataActual.type === "PGTD") {
              console.log("\u{1F50D} La nota actual es un PGTD");
              estaEnProyecto = true;
              const proyectoInfo = await this.obtenerDatosProyecto(dv2, archivoActual, configuracion.modo);
              console.log("\u{1F50D} Proyecto info:", proyectoInfo);
              if (proyectoInfo) {
                proyectos = [proyectoInfo];
                console.log("\u{1F50D} Proyecto a\xF1adido a lista. N\xFAmero de campa\xF1as:", proyectoInfo.campanas.length);
              } else {
                console.log("\u{1F50D} No se encontr\xF3 informaci\xF3n del proyecto");
              }
            } else {
              console.log("\u{1F50D} La nota actual NO es un PGTD, es:", metadataActual == null ? void 0 : metadataActual.type);
            }
          } else {
            console.log("\u{1F50D} Archivo actual no encontrado");
          }
        }
        if (!estaEnProyecto || proyectos.length === 0) {
          console.log("\u{1F50D} Obteniendo todos los proyectos");
          proyectos = await this.obtenerTodosLosProyectos(dv2, configuracion.modo);
          console.log("\u{1F50D} Proyectos obtenidos:", proyectos.length);
        }
        container.removeChild(loadingDiv);
        if (proyectos.length === 0) {
          console.log("\u{1F50D} No se encontraron proyectos con campa\xF1as");
          container.appendChild(
            DOMUtils.createElement("div", {
              className: "empty-message",
              textContent: "No se encontraron proyectos con campa\xF1as asociadas."
            })
          );
          return container;
        }
        console.log("\u{1F50D} Proyectos para renderizar:", proyectos.length);
        proyectos.forEach((proy, idx) => {
          console.log(`\u{1F50D} Proyecto ${idx + 1}:`, {
            titulo: proy.titulo,
            path: proy.path,
            numCampanas: proy.campanas.length
          });
        });
        const statsContainer = this.crearEstadisticasGlobales(proyectos);
        container.appendChild(statsContainer);
        const jerarquiaContainer = this.crearVistaJerarquica(proyectos, configuracion.modo);
        container.appendChild(jerarquiaContainer);
      } catch (error) {
        container.removeChild(loadingDiv);
        console.error("\u{1F50D} Error al cargar datos:", error);
        container.appendChild(
          DOMUtils.createErrorMessage(
            `Error al cargar datos de proyectos y campa\xF1as: ${error.message}`,
            "Revisa la consola para m\xE1s detalles."
          )
        );
      }
      return container;
    } catch (error) {
      console.error("\u{1F50D} Error general en generar:", error);
      return DOMUtils.createErrorMessage(
        `Error al generar vista de proyectos y campa\xF1as: ${error.message}`,
        "Revisa la consola para m\xE1s detalles."
      );
    }
  }
  /**
   * Crea los controles para cambiar el modo de visualización
   */
  crearControles(container, config, onCambioModo) {
    const controlsDiv = DOMUtils.createElement("div", {
      className: "dashboard-controls"
    });
    const btnHits = DOMUtils.createButton(
      "Ver por Hits",
      () => onCambioModo("hits"),
      {
        className: `dashboard-btn mode-btn ${config.modo === "hits" ? "active" : ""}`,
        icon: "\u{1F4CA}"
      }
    );
    const btnFechas = DOMUtils.createButton(
      "Ver por Fechas",
      () => onCambioModo("fechas"),
      {
        className: `dashboard-btn mode-btn ${config.modo === "fechas" ? "active" : ""}`,
        icon: "\u{1F4C5}"
      }
    );
    const refreshBtn = DOMUtils.createButton(
      "Actualizar",
      async () => {
        var _a;
        const dv2 = window.DataviewAPI;
        if (dv2) {
          const nuevoContainer = await this.generar(dv2, config);
          (_a = container.parentNode) == null ? void 0 : _a.replaceChild(nuevoContainer, container);
        }
      },
      { className: "dashboard-btn refresh-btn", icon: "\u{1F504}" }
    );
    controlsDiv.appendChild(btnHits);
    controlsDiv.appendChild(btnFechas);
    controlsDiv.appendChild(refreshBtn);
    return controlsDiv;
  }
  /**
   * Crea un contenedor con estadísticas globales
   */
  crearEstadisticasGlobales(proyectos) {
    const statsContainer = DOMUtils.createElement("div", {
      className: "dashboard-stats-container"
    });
    const totalProyectos = proyectos.length;
    let totalProyectosActivos = 0;
    let totalProyectosSuspendidos = 0;
    let totalProyectosArchivados = 0;
    let totalProyectosCancelados = 0;
    let totalCampanas = 0;
    let totalCampanasActivas = 0;
    let totalCampanasSuspendidas = 0;
    let totalCampanasArchivadas = 0;
    let totalCampanasCanceladas = 0;
    let totalEntregables = 0;
    let totalEntregablesActivos = 0;
    let totalEntregablesSuspendidos = 0;
    let totalEntregablesArchivados = 0;
    let totalEntregablesCancelados = 0;
    let totalHits = 0;
    let totalHitsActivos = 0;
    let totalHitsArchivados = 0;
    let entregablesVencidos = 0;
    let entregablesPorVencer = 0;
    proyectos.forEach((proyecto) => {
      switch (proyecto.estado) {
        case "\u{1F7E2}":
          totalProyectosActivos++;
          break;
        case "\u{1F7E1}":
          totalProyectosSuspendidos++;
          break;
        case "\u{1F535}":
          totalProyectosArchivados++;
          break;
        case "\u{1F534}":
          totalProyectosCancelados++;
          break;
      }
      totalCampanas += proyecto.campanas.length;
      if (proyecto.estado === "\u{1F7E2}") {
        totalHitsActivos += proyecto.hits;
      } else if (proyecto.estado === "\u{1F535}") {
        totalHitsArchivados += proyecto.hits;
      }
      totalHits += proyecto.hits;
      proyecto.campanas.forEach((campana) => {
        switch (campana.estado) {
          case "\u{1F7E2}":
            totalCampanasActivas++;
            break;
          case "\u{1F7E1}":
            totalCampanasSuspendidas++;
            break;
          case "\u{1F535}":
            totalCampanasArchivadas++;
            break;
          case "\u{1F534}":
            totalCampanasCanceladas++;
            break;
        }
        totalEntregables += campana.entregables.length;
        campana.entregables.forEach((entregable) => {
          switch (entregable.estado) {
            case "\u{1F7E2}":
              totalEntregablesActivos++;
              break;
            case "\u{1F7E1}":
              totalEntregablesSuspendidos++;
              break;
            case "\u{1F535}":
              totalEntregablesArchivados++;
              break;
            case "\u{1F534}":
              totalEntregablesCancelados++;
              break;
          }
          if (entregable.diferenciaDias !== void 0) {
            if (entregable.estado === "\u{1F7E2}" || entregable.estado === "\u{1F7E1}") {
              if (entregable.diferenciaDias < 0) {
                entregablesVencidos++;
              } else if (entregable.diferenciaDias <= 3) {
                entregablesPorVencer++;
              }
            }
          }
        });
      });
    });
    console.log("\u{1F50D} Estad\xEDsticas globales:", {
      totalProyectos,
      totalCampanas,
      totalEntregables,
      totalHits,
      entregablesVencidos,
      entregablesPorVencer,
      desglose: {
        proyectos: { activos: totalProyectosActivos, suspendidos: totalProyectosSuspendidos, archivados: totalProyectosArchivados, cancelados: totalProyectosCancelados },
        campanas: { activas: totalCampanasActivas, suspendidas: totalCampanasSuspendidas, archivadas: totalCampanasArchivadas, canceladas: totalCampanasCanceladas },
        entregables: { activos: totalEntregablesActivos, suspendidos: totalEntregablesSuspendidos, archivados: totalEntregablesArchivados, cancelados: totalEntregablesCancelados },
        hits: { activos: totalHitsActivos, archivados: totalHitsArchivados }
      }
    });
    this.crearTarjetaEstadistica(statsContainer, "\u{1F4C2}", "Proyectos", totalProyectos);
    this.crearTarjetaEstadistica(statsContainer, "\u{1F4CA}", "Campa\xF1as", totalCampanas);
    this.crearTarjetaEstadistica(statsContainer, "\u{1F4C4}", "Entregables", totalEntregables);
    const etiquetaHits = `Total Hits${totalHitsArchivados > 0 ? "*" : ""}`;
    this.crearTarjetaEstadistica(statsContainer, "\u{1F441}\uFE0F", etiquetaHits, totalHits);
    if (entregablesVencidos > 0) {
      this.crearTarjetaEstadistica(statsContainer, "\u26A0\uFE0F", "Vencidos", entregablesVencidos, "#e74c3c");
    }
    if (entregablesPorVencer > 0) {
      this.crearTarjetaEstadistica(statsContainer, "\u23F0", "Por vencer", entregablesPorVencer, "#f39c12");
    }
    if (totalHitsArchivados > 0) {
      const notaHits = DOMUtils.createElement("div", {
        className: "hits-note",
        textContent: "* El total incluye hits de elementos activos y archivados",
        styles: {
          fontSize: "0.8em",
          color: "var(--text-muted)",
          textAlign: "center",
          marginTop: "8px"
        }
      });
      statsContainer.appendChild(notaHits);
    }
    return statsContainer;
  }
  /**
   * Crea una tarjeta de estadística
   */
  crearTarjetaEstadistica(container, icono, titulo, valor, colorDestacado) {
    const tarjeta = DOMUtils.createElement("div", {
      className: "stats-card"
    });
    if (colorDestacado) {
      tarjeta.style.borderLeft = `4px solid ${colorDestacado}`;
    }
    const iconoEl = DOMUtils.createElement("div", {
      className: "stats-card-icon",
      textContent: icono
    });
    const infoContainer = DOMUtils.createElement("div", {
      className: "stats-card-info"
    });
    const tituloEl = DOMUtils.createElement("div", {
      className: "stats-card-title",
      textContent: titulo
    });
    const valorEl = DOMUtils.createElement("div", {
      className: "stats-card-value",
      textContent: valor.toString()
    });
    if (colorDestacado) {
      valorEl.style.color = colorDestacado;
    }
    infoContainer.appendChild(tituloEl);
    infoContainer.appendChild(valorEl);
    tarjeta.appendChild(iconoEl);
    tarjeta.appendChild(infoContainer);
    container.appendChild(tarjeta);
  }
  /**
   * Crea la vista jerárquica de proyectos y campañas
   */
  crearVistaJerarquica(proyectos, modo) {
    const container = DOMUtils.createElement("div", {
      className: "jerarquia-container"
    });
    const proyectosOrdenados = this.ordenarProyectos(proyectos, modo);
    proyectosOrdenados.forEach((proyecto, idx) => {
      console.log(`\u{1F50D} Renderizando proyecto ${idx + 1}: ${proyecto.titulo} con ${proyecto.campanas.length} campa\xF1as`);
      const proyectoSection = this.crearSeccionProyecto(proyecto, modo);
      container.appendChild(proyectoSection);
    });
    return container;
  }
  /**
   * Crea una sección para un proyecto
   */
  crearSeccionProyecto(proyecto, modo) {
    console.log(`\u{1F50D} Creando secci\xF3n para proyecto: ${proyecto.titulo}. Campa\xF1as: ${proyecto.campanas.length}`);
    const proyectoSection = DOMUtils.createElement("details", {
      className: "proyecto-section",
      attributes: {
        "open": "true"
        // Abierto por defecto
      }
    });
    const proyectoHeader = DOMUtils.createElement("summary", {
      className: "proyecto-header"
    });
    if (proyecto.estado) {
      const estadoSpan = DOMUtils.createElement("span", {
        className: "estado-badge",
        textContent: proyecto.estado
      });
      proyectoHeader.appendChild(estadoSpan);
    }
    try {
      const tituloContainer = DOMUtils.createElement("div", {
        className: "proyecto-titulo-container"
      });
      const iconoProyecto = DOMUtils.createElement("span", {
        className: "proyecto-icono",
        textContent: "\u{1F4C2}"
      });
      tituloContainer.appendChild(iconoProyecto);
      const enlaceProyecto = DOMUtils.createElement("a", {
        className: "proyecto-link",
        textContent: proyecto.titulo || proyecto.alias || "Proyecto sin t\xEDtulo",
        attributes: {
          "data-href": proyecto.path
        },
        events: {
          click: (event) => {
            event.preventDefault();
            event.stopPropagation();
            this.plugin.app.workspace.openLinkText(proyecto.path, "", true);
          }
        }
      });
      tituloContainer.appendChild(enlaceProyecto);
      proyectoHeader.appendChild(tituloContainer);
    } catch (e) {
      console.error(`\u{1F50D} Error al crear enlace del proyecto: ${e.message}`);
      const textoProyecto = DOMUtils.createElement("span", {
        className: "proyecto-titulo",
        textContent: proyecto.titulo || proyecto.alias || "Proyecto sin t\xEDtulo"
      });
      proyectoHeader.appendChild(textoProyecto);
    }
    const metricasContainer = DOMUtils.createElement("div", {
      className: "proyecto-metricas"
    });
    const campanasCount = DOMUtils.createElement("span", {
      className: "campanas-count",
      textContent: `${proyecto.campanas.length} ${proyecto.campanas.length === 1 ? "campa\xF1a" : "campa\xF1as"}`
    });
    metricasContainer.appendChild(campanasCount);
    if (modo === "hits") {
      const hitsCount = DOMUtils.createElement("span", {
        className: "hits-count",
        textContent: `${proyecto.hits} hits`
      });
      metricasContainer.appendChild(hitsCount);
    } else {
      const proximoVencimiento = this.obtenerDiasProximoVencimiento(proyecto);
      if (proximoVencimiento !== null) {
        const vencimientoSpan = DOMUtils.createElement("span", {
          className: `vencimiento-badge ${this.obtenerClaseVencimiento(proximoVencimiento, proyecto.estado)}`,
          textContent: this.formatearDiasVencimiento(proximoVencimiento, proyecto.estado)
        });
        metricasContainer.appendChild(vencimientoSpan);
      } else {
        const vencimientoSpan = DOMUtils.createElement("span", {
          className: "vencimiento-badge",
          textContent: "Sin fechas"
        });
        metricasContainer.appendChild(vencimientoSpan);
      }
    }
    proyectoHeader.appendChild(metricasContainer);
    proyectoSection.appendChild(proyectoHeader);
    const proyectoContent = DOMUtils.createElement("div", {
      className: "proyecto-content"
    });
    const campanasOrdenadas = this.ordenarCampanas(proyecto.campanas, modo);
    if (campanasOrdenadas.length === 0) {
      console.log(`\u{1F50D} \u26A0\uFE0F El proyecto ${proyecto.titulo} no tiene campa\xF1as asociadas`);
      const infoNoData = DOMUtils.createElement("div", {
        className: "empty-message",
        textContent: "Este proyecto no tiene campa\xF1as asociadas."
      });
      proyectoContent.appendChild(infoNoData);
    } else {
      console.log(`\u{1F50D} Renderizando ${campanasOrdenadas.length} campa\xF1as para el proyecto ${proyecto.titulo}`);
      campanasOrdenadas.forEach((campana, idx) => {
        console.log(`\u{1F50D} Creando elemento para campa\xF1a ${idx + 1}: ${campana.titulo}`);
        const campanaElement = this.crearElementoCampana(campana, modo);
        proyectoContent.appendChild(campanaElement);
      });
    }
    proyectoSection.appendChild(proyectoContent);
    return proyectoSection;
  }
  /**
   * Crea un elemento para mostrar una campaña
   */
  crearElementoCampana(campana, modo) {
    const campanaElement = DOMUtils.createElement("details", {
      className: "campana-element",
      attributes: {
        "open": "true"
        // Abierto por defecto
      }
    });
    const campanaHeader = DOMUtils.createElement("summary", {
      className: "campana-header"
    });
    if (campana.estado) {
      const estadoSpan = DOMUtils.createElement("span", {
        className: "estado-badge",
        textContent: campana.estado
      });
      campanaHeader.appendChild(estadoSpan);
    }
    try {
      const tituloContainer = DOMUtils.createElement("div", {
        className: "campana-titulo-container"
      });
      const iconoCampana = DOMUtils.createElement("span", {
        className: "campana-icono",
        textContent: "\u{1F4CA}"
      });
      tituloContainer.appendChild(iconoCampana);
      const enlaceCampana = DOMUtils.createElement("a", {
        className: "campana-link",
        textContent: campana.titulo || campana.alias || "Campa\xF1a sin t\xEDtulo",
        attributes: {
          "data-href": campana.path
        },
        events: {
          click: (event) => {
            event.preventDefault();
            event.stopPropagation();
            this.plugin.app.workspace.openLinkText(campana.path, "", true);
          }
        }
      });
      tituloContainer.appendChild(enlaceCampana);
      campanaHeader.appendChild(tituloContainer);
    } catch (e) {
      console.error(`\u{1F50D} Error al crear enlace de campa\xF1a: ${e.message}`);
      const textoCampana = DOMUtils.createElement("span", {
        className: "campana-titulo",
        textContent: campana.titulo || campana.alias || "Campa\xF1a sin t\xEDtulo"
      });
      campanaHeader.appendChild(textoCampana);
    }
    const metricasContainer = DOMUtils.createElement("div", {
      className: "campana-metricas"
    });
    const entregablesCount = DOMUtils.createElement("span", {
      className: "entregables-count",
      textContent: `${campana.entregables.length} ${campana.entregables.length === 1 ? "entregable" : "entregables"}`
    });
    metricasContainer.appendChild(entregablesCount);
    if (modo === "hits") {
      const hitsCount = DOMUtils.createElement("span", {
        className: "hits-count",
        textContent: `${campana.hits} hits`
      });
      metricasContainer.appendChild(hitsCount);
    } else {
      if (campana.diferenciaDiasProximo !== void 0) {
        const vencimientoSpan = DOMUtils.createElement("span", {
          className: `vencimiento-badge ${this.obtenerClaseVencimiento(campana.diferenciaDiasProximo, campana.estado)}`,
          textContent: this.formatearDiasVencimiento(campana.diferenciaDiasProximo, campana.estado)
        });
        metricasContainer.appendChild(vencimientoSpan);
      } else {
        const vencimientoSpan = DOMUtils.createElement("span", {
          className: "vencimiento-badge",
          textContent: "Sin fechas"
        });
        metricasContainer.appendChild(vencimientoSpan);
      }
    }
    campanaHeader.appendChild(metricasContainer);
    campanaElement.appendChild(campanaHeader);
    const campanaContent = DOMUtils.createElement("div", {
      className: "campana-content"
    });
    if (campana.entregables.length === 0) {
      console.log(`\u{1F50D} \u26A0\uFE0F La campa\xF1a ${campana.titulo} no tiene entregables asociados`);
      const infoNoData = DOMUtils.createElement("div", {
        className: "empty-message",
        textContent: "Esta campa\xF1a no tiene entregables asociados."
      });
      campanaContent.appendChild(infoNoData);
    } else {
      console.log(`\u{1F50D} Renderizando ${campana.entregables.length} entregables para la campa\xF1a ${campana.titulo}`);
      const entregablesOrdenados = this.ordenarEntregables(campana.entregables, modo);
      const tablaEntregables = this.crearTablaEntregables(entregablesOrdenados, modo);
      campanaContent.appendChild(tablaEntregables);
    }
    campanaElement.appendChild(campanaContent);
    return campanaElement;
  }
  /**
   * Crea una tabla para mostrar los entregables
   */
  crearTablaEntregables(entregables, modo) {
    const tabla = DOMUtils.createElement("table", {
      className: "entregables-tabla"
    });
    const thead = DOMUtils.createElement("thead");
    const headerRow = DOMUtils.createElement("tr");
    const columnas = [
      { id: "estado", texto: "Estado", className: "col-estado", width: "40px" },
      { id: "titulo", texto: "Entregable", className: "col-titulo", width: "50%" }
    ];
    if (modo === "hits") {
      columnas.push({ id: "hits", texto: "Hits", className: "col-hits", width: "80px" });
    } else {
      columnas.push({ id: "fecha", texto: "Publicaci\xF3n", className: "col-fecha", width: "120px" });
      columnas.push({ id: "dias", texto: "D\xEDas", className: "col-dias", width: "80px" });
    }
    columnas.forEach((columna) => {
      const th = DOMUtils.createElement("th", {
        className: columna.className,
        textContent: columna.texto,
        styles: {
          width: columna.width
        }
      });
      headerRow.appendChild(th);
    });
    thead.appendChild(headerRow);
    tabla.appendChild(thead);
    const tbody = DOMUtils.createElement("tbody");
    entregables.forEach((entregable) => {
      const row = DOMUtils.createElement("tr", {
        className: `entregable-row ${this.obtenerClaseParaEstado(entregable.estado)}`
      });
      const estadoCell = DOMUtils.createElement("td", {
        className: "col-estado"
      });
      const estadoBadge = DOMUtils.createElement("span", {
        className: "estado-badge-small",
        textContent: entregable.estado
      });
      estadoCell.appendChild(estadoBadge);
      row.appendChild(estadoCell);
      const tituloCell = DOMUtils.createElement("td", {
        className: "col-titulo"
      });
      try {
        const enlaceEntregable = DOMUtils.createElement("a", {
          className: "entregable-link",
          textContent: entregable.titulo || entregable.alias || "Entregable sin t\xEDtulo",
          attributes: {
            "data-href": entregable.path
          },
          events: {
            click: (event) => {
              event.preventDefault();
              this.plugin.app.workspace.openLinkText(entregable.path, "", true);
            }
          }
        });
        tituloCell.appendChild(enlaceEntregable);
      } catch (e) {
        console.error(`\u{1F50D} Error al crear enlace del entregable: ${e.message}`);
        const textoEntregable = DOMUtils.createElement("span", {
          textContent: entregable.titulo || entregable.alias || "Entregable sin t\xEDtulo"
        });
        tituloCell.appendChild(textoEntregable);
      }
      row.appendChild(tituloCell);
      if (modo === "hits") {
        const hitsCell = DOMUtils.createElement("td", {
          className: "col-hits",
          textContent: String(entregable.hits || 0)
        });
        row.appendChild(hitsCell);
      } else {
        const fechaCell = DOMUtils.createElement("td", {
          className: "col-fecha",
          textContent: this.formatearFechaPublicacion(entregable.fechaPublicacion)
        });
        row.appendChild(fechaCell);
        const diasCell = DOMUtils.createElement("td", {
          className: "col-dias"
        });
        if (entregable.diferenciaDias !== void 0) {
          const diasSpan = DOMUtils.createElement("span", {
            // Pasar el estado como segundo parámetro para determinar la clase adecuada
            className: `dias-badge ${this.obtenerClaseVencimiento(entregable.diferenciaDias, entregable.estado)}`,
            // Pasar el estado para formatear el texto adecuadamente
            textContent: this.formatearDiasVencimiento(entregable.diferenciaDias, entregable.estado)
          });
          diasCell.appendChild(diasSpan);
        } else {
          diasCell.textContent = "\u2014";
        }
        row.appendChild(diasCell);
      }
      tbody.appendChild(row);
    });
    tabla.appendChild(tbody);
    return tabla;
  }
  /**
   * Obtiene la clase CSS correspondiente al estado de un entregable
   */
  obtenerClaseParaEstado(estado) {
    switch (estado) {
      case "\u{1F7E2}":
        return "estado-activo";
      case "\u{1F7E1}":
        return "estado-espera";
      case "\u{1F534}":
        return "estado-detenido";
      case "\u{1F535}":
        return "estado-archivado";
      default:
        return "";
    }
  }
  /**
  * Obtiene todos los proyectos GTD con sus campañas y entregables asociados - Versión optimizada
  * Incluye todos los estados con prioridad específica
  */
  async obtenerTodosLosProyectos(dv2, modo) {
    var _a, _b, _c;
    try {
      console.log("\u{1F50D} M\xE9todo obtenerTodosLosProyectos iniciado");
      const hoy = window.moment().startOf("day");
      console.log("\u{1F50D} Consultando proyectos PGTD");
      const proyectosGTD = dv2.pages().where((p) => p.type === "PGTD").array();
      console.log(`\u{1F50D} Encontrados ${proyectosGTD.length} proyectos PGTD en total`);
      proyectosGTD.forEach((proy, idx) => {
        console.log(`\u{1F50D} Proyecto PGTD ${idx + 1}: ${proy.titulo || proy.file.basename} (Estado: ${proy.estado || "Sin estado"})`);
        console.log(`    - Path: ${proy.file.path}`);
      });
      console.log("\u{1F50D} Consultando todas las campa\xF1as");
      const todasLasCampanas = dv2.pages().where((p) => p.type === "Cp").array();
      console.log(`\u{1F50D} Encontradas ${todasLasCampanas.length} campa\xF1as en total`);
      todasLasCampanas.forEach((campana, idx) => {
        console.log(`\u{1F50D} Campa\xF1a ${idx + 1}: ${campana.titulo || campana.file.basename} (Estado: ${campana.estado || "Sin estado"})`);
        console.log(`    - Path: ${campana.file.path}`);
        console.log(`    - ProyectoGTD: ${JSON.stringify(campana.proyectoGTD)}`);
      });
      console.log("\u{1F50D} Consultando todos los entregables");
      const todosLosEntregables = dv2.pages().where((p) => p.type === "EMkt").array();
      console.log(`\u{1F50D} Encontrados ${todosLosEntregables.length} entregables en total`);
      const proyectos = [];
      const referenciaApuntaA = (ref, targetPath, targetBasename, targetTitulo) => {
        if (ref && typeof ref === "object" && ref.path) {
          const coincide = ref.path === targetPath;
          if (coincide) {
            console.log(`\u{1F50D} Coincidencia por objeto.path: ${ref.path} === ${targetPath}`);
          }
          return coincide;
        }
        if (ref && typeof ref === "string") {
          const wikiLinkMatch = ref.match(/\[\[(.*?)(?:\|(.*?))?\]\]/);
          if (wikiLinkMatch) {
            const path = wikiLinkMatch[1];
            const coincidePorPath2 = path === targetPath;
            const coincidePorNombre2 = path === targetBasename;
            const coincidePorTitulo2 = targetTitulo && path === targetTitulo;
            if (coincidePorPath2 || coincidePorNombre2 || coincidePorTitulo2) {
              console.log(`\u{1F50D} Coincidencia por wikilink: ${path} coincide con ${targetPath}, ${targetBasename} o ${targetTitulo}`);
            }
            return coincidePorPath2 || coincidePorNombre2 || coincidePorTitulo2;
          }
          const coincidePorPath = ref === targetPath;
          const coincidePorNombre = ref === targetBasename;
          const coincidePorTitulo = targetTitulo && ref === targetTitulo;
          if (coincidePorPath || coincidePorNombre || coincidePorTitulo) {
            console.log(`\u{1F50D} Coincidencia directa: ${ref} coincide con ${targetPath}, ${targetBasename} o ${targetTitulo}`);
          }
          return coincidePorPath || coincidePorNombre || coincidePorTitulo;
        }
        return false;
      };
      for (const proy of proyectosGTD) {
        console.log(`\u{1F50D} Procesando proyecto: ${proy.titulo || proy.file.basename}`);
        const campanasDelProyecto = todasLasCampanas.filter((camp) => {
          if (!camp.proyectoGTD) {
            return false;
          }
          const referencias = Array.isArray(camp.proyectoGTD) ? camp.proyectoGTD : [camp.proyectoGTD];
          for (const ref of referencias) {
            if (referenciaApuntaA(ref, proy.file.path, proy.file.basename, proy.titulo)) {
              console.log(`\u{1F50D} \u2705 La campa\xF1a ${camp.titulo || camp.file.basename} est\xE1 asociada al proyecto ${proy.titulo || proy.file.basename}`);
              return true;
            }
          }
          return false;
        });
        console.log(`\u{1F50D} Encontradas ${campanasDelProyecto.length} campa\xF1as para el proyecto ${proy.titulo || proy.file.basename}`);
        if (campanasDelProyecto.length === 0) {
          console.log(`\u{1F50D} \u26A0\uFE0F El proyecto ${proy.titulo || proy.file.basename} no tiene campa\xF1as asociadas, se omitir\xE1`);
          continue;
        }
        const campanasProcessed = [];
        let totalHitsProyecto = 0;
        for (const camp of campanasDelProyecto) {
          console.log(`\u{1F50D} Procesando campa\xF1a: ${camp.titulo || camp.file.basename}`);
          const entregablesDeCampana = todosLosEntregables.filter((ent) => {
            if (!ent.asunto) {
              return false;
            }
            const referencias = Array.isArray(ent.asunto) ? ent.asunto : [ent.asunto];
            for (const ref of referencias) {
              if (referenciaApuntaA(ref, camp.file.path, camp.file.basename, camp.titulo)) {
                console.log(`\u{1F50D} \u2705 El entregable ${ent.titulo || ent.file.basename} est\xE1 asociado a la campa\xF1a ${camp.titulo || camp.file.basename}`);
                return true;
              }
            }
            return false;
          });
          console.log(`\u{1F50D} Encontrados ${entregablesDeCampana.length} entregables para la campa\xF1a ${camp.titulo || camp.file.basename}`);
          const entregablesProcessed = [];
          let totalHitsCampana = 0;
          let minDiasCampana;
          for (const ent of entregablesDeCampana) {
            let diferenciaDias;
            if (ent.publicacion) {
              try {
                const fechaPublicacion = window.moment(ent.publicacion.toString(), "YYYY-MM-DD");
                if (fechaPublicacion.isValid()) {
                  diferenciaDias = fechaPublicacion.diff(hoy, "days");
                  console.log(`\u{1F50D} Entregable ${ent.titulo || ent.file.basename}: publicaci\xF3n ${ent.publicacion} (${diferenciaDias} d\xEDas), estado: ${ent.estado || "Sin estado"}`);
                }
              } catch (e) {
                console.warn(`\u{1F50D} Error procesando fecha para ${ent.file.path}: ${e.message}`);
              }
            }
            if (diferenciaDias !== void 0) {
              const estado = ent.estado || "\u{1F7E1}";
              if (this.entregableAConsiderarParaVencimiento(estado)) {
                if (minDiasCampana === void 0 || diferenciaDias < minDiasCampana) {
                  minDiasCampana = diferenciaDias;
                }
              }
            }
            let hits = 0;
            if (ent.hits !== void 0 && ent.hits !== null) {
              hits = typeof ent.hits === "number" ? ent.hits : parseFloat(ent.hits) || 0;
            }
            const entregableInfo = {
              id: ent.id || `ent-${entregablesProcessed.length}`,
              titulo: ent.titulo || ent.file.basename,
              path: ent.file.path,
              hits,
              estado: ent.estado || "\u{1F7E1}",
              // Por defecto amarillo si no hay estado
              fechaPublicacion: ent.publicacion,
              diferenciaDias,
              alias: (_a = ent.aliases) == null ? void 0 : _a[0]
            };
            entregablesProcessed.push(entregableInfo);
            if (ent.estado === "\u{1F7E2}" || ent.estado === "\u{1F535}") {
              totalHitsCampana += hits;
            }
          }
          const campanaInfo = {
            id: camp.id || `camp-${campanasProcessed.length}`,
            titulo: camp.titulo || camp.file.basename,
            path: camp.file.path,
            entregables: entregablesProcessed,
            hits: totalHitsCampana,
            estado: camp.estado || "\u{1F7E1}",
            // Por defecto amarillo si no hay estado
            fechaInicio: camp.fechaInicio,
            fechaFin: camp.fechaFin,
            alias: (_b = camp.aliases) == null ? void 0 : _b[0],
            diferenciaDiasProximo: minDiasCampana
          };
          campanasProcessed.push(campanaInfo);
          if (camp.estado === "\u{1F7E2}" || camp.estado === "\u{1F535}") {
            totalHitsProyecto += totalHitsCampana;
          }
          console.log(`\u{1F50D} Campa\xF1a ${campanaInfo.titulo} a\xF1adida con ${entregablesProcessed.length} entregables y ${totalHitsCampana} hits`);
        }
        const proyectoInfo = {
          id: proy.id || `proy-${proyectos.length}`,
          titulo: proy.titulo || proy.file.basename,
          path: proy.file.path,
          campanas: campanasProcessed,
          hits: totalHitsProyecto,
          estado: proy.estado || "\u{1F7E1}",
          // Por defecto amarillo si no hay estado
          alias: (_c = proy.aliases) == null ? void 0 : _c[0]
        };
        proyectos.push(proyectoInfo);
        console.log(`\u{1F50D} Proyecto ${proyectoInfo.titulo} a\xF1adido con ${campanasProcessed.length} campa\xF1as y ${totalHitsProyecto} hits`);
      }
      console.log(`\u{1F50D} Total de proyectos procesados con campa\xF1as: ${proyectos.length}`);
      return proyectos;
    } catch (error) {
      console.error("\u{1F50D} Error al obtener datos de proyectos y campa\xF1as:", error);
      throw error;
    }
  }
  /**
   * Obtiene los datos de un proyecto específico
   */
  async obtenerDatosProyecto(dv2, archivoProyecto, modo) {
    try {
      console.log(`\u{1F50D} Obteniendo datos espec\xEDficos para el proyecto: ${archivoProyecto.path}`);
      const proyectos = await this.obtenerTodosLosProyectos(dv2, modo);
      const proyectoEncontrado = proyectos.find((p) => p.path === archivoProyecto.path);
      if (proyectoEncontrado) {
        console.log(`\u{1F50D} Proyecto encontrado: ${proyectoEncontrado.titulo} con ${proyectoEncontrado.campanas.length} campa\xF1as`);
      } else {
        console.log(`\u{1F50D} \u26A0\uFE0F No se encontr\xF3 el proyecto en la lista de proyectos procesados`);
      }
      return proyectoEncontrado || null;
    } catch (error) {
      console.error(`\u{1F50D} Error al obtener datos del proyecto ${archivoProyecto.path}:`, error);
      throw error;
    }
  }
  /**
  * Formatea una fecha en formato ISO a un formato más legible
  * @param fechaStr String de fecha en formato ISO o similar
  * @returns Fecha formateada como "dddd, dd de mm del yyyy"
  */
  formatearFechaPublicacion(fechaStr) {
    if (!fechaStr)
      return "No definida";
    try {
      const fecha = window.moment(fechaStr.toString());
      if (!fecha.isValid()) {
        console.log(`\u{1F50D} Error: Fecha inv\xE1lida ${fechaStr}`);
        return fechaStr;
      }
      const locale = window.moment.locale();
      if (locale !== "es") {
        window.moment.locale("es");
      }
      const fechaFormateada = fecha.format("dddd, DD [de] MMMM [del] YYYY");
      if (locale !== "es") {
        window.moment.locale(locale);
      }
      return fechaFormateada;
    } catch (e) {
      console.warn(`\u{1F50D} Error al formatear fecha: ${e.message}`);
      return fechaStr || "No definida";
    }
  }
  /**
   * Determina la prioridad de un estado para ordenamiento
   * @param estado Emoji de estado
   * @returns Valor numérico de prioridad (menor = mayor prioridad)
   */
  getPrioridadEstado(estado) {
    switch (estado) {
      case "\u{1F7E2}":
        return 1;
      case "\u{1F7E1}":
        return 2;
      case "\u{1F535}":
        return 3;
      case "\u{1F534}":
        return 4;
      default:
        return 5;
    }
  }
  /**
   * Ordena los proyectos según el modo seleccionado y respetando la prioridad de estados
   */
  ordenarProyectos(proyectos, modo) {
    if (modo === "hits") {
      return [...proyectos].sort((a, b) => {
        const prioridadA = this.getPrioridadEstado(a.estado);
        const prioridadB = this.getPrioridadEstado(b.estado);
        if (prioridadA !== prioridadB) {
          return prioridadA - prioridadB;
        }
        return b.hits - a.hits;
      });
    } else {
      return [...proyectos].sort((a, b) => {
        const prioridadA = this.getPrioridadEstado(a.estado);
        const prioridadB = this.getPrioridadEstado(b.estado);
        if (prioridadA !== prioridadB) {
          return prioridadA - prioridadB;
        }
        const proximoA = this.obtenerDiasProximoVencimiento(a);
        const proximoB = this.obtenerDiasProximoVencimiento(b);
        if (proximoA === null && proximoB === null)
          return 0;
        if (proximoA === null)
          return 1;
        if (proximoB === null)
          return -1;
        return proximoA - proximoB;
      });
    }
  }
  /**
   * Ordena las campañas según el modo seleccionado y respetando la prioridad de estados
   */
  ordenarCampanas(campanas, modo) {
    if (campanas.length === 0) {
      return [];
    }
    if (modo === "hits") {
      return [...campanas].sort((a, b) => {
        const prioridadA = this.getPrioridadEstado(a.estado);
        const prioridadB = this.getPrioridadEstado(b.estado);
        if (prioridadA !== prioridadB) {
          return prioridadA - prioridadB;
        }
        return b.hits - a.hits;
      });
    } else {
      return [...campanas].sort((a, b) => {
        const prioridadA = this.getPrioridadEstado(a.estado);
        const prioridadB = this.getPrioridadEstado(b.estado);
        if (prioridadA !== prioridadB) {
          return prioridadA - prioridadB;
        }
        if (a.diferenciaDiasProximo === void 0 && b.diferenciaDiasProximo === void 0)
          return 0;
        if (a.diferenciaDiasProximo === void 0)
          return 1;
        if (b.diferenciaDiasProximo === void 0)
          return -1;
        return a.diferenciaDiasProximo - b.diferenciaDiasProximo;
      });
    }
  }
  /**
   * Ordena los entregables según el modo seleccionado y respetando la prioridad de estados
   */
  ordenarEntregables(entregables, modo) {
    if (entregables.length === 0) {
      return [];
    }
    if (modo === "hits") {
      return [...entregables].sort((a, b) => {
        const prioridadA = this.getPrioridadEstado(a.estado);
        const prioridadB = this.getPrioridadEstado(b.estado);
        if (prioridadA !== prioridadB) {
          return prioridadA - prioridadB;
        }
        return b.hits - a.hits;
      });
    } else {
      return [...entregables].sort((a, b) => {
        const prioridadA = this.getPrioridadEstado(a.estado);
        const prioridadB = this.getPrioridadEstado(b.estado);
        if (prioridadA !== prioridadB) {
          return prioridadA - prioridadB;
        }
        if (a.diferenciaDias === void 0 && b.diferenciaDias === void 0)
          return 0;
        if (a.diferenciaDias === void 0)
          return 1;
        if (b.diferenciaDias === void 0)
          return -1;
        return a.diferenciaDias - b.diferenciaDias;
      });
    }
  }
  /**
   * Modificaciones clave al ProyectoCampanasComponent para corregir el manejo de fechas según estado
   */
  /**
   * Determina si un entregable debe considerarse para el cálculo de fechas de vencimiento
   * @param estado Estado del entregable (emoji)
   * @returns true si el entregable debe considerarse para vencimientos
   */
  entregableAConsiderarParaVencimiento(estado) {
    return estado === "\u{1F7E2}";
  }
  /**
   * Obtiene los días hasta el próximo vencimiento en un proyecto, considerando solo entregables activos
   */
  obtenerDiasProximoVencimiento(proyecto) {
    let minDias = null;
    proyecto.campanas.forEach((campana) => {
      if (campana.estado === "\u{1F7E2}") {
        if (campana.diferenciaDiasProximo !== void 0) {
          if (minDias === null || campana.diferenciaDiasProximo < minDias) {
            minDias = campana.diferenciaDiasProximo;
          }
        }
      }
    });
    return minDias;
  }
  /**
   * Obtiene la clase CSS para la celda de días según el estado del entregable y su fecha
   * @param diferenciaDias Días hasta la fecha de publicación (negativo si ya pasó)
   * @param estado Estado del entregable
   * @returns Clase CSS para aplicar
   */
  obtenerClaseVencimiento(diferenciaDias, estado = "\u{1F7E2}") {
    if (estado === "\u{1F535}") {
      return "completado";
    }
    if (estado === "\u{1F534}") {
      return "cancelado";
    }
    if (estado === "\u{1F7E1}") {
      return diferenciaDias < 0 ? "pausado-vencido" : "pausado";
    }
    if (diferenciaDias < 0)
      return "vencido";
    if (diferenciaDias <= 1)
      return "hoy";
    if (diferenciaDias <= 3)
      return "proximo";
    if (diferenciaDias <= 7)
      return "cercano";
    return "futuro";
  }
  /**
   * Formatea los días para mostrar de forma legible según el estado del entregable
   * @param diferenciaDias Días hasta la fecha de publicación
   * @param estado Estado del entregable
   * @returns Texto formateado para mostrar
   */
  formatearDiasVencimiento(diferenciaDias, estado = "\u{1F7E2}") {
    if (estado === "\u{1F535}") {
      return "Completado";
    }
    if (estado === "\u{1F534}") {
      return "Cancelado";
    }
    if (estado === "\u{1F7E1}") {
      if (diferenciaDias < 0) {
        const diasAbs = Math.abs(diferenciaDias);
        return `En pausa (${diasAbs} ${diasAbs === 1 ? "d\xEDa" : "d\xEDas"})`;
      }
      return `En pausa (${diferenciaDias} d\xEDas)`;
    }
    if (diferenciaDias === 0)
      return "Hoy";
    if (diferenciaDias === 1)
      return "Ma\xF1ana";
    if (diferenciaDias < 0) {
      const diasAbs = Math.abs(diferenciaDias);
      return `Vencido (${diasAbs} ${diasAbs === 1 ? "d\xEDa" : "d\xEDas"})`;
    }
    return `${diferenciaDias} d\xEDas`;
  }
};

// src/modules/noteLifecycleManager/API/addOnsAPI.ts
var addOnsAPI = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.tareasInboxComponent = new TareasInboxComponent(plugin);
    this.proyectoCampanasComponent = new ProyectoCampanasComponent(plugin);
  }
  crearPrevNext(paginas, pagIndice, dv2) {
    let pagina = dv2.current();
    let indice;
    for (let a = 0; a < paginas.length; a++) {
      if (paginas[a].file.name == pagina.file.name) {
        indice = a;
      }
    }
    let links = [];
    if (indice == 0 && paginas.length == 1) {
      links[0] = "";
      links[1] = "";
    } else if (indice == 0) {
      links[0] = "";
      links[1] = "\u27A1\uFE0F " + dv2.func.link(paginas[indice + 1].file.path, this.determinarTextoEnlace(paginas[indice + 1]));
    } else if (indice == paginas.length - 1) {
      links[0] = dv2.func.link(paginas[indice - 1].file.path, this.determinarTextoEnlace(paginas[indice - 1])) + " \u2B05\uFE0F";
      links[1] = "";
    } else {
      links[0] = dv2.func.link(paginas[indice - 1].file.path, this.determinarTextoEnlace(paginas[indice - 1])) + " \u2B05\uFE0F";
      links[1] = "\u27A1\uFE0F " + dv2.func.link(paginas[indice + 1].file.path, this.determinarTextoEnlace(paginas[indice + 1]));
    }
    dv2.paragraph(links[0] + " ==" + dv2.func.link(pagIndice.file.path, pagIndice.titulo || pagIndice.file.name) + "== " + links[1]);
  }
  determinarTextoEnlace(pagina) {
    if (pagina.titulo) {
      return pagina.titulo;
    } else if (pagina.aliases && pagina.aliases.length > 0) {
      return pagina.aliases[0];
    } else {
      return pagina.file.name;
    }
  }
  /**
   * Genera texto de relaciones con enlaces funcionales y formateado con CSS
   * @param pagina La página actual obtenida a través de dv.current()
   * @param dv El objeto dataview para acceder a sus funciones
   * @returns Objeto HTML para ser usado con dv.paragraph()
   */
  generarTextoRelaciones(pagina, dv2) {
    var _a, _b, _c;
    let texto = `${pagina.typeName || "Entregable"} relacionado a `;
    const relaciones = [];
    if (pagina.asunto && Array.isArray(pagina.asunto)) {
      const asuntoLinks = [];
      for (const entryObj of pagina.asunto) {
        const path = entryObj.path || entryObj;
        if (typeof path === "string" && path.length > 0) {
          try {
            const asuntoPage = dv2.page(path);
            if (asuntoPage && asuntoPage.file) {
              const alias = ((_a = asuntoPage.file.aliases) == null ? void 0 : _a[0]) || asuntoPage.titulo || asuntoPage.file.name;
              asuntoLinks.push(dv2.fileLink(asuntoPage.file.path, false, alias));
            } else {
              asuntoLinks.push("asunto no encontrado");
            }
          } catch (e) {
            asuntoLinks.push("asunto no encontrado");
          }
        }
      }
      if (asuntoLinks.length > 0) {
        relaciones.push(`asunto: ${asuntoLinks.join(", ")}`);
      } else {
        relaciones.push("asunto: asunto no encontrado");
      }
    }
    if (pagina.proyectoGTD && (Array.isArray(pagina.proyectoGTD) || typeof pagina.proyectoGTD === "string")) {
      const proyectoLinks = [];
      const proyectoArray = Array.isArray(pagina.proyectoGTD) ? pagina.proyectoGTD : [pagina.proyectoGTD];
      for (const entryObj of proyectoArray) {
        const path = entryObj.path || entryObj;
        if (typeof path === "string" && path.length > 0) {
          try {
            const proyectoPage = dv2.page(path);
            if (proyectoPage && proyectoPage.file) {
              const alias = ((_b = proyectoPage.file.aliases) == null ? void 0 : _b[0]) || proyectoPage.titulo || proyectoPage.file.name;
              proyectoLinks.push(dv2.fileLink(proyectoPage.file.path, false, alias));
            }
          } catch (e) {
            if (typeof entryObj === "string" && entryObj.includes("|")) {
              const partes = entryObj.split("|");
              proyectoLinks.push(partes[partes.length - 1].replace("]]", ""));
            } else {
              const pathParts = path.split("/");
              const fileName = pathParts[pathParts.length - 1].replace(".md", "");
              proyectoLinks.push(fileName);
            }
          }
        }
      }
      if (proyectoLinks.length > 0) {
        relaciones.push(`PGTD: ${proyectoLinks.join(", ")}`);
      }
    }
    if (pagina.areaInteres && (Array.isArray(pagina.areaInteres) || typeof pagina.areaInteres === "string")) {
      const areaLinks = [];
      const areaArray = Array.isArray(pagina.areaInteres) ? pagina.areaInteres : [pagina.areaInteres];
      for (const entryObj of areaArray) {
        const path = entryObj.path || entryObj;
        if (typeof path === "string" && path.length > 0) {
          try {
            const areaPage = dv2.page(path);
            if (areaPage && areaPage.file) {
              const alias = ((_c = areaPage.file.aliases) == null ? void 0 : _c[0]) || areaPage.titulo || areaPage.file.name;
              areaLinks.push(dv2.fileLink(areaPage.file.path, false, alias));
            }
          } catch (e) {
            if (typeof entryObj === "string" && entryObj.includes("|")) {
              const partes = entryObj.split("|");
              areaLinks.push(partes[partes.length - 1].replace("]]", ""));
            } else {
              const pathParts = path.split("/");
              const fileName = pathParts[pathParts.length - 1].replace(".md", "");
              areaLinks.push(fileName);
            }
          }
        }
      }
      if (areaLinks.length > 0) {
        relaciones.push(`AI: ${areaLinks.join(", ")}`);
      }
    }
    if (pagina.areaVida) {
      let areaVidaText = pagina.areaVida;
      if (typeof pagina.areaVida === "string" && pagina.areaVida.includes("[[")) {
        const match2 = pagina.areaVida.match(/\[\[(.*?)\|(.*?)\]\]/);
        if (match2 && match2.length >= 3) {
          areaVidaText = match2[2];
        } else {
          areaVidaText = pagina.areaVida.replace(/\[\[|\]\]/g, "");
        }
      }
      relaciones.push(`AV: ${areaVidaText}`);
    }
    texto += relaciones.join(", ");
    if (pagina.estado) {
      texto += ` en estado ${pagina.estado}`;
    }
    return dv2.el("span", texto, { cls: "nota-relaciones" });
  }
  /**
   * Genera un árbol de referencias a la nota actual de forma recursiva con elementos toggle
   * @param paginaActual La página actual
   * @param dv Objeto dataview para acceder a sus funciones
   * @param profundidadMaxima Profundidad máxima de recursión (defecto: 3)
   * @param visitadas Set de IDs de páginas ya visitadas para evitar ciclos
   * @param profundidadActual Profundidad actual de recursión
   * @returns Elemento HTML con la estructura de árbol
   */
  generarArbolReferencias(paginaActual, dv2, profundidadMaxima = 3, visitadas = /* @__PURE__ */ new Set(), profundidadActual = 0) {
    if (!paginaActual || !paginaActual.file) {
      console.error("Error: paginaActual no tiene las propiedades necesarias", paginaActual);
      return dv2.el("div", "Error: No se puede generar el \xE1rbol de referencias.", { cls: "backlinks-tree-error" });
    }
    const contenedor = document.createElement("div");
    contenedor.className = "backlinks-tree";
    if (profundidadActual === 0) {
      const tipoNota = paginaActual.typeName || "Nota";
      const alias = paginaActual.file.aliases && paginaActual.file.aliases.length > 0 ? paginaActual.file.aliases[0] : paginaActual.titulo || paginaActual.file.name;
      const titulo = document.createElement("h3");
      titulo.className = "backlinks-tree-title";
      titulo.textContent = `Referencias a ${tipoNota} "${alias}"`;
      contenedor.appendChild(titulo);
    }
    if (profundidadActual >= profundidadMaxima) {
      return contenedor;
    }
    visitadas.add(paginaActual.file.path);
    let todasLasPaginas;
    try {
      todasLasPaginas = dv2.pages();
    } catch (e) {
      console.error("Error al obtener p\xE1ginas:", e);
      const errorMsg = document.createElement("p");
      errorMsg.className = "backlinks-tree-error";
      errorMsg.textContent = "Error al obtener p\xE1ginas de Dataview";
      contenedor.appendChild(errorMsg);
      return contenedor;
    }
    let referenciasDirectas = [];
    try {
      referenciasDirectas = todasLasPaginas.filter((p) => {
        if (!p.asunto)
          return false;
        const asuntos = Array.isArray(p.asunto) ? p.asunto : [p.asunto];
        for (const asunto of asuntos) {
          if (asunto && typeof asunto === "object" && asunto.path === paginaActual.file.path) {
            return true;
          }
          if (typeof asunto === "string" && asunto.includes(paginaActual.file.path)) {
            return true;
          }
          if (typeof asunto === "string") {
            const aliases = paginaActual.file.aliases || [];
            for (const alias of aliases) {
              if (asunto.includes(alias)) {
                return true;
              }
            }
            if (asunto.includes(paginaActual.file.name)) {
              return true;
            }
          }
        }
        return false;
      });
    } catch (e) {
      console.error("Error al filtrar referencias:", e);
      const errorMsg = document.createElement("p");
      errorMsg.className = "backlinks-tree-error";
      errorMsg.textContent = "Error al procesar referencias";
      contenedor.appendChild(errorMsg);
      return contenedor;
    }
    if (referenciasDirectas.length === 0) {
      if (profundidadActual === 0) {
        const mensaje = document.createElement("p");
        mensaje.className = "backlinks-tree-empty";
        mensaje.textContent = "No se encontraron referencias a esta nota";
        contenedor.appendChild(mensaje);
      }
      return contenedor;
    }
    referenciasDirectas = this.ordenarReferencias(referenciasDirectas);
    const lista = document.createElement("ul");
    lista.className = `backlinks-tree-level-${profundidadActual}`;
    for (const referencia of referenciasDirectas) {
      try {
        if (visitadas.has(referencia.file.path)) {
          continue;
        }
        const item = document.createElement("li");
        item.className = "backlinks-tree-item";
        const itemContainer = document.createElement("div");
        itemContainer.className = "backlinks-tree-item-container";
        const tipo = referencia.typeName || "Nota";
        const tipoEl = document.createElement("span");
        tipoEl.className = "backlinks-tree-type";
        tipoEl.textContent = `[${tipo}] `;
        itemContainer.appendChild(tipoEl);
        const estado = referencia.estado || "";
        if (estado) {
          const estadoEl = document.createElement("span");
          estadoEl.className = "backlinks-tree-estado";
          estadoEl.textContent = `${estado} `;
          estadoEl.style.marginRight = "4px";
          itemContainer.appendChild(estadoEl);
        }
        let nombreMostrado = "";
        try {
          nombreMostrado = referencia.file.aliases && referencia.file.aliases.length > 0 ? referencia.file.aliases[0] : referencia.titulo || referencia.file.name;
        } catch (e) {
          nombreMostrado = referencia.file.name || "Sin nombre";
        }
        const enlace = document.createElement("a");
        enlace.textContent = nombreMostrado;
        enlace.className = "internal-link";
        enlace.setAttribute("data-href", referencia.file.path);
        enlace.addEventListener("click", (event) => {
          event.preventDefault();
          const path = event.target.getAttribute("data-href");
          if (path) {
            app.workspace.openLinkText(path, "", true);
          }
        });
        itemContainer.appendChild(enlace);
        try {
          const nuevoVisitadas = /* @__PURE__ */ new Set([...visitadas]);
          nuevoVisitadas.add(referencia.file.path);
          const subReferencias = this.generarArbolReferencias(
            referencia,
            dv2,
            profundidadMaxima,
            nuevoVisitadas,
            profundidadActual + 1
          );
          if (subReferencias.children && subReferencias.children.length > 0) {
            const tieneContenidoUtil = subReferencias.children.length > 1 || subReferencias.children.length === 1 && !subReferencias.children[0].classList.contains("backlinks-tree-title");
            if (tieneContenidoUtil) {
              const toggleButton = document.createElement("span");
              toggleButton.className = "backlinks-tree-toggle";
              toggleButton.textContent = "\u25BA";
              itemContainer.insertBefore(toggleButton, itemContainer.firstChild);
              const subContainer = document.createElement("div");
              subContainer.className = "backlinks-tree-subcontainer";
              subContainer.style.display = "none";
              subContainer.appendChild(subReferencias);
              toggleButton.addEventListener("click", () => {
                if (subContainer.style.display === "none") {
                  subContainer.style.display = "block";
                  toggleButton.textContent = "\u25BC";
                  toggleButton.classList.add("open");
                } else {
                  subContainer.style.display = "none";
                  toggleButton.textContent = "\u25BA";
                  toggleButton.classList.remove("open");
                }
              });
              item.appendChild(itemContainer);
              item.appendChild(subContainer);
            } else {
              item.appendChild(itemContainer);
            }
          } else {
            item.appendChild(itemContainer);
          }
        } catch (e) {
          console.error("Error en la recursi\xF3n para " + referencia.file.path, e);
          const errorMsg = document.createElement("span");
          errorMsg.className = "backlinks-tree-error";
          errorMsg.textContent = " (Error al obtener subreferencias)";
          itemContainer.appendChild(errorMsg);
          item.appendChild(itemContainer);
        }
        lista.appendChild(item);
      } catch (e) {
        console.error("Error al procesar referencia:", e);
        continue;
      }
    }
    try {
      contenedor.appendChild(lista);
    } catch (e) {
      console.error("Error al a\xF1adir lista al contenedor:", e);
      const errorMsg = document.createElement("p");
      errorMsg.className = "backlinks-tree-error";
      errorMsg.textContent = "Error al generar estructura de \xE1rbol";
      contenedor.appendChild(errorMsg);
    }
    return contenedor;
  }
  /**
   * Ordena un array de referencias según tres criterios jerárquicos:
   * 1. Por tipo de nota (typeName)
   * 2. Por estado (sin estado → 🟢 → 🟡 → 🔴 → 🔵)
   * 3. Por fecha de creación (más reciente primero)
   * 
   * @param {Array} referencias - Array de referencias a ordenar
   * @returns {Array} - Array ordenado de referencias
   */
  ordenarReferencias(referencias) {
    const pesoEstado = (estado) => {
      if (!estado)
        return 0;
      switch (estado) {
        case "\u{1F7E2}":
          return 1;
        case "\u{1F7E1}":
          return 2;
        case "\u{1F534}":
          return 3;
        case "\u{1F535}":
          return 4;
        default:
          return 5;
      }
    };
    return [...referencias].sort((a, b) => {
      const tipoA = a.typeName || "";
      const tipoB = b.typeName || "";
      if (tipoA !== tipoB) {
        return tipoA.localeCompare(tipoB);
      }
      const estadoA = pesoEstado(a.estado);
      const estadoB = pesoEstado(b.estado);
      if (estadoA !== estadoB) {
        return estadoA - estadoB;
      }
      let fechaA = a.file && a.file.ctime ? a.file.ctime : 0;
      let fechaB = b.file && b.file.ctime ? b.file.ctime : 0;
      if (!fechaA && a.fecha) {
        try {
          fechaA = new Date(a.fecha).getTime();
        } catch (e) {
          fechaA = 0;
        }
      }
      if (!fechaB && b.fecha) {
        try {
          fechaB = new Date(b.fecha).getTime();
        } catch (e) {
          fechaB = 0;
        }
      }
      return fechaB - fechaA;
    });
  }
  /**
   * Muestra enlaces sincronizados en Notion desde el frontmatter 
   * que comienzan con el prefijo "link-"
   * @param dv El objeto dataview para acceder a sus funciones
   * @param pagina La página actual (normalmente dv.current())
   * @returns El contenedor con los resultados
   */
  mostrarEnlacesSincronizados(dv2, pagina) {
    const contenedor = dv2.el("div", "", { cls: "notion-links-container" });
    try {
      const meta = pagina.file.frontmatter;
      if (!meta) {
        return contenedor;
      }
      const typeName = meta.typeName || "Elemento";
      const isValidUrl = (url) => {
        return typeof url === "string" && url.startsWith("http") && url.length > 8;
      };
      const enlaces = [];
      Object.entries(meta).filter(([key, value]) => key.startsWith("link-") && isValidUrl(value)).forEach(([key, value]) => enlaces.push({
        label: "Notion",
        url: value
      }));
      if (typeName === "Campa\xF1a" && isValidUrl(meta.indicadores)) {
        enlaces.push({
          label: "Indicadores de campa\xF1a",
          url: meta.indicadores
        });
      }
      if (typeName === "Entregable") {
        if (isValidUrl(meta.piezaNube)) {
          enlaces.push({
            label: "Pieza en la nube",
            url: meta.piezaNube
          });
        }
        if (isValidUrl(meta.urlCanva)) {
          enlaces.push({
            label: "Dise\xF1o en Canva",
            url: meta.urlCanva
          });
        }
      }
      if (enlaces.length === 0) {
        return contenedor;
      }
      enlaces.forEach((enlace) => {
        const parrafo = document.createElement("p");
        parrafo.classList.add("notion-link-item");
        parrafo.textContent = `${typeName} - ${enlace.label} en `;
        const linkElement = document.createElement("a");
        linkElement.href = enlace.url;
        linkElement.textContent = enlace.url;
        linkElement.target = "_blank";
        linkElement.rel = "noopener noreferrer";
        parrafo.appendChild(linkElement);
        contenedor.appendChild(parrafo);
      });
    } catch (error) {
      console.error("Error al procesar enlaces sincronizados:", error);
    }
    return contenedor;
  }
  // -------
  /**
   * Procesa y prepara las estadísticas de tiempo para un proyecto
   * @param proyectoPath Ruta completa del archivo del proyecto
   * @returns Objeto con todas las estadísticas y registros procesados
   */
  async obtenerEstadisticasTiempo(proyectoPath) {
    var _a, _b, _c, _d, _e;
    try {
      const folderRT = this.plugin.settings.folder_RegistroTiempo;
      const formatDuration = (ms) => {
        if (ms === null || ms === void 0 || isNaN(ms)) {
          return "No definido";
        } else {
          let minutos = Math.floor(ms / (1e3 * 60));
          let horas = Math.floor(minutos / 60);
          minutos = minutos % 60;
          let dias = Math.floor(horas / 24);
          horas = horas % 24;
          if (dias > 0) {
            return `${dias} d ${horas} h ${minutos} min`;
          } else if (horas > 0) {
            return `${horas} h ${minutos} min`;
          } else {
            return `${minutos} min`;
          }
        }
      };
      const tiempoDesde = (fechaString) => {
        if (!fechaString)
          return "Desconocido";
        try {
          let fecha;
          if (fechaString.includes(" ")) {
            const partes = fechaString.split(" ");
            const fechaSolo = partes[0];
            const horaSolo = partes[partes.length - 1];
            fecha = /* @__PURE__ */ new Date(`${fechaSolo}T${horaSolo}`);
          } else {
            fecha = new Date(fechaString);
          }
          if (isNaN(fecha.getTime())) {
            return "Fecha inv\xE1lida";
          }
          const ahora2 = /* @__PURE__ */ new Date();
          const diferencia = ahora2.getTime() - fecha.getTime();
          const dias = Math.floor(diferencia / (1e3 * 60 * 60 * 24));
          const horas = Math.floor(diferencia % (1e3 * 60 * 60 * 24) / (1e3 * 60 * 60));
          const minutos = Math.floor(diferencia % (1e3 * 60 * 60) / (1e3 * 60));
          if (dias > 30) {
            return `hace ${Math.floor(dias / 30)} meses`;
          } else if (dias > 0) {
            return `hace ${dias} d\xEDas`;
          } else if (horas > 0) {
            return `hace ${horas} horas`;
          } else {
            return `hace ${minutos} minutos`;
          }
        } catch (e) {
          console.error("Error al procesar fecha:", e);
          return "Error en fecha";
        }
      };
      const proyectoFile = app.vault.getAbstractFileByPath(proyectoPath);
      if (!proyectoFile) {
        return { error: "Proyecto no encontrado" };
      }
      const metadataProyecto = (_a = app.metadataCache.getFileCache(proyectoFile)) == null ? void 0 : _a.frontmatter;
      const proyectoAlias = ((_b = metadataProyecto == null ? void 0 : metadataProyecto.aliases) == null ? void 0 : _b[0]) || (metadataProyecto == null ? void 0 : metadataProyecto.titulo) || proyectoFile.basename;
      const ahora = /* @__PURE__ */ new Date();
      const limite7Dias = new Date(ahora);
      limite7Dias.setDate(ahora.getDate() - 7);
      const limite30Dias = new Date(ahora);
      limite30Dias.setDate(ahora.getDate() - 30);
      let registros = [];
      const allFiles = app.vault.getMarkdownFiles().filter((file) => file.path.startsWith(folderRT + "/"));
      for (const file of allFiles) {
        try {
          const metadata = (_c = app.metadataCache.getFileCache(file)) == null ? void 0 : _c.frontmatter;
          if (!metadata)
            continue;
          let estaRelacionado = false;
          if (metadata.proyectoGTD) {
            if (Array.isArray(metadata.proyectoGTD)) {
              for (const proyecto of metadata.proyectoGTD) {
                const proyectoLimpio = proyecto.replace(/\[\[|\]\]/g, "");
                if (proyectoLimpio.includes(proyectoPath) || proyectoLimpio.includes(proyectoFile.basename) || proyectoAlias && proyectoLimpio.includes(proyectoAlias)) {
                  estaRelacionado = true;
                  break;
                }
              }
            } else if (typeof metadata.proyectoGTD === "string") {
              const proyectoLimpio = metadata.proyectoGTD.replace(/\[\[|\]\]/g, "");
              if (proyectoLimpio.includes(proyectoPath) || proyectoLimpio.includes(proyectoFile.basename) || proyectoAlias && proyectoLimpio.includes(proyectoAlias)) {
                estaRelacionado = true;
              }
            }
          }
          if (estaRelacionado) {
            let asuntoAlias = null;
            if (metadata.asunto && metadata.asunto.length > 0) {
              try {
                const asuntoStr = metadata.asunto[0];
                const asuntoMatch = asuntoStr.match(/\[\[(.*?)(?:\|(.*?))?\]\]/);
                if (asuntoMatch) {
                  const asuntoPath = asuntoMatch[1];
                  const asuntoFile = app.vault.getAbstractFileByPath(asuntoPath + ".md");
                  if (asuntoFile) {
                    const asuntoMetadata = (_d = app.metadataCache.getFileCache(asuntoFile)) == null ? void 0 : _d.frontmatter;
                    asuntoAlias = ((_e = asuntoMetadata == null ? void 0 : asuntoMetadata.aliases) == null ? void 0 : _e[0]) || (asuntoMetadata == null ? void 0 : asuntoMetadata.titulo) || asuntoFile.basename;
                  }
                }
              } catch (e) {
                console.error("Error procesando asunto:", e);
              }
            }
            const registro = {
              path: file.path,
              basename: file.basename,
              descripcion: metadata.descripcion || "Sin descripci\xF3n",
              tiempoTrabajado: metadata.tiempoTrabajado || 0,
              estado: metadata.estado || "\u{1F504}",
              horaInicio: metadata.horaInicio || metadata.fecha || "Desconocido",
              horaFinal: metadata.horaFinal || "",
              asuntoAlias,
              aliases: metadata.aliases || []
            };
            registros.push(registro);
          }
        } catch (error) {
          console.error(`Error procesando archivo ${file.path}:`, error);
        }
      }
      registros.sort((a, b) => {
        if (a.horaFinal && b.horaFinal) {
          return new Date(b.horaFinal).getTime() - new Date(a.horaFinal).getTime();
        }
        return new Date(b.horaInicio).getTime() - new Date(a.horaInicio).getTime();
      });
      let totalTiempoTrabajado = 0;
      let ultimaActividad = registros.length > 0 ? registros[0].horaFinal || registros[0].horaInicio : null;
      let tiempoUltimos7Dias = 0;
      let tiempoUltimos30Dias = 0;
      for (let registro of registros) {
        totalTiempoTrabajado += registro.tiempoTrabajado;
        let fechaRegistro;
        if (registro.horaFinal) {
          const partes = registro.horaFinal.split(" ");
          const fechaSolo = partes[0];
          fechaRegistro = new Date(fechaSolo);
        } else if (registro.horaInicio) {
          const partesFecha = registro.horaInicio.split(" ");
          fechaRegistro = new Date(partesFecha[0]);
        }
        if (fechaRegistro) {
          if (fechaRegistro >= limite7Dias) {
            tiempoUltimos7Dias += registro.tiempoTrabajado;
          }
          if (fechaRegistro >= limite30Dias) {
            tiempoUltimos30Dias += registro.tiempoTrabajado;
          }
        }
        registro.tiempoFormateado = formatDuration(registro.tiempoTrabajado);
      }
      return {
        proyecto: {
          path: proyectoPath,
          nombre: proyectoFile.basename,
          alias: proyectoAlias
        },
        estadisticas: {
          totalTiempoTrabajado: {
            valor: totalTiempoTrabajado,
            formateado: formatDuration(totalTiempoTrabajado)
          },
          numSesiones: registros.length,
          ultimaActividad: {
            fecha: ultimaActividad,
            tiempoDesde: ultimaActividad ? tiempoDesde(ultimaActividad) : "Sin actividad"
          },
          ultimos7Dias: {
            valor: tiempoUltimos7Dias,
            formateado: formatDuration(tiempoUltimos7Dias)
          },
          ultimos30Dias: {
            valor: tiempoUltimos30Dias,
            formateado: formatDuration(tiempoUltimos30Dias)
          }
        },
        registros
      };
    } catch (error) {
      console.error("Error en obtenerEstadisticasTiempo:", error);
      return { error: "Error procesando estad\xEDsticas de tiempo: " + error.message };
    }
  }
  /**
   * Genera el HTML para mostrar las estadísticas de tiempo
   * @param dv Objeto dataview para crear elementos
   * @param datos Objeto con los datos obtenidos de obtenerEstadisticasTiempo
   * @returns Elemento HTML con las estadísticas visualizadas
   */
  mostrarEstadisticasTiempo(dv2, datos) {
    var _a, _b;
    try {
      if (datos.error) {
        const errorDiv = document.createElement("div");
        errorDiv.className = "tiempo-stats-error";
        errorDiv.textContent = datos.error;
        return errorDiv;
      }
      const { estadisticas, registros, proyecto } = datos;
      const contenedor = document.createElement("div");
      contenedor.className = "tiempo-stats-container";
      contenedor.style.padding = "16px 0";
      contenedor.style.width = "100%";
      contenedor.style.boxSizing = "border-box";
      if (!registros || registros.length === 0) {
        const mensajeVacio = document.createElement("p");
        mensajeVacio.className = "tiempo-stats-empty-message";
        mensajeVacio.textContent = "No se encontraron registros de tiempo para este proyecto.";
        contenedor.appendChild(mensajeVacio);
        return contenedor;
      }
      const statsContainer = document.createElement("div");
      statsContainer.className = "tiempo-stats-summary";
      const infoEstadisticas = [
        {
          titulo: "Tiempo Total",
          valor: estadisticas.totalTiempoTrabajado.formateado,
          icono: "\u23F1\uFE0F"
        },
        {
          titulo: "Sesiones",
          valor: estadisticas.numSesiones,
          icono: "\u{1F504}"
        },
        {
          titulo: "\xDAltima Actividad",
          valor: estadisticas.ultimaActividad.tiempoDesde,
          icono: "\u{1F552}"
        },
        {
          titulo: "\xDAltimos 7 d\xEDas",
          valor: ((_a = estadisticas.ultimos7Dias) == null ? void 0 : _a.formateado) || "N/A",
          icono: "\u{1F4C5}"
        },
        {
          titulo: "\xDAltimos 30 d\xEDas",
          valor: ((_b = estadisticas.ultimos30Dias) == null ? void 0 : _b.formateado) || "N/A",
          icono: "\u{1F4C6}"
        }
      ];
      const statsGrid = document.createElement("div");
      statsGrid.className = "tiempo-stats-grid";
      for (const stat of infoEstadisticas) {
        const tarjeta = document.createElement("div");
        tarjeta.className = "tiempo-stat-card";
        const icono = document.createElement("span");
        icono.className = "tiempo-stat-icon";
        icono.textContent = stat.icono;
        const titulo = document.createElement("div");
        titulo.className = "tiempo-stat-title";
        titulo.textContent = stat.titulo;
        const valor = document.createElement("div");
        valor.className = "tiempo-stat-value";
        valor.textContent = stat.valor;
        tarjeta.appendChild(icono);
        tarjeta.appendChild(titulo);
        tarjeta.appendChild(valor);
        statsGrid.appendChild(tarjeta);
      }
      statsContainer.appendChild(statsGrid);
      contenedor.appendChild(statsContainer);
      if (estadisticas.sesionActiva) {
        const activoContainer = document.createElement("div");
        activoContainer.className = "tiempo-sesion-activa-container";
        const tituloActivo = document.createElement("h3");
        tituloActivo.className = "tiempo-activo-title";
        tituloActivo.textContent = "Sesi\xF3n activa";
        activoContainer.appendChild(tituloActivo);
        const registroActivo = registros.find((r) => r.estado === "\u{1F7E2}");
        if (registroActivo) {
          const tarjetaActiva = document.createElement("div");
          tarjetaActiva.className = "tiempo-activo-card";
          const descActiva = document.createElement("div");
          descActiva.className = "tiempo-activo-descripcion";
          descActiva.textContent = registroActivo.descripcion;
          tarjetaActiva.appendChild(descActiva);
          const tiempoEjecucion = document.createElement("div");
          tiempoEjecucion.className = "tiempo-ejecucion";
          tiempoEjecucion.id = `tiempo-ejecucion-${estadisticas.sesionActiva.id}`;
          tiempoEjecucion.textContent = estadisticas.sesionActiva.tiempoFormateado;
          tarjetaActiva.appendChild(tiempoEjecucion);
          const enlaceRegistro = document.createElement("a");
          enlaceRegistro.className = "tiempo-activo-enlace internal-link";
          enlaceRegistro.href = registroActivo.path;
          enlaceRegistro.setAttribute("data-href", registroActivo.path);
          enlaceRegistro.textContent = "Ver registro completo";
          enlaceRegistro.addEventListener("click", (event) => {
            event.preventDefault();
            const href = enlaceRegistro.getAttribute("data-href");
            if (href) {
              app.workspace.openLinkText(href, "", false);
            }
          });
          tarjetaActiva.appendChild(enlaceRegistro);
          activoContainer.appendChild(tarjetaActiva);
        }
        contenedor.appendChild(activoContainer);
      }
      const tituloTabla = document.createElement("h3");
      tituloTabla.className = "tiempo-table-title";
      tituloTabla.textContent = "Registros de tiempo";
      contenedor.appendChild(tituloTabla);
      const tabla = document.createElement("table");
      tabla.className = "tiempo-registros-table";
      tabla.style.width = "100%";
      tabla.style.tableLayout = "fixed";
      tabla.style.borderCollapse = "collapse";
      tabla.style.margin = "0";
      tabla.style.padding = "0";
      const encabezado = document.createElement("thead");
      const filaEncabezado = document.createElement("tr");
      const encabezados = [
        { texto: "Descripci\xF3n", ancho: "60%", align: "left" },
        { texto: "Duraci\xF3n", ancho: "15%", align: "center" },
        { texto: "Fecha", ancho: "25%", align: "left" }
      ];
      for (const { texto, ancho, align } of encabezados) {
        const th = document.createElement("th");
        th.textContent = texto;
        th.style.width = ancho;
        th.style.textAlign = align;
        th.style.padding = "10px";
        if (texto === "Descripci\xF3n") {
          th.style.paddingLeft = "0";
        }
        filaEncabezado.appendChild(th);
      }
      encabezado.appendChild(filaEncabezado);
      tabla.appendChild(encabezado);
      const cuerpo = document.createElement("tbody");
      for (const registro of registros) {
        const fila = document.createElement("tr");
        const celdaDescripcion = document.createElement("td");
        celdaDescripcion.style.width = "60%";
        celdaDescripcion.style.paddingLeft = "0";
        celdaDescripcion.style.whiteSpace = "normal";
        celdaDescripcion.style.wordWrap = "break-word";
        celdaDescripcion.style.wordBreak = "break-word";
        celdaDescripcion.style.overflowWrap = "break-word";
        try {
          const descripcionDiv = document.createElement("div");
          descripcionDiv.style.display = "inline";
          descripcionDiv.style.whiteSpace = "normal";
          descripcionDiv.style.wordWrap = "break-word";
          descripcionDiv.style.wordBreak = "break-word";
          descripcionDiv.textContent = registro.descripcion || "Sin descripci\xF3n";
          celdaDescripcion.appendChild(descripcionDiv);
          const enlaceSpan = document.createElement("span");
          enlaceSpan.className = "tiempo-ver-mas";
          enlaceSpan.appendChild(document.createTextNode(" ("));
          const enlace = document.createElement("a");
          enlace.className = "internal-link";
          enlace.href = registro.path;
          enlace.setAttribute("data-href", registro.path);
          enlace.textContent = "ver";
          enlace.addEventListener("click", (event) => {
            event.preventDefault();
            const href = enlace.getAttribute("data-href");
            if (href) {
              app.workspace.openLinkText(href, "", false);
            }
          });
          enlaceSpan.appendChild(enlace);
          enlaceSpan.appendChild(document.createTextNode(")"));
          celdaDescripcion.appendChild(enlaceSpan);
        } catch (e) {
          celdaDescripcion.textContent = registro.descripcion || "Sin descripci\xF3n";
        }
        fila.appendChild(celdaDescripcion);
        const celdaDuracion = document.createElement("td");
        celdaDuracion.style.width = "15%";
        celdaDuracion.style.textAlign = "center";
        celdaDuracion.textContent = registro.tiempoFormateado;
        fila.appendChild(celdaDuracion);
        const celdaFecha = document.createElement("td");
        celdaFecha.style.width = "25%";
        celdaFecha.style.whiteSpace = "normal";
        celdaFecha.style.wordWrap = "break-word";
        celdaFecha.textContent = registro.horaFinal || registro.horaInicio;
        fila.appendChild(celdaFecha);
        cuerpo.appendChild(fila);
      }
      tabla.appendChild(cuerpo);
      contenedor.appendChild(tabla);
      return contenedor;
    } catch (error) {
      console.error("Error al mostrar estad\xEDsticas de tiempo:", error);
      const errorDiv = document.createElement("div");
      errorDiv.className = "tiempo-stats-error";
      errorDiv.textContent = "Error al mostrar estad\xEDsticas: " + error.message;
      return errorDiv;
    }
  }
  // ---- TAREAS
  /**
   * Genera un árbol de tareas pendientes y en progreso de la nota actual y sus referencias
   * @param {Object} paginaActual - La página actual obtenida a través de dv.current()
   * @param {Object} dv - El objeto dataview para acceder a sus funciones
   * @param {Number} profundidadMaxima - Profundidad máxima de recursión (defecto: 3)
   * @param {Set} visitadas - Set de IDs de páginas ya visitadas para evitar ciclos
   * @param {Number} profundidadActual - Profundidad actual de recursión
   * @param {Boolean} esReferenciaNidada - Indica si es una referencia nidada (para evitar duplicación)
   * @returns {HTMLElement} - Elemento HTML con la estructura de árbol de tareas
   */
  async generarArbolTareas(paginaActual, dv2, profundidadMaxima = 3, visitadas = /* @__PURE__ */ new Set(), profundidadActual = 0, esReferenciaNidada = false) {
    if (!paginaActual || !paginaActual.file) {
      console.error("Error: paginaActual no tiene las propiedades necesarias", paginaActual);
      return dv2.el("div", "Error: No se puede generar el \xE1rbol de tareas.", { cls: "tasks-tree-error" });
    }
    console.log(`Procesando tareas de: ${paginaActual.file.path} (profundidad: ${profundidadActual}, esReferenciaNidada: ${esReferenciaNidada})`);
    const contenedor = document.createElement("div");
    contenedor.className = "tasks-tree";
    if (profundidadActual === 0) {
      const tipoNota = paginaActual.typeName || "Nota";
      const alias = paginaActual.file.aliases && paginaActual.file.aliases.length > 0 ? paginaActual.file.aliases[0] : paginaActual.titulo || paginaActual.file.name;
      const titulo = document.createElement("h3");
      titulo.className = "tasks-tree-title";
      titulo.textContent = "Tareas pendientes";
      contenedor.appendChild(titulo);
    }
    if (profundidadActual >= profundidadMaxima) {
      return contenedor;
    }
    visitadas.add(paginaActual.file.path);
    let tareas;
    try {
      tareas = await this.extraerTareasDePagina(paginaActual, dv2);
      console.log(`Encontradas ${tareas.length} tareas en ${paginaActual.file.path}`);
    } catch (e) {
      console.error(`Error al extraer tareas de ${paginaActual.file.path}:`, e);
      tareas = [];
    }
    let todasLasPaginas;
    try {
      todasLasPaginas = dv2.pages();
    } catch (e) {
      console.error("Error al obtener p\xE1ginas:", e);
      const errorMsg = document.createElement("p");
      errorMsg.textContent = "Error al obtener p\xE1ginas de Dataview";
      errorMsg.className = "tasks-tree-error";
      contenedor.appendChild(errorMsg);
      if (tareas.length > 0) {
        this.agregarTareasAContenedor(tareas, contenedor, dv2, paginaActual);
      }
      return contenedor;
    }
    let referenciasDirectas = [];
    try {
      const referenciaAPaginaActual = (asunto) => {
        try {
          if (asunto && typeof asunto === "object" && asunto.path === paginaActual.file.path) {
            return true;
          }
          if (typeof asunto === "string") {
            if (asunto.includes(paginaActual.file.path)) {
              return true;
            }
            if (paginaActual.file.aliases && Array.isArray(paginaActual.file.aliases)) {
              for (const alias of paginaActual.file.aliases) {
                if (alias && asunto.includes(alias)) {
                  return true;
                }
              }
            }
            if (paginaActual.file.name && asunto.includes(paginaActual.file.name)) {
              return true;
            }
            const titulo = paginaActual.titulo || paginaActual.title;
            if (titulo && asunto.includes(titulo)) {
              return true;
            }
          }
          return false;
        } catch (err) {
          console.warn("Error al verificar referencia:", err);
          return false;
        }
      };
      referenciasDirectas = todasLasPaginas.filter((p) => {
        try {
          if (!p || !p.asunto)
            return false;
          const asuntos = Array.isArray(p.asunto) ? p.asunto : [p.asunto];
          for (const asunto of asuntos) {
            if (referenciaAPaginaActual(asunto)) {
              return true;
            }
          }
          return false;
        } catch (err) {
          console.warn("Error al filtrar p\xE1gina:", err, p);
          return false;
        }
      });
      console.log(`Encontradas ${referenciasDirectas.length} referencias directas a ${paginaActual.file.path}`);
    } catch (e) {
      console.error("Error al filtrar referencias:", e);
      const errorMsg = document.createElement("p");
      errorMsg.textContent = "Error al procesar referencias";
      errorMsg.className = "tasks-tree-error";
      contenedor.appendChild(errorMsg);
      if (tareas.length > 0) {
        this.agregarTareasAContenedor(tareas, contenedor, dv2, paginaActual);
      }
      return contenedor;
    }
    const hayTareasEnActual = tareas.length > 0;
    const referenciasConTareas = [];
    const referenciasConTareasHeredadas = [];
    for (const referencia of referenciasDirectas) {
      if (visitadas.has(referencia.file.path)) {
        continue;
      }
      try {
        const tareasReferencia = await this.extraerTareasDePagina(referencia, dv2);
        let tieneTareasHeredadas = false;
        let refAnidadasConTareas = [];
        const nuevoVisitadas = /* @__PURE__ */ new Set([...visitadas]);
        nuevoVisitadas.add(referencia.file.path);
        const resultadoAnidado = await this.generarArbolTareas(
          referencia,
          dv2,
          profundidadMaxima,
          nuevoVisitadas,
          profundidadActual + 1,
          true
          // Es una referencia nidada
        );
        if (resultadoAnidado && resultadoAnidado.nodeType) {
          const tareasAnidadas = resultadoAnidado.querySelectorAll(".tasks-item");
          tieneTareasHeredadas = tareasAnidadas.length > 0;
          if (tieneTareasHeredadas) {
            refAnidadasConTareas.push({
              referencia,
              resultado: resultadoAnidado
            });
          }
        }
        if (tareasReferencia.length > 0) {
          referenciasConTareas.push({
            referencia,
            tareas: tareasReferencia,
            refAnidadas: refAnidadasConTareas
          });
        } else if (tieneTareasHeredadas) {
          referenciasConTareasHeredadas.push({
            referencia,
            tareas: [],
            // No tiene tareas propias
            refAnidadas: refAnidadasConTareas
          });
        }
      } catch (e) {
        console.error(`Error al procesar referencia ${referencia.file.path}:`, e);
      }
    }
    const todasLasReferenciasConTareas = [...referenciasConTareas, ...referenciasConTareasHeredadas];
    const hayTareasEnReferencias = todasLasReferenciasConTareas.length > 0;
    if (!hayTareasEnActual && !hayTareasEnReferencias && profundidadActual > 0) {
      return contenedor;
    }
    if (hayTareasEnActual && (!esReferenciaNidada || profundidadActual === 0)) {
      const seccionActual = document.createElement("div");
      seccionActual.className = "tasks-node-current";
      if (hayTareasEnReferencias) {
        const encabezadoActual = document.createElement("div");
        encabezadoActual.className = "tasks-node-header";
        encabezadoActual.textContent = "Tareas directas";
        seccionActual.appendChild(encabezadoActual);
      }
      this.agregarTareasAContenedor(tareas, seccionActual, dv2, paginaActual);
      contenedor.appendChild(seccionActual);
    }
    if (hayTareasEnReferencias) {
      const seccionReferencias = document.createElement("div");
      seccionReferencias.className = "tasks-refs-container";
      if (hayTareasEnActual && (!esReferenciaNidada || profundidadActual === 0)) {
        const encabezadoRefs = document.createElement("div");
        encabezadoRefs.className = "tasks-refs-header";
        encabezadoRefs.textContent = "Tareas en notas relacionadas";
        seccionReferencias.appendChild(encabezadoRefs);
      }
      const listaRefs = document.createElement("ul");
      listaRefs.className = "tasks-refs-list";
      for (const { referencia, tareas: tareas2, refAnidadas } of todasLasReferenciasConTareas) {
        const itemRef = document.createElement("li");
        itemRef.className = "tasks-ref-item";
        const headerRef = this.crearEncabezadoReferencia(referencia, dv2, tareas2.length);
        itemRef.appendChild(headerRef);
        if (tareas2.length > 0) {
          const tareasContainer = document.createElement("div");
          tareasContainer.className = "tasks-container";
          tareasContainer.setAttribute("data-path", referencia.file.path);
          this.agregarTareasAContenedor(tareas2, tareasContainer, dv2, referencia);
          itemRef.appendChild(tareasContainer);
        }
        if (refAnidadas && refAnidadas.length > 0) {
          for (const { resultado } of refAnidadas) {
            if (resultado && resultado.nodeType) {
              const tituloRepetido = resultado.querySelector(".tasks-tree-title");
              if (tituloRepetido) {
                tituloRepetido.remove();
              }
              resultado.classList.add("tasks-subrefs-container");
              itemRef.appendChild(resultado);
            }
          }
        }
        listaRefs.appendChild(itemRef);
      }
      seccionReferencias.appendChild(listaRefs);
      contenedor.appendChild(seccionReferencias);
    }
    if (!hayTareasEnActual && !hayTareasEnReferencias && profundidadActual === 0) {
      const mensaje = document.createElement("p");
      mensaje.textContent = "No se encontraron tareas pendientes o en progreso";
      mensaje.className = "tasks-tree-empty";
      contenedor.appendChild(mensaje);
    }
    return contenedor;
  }
  /**
   * Extrae las tareas pendientes y en progreso de una página
   * @param {Object} pagina - La página de la que extraer tareas
   * @param {Object} dv - El objeto dataview
   * @returns {Array} - Array de objetos con las tareas extraídas
   */
  async extraerTareasDePagina(pagina, dv2) {
    var _a;
    try {
      if (!pagina || !pagina.file || !pagina.file.path) {
        console.warn("P\xE1gina o archivo no v\xE1lido:", pagina);
        return [];
      }
      let contenido;
      try {
        if (dv2 && typeof dv2.io !== "undefined" && typeof dv2.io.load === "function") {
          contenido = await dv2.io.load(pagina.file.path);
        } else {
          const archivo = app.vault.getAbstractFileByPath(pagina.file.path);
          if (archivo && archivo instanceof app.TFile) {
            contenido = await app.vault.read(archivo);
          } else {
            throw new Error("No se pudo encontrar el archivo");
          }
        }
      } catch (readError) {
        console.warn(`No se pudo leer el archivo ${pagina.file.path}:`, readError);
        return [];
      }
      if (!contenido) {
        console.warn(`No se pudo obtener contenido para ${pagina.file.path}`);
        return [];
      }
      const lineas = contenido.split("\n");
      const tareas = [];
      for (let i = 0; i < lineas.length; i++) {
        const linea = lineas[i];
        const tareaRegex = /^(\s*)-\s*\[([ \/])\]\s*(.+)$/;
        const coincidencia = tareaRegex.exec(linea);
        if (coincidencia) {
          const indentacion = coincidencia[1];
          const estado = coincidencia[2] === " " ? "pendiente" : "progreso";
          const texto = coincidencia[3].trim();
          const tarea = {
            texto,
            estado,
            indentacion: indentacion.length,
            lineaIndice: i,
            lineaOriginal: linea
          };
          tareas.push(tarea);
        }
      }
      return tareas;
    } catch (error) {
      console.error(`Error al extraer tareas de ${((_a = pagina == null ? void 0 : pagina.file) == null ? void 0 : _a.path) || "p\xE1gina desconocida"}:`, error);
      return [];
    }
  }
  /**
   * Crea el encabezado para una referencia con contador de tareas
   * @param {Object} referencia - La referencia para la que crear el encabezado
   * @param {Object} dv - El objeto dataview
   * @param {Number} numTareas - Número de tareas en esta referencia
   * @returns {HTMLElement} - Elemento HTML con el encabezado
   */
  crearEncabezadoReferencia(referencia, dv2, numTareas) {
    const header = document.createElement("div");
    header.className = "tasks-ref-header";
    const toggleBtn = document.createElement("span");
    toggleBtn.textContent = "\u25BC";
    toggleBtn.className = "tasks-toggle-btn";
    toggleBtn.setAttribute("data-state", "expanded");
    toggleBtn.setAttribute("title", "Colapsar/Expandir");
    toggleBtn.addEventListener("click", function(event) {
      const currentState = this.getAttribute("data-state");
      const newState = currentState === "expanded" ? "collapsed" : "expanded";
      this.setAttribute("data-state", newState);
      this.textContent = newState === "expanded" ? "\u25BC" : "\u25B6";
      const headerElement = this.closest(".tasks-ref-header");
      if (headerElement && headerElement.parentNode) {
        const listItem = headerElement.parentNode;
        const containers = listItem.querySelectorAll(".tasks-container, .tasks-subrefs-container");
        containers.forEach((container) => {
          container.style.display = newState === "expanded" ? "block" : "none";
        });
      }
      event.stopPropagation();
    });
    header.appendChild(toggleBtn);
    let nombreMostrado = referencia.file.aliases && referencia.file.aliases.length > 0 ? referencia.file.aliases[0] : referencia.titulo || referencia.file.name;
    const tipo = referencia.typeName;
    if (tipo) {
      const tipoSpan = document.createElement("span");
      tipoSpan.className = "tasks-ref-type";
      tipoSpan.textContent = `[${tipo}] `;
      header.appendChild(tipoSpan);
    }
    if (referencia.estado) {
      const estadoEl = document.createElement("span");
      estadoEl.className = "tasks-ref-state";
      estadoEl.textContent = `${referencia.estado} `;
      estadoEl.style.marginRight = "5px";
      header.appendChild(estadoEl);
    }
    try {
      const enlace = document.createElement("a");
      enlace.className = "internal-link tasks-ref-link";
      enlace.href = referencia.file.path;
      enlace.setAttribute("data-href", referencia.file.path);
      enlace.textContent = nombreMostrado;
      enlace.addEventListener("click", (event) => {
        event.preventDefault();
        app.workspace.openLinkText(referencia.file.path, "", true);
      });
      header.appendChild(enlace);
    } catch (e) {
      console.error("Error al crear enlace:", e);
      const textoPlano = document.createElement("span");
      textoPlano.className = "tasks-ref-name";
      textoPlano.textContent = nombreMostrado;
      header.appendChild(textoPlano);
    }
    const contador = document.createElement("span");
    contador.className = "tasks-count";
    contador.textContent = `(${numTareas})`;
    header.appendChild(contador);
    return header;
  }
  /**
   * Agrega un conjunto de tareas a un contenedor DOM
   * @param {Array} tareas - Array de objetos de tareas
   * @param {HTMLElement} contenedor - Contenedor al que añadir las tareas
   * @param {Object} dv - Objeto dataview
   * @param {Object} pagina - Página a la que pertenecen las tareas
   */
  agregarTareasAContenedor(tareas, contenedor, dv2, pagina) {
    if (!tareas || tareas.length === 0)
      return;
    const lista = document.createElement("ul");
    lista.className = "tasks-list";
    for (const tarea of tareas) {
      const item = document.createElement("li");
      item.className = `tasks-item tasks-${tarea.estado}`;
      item.setAttribute("data-linea", tarea.lineaIndice);
      const checkbox = document.createElement("span");
      checkbox.className = `tasks-checkbox tasks-checkbox-${tarea.estado}`;
      checkbox.textContent = tarea.estado === "pendiente" ? "\u2610" : "\u25D4";
      checkbox.addEventListener("click", () => {
        this.navegarATarea(pagina.file.path, tarea.lineaIndice);
      });
      const textoSpan = document.createElement("span");
      textoSpan.className = "tasks-text";
      textoSpan.textContent = tarea.texto;
      textoSpan.addEventListener("click", () => {
        this.navegarATarea(pagina.file.path, tarea.lineaIndice);
      });
      item.appendChild(checkbox);
      item.appendChild(textoSpan);
      lista.appendChild(item);
    }
    contenedor.appendChild(lista);
  }
  /**
   * Obtiene y procesa notas vinculadas a una nota actual, con opciones de ordenamiento
   * @param params Objeto con parámetros como notaActualPath y sortOrder
   * @returns Objeto con la tabla HTML y metadatos
   */
  async obtenerNotasVinculadas(params) {
    var _a, _b;
    console.log("[DEBUG] Iniciando obtenerNotasVinculadas con par\xE1metros:", params);
    try {
      const { notaActualPath, sortOrder = "hits" } = params;
      console.log("[DEBUG] notaActualPath:", notaActualPath);
      console.log("[DEBUG] sortOrder:", sortOrder);
      if (!notaActualPath) {
        console.error("[ERROR] No se proporcion\xF3 la ruta de la nota actual");
        return { error: "No se proporcion\xF3 la ruta de la nota actual" };
      }
      const currentNote = app.vault.getAbstractFileByPath(notaActualPath);
      console.log("[DEBUG] currentNote:", (currentNote == null ? void 0 : currentNote.path) || "No encontrada");
      if (!currentNote) {
        console.error("[ERROR] No se pudo encontrar la nota actual en la ruta:", notaActualPath);
        return { error: "No se pudo encontrar la nota actual" };
      }
      const today = window.moment().startOf("day");
      console.log("[DEBUG] Fecha actual:", today.format("YYYY-MM-DD"));
      const allFiles = app.vault.getMarkdownFiles();
      console.log("[DEBUG] Total de archivos markdown:", allFiles.length);
      let linkedNotes = [];
      let processingErrors = 0;
      let notesWithAsunto = 0;
      let notesTypeEntregable = 0;
      let possibleMatches = 0;
      for (const file of allFiles) {
        try {
          console.log("[DEBUG] Procesando archivo:", file.path);
          const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
          if (!metadata) {
            console.log("[DEBUG] Archivo sin frontmatter:", file.path);
            continue;
          }
          console.log("[DEBUG] Metadata typeName:", metadata.typeName);
          console.log("[DEBUG] Metadata asunto:", JSON.stringify(metadata.asunto));
          if (metadata.typeName !== "Entregable") {
            console.log("[DEBUG] Archivo no es un Entregable, se salta");
            continue;
          }
          notesTypeEntregable++;
          if (!metadata.asunto) {
            console.log("[DEBUG] Entregable sin asunto, se salta");
            continue;
          }
          notesWithAsunto++;
          let isLinked = false;
          console.log("[DEBUG] Comprobando si referencia a la nota actual:", notaActualPath);
          console.log("[DEBUG] Tipo de asunto:", typeof metadata.asunto);
          if (Array.isArray(metadata.asunto)) {
            console.log("[DEBUG] asunto es un array con", metadata.asunto.length, "elementos");
            for (const asunto of metadata.asunto) {
              console.log("[DEBUG] Elemento asunto:", JSON.stringify(asunto));
              if (asunto && typeof asunto === "object" && asunto.path) {
                console.log("[DEBUG] asunto tiene path:", asunto.path);
                console.log("[DEBUG] \xBFCoincide con notaActualPath?", asunto.path === notaActualPath);
                if (asunto.path === notaActualPath) {
                  isLinked = true;
                  possibleMatches++;
                  console.log("[DEBUG] \xA1COINCIDENCIA ENCONTRADA en path!");
                  break;
                }
              } else if (typeof asunto === "string") {
                console.log("[DEBUG] asunto es string:", asunto);
                console.log("[DEBUG] \xBFIncluye notaActualPath?", asunto.includes(notaActualPath));
                if (asunto.includes(notaActualPath)) {
                  isLinked = true;
                  possibleMatches++;
                  console.log("[DEBUG] \xA1COINCIDENCIA ENCONTRADA en string!");
                  break;
                }
                const wikiLinkMatch = asunto.match(/\[\[(.*?)(?:\|(.*?))?\]\]/);
                if (wikiLinkMatch) {
                  const linkPath = wikiLinkMatch[1];
                  console.log("[DEBUG] Detectado enlace wiki, path:", linkPath);
                  if (linkPath === currentNote.basename || linkPath === notaActualPath) {
                    isLinked = true;
                    possibleMatches++;
                    console.log("[DEBUG] \xA1COINCIDENCIA ENCONTRADA en wikilink!");
                    break;
                  }
                }
              }
            }
          } else if (typeof metadata.asunto === "object" && metadata.asunto.path) {
            console.log("[DEBUG] asunto es un objeto con path:", metadata.asunto.path);
            console.log("[DEBUG] \xBFCoincide con notaActualPath?", metadata.asunto.path === notaActualPath);
            if (metadata.asunto.path === notaActualPath) {
              isLinked = true;
              possibleMatches++;
              console.log("[DEBUG] \xA1COINCIDENCIA ENCONTRADA en objeto!");
            }
          } else if (typeof metadata.asunto === "string") {
            console.log("[DEBUG] asunto es un string simple:", metadata.asunto);
            console.log("[DEBUG] \xBFIncluye notaActualPath?", metadata.asunto.includes(notaActualPath));
            if (metadata.asunto.includes(notaActualPath)) {
              isLinked = true;
              possibleMatches++;
              console.log("[DEBUG] \xA1COINCIDENCIA ENCONTRADA en string simple!");
            }
            const wikiLinkMatch = metadata.asunto.match(/\[\[(.*?)(?:\|(.*?))?\]\]/);
            if (wikiLinkMatch) {
              const linkPath = wikiLinkMatch[1];
              console.log("[DEBUG] Detectado enlace wiki en string simple, path:", linkPath);
              const matchesPath = linkPath === notaActualPath;
              const matchesBasename = linkPath === currentNote.basename;
              console.log("[DEBUG] \xBFCoincide con ruta completa?", matchesPath);
              console.log("[DEBUG] \xBFCoincide con nombre de archivo?", matchesBasename);
              if (matchesPath || matchesBasename) {
                isLinked = true;
                possibleMatches++;
                console.log("[DEBUG] \xA1COINCIDENCIA ENCONTRADA en wikilink simple!");
              }
            }
          }
          if (isLinked) {
            console.log("[DEBUG] \u2705 Nota vinculada encontrada:", file.path);
            let hits = parseFloat(metadata.hits);
            if (isNaN(hits)) {
              console.log("[DEBUG] hits no es un n\xFAmero, estableciendo a 0");
              hits = 0;
            }
            const alias = ((_b = metadata.aliases) == null ? void 0 : _b[0]) || file.basename;
            const estado = metadata.estado || "Sin estado";
            let diferenciaDias = null;
            if (metadata.publicacion) {
              console.log("[DEBUG] Tiene fecha de publicaci\xF3n:", metadata.publicacion);
              const pubDate = window.moment(metadata.publicacion.toString(), "YYYY-MM-DD").startOf("day");
              if (pubDate.isValid()) {
                diferenciaDias = pubDate.diff(today, "days");
                console.log("[DEBUG] diferenciaDias calculado:", diferenciaDias);
              } else {
                console.log("[DEBUG] La fecha de publicaci\xF3n no es v\xE1lida");
              }
            }
            linkedNotes.push({
              alias,
              hits,
              estado,
              diferenciaDias,
              file
            });
            console.log("[DEBUG] Nota a\xF1adida al resultado con alias:", alias);
          } else {
            console.log("[DEBUG] No est\xE1 vinculada, se omite");
          }
        } catch (error) {
          processingErrors++;
          console.error(`[ERROR] Error procesando archivo ${file.path}:`, error);
        }
      }
      console.log(`[DEBUG] Proceso completado. Notas vinculadas encontradas: ${linkedNotes.length}`);
      console.log(`[DEBUG] Estad\xEDsticas de procesamiento:`);
      console.log(`[DEBUG] - Total archivos procesados: ${allFiles.length}`);
      console.log(`[DEBUG] - Notas tipo Entregable: ${notesTypeEntregable}`);
      console.log(`[DEBUG] - Notas con asunto: ${notesWithAsunto}`);
      console.log(`[DEBUG] - Posibles coincidencias: ${possibleMatches}`);
      console.log(`[DEBUG] - Errores de procesamiento: ${processingErrors}`);
      if (linkedNotes.length === 0) {
        console.log("[DEBUG] No se encontraron notas vinculadas");
        const infoElement = document.createElement("div");
        infoElement.innerHTML = `<p>No se encontraron entregables vinculados a esta nota.</p>
                                     <p><small>Estad\xEDsticas: ${notesTypeEntregable} entregables procesados, 
                                     ${notesWithAsunto} con asunto, ${possibleMatches} posibles coincidencias.</small></p>`;
        return {
          tablaElement: infoElement,
          totalNotas: 0,
          totalHits: 0
        };
      }
      console.log("[DEBUG] Ordenando notas por:", sortOrder);
      if (sortOrder === "hits") {
        linkedNotes.sort((a, b) => b.hits - a.hits);
      } else {
        const safeDiff = (d) => d == null ? Infinity : d;
        linkedNotes.sort((a, b) => {
          if (a.estado === "\u{1F535}" && b.estado !== "\u{1F535}")
            return 1;
          if (b.estado === "\u{1F535}" && a.estado !== "\u{1F535}")
            return -1;
          return safeDiff(a.diferenciaDias) - safeDiff(b.diferenciaDias);
        });
      }
      console.log("[DEBUG] Creando tabla HTML");
      const tablaElement = this.crearTablaNotasVinculadas(linkedNotes);
      const totalHits = linkedNotes.reduce((sum, nota) => sum + nota.hits, 0);
      console.log("[DEBUG] Total hits:", totalHits);
      return {
        tablaElement,
        totalNotas: linkedNotes.length,
        totalHits
      };
    } catch (error) {
      console.error("[ERROR] Error en obtenerNotasVinculadas:", error);
      const errorElement = document.createElement("div");
      errorElement.innerHTML = `<p style="color: red;">Error al procesar notas vinculadas: ${error.message}</p>
                                 <p>Revisa la consola para m\xE1s detalles.</p>`;
      return {
        error: "Error al procesar notas vinculadas: " + error.message,
        tablaElement: errorElement
      };
    }
  }
  /**
   * Crea una tabla HTML con las notas vinculadas
   * @param notas Array de objetos con información de notas
   * @returns Elemento HTML de la tabla
   */
  crearTablaNotasVinculadas(notas) {
    const colorKey = (nota) => {
      if (nota.estado === "\u{1F535}")
        return "gray";
      if (nota.diferenciaDias == null)
        return "inherit";
      if (nota.diferenciaDias > 6)
        return "green";
      if (nota.diferenciaDias >= 3)
        return "#e6b800";
      if (nota.diferenciaDias >= 1)
        return "orange";
      return "red";
    };
    try {
      const table = document.createElement("table");
      table.className = "dataview table";
      table.style.width = "100%";
      const thead = document.createElement("thead");
      const headerRow = document.createElement("tr");
      const headers = ["Nota", "Hits", "Estado", "D\xEDas hasta Publicaci\xF3n"];
      headers.forEach((header) => {
        const th = document.createElement("th");
        th.textContent = header;
        headerRow.appendChild(th);
      });
      thead.appendChild(headerRow);
      table.appendChild(thead);
      const tbody = document.createElement("tbody");
      notas.forEach((nota) => {
        const row = document.createElement("tr");
        const cellNota = document.createElement("td");
        const link = document.createElement("a");
        link.className = "internal-link";
        link.textContent = nota.alias;
        link.setAttribute("data-href", nota.file.path);
        link.addEventListener("click", (event) => {
          event.preventDefault();
          const path = event.target.getAttribute("data-href");
          if (path) {
            app.workspace.openLinkText(path, "", false);
          }
        });
        cellNota.appendChild(link);
        row.appendChild(cellNota);
        const cellHits = document.createElement("td");
        cellHits.textContent = nota.hits;
        row.appendChild(cellHits);
        const cellEstado = document.createElement("td");
        cellEstado.textContent = nota.estado;
        row.appendChild(cellEstado);
        const cellDias = document.createElement("td");
        const color = colorKey(nota);
        const diasTexto = nota.diferenciaDias != null ? `${nota.diferenciaDias} d\xEDas` : "No definido";
        const spanDias = document.createElement("span");
        spanDias.style.color = color;
        spanDias.style.fontWeight = "bold";
        spanDias.textContent = diasTexto;
        cellDias.appendChild(spanDias);
        row.appendChild(cellDias);
        tbody.appendChild(row);
      });
      const totalRow = document.createElement("tr");
      const totalLabelCell = document.createElement("td");
      const totalLabel = document.createElement("strong");
      totalLabel.textContent = "Total";
      totalLabelCell.appendChild(totalLabel);
      totalRow.appendChild(totalLabelCell);
      const totalHits = notas.reduce((sum, nota) => sum + nota.hits, 0);
      const totalValueCell = document.createElement("td");
      const totalValue = document.createElement("strong");
      totalValue.textContent = totalHits.toString();
      totalValueCell.appendChild(totalValue);
      totalRow.appendChild(totalValueCell);
      totalRow.appendChild(document.createElement("td"));
      totalRow.appendChild(document.createElement("td"));
      tbody.appendChild(totalRow);
      table.appendChild(tbody);
      return table;
    } catch (error) {
      console.error("Error al crear tabla de notas vinculadas:", error);
      const errorElement = document.createElement("div");
      errorElement.textContent = "Error al generar tabla: " + error.message;
      errorElement.style.color = "red";
      return errorElement;
    }
  }
  //--- Selector de Estado
  /**
   * Genera un selector visual de estado para la nota
   * @param params Objeto con parámetros como notaActualPath y estadoActual 
   * @returns Elemento DOM con el selector de estado
   */
  async generarSelectorEstado(params) {
    try {
      const { notaActualPath, estadoActual } = params;
      if (!notaActualPath) {
        console.error("No se proporcion\xF3 la ruta de la nota actual");
        return null;
      }
      const currentFile = app.vault.getAbstractFileByPath(notaActualPath);
      if (!currentFile) {
        console.error("No se pudo encontrar el archivo actual:", notaActualPath);
        return null;
      }
      const estados = [
        { emoji: "\u{1F7E2}", label: "Avanzando", color: "#4caf50" },
        { emoji: "\u{1F7E1}", label: "En Pausa", color: "#ffc107" },
        { emoji: "\u{1F534}", label: "Detenida", color: "#f44336" },
        { emoji: "\u{1F535}", label: "Archivada", color: "#2196f3" }
      ];
      const estadoInicial = estadoActual || "\u{1F7E1}";
      const container = document.createElement("div");
      container.className = "estado-selector-container";
      container.style.display = "flex";
      container.style.alignItems = "center";
      container.style.gap = "10px";
      container.style.maxWidth = "500px";
      container.style.margin = "0 auto";
      container.style.padding = "8px";
      container.style.borderRadius = "4px";
      container.style.backgroundColor = "var(--background-secondary-alt)";
      const labelEl = document.createElement("span");
      labelEl.className = "estado-label";
      labelEl.textContent = "Estado:";
      labelEl.style.fontWeight = "500";
      labelEl.style.fontSize = "0.9em";
      container.appendChild(labelEl);
      const optionsContainer = document.createElement("div");
      optionsContainer.className = "estado-options";
      optionsContainer.style.display = "flex";
      optionsContainer.style.gap = "6px";
      optionsContainer.style.flex = "1";
      container.appendChild(optionsContainer);
      const currentStateIndicator = document.createElement("div");
      currentStateIndicator.className = "current-state-indicator";
      currentStateIndicator.style.display = "flex";
      currentStateIndicator.style.alignItems = "center";
      currentStateIndicator.style.marginLeft = "8px";
      currentStateIndicator.style.fontSize = "0.85em";
      currentStateIndicator.style.opacity = "0.8";
      currentStateIndicator.style.whiteSpace = "nowrap";
      const estadoInfo = estados.find((e) => e.emoji === estadoInicial) || estados[0];
      currentStateIndicator.textContent = estadoInfo.label;
      container.appendChild(currentStateIndicator);
      const updateState = async (newState) => {
        try {
          await app.fileManager.processFrontMatter(currentFile, (frontmatter) => {
            frontmatter.estado = newState;
          });
          const newEstadoInfo = estados.find((e) => e.emoji === newState);
          currentStateIndicator.textContent = newEstadoInfo.label;
          optionsContainer.querySelectorAll("button").forEach((btn) => {
            const btnEstado = btn.getAttribute("data-estado");
            const estadoData = estados.find((e) => e.emoji === btnEstado);
            if (btnEstado === newState) {
              btn.style.backgroundColor = estadoData.color;
              btn.style.color = "white";
              btn.style.transform = "scale(1.1)";
              btn.style.boxShadow = "0 2px 4px rgba(0,0,0,0.2)";
            } else {
              btn.style.backgroundColor = `${estadoData.color}22`;
              btn.style.color = estadoData.color;
              btn.style.transform = "none";
              btn.style.boxShadow = "none";
            }
          });
          new Notice(`Estado cambiado a ${newEstadoInfo.label}`);
        } catch (error) {
          console.error("Error al actualizar el estado:", error);
          new Notice("Error al actualizar el estado. Consulta la consola para m\xE1s detalles.");
        }
      };
      estados.forEach((estado) => {
        const boton = document.createElement("button");
        boton.className = "estado-btn";
        boton.setAttribute("data-estado", estado.emoji);
        boton.setAttribute("title", estado.label);
        boton.style.flex = "1";
        boton.style.border = "none";
        boton.style.borderRadius = "4px";
        boton.style.padding = "6px 0";
        boton.style.cursor = "pointer";
        boton.style.transition = "all 0.2s ease";
        boton.style.display = "flex";
        boton.style.alignItems = "center";
        boton.style.justifyContent = "center";
        if (estadoInicial === estado.emoji) {
          boton.style.backgroundColor = estado.color;
          boton.style.color = "white";
          boton.style.transform = "scale(1.1)";
          boton.style.boxShadow = "0 2px 4px rgba(0,0,0,0.2)";
        } else {
          boton.style.backgroundColor = `${estado.color}22`;
          boton.style.color = estado.color;
        }
        const emojiSpan = document.createElement("span");
        emojiSpan.textContent = estado.emoji;
        emojiSpan.style.fontSize = "18px";
        boton.appendChild(emojiSpan);
        boton.addEventListener("mouseover", () => {
          if (estadoInicial !== estado.emoji) {
            boton.style.backgroundColor = `${estado.color}44`;
            boton.style.transform = "translateY(-2px)";
          }
        });
        boton.addEventListener("mouseout", () => {
          if (estadoInicial !== estado.emoji) {
            boton.style.backgroundColor = `${estado.color}22`;
            boton.style.transform = "none";
          }
        });
        boton.addEventListener("click", () => {
          updateState(estado.emoji);
        });
        optionsContainer.appendChild(boton);
      });
      return container;
    } catch (error) {
      console.error("Error en generarSelectorEstado:", error);
      return null;
    }
  }
  // -- Arbol de proyectos GTD
  /**
   * Genera un árbol jerárquico visual de proyectos organizados por Áreas de Vida y Áreas de Interés
   * @param {Object} dv - El objeto dataview para acceder a sus funciones
   * @param {Object} options - Opciones de configuración (tipo de proyectos, filtros adicionales)
   * @returns {HTMLElement} - Elemento DOM con la estructura de árbol
   */
  async generarArbolProyectos(dv2, options = {}) {
    try {
      const config = {
        tipoProyecto: options.tipoProyecto || "PGTD",
        // PGTD o PQ
        estadoFiltro: options.estadoFiltro || "\u{1F7E2}",
        // Por defecto solo muestra activos
        soloMostrarConPendientes: options.soloMostrarConPendientes || false,
        expandirPorDefecto: options.expandirPorDefecto || false
      };
      const carpetaKey = config.tipoProyecto === "PGTD" ? "folder_ProyectosGTD" : "folder_ProyectosQ";
      const carpeta = this.plugin.settings[carpetaKey];
      if (!carpeta) {
        console.error(`Carpeta para ${config.tipoProyecto} no configurada`);
        const error = document.createElement("div");
        error.className = "tree-error";
        error.textContent = `Error: Carpeta para ${config.tipoProyecto} no configurada`;
        return error;
      }
      const contenedor = document.createElement("div");
      contenedor.className = "proyectos-tree-container";
      const encabezado = document.createElement("h3");
      encabezado.className = "proyectos-tree-title";
      console.log(`Buscando proyectos en: ${carpeta}`);
      let proyectos = dv2.pages().filter((p) => p.file.path.startsWith(carpeta) && !p.file.path.includes("/Plantillas/") && !p.file.path.includes("/Archivo/"));
      const totalProyectos = proyectos.length;
      const todosLosProyectos = [...proyectos];
      let proyectosFiltrados = proyectos;
      if (config.estadoFiltro && config.estadoFiltro !== "") {
        console.log(`Aplicando filtro de estado: ${config.estadoFiltro}`);
        proyectosFiltrados = proyectos.filter((p) => p.estado === config.estadoFiltro);
      }
      encabezado.textContent = `Estructura de Proyectos ${config.tipoProyecto} ${config.estadoFiltro ? `(${proyectosFiltrados.length}/${totalProyectos})` : ""}`;
      contenedor.appendChild(encabezado);
      if (proyectosFiltrados.length === 0) {
        const mensaje = document.createElement("p");
        mensaje.className = "proyectos-tree-empty";
        mensaje.textContent = `No se encontraron proyectos ${config.tipoProyecto}${config.estadoFiltro ? ` con estado ${config.estadoFiltro}` : ""}`;
        contenedor.appendChild(mensaje);
        return contenedor;
      }
      console.log(`Proyectos encontrados: ${proyectosFiltrados.length}`);
      const proyectosAMostrar = this.determinarProyectosAMostrar(proyectosFiltrados, todosLosProyectos, config);
      const { areasVida, proyectosSinAV } = this.construirEstructuraProyectos(proyectosAMostrar, dv2);
      const arbolAV = document.createElement("div");
      arbolAV.className = "proyectos-areas-container";
      const areasVidaOrdenadas = [...areasVida.entries()].sort((a, b) => {
        const nombreA = a[1].nombre || a[0];
        const nombreB = b[1].nombre || b[0];
        return nombreA.localeCompare(nombreB);
      });
      for (const [avPath, avData] of areasVidaOrdenadas) {
        const seccionAV = this.renderizarAreaVida(avPath, avData, dv2, config);
        arbolAV.appendChild(seccionAV);
      }
      if (proyectosSinAV.length > 0) {
        const seccionSinAV = document.createElement("div");
        seccionSinAV.className = "proyectos-sin-av";
        const tituloSinAV = document.createElement("div");
        tituloSinAV.className = "proyectos-area-header sin-area";
        tituloSinAV.setAttribute("data-toggle-id", `sinav-global`);
        tituloSinAV.innerHTML = `<span class="toggle-icon">\u25BA</span> <span class="area-tipo">Sin \xC1rea de Vida</span> <span class="proyectos-contador">(${proyectosSinAV.length})</span>`;
        seccionSinAV.appendChild(tituloSinAV);
        const contenidoSinAV = document.createElement("div");
        contenidoSinAV.className = "proyectos-area-content";
        contenidoSinAV.id = `content-${tituloSinAV.getAttribute("data-toggle-id")}`;
        contenidoSinAV.style.display = "none";
        const areasPorAI = this.agruparProyectosPorAI(proyectosSinAV, dv2);
        for (const [aiPath, aiData] of areasPorAI.entries()) {
          const seccionAI = this.renderizarAreaInteres(aiPath, aiData, dv2, config);
          contenidoSinAV.appendChild(seccionAI);
        }
        const proyectosSinAI = proyectosSinAV.filter(
          (p) => !p.areaInteres || Array.isArray(p.areaInteres) && p.areaInteres.length === 0 || typeof p.areaInteres === "string" && p.areaInteres.trim() === ""
        );
        if (proyectosSinAI.length > 0) {
          const seccionSinAI = document.createElement("div");
          seccionSinAI.className = "proyectos-sin-ai";
          const tituloSinAI = document.createElement("div");
          tituloSinAI.className = "proyectos-ai-header sin-ai";
          tituloSinAI.setAttribute("data-toggle-id", `sinai-global`);
          tituloSinAI.innerHTML = `<span class="toggle-icon">\u25BA</span> <span class="ai-tipo">Sin \xC1rea de Inter\xE9s</span> <span class="proyectos-contador">(${proyectosSinAI.length})</span>`;
          seccionSinAI.appendChild(tituloSinAI);
          const contenidoSinAI = document.createElement("div");
          contenidoSinAI.className = "proyectos-ai-content";
          contenidoSinAI.id = `content-${tituloSinAI.getAttribute("data-toggle-id")}`;
          contenidoSinAI.style.display = "none";
          const listaProyectos = this.renderizarListaProyectos(proyectosSinAI, dv2, config);
          contenidoSinAI.appendChild(listaProyectos);
          seccionSinAI.appendChild(contenidoSinAI);
          contenidoSinAV.appendChild(seccionSinAI);
          tituloSinAI.addEventListener("click", (event) => {
            if (event.target.tagName !== "A") {
              this.toggleSeccionById(tituloSinAI.getAttribute("data-toggle-id"));
            }
          });
        }
        seccionSinAV.appendChild(contenidoSinAV);
        arbolAV.appendChild(seccionSinAV);
        tituloSinAV.addEventListener("click", (event) => {
          if (event.target.tagName !== "A") {
            this.toggleSeccionById(tituloSinAV.getAttribute("data-toggle-id"));
          }
        });
      }
      contenedor.appendChild(arbolAV);
      if (options.expandirPorDefecto) {
        this.expandirTodo(contenedor);
      }
      return contenedor;
    } catch (error) {
      console.error("Error en generarArbolProyectos:", error);
      const errorElement = document.createElement("div");
      errorElement.className = "proyectos-tree-error";
      errorElement.textContent = `Error al generar \xE1rbol de proyectos: ${error.message}`;
      return errorElement;
    }
  }
  /**
   * Construye la estructura jerárquica de proyectos organizados por Áreas de Vida
   * @param {Array} proyectos - Array de proyectos obtenidos de dataview
   * @param {Object} dv - Objeto dataview
   * @returns {Object} - Estructura organizada por áreas
   */
  construirEstructuraProyectos(proyectos, dv2) {
    const areasVida = /* @__PURE__ */ new Map();
    const proyectosSinAV = [];
    for (const proyecto of proyectos) {
      let asignado = false;
      if (proyecto.areaVida) {
        let areaVidaPath;
        let areaVidaNombre;
        if (typeof proyecto.areaVida === "object" && proyecto.areaVida.path) {
          areaVidaPath = proyecto.areaVida.path;
          try {
            const avPage = dv2.page(areaVidaPath);
            areaVidaNombre = avPage.titulo || avPage.file.name;
          } catch (e) {
            areaVidaNombre = "\xC1rea de Vida " + areaVidaPath;
          }
        } else if (typeof proyecto.areaVida === "string") {
          const wikiMatch = proyecto.areaVida.match(/\[\[(.*?)(?:\|(.*?))?\]\]/);
          if (wikiMatch) {
            areaVidaPath = wikiMatch[1];
            areaVidaNombre = wikiMatch[2] || wikiMatch[1];
          } else if (proyecto.areaVida !== "No es de ning\xFAn Area de Vida") {
            try {
              const avPages = dv2.pages('#"' + proyecto.areaVida + '"');
              if (avPages.length > 0) {
                areaVidaPath = avPages[0].file.path;
                areaVidaNombre = proyecto.areaVida;
              } else {
                areaVidaPath = proyecto.areaVida;
                areaVidaNombre = proyecto.areaVida;
              }
            } catch (e) {
              areaVidaPath = proyecto.areaVida;
              areaVidaNombre = proyecto.areaVida;
            }
          }
        }
        if (areaVidaPath && areaVidaPath !== "No es de ning\xFAn Area de Vida") {
          if (!areasVida.has(areaVidaPath)) {
            areasVida.set(areaVidaPath, {
              nombre: areaVidaNombre,
              proyectos: [],
              proyectosPorAI: /* @__PURE__ */ new Map()
            });
          }
          areasVida.get(areaVidaPath).proyectos.push(proyecto);
          asignado = true;
          if (proyecto.areaInteres) {
            const areasInteres = Array.isArray(proyecto.areaInteres) ? proyecto.areaInteres : [proyecto.areaInteres];
            let asignadoAI = false;
            for (const ai of areasInteres) {
              let aiPath;
              let aiNombre;
              if (typeof ai === "object" && ai.path) {
                aiPath = ai.path;
                try {
                  const aiPage = dv2.page(aiPath);
                  aiNombre = aiPage.titulo || aiPage.file.name;
                } catch (e) {
                  aiNombre = "\xC1rea de Inter\xE9s " + aiPath;
                }
              } else if (typeof ai === "string") {
                const wikiMatch = ai.match(/\[\[(.*?)(?:\|(.*?))?\]\]/);
                if (wikiMatch) {
                  aiPath = wikiMatch[1];
                  aiNombre = wikiMatch[2] || wikiMatch[1];
                } else {
                  try {
                    const aiPages = dv2.pages('#"' + ai + '"');
                    if (aiPages.length > 0) {
                      aiPath = aiPages[0].file.path;
                      aiNombre = ai;
                    } else {
                      aiPath = ai;
                      aiNombre = ai;
                    }
                  } catch (e) {
                    aiPath = ai;
                    aiNombre = ai;
                  }
                }
              }
              if (aiPath) {
                const avData = areasVida.get(areaVidaPath);
                if (!avData.proyectosPorAI.has(aiPath)) {
                  avData.proyectosPorAI.set(aiPath, {
                    nombre: aiNombre,
                    proyectos: []
                  });
                }
                avData.proyectosPorAI.get(aiPath).proyectos.push(proyecto);
                asignadoAI = true;
              }
            }
            if (!asignadoAI) {
              const avData = areasVida.get(areaVidaPath);
              if (!avData.proyectosSinAI) {
                avData.proyectosSinAI = [];
              }
              avData.proyectosSinAI.push(proyecto);
            }
          } else {
            const avData = areasVida.get(areaVidaPath);
            if (!avData.proyectosSinAI) {
              avData.proyectosSinAI = [];
            }
            avData.proyectosSinAI.push(proyecto);
          }
        }
      }
      if (!asignado) {
        proyectosSinAV.push(proyecto);
      }
    }
    return { areasVida, proyectosSinAV };
  }
  /**
   * Agrupa proyectos por Área de Interés
   * @param {Array} proyectos - Array de proyectos
   * @param {Object} dv - Objeto dataview
   * @returns {Map} - Mapa de proyectos agrupados por AI
   */
  agruparProyectosPorAI(proyectos, dv2) {
    const areasPorAI = /* @__PURE__ */ new Map();
    const proyectosSinAI = [];
    for (const proyecto of proyectos) {
      let asignado = false;
      if (proyecto.areaInteres) {
        const areasInteres = Array.isArray(proyecto.areaInteres) ? proyecto.areaInteres : [proyecto.areaInteres];
        for (const ai of areasInteres) {
          let aiPath;
          let aiNombre;
          if (typeof ai === "object" && ai.path) {
            aiPath = ai.path;
            try {
              const aiPage = dv2.page(aiPath);
              aiNombre = aiPage.titulo || aiPage.file.name;
            } catch (e) {
              aiNombre = "\xC1rea de Inter\xE9s " + aiPath;
            }
          } else if (typeof ai === "string") {
            const wikiMatch = ai.match(/\[\[(.*?)(?:\|(.*?))?\]\]/);
            if (wikiMatch) {
              aiPath = wikiMatch[1];
              aiNombre = wikiMatch[2] || wikiMatch[1];
            } else {
              try {
                const aiPages = dv2.pages('#"' + ai + '"');
                if (aiPages.length > 0) {
                  aiPath = aiPages[0].file.path;
                  aiNombre = ai;
                } else {
                  aiPath = ai;
                  aiNombre = ai;
                }
              } catch (e) {
                aiPath = ai;
                aiNombre = ai;
              }
            }
          }
          if (aiPath) {
            if (!areasPorAI.has(aiPath)) {
              areasPorAI.set(aiPath, {
                nombre: aiNombre,
                proyectos: []
              });
            }
            areasPorAI.get(aiPath).proyectos.push(proyecto);
            asignado = true;
          }
        }
      }
      if (!asignado) {
        proyectosSinAI.push(proyecto);
      }
    }
    if (proyectosSinAI.length > 0) {
      areasPorAI.set("sin-ai", {
        nombre: "Sin \xC1rea de Inter\xE9s",
        proyectos: proyectosSinAI
      });
    }
    return areasPorAI;
  }
  /**
   * Renderiza una sección de Área de Vida con sus proyectos
   * @param {string} avPath - Ruta del archivo del Área de Vida
   * @param {Object} avData - Datos del Área de Vida
   * @param {Object} dv - Objeto dataview
   * @param {Object} config - Configuración
   * @returns {HTMLElement} - Elemento DOM con la sección del AV
   */
  renderizarAreaVida(avPath, avData, dv2, config) {
    const seccionAV = document.createElement("div");
    seccionAV.className = "proyectos-area-vida";
    const totalProyectos = avData.proyectos.length;
    const tituloAV = document.createElement("div");
    tituloAV.className = "proyectos-area-header";
    tituloAV.setAttribute("data-toggle-id", `av-${avPath.replace(/\//g, "-")}`);
    const toggleIcono = document.createElement("span");
    toggleIcono.className = "toggle-icon";
    toggleIcono.textContent = "\u25BA";
    tituloAV.appendChild(toggleIcono);
    const tipoLabel = document.createElement("span");
    tipoLabel.className = "area-tipo";
    tipoLabel.textContent = "\u{1F5C2}\uFE0F \xC1rea de Vida:";
    tituloAV.appendChild(tipoLabel);
    try {
      const enlaceAV = document.createElement("a");
      enlaceAV.className = "area-link";
      enlaceAV.textContent = avData.nombre || "\xC1rea de Vida";
      enlaceAV.href = avPath;
      enlaceAV.setAttribute("data-href", avPath);
      enlaceAV.target = "_blank";
      enlaceAV.addEventListener("click", (event) => {
        event.preventDefault();
        app.workspace.openLinkText(avPath, "", true);
      });
      tituloAV.appendChild(enlaceAV);
    } catch (e) {
      const textoAV = document.createElement("span");
      textoAV.textContent = avData.nombre || "\xC1rea de Vida";
      tituloAV.appendChild(textoAV);
    }
    const contadorProyectos = document.createElement("span");
    contadorProyectos.className = "proyectos-contador";
    contadorProyectos.textContent = ` (${totalProyectos})`;
    tituloAV.appendChild(contadorProyectos);
    seccionAV.appendChild(tituloAV);
    const contenidoAV = document.createElement("div");
    contenidoAV.className = "proyectos-area-content";
    contenidoAV.id = `content-${tituloAV.getAttribute("data-toggle-id")}`;
    contenidoAV.style.display = "none";
    if (avData.proyectosPorAI && avData.proyectosPorAI.size > 0) {
      const aiOrdenadas = [...avData.proyectosPorAI.entries()].sort((a, b) => a[1].nombre.localeCompare(b[1].nombre));
      for (const [aiPath, aiData] of aiOrdenadas) {
        const seccionAI = this.renderizarAreaInteres(aiPath, aiData, dv2, config);
        contenidoAV.appendChild(seccionAI);
      }
    }
    if (avData.proyectosSinAI && avData.proyectosSinAI.length > 0) {
      const seccionSinAI = document.createElement("div");
      seccionSinAI.className = "proyectos-sin-ai";
      const tituloSinAI = document.createElement("div");
      tituloSinAI.className = "proyectos-ai-header sin-ai";
      tituloSinAI.setAttribute("data-toggle-id", `sinai-${avPath.replace(/\//g, "-")}`);
      const totalSinAI = avData.proyectosSinAI.length;
      tituloSinAI.innerHTML = `<span class="toggle-icon">\u25BA</span> <span class="ai-tipo">Sin \xC1rea de Inter\xE9s</span> <span class="proyectos-contador">(${totalSinAI})</span>`;
      seccionSinAI.appendChild(tituloSinAI);
      const contenidoSinAI = document.createElement("div");
      contenidoSinAI.className = "proyectos-ai-content";
      contenidoSinAI.id = `content-${tituloSinAI.getAttribute("data-toggle-id")}`;
      contenidoSinAI.style.display = "none";
      const listaProyectos = this.renderizarListaProyectos(avData.proyectosSinAI, dv2, config);
      contenidoSinAI.appendChild(listaProyectos);
      seccionSinAI.appendChild(contenidoSinAI);
      contenidoAV.appendChild(seccionSinAI);
      tituloSinAI.addEventListener("click", (event) => {
        if (event.target.tagName !== "A") {
          this.toggleSeccionById(tituloSinAI.getAttribute("data-toggle-id"));
        }
      });
    }
    seccionAV.appendChild(contenidoAV);
    tituloAV.addEventListener("click", (event) => {
      if (event.target.tagName !== "A") {
        this.toggleSeccionById(tituloAV.getAttribute("data-toggle-id"));
      }
    });
    return seccionAV;
  }
  /**
   * Renderiza una sección de Área de Interés con sus proyectos
   * @param {string} aiPath - Ruta del archivo del Área de Interés
   * @param {Object} aiData - Datos del Área de Interés
   * @param {Object} dv - Objeto dataview
   * @param {Object} config - Configuración
   * @returns {HTMLElement} - Elemento DOM con la sección del AI
   */
  renderizarAreaInteres(aiPath, aiData, dv2, config) {
    const seccionAI = document.createElement("div");
    seccionAI.className = "proyectos-area-interes";
    const totalProyectos = aiData.proyectos ? aiData.proyectos.length : 0;
    const tituloAI = document.createElement("div");
    tituloAI.className = "proyectos-ai-header";
    tituloAI.setAttribute("data-toggle-id", `ai-${aiPath.replace(/\//g, "-")}`);
    const toggleIcono = document.createElement("span");
    toggleIcono.className = "toggle-icon";
    toggleIcono.textContent = "\u25BA";
    tituloAI.appendChild(toggleIcono);
    const tipoLabel = document.createElement("span");
    tipoLabel.className = "ai-tipo";
    tipoLabel.textContent = "\u{1F4C1} \xC1rea de Inter\xE9s:";
    tituloAI.appendChild(tipoLabel);
    if (aiPath !== "sin-ai") {
      try {
        const enlaceAI = document.createElement("a");
        enlaceAI.className = "ai-link";
        enlaceAI.textContent = aiData.nombre || "\xC1rea de Inter\xE9s";
        enlaceAI.href = aiPath;
        enlaceAI.setAttribute("data-href", aiPath);
        enlaceAI.target = "_blank";
        enlaceAI.addEventListener("click", (event) => {
          event.preventDefault();
          app.workspace.openLinkText(aiPath, "", true);
        });
        tituloAI.appendChild(enlaceAI);
      } catch (e) {
        const textoAI = document.createElement("span");
        textoAI.textContent = aiData.nombre || "\xC1rea de Inter\xE9s";
        tituloAI.appendChild(textoAI);
      }
    } else {
      const textoAI = document.createElement("span");
      textoAI.textContent = aiData.nombre || "Sin \xC1rea de Inter\xE9s";
      tituloAI.appendChild(textoAI);
    }
    const contadorProyectos = document.createElement("span");
    contadorProyectos.className = "proyectos-contador";
    contadorProyectos.textContent = ` (${totalProyectos})`;
    tituloAI.appendChild(contadorProyectos);
    seccionAI.appendChild(tituloAI);
    const contenidoAI = document.createElement("div");
    contenidoAI.className = "proyectos-ai-content";
    contenidoAI.id = `content-${tituloAI.getAttribute("data-toggle-id")}`;
    contenidoAI.style.display = "none";
    if (aiData.proyectos && aiData.proyectos.length > 0) {
      const listaProyectos = this.renderizarListaProyectos(aiData.proyectos, dv2, config);
      contenidoAI.appendChild(listaProyectos);
    } else {
      const mensaje = document.createElement("p");
      mensaje.className = "proyectos-ai-empty";
      mensaje.textContent = "No hay proyectos en esta \xC1rea de Inter\xE9s";
      contenidoAI.appendChild(mensaje);
    }
    seccionAI.appendChild(contenidoAI);
    tituloAI.addEventListener("click", (event) => {
      if (event.target.tagName !== "A") {
        this.toggleSeccionById(tituloAI.getAttribute("data-toggle-id"));
      }
    });
    return seccionAI;
  }
  /**
   * Toggle específico para un elemento por su ID
   * @param {string} toggleId - ID único del elemento toggle
   */
  toggleSeccionById(toggleId) {
    const header = document.querySelector(`[data-toggle-id="${toggleId}"]`);
    const content = document.getElementById(`content-${toggleId}`);
    if (!header || !content)
      return;
    const toggleIcon = header.querySelector(".toggle-icon");
    const isVisible = content.style.display !== "none";
    if (isVisible) {
      content.style.display = "none";
      toggleIcon.textContent = "\u25BA";
    } else {
      content.style.display = "block";
      toggleIcon.textContent = "\u25BC";
    }
  }
  /**
   * Renderiza una lista de proyectos
   * @param {Array} proyectos - Array de proyectos
   * @param {Object} dv - Objeto dataview
   * @param {Object} config - Configuración
   * @returns {HTMLElement} - Elemento DOM con la lista de proyectos
   */
  renderizarListaProyectos(proyectos, dv2, config) {
    const lista = document.createElement("ul");
    lista.className = "proyectos-lista";
    const ordenados = [...proyectos].sort((a, b) => {
      const nivelA = a.nivelP || 0;
      const nivelB = b.nivelP || 0;
      if (nivelA !== nivelB) {
        return nivelA - nivelB;
      }
      const fechaA = a.fecha ? new Date(a.fecha) : /* @__PURE__ */ new Date(0);
      const fechaB = b.fecha ? new Date(b.fecha) : /* @__PURE__ */ new Date(0);
      return fechaB - fechaA;
    });
    const proyectosMap = /* @__PURE__ */ new Map();
    const nodosRaiz = [];
    for (const proyecto of ordenados) {
      const path = proyecto.file.path;
      proyectosMap.set(path, {
        proyecto,
        hijos: []
      });
    }
    for (const proyecto of ordenados) {
      const path = proyecto.file.path;
      const padresCampo = config.tipoProyecto === "PGTD" ? "proyectoGTD" : "proyectoQ";
      if (proyecto[padresCampo]) {
        const padres = Array.isArray(proyecto[padresCampo]) ? proyecto[padresCampo] : [proyecto[padresCampo]];
        let tieneRelacion = false;
        for (const padre of padres) {
          let padrePath;
          if (typeof padre === "object" && padre.path) {
            padrePath = padre.path;
          } else if (typeof padre === "string") {
            const wikiMatch = padre.match(/\[\[(.*?)(?:\|(.*?))?\]\]/);
            if (wikiMatch) {
              padrePath = wikiMatch[1];
            } else {
              const proyectoEncontrado = ordenados.find(
                (p) => p.titulo === padre || p.aliases && p.aliases.includes(padre) || p.file.name === padre
              );
              if (proyectoEncontrado) {
                padrePath = proyectoEncontrado.file.path;
              } else {
                padrePath = padre;
              }
            }
          }
          if (padrePath && proyectosMap.has(padrePath)) {
            proyectosMap.get(padrePath).hijos.push(proyectosMap.get(path));
            tieneRelacion = true;
          }
        }
        if (!tieneRelacion) {
          nodosRaiz.push(proyectosMap.get(path));
        }
      } else {
        nodosRaiz.push(proyectosMap.get(path));
      }
    }
    for (const nodoRaiz of nodosRaiz) {
      this.renderizarProyectoRecursivo(nodoRaiz, lista, 0, dv2, config);
    }
    if (lista.children.length === 0) {
      const mensaje = document.createElement("li");
      mensaje.className = "proyectos-lista-empty";
      mensaje.textContent = "No hay proyectos que cumplan con los criterios de filtro";
      lista.appendChild(mensaje);
    }
    return lista;
  }
  /**
   * Renderiza un proyecto y sus subproyectos de forma recursiva
   * @param {Object} nodo - Nodo del proyecto actual
   * @param {HTMLElement} lista - Elemento lista donde agregar el proyecto
   * @param {number} nivel - Nivel de indentación
   * @param {Object} dv - Objeto dataview
   * @param {Object} config - Configuración
   */
  renderizarProyectoRecursivo(nodo, lista, nivel, dv2, config) {
    const { proyecto, hijos } = nodo;
    if (config.soloMostrarConPendientes) {
      const tieneTareasPendientes = proyecto.file.tasks && proyecto.file.tasks.filter((t) => !t.completed).length > 0;
      const hijosConTareas = hijos.some((hijo) => {
        const hijoPendientes = hijo.proyecto.file.tasks && hijo.proyecto.file.tasks.filter((t) => !t.completed).length > 0;
        return hijoPendientes;
      });
      if (!tieneTareasPendientes && !hijosConTareas && hijos.length === 0) {
        return;
      }
    }
    const item = document.createElement("li");
    item.className = `proyectos-item nivel-${nivel}`;
    const indentacion = nivel > 0 ? "\u2192".repeat(nivel) + " " : "";
    const textoMostrar = proyecto.titulo || (proyecto.aliases && proyecto.aliases.length > 0 ? proyecto.aliases[0] : null) || proyecto.file.name;
    const contenido = document.createElement("div");
    contenido.className = "proyecto-contenido";
    if (proyecto.estado) {
      const estadoSpan = document.createElement("span");
      estadoSpan.className = "proyecto-estado";
      estadoSpan.textContent = proyecto.estado + " ";
      contenido.appendChild(estadoSpan);
    }
    if (indentacion) {
      const indentSpan = document.createElement("span");
      indentSpan.className = "proyecto-indent";
      indentSpan.textContent = indentacion;
      contenido.appendChild(indentSpan);
    }
    try {
      const enlace = document.createElement("a");
      enlace.className = "proyecto-link";
      enlace.textContent = textoMostrar;
      enlace.href = proyecto.file.path;
      enlace.setAttribute("data-href", proyecto.file.path);
      enlace.target = "_blank";
      enlace.addEventListener("click", (event) => {
        event.preventDefault();
        app.workspace.openLinkText(proyecto.file.path, "", true);
      });
      contenido.appendChild(enlace);
    } catch (e) {
      const texto = document.createElement("span");
      texto.textContent = textoMostrar;
      contenido.appendChild(texto);
    }
    if (proyecto.file.tasks) {
      const tareasPendientes = proyecto.file.tasks.filter((t) => !t.completed).length;
      if (tareasPendientes > 0) {
        const tareasSpan = document.createElement("span");
        tareasSpan.className = "proyecto-pendientes";
        tareasSpan.textContent = ` (${tareasPendientes} pendientes)`;
        contenido.appendChild(tareasSpan);
      }
    }
    if (proyecto.nivelP && proyecto.nivelP > 0) {
      const nivelSpan = document.createElement("span");
      nivelSpan.className = "proyecto-nivel";
      nivelSpan.textContent = ` [Nivel ${proyecto.nivelP}]`;
      contenido.appendChild(nivelSpan);
    }
    item.appendChild(contenido);
    lista.appendChild(item);
    if (hijos && hijos.length > 0) {
      const sublista = document.createElement("ul");
      sublista.className = "proyectos-sublista";
      for (const hijo of hijos) {
        this.renderizarProyectoRecursivo(hijo, sublista, nivel + 1, dv2, config);
      }
      if (sublista.children.length > 0) {
        item.appendChild(sublista);
      }
    }
  }
  /**
   * Alterna entre mostrar y ocultar una sección
   * @param {HTMLElement} header - Elemento de encabezado con el toggle
   * @param {HTMLElement} content - Elemento de contenido a mostrar/ocultar
   */
  toggleSeccion(header, content) {
    const toggleIcon = header.querySelector(".toggle-icon");
    const isVisible = content.style.display !== "none";
    if (isVisible) {
      content.style.display = "none";
      toggleIcon.textContent = "\u25BA";
    } else {
      content.style.display = "block";
      toggleIcon.textContent = "\u25BC";
    }
  }
  /**
   * Expande todas las secciones en el árbol
   * @param {HTMLElement} container - Contenedor principal
   */
  expandirTodo(container) {
    const headers = container.querySelectorAll("[data-toggle-id]");
    headers.forEach((header) => {
      const toggleId = header.getAttribute("data-toggle-id");
      const content = document.getElementById(`content-${toggleId}`);
      if (content) {
        content.style.display = "block";
        const toggleIcon = header.querySelector(".toggle-icon");
        if (toggleIcon) {
          toggleIcon.textContent = "\u25BC";
        }
      }
    });
  }
  /**
   * Colapsa todas las secciones en el árbol
   * @param {HTMLElement} container - Contenedor principal
   */
  colapsarTodo(container) {
    const headers = container.querySelectorAll("[data-toggle-id]");
    headers.forEach((header) => {
      const toggleId = header.getAttribute("data-toggle-id");
      const content = document.getElementById(`content-${toggleId}`);
      if (content) {
        content.style.display = "none";
        const toggleIcon = header.querySelector(".toggle-icon");
        if (toggleIcon) {
          toggleIcon.textContent = "\u25BA";
        }
      }
    });
  }
  /**
   * Agrega listeners para expandir/colapsar secciones
   * @param {HTMLElement} container - Contenedor principal
   */
  agregarListenersProyectos(container) {
    const headersAV = container.querySelectorAll(".proyectos-area-header");
    headersAV.forEach((header) => {
      const content = header.nextElementSibling;
      if (content && content.classList.contains("proyectos-area-content")) {
        header.addEventListener("click", (event) => {
          if (event.target.tagName !== "A") {
            this.toggleSeccion(header, content);
          }
        });
      }
    });
    const headersAI = container.querySelectorAll(".proyectos-ai-header");
    headersAI.forEach((header) => {
      const content = header.nextElementSibling;
      if (content && content.classList.contains("proyectos-ai-content")) {
        header.addEventListener("click", (event) => {
          if (event.target.tagName !== "A") {
            this.toggleSeccion(header, content);
          }
        });
      }
    });
  }
  /**
   * Determina qué proyectos deben mostrarse teniendo en cuenta la estructura jerárquica
   * @param {Array} proyectosFiltrados - Array de proyectos ya filtrados
   * @param {Array} todosLosProyectos - Array con todos los proyectos
   * @param {Object} config - Configuración
   * @returns {Array} - Array de proyectos a mostrar
   */
  determinarProyectosAMostrar(proyectosFiltrados, todosLosProyectos, config) {
    if (!config.estadoFiltro || config.estadoFiltro === "") {
      return todosLosProyectos;
    }
    const pathsAMostrar = /* @__PURE__ */ new Set();
    proyectosFiltrados.forEach((p) => pathsAMostrar.add(p.file.path));
    let cambiosRealizados = true;
    while (cambiosRealizados) {
      cambiosRealizados = false;
      for (const proyecto of todosLosProyectos) {
        if (pathsAMostrar.has(proyecto.file.path))
          continue;
        const padresCampo = config.tipoProyecto === "PGTD" ? "proyectoGTD" : "proyectoQ";
        for (const otroProyecto of todosLosProyectos) {
          if (!pathsAMostrar.has(otroProyecto.file.path))
            continue;
          const padres = otroProyecto[padresCampo];
          if (!padres)
            continue;
          const esReferenciadoComo = Array.isArray(padres) ? padres.some((p) => this.referenciaAlMismoProyecto(p, proyecto)) : this.referenciaAlMismoProyecto(padres, proyecto);
          if (esReferenciadoComo) {
            pathsAMostrar.add(proyecto.file.path);
            cambiosRealizados = true;
            break;
          }
        }
      }
    }
    for (const proyecto of proyectosFiltrados) {
      const padresCampo = config.tipoProyecto === "PGTD" ? "proyectoGTD" : "proyectoQ";
      for (const otroProyecto of todosLosProyectos) {
        if (pathsAMostrar.has(otroProyecto.file.path))
          continue;
        const padres = otroProyecto[padresCampo];
        if (!padres)
          continue;
        const esReferenciadoComo = Array.isArray(padres) ? padres.some((p) => this.referenciaAlMismoProyecto(p, proyecto)) : this.referenciaAlMismoProyecto(padres, proyecto);
        if (esReferenciadoComo) {
          pathsAMostrar.add(otroProyecto.file.path);
        }
      }
    }
    return todosLosProyectos.filter((p) => pathsAMostrar.has(p.file.path));
  }
  /**
   * Comprueba si una referencia (objeto o string) apunta al mismo proyecto
   * @param {*} referencia - Puede ser objeto con path, string con wikilink, o nombre directo
   * @param {Object} proyecto - Proyecto a comparar
   * @returns {boolean} - true si la referencia apunta al proyecto
   */
  referenciaAlMismoProyecto(referencia, proyecto) {
    if (!referencia || !proyecto)
      return false;
    if (typeof referencia === "object" && referencia.path) {
      return referencia.path === proyecto.file.path;
    }
    if (typeof referencia === "string") {
      const wikiMatch = referencia.match(/\[\[(.*?)(?:\|(.*?))?\]\]/);
      if (wikiMatch) {
        const path = wikiMatch[1];
        return path === proyecto.file.path || path === proyecto.file.basename || path === proyecto.titulo;
      }
      return referencia === proyecto.file.path || referencia === proyecto.file.basename || referencia === proyecto.titulo || proyecto.aliases && proyecto.aliases.includes(referencia);
    }
    return false;
  }
  /**
   * Navega a una tarea específica en una nota
   * @param {string} path - Ruta de la nota
   * @param {number} linea - Número de línea de la tarea
   */
  navegarATarea(path, linea) {
    if (!path) {
      console.error("No se proporcion\xF3 una ruta de archivo v\xE1lida");
      return;
    }
    try {
      const archivo = app.vault.getAbstractFileByPath(path);
      if (!archivo) {
        console.warn(`No se encontr\xF3 el archivo: ${path}`);
        return;
      }
      const canUseEState = typeof app.workspace.openLinkText === "function";
      if (canUseEState) {
        app.workspace.openLinkText(path, "", true, { eState: { line: linea } });
      } else {
        const leaf = app.workspace.getLeaf(false);
        leaf.openFile(archivo).then(() => {
          setTimeout(() => {
            if (leaf.view && leaf.view.editor) {
              const editor = leaf.view.editor;
              editor.setCursor({ line: linea, ch: 0 });
              editor.scrollIntoView({ from: { line: linea, ch: 0 }, to: { line: linea, ch: 0 } }, true);
            }
          }, 100);
        });
      }
    } catch (e) {
      console.error("Error al navegar a la tarea:", e);
      try {
        const archivo = app.vault.getAbstractFileByPath(path);
        if (archivo) {
          app.workspace.getLeaf(false).openFile(archivo);
        } else {
          new Notice("No se pudo encontrar el archivo: " + path);
        }
      } catch (err) {
        console.error("Error en el fallback de navegaci\xF3n:", err);
        new Notice("Error al abrir el archivo: " + err.message);
      }
    }
  }
  // --- Mejora de la busqueda de Contextos GTD por bloque dvjs
  /**
   * Genera una vista de tareas por contexto con navegación interactiva
   * @param dv - Objeto dataview para acceder a sus funciones
   * @returns Elemento DOM interactivo con los contextos y sus tareas
   */
  async mostrarContextosGTD(dv2) {
    try {
      const container = document.createElement("div");
      container.className = "contextos-gtd-container";
      const styleEl = document.createElement("style");
      styleEl.textContent = `
        .highlighted-line {
          background-color: rgba(var(--interactive-accent-rgb), 0.3) !important;
          transition: background-color 1s ease-out;
        }
        
        .tarea-link {
          color: var(--interactive-accent);
          text-decoration: none;
          transition: all 0.2s ease;
        }
        
        .tarea-link:hover {
          text-decoration: underline;
          color: var(--interactive-accent-hover);
        }
        
        .linea-info {
          font-size: 0.85em;
          color: var(--text-muted);
        }

        /* El resto de estilos necesarios se cargan desde el archivo CSS global */
        `;
      container.appendChild(styleEl);
      const controlsContainer = document.createElement("div");
      controlsContainer.className = "contextos-controles";
      const btnExpandir = document.createElement("button");
      btnExpandir.textContent = "\u{1F4C2} Expandir Todo";
      btnExpandir.className = "contextos-btn expandir";
      const btnColapsar = document.createElement("button");
      btnColapsar.textContent = "\u{1F4C1} Colapsar Todo";
      btnColapsar.className = "contextos-btn colapsar";
      const btnRefrescar = document.createElement("button");
      btnRefrescar.textContent = "\u{1F504} Actualizar";
      btnRefrescar.className = "contextos-btn refrescar";
      controlsContainer.appendChild(btnExpandir);
      controlsContainer.appendChild(btnColapsar);
      controlsContainer.appendChild(btnRefrescar);
      container.appendChild(controlsContainer);
      const contextosContainer = document.createElement("div");
      contextosContainer.className = "contextos-container";
      container.appendChild(contextosContainer);
      const loadingIndicator = document.createElement("div");
      loadingIndicator.className = "loading-indicator";
      const spinner = document.createElement("div");
      spinner.className = "spinner";
      loadingIndicator.appendChild(spinner);
      const loadingText = document.createElement("div");
      loadingText.textContent = "Cargando contextos...";
      loadingIndicator.appendChild(loadingText);
      contextosContainer.appendChild(loadingIndicator);
      const { contextosConTareas, totalContextos, totalTareas } = await this.plugin.tareasAPI.getTareasContextos();
      if (totalContextos === 0) {
        contextosContainer.innerHTML = "";
        const emptyMessage = document.createElement("p");
        emptyMessage.className = "error-message";
        emptyMessage.textContent = "No se encontraron tareas con contextos asignados";
        contextosContainer.appendChild(emptyMessage);
        return container;
      }
      contextosContainer.innerHTML = "";
      const statsDiv = document.createElement("div");
      statsDiv.className = "contextos-stats";
      const statTotal = document.createElement("p");
      statTotal.textContent = `Total de contextos con tareas: ${totalContextos}`;
      statsDiv.appendChild(statTotal);
      const statTareas = document.createElement("p");
      statTareas.textContent = `Total de tareas encontradas: ${totalTareas}`;
      statsDiv.appendChild(statTareas);
      contextosContainer.appendChild(statsDiv);
      const arbolContextos = this.construirArbolContextos(contextosConTareas);
      this.generarContextosHTML(arbolContextos, contextosConTareas, contextosContainer);
      btnExpandir.addEventListener("click", () => {
        container.querySelectorAll(".contexto-details").forEach((details) => {
          details.setAttribute("open", "true");
        });
      });
      btnColapsar.addEventListener("click", () => {
        container.querySelectorAll(".contexto-details").forEach((details) => {
          details.removeAttribute("open");
        });
      });
      btnRefrescar.addEventListener("click", async () => {
        const nuevoContainer = await this.mostrarContextosGTD(dv2);
        container.parentNode.replaceChild(nuevoContainer, container);
      });
      return container;
    } catch (error) {
      console.error("Error en mostrarContextosGTD:", error);
      const errorContainer = document.createElement("div");
      errorContainer.className = "error-message";
      errorContainer.textContent = `Error al cargar contextos: ${error.message}`;
      return errorContainer;
    }
  }
  /**
   * Construye la estructura de árbol de contextos
   * @param contextosConTareas Mapa de contextos con sus tareas
   * @returns Estructura jerárquica de contextos
   */
  construirArbolContextos(contextosConTareas) {
    const arbol = /* @__PURE__ */ new Map();
    Array.from(contextosConTareas.keys()).forEach((contexto) => {
      const niveles = contexto.split(" \u2192 ");
      let nodoActual = arbol;
      niveles.forEach((nivel, index) => {
        if (!nodoActual.has(nivel)) {
          nodoActual.set(nivel, {
            tareas: index === niveles.length - 1 ? contextosConTareas.get(contexto) : [],
            subcontextos: /* @__PURE__ */ new Map(),
            rutaCompleta: niveles.slice(0, index + 1).join(" \u2192 ")
          });
        }
        nodoActual = nodoActual.get(nivel).subcontextos;
      });
    });
    return arbol;
  }
  /**
   * Genera el HTML de los contextos recursivamente
   * @param arbolContextos Estructura jerárquica de contextos
   * @param contextosConTareas Mapa original de contextos con tareas
   * @param container Elemento DOM donde añadir los contextos
   */
  generarContextosHTML(arbolContextos, contextosConTareas, container) {
    const procesarNodo = (nodo, nivel = 0, parentEl) => {
      const sortedKeys = Array.from(nodo.keys()).sort((a, b) => {
        const tareasA = nodo.get(a).tareas.length;
        const tareasB = nodo.get(b).tareas.length;
        return tareasB - tareasA;
      });
      sortedKeys.forEach((contexto) => {
        const info = nodo.get(contexto);
        const cantidadTareas = info.tareas.length;
        const tieneSubcontextos = info.subcontextos.size > 0;
        if (cantidadTareas > 0 || tieneSubcontextos) {
          const detailsEl = document.createElement("details");
          detailsEl.className = `contexto-details nivel-${nivel}`;
          parentEl.appendChild(detailsEl);
          const summaryEl = document.createElement("summary");
          summaryEl.className = "contexto-summary";
          detailsEl.appendChild(summaryEl);
          const headerEl = document.createElement("div");
          headerEl.className = "contexto-header";
          const nombreEl = document.createElement("div");
          nombreEl.className = "contexto-nombre";
          nombreEl.textContent = this.formatearNombreContexto(contexto);
          headerEl.appendChild(nombreEl);
          if (cantidadTareas > 0) {
            const contadorEl = document.createElement("div");
            contadorEl.className = "contexto-contador";
            contadorEl.textContent = cantidadTareas.toString();
            headerEl.appendChild(contadorEl);
          }
          summaryEl.appendChild(headerEl);
          if (cantidadTareas > 0) {
            const tareasContainer = document.createElement("div");
            tareasContainer.className = "contexto-tareas";
            detailsEl.appendChild(tareasContainer);
            info.tareas.forEach((tarea) => {
              this.crearTareaElement(tarea, tareasContainer);
            });
          }
          if (tieneSubcontextos) {
            const subcontextosEl = document.createElement("div");
            subcontextosEl.className = "subcontextos-container";
            detailsEl.appendChild(subcontextosEl);
            procesarNodo(info.subcontextos, nivel + 1, subcontextosEl);
          }
        }
      });
    };
    procesarNodo(arbolContextos, 0, container);
  }
  // Reemplazo para crearTareaElement en la clase addOnsAPI
  crearTareaElement(tarea, container) {
    var _a, _b, _c, _d;
    const tareaEl = document.createElement("div");
    tareaEl.className = `tarea-item ${tarea.isBlocked ? "tarea-bloqueada" : ""}`;
    const textoEl = document.createElement("div");
    textoEl.className = "tarea-texto";
    const checkboxEl = document.createElement("span");
    checkboxEl.className = "tarea-checkbox";
    checkboxEl.textContent = "\u2610";
    textoEl.appendChild(checkboxEl);
    const contenidoEl = document.createElement("span");
    contenidoEl.className = "tarea-contenido";
    contenidoEl.textContent = tarea.texto;
    textoEl.appendChild(contenidoEl);
    tareaEl.appendChild(textoEl);
    const metadatosEl = document.createElement("div");
    metadatosEl.className = "tarea-metadatos";
    const ubicacionEl = document.createElement("div");
    ubicacionEl.className = "tarea-ubicacion";
    const iconoUbicacion = document.createElement("span");
    iconoUbicacion.className = "metadato-icono";
    iconoUbicacion.textContent = "\u{1F4CD}";
    ubicacionEl.appendChild(iconoUbicacion);
    const valorUbicacion = document.createElement("span");
    valorUbicacion.className = "metadato-valor";
    const enlace = document.createElement("a");
    enlace.className = "internal-link tarea-link";
    enlace.textContent = tarea.titulo;
    let rutaValida = tarea.rutaArchivo;
    if (rutaValida) {
      const wikiMatch = rutaValida.match(/\[\[(.*?)(?:\|(.*?))?\]\]/);
      if (wikiMatch) {
        rutaValida = wikiMatch[1];
      }
      if (!rutaValida.endsWith(".md") && app.vault.getAbstractFileByPath(rutaValida + ".md")) {
        rutaValida += ".md";
      }
    }
    enlace.setAttribute("data-path", rutaValida || "");
    enlace.setAttribute("data-line", ((_b = (_a = tarea.lineInfo) == null ? void 0 : _a.numero) == null ? void 0 : _b.toString()) || "0");
    enlace.setAttribute("data-texto", tarea.textoOriginal || tarea.texto || "");
    enlace.addEventListener("click", (event) => {
      event.preventDefault();
      const path = enlace.getAttribute("data-path");
      const line = parseInt(enlace.getAttribute("data-line"), 10);
      const texto = enlace.getAttribute("data-texto");
      if (!path) {
        new Notice("Ruta del archivo no disponible");
        return;
      }
      const file = app.vault.getAbstractFileByPath(path);
      if (!file) {
        new Notice(`Archivo no encontrado: ${path}`);
        return;
      }
      this.navegarATareaConResaltado(path, line, texto, true);
    });
    valorUbicacion.appendChild(enlace);
    if ((_c = tarea.lineInfo) == null ? void 0 : _c.numero) {
      const lineaInfo = document.createElement("span");
      lineaInfo.className = "linea-info";
      lineaInfo.textContent = ` (l\xEDnea ${tarea.lineInfo.numero})`;
      valorUbicacion.appendChild(lineaInfo);
    }
    ubicacionEl.appendChild(valorUbicacion);
    metadatosEl.appendChild(ubicacionEl);
    if (tarea.fechaVencimiento || tarea.fechaScheduled || tarea.fechaStart) {
      const fechasEl = document.createElement("div");
      fechasEl.className = "tarea-fechas";
      if (tarea.fechaVencimiento) {
        const fechaEl = document.createElement("div");
        fechaEl.className = "tarea-fecha vencimiento";
        const iconoFecha = document.createElement("span");
        iconoFecha.className = "metadato-icono";
        iconoFecha.textContent = "\u{1F4C5}";
        fechaEl.appendChild(iconoFecha);
        const valorFecha = document.createElement("span");
        valorFecha.className = "metadato-valor";
        valorFecha.textContent = tarea.fechaVencimiento;
        fechaEl.appendChild(valorFecha);
        fechasEl.appendChild(fechaEl);
      }
      if (tarea.fechaScheduled) {
        const fechaEl = document.createElement("div");
        fechaEl.className = "tarea-fecha scheduled";
        const iconoFecha = document.createElement("span");
        iconoFecha.className = "metadato-icono";
        iconoFecha.textContent = "\u23F3";
        fechaEl.appendChild(iconoFecha);
        const valorFecha = document.createElement("span");
        valorFecha.className = "metadato-valor";
        valorFecha.textContent = tarea.fechaScheduled;
        fechaEl.appendChild(valorFecha);
        fechasEl.appendChild(fechaEl);
      }
      if (tarea.fechaStart) {
        const fechaEl = document.createElement("div");
        fechaEl.className = "tarea-fecha start";
        const iconoFecha = document.createElement("span");
        iconoFecha.className = "metadato-icono";
        iconoFecha.textContent = "\u{1F6EB}";
        fechaEl.appendChild(iconoFecha);
        const valorFecha = document.createElement("span");
        valorFecha.className = "metadato-valor";
        valorFecha.textContent = tarea.fechaStart;
        fechaEl.appendChild(valorFecha);
        fechasEl.appendChild(fechaEl);
      }
      metadatosEl.appendChild(fechasEl);
    }
    if (tarea.horaInicio || tarea.horaFin) {
      const horarioEl = document.createElement("div");
      horarioEl.className = "tarea-horario";
      const iconoHorario = document.createElement("span");
      iconoHorario.className = "metadato-icono";
      iconoHorario.textContent = "\u23F0";
      horarioEl.appendChild(iconoHorario);
      const valorHorario = document.createElement("span");
      valorHorario.className = "metadato-valor";
      valorHorario.textContent = `${tarea.horaInicio || "--:--"} - ${tarea.horaFin || "--:--"}`;
      horarioEl.appendChild(valorHorario);
      metadatosEl.appendChild(horarioEl);
    }
    if (((_d = tarea.etiquetas.personas) == null ? void 0 : _d.length) > 0) {
      const personasEl = document.createElement("div");
      personasEl.className = "tarea-personas";
      const iconoPersonas = document.createElement("span");
      iconoPersonas.className = "metadato-icono";
      iconoPersonas.textContent = "\u{1F464}";
      personasEl.appendChild(iconoPersonas);
      const valorPersonas = document.createElement("span");
      valorPersonas.className = "metadato-valor";
      valorPersonas.textContent = tarea.etiquetas.personas.join(" | ");
      personasEl.appendChild(valorPersonas);
      metadatosEl.appendChild(personasEl);
    }
    tareaEl.appendChild(metadatosEl);
    container.appendChild(tareaEl);
  }
  // Método mejorado de navegación a tareas con validación adicional
  async navegarATareaConResaltado(path, lineNumber, textoTarea, nuevaPesta\u00F1a = true) {
    try {
      const file = app.vault.getAbstractFileByPath(path);
      if (!file) {
        new Notice(`Archivo no encontrado: ${path}`);
        return;
      }
      const leaf = app.workspace.getLeaf(nuevaPesta\u00F1a);
      await leaf.openFile(file);
      setTimeout(() => {
        const editor = leaf.view.editor;
        if (!editor)
          return;
        if (lineNumber > 0) {
          editor.setCursor({ line: lineNumber - 1, ch: 0 });
          editor.scrollIntoView(
            { from: { line: lineNumber - 1, ch: 0 }, to: { line: lineNumber - 1, ch: 0 } },
            true
          );
          this.resaltarLineaTemporalmente(editor, lineNumber - 1);
        } else if (textoTarea) {
          const contenido = editor.getValue();
          const lineas = contenido.split("\n");
          for (let i = 0; i < lineas.length; i++) {
            const textoLimpio = textoTarea.replace(/^-\s*\[[^\]]+\]\s*/, "").trim();
            const lineaLimpia = lineas[i].replace(/^-\s*\[[^\]]+\]\s*/, "").trim();
            if (lineas[i].includes(textoTarea) || lineaLimpia.includes(textoLimpio)) {
              editor.setCursor({ line: i, ch: 0 });
              editor.scrollIntoView(
                { from: { line: i, ch: 0 }, to: { line: i, ch: lineas[i].length } },
                true
              );
              this.resaltarLineaTemporalmente(editor, i);
              break;
            }
          }
        }
      }, 300);
    } catch (error) {
      console.error("Error en navegarATareaConResaltado:", error);
      new Notice(`Error al navegar: ${error.message}`);
    }
  }
  // Versión mejorada del resaltado de líneas
  resaltarLineaTemporalmente(editor, lineIndex) {
    try {
      if (editor.cm && editor.cm.state) {
        const lineDiv = editor.cm.dom.querySelector(".cm-content");
        if (lineDiv) {
          const lineElements = lineDiv.querySelectorAll(".cm-line");
          if (lineElements && lineElements.length > lineIndex) {
            lineElements[lineIndex].classList.add("highlighted-line");
            setTimeout(() => {
              lineElements[lineIndex].classList.remove("highlighted-line");
            }, 2e3);
          }
        }
      } else {
        const lineDiv = editor.lineDiv || editor.getScrollerElement();
        if (lineDiv) {
          const lineElements = lineDiv.querySelectorAll(".CodeMirror-line");
          if (lineElements && lineElements.length > lineIndex) {
            lineElements[lineIndex].classList.add("highlighted-line");
            setTimeout(() => {
              lineElements[lineIndex].classList.remove("highlighted-line");
            }, 2e3);
          }
        }
      }
    } catch (error) {
      console.error("Error al resaltar l\xEDnea:", error);
    }
  }
  /**
   * Formatea el nombre de un contexto para mejor visualización
   * @param contexto String del contexto con formato jerárquico
   * @returns Nombre formateado del contexto
   */
  formatearNombreContexto(contexto) {
    if (contexto.includes(" \u2192 ")) {
      return contexto.split(" \u2192 ").pop() || contexto;
    }
    return contexto;
  }
  // --- Taeas Huerfanas
  // Método para addOnsAPI que muestra tareas sin clasificar en un componente visual
  /**
   * Genera un componente visual para mostrar tareas sin clasificar (sin contexto, personas,
   * fechas o clasificación GTD)
   * @param dv Objeto dataview para acceder a sus funciones
   * @returns Elemento DOM con la vista de tareas sin clasificar
   */
  async mostrarTareasSinClasificar(dv2) {
    try {
      const container = document.createElement("div");
      container.className = "tareas-sin-clasificar-container";
      const styleEl = document.createElement("style");
      styleEl.textContent = `
        .tareas-sin-clasificar-container {
            font-size: 0.95em;
            width: 100%;
            max-width: 100%;
            margin: 0;
            padding: 0;
        }
        
        .tareas-heading {
            margin-top: 1rem;
            margin-bottom: 0.5rem;
            border-bottom: 1px solid var(--background-modifier-border);
            padding-bottom: 6px;
            font-weight: 600;
            font-size: 1.3em;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .stats-badge {
            background-color: var(--interactive-accent);
            color: white;
            border-radius: 12px;
            padding: 2px 10px;
            font-size: 0.8em;
            font-weight: normal;
        }
        
        .tarea-group {
            background-color: var(--background-secondary);
            border-radius: 8px;
            margin-bottom: 1rem;
            overflow: hidden;
        }
        
        .tarea-group-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 12px;
            background-color: var(--background-secondary-alt);
            cursor: pointer;
            user-select: none;
        }
        
        .tarea-group-header:hover {
            background-color: var(--background-modifier-hover);
        }
        
        .tarea-group-title {
            display: flex;
            align-items: center;
            gap: 8px;
            font-weight: 500;
        }
        
        .tarea-group-toggle {
            font-family: monospace;
            transition: transform 0.2s ease;
        }
        
        .tarea-group-toggle.open {
            transform: rotate(90deg);
        }
        
        .tarea-group-count {
            background-color: var(--interactive-accent);
            color: white;
            border-radius: 12px;
            padding: 1px 8px;
            font-size: 0.85em;
        }
        
        .tarea-list {
            padding: 0 12px 12px;
            display: none;
        }
        
        .tarea-list.open {
            display: block;
        }
        
        .tarea-item {
            margin: 8px 0;
            padding: 8px;
            border-radius: 6px;
            background-color: var(--background-primary);
            border: 1px solid var(--background-modifier-border);
            transition: all 0.2s ease;
        }
        
        .tarea-item:hover {
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
            border-color: var(--interactive-accent);
        }
        
        .tarea-texto {
            margin-bottom: 6px;
            display: flex;
            gap: 8px;
            align-items: flex-start;
        }
        
        .tarea-checkbox {
            color: var(--text-faint);
            font-size: 1.1em;
            flex-shrink: 0;
            cursor: pointer;
        }
        
        .tarea-contenido {
            flex-grow: 1;
            line-height: 1.4;
        }
        
        .tarea-metadatos {
            margin-left: 28px;
            font-size: 0.9em;
            color: var(--text-muted);
        }
        
        .tarea-meta-item {
            margin-bottom: 3px;
            display: flex;
            align-items: baseline;
        }
        
        .meta-icon {
            margin-right: 6px;
            width: 16px;
            text-align: center;
        }
        
        .loading-indicator {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 2rem;
            color: var(--text-muted);
        }
        
        .spinner {
            border: 3px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top: 3px solid var(--interactive-accent);
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin-bottom: 1rem;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .error-message {
            color: var(--text-error);
            background-color: rgba(var(--text-error-rgb), 0.1);
            padding: 10px;
            border-radius: 6px;
            text-align: center;
            margin: 10px 0;
        }
        
        .tareas-controls {
            display: flex;
            gap: 10px;
            margin-bottom: 1rem;
            justify-content: center;
        }
        
        .tareas-btn {
            background-color: var(--background-secondary-alt);
            border: 1px solid var(--background-modifier-border);
            border-radius: 6px;
            padding: 6px 12px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .tareas-btn:hover {
            background-color: var(--background-modifier-hover);
        }
        
        .expand-btn:hover {
            background-color: var(--interactive-accent);
            color: white;
        }
        
        .empty-message {
            color: var(--text-muted);
            text-align: center;
            padding: 2rem;
            font-style: italic;
        }
        `;
      container.appendChild(styleEl);
      const heading = document.createElement("h3");
      heading.className = "tareas-heading";
      heading.textContent = "Tareas Sin Clasificar";
      container.appendChild(heading);
      const controlsDiv = document.createElement("div");
      controlsDiv.className = "tareas-controls";
      const expandBtn = document.createElement("button");
      expandBtn.className = "tareas-btn expand-btn";
      expandBtn.textContent = "\u{1F4C2} Expandir Todo";
      expandBtn.addEventListener("click", () => this.expandirTodasLasTareas(container));
      const collapseBtn = document.createElement("button");
      collapseBtn.className = "tareas-btn collapse-btn";
      collapseBtn.textContent = "\u{1F4C1} Colapsar Todo";
      collapseBtn.addEventListener("click", () => this.colapsarTodasLasTareas(container));
      const refreshBtn = document.createElement("button");
      refreshBtn.className = "tareas-btn refresh-btn";
      refreshBtn.textContent = "\u{1F504} Actualizar";
      refreshBtn.addEventListener("click", async () => {
        const nuevoContainer = await this.mostrarTareasSinClasificar(dv2);
        container.parentNode.replaceChild(nuevoContainer, container);
      });
      controlsDiv.appendChild(expandBtn);
      controlsDiv.appendChild(collapseBtn);
      controlsDiv.appendChild(refreshBtn);
      container.appendChild(controlsDiv);
      const loadingDiv = document.createElement("div");
      loadingDiv.className = "loading-indicator";
      const spinnerDiv = document.createElement("div");
      spinnerDiv.className = "spinner";
      loadingDiv.appendChild(spinnerDiv);
      const loadingText = document.createElement("div");
      loadingText.textContent = "Buscando tareas sin clasificar...";
      loadingDiv.appendChild(loadingText);
      container.appendChild(loadingDiv);
      try {
        const { tareasPorNota, totalTareas, totalNotas } = await this.plugin.tareasAPI.getTareasSinClasificar();
        container.removeChild(loadingDiv);
        if (totalTareas === 0) {
          const emptyMessage = document.createElement("div");
          emptyMessage.className = "empty-message";
          emptyMessage.textContent = "\xA1Felicidades! No se encontraron tareas sin clasificar.";
          container.appendChild(emptyMessage);
          return container;
        }
        const statsBadge = document.createElement("span");
        statsBadge.className = "stats-badge";
        statsBadge.textContent = `${totalTareas} tareas en ${totalNotas} notas`;
        heading.appendChild(statsBadge);
        const notasOrdenadas = Array.from(tareasPorNota.values()).sort((a, b) => b.tareas.length - a.tareas.length);
        for (const notaInfo of notasOrdenadas) {
          const grupoTareas = this.crearGrupoTareas(notaInfo, dv2);
          container.appendChild(grupoTareas);
        }
        if (notasOrdenadas.length > 0) {
          const primerGrupo = container.querySelector(".tarea-group");
          if (primerGrupo) {
            const header = primerGrupo.querySelector(".tarea-group-header");
            const toggle = primerGrupo.querySelector(".tarea-group-toggle");
            const list = primerGrupo.querySelector(".tarea-list");
            toggle.classList.add("open");
            list.classList.add("open");
          }
        }
      } catch (error) {
        container.removeChild(loadingDiv);
        const errorMessage = document.createElement("div");
        errorMessage.className = "error-message";
        errorMessage.textContent = `Error al cargar tareas sin clasificar: ${error.message}`;
        container.appendChild(errorMessage);
        console.error("Error en mostrarTareasSinClasificar:", error);
      }
      return container;
    } catch (error) {
      console.error("Error general en mostrarTareasSinClasificar:", error);
      const errorContainer = document.createElement("div");
      errorContainer.className = "error-message";
      errorContainer.textContent = `Error al cargar tareas sin clasificar: ${error.message}`;
      return errorContainer;
    }
  }
  /**
   * Crea un grupo de tareas para una nota específica
   * @param notaInfo Información de la nota y sus tareas
   * @param dv Objeto dataview
   * @returns Elemento DOM con el grupo de tareas
   */
  crearGrupoTareas(notaInfo, dv2) {
    const { titulo, ruta, tareas } = notaInfo;
    const grupoDiv = document.createElement("div");
    grupoDiv.className = "tarea-group";
    const headerDiv = document.createElement("div");
    headerDiv.className = "tarea-group-header";
    const titleDiv = document.createElement("div");
    titleDiv.className = "tarea-group-title";
    const toggleSpan = document.createElement("span");
    toggleSpan.className = "tarea-group-toggle";
    toggleSpan.textContent = "\u25B6";
    titleDiv.appendChild(toggleSpan);
    try {
      const enlaceNota = document.createElement("a");
      enlaceNota.className = "internal-link";
      enlaceNota.textContent = titulo;
      enlaceNota.href = ruta;
      enlaceNota.setAttribute("data-href", ruta);
      enlaceNota.addEventListener("click", (event) => {
        event.preventDefault();
        app.workspace.openLinkText(ruta, "", true);
      });
      titleDiv.appendChild(enlaceNota);
    } catch (e) {
      const textoNota = document.createElement("span");
      textoNota.textContent = titulo;
      titleDiv.appendChild(textoNota);
    }
    headerDiv.appendChild(titleDiv);
    const countSpan = document.createElement("span");
    countSpan.className = "tarea-group-count";
    countSpan.textContent = tareas.length.toString();
    headerDiv.appendChild(countSpan);
    grupoDiv.appendChild(headerDiv);
    const tareasList = document.createElement("div");
    tareasList.className = "tarea-list";
    for (const tarea of tareas) {
      const tareaElement = this.crearTareaElementHuerfana(tarea, dv2);
      tareasList.appendChild(tareaElement);
    }
    grupoDiv.appendChild(tareasList);
    headerDiv.addEventListener("click", (event) => {
      if (event.target.tagName === "A")
        return;
      toggleSpan.classList.toggle("open");
      tareasList.classList.toggle("open");
      if (toggleSpan.classList.contains("open")) {
        toggleSpan.textContent = "\u25BC";
      } else {
        toggleSpan.textContent = "\u25B6";
      }
    });
    return grupoDiv;
  }
  /**
   * Crea un elemento DOM para una tarea sin clasificar
   * @param tarea Objeto con la información de la tarea
   * @param dv Objeto dataview
   * @returns Elemento DOM representando la tarea
   */
  crearTareaElementHuerfana(tarea, dv2) {
    var _a, _b, _c, _d, _e;
    const tareaDiv = document.createElement("div");
    tareaDiv.className = "tarea-item";
    const textoDiv = document.createElement("div");
    textoDiv.className = "tarea-texto";
    const checkboxSpan = document.createElement("span");
    checkboxSpan.className = "tarea-checkbox";
    checkboxSpan.textContent = "\u2610";
    checkboxSpan.setAttribute("data-path", tarea.rutaArchivo);
    checkboxSpan.setAttribute("data-line", ((_b = (_a = tarea.lineInfo) == null ? void 0 : _a.numero) == null ? void 0 : _b.toString()) || "0");
    checkboxSpan.addEventListener("click", () => {
      const path = checkboxSpan.getAttribute("data-path");
      const line = parseInt(checkboxSpan.getAttribute("data-line") || "0", 10);
      this.navegarATareaConResaltado(path, line, tarea.textoOriginal || tarea.texto, true);
    });
    textoDiv.appendChild(checkboxSpan);
    const contenidoSpan = document.createElement("span");
    contenidoSpan.className = "tarea-contenido";
    contenidoSpan.textContent = tarea.texto;
    contenidoSpan.setAttribute("data-path", tarea.rutaArchivo);
    contenidoSpan.setAttribute("data-line", ((_d = (_c = tarea.lineInfo) == null ? void 0 : _c.numero) == null ? void 0 : _d.toString()) || "0");
    contenidoSpan.style.cursor = "pointer";
    contenidoSpan.addEventListener("click", () => {
      const path = contenidoSpan.getAttribute("data-path");
      const line = parseInt(contenidoSpan.getAttribute("data-line") || "0", 10);
      this.navegarATareaConResaltado(path, line, tarea.textoOriginal || tarea.texto, true);
    });
    textoDiv.appendChild(contenidoSpan);
    tareaDiv.appendChild(textoDiv);
    const metadatosDiv = document.createElement("div");
    metadatosDiv.className = "tarea-metadatos";
    const ubicacionDiv = document.createElement("div");
    ubicacionDiv.className = "tarea-meta-item";
    const iconoUbicacion = document.createElement("span");
    iconoUbicacion.className = "meta-icon";
    iconoUbicacion.textContent = "\u{1F4CD}";
    ubicacionDiv.appendChild(iconoUbicacion);
    const valorUbicacion = document.createElement("span");
    if ((_e = tarea.lineInfo) == null ? void 0 : _e.numero) {
      valorUbicacion.textContent = `L\xEDnea ${tarea.lineInfo.numero}`;
    } else {
      valorUbicacion.textContent = "Posici\xF3n desconocida";
    }
    ubicacionDiv.appendChild(valorUbicacion);
    metadatosDiv.appendChild(ubicacionDiv);
    if (tarea.etiquetas.todas.length > 0) {
      const etiquetasDiv = document.createElement("div");
      etiquetasDiv.className = "tarea-meta-item";
      const iconoEtiquetas = document.createElement("span");
      iconoEtiquetas.className = "meta-icon";
      iconoEtiquetas.textContent = "\u{1F3F7}\uFE0F";
      etiquetasDiv.appendChild(iconoEtiquetas);
      const valorEtiquetas = document.createElement("span");
      valorEtiquetas.textContent = tarea.etiquetas.todas.join(" ");
      etiquetasDiv.appendChild(valorEtiquetas);
      metadatosDiv.appendChild(etiquetasDiv);
    }
    tareaDiv.appendChild(metadatosDiv);
    return tareaDiv;
  }
  /**
   * Expande todos los grupos de tareas
   * @param container Contenedor principal
   */
  expandirTodasLasTareas(container) {
    const grupos = container.querySelectorAll(".tarea-group");
    grupos.forEach((grupo) => {
      const toggle = grupo.querySelector(".tarea-group-toggle");
      const list = grupo.querySelector(".tarea-list");
      toggle.classList.add("open");
      toggle.textContent = "\u25BC";
      list.classList.add("open");
    });
  }
  /**
   * Colapsa todos los grupos de tareas
   * @param container Contenedor principal
   */
  colapsarTodasLasTareas(container) {
    const grupos = container.querySelectorAll(".tarea-group");
    grupos.forEach((grupo) => {
      const toggle = grupo.querySelector(".tarea-group-toggle");
      const list = grupo.querySelector(".tarea-list");
      toggle.classList.remove("open");
      toggle.textContent = "\u25B6";
      list.classList.remove("open");
    });
  }
  //-- Tareas Inbox
  // Delegación para mostrarTareasInbox
  async mostrarTareasInbox(dv2) {
    return this.tareasInboxComponent.generar(dv2);
  }
  /**
   * Muestra un dashboard de proyectos GTD y sus campañas asociadas
   * @param dv Objeto dataview para acceder a sus funciones
   * @param options Opciones de configuración (modo de visualización)
   * @returns Elemento HTML con el dashboard interactivo
   */
  async mostrarDashboardProyectosCampanas(dv2, options = {}) {
    return this.proyectoCampanasComponent.generar(dv2, options);
  }
};

// src/modules/noteLifecycleManager/API/YAMLUpdaterAPI.ts
var import_obsidian52 = require("obsidian");

// src/modules/moduloRegistroTiempo/modals/cambioHF.ts
var import_obsidian51 = require("obsidian");
var modal_cambioHF = class extends import_obsidian51.Modal {
  constructor(plugin, file) {
    super(plugin.app);
    this.plugin = plugin;
    this.file = file;
  }
  async onOpen() {
    var _a, _b;
    debugger;
    this.containerEl.classList.add("modalInbox");
    const { contentEl } = this;
    debugger;
    const metadata = this.plugin.app.metadataCache.getFileCache(this.file.file);
    const aliases = ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.aliases) || "Actividad sin alias";
    const horaFinStr = ((_b = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _b.horaFinal) ? window.moment(metadata.frontmatter.horaFinal, "YYYY-MM-DD dddd HH:mm").format("YYYY-MM-DDTHH:mm") : "";
    contentEl.createEl("h2", { text: `Cambio hora cierre de registro.` });
    contentEl.createEl("p", { text: `Tarea: "${aliases[0]}"` });
    contentEl.createEl("p", { text: "Hora de cierre registro:" });
    this.horaFinalInput = contentEl.createEl("input", {
      type: "datetime-local",
      value: horaFinStr
    });
    const saveButton = contentEl.createEl("button", { text: "Guardar cambios" });
    saveButton.onclick = () => this.guardarCambios();
  }
  async guardarCambios() {
    const nuevaHoraFinalLocal = this.horaFinalInput.value;
    if (!nuevaHoraFinalLocal) {
      new import_obsidian51.Notice("Por favor, seleccione una hora de cierre.");
      return;
    }
    const nuevaHoraFinal = window.moment(nuevaHoraFinalLocal).format("YYYY-MM-DD dddd HH:mm");
    try {
      debugger;
      let campos = ["fecha", `horaFinal_${nuevaHoraFinal}`, `tiempoTrabajado_${nuevaHoraFinal}`, "estado_\u{1F535}"];
      let resultado = await this.plugin.YAMLUpdaterAPI.actualizarNota(this.file, campos);
      this.close();
      new import_obsidian51.Notice("Hora de Finalizaci\xF3n actualizada correctamente.");
    } catch (error) {
      console.error("Error al guardar cambios en la nota:", error);
      new import_obsidian51.Notice("Error al guardar los cambios en la nota.");
    }
  }
};

// src/modules/noteLifecycleManager/API/YAMLUpdaterAPI.ts
var YAMLUpdaterAPI2 = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.infoNota = {};
    this.nota = {};
    this.tp = this.getTp();
    this.pathCampos = this.plugin.settings.file_camposCentral + ".md";
  }
  async actualizarNota(infoNota, campos) {
    var _a;
    Object.assign(this.infoNota, infoNota);
    try {
      for (let campo of campos) {
        const partes = campo.split("_");
        let campoName, functionName;
        let parametro = null;
        if (partes.length > 1) {
          functionName = `get${partes[0].charAt(0).toUpperCase() + partes[0].slice(1)}`;
          campoName = partes[0];
          parametro = partes[1];
        } else {
          campoName = partes[0];
          functionName = `get${campo.charAt(0).toUpperCase() + campo.slice(1)}`;
        }
        let metadata = (_a = app.metadataCache.getFileCache(this.infoNota.file)) == null ? void 0 : _a.frontmatter;
        let valorActualCampo = metadata[campoName] || "Sin definir";
        if (typeof this[functionName] === "function") {
          if (parametro !== null) {
            this.nota[campoName] = await this[functionName](parametro, valorActualCampo);
          } else {
            this.nota[campoName] = await this[functionName]();
          }
        } else {
          console.error(`La funci\xF3n ${functionName} no est\xE1 definida.`);
        }
      }
      if (Object.keys(this.nota).length > 0) {
        await this.updateYAMLFields(this.nota, infoNota.file.path);
      } else {
      }
    } catch (error) {
      console.error("No se pudo crear el objeto de registro.", error);
      new import_obsidian52.Notice("No se pudo crear el objeto de registro.");
      return null;
    }
    return this.nota;
  }
  async archivarNota(infoNota, campos) {
    let nota = {};
    Object.assign(this.infoNota, infoNota);
    try {
      for (let campo of campos) {
        const functionName = `get${campo.charAt(0).toUpperCase() + campo.slice(1)}`;
        if (typeof this[functionName] === "function") {
          nota[campo] = await this[functionName]();
        } else {
          console.error(`La funci\xF3n ${functionName} no est\xE1 definida.`);
        }
      }
      nota.estado = "\u{1F535}";
      if (Object.keys(nota).length > 0) {
        await this.updateYAMLFields(nota, infoNota.file.path);
      } else {
      }
    } catch (error) {
      console.error("No se pudo crear el objeto de registro.", error);
      new import_obsidian52.Notice("No se pudo crear el objeto de registro.");
      return null;
    }
    return nota;
  }
  async updateYAMLFields(nota, ruta) {
    try {
      const file = app.vault.getAbstractFileByPath(ruta);
      await app.fileManager.processFrontMatter(file, (frontmatter) => {
        for (const campo in nota) {
          if (frontmatter.hasOwnProperty(campo)) {
            frontmatter[campo] = nota[campo];
          }
        }
      });
      console.log("Frontmatter actualizado con \xE9xito");
    } catch (err) {
      console.error("Error al actualizar el frontmatter", err);
    }
  }
  getTp() {
    if (!this.plugin || !this.plugin.app.plugins.enabledPlugins.has("templater-obsidian")) {
      console.error("El plugin Templater no est\xE1 habilitado.");
      return;
    }
    let tpGen = this.plugin.app.plugins.plugins["templater-obsidian"].templater;
    tpGen = tpGen.functions_generator.internal_functions.modules_array;
    let tp = {};
    tp.system = tpGen.find((m) => m.name == "system");
    if (!tp.system) {
      console.error("No se pudo acceder al objeto de funciones actuales de Templater.");
      return;
    }
    console.log("tp en YAMLUpdaterAPI se ha cargado satisfactoriamente");
    return tp;
  }
  async getFecha(flag, actual) {
    return this.formatearFecha(/* @__PURE__ */ new Date());
  }
  formatearFecha(fecha) {
    const offset2 = fecha.getTimezoneOffset() * 6e4;
    const fechaLocal = new Date(fecha.getTime() - offset2);
    const fechaFormato = fechaLocal.toISOString().split("T")[0];
    const dias = ["Domingo", "Lunes", "Martes", "Mi\xE9rcoles", "Jueves", "Viernes", "S\xE1bado"];
    const diaSemana = dias[fecha.getDay()];
    const horaFormato = fecha.toTimeString().split(" ")[0].substring(0, 5);
    return `${fechaFormato} ${diaSemana} ${horaFormato}`;
  }
  async getHoraFinal(parametro, actual) {
    debugger;
    if (parametro === void 0) {
      return this.formatearFecha(/* @__PURE__ */ new Date());
    } else {
      return parametro;
    }
  }
  async getTiempoTrabajado(parametro, actual) {
    debugger;
    let horaInicioStr = this.infoNota.horaInicio;
    let cierre;
    let [fecha, , hora] = horaInicioStr.split(" ");
    let fechaHoraISO = `${fecha}T${hora}`;
    let horaInicio = new Date(fechaHoraISO);
    if (parametro == void 0) {
      cierre = /* @__PURE__ */ new Date();
    } else {
      let [fechaCierre, , horaCierre] = parametro.split(" ");
      let fechaHoraCierreISO = `${fechaCierre}T${horaCierre}`;
      cierre = new Date(fechaHoraCierreISO);
    }
    let diferenciaEnMilisegundos = cierre - horaInicio;
    return diferenciaEnMilisegundos;
  }
  async getSecId(flag, actual) {
  }
  async getTitulo(flag, actual) {
    let titulo = await this.tp.system.prompt(`Titulo de este(a) ${this.infoSubsistema.name}`, `${this.infoSubsistema.name} - ${this.nota.id}`, true);
    if (titulo === null) {
      new import_obsidian52.Notice("Creaci\xF3n de nota cancelada por el usuario.");
      return;
    }
    this.nota.titulo = titulo;
    return titulo;
  }
  async getDescripcion(flag, actual) {
    let prompt = this.tp.system.static_functions.get("prompt");
    let descripcion;
    switch (flag) {
      case "RegistroTiempo":
        descripcion = await prompt("\xBFDetalle del Registro Tiempo:", actual, false, true);
        break;
      default:
        descripcion = await prompt("\xBFQuieres agregar una descripci\xF3n?", ` Esta nota es sobre ${this.nota.titulo}`, false, true);
        break;
    }
    if (descripcion === null) {
      new import_obsidian52.Notice("Creaci\xF3n de nota cancelada por el usuario.");
      return;
    }
    this.nota.descripcion = descripcion;
    return descripcion;
  }
  async getAliases(flag, actual) {
    this.nota.aliases = [];
    switch (this.infoSubsistema.type) {
      case "Ax":
        this.nota.aliases.push(`${this.nota.titulo}`);
        this.nota.aliases.push(`${this.infoSubsistema.type} - ${this.nota.titulo}`);
        break;
      case "AV":
      case "AI":
        break;
    }
    return this.nota.aliases;
  }
  async getAsunto(flag, actual) {
    let siAsunto, nombre;
    let activo = app.workspace.getActiveFile();
    if (activo != null) {
      nombre = activo.basename;
      const nota = app.metadataCache.getFileCache(activo);
      siAsunto = await this.tp.system.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
    } else {
      siAsunto = false;
      nombre = "";
    }
    this.nota.asunto = {};
    this.nota.asunto.siAsunto = siAsunto;
    this.nota.asunto.nombre = nombre;
    return { siAsunto, nombre };
  }
  async getClasificacion(flag, actual) {
    var _a;
    let clasificacion2, tagClasificacion2, clasificacionAX, tagsClasificacionAX;
    let nuevaClasificacion2 = false;
    const file = app.vault.getAbstractFileByPath(this.pathCampos);
    const frontmatter = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    if (frontmatter) {
      clasificacionAX = frontmatter.tituloClasificacionAX || [];
      tagsClasificacionAX = frontmatter.tagsClasificacionAX || [];
      tagClasificacion2 = await this.tp.system.suggester(clasificacionAX, tagsClasificacionAX, false, "\xBFClasificar\xEDas esta nota bajo alguna de las siguientes categor\xEDas?");
      if (tagClasificacion2 === null) {
        new import_obsidian52.Notice("Creaci\xF3n de nota cancelada por el usuario.");
        return;
      } else if (tagClasificacion2 == "Nuevo") {
        clasificacion2 = await this.tp.system.prompt("\xBFCual es el nombre de la nueva clasificaci\xF3n que vas a ingresar?", "MiClasificaci\xF3n", true);
        if (clasificacion2 === null) {
          new import_obsidian52.Notice("Creaci\xF3n de nota cancelada por el usuario.");
          return;
        }
        tagClasificacion2 = await this.tp.system.prompt("\xBFCual es el tag que utilizaras para " + clasificacion2 + "?. No utilices espacios en la definici\xF3n del tag.", "nuevoTag", true);
        if (tagClasificacion2 === null) {
          new import_obsidian52.Notice("Creaci\xF3n de nota cancelada por el usuario.");
          return;
        }
        nuevaClasificacion2 = true;
      } else if (tagClasificacion2 == "Ninguna") {
        tagClasificacion2 = "";
        clasificacion2 = "";
      } else {
        let indice = tagsClasificacionAX.indexOf(tagClasificacion2);
        clasificacion2 = clasificacionAX[indice];
      }
    }
    if (nuevaClasificacion2) {
      try {
        await app.fileManager.processFrontMatter(file, (frontmatter2) => {
          let newClasificacion = [...clasificacionAX, clasificacion2];
          let newTagClasificacion = [...tagsClasificacionAX, tagClasificacion2];
          frontmatter2.tituloClasificacionAX = newClasificacion;
          frontmatter2.tagsClasificacionAX = newTagClasificacion;
          console.log("Frontmatter actualizado con \xE9xito");
        });
      } catch (err) {
        console.error("Error al actualizar el frontmatter", err);
      }
    }
    if (tagClasificacion2 != "") {
      tagClasificacion2 = "cl/" + tagClasificacion2;
    }
    this.nota.clasificacionAX = clasificacion2;
    this.nota.tagClasificacionAX = tagClasificacion2;
    return { clase: clasificacion2, tag: tagClasificacion2 };
  }
  // ->
  async getEstado(parametro, actual) {
    debugger;
    let campo;
    if (parametro == void 0) {
      let suggester = this.tp.system.static_functions.get("suggester");
      campo = await suggester(["\u{1F535} -> Completado - Informaci\xF3n", "\u{1F7E2} -> Finalizado", "\u{1F7E1} -> En ejecuci\xF3n", "\u{1F534} -> Detenido"], ["\u{1F535}", "\u{1F7E2}", "\u{1F7E1}", "\u{1F534}"], false, "Seleccione el nuevo estado:");
      if (campo === null) {
        new import_obsidian52.Notice("Modificaci\xF3n de nota cancelada por el usuario.");
        return;
      }
    } else {
      campo = parametro;
    }
    this.nota.estado = campo;
    return campo;
  }
  async getFilename(flag, actual) {
    switch (this.infoSubsistema.type) {
      case "AV":
      case "AI":
        this.nota.fileName = `${this.infoSubsistema.folder}/${this.nota.titulo}/index${this.infoSubsistema.type}`;
        break;
      case "Ax":
        this.nota.fileName = `${this.infoSubsistema.folder}/${this.infoSubsistema.type} - ${this.nota.id}`;
        break;
    }
    return this.nota.fileName;
  }
  async modalCambioHF(nota) {
    debugger;
    let modal = new modal_cambioHF(this.plugin, nota);
    modal.open();
  }
};

// src/modules/noteLifecycleManager/API/menuDiarioAPI.ts
var import_obsidian53 = require("obsidian");
init_luxon();
init_utilsAPI();
init_registroTiempoAPI();
var menuHoyAPI = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.app = plugin.app;
    this.registroTiempoAPI = new registroTiempoAPI(this.plugin);
  }
  // Función para crear y mostrar el botón inicial "Menú hoy"
  async mostrarMenu(dv2) {
    dv2.container.innerHTML = "";
    const botonMenuHoy = document.createElement("button");
    botonMenuHoy.textContent = "Men\xFA hoy";
    dv2.container.appendChild(botonMenuHoy);
    botonMenuHoy.onclick = async () => {
      await this.mostrarBotones(dv2);
    };
  }
  // Método modificado para adaptarse al contexto del plugin
  async mostrarBotones(dv2) {
    dv2.container.innerHTML = "";
    const botones = [
      "H\xE1bitos",
      "Balance",
      "Registro de Tareas",
      "Notas d\xEDa",
      "Personales"
    ];
    botones.forEach((textoBoton) => {
      const boton = document.createElement("button");
      boton.textContent = textoBoton;
      boton.onclick = async () => {
        switch (textoBoton) {
          case "Balance":
            await this.mostrarBotonBalancePersonal(dv2);
            break;
          case "H\xE1bitos":
            await this.mostrarFormularioHabitos(dv2);
            break;
          case "Registro de Tareas":
            await this.mostrarBotonRegistroTareas(dv2);
            break;
          case "Notas d\xEDa":
            await this.mostrarBotonesNotasD\u00EDa(dv2);
            break;
          case "Personales":
            await this.mostrarBotonesNotasPersonales(dv2);
            break;
          default:
            console.log(`${textoBoton} presionado.`);
            break;
        }
      };
      dv2.container.appendChild(boton);
    });
    const botonSalir = this.agregarBotonSalir(dv2);
    dv2.container.appendChild(botonSalir);
  }
  // Método para agregar el botón de recarga y su lógica (Ejemplo adaptado)
  agregarBotonSalir(dv2) {
    const botonRecarga = document.createElement("button");
    botonRecarga.textContent = "Salir";
    botonRecarga.onclick = async () => {
      await this.mostrarMenu(dv2);
    };
    return botonRecarga;
  }
  // Método para actualizar campos YAML
  async updateYAMLFields(filePath, YAMLfield, valor) {
    try {
      const file = app.vault.getAbstractFileByPath(filePath);
      if (file instanceof import_obsidian53.TFile) {
        try {
          await app.fileManager.processFrontMatter(file, (frontmatter) => {
            frontmatter[YAMLfield] = valor;
          });
          new import_obsidian53.Notice("YAML actualizado con \xE9xito.");
        } catch (err) {
          console.error("Error al actualizar el frontmatter", err);
        }
      }
    } catch (err) {
      console.error("Archivo no encontrado", err);
      new import_obsidian53.Notice("Error al actualizar el YAML.");
    }
  }
  // Método adaptado para mostrarBotonBalancePersonal
  async mostrarBotonBalancePersonal(dv2) {
    var _a;
    dv2.container.innerHTML = "";
    const mensaje = document.createElement("h2");
    mensaje.textContent = "Eval\xFAa el balance de tu vida hoy";
    dv2.container.appendChild(mensaje);
    const instrucciones = document.createElement("p");
    instrucciones.textContent = "Eval\xFAa de 1 a 5 cada \xE1rea:";
    dv2.container.appendChild(instrucciones);
    const areas = [
      "Productividad",
      "Espiritual",
      "Salud",
      "Rutinas",
      "Vida Social",
      "Familiar",
      "Aprendizajes",
      "Creatividad"
    ];
    const file = app.workspace.getActiveFile();
    let metadata;
    if (file instanceof import_obsidian53.TFile) {
      metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    }
    areas.forEach((area) => {
      const safeName = area.toLowerCase().replace(/ /g, "_");
      const currentVal = metadata && metadata[safeName] ? metadata[safeName] : 0;
      const contenedorArea = document.createElement("div");
      contenedorArea.classList.add("area-evaluacion");
      const label = document.createElement("label");
      label.textContent = area + ": ";
      label.htmlFor = safeName;
      const input = document.createElement("input");
      input.type = "range";
      input.id = safeName;
      input.name = safeName;
      input.min = "1";
      input.max = "5";
      input.value = currentVal.toString();
      const valorLabel = document.createElement("span");
      valorLabel.textContent = input.value;
      input.oninput = () => valorLabel.textContent = input.value;
      contenedorArea.appendChild(label);
      contenedorArea.appendChild(input);
      contenedorArea.appendChild(valorLabel);
      dv2.container.appendChild(contenedorArea);
    });
    const botonGuardar = document.createElement("button");
    botonGuardar.textContent = "Guardar";
    botonGuardar.onclick = async () => {
      if (file instanceof import_obsidian53.TFile) {
        for (const area of areas) {
          const safeName = area.toLowerCase().replace(/ /g, "_");
          const inputElement = document.getElementById(safeName);
          const valor = parseInt(inputElement.value, 10);
          await this.updateYAMLFields(file.path, safeName, valor);
        }
        new import_obsidian53.Notice("Balances actualizados con \xE9xito.");
      } else {
        new import_obsidian53.Notice("No se pudo obtener el archivo actual.");
      }
    };
    dv2.container.appendChild(botonGuardar);
    const botonSalir = this.agregarBotonSalir(dv2);
    dv2.container.appendChild(botonSalir);
  }
  async mostrarFormularioHabitos(dv2) {
    dv2.container.innerHTML = "";
    const habitos = [
      "Club 5am",
      "Registro Ak\xE1shiko",
      "Gimnasio",
      "Comer Saludable",
      "Leer libro",
      "Escribir bit\xE1cora el mismo d\xEDa",
      "Crear plan d\xEDa siguiente",
      "Me fu\xED a dormir antes de las 10:30pm"
    ];
    const cargarCheckboxesSeleccionados = async () => {
      var _a;
      const file = app.workspace.getActiveFile();
      const fileContent = await app.vault.read(file);
      const frontMatter = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      const existingHabits = (frontMatter == null ? void 0 : frontMatter.habitos) || [];
      habitos.forEach((habito) => {
        const container = document.createElement("div");
        const checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.id = habito;
        checkbox.name = "habitos";
        checkbox.value = habito;
        checkbox.checked = existingHabits.includes(habito);
        const label = document.createElement("label");
        label.htmlFor = habito;
        label.textContent = habito;
        container.appendChild(checkbox);
        container.appendChild(label);
        dv2.container.appendChild(container);
      });
    };
    await cargarCheckboxesSeleccionados();
    const guardarBtn = document.createElement("button");
    guardarBtn.textContent = "Guardar";
    guardarBtn.onclick = async () => {
      const file = app.workspace.getActiveFile();
      const checkboxes = Array.from(document.querySelectorAll('input[name="habitos"]:checked'));
      const selectedHabits = checkboxes.map((checkbox) => checkbox.value);
      await this.updateYAMLFields(file.path, "habitos", selectedHabits);
    };
    dv2.container.appendChild(guardarBtn);
    const botonSalir = this.agregarBotonSalir(dv2);
    dv2.container.appendChild(botonSalir);
  }
  // Método adaptado para mostrarBotonBalancePersonal
  async mostrarBotonRegistroTareas(dv2) {
    dv2.container.innerHTML = "";
    let botones;
    const utilsAPInstance = new utilsAPI(this.plugin);
    const activo = await utilsAPInstance.buscarRegistrosActivos(app);
    if (activo instanceof import_obsidian53.TFile) {
      botones = ["Cerradas Hoy", "Registros Hoy", "Nuevo Registro Tiempo", "Cerrar Registro Tiempo"];
    } else {
      botones = ["Cerradas Hoy", "Registros Hoy", "Nuevo Registro Tiempo"];
    }
    botones.forEach((textoBoton) => {
      const boton = document.createElement("button");
      boton.textContent = textoBoton;
      boton.onclick = async () => {
        switch (textoBoton) {
          case "Cerradas Hoy":
            await this.mostrarCerradasHoy(dv2);
            break;
          case "Registros Hoy":
            await this.mostrarRegistrosHoy(dv2);
            break;
          case "Cerrar Registro Tiempo":
            debugger;
            await this.registroTiempoAPI.cerrarRegistro(activo);
            break;
          case "Nuevo Registro Tiempo":
            const starterAPInstance = new starterAPI(this.plugin);
            await starterAPInstance.createNote("RegistroTiempo");
            break;
          default:
            console.log(`${textoBoton} presionado.`);
            break;
        }
      };
      dv2.container.appendChild(boton);
    });
    const botonSalir = this.agregarBotonSalir(dv2);
    dv2.container.appendChild(botonSalir);
  }
  async mostrarCerradasHoy(dv2) {
    dv2.container.innerHTML = "";
    const activo = app.workspace.getActiveFile();
    let fechaActivo = activo == null ? void 0 : activo.basename.split(" ")[0];
    const hoy = new Date(fechaActivo).setHours(0, 0, 0, 0);
    const files = app.vault.getMarkdownFiles();
    let tareasPromesas = files.map(async (file) => {
      var _a;
      let contenido = await app.vault.read(file);
      let tareasExtraidas = extraerTareas(contenido);
      const frontMatter = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      const alias = (frontMatter == null ? void 0 : frontMatter.aliases) ? frontMatter.aliases[0] : null;
      const filePath = file.path;
      return {
        filePath,
        alias,
        tareas: tareasExtraidas.filter((tarea) => {
          let fechaTarea = new Date(tarea.completionDate).setHours(0, 0, 0, 0);
          return tarea.completed && tarea.completionDate && fechaTarea === hoy;
        })
      };
    });
    let resultados = await Promise.all(tareasPromesas);
    let totalTareasCerradas = resultados.reduce((total, { tareas }) => total + tareas.length, 0);
    if (totalTareasCerradas > 0) {
      dv2.header(3, `Hoy se han cerrado ${totalTareasCerradas} tareas.`);
      const table = document.createElement("table");
      table.classList.add("table");
      table.style.width = "100%";
      const headerRow = document.createElement("tr");
      let headers = ["Nota", "Tareas Cerradas"];
      headers.forEach((headerText) => {
        let header = document.createElement("th");
        header.textContent = headerText;
        header.style.textAlign = "center";
        headerRow.appendChild(header);
      });
      table.appendChild(headerRow);
      resultados.forEach(({ filePath, alias, tareas }) => {
        if (tareas.length > 0) {
          let row = document.createElement("tr");
          let linkCell = document.createElement("td");
          linkCell.style.verticalAlign = "middle";
          let a = document.createElement("a");
          a.setAttribute("href", `obsidian://open?vault=${app.vault.getName()}&file=${encodeURIComponent(filePath)}`);
          a.textContent = alias || filePath;
          linkCell.appendChild(a);
          row.appendChild(linkCell);
          let tasksCell = document.createElement("td");
          let tasksList = document.createElement("ul");
          tareas.forEach((tarea) => {
            let li = document.createElement("li");
            li.textContent = tarea.text;
            tasksList.appendChild(li);
          });
          tasksCell.appendChild(tasksList);
          row.appendChild(tasksCell);
          table.appendChild(row);
        }
      });
      dv2.container.appendChild(table);
    } else {
      dv2.paragraph("No hay tareas cerradas hoy.");
    }
    const botonSalir = this.agregarBotonSalir(dv2);
    dv2.container.appendChild(botonSalir);
    function extraerTareas(contenido) {
      const tareas = [];
      const lineas = contenido.split("\n");
      for (const linea of lineas) {
        const tareaRegex = /^\s*-\s*\[(x|X| )\]\s*(.+)$/;
        const match2 = tareaRegex.exec(linea);
        if (match2) {
          const completada = match2[1].toLowerCase() === "x";
          let textoTarea = match2[2];
          let fechaCompletitud = null;
          const fechaRegex = /\[completion:: (\d{4}-\d{2}-\d{2})\]/;
          const fechaMatch = fechaRegex.exec(textoTarea);
          if (fechaMatch) {
            fechaCompletitud = fechaMatch[1];
            textoTarea = textoTarea.replace(fechaRegex, "").trim();
          }
          tareas.push({
            text: textoTarea,
            completed: completada,
            completionDate: fechaCompletitud
          });
        }
      }
      return tareas;
    }
  }
  async mostrarRegistrosHoy(dv2) {
    var _a, _b;
    const activeLeaf = app.workspace.activeLeaf;
    const currentFilePath = (_b = (_a = activeLeaf.view) == null ? void 0 : _a.file) == null ? void 0 : _b.path;
    const newLeaf = await app.workspace.splitActiveLeaf("vertical");
    await newLeaf.setViewState({
      type: "vista-registro-diario"
    });
    app.workspace.revealLeaf(newLeaf);
  }
  createButtonTable(buttonText, onClickCallback) {
    const button = document.createElement("button");
    button.textContent = buttonText;
    button.type = "button";
    button.classList.add("your-button-class");
    button.addEventListener("click", onClickCallback);
    return button;
  }
  // Crea la nota desde el templater de RegistroTiempo
  async retomarTarea(id) {
    debugger;
    const filePath = `Plantillas/${this.plugin.settings[`folder_RegistroTiempo`]}/Plt - RegistroTiempo.md`;
    const template = app.vault.getAbstractFileByPath(filePath);
    if (template instanceof import_obsidian53.TFile) {
      console.log("Archivo encontrado:", template);
    } else {
      console.log("Archivo no encontrado.");
    }
    const filename = "Retomar " + id;
    const folder = app.vault.getAbstractFileByPath("Inbox");
    const tp = this.getTp();
    let crearNota = tp.file.static_functions.get("create_new");
    await crearNota(template, filename, false, folder).basename;
  }
  getTp() {
    if (!this.plugin || !this.plugin.app.plugins.enabledPlugins.has("templater-obsidian")) {
      console.error("El plugin Templater no est\xE1 habilitado.");
      return;
    }
    let tpGen = this.plugin.app.plugins.plugins["templater-obsidian"].templater;
    tpGen = tpGen.functions_generator.internal_functions.modules_array;
    let tp = {};
    tp.file = tpGen.find((m) => m.name == "file");
    tp.system = tpGen.find((m) => m.name == "system");
    if (!tp.file) {
      console.error("No se pudo acceder al objeto de funciones actuales de Templater.");
      return;
    }
    console.log('tp con propiedades "file" se ha cargado satisfactoriamente');
    return tp;
  }
};

// src/modules/noteLifecycleManager/API/menuSemanalAPI.ts
var import_obsidian55 = require("obsidian");
init_luxon();
init_utilsAPI();

// src/modules/noteLifecycleManager/views/vistaResumenSemanal.ts
var import_obsidian54 = require("obsidian");
init_luxon();
var VistaResumenSemanal = class extends import_obsidian54.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  getViewType() {
    return "vista-resumen-semanal";
  }
  getDisplayText() {
    return "Resumen Semanal";
  }
  getIcon() {
    return "history";
  }
  async onOpen() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      this.contentEl.setText("No hay un archivo activo.");
      return;
    }
    const fileCache = this.app.metadataCache.getFileCache(activeFile);
    await this.actualizarVista(fileCache);
    this.intervalId = window.setInterval(async () => {
      await this.actualizarVista(fileCache);
    }, 1e4);
  }
  onClose() {
    clearInterval(this.intervalId);
  }
  async actualizarVista(fileCache) {
    var _a;
    this.contentEl.empty();
    const inicioWStr = (_a = fileCache.frontmatter) == null ? void 0 : _a.inicioW;
    if (!inicioWStr) {
      this.contentEl.setText("La configuraci\xF3n de inicioW no est\xE1 establecida.");
      return;
    }
    const folderDiario = "Estructura/Journal/Diario/Notas";
    const inicioW = DateTime.fromFormat(inicioWStr, "yyyy-MM-dd EEEE", { locale: "es" });
    const finW = inicioW.plus({ days: 6 });
    const archivosDiario = this.app.vault.getFiles().filter((file) => file.path.startsWith(folderDiario) && file.extension === "md");
    const bitacoras = archivosDiario.map((file) => {
      var _a2;
      const fechaArchivo = DateTime.fromISO(file.basename.substring(0, 10));
      const datos = (_a2 = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a2.frontmatter;
      return {
        archivo: file.basename,
        path: file.path,
        fechaArchivo,
        datos
      };
    }).filter(({ fechaArchivo }) => fechaArchivo >= inicioW && fechaArchivo <= finW).sort((a, b) => a.fechaArchivo.toMillis() - b.fechaArchivo.toMillis());
    let trim = finW.quarter;
    let sem = finW.weekNumber - (finW.quarter - 1) * 13;
    if (sem == 0) {
      sem = 13;
    }
    const titulo = this.contentEl.createEl("h2", { text: `Resumen de la semana ${sem} - Q${trim} / W${finW.toFormat("WW")}.` });
    const subtitulo = this.contentEl.createEl("h3", { text: `Desde el ${inicioW.toFormat("EEEE, DD")} al ${finW.toFormat("EEEE, DD")}` });
    titulo.style.textAlign = "center";
    subtitulo.style.textAlign = "center";
    const table = document.createElement("table");
    table.className = "table-resumenSemanal";
    const thead = document.createElement("thead");
    const headerRow = document.createElement("tr");
    ["D\xEDa", "Resumen"].forEach((headerText) => {
      const th = document.createElement("th");
      th.textContent = headerText;
      headerRow.appendChild(th);
    });
    thead.appendChild(headerRow);
    table.appendChild(thead);
    const tbody = document.createElement("tbody");
    bitacoras.forEach(({ archivo, path, datos }) => {
      const tr = document.createElement("tr");
      const tdArchivo = document.createElement("td");
      const linkEl = document.createElement("a");
      linkEl.textContent = archivo;
      linkEl.href = path;
      linkEl.onclick = async (ev) => {
        ev.preventDefault();
        const file = this.app.vault.getAbstractFileByPath(path);
        if (file instanceof import_obsidian54.TFile) {
          await this.app.workspace.getLeaf(false).openFile(file, { eState: { focus: true } });
        }
      };
      tdArchivo.appendChild(linkEl);
      const tdResumen = document.createElement("td");
      const ul = document.createElement("ul");
      (datos.titulo || ["Sin t\xEDtulo"]).forEach((titulo2) => {
        const li = document.createElement("li");
        li.textContent = titulo2;
        ul.appendChild(li);
      });
      tdResumen.appendChild(ul);
      tr.appendChild(tdArchivo);
      tr.appendChild(tdResumen);
      tbody.appendChild(tr);
    });
    table.appendChild(tbody);
    this.contentEl.appendChild(table);
  }
  // Opcional: Implementa onClose si necesitas limpieza al cerrar la vista.
};

// src/modules/noteLifecycleManager/API/menuSemanalAPI.ts
var menuSemanalAPI = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.app = plugin.app;
  }
  // Función para crear y mostrar el botón inicial "Menú hoy"
  async mostrarMenu(dv2) {
    dv2.container.innerHTML = "";
    const botonMenuHoy = document.createElement("button");
    botonMenuHoy.textContent = "Men\xFA Semanal";
    dv2.container.appendChild(botonMenuHoy);
    botonMenuHoy.onclick = async () => {
      await this.mostrarBotones(dv2);
    };
  }
  // Método modificado para adaptarse al contexto del plugin
  async mostrarBotones(dv2) {
    dv2.container.innerHTML = "";
    const botones = [
      "Resumen diario",
      "Agradecimientos",
      "Creadas",
      "Modificadas",
      "x Fecha",
      "Tareas Cerradas"
    ];
    botones.forEach((textoBoton) => {
      const boton = document.createElement("button");
      boton.textContent = textoBoton;
      boton.onclick = async () => {
        switch (textoBoton) {
          case "Resumen diario":
            await this.mostrarResumenDiario(dv2);
            break;
          case "Agradecimientos":
            await this.mostrarAgradecimientos(dv2);
            break;
          case "Creadas":
            await this.mostrarCreadas(dv2);
            break;
          case "Modificadas":
            await this.mostrarModificadas(dv2);
            break;
          case "x Fecha":
            await this.mostrarxFecha(dv2);
            break;
          case "Tareas Cerradas":
            await this.mostrarTareasCerradas(dv2);
            break;
          default:
            console.log(`${textoBoton} presionado.`);
            break;
        }
      };
      dv2.container.appendChild(boton);
    });
    const botonSalir = this.agregarBotonSalir(dv2);
    dv2.container.appendChild(botonSalir);
  }
  // Método para agregar el botón de recarga y su lógica (Ejemplo adaptado)
  agregarBotonSalir(dv2) {
    const botonRecarga = document.createElement("button");
    botonRecarga.textContent = "Salir";
    botonRecarga.onclick = async () => {
      await this.mostrarMenu(dv2);
    };
    return botonRecarga;
  }
  // Método para actualizar campos YAML
  async updateYAMLFields(filePath, YAMLfield, valor) {
    try {
      const file = app.vault.getAbstractFileByPath(filePath);
      if (file instanceof import_obsidian55.TFile) {
        try {
          await app.fileManager.processFrontMatter(file, (frontmatter) => {
            frontmatter[YAMLfield] = valor;
          });
          new import_obsidian55.Notice("YAML actualizado con \xE9xito.");
        } catch (err) {
          console.error("Error al actualizar el frontmatter", err);
        }
      }
    } catch (err) {
      console.error("Archivo no encontrado", err);
      new import_obsidian55.Notice("Error al actualizar el YAML.");
    }
  }
  async mostrarResumenDiario(dv2) {
    var _a, _b;
    debugger;
    const activeLeaf = app.workspace.activeLeaf;
    const currentFilePath = (_b = (_a = activeLeaf.view) == null ? void 0 : _a.file) == null ? void 0 : _b.path;
    const newLeaf = await app.workspace.splitActiveLeaf("vertical");
    await newLeaf.setViewState({
      type: "vista-resumen-semanal"
    });
    app.workspace.revealLeaf(newLeaf);
  }
  // Método adaptado para mostrarBotonBalancePersonal
  async mostrarBotonBalancePersonal(dv2) {
    var _a;
    dv2.container.innerHTML = "";
    const mensaje = document.createElement("h2");
    mensaje.textContent = "Eval\xFAa el balance de tu vida hoy";
    dv2.container.appendChild(mensaje);
    const instrucciones = document.createElement("p");
    instrucciones.textContent = "Eval\xFAa de 1 a 5 cada \xE1rea:";
    dv2.container.appendChild(instrucciones);
    const areas = [
      "Productividad",
      "Espiritual",
      "Salud",
      "Rutinas",
      "Vida Social",
      "Familiar",
      "Aprendizajes",
      "Creatividad"
    ];
    const file = app.workspace.getActiveFile();
    let metadata;
    if (file instanceof import_obsidian55.TFile) {
      metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    }
    areas.forEach((area) => {
      const safeName = area.toLowerCase().replace(/ /g, "_");
      const currentVal = metadata && metadata[safeName] ? metadata[safeName] : 0;
      const contenedorArea = document.createElement("div");
      contenedorArea.classList.add("area-evaluacion");
      const label = document.createElement("label");
      label.textContent = area + ": ";
      label.htmlFor = safeName;
      const input = document.createElement("input");
      input.type = "range";
      input.id = safeName;
      input.name = safeName;
      input.min = "1";
      input.max = "5";
      input.value = currentVal.toString();
      const valorLabel = document.createElement("span");
      valorLabel.textContent = input.value;
      input.oninput = () => valorLabel.textContent = input.value;
      contenedorArea.appendChild(label);
      contenedorArea.appendChild(input);
      contenedorArea.appendChild(valorLabel);
      dv2.container.appendChild(contenedorArea);
    });
    const botonGuardar = document.createElement("button");
    botonGuardar.textContent = "Guardar";
    botonGuardar.onclick = async () => {
      if (file instanceof import_obsidian55.TFile) {
        for (const area of areas) {
          const safeName = area.toLowerCase().replace(/ /g, "_");
          const inputElement = document.getElementById(safeName);
          const valor = parseInt(inputElement.value, 10);
          await this.updateYAMLFields(file.path, safeName, valor);
        }
        new import_obsidian55.Notice("Balances actualizados con \xE9xito.");
      } else {
        new import_obsidian55.Notice("No se pudo obtener el archivo actual.");
      }
    };
    dv2.container.appendChild(botonGuardar);
    const botonSalir = this.agregarBotonSalir(dv2);
    dv2.container.appendChild(botonSalir);
  }
  async mostrarFormularioHabitos(dv2) {
    dv2.container.innerHTML = "";
    const habitos = [
      "Club 5am",
      "Registro Ak\xE1shiko",
      "Gimnasio",
      "Comer Saludable",
      "Leer libro",
      "Escribir bit\xE1cora el mismo d\xEDa",
      "Crear plan d\xEDa siguiente",
      "Me fu\xED a dormir antes de las 10:30pm"
    ];
    const cargarCheckboxesSeleccionados = async () => {
      var _a;
      const file = app.workspace.getActiveFile();
      const fileContent = await app.vault.read(file);
      const frontMatter = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      const existingHabits = (frontMatter == null ? void 0 : frontMatter.habitos) || [];
      habitos.forEach((habito) => {
        const container = document.createElement("div");
        const checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.id = habito;
        checkbox.name = "habitos";
        checkbox.value = habito;
        checkbox.checked = existingHabits.includes(habito);
        const label = document.createElement("label");
        label.htmlFor = habito;
        label.textContent = habito;
        container.appendChild(checkbox);
        container.appendChild(label);
        dv2.container.appendChild(container);
      });
    };
    await cargarCheckboxesSeleccionados();
    const guardarBtn = document.createElement("button");
    guardarBtn.textContent = "Guardar";
    guardarBtn.onclick = async () => {
      const file = app.workspace.getActiveFile();
      const checkboxes = Array.from(document.querySelectorAll('input[name="habitos"]:checked'));
      const selectedHabits = checkboxes.map((checkbox) => checkbox.value);
      await this.updateYAMLFields(file.path, "habitos", selectedHabits);
    };
    dv2.container.appendChild(guardarBtn);
    const botonSalir = this.agregarBotonSalir(dv2);
    dv2.container.appendChild(botonSalir);
  }
  // Método adaptado para mostrarBotonBalancePersonal
  async mostrarBotonRegistroTareas(dv2) {
    dv2.container.innerHTML = "";
    let botones;
    const utilsAPInstance = new utilsAPI(this.plugin);
    const activo = await utilsAPInstance.buscarRegistrosActivos(app);
    if (activo instanceof import_obsidian55.TFile) {
      botones = ["Cerradas Hoy", "Registros Hoy", "Nuevo Registro Tiempo", "Cerrar Registro Tiempo"];
    } else {
      botones = ["Cerradas Hoy", "Registros Hoy", "Nuevo Registro Tiempo"];
    }
    botones.forEach((textoBoton) => {
      const boton = document.createElement("button");
      boton.textContent = textoBoton;
      boton.onclick = async () => {
        switch (textoBoton) {
          case "Cerradas Hoy":
            await this.mostrarCerradasHoy(dv2);
            break;
          case "Registros Hoy":
            await this.mostrarRegistrosHoy(dv2);
            break;
          case "Cerrar Registro Tiempo":
            debugger;
            await this.registroTiempoAPI.cerrarRegistro(activo);
            break;
          case "Nuevo Registro Tiempo":
            const starterAPInstance = new starterAPI(this.plugin);
            await starterAPInstance.createNote("RegistroTiempo");
            break;
          default:
            console.log(`${textoBoton} presionado.`);
            break;
        }
      };
      dv2.container.appendChild(boton);
    });
    const botonSalir = this.agregarBotonSalir(dv2);
    dv2.container.appendChild(botonSalir);
  }
  async mostrarCerradasHoy(dv2) {
    dv2.container.innerHTML = "";
    const activo = app.workspace.getActiveFile();
    let fechaActivo = activo == null ? void 0 : activo.basename.split(" ")[0];
    const hoy = new Date(fechaActivo).setHours(0, 0, 0, 0);
    const files = app.vault.getMarkdownFiles();
    let tareasPromesas = files.map(async (file) => {
      var _a;
      let contenido = await app.vault.read(file);
      let tareasExtraidas = extraerTareas(contenido);
      const frontMatter = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      const alias = (frontMatter == null ? void 0 : frontMatter.aliases) ? frontMatter.aliases[0] : null;
      const filePath = file.path;
      return {
        filePath,
        alias,
        tareas: tareasExtraidas.filter((tarea) => {
          let fechaTarea = new Date(tarea.completionDate).setHours(0, 0, 0, 0);
          return tarea.completed && tarea.completionDate && fechaTarea === hoy;
        })
      };
    });
    let resultados = await Promise.all(tareasPromesas);
    let totalTareasCerradas = resultados.reduce((total, { tareas }) => total + tareas.length, 0);
    if (totalTareasCerradas > 0) {
      dv2.header(3, `Hoy se han cerrado ${totalTareasCerradas} tareas.`);
      const table = document.createElement("table");
      table.classList.add("table");
      table.style.width = "100%";
      const headerRow = document.createElement("tr");
      let headers = ["Nota", "Tareas Cerradas"];
      headers.forEach((headerText) => {
        let header = document.createElement("th");
        header.textContent = headerText;
        header.style.textAlign = "center";
        headerRow.appendChild(header);
      });
      table.appendChild(headerRow);
      resultados.forEach(({ filePath, alias, tareas }) => {
        if (tareas.length > 0) {
          let row = document.createElement("tr");
          let linkCell = document.createElement("td");
          linkCell.style.verticalAlign = "middle";
          let a = document.createElement("a");
          a.setAttribute("href", `obsidian://open?vault=${app.vault.getName()}&file=${encodeURIComponent(filePath)}`);
          a.textContent = alias || filePath;
          linkCell.appendChild(a);
          row.appendChild(linkCell);
          let tasksCell = document.createElement("td");
          let tasksList = document.createElement("ul");
          tareas.forEach((tarea) => {
            let li = document.createElement("li");
            li.textContent = tarea.text;
            tasksList.appendChild(li);
          });
          tasksCell.appendChild(tasksList);
          row.appendChild(tasksCell);
          table.appendChild(row);
        }
      });
      dv2.container.appendChild(table);
    } else {
      dv2.paragraph("No hay tareas cerradas hoy.");
    }
    const botonSalir = this.agregarBotonSalir(dv2);
    dv2.container.appendChild(botonSalir);
    function extraerTareas(contenido) {
      const tareas = [];
      const lineas = contenido.split("\n");
      for (const linea of lineas) {
        const tareaRegex = /^\s*-\s*\[(x|X| )\]\s*(.+)$/;
        const match2 = tareaRegex.exec(linea);
        if (match2) {
          const completada = match2[1].toLowerCase() === "x";
          let textoTarea = match2[2];
          let fechaCompletitud = null;
          const fechaRegex = /\[completion:: (\d{4}-\d{2}-\d{2})\]/;
          const fechaMatch = fechaRegex.exec(textoTarea);
          if (fechaMatch) {
            fechaCompletitud = fechaMatch[1];
            textoTarea = textoTarea.replace(fechaRegex, "").trim();
          }
          tareas.push({
            text: textoTarea,
            completed: completada,
            completionDate: fechaCompletitud
          });
        }
      }
      return tareas;
    }
  }
  async mostrarRegistrosHoy(dv2) {
    var _a;
    dv2.container.innerHTML = "";
    const fechaHoy = DateTime.fromFormat(app.workspace.getActiveFile().basename.split(" ")[0], "yyyy-MM-dd", { locale: "es" });
    const folder = this.plugin.settings.folder_RegistroTiempo;
    const files = app.vault.getMarkdownFiles().filter((file) => file.path.includes(folder));
    let totalDia = 0;
    let registrosHoy = [];
    for (let file of files) {
      let metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if (metadata == null ? void 0 : metadata.horaInicio) {
        let horaInicio = DateTime.fromFormat(metadata.horaInicio, "yyyy-MM-dd EEEE HH:mm", { locale: "es" });
        const startOfDay = horaInicio.startOf("day");
        if (startOfDay.ts === fechaHoy.startOf("day").ts) {
          registrosHoy.push({ path: file.path, frontmatter: metadata });
          totalDia += metadata.tiempoTrabajado ? parseInt(metadata.tiempoTrabajado) : 0;
        }
      }
    }
    dv2.header(3, "Tiempo registrado hoy: " + Duration.fromMillis(totalDia).toFormat("hh:mm:ss"));
    registrosHoy.sort((a, b) => {
      if (typeof a.frontmatter.horaInicio === "string" && typeof b.frontmatter.horaInicio === "string") {
        try {
          const millisA = DateTime.fromFormat(a.frontmatter.horaInicio, "yyyy-MM-dd EEEE HH:mm", { locale: "es" }).toMillis();
          const millisB = DateTime.fromFormat(b.frontmatter.horaInicio, "yyyy-MM-dd EEEE HH:mm", { locale: "es" }).toMillis();
          return millisB - millisA;
        } catch (e) {
          console.error("Error parsing dates:", e);
          return 0;
        }
      } else {
        console.warn("Invalid date format for sorting:", a.horaInicio, b.horaInicio);
        return 0;
      }
    });
    if (registrosHoy.length > 0) {
      const table = dv2.container.createEl("table", { cls: "dataview table" });
      table.style.width = "100%";
      const header = dv2.el("tr", "", table);
      ["Registro", "Descripci\xF3n", "Hora Inicio", "Tiempo", "Estado", "Id", "Acci\xF3n"].forEach((text) => dv2.el("th", text, header));
      registrosHoy.forEach((registro) => {
        const row = dv2.el("tr", "", table);
        dv2.el("td", dv2.func.link(registro.path, registro.frontmatter.aliases[0]), row);
        dv2.el("td", registro.frontmatter.descripcion ? registro.frontmatter.descripcion : "Sin descripci\xF3n", row);
        dv2.el("td", DateTime.fromFormat(registro.frontmatter.horaInicio, "yyyy-MM-dd EEEE HH:mm", { locale: "es" }).toFormat("h:mm a") + " / " + DateTime.fromFormat(registro.frontmatter.horaFinal, "yyyy-MM-dd EEEE HH:mm", { locale: "es" }).toFormat("h:mm a"), row);
        if (registro.frontmatter.estado === "\u{1F7E2}") {
          let partes = registro.frontmatter.horaInicio.split(" ");
          let fechaHoraISO = `${partes[0]}T${partes[2]}`;
          let inicio = Date.parse(fechaHoraISO);
          let ahora = Date.now();
          let diferencia = ahora - inicio;
          dv2.el("td", Duration.fromMillis(diferencia).toFormat("h:mm"), row);
        } else {
          dv2.el("td", Duration.fromMillis(registro.frontmatter.tiempoTrabajado).toFormat("h:mm"), row);
        }
        dv2.el("td", registro.frontmatter.estado, row);
        dv2.el("td", registro.frontmatter.id, row);
        if (registro.frontmatter.estado === "\u{1F7E2}") {
          dv2.el("td", this.createButtonTable("Cerrar", async () => {
            debugger;
            await this.registroTiempoAPI.cerrarRegistro(registro.frontmatter.id);
          }), row);
        } else {
          dv2.el("td", this.createButtonTable("Retomar", () => {
            this.retomarTarea(registro.frontmatter.id);
          }), row);
        }
      });
    }
    const botonSalir = this.agregarBotonSalir(dv2);
    dv2.container.appendChild(botonSalir);
  }
  createButtonTable(buttonText, onClickCallback) {
    const button = document.createElement("button");
    button.textContent = buttonText;
    button.type = "button";
    button.classList.add("your-button-class");
    button.addEventListener("click", onClickCallback);
    return button;
  }
  // Crea la nota desde el templater de RegistroTiempo
  async retomarTarea(id) {
    debugger;
    const filePath = `Plantillas/${this.plugin.settings[`folder_RegistroTiempo`]}/Plt - RegistroTiempo.md`;
    const template = app.vault.getAbstractFileByPath(filePath);
    if (template instanceof import_obsidian55.TFile) {
      console.log("Archivo encontrado:", template);
    } else {
      console.log("Archivo no encontrado.");
    }
    const filename = "Retomar " + id;
    const folder = app.vault.getAbstractFileByPath("Inbox");
    const tp = this.getTp();
    let crearNota = tp.file.static_functions.get("create_new");
    await crearNota(template, filename, false, folder).basename;
  }
  getTp() {
    if (!this.plugin || !this.plugin.app.plugins.enabledPlugins.has("templater-obsidian")) {
      console.error("El plugin Templater no est\xE1 habilitado.");
      return;
    }
    let tpGen = this.plugin.app.plugins.plugins["templater-obsidian"].templater;
    tpGen = tpGen.functions_generator.internal_functions.modules_array;
    let tp = {};
    tp.file = tpGen.find((m) => m.name == "file");
    tp.system = tpGen.find((m) => m.name == "system");
    if (!tp.file) {
      console.error("No se pudo acceder al objeto de funciones actuales de Templater.");
      return;
    }
    console.log('tp con propiedades "file" se ha cargado satisfactoriamente');
    return tp;
  }
};

// src/modules/moduloRegistroTiempo/views/vistaRTActivo.ts
var import_obsidian56 = require("obsidian");
init_luxon();
init_registroTiempoAPI();
var VistaRegistroActivo = class extends import_obsidian56.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    /**
     * Función para actualizar dinámicamente el tiempo en ejecución
     */
    /**
     * Función para actualizar dinámicamente el tiempo en ejecución
     */
    this.alertaEjecutada25 = false;
    this.plugin = plugin;
    this.registroTiempoAPI = new registroTiempoAPI(this.plugin);
  }
  getViewType() {
    return "vista-registro-activo";
  }
  getDisplayText() {
    return "Registro Activo";
  }
  getIcon() {
    return "checkmark";
  }
  async onOpen() {
    await this.actualizarVista();
    this.intervalId = setInterval(async () => {
      await this.actualizarVista();
    }, 5e3);
  }
  onClose() {
    clearInterval(this.intervalId);
  }
  async actualizarVista() {
    var _a, _b;
    let scrollTop = 0;
    let scrollLeft = 0;
    const oldTableWrapper = this.containerEl.querySelector(".table-wrapper");
    if (oldTableWrapper) {
      scrollTop = oldTableWrapper.scrollTop;
      scrollLeft = oldTableWrapper.scrollLeft;
    }
    this.containerEl.empty();
    this.containerEl.classList.add("registro-tiempo-container");
    const folder = this.plugin.settings.folder_RegistroTiempo;
    const files = app.vault.getMarkdownFiles().filter((file) => file.path.includes(folder));
    let registrosActivos = [];
    for (let file of files) {
      let metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if ((metadata == null ? void 0 : metadata.estado) === "\u{1F7E2}") {
        let registroActivo = { file };
        Object.assign(registroActivo, metadata);
        registrosActivos.push(registroActivo);
      }
    }
    if (registrosActivos.length === 0) {
      const messageContainer = this.containerEl.createEl("div", { cls: "message-container" });
      messageContainer.createEl("p", { text: "No hay ning\xFAn registro de tiempo ejecut\xE1ndose." });
      const botonCrear = messageContainer.createEl("button", { cls: "registro-tiempo-btn" });
      botonCrear.textContent = "+ Registro Tiempo";
      botonCrear.onclick = async () => {
        const starterAPInstance = new starterAPI(this.plugin);
        await starterAPInstance.createNote("RegistroTiempo");
      };
      this.containerEl.appendChild(messageContainer);
      this.containerEl.createEl("div", { cls: "separador" });
    } else if (registrosActivos.length > 0) {
      const registroEnEjecucion = registrosActivos[0];
      const activeContainer = this.containerEl.createEl("div", { cls: "active-time-container" });
      activeContainer.createEl("h4", { text: "Registro de Tiempo en Ejecuci\xF3n", cls: "registro-tiempo-titulo" });
      const aliasContainer = activeContainer.createEl("p", { cls: "registro-alias" });
      const aliasText = registroEnEjecucion.aliases && registroEnEjecucion.aliases[1] ? registroEnEjecucion.aliases[1] : registroEnEjecucion.aliases && registroEnEjecucion.aliases[0] ? registroEnEjecucion.aliases[0] : "Sin alias";
      const aliasLabel = aliasContainer.createEl("strong", { text: "Alias: " });
      const aliasLink = aliasContainer.createEl("a", {
        text: aliasText,
        cls: "alias-link",
        href: "#"
      });
      aliasLink.addEventListener("click", async (event) => {
        event.preventDefault();
        if (registroEnEjecucion.file instanceof import_obsidian56.TFile) {
          await app.workspace.getLeaf("split").openFile(registroEnEjecucion.file);
        }
      });
      const descripcionContainer = activeContainer.createEl("p", { cls: "registro-descripcion" });
      descripcionContainer.innerHTML = `<strong>Descripci\xF3n:</strong> ${registroEnEjecucion.descripcion || "Sin descripci\xF3n"}`;
      const tiempoContainer = activeContainer.createEl("div", { cls: "tiempo-container" });
      const tiempoEjecucion = tiempoContainer.createEl("p", { cls: "tiempo-ejecucion", text: "Tiempo transcurrido: Calculando..." });
      this.actualizarTiempoEnEjecucion(tiempoEjecucion, registroEnEjecucion.horaInicio);
      const editTimeIcon = tiempoContainer.createEl("span", {
        cls: "edit-time-icon",
        attr: {
          "aria-label": "Editar hora de inicio",
          "title": "Editar hora de inicio"
        }
      });
      editTimeIcon.innerHTML = "\u23F1\uFE0F";
      editTimeIcon.addEventListener("click", () => {
        this.mostrarSelectorHoraInicio(registroEnEjecucion);
      });
      const botonesContainer = activeContainer.createEl("div", { cls: "registro-botones-container" });
      const changeDescButton = document.createElement("button");
      changeDescButton.innerHTML = "\u270F\uFE0F <span class='button-text'>  Descripci\xF3n</span>";
      changeDescButton.classList.add("change-desc-btn");
      changeDescButton.addEventListener("click", async () => {
        var _a2;
        const nuevaDescripcion = await this.mostrarPrompt("Nueva Descripci\xF3n:", registroEnEjecucion.descripcion || "");
        if (nuevaDescripcion !== null) {
          const file = registroEnEjecucion.file;
          if (!file)
            return;
          const fileContent = await this.app.vault.read(file);
          let frontmatter = ((_a2 = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a2.frontmatter) || {};
          frontmatter.descripcion = nuevaDescripcion;
          const newContent = this.reescribirFrontmatter(fileContent, frontmatter);
          await this.app.vault.modify(file, newContent);
          this.actualizarVista();
        }
      });
      const stopButton = document.createElement("button");
      stopButton.innerHTML = "\u270B\u{1F3FC} <span class='button-text'> Detener Registro</span>";
      stopButton.classList.add("stop-time-btn");
      stopButton.addEventListener("click", async () => {
        try {
          console.log("Bot\xF3n 'Cerrar Tarea' presionado.");
          if (!registroEnEjecucion.file || !(registroEnEjecucion.file instanceof import_obsidian56.TFile)) {
            console.error("No se encontr\xF3 el archivo del registro en ejecuci\xF3n.");
            return;
          }
          await this.registroTiempoAPI.cerrarRegistro(registroEnEjecucion.file);
          console.log("Registro cerrado correctamente.");
          this.actualizarVista();
        } catch (error) {
          console.error("Error al cerrar la tarea:", error);
        }
      });
      botonesContainer.appendChild(changeDescButton);
      botonesContainer.appendChild(stopButton);
      activeContainer.appendChild(botonesContainer);
      activeContainer.appendChild(aliasContainer);
      activeContainer.appendChild(descripcionContainer);
      activeContainer.appendChild(tiempoContainer);
      this.containerEl.appendChild(activeContainer);
    }
    let registrosFinalizados = [];
    for (let file of files) {
      let metadata = (_b = app.metadataCache.getFileCache(file)) == null ? void 0 : _b.frontmatter;
      if ((metadata == null ? void 0 : metadata.estado) === "\u{1F535}") {
        let registroFinalizado = { file };
        Object.assign(registroFinalizado, metadata);
        registrosFinalizados.push(registroFinalizado);
      }
    }
    registrosFinalizados.sort((a, b) => b.id - a.id);
    let top5RegistrosActivos = registrosFinalizados.slice(0, 15);
    if (top5RegistrosActivos.length > 0) {
      const tableWrapper = this.containerEl.createEl("div", { cls: "table-wrapper" });
      const table = tableWrapper.createEl("table", { cls: "styled-table" });
      const header = table.createEl("tr");
      ["Alias", "Descripci\xF3n", "Retomar"].forEach((text) => header.createEl("th", { text }));
      top5RegistrosActivos.forEach((registro) => {
        const row = table.createEl("tr");
        const aliasCell = row.createEl("td");
        const aliasText = registro.aliases && registro.aliases[1] ? registro.aliases[1] : registro.aliases && registro.aliases[0] ? registro.aliases[0] : "Sin alias";
        const aliasLink = aliasCell.createEl("a", {
          text: aliasText,
          cls: "clickable-alias",
          href: "#"
        });
        aliasLink.addEventListener("click", async () => {
          let file = app.vault.getAbstractFileByPath(registro.file.path);
          if (file instanceof import_obsidian56.TFile) {
            await app.workspace.getLeaf(true).openFile(file);
          }
        });
        row.createEl("td", { text: registro.descripcion || "No Definida" });
        const buttonCell = row.createEl("td");
        const button = this.createButtonTable("\u23F1\uFE0F", () => {
          this.registroTiempoAPI.retomarTarea(registro.id);
        });
        button.classList.add("retomar-btn");
        button.setAttribute("aria-label", "Retomar");
        buttonCell.appendChild(button);
      });
      this.containerEl.appendChild(tableWrapper);
      tableWrapper.scrollTop = scrollTop;
      tableWrapper.scrollLeft = scrollLeft;
    } else {
      this.containerEl.createEl("p", { text: "No hay registros finalizados." });
    }
  }
  /**
   * Función para actualizar dinámicamente el tiempo en ejecución
   * Modificada para soportar días con tildes como "Miércoles" y "Sábado"
   */
  actualizarTiempoEnEjecucion(element, horaInicio) {
    const extraerHora = (fechaStr) => {
      const match2 = fechaStr.match(/(\d{4}-\d{2}-\d{2})\s+\S+\s+(\d{2}:\d{2})/);
      if (match2) {
        return /* @__PURE__ */ new Date(`${match2[1]}T${match2[2]}:00`);
      }
      return null;
    };
    const inicio = extraerHora(horaInicio);
    if (!inicio) {
      element.textContent = "Tiempo transcurrido: No disponible";
      return;
    }
    const calcularTiempo = () => {
      const ahora = /* @__PURE__ */ new Date();
      const diferencia = Math.floor((ahora.getTime() - inicio.getTime()) / 1e3);
      const horas = Math.floor(diferencia / 3600);
      const minutos = Math.floor(diferencia % 3600 / 60);
      const segundos = diferencia % 60;
      element.textContent = `Tiempo transcurrido: ${horas}h ${minutos}m ${segundos}s`;
      if (diferencia >= 1500) {
        element.classList.add("tiempo-rojo");
      } else {
        element.classList.remove("tiempo-rojo");
      }
    };
    calcularTiempo();
    setInterval(calcularTiempo, 1e3);
  }
  /**
   * Función para mostrar un prompt y obtener un nuevo valor
   */
  async mostrarPrompt(mensaje, valorActual) {
    return new Promise((resolve) => {
      const backdrop = document.createElement("div");
      backdrop.classList.add("prompt-modal-backdrop");
      const modal = document.createElement("div");
      modal.classList.add("prompt-modal");
      const label = document.createElement("label");
      label.textContent = mensaje;
      const input = document.createElement("input");
      input.type = "text";
      input.value = valorActual;
      const buttonContainer = document.createElement("div");
      const aceptar = document.createElement("button");
      aceptar.textContent = "Aceptar";
      aceptar.addEventListener("click", () => {
        resolve(input.value.trim() || null);
        modal.remove();
        backdrop.remove();
      });
      const cancelar = document.createElement("button");
      cancelar.textContent = "Cancelar";
      cancelar.addEventListener("click", () => {
        resolve(null);
        modal.remove();
        backdrop.remove();
      });
      input.addEventListener("keydown", (event) => {
        if (event.key === "Enter") {
          event.preventDefault();
          aceptar.click();
        }
      });
      buttonContainer.appendChild(aceptar);
      buttonContainer.appendChild(cancelar);
      modal.appendChild(label);
      modal.appendChild(input);
      modal.appendChild(buttonContainer);
      document.body.appendChild(backdrop);
      document.body.appendChild(modal);
      input.focus();
    });
  }
  createButtonTable(buttonText, onClickCallback) {
    const button = document.createElement("button");
    button.textContent = buttonText;
    button.type = "button";
    button.classList.add("your-button-class");
    button.addEventListener("click", onClickCallback);
    return button;
  }
  /**
   * Reescribe el frontmatter en un archivo Markdown, preservando la estructura original.
   */
  reescribirFrontmatter(content, frontmatter) {
    const yamlStart = content.indexOf("---");
    const yamlEnd = content.indexOf("---", yamlStart + 3);
    if (yamlStart === -1 || yamlEnd === -1) {
      return content;
    }
    let nuevoFrontmatter = "---\n";
    for (const key in frontmatter) {
      const value = frontmatter[key];
      if (Array.isArray(value)) {
        nuevoFrontmatter += `${key}:
`;
        value.forEach((item) => {
          if (typeof item === "string" && item.match(/^\[\[.*\]\]$/)) {
            nuevoFrontmatter += `  - "${item}"
`;
          } else {
            nuevoFrontmatter += `  - ${JSON.stringify(item)}
`;
          }
        });
      } else if (typeof value === "string") {
        if (value.match(/^\[\[.*\]\]$/)) {
          nuevoFrontmatter += `${key}: "${value}"
`;
        } else {
          nuevoFrontmatter += `${key}: ${JSON.stringify(value)}
`;
        }
      } else {
        nuevoFrontmatter += `${key}: ${value}
`;
      }
    }
    nuevoFrontmatter += "---\n";
    let contenidoRestante = content.slice(yamlEnd + 3).trimStart();
    return nuevoFrontmatter + (contenidoRestante ? "\n" + contenidoRestante : "");
  }
  /**
   * Muestra un selector de fecha y hora para modificar la hora de inicio del registro
   * Versión corregida para posicionar correctamente el modal
   */
  async mostrarSelectorHoraInicio(registro) {
    var _a;
    let horaInicio = registro.horaInicio;
    let fechaHora = this.extraerFechaHora(horaInicio);
    if (!fechaHora) {
      new Notice("No se pudo extraer correctamente la fecha y hora de inicio");
      return;
    }
    const valorInicialInput = `${fechaHora.fecha}T${fechaHora.hora}`;
    const overlay = document.createElement("div");
    overlay.classList.add("time-selector-overlay");
    document.body.appendChild(overlay);
    const modal = document.createElement("div");
    modal.classList.add("time-selector-modal");
    const titulo = document.createElement("h3");
    titulo.textContent = "Modificar hora de inicio";
    modal.appendChild(titulo);
    const infoContainer = document.createElement("div");
    infoContainer.classList.add("time-selector-info");
    infoContainer.innerHTML = `
        <p>Registro: <strong>${((_a = registro.aliases) == null ? void 0 : _a[0]) || "Sin alias"}</strong></p>
        <p>Hora actual: <strong>${horaInicio}</strong></p>
    `;
    modal.appendChild(infoContainer);
    const inputContainer = document.createElement("div");
    inputContainer.classList.add("time-selector-input-container");
    const label = document.createElement("label");
    label.textContent = "Nueva hora de inicio:";
    label.htmlFor = "new-start-time";
    const input = document.createElement("input");
    input.type = "datetime-local";
    input.id = "new-start-time";
    input.value = valorInicialInput;
    inputContainer.appendChild(label);
    inputContainer.appendChild(input);
    modal.appendChild(inputContainer);
    const buttonsContainer = document.createElement("div");
    buttonsContainer.classList.add("time-selector-buttons");
    const cancelButton = document.createElement("button");
    cancelButton.textContent = "Cancelar";
    cancelButton.classList.add("time-selector-button", "cancel-button");
    cancelButton.onclick = () => {
      document.body.removeChild(modal);
      document.body.removeChild(overlay);
    };
    const saveButton = document.createElement("button");
    saveButton.textContent = "Guardar";
    saveButton.classList.add("time-selector-button", "save-button");
    saveButton.onclick = async () => {
      const nuevaFechaHora = input.value;
      if (!nuevaFechaHora) {
        new Notice("Por favor, seleccione una fecha y hora v\xE1lida");
        return;
      }
      const fecha = new Date(nuevaFechaHora);
      const diasSemana = ["Domingo", "Lunes", "Martes", "Mi\xE9rcoles", "Jueves", "Viernes", "S\xE1bado"];
      const diaSemana = diasSemana[fecha.getDay()];
      const a\u00F1o = fecha.getFullYear();
      const mes = String(fecha.getMonth() + 1).padStart(2, "0");
      const dia = String(fecha.getDate()).padStart(2, "0");
      const horas = String(fecha.getHours()).padStart(2, "0");
      const minutos = String(fecha.getMinutes()).padStart(2, "0");
      const nuevaHoraFormateada = `${a\u00F1o}-${mes}-${dia} ${diaSemana} ${horas}:${minutos}`;
      await this.actualizarHoraInicio(registro.file, nuevaHoraFormateada);
      document.body.removeChild(modal);
      document.body.removeChild(overlay);
      this.actualizarVista();
    };
    buttonsContainer.appendChild(cancelButton);
    buttonsContainer.appendChild(saveButton);
    modal.appendChild(buttonsContainer);
    document.body.appendChild(modal);
    input.focus();
  }
  /**
   * Extrae la fecha y hora de una cadena con formato "YYYY-MM-DD dddd HH:mm"
   */
  extraerFechaHora(fechaStr) {
    const match2 = fechaStr.match(/(\d{4}-\d{2}-\d{2})\s+\S+\s+(\d{2}:\d{2})/);
    if (match2) {
      return {
        fecha: match2[1],
        hora: match2[2]
      };
    }
    return null;
  }
  /**
   * Actualiza la hora de inicio en el frontmatter del archivo
   */
  async actualizarHoraInicio(file, nuevaHoraInicio) {
    try {
      const contenido = await this.app.vault.read(file);
      const nuevoContenido = contenido.replace(
        /horaInicio:\s*.*(?=\n)/,
        `horaInicio: ${nuevaHoraInicio}`
      );
      await this.app.vault.modify(file, nuevoContenido);
      new Notice("Hora de inicio actualizada correctamente");
    } catch (error) {
      console.error("Error al actualizar la hora de inicio:", error);
      new Notice("Error al actualizar la hora de inicio");
    }
  }
};

// src/modules/moduloGTD/index.ts
var import_obsidian60 = require("obsidian");

// src/modules/moduloGTD/commands.ts
var import_obsidian59 = require("obsidian");

// src/modules/moduloGTD/inbox.ts
var import_obsidian58 = require("obsidian");
init_luxon();

// src/modules/modales/inboxModal.ts
var import_obsidian57 = require("obsidian");
var BandejaDeEntradaModal = class extends import_obsidian57.Modal {
  constructor(app2) {
    super(app2);
  }
  onOpen() {
    this.containerEl.classList.add("modalInbox");
    let { contentEl } = this;
    this.titleEl.setText("Bandeja de Entrada");
    let textAreaDiv = contentEl.createEl("div");
    this.inputArea = textAreaDiv.createEl("textarea");
    this.inputArea.setAttribute("placeholder", "Escribe tu tarea aqu\xED...");
    this.inputArea.addEventListener("keydown", (e) => {
      if (e.key === "Enter" && !e.shiftKey && !e.ctrlKey && !e.altKey) {
        e.preventDefault();
        this.submitForm();
      }
    });
    const activeFile = this.app.workspace.getActiveFile();
    const metadata = this.app.metadataCache.getFileCache(activeFile);
    let nameActiveFile = metadata.aliases ? metadata.aliases[0] : activeFile.basename;
    let checkBoxDiv = contentEl.createEl("div");
    this.checkBox = checkBoxDiv.createEl("input", { type: "checkbox" });
    checkBoxDiv.createEl("label", { text: `Guardar en ${nameActiveFile}` }).prepend(this.checkBox);
    const saveButton = checkBoxDiv.createEl("button", { text: "Guardar" });
    saveButton.addEventListener("click", () => this.submitForm());
  }
  submitForm() {
    const text = this.inputArea.value;
    const saveInCurrent = this.checkBox.checked;
    this.close();
    if (this.resolver) {
      this.resolver({ text, saveInCurrent });
    }
  }
  waitForInput() {
    return new Promise((resolve) => {
      this.resolver = resolve;
    });
  }
};

// src/modules/moduloGTD/inbox.ts
async function ingresarBandejaEntrada(plugin) {
  let inboxPath = `${plugin.settings.file_Inbox}.md`;
  let inboxFile = app.vault.getAbstractFileByPath(inboxPath);
  const activeFile = app.workspace.getActiveFile();
  if (!activeFile) {
    new import_obsidian58.Notice("No hay archivo activo");
    return;
  }
  let inbox;
  const modal = new BandejaDeEntradaModal(plugin.app);
  modal.open();
  const { text, saveInCurrent } = await modal.waitForInput();
  if (text.length < 3) {
    new import_obsidian58.Notice("Inbox cancelada");
    return;
  }
  let destino = saveInCurrent ? activeFile : inboxFile;
  let hoy = DateTime.now().toFormat("yyyy-MM-dd");
  let hora = DateTime.now().toFormat("HH:mm");
  inbox = `- [ ] \u{1F9E0} ${text} #inbox [created:: ${hoy}] a las ${hora}
`;
  if (destino instanceof import_obsidian58.TFile) {
    if (destino === inboxFile) {
      insertAtStartUsingProcess(inbox, destino).then(() => {
        new import_obsidian58.Notice("Bandeja de entrada actualizada con \xE9xito.");
      }).catch((error) => {
        debugger;
        console.error(error);
        new import_obsidian58.Notice("Error al agregar contenido al inicio del archivo: " + error.message);
      });
    } else {
      await insertInboxAtCursor(inbox);
    }
  }
}
async function insertInboxAtCursor(inbox) {
  debugger;
  const activeLeaf = app.workspace.activeLeaf;
  if (activeLeaf) {
    const editor = activeLeaf.view.sourceMode.cmEditor;
    const cursor = editor.getCursor();
    editor.replaceRange(inbox, cursor);
  }
}
async function insertAtStartUsingProcess(inbox, file) {
  if (!(file instanceof import_obsidian58.TFile))
    return;
  await app.vault.process(file, (content) => {
    const newContent = inbox + content;
    return newContent;
  });
}

// src/modules/moduloGTD/commands.ts
function registerCommands3(plugin) {
  const inboxCommand = plugin.addCommand({
    id: "ingresar-inbox",
    name: "Ingresar Bandeja de Entrada -> Inbox",
    callback: async () => {
      await ingresarBandejaEntrada(plugin);
    }
  });
  plugin.registeredCommandIdsGTD = plugin.registeredCommandIdsGTD || [];
  plugin.registeredCommandIdsGTD.push(inboxCommand.id);
}
function deactivateCommands3(plugin) {
  if (!plugin.registeredCommandIdsGTD)
    return;
  plugin.registeredCommandIdsGTD.forEach((commandId) => {
    const command = plugin.app.commands.commands[commandId];
    if (command) {
      command.callback = () => new Notice("Este comando ha sido desactivado.");
    }
  });
  plugin.registeredCommandIdsGTD = [];
}

// src/modules/moduloGTD/index.ts
var ModuloGTD = class {
  constructor(plugin) {
    this.moduloGTD = null;
    this.plugin = plugin;
  }
  activate() {
    if (this.moduloGTD)
      return;
    registerCommands3(this.plugin);
  }
  deactivate() {
    if (!this.moduloGTD)
      return;
    deactivateCommands3(this.plugin);
    this.moduloGTD = null;
  }
};

// src/modules/noteLifecycleManager/API/subsistemasAPI.ts
var import_obsidian61 = require("obsidian");
var subsistemasAPI = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.pathCampos = this.plugin.settings.file_camposCentral + ".md";
  }
  // Función para crear y mostrar el botón inicial "Menú hoy"
  async mostrarBotonCrearAV(dv2) {
    dv2.container.innerHTML = "";
    const botonMenuHoy = document.createElement("button");
    botonMenuHoy.textContent = "Procesar Areas de Vida";
    dv2.container.appendChild(botonMenuHoy);
    botonMenuHoy.onclick = async () => {
      await this.procesarAV(dv2);
    };
  }
  async mostrarBotonCrearAVTrimestral(dv2) {
    dv2.container.innerHTML = "";
    const botonMenuHoy = document.createElement("button");
    botonMenuHoy.textContent = "Procesar Areas de Vida del trimestre";
    dv2.container.appendChild(botonMenuHoy);
    botonMenuHoy.onclick = async () => {
      await this.procesarAVTrimestre(dv2);
    };
  }
  async procesarAV(dv2) {
    var _a, _b;
    const folderQ = this.plugin.settings["folder_Trimestral"];
    const filesQ = app.vault.getMarkdownFiles().filter(
      (file) => file.path.includes(folderQ) && !file.path.includes("Plantillas") && !file.path.includes("Archivo")
    );
    let qCreados = [];
    for (let file of filesQ) {
      let metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if ((metadata == null ? void 0 : metadata.type) === "TQ" && (metadata == null ? void 0 : metadata.trimestre)) {
        let qActivo = { file };
        Object.assign(qActivo, metadata);
        qCreados.push(qActivo);
      }
    }
    let suggester = this.plugin.tp.system.static_functions.get("suggester");
    let q = await suggester(
      qCreados.map((b) => b.trimestre),
      qCreados.map((b) => b),
      true,
      `De que trimestre vamos a procesar tus Areas de Vida`
    );
    const resultadoAV = [];
    const fileCampos = app.vault.getAbstractFileByPath(this.pathCampos);
    try {
      if (fileCampos instanceof import_obsidian61.TFile) {
        const metadata = app.metadataCache.getFileCache(fileCampos);
        const arregloAV = ((_b = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _b.AreasVida) || [];
        if (Array.isArray(arregloAV)) {
          arregloAV.forEach((item) => {
            if (Array.isArray(item) && item.length >= 2) {
              resultadoAV.push({
                grupo: item[0],
                av: item[1],
                texto: item[0] + " / " + item[1]
              });
            }
          });
        }
      }
    } catch (error) {
      console.error("Error obteniendo el archivo de campos:", error);
      throw error;
    }
    const allFiles = app.vault.getMarkdownFiles();
    let basePath = this.plugin.settings.folder_AreasVida;
    for (let areaVida of resultadoAV) {
      const fullFolderPath = `${basePath}/${areaVida.av}`;
      const folder = app.vault.getAbstractFileByPath(fullFolderPath);
      if (folder instanceof import_obsidian61.TFolder) {
        console.log(`La carpeta ${areaVida.av} existe dentro de ${basePath}.`);
        const instancesOfAV = app.vault.getMarkdownFiles().filter(
          (file) => file.path.includes(fullFolderPath) && !file.path.includes("Plantillas") && !file.path.includes("Archivo")
        );
        const nodeAVExists = instancesOfAV.some(
          (file) => file.basename === areaVida.av
        );
        if (nodeAVExists) {
          console.log(
            `La nota ${areaVida.av} existe dentro de la carpeta ${areaVida.av}.`
          );
          await this.validacionAVQ(fullFolderPath, q, areaVida);
        } else {
          debugger;
          console.log(
            `La nota ${areaVida.av} no existe dentro de la carpeta ${areaVida.av}.`
          );
          let nAV = await this.agregarNodoAreaVida(areaVida);
          if (nAV) {
            await this.validacionAVQ(fullFolderPath, q, areaVida);
          } else if (nAV == false) {
            continue;
          } else {
            return;
          }
        }
      } else {
        console.log(
          `La carpeta ${areaVida.av} no existe a\xFAn dentro de ${basePath}.`
        );
        let nAV = await this.agregarNodoAreaVida(areaVida);
        if (nAV) {
          await this.validacionAVQ(fullFolderPath, q, areaVida);
        } else if (nAV == false) {
          continue;
        } else {
          return;
        }
      }
    }
  }
  // Fin procesarAV()
  async procesarAVTrimestre(dv2) {
    var _a;
    let q = {};
    q.trimestre = dv2.current().trimestre;
    const resultadoAV = [];
    const fileCampos = app.vault.getAbstractFileByPath(this.pathCampos);
    try {
      if (fileCampos instanceof import_obsidian61.TFile) {
        const metadata = app.metadataCache.getFileCache(fileCampos);
        const arregloAV = ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.AreasVida) || [];
        if (Array.isArray(arregloAV)) {
          arregloAV.forEach((item) => {
            if (Array.isArray(item) && item.length >= 2) {
              resultadoAV.push({
                grupo: item[0],
                av: item[1],
                texto: item[0] + " / " + item[1]
              });
            }
          });
        }
      }
    } catch (error) {
      console.error("Error obteniendo el archivo de campos:", error);
      throw error;
    }
    const allFiles = app.vault.getMarkdownFiles();
    let basePath = this.plugin.settings.folder_AreasVida;
    for (let areaVida of resultadoAV) {
      const fullFolderPath = `${basePath}/${areaVida.av}`;
      const folder = app.vault.getAbstractFileByPath(fullFolderPath);
      if (folder instanceof import_obsidian61.TFolder) {
        console.log(`La carpeta ${areaVida.av} existe dentro de ${basePath}.`);
        const instancesOfAV = app.vault.getMarkdownFiles().filter(
          (file) => file.path.includes(fullFolderPath) && !file.path.includes("Plantillas") && !file.path.includes("Archivo")
        );
        const nodeAVExists = instancesOfAV.some(
          (file) => file.basename === areaVida.av
        );
        if (nodeAVExists) {
          console.log(
            `La nota ${areaVida.av} existe dentro de la carpeta ${areaVida.av}.`
          );
          await this.validacionAVQ(fullFolderPath, q, areaVida);
        } else {
          debugger;
          console.log(
            `La nota ${areaVida.av} no existe dentro de la carpeta ${areaVida.av}.`
          );
          let nAV = await this.agregarNodoAreaVida(areaVida);
          if (nAV) {
            await this.validacionAVQ(fullFolderPath, q, areaVida);
          } else if (nAV == false) {
            continue;
          } else {
            return;
          }
        }
      } else {
        console.log(
          `La carpeta ${areaVida.av} no existe a\xFAn dentro de ${basePath}.`
        );
        let nAV = await this.agregarNodoAreaVida(areaVida);
        if (nAV) {
          await this.validacionAVQ(fullFolderPath, q, areaVida);
        } else if (nAV == false) {
          continue;
        } else {
          return;
        }
      }
    }
  }
  // Fin procesarAVTrimestre()
  //P2 areaVida Q Existe?
  async validacionAVQ(fullFolderPath, q, areaVida) {
    const pathAVQ = `${fullFolderPath}/${q.trimestre} - ${areaVida.av}.md`;
    const fileAVQ = app.vault.getAbstractFileByPath(pathAVQ);
    debugger;
    if (fileAVQ instanceof import_obsidian61.TFile) {
      let suggester = this.plugin.tp.system.static_functions.get("suggester");
      let nextStep = await suggester(
        [
          "Actualizar estado del AV",
          "Borrar y Crear de nuevo el AV",
          "Dejar el AV como est\xE1 "
        ],
        ["upd", "del+cre", "continue"],
        true,
        `\xBF${q.trimestre} ${areaVida.av} ya existe. Elige una opci\xF3n:`
      );
      switch (nextStep) {
        case "upd":
          await this.actualizarAVQ(fileAVQ);
          break;
        case "del+cre":
          await this.borrarAVQ(fileAVQ);
          await this.agregarAVQ(areaVida, q.trimestre);
          break;
        case "continue":
          console.log(`Continuar sin hacer nada con ${fileAVQ.basename}`);
          break;
      }
    } else {
      debugger;
      await this.agregarAVQ(areaVida, q.trimestre);
    }
  }
  // P3 Agregar nodoAreaVida?
  async agregarNodoAreaVida(areaVida) {
    let suggester = this.plugin.tp.system.static_functions.get("suggester");
    let agregar = await suggester(
      ["Si", "No"],
      [true, false],
      true,
      `\xBFDeseas agregar ${areaVida.av} a tu sistema de gesti\xF3n?`
    );
    if (agregar) {
      const filePath = `Plantillas/${this.plugin.settings[`folder_AreasVida`]}/Plt - nodoAreasVida.md`;
      const template = app.vault.getAbstractFileByPath(filePath);
      if (template instanceof import_obsidian61.TFile) {
        console.log("Archivo nodoAreaVida template encontrado:", template);
      } else {
        console.log("Archivo template nodoAreaVida no encontrado.");
      }
      const filename = areaVida.grupo + " - " + areaVida.av;
      let folderPath = `${this.plugin.settings[`folder_AreasVida`]}/${areaVida.av}`;
      await this.crearCarpeta(folderPath);
      const folder = app.vault.getAbstractFileByPath(folderPath);
      let crearNota;
      crearNota = this.plugin.tp.file.static_functions.get("create_new");
      try {
        let nota = await crearNota(template, filename, false, folder);
        return true;
      } catch (error) {
        console.error("Error creando NodoAreaVida: ", error);
        return error;
      }
    } else {
      return false;
    }
  }
  async agregarAVQ(areaVida, trimestre) {
    const filePath = `Plantillas/${this.plugin.settings.folder_AreasVida}/Plt - AreasVida.md`;
    const template = app.vault.getAbstractFileByPath(filePath);
    if (!(template instanceof import_obsidian61.TFile)) {
      console.log("Archivo no encontrado.");
      return false;
    }
    console.log("Archivo encontrado:", template);
    const filename = `${trimestre} -- ${areaVida.av} -- ${areaVida.grupo}`;
    let folderPath = `${this.plugin.settings[`folder_AreasVida`]}/${areaVida.av}`;
    const folder = app.vault.getAbstractFileByPath(folderPath);
    let crearNota = this.plugin.tp.file.static_functions.get("create_new");
    try {
      await crearNota(template, filename, false, folder);
      return true;
    } catch (error) {
      console.error("Error creando AreaVida: ", error);
      return false;
    }
  }
  async borrarAVQ(fileAVQ) {
    console.log(`Logica de borrado de ${fileAVQ.basename}`);
    try {
      if (fileAVQ instanceof import_obsidian61.TFile) {
        await app.vault.delete(fileAVQ);
        console.log(`${fileAVQ.basename} ha sido borrado con \xE9xito.`);
      } else {
        console.error(
          `${fileAVQ.basename} no es un archivo v\xE1lido o no existe.`
        );
      }
    } catch (err) {
      console.error(`Error al intentar borrar ${fileAVQ.basename}:`, err);
    }
  }
  async actualizarAVQ(fileAVQ) {
    console.log(`Logica de actualizaci\xF3n de estado de ${fileAVQ.basename}`);
    let suggester = this.plugin.tp.system.static_functions.get("suggester");
    let metadataCache = app.metadataCache.getFileCache(fileAVQ);
    let estadoActual = "";
    let nuevoEstado = "";
    if (metadataCache.frontmatter && metadataCache.frontmatter.hasOwnProperty("estado")) {
      estadoActual = metadataCache.frontmatter.estado;
    } else {
      console.log("No se encontr\xF3 el estado actual en el frontmatter.");
      return;
    }
    try {
      nuevoEstado = await suggester(
        ["\u{1F535} -> Archivado", "\u{1F7E2} -> Activo", "\u{1F7E1} -> En Pausa", "\u{1F534} -> Detenido"],
        // opciones para mostrar
        ["\u{1F535}", "\u{1F7E2}", "\u{1F7E1}", "\u{1F534}"],
        // valores a retornar
        false,
        // permite selección múltiple
        `${fileAVQ.basename} est\xE1 ${estadoActual}. Asignar estado:`
        // mensaje
      );
      if (!nuevoEstado) {
        console.log("No se seleccion\xF3 un nuevo estado.");
        return;
      }
      await app.fileManager.processFrontMatter(fileAVQ, (frontmatter) => {
        if (frontmatter.hasOwnProperty("estado")) {
          frontmatter.estado = nuevoEstado;
          console.log("Estado actualizado con \xE9xito a:", nuevoEstado);
        }
      });
    } catch (err) {
      console.error("Error al actualizar el estado en el frontmatter:", err);
    }
  }
  async crearCarpeta(folderPath) {
    try {
      const carpetaExistente = app.vault.getAbstractFileByPath(folderPath);
      if (carpetaExistente instanceof import_obsidian61.TFolder) {
        console.log(`La carpeta '${folderPath}' ya existe.`);
        return;
      }
      await app.vault.createFolder(folderPath);
      console.log(`Carpeta '${folderPath}' creada exitosamente.`);
    } catch (error) {
      console.error(`Error al crear la carpeta '${folderPath}':`, error);
    }
  }
  // PARA PROCESAR LOS COMPASS
  // Función para crear y mostrar el botón de procesar Objetivos de las AV anuales en el proceso de Compass.
  async mostrarBotonCompassAnual(dv2) {
    dv2.container.innerHTML = "";
    const boton = document.createElement("button");
    boton.textContent = "Procesar Objetivos AV Anual";
    dv2.container.appendChild(boton);
    boton.onclick = async () => {
      await this.procesarCompassAnual(dv2);
    };
  }
  async mostrarBotonCompassTrimestral(dv2) {
    dv2.container.innerHTML = "";
    const boton = document.createElement("button");
    boton.textContent = "Procesar Objetivos AV Trimestrales";
    dv2.container.appendChild(boton);
    boton.onclick = async () => {
      await this.procesarCompassTrimestral(dv2);
    };
  }
  async procesarCompassAnual(dv2) {
    var _a;
    let a\u00F1o = dv2.current().a\u00F1o;
    const resultadoAV = [];
    const fileCampos = app.vault.getAbstractFileByPath(this.pathCampos);
    try {
      if (fileCampos instanceof import_obsidian61.TFile) {
        const metadata = app.metadataCache.getFileCache(fileCampos);
        const arregloAV = ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.AreasVida) || [];
        if (Array.isArray(arregloAV)) {
          arregloAV.forEach((item) => {
            if (Array.isArray(item) && item.length >= 2) {
              resultadoAV.push({
                grupo: item[0],
                av: item[1],
                texto: item[0] + " / " + item[1]
              });
            }
          });
        }
      }
    } catch (error) {
      console.error("Error obteniendo el archivo de campos:", error);
      throw error;
    }
    const allFiles = app.vault.getMarkdownFiles();
    let basePath = this.plugin.settings.folder_AreasVida;
    debugger;
    for (let areaVida of resultadoAV) {
      const fullFolderPath = `${basePath}/${areaVida.av}`;
      const folder = app.vault.getAbstractFileByPath(fullFolderPath);
      if (folder instanceof import_obsidian61.TFolder) {
        console.log(`La carpeta ${areaVida.av} existe dentro de ${basePath}.`);
        const instancesOfAV = app.vault.getMarkdownFiles().filter(
          (file) => file.path.includes(fullFolderPath) && !file.path.includes("Plantillas") && !file.path.includes("Archivo")
        );
        const nodeAVExists = instancesOfAV.some(
          (file) => file.basename === areaVida.av
        );
        if (nodeAVExists) {
          console.log(
            `La nota ${areaVida.av} existe dentro de la carpeta ${areaVida.av}.`
          );
          await this.objetivoAnual(a\u00F1o, areaVida.av);
        } else {
          console.log(
            `La nota ${areaVida.av} no existe dentro de la carpeta ${areaVida.av}.`
          );
          let nAV = await this.agregarNodoAreaVida(areaVida);
          if (nAV) {
            await this.objetivoAnual(a\u00F1o, areaVida.av);
          } else if (nAV == false) {
            continue;
          } else {
            return;
          }
        }
      } else {
        console.log(
          `La carpeta ${areaVida.av} no existe a\xFAn dentro de ${basePath}.`
        );
        let nAV = await this.agregarNodoAreaVida(areaVida);
        if (nAV) {
          await this.objetivoAnual(a\u00F1o, areaVida.av);
        } else if (nAV == false) {
          continue;
        } else {
          return;
        }
      }
    }
  }
  // Metodo Procesar Compass Anual
  async procesarCompassTrimestral(dv2) {
    var _a;
    debugger;
    let trimestre = dv2.current().trimestre;
    const resultadoAV = [];
    const fileCampos = app.vault.getAbstractFileByPath(this.pathCampos);
    try {
      if (fileCampos instanceof import_obsidian61.TFile) {
        const metadata = app.metadataCache.getFileCache(fileCampos);
        const arregloAV = ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.AreasVida) || [];
        if (Array.isArray(arregloAV)) {
          arregloAV.forEach((item) => {
            if (Array.isArray(item) && item.length >= 2) {
              resultadoAV.push({
                grupo: item[0],
                av: item[1],
                texto: item[0] + " / " + item[1]
              });
            }
          });
        }
      }
    } catch (error) {
      console.error("Error obteniendo el archivo de campos:", error);
      throw error;
    }
    const allFiles = app.vault.getMarkdownFiles();
    let basePath = this.plugin.settings.folder_AreasVida;
    for (let areaVida of resultadoAV) {
      const fullFolderPath = `${basePath}/${areaVida.av}`;
      const folder = app.vault.getAbstractFileByPath(fullFolderPath);
      if (folder instanceof import_obsidian61.TFolder) {
        console.log(`La carpeta ${areaVida.av} existe dentro de ${basePath}.`);
        const instancesOfAV = app.vault.getMarkdownFiles().filter(
          (file) => file.path.includes(fullFolderPath) && !file.path.includes("Plantillas") && !file.path.includes("Archivo")
        );
        const nodeAVExists = instancesOfAV.some(
          (file) => file.basename === areaVida.av
        );
        if (nodeAVExists) {
          console.log(
            `La nota ${areaVida.av} existe dentro de la carpeta ${areaVida.av}.`
          );
          await this.objetivoTrimestral(trimestre, areaVida.av);
        } else {
          console.log(
            `La nota ${areaVida.av} no existe dentro de la carpeta ${areaVida.av}.`
          );
          let nAV = await this.agregarNodoAreaVida(areaVida);
          if (nAV) {
            await this.objetivoTrimestral(trimestre, areaVida.av);
          } else if (nAV == false) {
            continue;
          } else {
            return;
          }
        }
      } else {
        console.log(
          `La carpeta ${areaVida.av} no existe a\xFAn dentro de ${basePath}.`
        );
        let nAV = await this.agregarNodoAreaVida(areaVida);
        if (nAV) {
          await this.objetivoTrimestral(trimestre, areaVida.av);
        } else if (nAV == false) {
          continue;
        } else {
          return;
        }
      }
    }
  }
  // Metodo Procesar Compass Trimestral 
  async objetivoAnual(a\u00F1o, areaVida) {
    var _a;
    const folderObj = this.plugin.settings["folder_ObjCompassAnual"];
    const filesObj = app.vault.getMarkdownFiles().filter(
      (file) => file.path.includes(folderObj) && !file.path.includes("Plantillas") && !file.path.includes("Archivo")
    );
    let objCreados = [];
    for (let file of filesObj) {
      debugger;
      let metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      const regex = /\[\[\s*(.*?)\s*\]\]/;
      let fileAV = metadata == null ? void 0 : metadata.areaVida.match(regex)[1];
      const sameAV = fileAV === areaVida;
      if ((metadata == null ? void 0 : metadata.a\u00F1o) === a\u00F1o && sameAV) {
        let objActivo = { file };
        Object.assign(objActivo, metadata);
        objCreados.push(objActivo);
      }
    }
    let prompt = this.plugin.tp.system.static_functions.get("prompt");
    let suggester = this.plugin.tp.system.static_functions.get("suggester");
    let objetivos = [];
    let deseaAgregarObjetivo;
    if (objCreados.length > 0) {
      let nextStep = await suggester(
        [
          "Agregar Objetivos",
          "Borrar y Crear de nuevo los objetivos",
          "Dejar los objetivos como est\xE1n "
        ],
        ["upd", "del+cre", "continue"],
        true,
        `\xBFYa hay ${objCreados.length} objetivos creados para ${areaVida} en el ${a\u00F1o}. Elige una opci\xF3n:`
      );
      switch (nextStep) {
        case "upd":
          do {
            let objetivo = await this.crearObjetivo(areaVida, a\u00F1o);
            deseaAgregarObjetivo = await suggester(
              ["Si", "No"],
              [true, false],
              true,
              `\xBFDesea agregar otro objetivo para ${areaVida} en ${a\u00F1o}?`
            );
          } while (deseaAgregarObjetivo);
          break;
        case "del+cre":
          await this.borrarObjetivos(objCreados);
          deseaAgregarObjetivo = await suggester(
            ["Si", "No"],
            [true, false],
            true,
            `\xBFDesea agregar alg\xFAn objetivo para ${areaVida} en ${a\u00F1o}?`
          );
          while (deseaAgregarObjetivo) {
            let objetivo = await this.crearObjetivo(areaVida, a\u00F1o);
            deseaAgregarObjetivo = await suggester(
              ["Si", "No"],
              [true, false],
              true,
              `\xBFDesea agregar otro objetivo para ${areaVida} en ${a\u00F1o}?`
            );
          }
          break;
        case "continue":
          console.log(`Continuar sin hacer nada con los objetivos de ${areaVida}`);
          break;
      }
    } else {
      deseaAgregarObjetivo = await suggester(
        ["Si", "No"],
        [true, false],
        true,
        `\xBFDesea agregar alg\xFAn objetivo para ${areaVida} en ${a\u00F1o}?`
      );
      while (deseaAgregarObjetivo) {
        let objetivo = await this.crearObjetivo(areaVida, a\u00F1o);
        objetivos.push([objetivo]);
        deseaAgregarObjetivo = await suggester(
          ["Si", "No"],
          [true, false],
          true,
          `\xBFDesea agregar otro objetivo para ${areaVida} en ${a\u00F1o}?`
        );
      }
    }
  }
  // Método objetivoAnual.
  async objetivoTrimestral(trimestre, areaVida) {
    var _a, _b;
    debugger;
    const folderObj = this.plugin.settings["folder_ObjCompassAnual"];
    const filesObj = app.vault.getMarkdownFiles().filter(
      (file) => file.path.includes(folderObj) && !file.path.includes("Plantillas") && !file.path.includes("Archivo")
    );
    let objCreados = [];
    for (let file of filesObj) {
      debugger;
      let metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      const regex = /\[\[\s*(.*?)\s*\]\]/;
      let fileAV = metadata == null ? void 0 : metadata.areaVida.match(regex)[1];
      const sameAV = fileAV === areaVida;
      if (((_b = metadata == null ? void 0 : metadata.trimestre) == null ? void 0 : _b.path) && typeof (metadata.trimestre.path === "string") && metadata.trimestre.path.includes(trimestre) && sameAV) {
        let objActivo = { file };
        Object.assign(objActivo, metadata);
        objCreados.push(objActivo);
      }
    }
    let prompt = this.plugin.tp.system.static_functions.get("prompt");
    let suggester = this.plugin.tp.system.static_functions.get("suggester");
    let objetivos = [];
    let deseaAgregarObjetivo;
    if (objCreados.length > 0) {
      let nextStep = await suggester(
        [
          "Agregar Objetivos",
          "Borrar y Crear de nuevo los objetivos",
          "Dejar los objetivos como est\xE1n "
        ],
        ["upd", "del+cre", "continue"],
        true,
        `\xBFYa hay ${objCreados.length} objetivos creados para ${areaVida} en el ${trimestre}. Elige una opci\xF3n:`
      );
      switch (nextStep) {
        case "upd":
          do {
            let objetivo = await this.crearObjetivoTrimestre(areaVida, trimestre);
            deseaAgregarObjetivo = await suggester(
              ["Si", "No"],
              [true, false],
              true,
              `\xBFDesea agregar otro objetivo para ${areaVida} en ${trimestre}?`
            );
          } while (deseaAgregarObjetivo);
          break;
        case "del+cre":
          await this.borrarObjetivos(objCreados);
          deseaAgregarObjetivo = await suggester(
            ["Si", "No"],
            [true, false],
            true,
            `\xBFDesea agregar alg\xFAn objetivo para ${areaVida} en ${trimestre}?`
          );
          while (deseaAgregarObjetivo) {
            let objetivo = await this.crearObjetivoTrimestre(areaVida, trimestre);
            deseaAgregarObjetivo = await suggester(
              ["Si", "No"],
              [true, false],
              true,
              `\xBFDesea agregar otro objetivo para ${areaVida} en ${trimestre}?`
            );
          }
          break;
        case "continue":
          console.log(`Continuar sin hacer nada con los objetivos de ${areaVida}`);
          break;
      }
    } else {
      deseaAgregarObjetivo = await suggester(
        ["Si", "No"],
        [true, false],
        true,
        `\xBFDesea agregar alg\xFAn objetivo para ${areaVida} en ${trimestre}?`
      );
      while (deseaAgregarObjetivo) {
        let objetivo = await this.crearObjetivoTrimestre(areaVida, trimestre);
        objetivos.push([objetivo]);
        deseaAgregarObjetivo = await suggester(
          ["Si", "No"],
          [true, false],
          true,
          `\xBFDesea agregar otro objetivo para ${areaVida} en ${trimestre}?`
        );
      }
    }
  }
  // Método objetivoTrimestral.
  /* 
  ----------------------------------------------------------------
  Método que crea el botón que se agrega en la tabla de proyectos en el 
  Compass Anual, para crear el proyecto a cada Objetivo.
  ----------------------------------------------------------------
  */
  createButtonTable(dv2, objetivo) {
    const buttonContainer = dv2.el("div", "");
    const button = dv2.el("button", "Nuevo Proyecto");
    button.addEventListener("click", async (event) => {
      event.preventDefault();
      await this.crearProyectoObjetivo(dv2, objetivo);
    });
    buttonContainer.appendChild(button);
    return buttonContainer;
  }
  /* 
  ----------------------------------------------------------------
  Metodo invocado por el boton de la tabla del compass anual "Nuevo Proyecto" 
  para crear proyecto a un objetivo anual establecido.
  ----------------------------------------------------------------
  */
  async crearProyectoObjetivo(dv2, objetivo) {
    debugger;
    let suggester = this.plugin.tp.system.static_functions.get("suggester");
    let tipoProyecto = await suggester(
      ["Proyecto GTD", "Proyecto de Q"],
      [true, false],
      true,
      `\xBFEl proyecto ${objetivo.file.name} requiere un Proyecto GTD o Proyecto de Q?`
    );
    let proyecto;
    if (tipoProyecto) {
      proyecto = this.crearProyectoGTD(objetivo);
    } else {
      debugger;
      const regexTrim = /\[?\[?(\d{4}-Q[1-4])\]?\]?/g;
      const trimestre = objetivo.trimestre.path.match(regexTrim);
      const confirmaTrim = await suggester(
        ["Si", "No"],
        [true, false],
        true,
        `\xBFVamos a crear el proyecto ${objetivo.file.name} en el trimestre ${trimestre}?`
      );
      if (!confirmaTrim) {
        const q = await this.establecerTrimestre("objetivo del a\xF1o");
        debugger;
        await this.actualizarYAMLs({ trimestre: `[[${q.trimestre}]]` }, objetivo.file.path);
      }
      proyecto = await this.crearProyectoQ(objetivo);
    }
  }
  /* 
  ----------------------------------------------------------------
  Metodo que inicializa la creación de la plantilla de objetivo Compass.
  ----------------------------------------------------------------
  */
  async crearObjetivo(areaVida, a\u00F1o) {
    debugger;
    const templatePath = `Plantillas/${this.plugin.settings["folder_ObjCompassAnual"]}/Plt - ObjCompassAnual.md`;
    const template = app.vault.getAbstractFileByPath(templatePath);
    const folder = app.vault.getAbstractFileByPath("Inbox");
    let crearNota = this.plugin.tp.file.static_functions.get("create_new");
    let filename = `${a\u00F1o} - Objetivo para ${areaVida}`;
    let objetivo = await crearNota(template, filename, false, folder);
    return objetivo;
  }
  async crearObjetivoTrimestre(areaVida, trimestre) {
    debugger;
    const templatePath = `Plantillas/${this.plugin.settings["folder_ObjCompassAnual"]}/Plt - ObjCompassAnual.md`;
    const template = app.vault.getAbstractFileByPath(templatePath);
    const folder = app.vault.getAbstractFileByPath("Inbox");
    let crearNota = this.plugin.tp.file.static_functions.get("create_new");
    let filename = `Trimestre ${trimestre} - Objetivo para ${areaVida}`;
    let objetivo = await crearNota(template, filename, false, folder);
    return objetivo;
  }
  /* 
  ----------------------------------------------------------------
  Metodo invocado desde crearProyectoObjetivo(dv, objetivo)
  Esté método hace parte del proceso de Compass Anual.
  Facilita la creación del un proyecto de Q para un objetivo anual establecido.
  ----------------------------------------------------------------
  */
  async crearProyectoQ(objetivo) {
    let suggester = this.plugin.tp.system.static_functions.get("suggester");
    debugger;
    const templatePath = `Plantillas/${this.plugin.settings["folder_ProyectosQ"]}/Plt - ProyectosQ.md`;
    const template = app.vault.getAbstractFileByPath(templatePath);
    const folder = app.vault.getAbstractFileByPath("Inbox");
    let crearNota = this.plugin.tp.file.static_functions.get("create_new");
    let filename = `Proyecto para Objetivo Compass Anual - ${objetivo.id}`;
    let proyecto = await crearNota(template, filename, true, folder);
    return proyecto;
  }
  async crearProyectoGTD(objetivo) {
    debugger;
    const templatePath = `Plantillas/${this.plugin.settings["folder_ProyectosGTD"]}/Plt - ProyectosGTD.md`;
    const template = app.vault.getAbstractFileByPath(templatePath);
    const folder = app.vault.getAbstractFileByPath("Inbox");
    let crearNota = this.plugin.tp.file.static_functions.get("create_new");
    let filename = `Proyecto para Objetivo Compass Anual - ${objetivo.id}`;
    let proyecto = await crearNota(template, filename, true, folder);
    return proyecto;
  }
  /* 
  ----------------------------------------------------------------
  Metodo invocado en el proceso de Compass Anual, cuando elijo volver
  a crear todos los proyectos de un area de vida para un año.
  ----------------------------------------------------------------
  */
  async borrarObjetivos(objetivos) {
    debugger;
    for (let objetivo of objetivos) {
      try {
        await app.vault.delete(objetivo.file);
        console.log(`Archivo borrado: ${objetivo.file.path}`);
      } catch (error) {
        console.error(`Error al borrar el archivo ${objetivo.file.path}: ${error}`);
      }
    }
  }
  /* 
  ----------------------------------------------------------------
  Metodo que permite para cualquier caso en el que se requiera elegir 
  un trimestre para continuar un proceso, hacer la verificación sobre los
  trimestres que esten creados a partir de la nota TQ.  
  ----------------------------------------------------------------
  */
  async establecerTrimestre(temaTrimestre) {
    var _a;
    const folderQ = this.plugin.settings["folder_Trimestral"];
    const filesQ = app.vault.getMarkdownFiles().filter(
      (file) => file.path.includes(folderQ) && !file.path.includes("Plantillas") && !file.path.includes("Archivo")
    );
    let qCreados = [];
    for (let file of filesQ) {
      let metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if ((metadata == null ? void 0 : metadata.type) === "TQ" && (metadata == null ? void 0 : metadata.trimestre)) {
        let qActivo = { file };
        Object.assign(qActivo, metadata);
        qCreados.push(qActivo);
      }
    }
    let suggester = this.plugin.tp.system.static_functions.get("suggester");
    try {
      let q = await suggester(
        qCreados.map((b) => b.trimestre),
        qCreados.map((b) => b),
        true,
        `De que trimestre vamos a procesar tus ${temaTrimestre}`
      );
      if (q === void 0) {
        console.log("Operaci\xF3n cancelada por el usuario.");
        return;
      }
      console.log("El usuario seleccion\xF3:", q);
      return q;
    } catch (error) {
      console.error("Error en el suggester:", error);
    }
  }
  /* 
  ----------------------------------------------------------------
  Con este método puedo actualizar valores en las notas ya existentes.
  Lo utilizo en esta clase, para actualizar el trimestre.
  Esta función solo actualiza, no crea el campos si no existe. 
  ----------------------------------------------------------------
  */
  async actualizarYAMLs(campos, ruta) {
    try {
      const file = app.vault.getAbstractFileByPath(ruta);
      await app.fileManager.processFrontMatter(file, (frontmatter) => {
        for (const campo in campos) {
          if (frontmatter.hasOwnProperty(campo)) {
            frontmatter[campo] = campos[campo];
          }
        }
      });
      console.log("Frontmatter actualizado con \xE9xito");
    } catch (err) {
      console.error("Error al actualizar el frontmatter", err);
    }
  }
};

// src/modules/noteLifecycleManager/views/vistaRegistroDiario.ts
var import_obsidian62 = require("obsidian");
init_luxon();
init_registroTiempoAPI();
var VistaRegistroDiario = class extends import_obsidian62.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
    this.plugin = plugin;
    this.registroTiempoAPI = new registroTiempoAPI(this.plugin);
  }
  getViewType() {
    return "vista-registro-diario";
  }
  getDisplayText() {
    return "Registro Diario";
  }
  getIcon() {
    return "file-clock";
  }
  async onOpen() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      this.contentEl.setText("No hay un archivo activo.");
      return;
    }
    await this.actualizarVista(activeFile);
    this.intervalId = window.setInterval(async () => {
      await this.actualizarVista(activeFile);
    }, 5e3);
  }
  onClose() {
    clearInterval(this.intervalId);
  }
  async actualizarVista(activeFile) {
    var _a;
    this.contentEl.empty();
    const fechaHoy = DateTime.fromFormat(activeFile.basename.split(" ")[0], "yyyy-MM-dd", { locale: "es" });
    const folder = this.plugin.settings.folder_RegistroTiempo;
    const files = this.app.vault.getMarkdownFiles().filter((file) => file.path.includes(folder));
    let totalDia = 0;
    let registrosHoy = [];
    for (let file of files) {
      let metadata = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if (metadata == null ? void 0 : metadata.horaInicio) {
        let horaInicio = DateTime.fromFormat(metadata.horaInicio, "yyyy-MM-dd EEEE HH:mm", { locale: "es" });
        if (horaInicio.startOf("day").ts === fechaHoy.startOf("day").ts) {
          registrosHoy.push({ path: file.path, frontmatter: metadata });
          totalDia += parseInt(metadata.tiempoTrabajado || "0");
        }
      }
    }
    registrosHoy.sort((a, b) => {
      let fechaA = DateTime.fromFormat(a.frontmatter.horaInicio, "yyyy-MM-dd EEEE HH:mm", { locale: "es" }).ts;
      let fechaB = DateTime.fromFormat(b.frontmatter.horaInicio, "yyyy-MM-dd EEEE HH:mm", { locale: "es" }).ts;
      return fechaA - fechaB;
    });
    const titulo = this.contentEl.createEl("h2", { text: `Registros de tiempo del ${fechaHoy.toFormat("EEEE, DD")}.` });
    titulo.style.textAlign = "center";
    const table = this.contentEl.createEl("table", { cls: "table-resumenSemanal" });
    const thead = table.createEl("thead");
    const headerRow = thead.createEl("tr");
    ["Registro", "Descripci\xF3n", "Periodo", "Tiempo", "Estado", "Id", "Acci\xF3n"].forEach((header) => {
      headerRow.createEl("th", { text: header });
    });
    const tbody = table.createEl("tbody");
    registrosHoy.forEach((registro) => {
      const row = tbody.createEl("tr");
      this.fillRowWithData(row, registro);
    });
    this.contentEl.appendChild(table);
  }
  fillRowWithData(row, registro) {
    const tdArchivo = row.createEl("td");
    const linkEl = document.createElement("a");
    linkEl.textContent = registro.frontmatter.aliases[0];
    linkEl.href = "#";
    linkEl.addEventListener("click", async (ev) => {
      ev.preventDefault();
      const file = this.app.vault.getAbstractFileByPath(registro.path);
      if (file instanceof import_obsidian62.TFile) {
        await this.app.workspace.getLeaf(true).openFile(file, { focus: true });
      }
    });
    tdArchivo.appendChild(linkEl);
    row.createEl("td", { text: registro.frontmatter.descripcion });
    row.createEl("td", { text: `${DateTime.fromFormat(registro.frontmatter.horaInicio, "yyyy-MM-dd EEEE HH:mm", { locale: "es" }).toFormat("h:mm a")} / ${DateTime.fromFormat(registro.frontmatter.horaFinal, "yyyy-MM-dd EEEE HH:mm", { locale: "es" }).toFormat("h:mm a")}` });
    const tdPeriodo = row.createEl("td");
    if (registro.frontmatter.estado === "\u{1F7E2}") {
      let ahora = DateTime.local();
      let inicio = DateTime.fromFormat(registro.frontmatter.horaInicio, "yyyy-MM-dd EEEE HH:mm", { locale: "es" });
      let duracion = ahora.diff(inicio, ["days", "hours", "minutes"]);
      tdPeriodo.textContent = this.formatDuration(duracion);
    } else {
      let tiempoTrabajado = this.formatDuration(registro.frontmatter.tiempoTrabajado);
      tdPeriodo.textContent = tiempoTrabajado;
    }
    row.createEl("td", { text: registro.frontmatter.estado });
    row.createEl("td", { text: registro.frontmatter.id });
    const actionCell = row.createEl("td");
    if (registro.frontmatter.estado === "\u{1F7E2}") {
      actionCell.appendChild(this.createButtonTable("Cerrar", async () => {
        await this.registroTiempoAPI.cerrarRegistro(registro.frontmatter.id);
      }));
    } else {
      actionCell.appendChild(this.createButtonTable("Retomar", () => {
        this.retomarTarea(registro.frontmatter.id);
      }));
    }
  }
  // Función auxiliar para formatear la duración de Luxon a un formato legible
  formatDuration(ms) {
    if (ms === null || ms === void 0 || isNaN(ms)) {
      return "No definido";
    } else {
      let minutos = Math.floor(ms / (1e3 * 60));
      let horas = Math.floor(minutos / 60);
      minutos = minutos % 60;
      let dias = Math.floor(horas / 24);
      horas = horas % 24;
      if (dias > 0) {
        return `${dias} d ${horas} h ${minutos} min`;
      } else if (horas > 0) {
        return `${horas} h ${minutos} min`;
      } else {
        return `${minutos} min`;
      }
    }
  }
  createButtonTable(buttonText, onClickCallback) {
    const button = document.createElement("button");
    button.textContent = buttonText;
    button.type = "button";
    button.classList.add("your-button-class");
    button.addEventListener("click", onClickCallback);
    return button;
  }
  async retomarTarea(id) {
    debugger;
    const filePath = `Plantillas/${this.plugin.settings[`folder_RegistroTiempo`]}/Plt - RegistroTiempo.md`;
    const template = app.vault.getAbstractFileByPath(filePath);
    if (template instanceof import_obsidian62.TFile) {
      console.log("Archivo encontrado:", template);
    } else {
      console.log("Archivo no encontrado.");
    }
    const filename = "Retomar " + id;
    const folder = app.vault.getAbstractFileByPath("Inbox");
    const tp = this.getTp();
    let crearNota = tp.file.static_functions.get("create_new");
    await crearNota(template, filename, false, folder).basename;
  }
  getTp() {
    if (!this.plugin || !this.plugin.app.plugins.enabledPlugins.has("templater-obsidian")) {
      console.error("El plugin Templater no est\xE1 habilitado.");
      return;
    }
    let tpGen = this.plugin.app.plugins.plugins["templater-obsidian"].templater;
    tpGen = tpGen.functions_generator.internal_functions.modules_array;
    let tp = {};
    tp.file = tpGen.find((m) => m.name == "file");
    tp.system = tpGen.find((m) => m.name == "system");
    if (!tp.file) {
      console.error("No se pudo acceder al objeto de funciones actuales de Templater.");
      return;
    }
    console.log('tp con propiedades "file" se ha cargado satisfactoriamente');
    return tp;
  }
  // Opcional: Implementa onClose si necesitas limpieza al cerrar la vista.
};

// src/modules/GPThora/GPThora.ts
var import_obsidian63 = require("obsidian");
var GPThora = class {
  constructor(app2) {
    this.app = app2;
  }
  onload() {
    this.app.commands.addCommand({
      id: "show-local-time",
      name: "Mostrar Hora Local",
      callback: () => this.showLocalTimeModal()
    });
  }
  showLocalTimeModal() {
    const modal = new LocalTimeModal(this.app);
    modal.open();
  }
};
var LocalTimeModal = class extends import_obsidian63.Modal {
  constructor(app2) {
    super(app2);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    const now2 = /* @__PURE__ */ new Date();
    const hours = now2.getHours() % 12 || 12;
    const minutes = now2.getMinutes().toString().padStart(2, "0");
    const ampm = now2.getHours() >= 12 ? "PM" : "AM";
    const timeString = `${hours}:${minutes} ${ampm}`;
    contentEl.createEl("h1", { text: "Hora Local" });
    contentEl.createEl("p", { text: timeString });
    contentEl.style.backgroundColor = "#2E3440";
    contentEl.style.color = "#D8DEE9";
    contentEl.style.padding = "20px";
    contentEl.style.textAlign = "center";
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/modules/moduloLibros/librosAPI.ts
var import_obsidian64 = require("obsidian");
init_luxon();
var librosAPI = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.tp = this.plugin.tp;
  }
  async kindle(dv2) {
    let folderPrincipal = this.plugin.settings["folder_KindleNotes"];
    const libraryFolder = this.plugin.app.vault.getAbstractFileByPath(folderPrincipal);
    if (!(libraryFolder instanceof import_obsidian64.TFolder)) {
      new import_obsidian64.Notice(`La carpeta ${folderPrincipal} no existe.`);
      return;
    }
    let archivoActivo = this.plugin.app.workspace.getActiveFile();
    if (!archivoActivo) {
      new import_obsidian64.Notice("No hay una nota activa.");
      return;
    }
    const metadata = this.plugin.app.metadataCache.getFileCache(archivoActivo);
    const yamlData = (metadata == null ? void 0 : metadata.frontmatter) || {};
    if (yamlData.kindleNote) {
      const linkElement = document.createElement("a");
      linkElement.href = yamlData.kindleNote;
      linkElement.textContent = "Ver en Kindle";
      dv2.container.innerHTML = "";
      dv2.container.appendChild(linkElement);
    } else {
      const notesList = await this.getNotesFromFolder(folderPrincipal);
      if (notesList.length === 0) {
        new import_obsidian64.Notice("No hay notas en el folder de Kindle.");
        return;
      }
      const suggestorConfig = {
        onChooseItem: async (selectedNote, evt) => {
          yamlData.kindleNote = selectedNote.path;
          await this.plugin.app.vault.modify(archivoActivo, `---
${yamlData}
...`);
          new import_obsidian64.Notice("Se ha guardado el link de la nota Kindle en el archivo actual.");
        },
        getItems: () => notesList,
        renderSuggestion: (item, el) => {
          el.textContent = item.basename;
        }
      };
      new Suggester(this.plugin, suggestorConfig).start();
    }
  }
  async getNotesFromFolder(folderPath) {
    const folderFiles = await this.plugin.app.vault.getAllLoadedFiles();
    return folderFiles.filter((file) => file instanceof import_obsidian64.TFile && file.path.startsWith(folderPath));
  }
  // Función para crear y mostrar el botón inicial "Menú hoy"
  async mostrarBotonCrearLibro(dv2) {
    let folderPrincipal = this.plugin.settings["folder_Biblioteca"];
    const libraryFolder = this.plugin.app.vault.getAbstractFileByPath(folderPrincipal);
    if (!(libraryFolder instanceof import_obsidian64.TFolder)) {
      new import_obsidian64.Notice(`La carpeta ${folderPrincipal} no existe.`);
      return;
    }
    let archivoActivo = this.plugin.app.workspace.getActiveFile();
    if (!archivoActivo) {
      new import_obsidian64.Notice("No hay una nota activa.");
      return;
    }
    const bookExists = await this.bookExistsInLibrary(folderPrincipal, archivoActivo);
    if (bookExists) {
      const alias = await this.getAlias(bookExists);
      const texto = document.createElement("p");
      const link = document.createElement("a");
      link.href = bookExists.path;
      link.textContent = alias;
      link.dataset.href = bookExists.path;
      link.className = "internal-link";
      texto.textContent = `El libro ya est\xE1 en la biblioteca: `;
      texto.appendChild(link);
      dv2.container.appendChild(texto);
    } else {
      dv2.container.innerHTML = "";
      const botonCrearLibro = document.createElement("button");
      botonCrearLibro.textContent = "Ingresar a mi Biblioteca";
      dv2.container.appendChild(botonCrearLibro);
      botonCrearLibro.onclick = async () => {
        await this.ingresarLibroBiblioteca();
      };
    }
  }
  async bookExistsInLibrary(folderPrincipal, archivoActivo) {
    const files = this.plugin.app.vault.getFiles();
    const activeFileName = archivoActivo.basename;
    for (let file of files) {
      if (file.path.startsWith(folderPrincipal)) {
        const cache = this.plugin.app.metadataCache.getFileCache(file);
        const frontmatter = cache == null ? void 0 : cache.frontmatter;
        if (frontmatter && frontmatter.asunto) {
          const asunto = frontmatter.asunto;
          if (Array.isArray(asunto)) {
            for (let entry of asunto) {
              if (entry.includes(`[[${activeFileName}]]`)) {
                return file;
              }
            }
          } else if (typeof asunto === "string" && asunto.includes(`[[${activeFileName}]]`)) {
            return file;
          }
        }
      }
    }
    return false;
  }
  async getAlias(file) {
    const cache = this.plugin.app.metadataCache.getFileCache(file);
    const frontmatter = cache == null ? void 0 : cache.frontmatter;
    return frontmatter && frontmatter.aliases && frontmatter.aliases[0] ? frontmatter.aliases[0] : file.basename;
  }
  async ingresarLibroBiblioteca() {
    debugger;
    const template = app.vault.getAbstractFileByPath("Plantillas/Subsistemas/Libros/Biblioteca/Plt - Libro a Biblioteca.md");
    const filename = "Nuevo Libro";
    const folder = app.vault.getAbstractFileByPath("Inbox");
    if (template instanceof import_obsidian64.TFile) {
      console.log("Archivo encontrado:", template);
    } else {
      console.log("Archivo no encontrado.");
    }
    let crearNota = this.tp.file.static_functions.get("create_new");
    await crearNota(template, filename, false, folder).basename;
  }
};

// src/modules/moduloRegistroTiempo/API/updateSesionLectura.ts
init_utilsAPI();
var import_obsidian65 = require("obsidian");
init_luxon();
var updateSesionLectura = class extends YAMLUpdaterAPI2 {
  constructor(plugin) {
    super(plugin);
    this.plugin = plugin;
    this.plugin = plugin;
    this.utilsApi = new utilsAPI(plugin);
    this.tp = plugin.tp;
    this.nota = {};
    this.infoNota = {};
  }
  //actualizarNota(infoNota: any, campos: any): Promise<any>;
  //getFecha(): Promise<string>;
  //getHoraFinal(): Promise<string>;
  //getTiempoLeido(): Promise<string>;
  async getTiempoLeido(parametro, actual) {
    debugger;
    let horaInicioStr = this.infoNota.horaInicio;
    let cierre;
    let [fecha, , hora] = horaInicioStr.split(" ");
    let fechaHoraISO = `${fecha}T${hora}`;
    let horaInicio = new Date(fechaHoraISO);
    if (parametro == void 0) {
      cierre = /* @__PURE__ */ new Date();
    } else {
      let [fechaCierre, , horaCierre] = parametro.split(" ");
      let fechaHoraCierreISO = `${fechaCierre}T${horaCierre}`;
      cierre = new Date(fechaHoraCierreISO);
    }
    let diferenciaEnMilisegundos = cierre - horaInicio;
    return diferenciaEnMilisegundos;
  }
  async getEstado(parametro, actual) {
    let campo;
    if (parametro == void 0) {
      campo = "\u{1F535}";
      if (campo === null) {
        new Notice("Modificaci\xF3n de nota cancelada por el usuario.");
        return;
      }
    } else {
      campo = parametro;
    }
    this.nota.estado = campo;
    return campo;
  }
  async getPPM() {
    debugger;
    let palabrasPorHoja = parseInt(this.infoNota.palabrasPorHoja);
    let paginasLeidas = parseInt(this.nota.pagLeidas);
    let tiempoLeido = parseInt(this.nota.tiempoLeido);
    let PPM = palabrasPorHoja * paginasLeidas / (tiempoLeido / 6e4);
    return PPM;
  }
  async getPagLeidas() {
    debugger;
    let pagFin = parseInt(this.nota.pagFin);
    let paginasLeidas = pagFin - parseInt(this.infoNota.pagInicio);
    return parseInt(paginasLeidas);
  }
  async getPagFin() {
    debugger;
    let prompt = this.tp.system.static_functions.get("prompt");
    let pagFin = await prompt(`\xBFHasta que p\xE1gina le\xEDste?`, `${this.infoNota.pagInicio}`, true);
    return parseInt(pagFin);
  }
  async getPorLeer() {
    debugger;
    let porLeer = parseInt(this.infoNota.paginas) - parseInt(this.nota.pagFin);
    return porLeer;
  }
};

// src/modules/taskManager/api/tareasAPI.ts
var import_obsidian67 = require("obsidian");

// src/modules/taskManager/utils/taskUtils.ts
var import_obsidian66 = require("obsidian");
var TaskUtils = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  compararFechas(fecha1, fecha2) {
    if (!fecha1 && !fecha2)
      return 0;
    if (!fecha1)
      return 1;
    if (!fecha2)
      return -1;
    return fecha1.getTime() - fecha2.getTime();
  }
  normalizarHora(hora) {
    const patrones = [
      /^(\d{1,2})(?::(\d{2}))?\s*(am|pm)?$/i,
      /^(\d{1,2}):(\d{2})\s*(am|pm)?$/i,
      /^(\d{1,2}):(\d{2})$/
    ];
    for (const patron of patrones) {
      const match2 = hora.toLowerCase().match(patron);
      if (match2) {
        let horas = parseInt(match2[1]);
        const minutos = match2[2] ? match2[2] : "00";
        const periodo = match2[3];
        if (periodo === "pm" && horas < 12)
          horas += 12;
        if (periodo === "am" && horas === 12)
          horas = 0;
        return `${horas.toString().padStart(2, "0")}:${minutos}`;
      }
    }
    return null;
  }
  extraerFechasYHoras(linea) {
    var _a, _b, _c, _d;
    const horaInicioMatch = linea.match(/\[hI:\s*([^\]]+)\]/);
    const horaFinMatch = linea.match(/\[hF:\s*([^\]]+)\]/);
    return {
      fechaCreacion: (_a = linea.match(/➕ (\d{4}-\d{2}-\d{2})/)) == null ? void 0 : _a[1],
      fechaScheduled: (_b = linea.match(/⏳ (\d{4}-\d{2}-\d{2})/)) == null ? void 0 : _b[1],
      fechaStart: (_c = linea.match(/🛫 (\d{4}-\d{2}-\d{2})/)) == null ? void 0 : _c[1],
      fechaVencimiento: (_d = linea.match(/📅 (\d{4}-\d{2}-\d{2})/)) == null ? void 0 : _d[1],
      horaInicio: horaInicioMatch ? this.normalizarHora(horaInicioMatch[1].trim()) : void 0,
      horaFin: horaFinMatch ? this.normalizarHora(horaFinMatch[1].trim()) : void 0
    };
  }
  obtenerTituloNota(file) {
    var _a;
    const metadata = (_a = this.plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    if (metadata == null ? void 0 : metadata.aliases) {
      if (Array.isArray(metadata.aliases))
        return metadata.aliases[0];
      if (typeof metadata.aliases === "string")
        return metadata.aliases;
    }
    if (metadata == null ? void 0 : metadata.titulo)
      return metadata.titulo;
    const coincidencia = file.basename.match(/(?:PGTD|PQ|AI|AV|Ax|RR|DJ|OCA|CAC) - (.+)/);
    if (coincidencia && coincidencia[1])
      return coincidencia[1];
    return file.basename;
  }
  categorizarEtiquetas(etiquetas) {
    return {
      todoist: etiquetas.filter((e) => e.startsWith("#todoist")),
      contextos: etiquetas.filter((e) => e.match(/#cx(?:[/-].+)$/)).map((e) => this.limpiarPrefijo(e, "cx")),
      personas: etiquetas.filter((e) => e.startsWith("#px-")).map((e) => this.formatearEtiquetaPersona(e)),
      otras: etiquetas.filter(
        (e) => !e.startsWith("#todoist") && !e.match(/#cx(?:[/-]|$)/) && !e.startsWith("#px-")
      )
    };
  }
  // Nuevo método para formatear etiquetas de personas
  formatearEtiquetaPersona(etiqueta) {
    const nombre = etiqueta.replace("#px-", "");
    return nombre.replace(/_/g, " ");
  }
  limpiarPrefijo(etiqueta, prefijo) {
    const sinPrefijo = etiqueta.replace(new RegExp(`#${prefijo}[/-]`), "");
    return sinPrefijo.replace(/-/g, " \u2192 ").replace(/\//g, " \u2192 ");
  }
  limpiarTextoTarea(linea) {
    let textoLimpio = linea.replace(/^- \[ \]/, "").replace(/[➕📅⏳🛫] \d{4}-\d{2}-\d{2}/g, "").replace(/\[hI:[^\]]+\]/g, "").replace(/\[hF:[^\]]+\]/g, "").replace(/\[link\]\([^\)]+\)/g, "").replace(/%%\[todoist_id:: \d+\]%%/g, "").replace(/#[\w-]+(?:\/[\w-]+)*\b/g, "").replace(/#[\w-]+(?:-[\w-]+)*\b/g, "");
    textoLimpio = textoLimpio.replace(/\s+/g, " ").trim();
    return textoLimpio;
  }
  // Método de utilidad para obtener una representación jerárquica de las etiquetas
  obtenerJerarquiaEtiquetas(etiquetas) {
    const jerarquia = /* @__PURE__ */ new Map();
    etiquetas.forEach((etiqueta) => {
      var _a;
      const partes = etiqueta.slice(1).split(/[/-]/);
      const categoria = partes[0];
      if (!jerarquia.has(categoria)) {
        jerarquia.set(categoria, /* @__PURE__ */ new Set());
      }
      if (partes.length > 1) {
        const subetiquetas = partes.slice(1).join("/");
        (_a = jerarquia.get(categoria)) == null ? void 0 : _a.add(subetiquetas);
      }
    });
    return jerarquia;
  }
  obtenerFechaLocal() {
    const ahora = /* @__PURE__ */ new Date();
    return new Date(
      ahora.getFullYear(),
      ahora.getMonth(),
      ahora.getDate(),
      0,
      0,
      0
    );
  }
  parsearFechaVencimiento(fechaStr) {
    if (!fechaStr)
      return null;
    try {
      const [a\u00F1o, mes, dia] = fechaStr.split("-").map((num) => parseInt(num));
      if (isNaN(a\u00F1o) || isNaN(mes) || isNaN(dia))
        return null;
      const fecha = new Date(a\u00F1o, mes - 1, dia, 0, 0, 0);
      return fecha;
    } catch (error) {
      console.error("Error parseando fecha:", error);
      return null;
    }
  }
  normalizarFechaAString(fecha) {
    const a\u00F1o = fecha.getFullYear();
    const mes = String(fecha.getMonth() + 1).padStart(2, "0");
    const dia = String(fecha.getDate()).padStart(2, "0");
    return `${a\u00F1o}-${mes}-${dia}`;
  }
  extraerDependenciasYIds(linea) {
    console.log("Analizando l\xEDnea para IDs:", linea);
    const resultado = {
      taskId: void 0,
      dependencyId: void 0
    };
    const taskIdMatch = linea.match(/🆔\s*([a-z0-9]{5,7})/);
    if (taskIdMatch) {
      resultado.taskId = taskIdMatch[1];
      console.log("ID encontrado:", resultado.taskId);
    }
    const dependencyMatch = linea.match(/⛔\s*([a-z0-9]{5,7})/);
    if (dependencyMatch) {
      resultado.dependencyId = dependencyMatch[1];
      console.log("Dependencia encontrada:", resultado.dependencyId);
    }
    return resultado;
  }
  async verificarEstadoTarea(taskId) {
    console.log("\nVerificando estado de tarea:", taskId);
    const todosLosArchivos = this.plugin.app.vault.getMarkdownFiles();
    const filesParaProcesar = todosLosArchivos.filter((file) => !this.debeExcluirArchivo(file));
    console.log(`Buscando en ${filesParaProcesar.length} archivos (excluidos: ${todosLosArchivos.length - filesParaProcesar.length})`);
    for (const file of filesParaProcesar) {
      try {
        const contenido = await this.plugin.app.vault.cachedRead(file);
        const lineas = contenido.split("\n");
        for (const linea of lineas) {
          if (linea.includes(`\u{1F194} ${taskId}`)) {
            const estaCompletada = linea.trim().startsWith("- [x]");
            const tituloArchivo = this.obtenerTituloNota(file);
            const textoTarea = this.limpiarTextoTarea(linea);
            console.log("Tarea encontrada en:", file.path);
            console.log("Estado completada:", estaCompletada);
            console.log("Texto de la tarea:", textoTarea);
            return {
              completada: estaCompletada,
              rutaArchivo: file.path,
              tituloArchivo,
              textoTarea
            };
          }
        }
      } catch (error) {
        console.error(`Error procesando archivo ${file.path}:`, error);
      }
    }
    console.log("Tarea no encontrada en los archivos permitidos");
    return {
      completada: false
    };
  }
  // En la clase TaskUtils
  extraerEtiquetas(linea) {
    const etiquetas = [];
    const patronesEtiquetas = [
      // Etiquetas de personas con formato #px-Nombre_Apellido 
      /#px-[A-Za-z]+(?:_[A-Za-z]+)*(?:_[A-Za-z]+)?\b/g,
      // Etiquetas simples: #todoist
      /#[\w-]+\b/g,
      // Etiquetas con jerarquía usando "/": #cx/alguna/cosa
      /#[\w-]+(?:\/[\w-]+)+\b/g,
      // Etiquetas con jerarquía usando "-": #cx-alguna-cosa
      /#[\w-]+(?:-[\w-]+)+\b/g
    ];
    patronesEtiquetas.forEach((patron) => {
      const coincidencias = linea.match(patron);
      if (coincidencias) {
        coincidencias.forEach((etiqueta) => {
          if (!etiquetas.includes(etiqueta) && this.esEtiquetaValida(etiqueta)) {
            etiquetas.push(etiqueta);
          }
        });
      }
    });
    return this.organizarEtiquetas(etiquetas);
  }
  esEtiquetaValida(etiqueta) {
    if (!etiqueta.startsWith("#"))
      return false;
    if (etiqueta.startsWith("#px-")) {
      const nombreCompleto = etiqueta.slice(4);
      return /^[A-Za-z]+(?:_[A-Za-z]+)*$/.test(nombreCompleto);
    }
    const caracteresInvalidos = /[!@$%^&*()+={}\[\]:;"'<>,.?~\\|]/;
    if (caracteresInvalidos.test(etiqueta))
      return false;
    const partesEtiqueta = etiqueta.slice(1).split(/[/-]/);
    return partesEtiqueta.every((parte) => parte.length > 0);
  }
  organizarEtiquetas(etiquetas) {
    const categoriasConocidas = {
      todoist: [],
      cx: [],
      px: [],
      otras: []
    };
    etiquetas.forEach((etiqueta) => {
      if (etiqueta.startsWith("#px-")) {
        categoriasConocidas.px.push(etiqueta);
      } else if (etiqueta.startsWith("#todoist")) {
        categoriasConocidas.todoist.push(etiqueta);
      } else if (etiqueta.match(/#cx(?:[/-]|$)/)) {
        categoriasConocidas.cx.push(etiqueta);
      } else {
        categoriasConocidas.otras.push(etiqueta);
      }
    });
    Object.values(categoriasConocidas).forEach((categoria) => {
      categoria.sort((a, b) => a.localeCompare(b));
    });
    return [
      ...categoriasConocidas.todoist,
      ...categoriasConocidas.cx,
      ...categoriasConocidas.px,
      ...categoriasConocidas.otras
    ];
  }
  // Agregar método para verificar exclusiones
  debeExcluirArchivo(file) {
    if (file.path.startsWith("Plantillas/")) {
      return true;
    }
    if (file.path.startsWith(`${this.plugin.settings.folder_SistemaGTD}/`)) {
      return true;
    }
    if (file.path.startsWith("Archivo/")) {
      return true;
    }
    return false;
  }
  async encontrarLineasTarea(file) {
    const lineasTareas = /* @__PURE__ */ new Map();
    try {
      const contenido = await this.plugin.app.vault.cachedRead(file);
      const lineas = contenido.split("\n");
      lineas.forEach((linea, index) => {
        const textoLimpio = this.limpiarTextoTarea(linea);
        if (textoLimpio && linea.trim().startsWith("- [")) {
          lineasTareas.set(textoLimpio, {
            numero: index + 1,
            texto: linea.trim()
          });
        }
      });
    } catch (error) {
      console.error(`Error procesando l\xEDneas en ${file.path}:`, error);
    }
    return lineasTareas;
  }
};

// src/modules/taskManager/utils/taskWeightCalculator.ts
var _TaskWeightCalculator = class _TaskWeightCalculator {
  static setTaskUtils(utils) {
    _TaskWeightCalculator.taskUtils = utils;
  }
  static getFechaPrioritaria(task, tipoFecha = "any") {
    if (!task)
      return null;
    switch (tipoFecha) {
      case "start":
        return task.fechaStart || null;
      case "due":
        return task.fechaVencimiento || null;
      case "scheduled":
        return task.fechaScheduled || null;
      case "any":
        return task.fechaVencimiento || task.fechaScheduled || task.fechaStart || null;
      default:
        return null;
    }
  }
  static shouldIncludeTask(task, searchType, currentDate) {
    if (!_TaskWeightCalculator.taskUtils) {
      console.error("TaskUtils no inicializado en TaskWeightCalculator");
      return false;
    }
    try {
      switch (searchType) {
        case "start_vencidas": {
          const fechaStart = task.fechaStart;
          if (!fechaStart)
            return false;
          const fechaStartObj = _TaskWeightCalculator.taskUtils.parsearFechaVencimiento(fechaStart);
          return fechaStartObj !== null && fechaStartObj < currentDate;
        }
        case "vencidas": {
          const fechaVencimiento = task.fechaVencimiento;
          if (!fechaVencimiento)
            return false;
          const fechaVencObj = _TaskWeightCalculator.taskUtils.parsearFechaVencimiento(fechaVencimiento);
          return fechaVencObj !== null && fechaVencObj < currentDate;
        }
        case "hoy": {
          const fechas = [task.fechaVencimiento, task.fechaScheduled, task.fechaStart].filter((f) => f);
          return fechas.some((fecha) => {
            const fechaObj = _TaskWeightCalculator.taskUtils.parsearFechaVencimiento(fecha);
            return (fechaObj == null ? void 0 : fechaObj.toDateString()) === currentDate.toDateString();
          });
        }
        case "proximas": {
          const fechaVencimiento = task.fechaVencimiento;
          if (!fechaVencimiento)
            return false;
          const fechaVencObj = _TaskWeightCalculator.taskUtils.parsearFechaVencimiento(fechaVencimiento);
          if (!fechaVencObj)
            return false;
          const diasDiferencia = Math.ceil(
            (fechaVencObj.getTime() - currentDate.getTime()) / (1e3 * 60 * 60 * 24)
          );
          return diasDiferencia >= 0 && diasDiferencia <= 7;
        }
        default:
          return false;
      }
    } catch (error) {
      console.error("Error en shouldIncludeTask:", error);
      return false;
    }
  }
  static calculateWeight(task) {
    let baseWeight = 0;
    let timeWeight = 0;
    let priorityWeight = 0;
    if (task.fechaVencimiento)
      baseWeight += this.WEIGHTS.DUE_DATE;
    if (task.fechaScheduled)
      baseWeight += this.WEIGHTS.SCHEDULED;
    if (task.fechaStart)
      baseWeight += this.WEIGHTS.START;
    if (task.horaFin)
      timeWeight += this.WEIGHTS.HORA_FIN;
    if (task.horaInicio)
      timeWeight += this.WEIGHTS.HORA_INICIO;
    const texto = task.texto.toLowerCase();
    if (texto.includes("\u{1F53A}"))
      priorityWeight += this.WEIGHTS.PRIORITY.HIGHEST;
    if (texto.includes("\u23EB"))
      priorityWeight += this.WEIGHTS.PRIORITY.HIGH;
    if (texto.includes("\u{1F53C}"))
      priorityWeight += this.WEIGHTS.PRIORITY.MEDIUM;
    if (texto.includes("\u{1F53D}"))
      priorityWeight += this.WEIGHTS.PRIORITY.LOW;
    if (texto.includes("\u23EC"))
      priorityWeight += this.WEIGHTS.PRIORITY.LOWEST;
    return {
      baseWeight,
      timeWeight,
      priorityWeight,
      totalWeight: baseWeight + timeWeight + priorityWeight
    };
  }
  static sortTasks(tasks) {
    if (!_TaskWeightCalculator.taskUtils) {
      console.error("TaskUtils no inicializado en TaskWeightCalculator");
      return tasks;
    }
    return tasks.sort((a, b) => {
      var _a, _b, _c, _d;
      try {
        const fechaA = this.getFechaPrioritaria(a, "any");
        const fechaB = this.getFechaPrioritaria(b, "any");
        if (fechaA !== fechaB) {
          const dateA = fechaA ? _TaskWeightCalculator.taskUtils.parsearFechaVencimiento(fechaA) : null;
          const dateB = fechaB ? _TaskWeightCalculator.taskUtils.parsearFechaVencimiento(fechaB) : null;
          if (dateA && dateB) {
            return dateA.getTime() - dateB.getTime();
          }
          return 0;
        }
        if (a.horaInicio && b.horaInicio) {
          if (a.horaInicio !== b.horaInicio) {
            return a.horaInicio.localeCompare(b.horaInicio);
          }
        } else if (a.horaInicio) {
          return -1;
        } else if (b.horaInicio) {
          return 1;
        }
        const weightA = (_b = (_a = a.weight) == null ? void 0 : _a.totalWeight) != null ? _b : 0;
        const weightB = (_d = (_c = b.weight) == null ? void 0 : _c.totalWeight) != null ? _d : 0;
        return weightB - weightA;
      } catch (error) {
        console.error("Error ordenando tareas:", error);
        return 0;
      }
    });
  }
  static calculateBaseWeight(task) {
    let weight = 0;
    if (task.fechaVencimiento)
      weight += this.WEIGHTS.DUE_DATE;
    if (task.fechaScheduled)
      weight += this.WEIGHTS.SCHEDULED;
    if (task.fechaStart)
      weight += this.WEIGHTS.START;
    return weight;
  }
  static calculateTimeWeight(task) {
    let weight = 0;
    if (task.horaFin)
      weight += this.WEIGHTS.HORA_FIN;
    if (task.horaInicio)
      weight += this.WEIGHTS.HORA_INICIO;
    return weight;
  }
  static calculatePriorityWeight(task) {
    const texto = task.texto.toLowerCase();
    if (texto.includes("\u{1F53A}"))
      return this.WEIGHTS.PRIORITY.HIGHEST;
    if (texto.includes("\u23EB"))
      return this.WEIGHTS.PRIORITY.HIGH;
    if (texto.includes("\u{1F53C}"))
      return this.WEIGHTS.PRIORITY.MEDIUM;
    if (texto.includes("\u{1F53D}"))
      return this.WEIGHTS.PRIORITY.LOW;
    if (texto.includes("\u23EC"))
      return this.WEIGHTS.PRIORITY.LOWEST;
    return 0;
  }
  static esFechaValida(fecha) {
    try {
      const fechaObj = new Date(fecha);
      return fechaObj.toString() !== "Invalid Date";
    } catch (e) {
      return false;
    }
  }
};
_TaskWeightCalculator.WEIGHTS = {
  HORA_FIN: 5,
  HORA_INICIO: 5,
  DUE_DATE: 5,
  SCHEDULED: 4,
  START: 3,
  PRIORITY: {
    HIGHEST: 4,
    HIGH: 3,
    MEDIUM: 2,
    LOW: -1,
    LOWEST: -2
  }
};
var TaskWeightCalculator = _TaskWeightCalculator;

// src/modules/taskManager/api/tareasAPI.ts
var TareasAPI = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.taskUtils = new TaskUtils(plugin);
    TaskWeightCalculator.setTaskUtils(this.taskUtils);
  }
  debeExcluirArchivo(file) {
    if (file.path.startsWith("Plantillas/")) {
      return true;
    }
    if (file.path.startsWith(`${this.plugin.settings.folder_SistemaGTD}/`)) {
      return true;
    }
    if (file.path.startsWith("Archivo/")) {
      return true;
    }
    return false;
  }
  async procesarTareas(files, filtro, buscarEnEjecucion = false) {
    const tareas = [];
    const errores = [];
    try {
      const filesParaProcesar = files.filter((file) => !this.debeExcluirArchivo(file));
      console.log(`
=== INICIANDO PROCESAMIENTO DE TAREAS ===`);
      console.log(`Procesando ${filesParaProcesar.length} archivos de ${files.length} totales`);
      for (const file of filesParaProcesar) {
        try {
          const contenido = await this.plugin.app.vault.cachedRead(file);
          const lineas = contenido.split("\n");
          const tituloNota = this.taskUtils.obtenerTituloNota(file);
          console.log(`
Procesando archivo: ${file.path}`);
          for (const linea of lineas) {
            const esEnEjecucion = linea.trim().startsWith("- [/]");
            const esAbierta = linea.trim().startsWith("- [ ]");
            const esCompletada = linea.trim().startsWith("- [x]");
            if (!linea.trim().startsWith("- ["))
              continue;
            if (buscarEnEjecucion) {
              if (!esEnEjecucion)
                continue;
            } else {
              if (esCompletada || esEnEjecucion)
                continue;
              if (!esAbierta)
                continue;
            }
            const textoLimpio = this.taskUtils.limpiarTextoTarea(linea);
            const textoOriginal = linea.trim();
            const fechasYHoras = this.taskUtils.extraerFechasYHoras(linea);
            const etiquetasExtraidas = this.taskUtils.extraerEtiquetas(linea);
            const etiquetasCategorizadas = this.taskUtils.categorizarEtiquetas(etiquetasExtraidas);
            const { taskId, dependencyId } = this.taskUtils.extraerDependenciasYIds(linea);
            const tarea = {
              texto: textoLimpio,
              textoOriginal,
              rutaArchivo: file.path,
              nombreArchivo: file.basename,
              titulo: tituloNota,
              estado: esEnEjecucion ? "en_ejecucion" /* EnEjecucion */ : "abierta" /* Abierta */,
              ...fechasYHoras,
              etiquetas: {
                todas: etiquetasExtraidas,
                ...etiquetasCategorizadas
              },
              taskId,
              dependencyId
            };
            tarea.weight = TaskWeightCalculator.calculateWeight(tarea);
            if (dependencyId) {
              const estadoDependencia = await this.taskUtils.verificarEstadoTarea(dependencyId);
              tarea.isBlocked = !estadoDependencia.completada;
              tarea.dependencyLocation = estadoDependencia.rutaArchivo;
              tarea.dependencyTitle = estadoDependencia.tituloArchivo;
              tarea.dependencyTexto = estadoDependencia.textoTarea;
            }
            const cumpleFiltro = await Promise.resolve(filtro(tarea));
            if (cumpleFiltro) {
              console.log(`-> Tarea agregada: ${textoLimpio.substring(0, 50)}...`);
              tareas.push(tarea);
            }
          }
        } catch (fileError) {
          errores.push(`Error procesando archivo ${file.path}: ${fileError.message}`);
          console.error(`Error en archivo ${file.path}:`, fileError);
        }
      }
    } catch (error) {
      console.error("Error general procesando tareas:", error);
      new import_obsidian67.Notice("Error procesando tareas. Revisa la consola para m\xE1s detalles.");
    }
    if (errores.length > 0) {
      console.warn("\nErrores encontrados durante el procesamiento:", errores);
    }
    console.log(`
=== PROCESAMIENTO COMPLETADO ===`);
    console.log(`Total de tareas encontradas: ${tareas.length}`);
    return buscarEnEjecucion ? this.organizarTareasEnEjecucion(tareas) : TaskWeightCalculator.sortTasks(tareas);
  }
  guardarYAbrirArchivo(nombreArchivo, contenido) {
    return new Promise(async (resolve, reject) => {
      try {
        const carpetaGTD = this.plugin.app.vault.getAbstractFileByPath(
          this.plugin.settings.folder_SistemaGTD
        );
        if (!carpetaGTD) {
          await this.plugin.app.vault.createFolder(
            this.plugin.settings.folder_SistemaGTD
          );
        }
        const archivoExistente = this.plugin.app.vault.getAbstractFileByPath(nombreArchivo);
        if (archivoExistente instanceof import_obsidian67.TFile) {
          await this.plugin.app.vault.modify(archivoExistente, contenido);
          await this.plugin.app.workspace.getLeaf().openFile(archivoExistente);
        } else {
          const nuevoArchivo = await this.plugin.app.vault.create(nombreArchivo, contenido);
          await this.plugin.app.workspace.getLeaf().openFile(nuevoArchivo);
        }
        resolve();
      } catch (error) {
        console.error("Error al guardar/abrir archivo:", error);
        reject(error);
      }
    });
  }
  // Métodos principales de búsqueda de tareas
  async getTareasVencidasAbiertas() {
    return await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      (tarea) => TaskWeightCalculator.shouldIncludeTask(tarea, "vencidas", this.taskUtils.obtenerFechaLocal())
    );
  }
  async getTareasHoy() {
    return await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      (tarea) => TaskWeightCalculator.shouldIncludeTask(tarea, "hoy", this.taskUtils.obtenerFechaLocal())
    );
  }
  async getTareasProximas(diasProximos = 7) {
    return await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      (tarea) => TaskWeightCalculator.shouldIncludeTask(tarea, "proximas", this.taskUtils.obtenerFechaLocal())
    );
  }
  async getTareasStartVencidas() {
    return await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      (tarea) => TaskWeightCalculator.shouldIncludeTask(tarea, "start_vencidas", this.taskUtils.obtenerFechaLocal())
    );
  }
  async getTareasStartProximas(diasProximos = 7) {
    const hoy = this.taskUtils.obtenerFechaLocal();
    const limiteFuturo = new Date(hoy);
    limiteFuturo.setDate(limiteFuturo.getDate() + diasProximos);
    return await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      (tarea) => {
        if (!tarea.fechaStart)
          return false;
        const fechaStart = this.taskUtils.parsearFechaVencimiento(tarea.fechaStart);
        return fechaStart && fechaStart <= limiteFuturo && fechaStart >= hoy;
      }
    );
  }
  // Métodos de renderizado y visualización
  generarBotonActualizacion(metodo, parametros) {
    return `\`\`\`dataviewjs
const gp = app.plugins.plugins['obsidian-personal-management'];
if (!gp) {
    dv.paragraph("\u26A0\uFE0F Plugin de Gesti\xF3n Personal no encontrado");
    return;
}

const btn = this.container.createEl('button', {text: '\u{1F504} Actualizar Vista'});
btn.style.cssText = 'padding: 5px 15px; background-color: #1e1e1e; color: #ffffff; border: 1px solid #4a4a4a; border-radius: 4px; cursor: pointer; margin-bottom: 10px;';

btn.addEventListener('mouseenter', () => btn.style.backgroundColor = '#2e2e2e');
btn.addEventListener('mouseleave', () => btn.style.backgroundColor = '#1e1e1e');

btn.addEventListener('click', async () => {
    try {
        new Notice('Actualizando vista...');
        await gp.tareasAPI.${metodo}(${parametros || ""});
    } catch (error) {
        console.error('Error:', error);
        new Notice('Error al actualizar tareas');
    }
});
\`\`\`

`;
  }
  // Métodos públicos de visualización correspondientes a los comandos
  async mostrarTareasVencidas() {
    try {
      const tareas = await this.getTareasVencidasAbiertas();
      if (tareas.length === 0) {
        new import_obsidian67.Notice("No hay tareas vencidas abiertas.");
        return;
      }
      const contenido = this.generarVistaCompleta(
        tareas,
        "Tareas Vencidas",
        "mostrarTareasVencidas"
      );
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas Vencidas.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${tareas.length} tareas vencidas`);
    } catch (error) {
      console.error("Error en mostrarTareasVencidas:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  async mostrarTareasProximas(diasProximos = 7) {
    try {
      const tareas = await this.getTareasProximas(diasProximos);
      if (tareas.length === 0) {
        new import_obsidian67.Notice("No hay tareas pr\xF3ximas.");
        return;
      }
      const contenido = this.generarVistaCompleta(
        tareas,
        "Tareas Pr\xF3ximas",
        "mostrarTareasProximas",
        diasProximos
      );
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas Pr\xF3ximas.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${tareas.length} tareas pr\xF3ximas`);
    } catch (error) {
      console.error("Error en mostrarTareasProximas:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  async mostrarTareasHoy() {
    try {
      const tareas = await this.getTareasHoy();
      if (tareas.length === 0) {
        new import_obsidian67.Notice("No hay tareas programadas para hoy.");
        return;
      }
      const contenido = this.generarVistaCompleta(
        tareas,
        "Tareas para Hoy",
        "mostrarTareasHoy"
      );
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas para Hoy.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${tareas.length} tareas para hoy`);
    } catch (error) {
      console.error("Error en mostrarTareasHoy:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  async mostrarTareasStartVencidas() {
    try {
      const tareas = await this.getTareasStartVencidas();
      if (tareas.length === 0) {
        new import_obsidian67.Notice("No hay tareas con inicio vencido.");
        return;
      }
      const contenido = this.generarVistaCompleta(
        tareas,
        "Tareas con Inicio Vencido",
        "mostrarTareasStartVencidas"
      );
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas con Inicio Vencido.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${tareas.length} tareas con inicio vencido`);
    } catch (error) {
      console.error("Error en mostrarTareasStartVencidas:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  async mostrarTareasStartProximas(diasProximos = 7) {
    try {
      const tareas = await this.getTareasStartProximas(diasProximos);
      if (tareas.length === 0) {
        new import_obsidian67.Notice("No hay tareas por iniciar en el per\xEDodo especificado.");
        return;
      }
      const contenido = this.generarVistaCompleta(
        tareas,
        "Tareas por Iniciar",
        "mostrarTareasStartProximas",
        diasProximos
      );
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas por Iniciar.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${tareas.length} tareas por iniciar`);
    } catch (error) {
      console.error("Error en mostrarTareasStartProximas:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  // Métodos de utilidad privados
  tieneFechasValidas(fechasYHoras) {
    const { fechaVencimiento, fechaScheduled, fechaStart } = fechasYHoras;
    return fechaVencimiento || fechaScheduled || fechaStart;
  }
  generarVistaCompleta(tareas, titulo, metodoActualizacion, diasProximos) {
    const hoy = this.taskUtils.obtenerFechaLocal();
    let contenido = `# ${titulo}

`;
    contenido += this.generarBotonActualizacion(metodoActualizacion, diasProximos);
    contenido += `> [!info] Actualizado: ${hoy.toLocaleDateString()} ${(/* @__PURE__ */ new Date()).toLocaleTimeString()}
`;
    if (diasProximos) {
      contenido += `> Mostrando tareas para los pr\xF3ximos ${diasProximos} d\xEDas
`;
    }
    contenido += `> Total de tareas encontradas: ${tareas.length}

`;
    contenido += this.renderizarTareasAgrupadas(tareas);
    return contenido;
  }
  renderizarTareasAgrupadas(tareas) {
    const tareasPorArchivo = this.agruparTareasPorArchivo(tareas);
    let contenido = "";
    for (const [rutaArchivo, info] of Object.entries(tareasPorArchivo)) {
      contenido += `### [[${rutaArchivo}|${info.titulo}]]

`;
      info.tareas.forEach((tarea) => {
        contenido += this.renderizarTarea(tarea);
      });
      contenido += "\n";
    }
    return contenido;
  }
  renderizarTarea(tarea) {
    var _a, _b, _c, _d;
    let contenido = `- [ ] ${tarea.texto}
`;
    const fechas = [];
    if (tarea.fechaVencimiento) {
      fechas.push(`\u{1F4C5} ${this.formatearFechaConContexto(tarea.fechaVencimiento, "due")}`);
    }
    if (tarea.fechaScheduled) {
      fechas.push(`\u23F3 ${this.formatearFechaConContexto(tarea.fechaScheduled, "scheduled")}`);
    }
    if (tarea.fechaStart) {
      fechas.push(`\u{1F6EB} ${this.formatearFechaConContexto(tarea.fechaStart, "start")}`);
    }
    if (fechas.length > 0) {
      contenido += `    - Fechas:
        ${fechas.join("\n        ")}
`;
    }
    if (tarea.horaInicio || tarea.horaFin) {
      contenido += `    - \u23F0 Horario: ${tarea.horaInicio || "--:--"} - ${tarea.horaFin || "--:--"}
`;
    }
    if (((_a = tarea.etiquetas.contextos) == null ? void 0 : _a.length) > 0) {
      contenido += `    - \u{1F5C2}\uFE0F Contextos: ${tarea.etiquetas.contextos.join(" | ")}
`;
    }
    if (((_b = tarea.etiquetas.personas) == null ? void 0 : _b.length) > 0) {
      contenido += `    - \u{1F464} : ${tarea.etiquetas.personas.join(" | ")}
`;
    }
    if (((_c = tarea.etiquetas.todoist) == null ? void 0 : _c.length) > 0) {
      contenido += `    - \u{1F4F2} : ${tarea.etiquetas.todoist.join(" ")}
`;
    }
    if (((_d = tarea.etiquetas.otras) == null ? void 0 : _d.length) > 0) {
      contenido += `    - \u{1F3F7}\uFE0F Otras: ${tarea.etiquetas.otras.join(" ")}
`;
    }
    const prioridad = this.obtenerPrioridadTarea(tarea.texto);
    if (prioridad) {
      contenido += `    - ${prioridad.emoji} Prioridad: ${prioridad.nombre}
`;
    }
    return contenido;
  }
  obtenerPrioridadTarea(texto) {
    if (texto.includes("\u{1F53A}"))
      return { emoji: "\u{1F53A}", nombre: "Muy Alta" };
    if (texto.includes("\u23EB"))
      return { emoji: "\u23EB", nombre: "Alta" };
    if (texto.includes("\u{1F53C}"))
      return { emoji: "\u{1F53C}", nombre: "Media" };
    if (texto.includes("\u{1F53D}"))
      return { emoji: "\u{1F53D}", nombre: "Baja" };
    if (texto.includes("\u23EC"))
      return { emoji: "\u23EC", nombre: "Muy Baja" };
    return null;
  }
  agruparTareasPorArchivo(tareas) {
    return tareas.reduce((acc, tarea) => {
      if (!acc[tarea.rutaArchivo]) {
        acc[tarea.rutaArchivo] = {
          titulo: tarea.titulo,
          tareas: []
        };
      }
      acc[tarea.rutaArchivo].tareas.push(tarea);
      return acc;
    }, {});
  }
  formatearFechaConContexto(fecha, tipo) {
    try {
      const fechaObj = this.taskUtils.parsearFechaVencimiento(fecha);
      if (!fechaObj)
        return fecha;
      const hoy = this.taskUtils.obtenerFechaLocal();
      const diferenciaDias = Math.ceil(
        (fechaObj.getTime() - hoy.getTime()) / (1e3 * 60 * 60 * 24)
      );
      let textoBase = "";
      switch (tipo) {
        case "due":
          textoBase = diferenciaDias < 0 ? "Venci\xF3" : "Vence";
          break;
        case "scheduled":
          textoBase = "Programada";
          break;
        case "start":
          textoBase = diferenciaDias < 0 ? "Debi\xF3 iniciar" : "Inicia";
          break;
      }
      let contexto = "";
      if (diferenciaDias === 0) {
        contexto = "hoy";
      } else if (diferenciaDias === 1) {
        contexto = "ma\xF1ana";
      } else if (diferenciaDias === -1) {
        contexto = "ayer";
      } else if (diferenciaDias < 0) {
        contexto = `hace ${Math.abs(diferenciaDias)} d\xEDas`;
      } else {
        contexto = `en ${diferenciaDias} d\xEDas`;
      }
      return `${textoBase} ${fecha} (${contexto})`;
    } catch (error) {
      console.error("Error formateando fecha:", error);
      return fecha;
    }
  }
  // Añadir nuevo método para obtener tareas futuras
  async getTareasFuturas(diasFuturos = 7) {
    const hoy = this.taskUtils.obtenerFechaLocal();
    const limiteFuturo = new Date(hoy);
    limiteFuturo.setDate(limiteFuturo.getDate() + diasFuturos);
    return await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      (tarea) => {
        const fechasRelevantes = [
          tarea.fechaVencimiento,
          tarea.fechaScheduled,
          tarea.fechaStart
        ].filter(Boolean);
        return fechasRelevantes.some((fecha) => {
          const fechaObj = this.taskUtils.parsearFechaVencimiento(fecha);
          return fechaObj && fechaObj > hoy && fechaObj <= limiteFuturo;
        });
      }
    );
  }
  // Añadir método para mostrar tareas futuras
  async mostrarTareasFuturas(diasFuturos = 7) {
    try {
      const tareas = await this.getTareasFuturas(diasFuturos);
      if (tareas.length === 0) {
        new import_obsidian67.Notice(`No hay tareas programadas para los pr\xF3ximos ${diasFuturos} d\xEDas.`);
        return;
      }
      const contenido = this.generarVistaCompleta(
        tareas,
        `Tareas Programadas (Pr\xF3ximos ${diasFuturos} d\xEDas)`,
        "mostrarTareasFuturas",
        diasFuturos
      );
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas Programadas.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${tareas.length} tareas programadas para los pr\xF3ximos ${diasFuturos} d\xEDas`);
    } catch (error) {
      console.error("Error en mostrarTareasFuturas:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  // Añadir nuevo método para obtener tareas en ejecución
  async getTareasEnEjecucion() {
    return await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      (tarea) => {
        const taskLine = tarea.texto.trim();
        return taskLine.startsWith("- [/]");
      },
      true
      // nuevo parámetro para indicar que buscamos tareas en ejecución
    );
  }
  // Añadir método para mostrar tareas en ejecución
  async mostrarTareasEnEjecucion() {
    try {
      const tareas = await this.procesarTareas(
        this.plugin.app.vault.getMarkdownFiles(),
        (tarea) => true,
        // No aplicamos filtro adicional porque ya filtramos por estado en procesarTareas
        true
        // Indicar que buscamos tareas en ejecución
      );
      if (tareas.length === 0) {
        new import_obsidian67.Notice("No se encontraron tareas en ejecuci\xF3n");
        return;
      }
      const contenido = this.generarVistaEnEjecucion(tareas);
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas en Ejecuci\xF3n.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${tareas.length} tareas en ejecuci\xF3n`);
    } catch (error) {
      console.error("Error en mostrarTareasEnEjecucion:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  generarVistaEnEjecucion(tareas) {
    const hoy = this.taskUtils.obtenerFechaLocal();
    let contenido = `# Tareas en Ejecuci\xF3n

`;
    contenido += this.generarBotonActualizacion("mostrarTareasEnEjecucion");
    contenido += `> [!info] Actualizado: ${hoy.toLocaleDateString()} ${(/* @__PURE__ */ new Date()).toLocaleTimeString()}
`;
    contenido += `> Total de tareas en ejecuci\xF3n: ${tareas.length}

`;
    const tareasConVencimiento = tareas.filter((t) => t.fechaVencimiento);
    const tareasProgramadas = tareas.filter((t) => !t.fechaVencimiento && t.fechaScheduled);
    const tareasConInicio = tareas.filter((t) => !t.fechaVencimiento && !t.fechaScheduled && t.fechaStart);
    const tareasSinFecha = tareas.filter((t) => !t.fechaVencimiento && !t.fechaScheduled && !t.fechaStart);
    if (tareasConVencimiento.length > 0) {
      contenido += `## Con fecha de vencimiento (${tareasConVencimiento.length})

`;
      contenido += this.renderizarGrupoTareasEnEjecucion(tareasConVencimiento);
    }
    if (tareasProgramadas.length > 0) {
      contenido += `## Programadas (${tareasProgramadas.length})

`;
      contenido += this.renderizarGrupoTareasEnEjecucion(tareasProgramadas);
    }
    if (tareasConInicio.length > 0) {
      contenido += `## Con fecha de inicio (${tareasConInicio.length})

`;
      contenido += this.renderizarGrupoTareasEnEjecucion(tareasConInicio);
    }
    if (tareasSinFecha.length > 0) {
      contenido += `## Sin fecha asignada (${tareasSinFecha.length})

`;
      contenido += this.renderizarGrupoTareasEnEjecucion(tareasSinFecha);
      return contenido;
    }
  }
  // Añadir método específico para renderizar grupos de tareas en ejecución
  renderizarGrupoTareasEnEjecucion(tareas) {
    const tareasPorArchivo = this.agruparTareasPorArchivo(tareas);
    let contenido = "";
    for (const [rutaArchivo, info] of Object.entries(tareasPorArchivo)) {
      contenido += `### [[${rutaArchivo}|${info.titulo}]]

`;
      info.tareas.forEach((tarea) => {
        contenido += this.renderizarTareaEnEjecucion(tarea);
      });
      contenido += "\n";
    }
    return contenido;
  }
  renderizarGrupoTareas(tareas) {
    const tareasPorArchivo = this.agruparTareasPorArchivo(tareas);
    let contenido = "";
    for (const [rutaArchivo, info] of Object.entries(tareasPorArchivo)) {
      contenido += `### [[${rutaArchivo}|${info.titulo}]]

`;
      info.tareas.forEach((tarea) => {
        contenido += this.renderizarTareaEnEjecucion(tarea);
      });
      contenido += "\n";
    }
    return contenido;
  }
  renderizarTareaEnEjecucion(tarea) {
    var _a, _b, _c, _d;
    let contenido = `${tarea.texto}
`;
    if (tarea.fechaVencimiento || tarea.fechaScheduled || tarea.fechaStart) {
      contenido += `    - Fechas:
`;
      if (tarea.fechaVencimiento) {
        contenido += `        - \u{1F4C5} : ${this.formatearFechaConContexto(tarea.fechaVencimiento, "due")}
`;
      }
      if (tarea.fechaScheduled) {
        contenido += `        - \u23F3 : ${this.formatearFechaConContexto(tarea.fechaScheduled, "scheduled")}
`;
      }
      if (tarea.fechaStart) {
        contenido += `        - \u{1F6EB}: ${this.formatearFechaConContexto(tarea.fechaStart, "start")}
`;
      }
    }
    if (tarea.horaInicio || tarea.horaFin) {
      contenido += `    - \u23F0 Horario: ${tarea.horaInicio || "--:--"} - ${tarea.horaFin || "--:--"}
`;
    }
    if (((_a = tarea.etiquetas.contextos) == null ? void 0 : _a.length) > 0) {
      contenido += `    - \u{1F5C2}\uFE0F Contextos: ${tarea.etiquetas.contextos.join(" | ")}
`;
    }
    if (((_b = tarea.etiquetas.personas) == null ? void 0 : _b.length) > 0) {
      contenido += `    - \u{1F464} Personas: ${tarea.etiquetas.personas.join(" | ")}
`;
    }
    if (((_c = tarea.etiquetas.todoist) == null ? void 0 : _c.length) > 0) {
      contenido += `    - \u{1F4F2} Todoist: ${tarea.etiquetas.todoist.join(" ")}
`;
    }
    if (((_d = tarea.etiquetas.otras) == null ? void 0 : _d.length) > 0) {
      contenido += `    - \u{1F3F7}\uFE0F Otras: ${tarea.etiquetas.otras.join(" ")}
`;
    }
    const prioridad = this.obtenerPrioridadTarea(tarea.texto);
    if (prioridad) {
      contenido += `    - ${prioridad.emoji} Prioridad: ${prioridad.nombre}
`;
    }
    return contenido;
  }
  organizarTareasEnEjecucion(tareas) {
    return tareas.sort((a, b) => {
      var _a, _b;
      const fechaA = a.fechaVencimiento || a.fechaScheduled || a.fechaStart;
      const fechaB = b.fechaVencimiento || b.fechaScheduled || b.fechaStart;
      if (fechaA && fechaB) {
        const fechaObjA = this.taskUtils.parsearFechaVencimiento(fechaA);
        const fechaObjB = this.taskUtils.parsearFechaVencimiento(fechaB);
        if (fechaObjA && fechaObjB) {
          return fechaObjA.getTime() - fechaObjB.getTime();
        }
      }
      if (fechaA)
        return -1;
      if (fechaB)
        return 1;
      return (((_a = b.weight) == null ? void 0 : _a.totalWeight) || 0) - (((_b = a.weight) == null ? void 0 : _b.totalWeight) || 0);
    });
  }
  // Nuevo método para obtener tareas scheduled vencidas
  async getTareasScheduledVencidas() {
    const hoy = this.taskUtils.obtenerFechaLocal();
    return await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      (tarea) => {
        if (!tarea.fechaScheduled)
          return false;
        const fechaScheduled = this.taskUtils.parsearFechaVencimiento(tarea.fechaScheduled);
        return fechaScheduled !== null && fechaScheduled < hoy;
      }
    );
  }
  // Nuevo método para obtener tareas scheduled próximas
  async getTareasScheduledProximas(diasProximos = 7) {
    const hoy = this.taskUtils.obtenerFechaLocal();
    const limiteFuturo = new Date(hoy);
    limiteFuturo.setDate(limiteFuturo.getDate() + diasProximos);
    return await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      (tarea) => {
        if (!tarea.fechaScheduled)
          return false;
        const fechaScheduled = this.taskUtils.parsearFechaVencimiento(tarea.fechaScheduled);
        return fechaScheduled !== null && fechaScheduled >= hoy && fechaScheduled <= limiteFuturo;
      }
    );
  }
  // Método para mostrar tareas scheduled vencidas
  async mostrarTareasScheduledVencidas() {
    try {
      const tareas = await this.getTareasScheduledVencidas();
      if (tareas.length === 0) {
        new import_obsidian67.Notice("No hay tareas scheduled vencidas.");
        return;
      }
      const contenido = this.generarVistaCompleta(
        tareas,
        "Tareas Scheduled Vencidas",
        "mostrarTareasScheduledVencidas"
      );
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas Scheduled Vencidas.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${tareas.length} tareas scheduled vencidas`);
    } catch (error) {
      console.error("Error en mostrarTareasScheduledVencidas:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  // Método para mostrar tareas scheduled próximas
  async mostrarTareasScheduledProximas(diasProximos = 7) {
    try {
      const tareas = await this.getTareasScheduledProximas(diasProximos);
      if (tareas.length === 0) {
        new import_obsidian67.Notice("No hay tareas scheduled pr\xF3ximas.");
        return;
      }
      const contenido = this.generarVistaCompleta(
        tareas,
        `Tareas Scheduled Pr\xF3ximas (${diasProximos} d\xEDas)`,
        "mostrarTareasScheduledProximas",
        diasProximos
      );
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas Scheduled Pr\xF3ximas.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${tareas.length} tareas scheduled pr\xF3ximas`);
    } catch (error) {
      console.error("Error en mostrarTareasScheduledProximas:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  // Método auxiliar para la visualización de fechas scheduled
  formatearFechaScheduled(fecha) {
    const fechaObj = this.taskUtils.parsearFechaVencimiento(fecha);
    if (!fechaObj)
      return fecha;
    const hoy = this.taskUtils.obtenerFechaLocal();
    const diferenciaDias = Math.ceil(
      (fechaObj.getTime() - hoy.getTime()) / (1e3 * 60 * 60 * 24)
    );
    let contexto = "";
    if (diferenciaDias < 0) {
      contexto = `(retrasada ${Math.abs(diferenciaDias)} d\xEDas)`;
    } else if (diferenciaDias === 0) {
      contexto = "(hoy)";
    } else if (diferenciaDias === 1) {
      contexto = "(ma\xF1ana)";
    } else {
      contexto = `(en ${diferenciaDias} d\xEDas)`;
    }
    return `${fecha} ${contexto}`;
  }
  // Método para obtener todas las tareas vencidas
  async getTodasTareasVencidas() {
    const hoy = this.taskUtils.obtenerFechaLocal();
    return await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      (tarea) => {
        let estaVencida = false;
        if (tarea.fechaVencimiento) {
          const fechaVenc = this.taskUtils.parsearFechaVencimiento(tarea.fechaVencimiento);
          if (fechaVenc && fechaVenc < hoy) {
            tarea.tipoVencimiento = ["due"];
            estaVencida = true;
          }
        }
        if (tarea.fechaScheduled) {
          const fechaSched = this.taskUtils.parsearFechaVencimiento(tarea.fechaScheduled);
          if (fechaSched && fechaSched < hoy) {
            tarea.tipoVencimiento = tarea.tipoVencimiento || [];
            tarea.tipoVencimiento.push("scheduled");
            estaVencida = true;
          }
        }
        if (tarea.fechaStart) {
          const fechaStart = this.taskUtils.parsearFechaVencimiento(tarea.fechaStart);
          if (fechaStart && fechaStart < hoy) {
            tarea.tipoVencimiento = tarea.tipoVencimiento || [];
            tarea.tipoVencimiento.push("start");
            estaVencida = true;
          }
        }
        return estaVencida;
      }
    );
  }
  // Método para mostrar todas las tareas vencidas
  async mostrarTodasTareasVencidas() {
    try {
      const tareas = await this.getTodasTareasVencidas();
      if (tareas.length === 0) {
        new import_obsidian67.Notice("No hay tareas vencidas.");
        return;
      }
      const contenido = this.generarVistaTodasVencidas(tareas);
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Todas las Tareas Vencidas.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${tareas.length} tareas vencidas`);
    } catch (error) {
      console.error("Error en mostrarTodasTareasVencidas:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  // Método específico para generar la vista de todas las tareas vencidas
  generarVistaTodasVencidas(tareas) {
    const hoy = this.taskUtils.obtenerFechaLocal();
    let contenido = `# Todas las Tareas Vencidas

`;
    contenido += this.generarBotonActualizacion("mostrarTodasTareasVencidas");
    contenido += `> [!info] Actualizado: ${hoy.toLocaleDateString()} ${(/* @__PURE__ */ new Date()).toLocaleTimeString()}
`;
    contenido += `> Total de tareas vencidas: ${tareas.length}

`;
    const tareasVencDue = tareas.filter((t) => {
      var _a;
      return (_a = t.tipoVencimiento) == null ? void 0 : _a.includes("due");
    });
    const tareasVencScheduled = tareas.filter((t) => {
      var _a;
      return (_a = t.tipoVencimiento) == null ? void 0 : _a.includes("scheduled");
    });
    const tareasVencStart = tareas.filter((t) => {
      var _a;
      return (_a = t.tipoVencimiento) == null ? void 0 : _a.includes("start");
    });
    if (tareasVencDue.length > 0) {
      contenido += `## Tareas con Fecha de Vencimiento Pasada (${tareasVencDue.length})

`;
      contenido += this.renderizarGrupoTareasVencidas(tareasVencDue, "due");
    }
    if (tareasVencScheduled.length > 0) {
      contenido += `## Tareas Scheduled Retrasadas (${tareasVencScheduled.length})

`;
      contenido += this.renderizarGrupoTareasVencidas(tareasVencScheduled, "scheduled");
    }
    if (tareasVencStart.length > 0) {
      contenido += `## Tareas con Inicio Retrasado (${tareasVencStart.length})

`;
      contenido += this.renderizarGrupoTareasVencidas(tareasVencStart, "start");
    }
    return contenido;
  }
  // Método auxiliar para renderizar grupos de tareas vencidas
  renderizarGrupoTareasVencidas(tareas, tipo) {
    const tareasPorArchivo = this.agruparTareasPorArchivo(tareas);
    let contenido = "";
    for (const [rutaArchivo, info] of Object.entries(tareasPorArchivo)) {
      contenido += `### [[${rutaArchivo}|${info.titulo}]]

`;
      info.tareas.forEach((tarea) => {
        contenido += this.renderizarTareaVencida(tarea, tipo);
      });
      contenido += "\n";
    }
    return contenido;
  }
  // Método auxiliar para renderizar una tarea vencida
  renderizarTareaVencida(tarea, tipo) {
    var _a, _b, _c, _d;
    let contenido = `- [ ] ${tarea.texto}
`;
    switch (tipo) {
      case "due":
        contenido += `    - \u{1F4C5} ${this.formatearFechaConContexto(tarea.fechaVencimiento, "due")}
`;
        if (tarea.fechaScheduled) {
          contenido += `    - \u23F3 ${this.formatearFechaConContexto(tarea.fechaScheduled, "scheduled")}
`;
        }
        if (tarea.fechaStart) {
          contenido += `    - \u{1F6EB} ${this.formatearFechaConContexto(tarea.fechaStart, "start")}
`;
        }
        break;
      case "scheduled":
        contenido += `    - \u23F3 ${this.formatearFechaConContexto(tarea.fechaScheduled, "scheduled")}
`;
        if (tarea.fechaVencimiento) {
          contenido += `    - \u{1F4C5} ${this.formatearFechaConContexto(tarea.fechaVencimiento, "due")}
`;
        }
        if (tarea.fechaStart) {
          contenido += `    - \u{1F6EB} ${this.formatearFechaConContexto(tarea.fechaStart, "start")}
`;
        }
        break;
      case "start":
        contenido += `    - \u{1F6EB} ${this.formatearFechaConContexto(tarea.fechaStart, "start")}
`;
        if (tarea.fechaVencimiento) {
          contenido += `    - \u{1F4C5} ${this.formatearFechaConContexto(tarea.fechaVencimiento, "due")}
`;
        }
        if (tarea.fechaScheduled) {
          contenido += `    - \u23F3 ${this.formatearFechaConContexto(tarea.fechaScheduled, "scheduled")}
`;
        }
        break;
    }
    if (tarea.horaInicio || tarea.horaFin) {
      contenido += `    - \u23F0 Horario: ${tarea.horaInicio || "--:--"} - ${tarea.horaFin || "--:--"}
`;
    }
    if (((_a = tarea.etiquetas.contextos) == null ? void 0 : _a.length) > 0) {
      contenido += `    - \u{1F5C2}\uFE0F Contextos: ${tarea.etiquetas.contextos.join(" | ")}
`;
    }
    if (((_b = tarea.etiquetas.personas) == null ? void 0 : _b.length) > 0) {
      contenido += `    - \u{1F464}: ${tarea.etiquetas.personas.join(" | ")}
`;
    }
    if (((_c = tarea.etiquetas.todoist) == null ? void 0 : _c.length) > 0) {
      contenido += `    - \u{1F4F2}: ${tarea.etiquetas.todoist.join(" ")}
`;
    }
    if (((_d = tarea.etiquetas.otras) == null ? void 0 : _d.length) > 0) {
      contenido += `    - \u{1F3F7}\uFE0F Otras: ${tarea.etiquetas.otras.join(" ")}
`;
    }
    return contenido;
  }
  // Método principal para obtener tareas con dependencias
  async getTareasDependientes() {
    console.log("=== Iniciando b\xFAsqueda de tareas con dependencias ===");
    const tareas = await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      async (tarea) => {
        console.log("\nAnalizando tarea:", tarea.texto);
        console.log("DependencyId:", tarea.dependencyId);
        if (!tarea.dependencyId) {
          console.log("-> Ignorada: No tiene dependencia");
          return false;
        }
        const resultado = await this.taskUtils.verificarEstadoTarea(tarea.dependencyId);
        console.log(`-> Dependencia ${tarea.dependencyId} completada:`, resultado.completada);
        tarea.isBlocked = !resultado.completada;
        tarea.dependencyLocation = resultado.rutaArchivo;
        tarea.dependencyTitle = resultado.tituloArchivo;
        return true;
      }
    );
    return {
      ejecutables: tareas.filter((t) => !t.isBlocked),
      bloqueadas: tareas.filter((t) => t.isBlocked)
    };
  }
  // Método para mostrar las tareas dependientes
  async mostrarTareasDependientes() {
    try {
      const { ejecutables, bloqueadas } = await this.getTareasDependientes();
      if (ejecutables.length === 0 && bloqueadas.length === 0) {
        new import_obsidian67.Notice("No se encontraron tareas con dependencias.");
        return;
      }
      const contenido = this.generarVistaDependencias(ejecutables, bloqueadas);
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas con Dependencias.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${ejecutables.length + bloqueadas.length} tareas con dependencias`);
    } catch (error) {
      console.error("Error en mostrarTareasDependientes:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  // Método para generar la vista de dependencias
  generarVistaDependencias(ejecutables, bloqueadas) {
    const hoy = this.taskUtils.obtenerFechaLocal();
    let contenido = `# Tareas con Dependencias

`;
    contenido += this.generarBotonActualizacion("mostrarTareasDependientes");
    contenido += `> [!info] Actualizado: ${hoy.toLocaleDateString()} ${(/* @__PURE__ */ new Date()).toLocaleTimeString()}
`;
    contenido += `> Total de tareas con dependencias: ${ejecutables.length + bloqueadas.length}

`;
    if (ejecutables.length > 0) {
      contenido += `## Tareas Ejecutables (${ejecutables.length})
`;
      contenido += `> [!success] Estas tareas ya pueden ser ejecutadas porque sus dependencias est\xE1n completadas

`;
      contenido += this.renderizarGrupoDependencias(ejecutables, true);
    }
    if (bloqueadas.length > 0) {
      contenido += `
## Tareas Bloqueadas (${bloqueadas.length})
`;
      contenido += `> [!warning] Estas tareas est\xE1n esperando que se completen otras tareas

`;
      contenido += this.renderizarGrupoDependencias(bloqueadas, false);
    }
    return contenido;
  }
  // Método para renderizar grupos de tareas con dependencias
  renderizarGrupoDependencias(tareas, ejecutables) {
    const tareasPorArchivo = this.agruparTareasPorArchivo(tareas);
    let contenido = "";
    for (const [rutaArchivo, info] of Object.entries(tareasPorArchivo)) {
      contenido += `### [[${rutaArchivo}|${info.titulo}]]

`;
      info.tareas.forEach((tarea) => {
        contenido += this.renderizarTareaConDependencia(tarea, ejecutables);
      });
      contenido += "\n";
    }
    return contenido;
  }
  // Método para renderizar una tarea individual con dependencia
  renderizarTareaConDependencia(tarea, esEjecutable) {
    var _a, _b;
    console.log("\nRenderizando tarea:", tarea.texto);
    console.log("Es ejecutable:", esEjecutable);
    let contenido = `- [ ] ${tarea.texto}
`;
    if (tarea.taskId) {
      contenido += `    \u{1F194} ${tarea.taskId}
`;
    }
    if (tarea.dependencyId) {
      contenido += `    \u21B3 Depende de: ${tarea.dependencyTitle ? `[[${tarea.dependencyLocation}|${tarea.dependencyTitle}]]` : "No encontrada"}`;
      if (tarea.dependencyTexto) {
        contenido += `: "${tarea.dependencyTexto}"`;
      }
      contenido += esEjecutable ? " \u2705" : " \u23F3";
      contenido += "\n";
    }
    if (tarea.fechaVencimiento) {
      contenido += `    \u{1F4C5} ${this.formatearFechaConContexto(tarea.fechaVencimiento, "due")}
`;
    }
    if (tarea.fechaScheduled) {
      contenido += `    \u23F3 ${this.formatearFechaConContexto(tarea.fechaScheduled, "scheduled")}
`;
    }
    if (tarea.fechaStart) {
      contenido += `    \u{1F6EB} ${this.formatearFechaConContexto(tarea.fechaStart, "start")}
`;
    }
    if (((_a = tarea.etiquetas.contextos) == null ? void 0 : _a.length) > 0) {
      contenido += `    \u{1F5C2}\uFE0F ${tarea.etiquetas.contextos.join(" | ")}
`;
    }
    if (((_b = tarea.etiquetas.personas) == null ? void 0 : _b.length) > 0) {
      contenido += `    \u{1F464} ${tarea.etiquetas.personas.join(" | ")}
`;
    }
    return contenido;
  }
  async mostrarTareasPersonas() {
    try {
      const { personasConTareas, totalPersonas, totalTareas } = await this.getTareasPersonas();
      if (totalPersonas === 0) {
        new import_obsidian67.Notice("No se encontraron tareas asignadas a personas.");
        return;
      }
      const contenido = this.generarVistaPersonas(personasConTareas, totalPersonas, totalTareas);
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas por Persona.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${totalTareas} tareas asignadas a ${totalPersonas} personas`);
    } catch (error) {
      console.error("Error en mostrarTareasPersonas:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  generarVistaPersonas(personasConTareas, totalPersonas, totalTareas) {
    const hoy = this.taskUtils.obtenerFechaLocal();
    let contenido = `# Tareas Asignadas por Persona

`;
    contenido += this.generarBotonActualizacion("mostrarTareasPersonas");
    contenido += `> [!info] Actualizado: ${hoy.toLocaleDateString()} ${(/* @__PURE__ */ new Date()).toLocaleTimeString()}
`;
    contenido += `> Total de personas con tareas: ${totalPersonas}
`;
    contenido += `> Total de tareas asignadas: ${totalTareas}

`;
    contenido += `## Resumen de Asignaciones
`;
    Array.from(personasConTareas.entries()).sort(([, tareasA], [, tareasB]) => tareasB.length - tareasA.length).forEach(([persona, tareas]) => {
      const nombreFormateado = this.formatearNombrePersona(persona);
      contenido += `- [[#${nombreFormateado}|${nombreFormateado}]] (${tareas.length} tareas)
`;
    });
    contenido += "\n";
    contenido += `## Tareas por Persona

`;
    Array.from(personasConTareas.entries()).sort(([, tareasA], [, tareasB]) => tareasB.length - tareasA.length).forEach(([persona, tareas]) => {
      contenido += `### ${this.formatearNombrePersona(persona)}
[[#Resumen de Asignaciones|\u2B06\uFE0F]]
`;
      const tareasOrdenadas = TaskWeightCalculator.sortTasks(tareas);
      tareasOrdenadas.forEach((tarea) => {
        contenido += this.renderizarTareaPersona(tarea);
      });
      contenido += "\n";
    });
    return contenido;
  }
  renderizarTareaPersona(tarea) {
    var _a, _b;
    let contenido = `- [ ] ${tarea.texto}
`;
    contenido += `    \u{1F4CD} [[${tarea.rutaArchivo}|${tarea.titulo}]]`;
    if ((_a = tarea.lineInfo) == null ? void 0 : _a.numero) {
      contenido += ` (l\xEDnea ${tarea.lineInfo.numero})`;
    }
    contenido += "\n";
    const fechas = [];
    if (tarea.fechaVencimiento) {
      fechas.push(`\u{1F4C5} ${this.formatearFechaConContexto(tarea.fechaVencimiento, "due")}`);
    }
    if (tarea.fechaScheduled) {
      fechas.push(`\u23F3 ${this.formatearFechaConContexto(tarea.fechaScheduled, "scheduled")}`);
    }
    if (tarea.fechaStart) {
      fechas.push(`\u{1F6EB} ${this.formatearFechaConContexto(tarea.fechaStart, "start")}`);
    }
    if (fechas.length > 0) {
      contenido += `    \u23F0 Fechas:
        ${fechas.join("\n        ")}
`;
    }
    if (tarea.horaInicio || tarea.horaFin) {
      contenido += `    \u231A Horario: ${tarea.horaInicio || "--:--"} - ${tarea.horaFin || "--:--"}
`;
    }
    if (((_b = tarea.etiquetas.contextos) == null ? void 0 : _b.length) > 0) {
      contenido += `    \u{1F5C2}\uFE0F Contextos: ${tarea.etiquetas.contextos.join(" | ")}
`;
    }
    if (tarea.weight) {
      const prioridad = this.obtenerPrioridadTarea(tarea.texto);
      if (prioridad) {
        contenido += `    ${prioridad.emoji} Prioridad: ${prioridad.nombre}
`;
      }
    }
    return contenido;
  }
  formatearNombrePersona(tag) {
    return tag.replace("#px-", "").replace(/_/g, " ").split(" ").map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(" ");
  }
  normalizarContexto(contexto) {
    return contexto.replace(/[/-]/g, " \u2192 ").trim();
  }
  async mostrarTareasContextos() {
    try {
      const { contextosConTareas, totalContextos, totalTareas } = await this.getTareasContextos();
      if (totalContextos === 0) {
        new import_obsidian67.Notice("No se encontraron tareas con contextos asignados.");
        return;
      }
      const contenido = this.generarVistaContextos(contextosConTareas, totalContextos, totalTareas);
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas por Contexto.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${totalTareas} tareas en ${totalContextos} contextos`);
    } catch (error) {
      console.error("Error en mostrarTareasContextos:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  generarVistaContextos(contextosConTareas, totalContextos, totalTareas) {
    const hoy = this.taskUtils.obtenerFechaLocal();
    let contenido = `# Tareas por Contexto

`;
    contenido += this.generarBotonActualizacion("mostrarTareasContextos");
    contenido += `> [!info] Actualizado: ${hoy.toLocaleDateString()} ${(/* @__PURE__ */ new Date()).toLocaleTimeString()}
`;
    contenido += `> Total de contextos con tareas: ${totalContextos}
`;
    contenido += `> Total de tareas encontradas: ${totalTareas}

`;
    const arbolContextos = this.construirArbolContextos(contextosConTareas);
    contenido += `## Resumen de Contextos
`;
    this.generarResumenContextos(arbolContextos, 0).forEach((linea) => {
      contenido += linea + "\n";
    });
    contenido += "\n";
    contenido += `## Tareas por Contexto

`;
    this.generarDetalleContextos(arbolContextos, contextosConTareas).forEach((bloque) => {
      contenido += bloque;
    });
    return contenido;
  }
  construirArbolContextos(contextosConTareas) {
    const arbol = /* @__PURE__ */ new Map();
    Array.from(contextosConTareas.keys()).forEach((contexto) => {
      const niveles = contexto.split(" \u2192 ");
      let nodoActual = arbol;
      niveles.forEach((nivel, index) => {
        if (!nodoActual.has(nivel)) {
          nodoActual.set(nivel, {
            tareas: index === niveles.length - 1 ? contextosConTareas.get(contexto) : [],
            subcontextos: /* @__PURE__ */ new Map(),
            rutaCompleta: niveles.slice(0, index + 1).join(" \u2192 ")
          });
        }
        nodoActual = nodoActual.get(nivel).subcontextos;
      });
    });
    return arbol;
  }
  generarResumenContextos(arbol, nivel) {
    const lineas = [];
    arbol.forEach((nodo, contexto) => {
      const indentacion = "  ".repeat(nivel);
      const rutaContexto = nodo.rutaCompleta;
      const cantidadTareas = nodo.tareas.length;
      if (cantidadTareas > 0) {
        lineas.push(`${indentacion}- [[#${rutaContexto}|${contexto}]] (${cantidadTareas} tareas)`);
      } else {
        lineas.push(`${indentacion}- ${contexto}`);
      }
      if (nodo.subcontextos.size > 0) {
        lineas.push(...this.generarResumenContextos(nodo.subcontextos, nivel + 1));
      }
    });
    return lineas;
  }
  generarBloqueContexto(contexto, tareas) {
    let bloque = `### ${contexto}
[[#Resumen de Contextos|\u2B06\uFE0F]]
`;
    tareas.forEach((tarea) => {
      bloque += this.renderizarTareaContexto(tarea);
    });
    return bloque + "\n";
  }
  async getTareasPersonas() {
    console.log("\n=== INICIANDO B\xDASQUEDA DE TAREAS ASIGNADAS A PERSONAS ===");
    const personasConTareas = /* @__PURE__ */ new Map();
    const lineasPorArchivo = /* @__PURE__ */ new Map();
    const tareas = await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      async (tarea) => {
        if (!tarea.etiquetas.personas || tarea.etiquetas.personas.length === 0) {
          return false;
        }
        if (!lineasPorArchivo.has(tarea.rutaArchivo)) {
          lineasPorArchivo.set(
            tarea.rutaArchivo,
            await this.taskUtils.encontrarLineasTarea(
              this.plugin.app.vault.getAbstractFileByPath(tarea.rutaArchivo)
            )
          );
        }
        const lineasArchivo = lineasPorArchivo.get(tarea.rutaArchivo);
        if (lineasArchivo) {
          const lineInfo = lineasArchivo.get(tarea.texto);
          if (lineInfo) {
            tarea.lineInfo = lineInfo;
          }
        }
        tarea.etiquetas.personas.forEach((tag) => {
          const personaTag = `#px-${tag}`;
          if (!personasConTareas.has(personaTag)) {
            personasConTareas.set(personaTag, []);
          }
          personasConTareas.get(personaTag).push(tarea);
        });
        return true;
      }
    );
    personasConTareas.forEach((tareas2, persona) => {
      const tareasOrdenadas = TaskWeightCalculator.sortTasks(tareas2);
      personasConTareas.set(persona, tareasOrdenadas);
    });
    return {
      personasConTareas,
      totalPersonas: personasConTareas.size,
      totalTareas: Array.from(personasConTareas.values()).reduce((sum, tareas2) => sum + tareas2.length, 0)
    };
  }
  async getTareasContextos() {
    console.log("\n=== INICIANDO B\xDASQUEDA DE TAREAS POR CONTEXTO ===");
    const contextosConTareas = /* @__PURE__ */ new Map();
    const lineasPorArchivo = /* @__PURE__ */ new Map();
    const tareas = await this.procesarTareas(
      this.plugin.app.vault.getMarkdownFiles(),
      async (tarea) => {
        console.log("\nAnalizando tarea:", tarea.texto);
        if (!tarea.etiquetas.contextos || tarea.etiquetas.contextos.length === 0) {
          return false;
        }
        if (!lineasPorArchivo.has(tarea.rutaArchivo)) {
          lineasPorArchivo.set(
            tarea.rutaArchivo,
            await this.taskUtils.encontrarLineasTarea(
              this.plugin.app.vault.getAbstractFileByPath(tarea.rutaArchivo)
            )
          );
        }
        const lineasArchivo = lineasPorArchivo.get(tarea.rutaArchivo);
        if (lineasArchivo) {
          const lineInfo = lineasArchivo.get(tarea.texto);
          if (lineInfo) {
            tarea.lineInfo = lineInfo;
          }
        }
        tarea.etiquetas.contextos.forEach((contexto) => {
          const contextoNormalizado = this.normalizarContexto(contexto);
          if (!contextosConTareas.has(contextoNormalizado)) {
            contextosConTareas.set(contextoNormalizado, []);
          }
          contextosConTareas.get(contextoNormalizado).push(tarea);
        });
        return true;
      }
    );
    contextosConTareas.forEach((tareas2, contexto) => {
      const tareasOrdenadas = TaskWeightCalculator.sortTasks(tareas2);
      contextosConTareas.set(contexto, tareasOrdenadas);
    });
    return {
      contextosConTareas,
      totalContextos: contextosConTareas.size,
      totalTareas: Array.from(contextosConTareas.values()).reduce((sum, tareas2) => sum + tareas2.length, 0)
    };
  }
  generarDetalleContextos(arbol, contextosConTareas) {
    const bloques = [];
    const procesarNodo = (nodo, rutaActual = []) => {
      nodo.forEach((info, contexto) => {
        const rutaCompleta = info.rutaCompleta;
        if (info.tareas.length > 0) {
          const tareasOrdenadas = TaskWeightCalculator.sortTasks(info.tareas);
          bloques.push(this.generarBloqueContexto(rutaCompleta, tareasOrdenadas));
        }
        if (info.subcontextos.size > 0) {
          procesarNodo(info.subcontextos, [...rutaActual, contexto]);
        }
      });
    };
    procesarNodo(arbol);
    return bloques;
  }
  renderizarTareaContexto(tarea) {
    var _a, _b;
    let contenido = `- [ ] ${tarea.texto}
`;
    contenido += `    \u{1F4CD} [[${tarea.rutaArchivo}|${tarea.titulo}]]`;
    if ((_a = tarea.lineInfo) == null ? void 0 : _a.numero) {
      contenido += ` (l\xEDnea ${tarea.lineInfo.numero})`;
    }
    contenido += "\n";
    const prioridad = this.obtenerPrioridadTarea(tarea.texto);
    if (prioridad) {
      contenido += `    ${prioridad.emoji} Prioridad: ${prioridad.nombre}
`;
    }
    if (tarea.weight) {
      const { baseWeight, timeWeight, priorityWeight } = tarea.weight;
      if (baseWeight + timeWeight + priorityWeight > 0) {
        contenido += `    \u2696\uFE0F Peso total: ${tarea.weight.totalWeight}
`;
      }
    }
    const fechas = [];
    if (tarea.fechaVencimiento) {
      fechas.push(`\u{1F4C5} ${this.formatearFechaConContexto(tarea.fechaVencimiento, "due")}`);
    }
    if (tarea.fechaScheduled) {
      fechas.push(`\u23F3 ${this.formatearFechaConContexto(tarea.fechaScheduled, "scheduled")}`);
    }
    if (tarea.fechaStart) {
      fechas.push(`\u{1F6EB} ${this.formatearFechaConContexto(tarea.fechaStart, "start")}`);
    }
    if (fechas.length > 0) {
      contenido += `    \u23F0 Fechas:
        ${fechas.join("\n        ")}
`;
    }
    if (tarea.horaInicio || tarea.horaFin) {
      contenido += `    \u231A Horario: ${tarea.horaInicio || "--:--"} - ${tarea.horaFin || "--:--"}
`;
    }
    if (((_b = tarea.etiquetas.personas) == null ? void 0 : _b.length) > 0) {
      contenido += `    \u{1F464} Asignado a: ${tarea.etiquetas.personas.map(
        (p) => this.formatearNombrePersona(`#px-${p}`)
      ).join(" | ")}
`;
    }
    if (tarea.dependencyId) {
      contenido += `    \u21B3 Depende de: `;
      if (tarea.dependencyTitle) {
        contenido += `[[${tarea.dependencyLocation}|${tarea.dependencyTitle}]]`;
        if (tarea.dependencyTexto) {
          contenido += `: "${tarea.dependencyTexto}"`;
        }
      }
      contenido += tarea.isBlocked ? " \u23F3" : " \u2705";
      contenido += "\n";
    }
    return contenido;
  }
  // -- Contextos GTD
  // Añadir este método a la clase TareasAPI en src/modules/taskManager/api/tareasAPI.ts
  // Método para verificar si un nodo o sus descendientes tienen tareas
  tieneAlgunaTarea(nodo) {
    for (const [_, info] of nodo.entries()) {
      if (info.tareas.length > 0) {
        return true;
      }
      if (info.subcontextos.size > 0 && this.tieneAlgunaTarea(info.subcontextos)) {
        return true;
      }
    }
    return false;
  }
  // Método para generar el resumen de contextos con indentación
  generarResumenContextosMarkdown(arbol, nivel, resultado) {
    let res = resultado;
    const sortedKeys = Array.from(arbol.keys()).sort((a, b) => {
      const tareasA = arbol.get(a).tareas.length;
      const tareasB = arbol.get(b).tareas.length;
      return tareasB - tareasA;
    });
    for (const contexto of sortedKeys) {
      const info = arbol.get(contexto);
      const cantidadTareas = info.tareas.length;
      const rutaCompleta = info.rutaCompleta;
      const indentacion = "    ".repeat(nivel);
      if (cantidadTareas > 0) {
        const headerId = this.crearHeaderId(rutaCompleta || contexto);
        res += `${indentacion}- [[#${headerId}|${this.formatearNombreContexto(contexto)}]] (${cantidadTareas} tareas)
`;
      } else if (this.tieneAlgunaTarea(info.subcontextos)) {
        res += `${indentacion}- **${this.formatearNombreContexto(contexto)}**
`;
      }
      if (info.subcontextos.size > 0) {
        res = this.generarResumenContextosMarkdown(info.subcontextos, nivel + 1, res);
      }
    }
    return res;
  }
  // Método para formatear el nombre del contexto de manera más legible
  formatearNombreContexto(contexto) {
    if (contexto.includes(" \u2192 ")) {
      return contexto.split(" \u2192 ").pop() || contexto;
    }
    return contexto;
  }
  // ---------- Taeas huerfanas
  // Método para TareasAPI que busca tareas sin contextos, personas, fechas o clasificación GTD
  /**
   * Obtiene todas las tareas que no tienen asignado contexto, persona, fechas o clasificación GTD
   * @returns {Promise<Object>} Objeto con tareas agrupadas por nota y contadores
   */
  async getTareasSinClasificar() {
    try {
      console.log("\n=== INICIANDO B\xDASQUEDA DE TAREAS SIN CLASIFICAR ===");
      const tareasPorNota = /* @__PURE__ */ new Map();
      const lineasPorArchivo = /* @__PURE__ */ new Map();
      const tareas = await this.procesarTareas(
        this.plugin.app.vault.getMarkdownFiles(),
        async (tarea) => {
          const sinContextos = !tarea.etiquetas.contextos || tarea.etiquetas.contextos.length === 0;
          const sinPersonas = !tarea.etiquetas.personas || tarea.etiquetas.personas.length === 0;
          const sinFechas = !tarea.fechaVencimiento && !tarea.fechaStart && !tarea.fechaScheduled;
          const sinGTD = !tarea.etiquetas.todas.some((tag) => tag.startsWith("#GTD-"));
          const noInbox = !tarea.etiquetas.todas.some((tag) => tag.toLowerCase() === "#inbox");
          const sinClasificar = sinContextos && sinPersonas && sinFechas && sinGTD && noInbox;
          if (sinClasificar) {
            if (!lineasPorArchivo.has(tarea.rutaArchivo)) {
              try {
                const archivo = this.plugin.app.vault.getAbstractFileByPath(tarea.rutaArchivo);
                if (archivo) {
                  lineasPorArchivo.set(
                    tarea.rutaArchivo,
                    await this.taskUtils.encontrarLineasTarea(archivo)
                  );
                }
              } catch (error) {
                console.error(`Error al buscar l\xEDneas en ${tarea.rutaArchivo}:`, error);
              }
            }
            const lineasArchivo = lineasPorArchivo.get(tarea.rutaArchivo);
            if (lineasArchivo) {
              const lineInfo = lineasArchivo.get(tarea.texto);
              if (lineInfo) {
                tarea.lineInfo = lineInfo;
              }
            }
            if (!tareasPorNota.has(tarea.rutaArchivo)) {
              tareasPorNota.set(tarea.rutaArchivo, {
                titulo: tarea.titulo,
                ruta: tarea.rutaArchivo,
                tareas: []
              });
            }
            tareasPorNota.get(tarea.rutaArchivo).tareas.push(tarea);
          }
          return sinClasificar;
        }
      );
      const totalTareas = tareas.length;
      const totalNotas = tareasPorNota.size;
      console.log(`=== B\xDASQUEDA COMPLETADA ===`);
      console.log(`Total de tareas sin clasificar: ${totalTareas}`);
      console.log(`Total de notas con tareas sin clasificar: ${totalNotas}`);
      return {
        tareasPorNota,
        totalTareas,
        totalNotas
      };
    } catch (error) {
      console.error("Error en getTareasSinClasificar:", error);
      throw error;
    }
  }
  /**
   * Muestra una vista con todas las tareas sin clasificar agrupadas por nota
   * @returns {Promise<void>}
   */
  async mostrarTareasSinClasificar() {
    try {
      const { tareasPorNota, totalTareas, totalNotas } = await this.getTareasSinClasificar();
      if (totalTareas === 0) {
        new import_obsidian67.Notice("No se encontraron tareas sin clasificar.");
        return;
      }
      const contenido = this.generarVistaTareasSinClasificar(tareasPorNota, totalTareas, totalNotas);
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas Sin Clasificar.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${totalTareas} tareas sin clasificar en ${totalNotas} notas`);
    } catch (error) {
      console.error("Error en mostrarTareasSinClasificar:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  /**
   * Genera el contenido de la vista de tareas sin clasificar
   * @param {Map} tareasPorNota - Mapa con las tareas agrupadas por nota
   * @param {number} totalTareas - Total de tareas sin clasificar
   * @param {number} totalNotas - Total de notas con tareas sin clasificar
   * @returns {string} - Contenido markdown para el archivo
   */
  generarVistaTareasSinClasificar(tareasPorNota, totalTareas, totalNotas) {
    const hoy = this.taskUtils.obtenerFechaLocal();
    let contenido = `# Tareas Sin Clasificar

`;
    contenido += this.generarBotonActualizacion("mostrarTareasSinClasificar");
    contenido += `> [!info] Actualizado: ${hoy.toLocaleDateString()} ${(/* @__PURE__ */ new Date()).toLocaleTimeString()}
`;
    contenido += `> Total de tareas sin clasificar: ${totalTareas}
`;
    contenido += `> Total de notas con tareas sin clasificar: ${totalNotas}

`;
    const notasOrdenadas = Array.from(tareasPorNota.values()).sort((a, b) => b.tareas.length - a.tareas.length);
    for (const notaInfo of notasOrdenadas) {
      contenido += `## [[${notaInfo.ruta}|${notaInfo.titulo}]] (${notaInfo.tareas.length})

`;
      for (const tarea of notaInfo.tareas) {
        contenido += this.renderizarTareaSinClasificar(tarea);
      }
      contenido += "\n";
    }
    return contenido;
  }
  /**
   * Renderiza una tarea sin clasificar en formato markdown
   * @param {Task} tarea - Tarea a renderizar
   * @returns {string} - Representación markdown de la tarea
   */
  renderizarTareaSinClasificar(tarea) {
    var _a;
    let contenido = `- [ ] ${tarea.texto}
`;
    if ((_a = tarea.lineInfo) == null ? void 0 : _a.numero) {
      contenido += `    - \u{1F4CD} L\xEDnea: ${tarea.lineInfo.numero}
`;
    }
    if (tarea.etiquetas.todas.length > 0) {
      contenido += `    - \u{1F3F7}\uFE0F Etiquetas: ${tarea.etiquetas.todas.join(" ")}
`;
    }
    return contenido;
  }
  // -- Tareas Inbox
  // Añadir al archivo src/modules/taskManager/api/tareasAPI.ts
  /**
   * Obtiene todas las tareas que tienen la etiqueta #inbox
   * @returns {Promise<Object>} Objeto con tareas agrupadas por nota y contadores
   */
  async getTareasInbox() {
    try {
      console.log("\n=== INICIANDO B\xDASQUEDA DE TAREAS EN BANDEJA DE ENTRADA (#inbox) ===");
      const tareasPorNota = /* @__PURE__ */ new Map();
      const lineasPorArchivo = /* @__PURE__ */ new Map();
      const tareas = await this.procesarTareas(
        this.plugin.app.vault.getMarkdownFiles(),
        async (tarea) => {
          const tieneInbox = tarea.etiquetas.todas.some((tag) => tag.toLowerCase() === "#inbox");
          if (tieneInbox) {
            if (!lineasPorArchivo.has(tarea.rutaArchivo)) {
              try {
                const archivo = this.plugin.app.vault.getAbstractFileByPath(tarea.rutaArchivo);
                if (archivo) {
                  lineasPorArchivo.set(
                    tarea.rutaArchivo,
                    await this.taskUtils.encontrarLineasTarea(archivo)
                  );
                }
              } catch (error) {
                console.error(`Error al buscar l\xEDneas en ${tarea.rutaArchivo}:`, error);
              }
            }
            const lineasArchivo = lineasPorArchivo.get(tarea.rutaArchivo);
            if (lineasArchivo) {
              const lineInfo = lineasArchivo.get(tarea.texto);
              if (lineInfo) {
                tarea.lineInfo = lineInfo;
              }
            }
            if (!tareasPorNota.has(tarea.rutaArchivo)) {
              tareasPorNota.set(tarea.rutaArchivo, {
                titulo: tarea.titulo,
                ruta: tarea.rutaArchivo,
                tareas: []
              });
            }
            tareasPorNota.get(tarea.rutaArchivo).tareas.push(tarea);
          }
          return tieneInbox;
        }
      );
      const totalTareas = tareas.length;
      const totalNotas = tareasPorNota.size;
      console.log(`=== B\xDASQUEDA COMPLETADA ===`);
      console.log(`Total de tareas en bandeja de entrada (#inbox): ${totalTareas}`);
      console.log(`Total de notas con tareas inbox: ${totalNotas}`);
      return {
        tareasPorNota,
        totalTareas,
        totalNotas
      };
    } catch (error) {
      console.error("Error en getTareasInbox:", error);
      throw error;
    }
  }
  /**
   * Muestra una vista con todas las tareas en bandeja de entrada (#inbox) agrupadas por nota
   * @returns {Promise<void>}
   */
  async mostrarTareasInbox() {
    try {
      const { tareasPorNota, totalTareas, totalNotas } = await this.getTareasInbox();
      if (totalTareas === 0) {
        new import_obsidian67.Notice("No se encontraron tareas en la bandeja de entrada (#inbox).");
        return;
      }
      const contenido = this.generarVistaTareasInbox(tareasPorNota, totalTareas, totalNotas);
      await this.guardarYAbrirArchivo(
        `${this.plugin.settings.folder_SistemaGTD}/Tareas Bandeja de Entrada.md`,
        contenido
      );
      new import_obsidian67.Notice(`Se encontraron ${totalTareas} tareas en bandeja de entrada en ${totalNotas} notas`);
    } catch (error) {
      console.error("Error en mostrarTareasInbox:", error);
      new import_obsidian67.Notice(`Error: ${error.message}`);
    }
  }
  /**
   * Genera el contenido de la vista de tareas en bandeja de entrada
   * @param {Map} tareasPorNota - Mapa con las tareas agrupadas por nota
   * @param {number} totalTareas - Total de tareas en bandeja de entrada
   * @param {number} totalNotas - Total de notas con tareas en bandeja de entrada
   * @returns {string} - Contenido markdown para el archivo
   */
  generarVistaTareasInbox(tareasPorNota, totalTareas, totalNotas) {
    const hoy = this.taskUtils.obtenerFechaLocal();
    let contenido = `# Tareas en Bandeja de Entrada (#inbox)

`;
    contenido += this.generarBotonActualizacion("mostrarTareasInbox");
    contenido += `> [!info] Actualizado: ${hoy.toLocaleDateString()} ${(/* @__PURE__ */ new Date()).toLocaleTimeString()}
`;
    contenido += `> Total de tareas en bandeja de entrada: ${totalTareas}
`;
    contenido += `> Total de notas con tareas inbox: ${totalNotas}

`;
    const notasOrdenadas = Array.from(tareasPorNota.values()).sort((a, b) => b.tareas.length - a.tareas.length);
    for (const notaInfo of notasOrdenadas) {
      contenido += `## [[${notaInfo.ruta}|${notaInfo.titulo}]] (${notaInfo.tareas.length})

`;
      for (const tarea of notaInfo.tareas) {
        contenido += this.renderizarTareaInbox(tarea);
      }
      contenido += "\n";
    }
    return contenido;
  }
  /**
   * Renderiza una tarea de bandeja de entrada en formato markdown
   * @param {Task} tarea - Tarea a renderizar
   * @returns {string} - Representación markdown de la tarea
   */
  renderizarTareaInbox(tarea) {
    var _a, _b, _c;
    let contenido = `- [ ] ${tarea.texto}
`;
    const fechas = [];
    if (tarea.fechaVencimiento) {
      fechas.push(`\u{1F4C5} ${this.formatearFechaConContexto(tarea.fechaVencimiento, "due")}`);
    }
    if (tarea.fechaScheduled) {
      fechas.push(`\u23F3 ${this.formatearFechaConContexto(tarea.fechaScheduled, "scheduled")}`);
    }
    if (tarea.fechaStart) {
      fechas.push(`\u{1F6EB} ${this.formatearFechaConContexto(tarea.fechaStart, "start")}`);
    }
    if (fechas.length > 0) {
      contenido += `    - Fechas:
        ${fechas.join("\n        ")}
`;
    }
    if (tarea.horaInicio || tarea.horaFin) {
      contenido += `    - \u23F0 Horario: ${tarea.horaInicio || "--:--"} - ${tarea.horaFin || "--:--"}
`;
    }
    if ((_a = tarea.lineInfo) == null ? void 0 : _a.numero) {
      contenido += `    - \u{1F4CD} L\xEDnea: ${tarea.lineInfo.numero}
`;
    }
    if (((_b = tarea.etiquetas.contextos) == null ? void 0 : _b.length) > 0) {
      contenido += `    - \u{1F5C2}\uFE0F Contextos: ${tarea.etiquetas.contextos.join(" | ")}
`;
    }
    if (((_c = tarea.etiquetas.personas) == null ? void 0 : _c.length) > 0) {
      contenido += `    - \u{1F464} Personas: ${tarea.etiquetas.personas.join(" | ")}
`;
    }
    const otrasEtiquetas = tarea.etiquetas.otras.filter((tag) => tag.toLowerCase() !== "#inbox");
    if (otrasEtiquetas.length > 0) {
      contenido += `    - \u{1F3F7}\uFE0F Otras etiquetas: ${otrasEtiquetas.join(" ")}
`;
    }
    return contenido;
  }
};

// src/modules/moduloTabTitle/index.ts
var import_obsidian71 = require("obsidian");

// src/modules/moduloTabTitle/commands.ts
var import_obsidian68 = require("obsidian");
function registerCommands4(plugin, settings) {
  plugin.addCommand({
    id: "set-tab-title-alias",
    name: "Mostrar alias en pesta\xF1as",
    callback: () => {
      settings.titleDisplayMode = "alias";
      plugin.saveData(settings);
    }
  });
  plugin.addCommand({
    id: "set-tab-title-title",
    name: "Mostrar t\xEDtulo en pesta\xF1as",
    callback: () => {
      settings.titleDisplayMode = "title";
      plugin.saveData(settings);
    }
  });
  plugin.addCommand({
    id: "set-tab-title-filename",
    name: "Mostrar nombre de archivo en pesta\xF1as",
    callback: () => {
      settings.titleDisplayMode = "filename";
      plugin.saveData(settings);
    }
  });
}

// src/modules/moduloTabTitle/TabTitleManager.ts
var import_obsidian70 = require("obsidian");

// src/modules/moduloTabTitle/views/CustomMarkdownView.ts
var import_obsidian69 = require("obsidian");

// src/modules/moduloTabTitle/utils/logger.ts
var Logger = class {
  static debug(message, ...args) {
    console.debug(`${this.PREFIX} ${message}`, ...args);
  }
  static info(message, ...args) {
    console.info(`${this.PREFIX} ${message}`, ...args);
  }
  static error(message, error) {
    console.error(`${this.PREFIX} ${message}`, error || "");
  }
  static warn(message, ...args) {
    console.warn(`${this.PREFIX} ${message}`, ...args);
  }
};
Logger.PREFIX = "\u{1F3F7}\uFE0F [TabTitle]";

// src/modules/moduloTabTitle/TabTitleManager.ts
var TabTitleManager = class {
  constructor(plugin, settings) {
    this.plugin = plugin;
    this.settings = settings;
    this.customViews = /* @__PURE__ */ new Map();
    Logger.info("TabTitleManager initialized");
  }
  updateAllTabs() {
    const leaves = this.plugin.app.workspace.getLeavesOfType("markdown");
    for (const leaf of leaves) {
      if (leaf.view instanceof import_obsidian70.MarkdownView) {
        this.updateTab(leaf);
      }
    }
  }
  async updateTabForFile(file) {
    var _a;
    const leaves = this.plugin.app.workspace.getLeavesOfType("markdown");
    for (const leaf of leaves) {
      if (leaf.view instanceof import_obsidian70.MarkdownView && ((_a = leaf.view.file) == null ? void 0 : _a.path) === file.path) {
        await this.updateTab(leaf);
      }
    }
  }
  async getPreferredTitleWithSource(file) {
    try {
      const metadata = await this.waitForMetadata(file);
      if (metadata == null ? void 0 : metadata.aliases) {
        if (Array.isArray(metadata.aliases) && metadata.aliases.length >= 3) {
          return {
            displayTitle: `${metadata.aliases[2]} / ${metadata.aliases[0]}`,
            source: "aliases-special"
          };
        } else if (Array.isArray(metadata.aliases) && metadata.aliases.length > 0) {
          return {
            displayTitle: metadata.aliases[0],
            source: "aliases"
          };
        } else if (typeof metadata.aliases === "string") {
          return {
            displayTitle: metadata.aliases,
            source: "aliases"
          };
        }
      }
      if (metadata == null ? void 0 : metadata.titulo) {
        return {
          displayTitle: metadata.titulo,
          source: "titulo"
        };
      }
      return {
        displayTitle: null,
        source: "basename"
      };
    } catch (error) {
      Logger.error(`Error getting title for ${file.path}:`, error);
      return {
        displayTitle: null,
        source: "error"
      };
    }
  }
  async waitForMetadata(file) {
    return new Promise((resolve) => {
      const maxAttempts = 10;
      let attempts = 0;
      const checkMetadata = () => {
        const cache = this.plugin.app.metadataCache.getFileCache(file);
        if ((cache == null ? void 0 : cache.frontmatter) || attempts >= maxAttempts) {
          resolve((cache == null ? void 0 : cache.frontmatter) || {});
        } else {
          attempts++;
          setTimeout(checkMetadata, 100);
        }
      };
      checkMetadata();
    });
  }
  // Método para aplicar scroll horizontal a un elemento de título de pestaña
  applyHorizontalScrollToTab(tabElement) {
    if (tabElement.getAttribute("data-scroll-enabled") === "true")
      return;
    const originalStyles = {
      overflow: tabElement.style.overflow,
      textOverflow: tabElement.style.textOverflow,
      whiteSpace: tabElement.style.whiteSpace,
      maxWidth: tabElement.style.maxWidth,
      transition: tabElement.style.transition
    };
    tabElement.style.overflow = "hidden";
    tabElement.style.textOverflow = "ellipsis";
    tabElement.style.whiteSpace = "nowrap";
    tabElement.style.maxWidth = "150px";
    tabElement.style.transition = "max-width 0.3s ease-in-out";
    const mouseEnterHandler = () => {
      const fullWidth = tabElement.scrollWidth;
      tabElement.style.overflow = "auto";
      tabElement.style.textOverflow = "clip";
      tabElement.style.maxWidth = Math.min(fullWidth, 300) + "px";
    };
    const mouseLeaveHandler = () => {
      tabElement.style.overflow = "hidden";
      tabElement.style.textOverflow = "ellipsis";
      tabElement.style.maxWidth = "150px";
      setTimeout(() => {
        tabElement.scrollLeft = 0;
      }, 300);
    };
    tabElement.addEventListener("mouseenter", mouseEnterHandler);
    tabElement.addEventListener("mouseleave", mouseLeaveHandler);
    tabElement.setAttribute("data-scroll-enabled", "true");
    if (!this.scrollEnabledElements)
      this.scrollEnabledElements = /* @__PURE__ */ new Map();
    this.scrollEnabledElements.set(tabElement, {
      mouseEnterHandler,
      mouseLeaveHandler,
      originalStyles
    });
  }
  // Método para limpiar el scroll de un elemento
  removeHorizontalScrollFromTab(tabElement) {
    if (!tabElement || !this.scrollEnabledElements)
      return;
    const handlers = this.scrollEnabledElements.get(tabElement);
    if (!handlers)
      return;
    tabElement.removeEventListener("mouseenter", handlers.mouseEnterHandler);
    tabElement.removeEventListener("mouseleave", handlers.mouseLeaveHandler);
    Object.assign(tabElement.style, handlers.originalStyles);
    tabElement.removeAttribute("data-scroll-enabled");
    this.scrollEnabledElements.delete(tabElement);
  }
  // Sobrescritura del método updateTab
  async updateTab(leaf) {
    if (!(leaf.view instanceof import_obsidian70.MarkdownView) || !leaf.view.file)
      return;
    const { displayTitle, source } = await this.getPreferredTitleWithSource(leaf.view.file);
    if (displayTitle) {
      let formattedTitle;
      if (source === "aliases-special" || source === "aliases-two") {
        formattedTitle = displayTitle;
      } else {
        formattedTitle = `${leaf.view.file.basename} / ${displayTitle}`;
      }
      leaf.view.titleEl.innerText = formattedTitle;
      if (leaf.tabHeaderInnerTitleEl) {
        leaf.tabHeaderInnerTitleEl.innerText = formattedTitle;
        this.applyHorizontalScrollToTab(leaf.tabHeaderInnerTitleEl);
      }
    }
  }
  // Método para limpiar recursos al desactivar
  cleanupScrollHandlers() {
    if (!this.scrollEnabledElements)
      return;
    this.scrollEnabledElements.forEach((handlers, element) => {
      this.removeHorizontalScrollFromTab(element);
    });
    this.scrollEnabledElements.clear();
  }
  // Sobrescribir restoreDefaultTitles para incluir la limpieza
  restoreDefaultTitles() {
    this.cleanupScrollHandlers();
    const leaves = this.plugin.app.workspace.getLeavesOfType("markdown");
    for (const leaf of leaves) {
      if (leaf.view instanceof import_obsidian70.MarkdownView && leaf.view.file) {
        leaf.view.titleEl.innerText = leaf.view.file.basename;
        if (leaf.tabHeaderInnerTitleEl) {
          leaf.tabHeaderInnerTitleEl.innerText = leaf.view.file.basename;
        }
      }
    }
  }
};

// src/modules/moduloTabTitle/defaults/defaultSettings.ts
var DEFAULT_TAB_SETTINGS = {
  titleDisplayMode: "filename"
};

// src/modules/moduloTabTitle/index.ts
var ModuloTabTitle = class {
  constructor(plugin) {
    this.tabManager = null;
    this.plugin = plugin;
    this.settings = DEFAULT_TAB_SETTINGS;
  }
  async activate() {
    try {
      await this.loadSettings();
      if (!this.settings.titleDisplayMode) {
        this.settings.titleDisplayMode = "alias";
        await this.saveSettings();
      }
      this.tabManager = new TabTitleManager(this.plugin, this.settings);
      registerCommands4(this.plugin, this.settings);
      this.plugin.registerEvent(
        this.plugin.app.workspace.on("layout-change", () => {
          var _a;
          try {
            (_a = this.tabManager) == null ? void 0 : _a.updateAllTabs();
          } catch (error) {
            Logger.error("Error updating tabs on layout change:", error);
          }
        })
      );
      this.plugin.registerEvent(
        this.plugin.app.workspace.on("file-open", (file) => {
          try {
            if (file && this.tabManager) {
              this.tabManager.updateTabForFile(file);
            }
          } catch (error) {
            Logger.error("Error updating tab on file open:", error);
          }
        })
      );
      setTimeout(() => {
        var _a;
        (_a = this.tabManager) == null ? void 0 : _a.updateAllTabs();
      }, 1e3);
    } catch (error) {
      Logger.error("Error activating TabTitle module:", error);
    }
  }
  deactivate() {
    try {
      if (this.tabManager) {
        this.tabManager.restoreDefaultTitles();
        this.tabManager = null;
      }
    } catch (error) {
      Logger.error("Error deactivating TabTitle module:", error);
    }
  }
  async loadSettings() {
    try {
      const loadedData = await this.plugin.loadData();
      this.settings = Object.assign({}, DEFAULT_TAB_SETTINGS, loadedData);
    } catch (error) {
      Logger.error("Error loading TabTitle settings:", error);
      this.settings = DEFAULT_TAB_SETTINGS;
    }
  }
  async saveSettings() {
    try {
      await this.plugin.saveData(this.settings);
    } catch (error) {
      Logger.error("Error saving TabTitle settings:", error);
    }
  }
};

// src/modules/taskManager/index.ts
var import_obsidian73 = require("obsidian");

// src/modules/taskManager/commands.ts
var import_obsidian72 = require("obsidian");
var TaskDaysModal = class extends import_obsidian72.Modal {
  constructor(pluginInstance) {
    super(pluginInstance.app);
    this.pluginInstance = pluginInstance;
    this.dias = 7;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Mostrar tareas pr\xF3ximas" });
    new import_obsidian72.Setting(contentEl).setName("N\xFAmero de d\xEDas").setDesc("Mostrar tareas para los pr\xF3ximos X d\xEDas").addText((text) => text.setValue("7").onChange((value) => {
      this.dias = parseInt(value) || 7;
    }));
    new import_obsidian72.Setting(contentEl).addButton((btn) => btn.setButtonText("Mostrar tareas").setCta().onClick(async () => {
      this.close();
      if (this.pluginInstance.tareasAPI) {
        await this.pluginInstance.tareasAPI.mostrarTareasProximas(this.dias);
      }
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var FutureTasksModal = class extends import_obsidian72.Modal {
  constructor(pluginInstance, defaultDays = 7) {
    super(pluginInstance.app);
    this.pluginInstance = pluginInstance;
    this.defaultDays = defaultDays;
    this.dias = 7;
    this.dias = defaultDays;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Mostrar tareas futuras" });
    new import_obsidian72.Setting(contentEl).setName("N\xFAmero de d\xEDas hacia adelante").setDesc("Mostrar tareas programadas para los pr\xF3ximos X d\xEDas").addText((text) => text.setValue(this.defaultDays.toString()).onChange((value) => {
      this.dias = parseInt(value) || 7;
    }));
    new import_obsidian72.Setting(contentEl).addButton((btn) => btn.setButtonText("Mostrar tareas").setCta().onClick(async () => {
      this.close();
      if (this.pluginInstance.tareasAPI) {
        await this.pluginInstance.tareasAPI.mostrarTareasFuturas(this.dias);
      }
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ScheduledTaskDaysModal = class extends import_obsidian72.Modal {
  constructor(pluginInstance, defaultDays = 7) {
    super(pluginInstance.app);
    this.pluginInstance = pluginInstance;
    this.defaultDays = defaultDays;
    this.dias = 7;
    this.dias = defaultDays;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Mostrar tareas programadas pr\xF3ximas" });
    new import_obsidian72.Setting(contentEl).setName("N\xFAmero de d\xEDas").setDesc("Mostrar tareas programadas para los pr\xF3ximos X d\xEDas").addText((text) => text.setValue(this.defaultDays.toString()).onChange((value) => {
      this.dias = parseInt(value) || 7;
    }));
    new import_obsidian72.Setting(contentEl).addButton((btn) => btn.setButtonText("Mostrar tareas").setCta().onClick(async () => {
      this.close();
      if (this.pluginInstance.tareasAPI) {
        await this.pluginInstance.tareasAPI.mostrarTareasScheduledProximas(this.dias);
      }
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
function registerTaskManagerCommands(plugin) {
  const managementPlugin = plugin;
  const commandIds = [];
  const tareasVencidasCommand = plugin.addCommand({
    id: "mostrar-tareas-vencidas",
    name: "Mostrar Tareas Vencidas",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasVencidas();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasVencidasCommand.id);
  const tareasProximasCommand = plugin.addCommand({
    id: "mostrar-tareas-proximas",
    name: "Mostrar Tareas Pr\xF3ximas",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasProximas();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasProximasCommand.id);
  const tareasProximasCustomCommand = plugin.addCommand({
    id: "mostrar-tareas-proximas-custom",
    name: "Mostrar Tareas Pr\xF3ximas (Especificar d\xEDas)",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        const modal = new TaskDaysModal(managementPlugin);
        modal.open();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasProximasCustomCommand.id);
  const tareasHoyCommand = plugin.addCommand({
    id: "mostrar-tareas-hoy",
    name: "Mostrar Tareas para Hoy",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasHoy();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasHoyCommand.id);
  const tareasStartVencidasCommand = plugin.addCommand({
    id: "mostrar-tareas-start-vencidas",
    name: "Mostrar Tareas Pendientes de Iniciar",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasStartVencidas();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasStartVencidasCommand.id);
  const tareasStartProximasCommand = plugin.addCommand({
    id: "mostrar-tareas-start-proximas",
    name: "Mostrar Tareas por Iniciar (Vencidas y Pr\xF3ximas)",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasStartProximas();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasStartProximasCommand.id);
  const tareasFuturasCommand = plugin.addCommand({
    id: "mostrar-tareas-futuras",
    name: "Mostrar Tareas Futuras Programadas",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        const modal = new FutureTasksModal(managementPlugin);
        modal.open();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasFuturasCommand.id);
  const tareasEnEjecucionCommand = plugin.addCommand({
    id: "mostrar-tareas-en-ejecucion",
    name: "Mostrar Tareas en Ejecuci\xF3n",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasEnEjecucion();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasEnEjecucionCommand.id);
  const tareasScheduledVencidasCommand = plugin.addCommand({
    id: "mostrar-tareas-scheduled-vencidas",
    name: "Mostrar Tareas Scheduled Vencidas",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasScheduledVencidas();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasScheduledVencidasCommand.id);
  const tareasScheduledProximasCommand = plugin.addCommand({
    id: "mostrar-tareas-scheduled-proximas",
    name: "Mostrar Tareas Scheduled Pr\xF3ximas",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        const modal = new ScheduledTaskDaysModal(managementPlugin);
        modal.open();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasScheduledProximasCommand.id);
  const todasTareasVencidasCommand = plugin.addCommand({
    id: "mostrar-todas-tareas-vencidas",
    name: "Mostrar Todas las Tareas Vencidas (Due, Scheduled, Start)",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTodasTareasVencidas();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(todasTareasVencidasCommand.id);
  const tareasDependientesCommand = plugin.addCommand({
    id: "mostrar-tareas-dependientes",
    name: "Mostrar Tareas con Dependencias",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasDependientes();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasDependientesCommand.id);
  const tareasPersonasCommand = plugin.addCommand({
    id: "mostrar-tareas-personas",
    name: "Mostrar Tareas por Persona",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasPersonas();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasPersonasCommand.id);
  const tareasContextosCommand = plugin.addCommand({
    id: "mostrar-tareas-contextos",
    name: "Mostrar Tareas por Contexto",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasContextos();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasContextosCommand.id);
  const tareasSinClasificarCommand = plugin.addCommand({
    id: "mostrar-tareas-sin-clasificar",
    name: "Mostrar Tareas Sin Clasificar",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasSinClasificar();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasSinClasificarCommand.id);
  const tareasInboxCommand = plugin.addCommand({
    id: "mostrar-tareas-inbox",
    name: "Mostrar Tareas en Bandeja de Entrada (#inbox)",
    callback: async () => {
      if (managementPlugin.tareasAPI) {
        await managementPlugin.tareasAPI.mostrarTareasInbox();
      } else {
        new import_obsidian72.Notice("El m\xF3dulo de tareas no est\xE1 disponible.");
      }
    }
  });
  commandIds.push(tareasInboxCommand.id);
  plugin.registeredTaskManagerCommandIds = commandIds;
}
function deactivateTaskManagerCommands(plugin) {
  const commandIds = plugin.registeredTaskManagerCommandIds;
  if (!commandIds)
    return;
  commandIds.forEach((commandId) => {
    const command = plugin.app.commands.commands[commandId];
    if (command) {
      command.callback = () => new import_obsidian72.Notice("Este comando ha sido desactivado.");
    }
  });
  plugin.registeredTaskManagerCommandIds = [];
}

// src/modules/taskManager/index.ts
var ModuloTaskManager = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  activate() {
    registerTaskManagerCommands(this.plugin);
  }
  deactivate() {
    deactivateTaskManagerCommands(this.plugin);
  }
};

// src/modules/dataviewQueries/index.ts
var import_obsidian76 = require("obsidian");

// src/modules/dataviewQueries/DataviewQueryManager.ts
var import_obsidian74 = require("obsidian");
var DataviewQueryManager = class extends import_obsidian74.Component {
  constructor(plugin) {
    super();
    // Cache para almacenar resultados de consultas frecuentes
    this.queryCache = /* @__PURE__ */ new Map();
    this.plugin = plugin;
  }
  // Método para ejecutar consultas con caché
  async executeQuery(queryKey, queryFn, ttl = 6e4) {
    const cached = this.queryCache.get(queryKey);
    const now2 = Date.now();
    if (cached && now2 - cached.timestamp < cached.ttl) {
      return cached.data;
    }
    const result = await queryFn();
    this.queryCache.set(queryKey, {
      data: result,
      timestamp: now2,
      ttl
    });
    return result;
  }
  // Método para limpiar caché
  clearCache(queryKey) {
    if (queryKey) {
      this.queryCache.delete(queryKey);
    } else {
      this.queryCache.clear();
    }
  }
};

// src/modules/dataviewQueries/commands.ts
var import_obsidian75 = require("obsidian");
function registerCommands5(plugin) {
  const clearCacheCommand = plugin.addCommand({
    id: "clear-dataview-queries-cache",
    name: "Limpiar cach\xE9 de consultas",
    callback: () => {
      try {
        const moduleInstance = plugin.moduloDataviewQueries;
        if (moduleInstance == null ? void 0 : moduleInstance.queryManager) {
          moduleInstance.queryManager.clearCache();
          new import_obsidian75.Notice("Cach\xE9 de consultas limpiado");
        }
      } catch (error) {
        console.error("Error al limpiar cach\xE9:", error);
        new import_obsidian75.Notice("Error al limpiar cach\xE9 de consultas");
      }
    }
  });
  const reloadQueriesCommand = plugin.addCommand({
    id: "reload-dataview-queries",
    name: "Recargar consultas activas",
    callback: () => {
      try {
        const moduleInstance = plugin.moduloDataviewQueries;
        if (moduleInstance == null ? void 0 : moduleInstance.queryManager) {
          moduleInstance.clearCache();
          app.workspace.trigger("dataview:refresh-views");
          new import_obsidian75.Notice("Consultas recargadas");
        }
      } catch (error) {
        console.error("Error al recargar consultas:", error);
        new import_obsidian75.Notice("Error al recargar consultas");
      }
    }
  });
  plugin.registeredDataviewQueryCommandIds = [
    clearCacheCommand.id,
    reloadQueriesCommand.id
  ];
}
function deactivateCommands4(plugin) {
  const commandIds = plugin.registeredDataviewQueryCommandIds;
  if (!commandIds)
    return;
  commandIds.forEach((commandId) => {
    const command = plugin.app.commands.commands[commandId];
    if (command) {
      command.callback = () => new import_obsidian75.Notice("Este comando ha sido desactivado.");
    }
  });
  plugin.registeredDataviewQueryCommandIds = [];
}

// src/modules/dataviewQueries/QueryRenderer.ts
var QueryRenderer = class {
  async renderTaskButtons(container, options = {}) {
    const buttonContainer = container.createEl("div", {
      cls: "task-buttons-container",
      attr: { style: "display: grid; grid-gap: 8px; padding: 16px; background: var(--background-secondary); border-radius: 8px;" }
    });
    if (options.showTitle !== false) {
      buttonContainer.createEl("h4", {
        text: "\u{1F4CB} Gesti\xF3n de Tareas",
        attr: { style: "margin: 0 0 12px 0;" }
      });
    }
    const buttons = [
      {
        id: "today",
        text: "Tareas de Hoy",
        icon: "\u{1F4C5}",
        color: "#4CAF50",
        action: () => app.plugins.plugins["obsidian-personal-management"].tareasAPI.mostrarTareasHoy()
      },
      {
        id: "overdue",
        text: "Tareas Vencidas",
        icon: "\u26A0\uFE0F",
        color: "#f44336",
        action: () => app.plugins.plugins["obsidian-personal-management"].tareasAPI.mostrarTareasVencidas()
      },
      {
        id: "upcoming",
        text: "Tareas Pr\xF3ximas",
        icon: "\u{1F3AF}",
        color: "#2196F3",
        action: () => app.plugins.plugins["obsidian-personal-management"].tareasAPI.mostrarTareasProximas()
      },
      {
        id: "start",
        text: "Todas las Vencidas",
        icon: "\u{1F313}",
        color: "#FF9800",
        action: () => app.plugins.plugins["obsidian-personal-management"].tareasAPI.mostrarTodasTareasVencidas()
      }
    ];
    const buttonGrid = buttonContainer.createEl("div", {
      attr: { style: "display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 8px;" }
    });
    buttons.forEach((btn) => {
      const button = buttonGrid.createEl("button", {
        attr: {
          style: `
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        gap: 8px;
                        padding: 8px 16px;
                        background-color: ${btn.color};
                        color: white;
                        border: none;
                        border-radius: 6px;
                        cursor: pointer;
                        transition: all 0.2s ease;
                    `
        }
      });
      button.createEl("span", { text: btn.icon });
      button.createEl("span", { text: btn.text });
      button.addEventListener("mouseenter", () => {
        button.style.filter = "brightness(1.1)";
        button.style.transform = "translateY(-1px)";
      });
      button.addEventListener("mouseleave", () => {
        button.style.filter = "brightness(1)";
        button.style.transform = "translateY(0)";
      });
      button.addEventListener("click", async () => {
        try {
          button.style.opacity = "0.7";
          new Notice("Actualizando vista...");
          await btn.action();
        } catch (error) {
          console.error(`Error en acci\xF3n ${btn.id}:`, error);
          new Notice(`Error: ${error.message}`);
        } finally {
          button.style.opacity = "1";
        }
      });
    });
    if (options.showTimestamp) {
      buttonContainer.createEl("div", {
        text: `\xDAltima actualizaci\xF3n: ${(/* @__PURE__ */ new Date()).toLocaleTimeString()}`,
        attr: {
          style: "margin-top: 8px; text-align: right; font-size: 0.8em; color: var(--text-muted);"
        }
      });
    }
  }
  async renderProjectHierarchy(container, options = {}) {
  }
};

// src/modules/dataviewQueries/index.ts
var ModuloDataviewQueries = class {
  constructor(plugin) {
    this._isActive = false;
    console.log("ModuloDataviewQueries: Inicializando...");
    this.plugin = plugin;
    this.queryManager = new DataviewQueryManager(plugin);
    this.queryRenderer = new QueryRenderer();
  }
  activate() {
    console.log("ModuloDataviewQueries: Iniciando activaci\xF3n...");
    if (this._isActive) {
      console.log("ModuloDataviewQueries: Ya est\xE1 activo");
      return;
    }
    try {
      registerCommands5(this.plugin);
      this.registerDataviewExtensions();
      this._isActive = true;
      console.log("ModuloDataviewQueries: Activaci\xF3n exitosa");
    } catch (error) {
      console.error("ModuloDataviewQueries: Error en activaci\xF3n:", error);
      this._isActive = false;
      throw error;
    }
  }
  deactivate() {
    console.log("ModuloDataviewQueries: Iniciando desactivaci\xF3n...");
    if (!this._isActive) {
      console.log("ModuloDataviewQueries: Ya est\xE1 inactivo");
      return;
    }
    try {
      deactivateCommands4(this.plugin);
      this.unregisterDataviewExtensions();
      this._isActive = false;
      console.log("ModuloDataviewQueries: Desactivaci\xF3n exitosa");
    } catch (error) {
      console.error("ModuloDataviewQueries: Error en desactivaci\xF3n:", error);
      throw error;
    }
  }
  isActive() {
    return this._isActive;
  }
  async renderQuery(queryType, params) {
    if (!this._isActive) {
      throw new Error("El m\xF3dulo no est\xE1 activo");
    }
    switch (queryType) {
      case "taskButtons":
        await this.queryRenderer.renderTaskButtons(params.container, params.options);
        break;
      default:
        throw new Error(`Tipo de consulta no soportado: ${queryType}`);
    }
  }
  registerDataviewExtensions() {
    const boundFunctions = {
      renderTaskButtons: (dv2, container, options) => {
        return this.queryRenderer.renderTaskButtons(container, options);
      },
      renderProjectHierarchy: (dv2, container, options) => {
        return this.queryRenderer.renderProjectHierarchy(container, options);
      }
    };
    window.customQueries = boundFunctions;
    console.log("ModuloDataviewQueries: Extensions registradas");
  }
  unregisterDataviewExtensions() {
    delete window.customQueries;
    console.log("ModuloDataviewQueries: Extensions eliminadas");
  }
};

// src/modules/taskExecutionNavigator/index.ts
var import_obsidian79 = require("obsidian");

// src/modules/taskExecutionNavigator/commands.ts
var import_obsidian78 = require("obsidian");

// src/modules/taskExecutionNavigator/taskExecutionNavigator.ts
var import_obsidian77 = require("obsidian");
init_seleccionModalTareas();
var TaskExecutionNavigator = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.app = plugin.app;
  }
  /**
   * Navega a la tarea seleccionada por el usuario
   */
  async navigateToTask() {
    try {
      const tasks = await this.findPendingTasks();
      if (tasks.length === 0) {
        new import_obsidian77.Notice("No se encontraron tareas en ejecuci\xF3n.");
        return;
      }
      const displayOptions = tasks.map((task) => task.displayText);
      const placeholder = "Selecciona una tarea para navegar";
      const modalMenu = new SeleccionModalTareas(
        this.app,
        displayOptions,
        tasks.map((_, index) => index.toString()),
        placeholder
      );
      try {
        const selectedIndex = parseInt(await modalMenu.openAndAwaitSelection());
        const selectedTask = tasks[selectedIndex];
        await this.openFileAtLine(selectedTask.file, selectedTask.lineNumber);
        new import_obsidian77.Notice(`Navegando a la tarea en ${selectedTask.file.basename}`);
      } catch (error) {
        console.log("Selecci\xF3n de tarea cancelada por el usuario");
      }
    } catch (error) {
      console.error("Error en navegaci\xF3n de tareas:", error);
      throw error;
    }
  }
  /**
   * Encuentra todas las tareas pendientes (con estado [/]) en los archivos
   */
  async findPendingTasks() {
    var _a;
    const tasks = [];
    const archivos = this.app.vault.getMarkdownFiles();
    const archivosRelevantes = archivos.filter((archivo) => {
      return !archivo.path.includes("Plantillas") && !archivo.path.includes("Estructura/GTD/Sistema GTD/Sistema") && !archivo.path.includes("Archivo");
    });
    for (const archivo of archivosRelevantes) {
      try {
        const contenido = await this.app.vault.read(archivo);
        const lineas = contenido.split("\n");
        const metadata = this.app.metadataCache.getFileCache(archivo);
        let aliasDisplay = "";
        if ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.aliases) {
          let aliases = metadata.frontmatter.aliases;
          if (!Array.isArray(aliases))
            aliases = [aliases];
          if (aliases.length >= 2) {
            aliasDisplay = aliases[1];
          } else if (aliases.length >= 1) {
            aliasDisplay = aliases[0];
          }
        }
        if (!aliasDisplay) {
          aliasDisplay = archivo.basename;
        }
        for (let i = 0; i < lineas.length; i++) {
          const linea = lineas[i];
          if (linea.match(/^ *- \[\/\] .*/)) {
            const textoTarea = await this.limpiarTextoTarea(linea);
            const displayText = `${aliasDisplay} / ${textoTarea}`;
            tasks.push({
              text: textoTarea,
              file: archivo,
              lineNumber: i,
              displayText
            });
          }
        }
      } catch (error) {
        console.error(`Error al procesar el archivo ${archivo.path}:`, error);
      }
    }
    return tasks;
  }
  /**
   * Limpia el texto de una tarea para mostrarla de forma legible
   * @param titulo Texto completo de la línea de la tarea
   */
  async limpiarTextoTarea(titulo) {
    return new Promise((resolve) => {
      let textoLimpio = titulo.split("\n")[0];
      textoLimpio = textoLimpio.replace(/#([\w-/]+)/g, (match2, p1) => {
        let transformado = p1.replace(/\//g, "_");
        transformado = transformado.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
        return transformado;
      });
      textoLimpio = textoLimpio.replace(/\[\w+::[^\]]+\]/g, "");
      textoLimpio = textoLimpio.replace(/^\s*-\s*\[\/\]\s*/, "");
      textoLimpio = textoLimpio.replace(
        /\p{Extended_Pictographic}\s*\d{4}-\d{2}-\d{2}(?:\s*\d{2}:\d{2}(?::\d{2})?)?/gu,
        ""
      );
      textoLimpio = textoLimpio.replace(/\p{Extended_Pictographic}/gu, "");
      textoLimpio = textoLimpio.replace(/\[[^\]]*\]/g, "");
      const caracteresNoPermitidos = /[<>:"\/\\|?*\x00-\x1F]/g;
      textoLimpio = textoLimpio.replace(caracteresNoPermitidos, "_");
      textoLimpio = textoLimpio.replace(/\s+/g, " ");
      resolve(textoLimpio.trim());
    });
  }
  /**
   * Abre un archivo y navega a una línea específica
   * @param file Archivo a abrir
   * @param line Número de línea a la que navegar
   */
  async openFileAtLine(file, line) {
    const leaf = this.app.workspace.getLeaf(true);
    await leaf.openFile(file);
    const view = this.app.workspace.getActiveViewOfType(import_obsidian77.MarkdownView);
    if (view) {
      const editor = view.editor;
      const position = { line, ch: 0 };
      editor.setCursor(position);
      editor.scrollIntoView({ from: position, to: position }, true);
      const lineLength = editor.getLine(line).length;
      editor.setSelection(
        { line, ch: 0 },
        { line, ch: lineLength }
      );
      editor.focus();
    }
  }
};

// src/modules/taskExecutionNavigator/commands.ts
function registerCommands6(plugin) {
  const taskExecutionNavigator = new TaskExecutionNavigator(plugin);
  const navigatorCommand = plugin.addCommand({
    id: "navigate-to-execution-tasks",
    name: "Navegar a tareas en ejecuci\xF3n",
    callback: async () => {
      try {
        await taskExecutionNavigator.navigateToTask();
      } catch (error) {
        console.error("Error al navegar a la tarea:", error);
        new import_obsidian78.Notice("No se pudo navegar a la tarea seleccionada.");
      }
    }
  });
  if (!plugin.registeredTaskExecutionNavigatorIDs) {
    plugin.registeredTaskExecutionNavigatorIDs = [];
  }
  plugin.registeredTaskExecutionNavigatorIDs.push(navigatorCommand.id);
}
function deactivateCommands5(plugin) {
  if (!plugin.registeredTaskExecutionNavigatorIDs)
    return;
  plugin.registeredTaskExecutionNavigatorIDs.forEach((commandId) => {
    const command = plugin.app.commands.commands[commandId];
    if (command) {
      command.callback = () => new import_obsidian78.Notice("Este comando ha sido desactivado.");
    }
  });
  plugin.registeredTaskExecutionNavigatorIDs = [];
}

// src/modules/taskExecutionNavigator/index.ts
var TaskExecutionNavigatorModule = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  /**
   * Activa el módulo registrando los comandos
   */
  activate() {
    registerCommands6(this.plugin);
  }
  /**
   * Desactiva el módulo, asegurándose de limpiar todos los comandos registrados
   */
  deactivate() {
    deactivateCommands5(this.plugin);
  }
};

// src/modules/taskNavigator/module.ts
var import_obsidian88 = require("obsidian");

// src/modules/taskNavigator/views/TaskNavigatorView.ts
var import_obsidian86 = require("obsidian");

// src/modules/taskNavigator/services/TaskHierarchyBuilder.ts
var import_obsidian84 = require("obsidian");

// src/modules/taskNavigator/services/EntityDetector.ts
var import_obsidian82 = require("obsidian");
init_Entity();
var EntityDetector = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  // Modificar EntityDetector.ts para añadir mensajes de depuración
  /**
   * Detecta el tipo de entidad de un archivo y crea la instancia correspondiente
   */
  async detectEntityFromFile(file) {
    var _a;
    console.log(`[TaskNavigator] Detectando entidad para archivo: ${file.path}`);
    try {
      const metadata = (_a = this.plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if (!metadata) {
        console.log(`[TaskNavigator] No se encontr\xF3 frontmatter en ${file.path}`);
        return this.createGenericEntity(file);
      }
      console.log(`[TaskNavigator] Frontmatter encontrado en ${file.path}:`, metadata);
      const entityType = this.determineEntityType(metadata.type);
      console.log(`[TaskNavigator] Tipo de entidad determinado: ${entityType}`);
      const id = metadata.id || file.basename;
      const title = metadata.titulo || (metadata.aliases && metadata.aliases.length > 0 ? metadata.aliases[0] : file.basename);
      const description = metadata.descripcion || "";
      const state = this.determineEntityState(metadata.estado);
      console.log(`[TaskNavigator] Estado de la entidad: ${state}`);
      const specificMetadata = this.extractSpecificMetadata(entityType, metadata);
      console.log(`[TaskNavigator] Metadatos espec\xEDficos:`, specificMetadata);
      const entity = createEntity(
        entityType,
        id.toString(),
        title,
        description,
        file,
        state,
        specificMetadata
      );
      console.log(`[TaskNavigator] Entidad creada:`, {
        id: entity.id,
        type: entity.type,
        title: entity.title,
        state: entity.state,
        file: entity.file.path
      });
      this.extractHierarchicalRelations(entity, metadata);
      console.log(`[TaskNavigator] Relaciones jer\xE1rquicas extra\xEDdas para ${entity.title}:`, {
        areaVida: entity.areaVida,
        areaInteres: entity.areaInteres,
        proyectoQ: entity.proyectoQ,
        proyectoGTD: entity.proyectoGTD,
        asunto: entity.metadata.asunto
      });
      return entity;
    } catch (error) {
      console.error(`[TaskNavigator] Error al detectar entidad del archivo ${file.path}:`, error);
      return null;
    }
  }
  /**
   * Determina el tipo de entidad según el campo 'type' del frontmatter
   */
  determineEntityType(typeStr) {
    console.log(`[TaskNavigator] Determinando tipo de entidad a partir de: "${typeStr}"`);
    if (!typeStr) {
      console.log(`[TaskNavigator] No se especific\xF3 tipo, usando UNKNOWN`);
      return "UNKNOWN" /* UNKNOWN */;
    }
    switch (typeStr) {
      case "AV":
        console.log(`[TaskNavigator] Tipo identificado: \xC1rea de Vida`);
        return "AV" /* AREA_VIDA */;
      case "AI":
        console.log(`[TaskNavigator] Tipo identificado: \xC1rea de Inter\xE9s`);
        return "AI" /* AREA_INTERES */;
      case "PQ":
        console.log(`[TaskNavigator] Tipo identificado: Proyecto Q`);
        return "PQ" /* PROYECTO_Q */;
      case "PGTD":
        console.log(`[TaskNavigator] Tipo identificado: Proyecto GTD`);
        return "PGTD" /* PROYECTO_GTD */;
      case "Ax":
        console.log(`[TaskNavigator] Tipo identificado: Anotaci\xF3n`);
        return "Ax" /* ANOTACION */;
      case "Cp":
        console.log(`[TaskNavigator] Tipo identificado: Campa\xF1a`);
        return "Cp" /* CAMPANA */;
      case "EMkt":
        console.log(`[TaskNavigator] Tipo identificado: Entregable`);
        return "EMkt" /* ENTREGABLE */;
      case "RT":
        console.log(`[TaskNavigator] Tipo identificado: Registro Tiempo`);
        return "RT" /* REGISTRO_TIEMPO */;
      case "Tx":
        console.log(`[TaskNavigator] Tipo identificado: Transacci\xF3n`);
        return "Tx" /* TRANSACCION */;
      default:
        console.log(`[TaskNavigator] Tipo desconocido "${typeStr}", usando OTHER`);
        return "OTHER" /* OTHER */;
    }
  }
  /**
   * Extrae las relaciones jerárquicas de los metadatos
   */
  extractHierarchicalRelations(entity, metadata) {
    console.log(`[TaskNavigator] Extrayendo relaciones jer\xE1rquicas para ${entity.title}`);
    if (metadata.areaVida) {
      entity.areaVida = this.normalizeField(metadata.areaVida);
      console.log(`[TaskNavigator] \xC1rea de Vida encontrada: ${JSON.stringify(entity.areaVida)}`);
    }
    if (metadata.areaInteres) {
      entity.areaInteres = this.normalizeField(metadata.areaInteres);
      console.log(`[TaskNavigator] \xC1rea de Inter\xE9s encontrada: ${JSON.stringify(entity.areaInteres)}`);
    }
    if (metadata.proyectoQ) {
      entity.proyectoQ = this.normalizeField(metadata.proyectoQ);
      console.log(`[TaskNavigator] Proyecto Q encontrado: ${JSON.stringify(entity.proyectoQ)}`);
    }
    if (metadata.proyectoGTD) {
      entity.proyectoGTD = this.normalizeField(metadata.proyectoGTD);
      console.log(`[TaskNavigator] Proyecto GTD encontrado: ${JSON.stringify(entity.proyectoGTD)}`);
    }
    if (metadata.asunto) {
      entity.metadata.asunto = this.normalizeField(metadata.asunto);
      console.log(`[TaskNavigator] Asunto encontrado: ${JSON.stringify(entity.metadata.asunto)}`);
    }
  }
  /**
   * Determina el estado de la entidad según el campo 'estado' del frontmatter
   */
  determineEntityState(stateStr) {
    if (!stateStr) {
      return "" /* UNKNOWN */;
    }
    switch (stateStr) {
      case "\u{1F7E2}":
        return "\u{1F7E2}" /* ACTIVE */;
      case "\u{1F7E1}":
        return "\u{1F7E1}" /* PAUSED */;
      case "\u{1F534}":
        return "\u{1F534}" /* STOPPED */;
      case "\u{1F535}":
        return "\u{1F535}" /* ARCHIVED */;
      default:
        return "" /* UNKNOWN */;
    }
  }
  /**
   * Extrae metadatos específicos según el tipo de entidad
   */
  extractSpecificMetadata(entityType, metadata) {
    const result = {};
    switch (entityType) {
      case "AV" /* AREA_VIDA */:
        result.trimestre = metadata.trimestre || "";
        break;
      case "AI" /* AREA_INTERES */:
        result.nivelAI = metadata.nivelAI || 0;
        break;
      case "PQ" /* PROYECTO_Q */:
        result.trimestres = this.normalizeArrayField(metadata.trimestre);
        break;
      case "PGTD" /* PROYECTO_GTD */:
        result.nivelP = metadata.nivelP || 0;
        break;
      case "Cp" /* CAMPANA */:
        result.indicadores = metadata.indicadores || "";
        break;
      case "EMkt" /* ENTREGABLE */:
        result.tipo = metadata.tipo || "";
        result.canales = this.normalizeArrayField(metadata.canales);
        result.estadoE = metadata.estadoE || "";
        result.prioridad = metadata.prioridad || "";
        result.publicacion = metadata.publicacion || "";
        result.urlCanva = metadata.urlCanva || "";
        result.hits = metadata.hits || 0;
        break;
    }
    return result;
  }
  /**
   * Normaliza un campo que puede ser un string o un array
   */
  normalizeField(field) {
    if (Array.isArray(field)) {
      return field.map((item) => this.normalizeWikiLink(item));
    } else if (field) {
      return this.normalizeWikiLink(field);
    }
    return "";
  }
  /**
   * Normaliza un campo que debería ser un array
   */
  normalizeArrayField(field) {
    if (Array.isArray(field)) {
      return field.map((item) => this.normalizeWikiLink(item));
    } else if (field) {
      return [this.normalizeWikiLink(field)];
    }
    return [];
  }
  /**
   * Normaliza un WikiLink ([[texto|alias]]) extrayendo su contenido
   */
  normalizeWikiLink(text) {
    if (typeof text !== "string") {
      return String(text);
    }
    const wikiLinkRegex = /\[\[(.*?)(?:\|(.*?))?\]\]/;
    const match2 = text.match(wikiLinkRegex);
    if (match2) {
      return match2[1];
    }
    return text;
  }
  /**
   * Crea una entidad genérica cuando no se puede determinar el tipo
   */
  createGenericEntity(file) {
    return createEntity(
      "UNKNOWN" /* UNKNOWN */,
      file.basename,
      file.basename,
      "",
      file,
      "" /* UNKNOWN */
    );
  }
};

// src/modules/taskNavigator/services/TaskParser.ts
var import_obsidian83 = require("obsidian");
init_Task();
var TaskParser = class {
  // Modificar TaskParser.ts para añadir mensajes de depuración
  /**
   * Extrae todas las tareas de un archivo
   */
  async extractTasksFromFile(file) {
    console.log(`[TaskNavigator] Extrayendo tareas de archivo: ${file.path}`);
    try {
      const content = await this.readFile(file);
      console.log(`[TaskNavigator] Contenido le\xEDdo: ${content.length} caracteres`);
      const lines = content.split("\n");
      console.log(`[TaskNavigator] L\xEDneas en el archivo: ${lines.length}`);
      const tasks = [];
      let taskLinesFound = 0;
      for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        const lineNumber = i + 1;
        if (line.trim().startsWith("- [")) {
          taskLinesFound++;
          console.log(`[TaskNavigator] L\xEDnea potencial de tarea encontrada: ${line}`);
          const task = this.parseTaskLine(line, lineNumber, file);
          if (task) {
            tasks.push(task);
            console.log(`[TaskNavigator] Tarea v\xE1lida extra\xEDda: "${task.text}", completada: ${task.completed}`);
          } else {
            console.log(`[TaskNavigator] La l\xEDnea no es una tarea v\xE1lida: ${line}`);
          }
        }
      }
      console.log(`[TaskNavigator] Extracci\xF3n completada: ${tasks.length} tareas extra\xEDdas de ${taskLinesFound} l\xEDneas potenciales`);
      return tasks;
    } catch (error) {
      console.error(`[TaskNavigator] Error al extraer tareas del archivo ${file.path}:`, error);
      return [];
    }
  }
  /**
   * Lee el contenido de un archivo
   */
  async readFile(file) {
    try {
      return await app.vault.read(file);
    } catch (error) {
      console.error(`[TaskNavigator] Error al leer el archivo ${file.path}:`, error);
      throw error;
    }
  }
  /**
   * Analiza una línea para determinar si contiene una tarea
   */
  parseTaskLine(line, lineNumber, file) {
    const taskRegex = /^(\s*)-\s*\[([ xX/])\]\s*(.+)$/;
    const match2 = line.match(taskRegex);
    if (!match2) {
      console.log(`[TaskNavigator] La l\xEDnea ${lineNumber} no coincide con el patr\xF3n de tarea`);
      return null;
    }
    const indentation = match2[1].length;
    const isCompleted = match2[2] !== " ";
    const taskText = match2[3];
    console.log(`[TaskNavigator] Tarea encontrada en l\xEDnea ${lineNumber}:`);
    console.log(`  - Indentaci\xF3n: ${indentation}`);
    console.log(`  - Estado: ${isCompleted ? "Completada" : "Pendiente"}`);
    console.log(`  - Texto: ${taskText}`);
    const lineInfo = {
      number: lineNumber,
      text: line,
      indentation
    };
    const taskId = this.extractTaskId(taskText) || this.generateTaskId(file.basename, lineNumber);
    console.log(`[TaskNavigator] ID de tarea: ${taskId}`);
    const task = new Task3(
      taskId,
      this.cleanTaskText(taskText),
      taskText,
      isCompleted,
      file,
      lineInfo
    );
    this.extractTaskMetadata(task);
    return task;
  }
  /**
   * Limpia el texto de la tarea eliminando metadatos y tags
   */
  cleanTaskText(text) {
    let cleanText = text.replace(/🆔\s+\w+/g, "").trim();
    cleanText = cleanText.replace(/#[a-zA-Z0-9_-]+/g, "").trim();
    cleanText = cleanText.replace(/[📅⏳🛫]\s*\d{4}-\d{2}-\d{2}/g, "").trim();
    cleanText = cleanText.replace(/⛔\s*\w+/g, "").trim();
    cleanText = cleanText.replace(/\[([^\]]+)\]/g, "").trim();
    cleanText = cleanText.replace(/[⏫🔼🔽⏬]/g, "").trim();
    cleanText = cleanText.replace(/\s+/g, " ").trim();
    return cleanText;
  }
  /**
   * Extrae y procesa los metadatos de la tarea
   */
  extractTaskMetadata(task) {
    const text = task.rawText;
    this.extractPriority(task, text);
    this.extractDates(task, text);
    this.extractTags(task, text);
    this.extractDependencies(task, text);
  }
  /**
   * Extrae la prioridad de la tarea
   */
  extractPriority(task, text) {
    if (text.includes("\u23EB")) {
      task.priority = "highest" /* HIGHEST */;
    } else if (text.includes("\u{1F53C}")) {
      task.priority = "high" /* HIGH */;
    } else if (text.includes("\u{1F53D}")) {
      task.priority = "low" /* LOW */;
    } else if (text.includes("\u23EC")) {
      task.priority = "lowest" /* LOWEST */;
    } else {
      task.priority = "normal" /* NORMAL */;
    }
  }
  /**
   * Extrae las fechas y horarios de la tarea
   */
  extractDates(task, text) {
    const startDateRegex = /🛫\s*(\d{4}-\d{2}-\d{2})/;
    const startDateMatch = text.match(startDateRegex);
    if (startDateMatch) {
      task.timing.startDate = startDateMatch[1];
    }
    const dueDateRegex = /📅\s*(\d{4}-\d{2}-\d{2})/;
    const dueDateMatch = text.match(dueDateRegex);
    if (dueDateMatch) {
      task.timing.dueDate = dueDateMatch[1];
    }
    const scheduledDateRegex = /⏳\s*(\d{4}-\d{2}-\d{2})/;
    const scheduledDateMatch = text.match(scheduledDateRegex);
    if (scheduledDateMatch) {
      task.timing.scheduledDate = scheduledDateMatch[1];
    }
    const startTimeRegex = /\[hI::\s*([^\]]+)\]/;
    const startTimeMatch = text.match(startTimeRegex);
    if (startTimeMatch) {
      task.timing.startTime = startTimeMatch[1];
    }
    const endTimeRegex = /\[hF::\s*([^\]]+)\]/;
    const endTimeMatch = text.match(endTimeRegex);
    if (endTimeMatch) {
      task.timing.endTime = endTimeMatch[1];
    }
    const durationMinRegex = /\[(\d+)min\]/;
    const durationMinMatch = text.match(durationMinRegex);
    if (durationMinMatch) {
      task.timing.duration = parseInt(durationMinMatch[1]);
    }
    const durationHourRegex = /\[(\d+(?:\.\d+)?)h\]/;
    const durationHourMatch = text.match(durationHourRegex);
    if (durationHourMatch) {
      task.timing.duration = Math.round(parseFloat(durationHourMatch[1]) * 60);
    }
    const weekRegex = /\[w::\s*\[\[([^\]]+)\]\]\]/;
    const weekMatch = text.match(weekRegex);
    if (weekMatch) {
      task.timing.week = weekMatch[1];
    }
  }
  /**
   * Extrae todas las etiquetas de la tarea
   */
  /**
   * Extrae todas las etiquetas de la tarea
   */
  extractTags(task, text) {
    task.tags.contexts = [];
    task.tags.people = [];
    task.tags.gtdTags = [];
    task.tags.otherTags = [];
    task.tags.all = [];
    const tagRegex = /#([a-zA-Z0-9_-]+)/g;
    let tagMatch;
    while ((tagMatch = tagRegex.exec(text)) !== null) {
      const tag = tagMatch[1];
      task.tags.all.push(tag);
      if (tag.startsWith("cx-")) {
        task.tags.contexts.push(tag);
      } else if (tag.startsWith("px-")) {
        task.tags.people.push(tag);
      } else if (tag.startsWith("GTD-")) {
        task.tags.gtdTags.push(tag);
      } else {
        task.tags.otherTags.push(tag);
      }
    }
  }
  /**
   * Extrae las dependencias de la tarea
   */
  extractDependencies(task, text) {
    const dependencyRegex = /⛔\s*(\w+)/g;
    let dependencyMatch;
    while ((dependencyMatch = dependencyRegex.exec(text)) !== null) {
      const dependencyId = dependencyMatch[1];
      task.dependencies.push(dependencyId);
    }
  }
  /**
   * Extrae el ID de la tarea del texto si existe
   */
  extractTaskId(text) {
    const idRegex = /🆔\s*(\w+)/;
    const idMatch = text.match(idRegex);
    if (idMatch) {
      return idMatch[1];
    }
    return null;
  }
  /**
   * Genera un ID único para la tarea si no tiene uno explícito
   */
  generateTaskId(filePrefix, lineNumber) {
    const timestamp = Date.now().toString(36);
    const random = Math.random().toString(36).substr(2, 5);
    return `${filePrefix.substring(0, 3)}${lineNumber}${timestamp.substring(timestamp.length - 4)}${random}`.toUpperCase();
  }
};

// src/modules/taskNavigator/services/TaskHierarchyBuilder.ts
init_Entity();
init_HierarchyViewModel();
init_Task();
var TaskHierarchyBuilder = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.entityDetector = new EntityDetector(plugin);
    this.taskParser = new TaskParser();
  }
  // Modificar TaskHierarchyBuilder.ts para añadir mensajes de depuración
  /**
   * Construye la jerarquía completa de entidades y tareas
   * @param focusEntity Entidad en la que centrar la jerarquía (opcional)
   */
  async buildHierarchy(focusEntity = null) {
    const model = new HierarchyViewModel();
    console.log("[TaskNavigator] Iniciando construcci\xF3n de jerarqu\xEDa", focusEntity ? `con foco en ${focusEntity.title}` : "sin entidad focal");
    try {
      model.focusEntity = focusEntity;
      console.log("[TaskNavigator] Recopilando entidades");
      const entities = await this.collectAllEntities();
      console.log(`[TaskNavigator] Recopiladas ${entities.length} entidades`);
      model.allEntities = entities;
      const entityTypeCount = {};
      entities.forEach((entity) => {
        entityTypeCount[entity.type] = (entityTypeCount[entity.type] || 0) + 1;
      });
      console.log("[TaskNavigator] Distribuci\xF3n de tipos de entidades:", entityTypeCount);
      console.log("[TaskNavigator] Construyendo relaciones entre entidades");
      this.buildEntityRelationships(entities);
      console.log("[TaskNavigator] Determinando entidades ra\xEDz");
      model.rootEntities = this.determineRootEntities(entities, focusEntity);
      console.log(`[TaskNavigator] Determinadas ${model.rootEntities.length} entidades ra\xEDz`);
      console.log("[TaskNavigator] Extrayendo y asignando tareas");
      await this.extractAndAssignTasks(entities);
      let totalTasks = 0;
      entities.forEach((entity) => {
        totalTasks += entity.tasks.length;
        console.log(`[TaskNavigator] Entidad ${entity.title} (${entity.type}): ${entity.tasks.length} tareas`);
      });
      console.log(`[TaskNavigator] Total de tareas encontradas: ${totalTasks}`);
      return model;
    } catch (error) {
      console.error("[TaskNavigator] Error al construir la jerarqu\xEDa:", error);
      throw error;
    }
  }
  /**
   * Recopila todas las entidades del sistema
   */
  async collectAllEntities() {
    const entities = [];
    const files = this.plugin.app.vault.getMarkdownFiles();
    console.log(`[TaskNavigator] Analizando ${files.length} archivos markdown`);
    let processedCount = 0;
    let entityCount = 0;
    let errorCount = 0;
    for (const file of files) {
      try {
        const entity = await this.entityDetector.detectEntityFromFile(file);
        processedCount++;
        if (entity) {
          entities.push(entity);
          entityCount++;
          if (entityCount % 50 === 0 || processedCount === files.length) {
            console.log(`[TaskNavigator] Progreso: ${processedCount}/${files.length} archivos procesados, ${entityCount} entidades encontradas`);
          }
        }
      } catch (error) {
        errorCount++;
        console.error(`[TaskNavigator] Error al procesar archivo ${file.path}:`, error);
      }
    }
    console.log(`[TaskNavigator] An\xE1lisis completado: ${processedCount} archivos procesados, ${entityCount} entidades encontradas, ${errorCount} errores`);
    return entities;
  }
  /**
   * Extrae y asigna tareas a cada entidad
   */
  async extractAndAssignTasks(entities) {
    let totalTasksFound = 0;
    let entitiesWithTasks = 0;
    for (const entity of entities) {
      try {
        console.log(`[TaskNavigator] Extrayendo tareas de ${entity.file.path}`);
        const tasks = await this.taskParser.extractTasksFromFile(entity.file);
        if (tasks.length > 0) {
          entitiesWithTasks++;
          console.log(`[TaskNavigator] Se encontraron ${tasks.length} tareas en ${entity.file.path}`);
          if (tasks.length > 0) {
            console.log(`[TaskNavigator] Ejemplo de tarea: "${tasks[0].text}" (completada: ${tasks[0].completed})`);
          }
        }
        totalTasksFound += tasks.length;
        for (const task of tasks) {
          entity.addTask(task);
        }
      } catch (error) {
        console.error(`[TaskNavigator] Error al extraer tareas para ${entity.file.path}:`, error);
      }
    }
    console.log(`[TaskNavigator] Extracci\xF3n de tareas completada: ${totalTasksFound} tareas encontradas en ${entitiesWithTasks} entidades`);
  }
  /**
   * Construye las relaciones entre entidades
   */
  buildEntityRelationships(entities) {
    const entityMap = /* @__PURE__ */ new Map();
    for (const entity of entities) {
      entityMap.set(entity.file.path, entity);
    }
    for (const entity of entities) {
      this.establishEntityRelationships(entity, entityMap);
    }
  }
  /**
   * Establece las relaciones de una entidad con otras
   */
  establishEntityRelationships(entity, entityMap) {
    var _a;
    if ((_a = entity.metadata) == null ? void 0 : _a.asunto) {
      const asunto = entity.metadata.asunto;
      let parentEntity = null;
      if (Array.isArray(asunto)) {
        if (asunto.length > 0) {
          parentEntity = this.findEntityByPathOrName(asunto[0], entityMap);
        }
      } else {
        parentEntity = this.findEntityByPathOrName(asunto, entityMap);
      }
      if (parentEntity) {
        parentEntity.addChild(entity);
      }
    } else {
      if (entity.proyectoGTD) {
        const parentEntities = this.findEntitiesByPathOrName(entity.proyectoGTD, entityMap, "PGTD" /* PROYECTO_GTD */);
        for (const parentEntity of parentEntities) {
          if (parentEntity && parentEntity !== entity) {
            parentEntity.addChild(entity);
          }
        }
      }
      if (entity.proyectoQ && !entity.parent) {
        const parentEntities = this.findEntitiesByPathOrName(entity.proyectoQ, entityMap, "PQ" /* PROYECTO_Q */);
        for (const parentEntity of parentEntities) {
          if (parentEntity && parentEntity !== entity && !entity.parent) {
            parentEntity.addChild(entity);
          }
        }
      }
      if (entity.areaInteres && !entity.parent) {
        const parentEntities = this.findEntitiesByPathOrName(entity.areaInteres, entityMap, "AI" /* AREA_INTERES */);
        for (const parentEntity of parentEntities) {
          if (parentEntity && parentEntity !== entity && !entity.parent) {
            parentEntity.addChild(entity);
          }
        }
      }
      if (entity.areaVida && !entity.parent) {
        const parentEntities = this.findEntitiesByPathOrName(entity.areaVida, entityMap, "AV" /* AREA_VIDA */);
        for (const parentEntity of parentEntities) {
          if (parentEntity && parentEntity !== entity && !entity.parent) {
            parentEntity.addChild(entity);
          }
        }
      }
    }
  }
  /**
   * Busca una entidad por su ruta o nombre
   */
  findEntityByPathOrName(pathOrName, entityMap) {
    var _a;
    if (entityMap.has(pathOrName)) {
      return entityMap.get(pathOrName);
    }
    if (entityMap.has(pathOrName + ".md")) {
      return entityMap.get(pathOrName + ".md");
    }
    for (const entity of entityMap.values()) {
      if (entity.file.basename === pathOrName || entity.title === pathOrName) {
        return entity;
      }
      if ((_a = entity.metadata) == null ? void 0 : _a.aliases) {
        const aliases = Array.isArray(entity.metadata.aliases) ? entity.metadata.aliases : [entity.metadata.aliases];
        if (aliases.includes(pathOrName)) {
          return entity;
        }
      }
    }
    return null;
  }
  /**
   * Busca entidades por su ruta o nombre, compatible con arrays
   */
  findEntitiesByPathOrName(pathsOrNames, entityMap, requiredType) {
    const result = [];
    const searchValues = Array.isArray(pathsOrNames) ? pathsOrNames : [pathsOrNames];
    for (const value of searchValues) {
      const entity = this.findEntityByPathOrName(value, entityMap);
      if (entity && (!requiredType || entity.type === requiredType)) {
        result.push(entity);
      }
    }
    return result;
  }
  /**
   * Determina las entidades raíz según la entidad de enfoque
   */
  determineRootEntities(entities, focusEntity) {
    if (!focusEntity) {
      return entities.filter((entity) => !entity.parent);
    }
    const rootEntities = [];
    rootEntities.push(focusEntity);
    if (focusEntity.parent) {
      const siblings = entities.filter((entity) => entity !== focusEntity && entity.parent === focusEntity.parent);
    }
    return rootEntities;
  }
};

// src/modules/taskNavigator/services/TaskClassifier.ts
init_Task();
init_HierarchyViewModel();
init_Entity();
var TaskClassifier = class {
  /**
   * Clasifica todas las tareas en el modelo jerárquico
   */
  async classifyTasks(model) {
    try {
      this.initializeGTDLists(model);
      const allTasks = this.getAllTasks(model);
      model.allTasks = allTasks;
      for (const task of allTasks) {
        if (task.completed) {
          continue;
        }
        const listType = this.determineTaskList(task, allTasks);
        task.listType = listType;
        const tasksInList = model.gtdLists.get(listType) || [];
        tasksInList.push(task);
        model.gtdLists.set(listType, tasksInList);
      }
      model.filteredTasks = new Map(model.gtdLists);
    } catch (error) {
      console.error("Error al clasificar tareas:", error);
      throw error;
    }
  }
  /**
   * Inicializa las listas GTD vacías
   */
  initializeGTDLists(model) {
    model.gtdLists.clear();
    for (const listType of Object.values(TaskListType)) {
      model.gtdLists.set(listType, []);
    }
  }
  /**
   * Obtiene todas las tareas del modelo jerárquico
   */
  getAllTasks(model) {
    const allTasks = [];
    const processEntity = (entity) => {
      allTasks.push(...entity.tasks);
      for (const child of entity.children) {
        processEntity(child);
      }
    };
    for (const rootEntity of model.rootEntities) {
      processEntity(rootEntity);
    }
    return allTasks;
  }
  /**
   * Determina a qué lista GTD pertenece una tarea
   */
  determineTaskList(task, allTasks) {
    if (task.hasGTDTag("AlgunDia")) {
      return "somedayMaybe" /* SOMEDAY_MAYBE */;
    }
    if (task.hasGTDTag("EstaSemanaNo")) {
      return "notThisWeek" /* NOT_THIS_WEEK */;
    }
    if (task.hasContext("ProyectoGTD") || task.hasContext("Entregable")) {
      return "projects" /* PROJECTS */;
    }
    if (task.timing.dueDate && task.timing.startTime) {
      return "calendar" /* CALENDAR */;
    }
    if (this.isTaskWaiting(task, allTasks)) {
      return "waiting" /* WAITING */;
    }
    if (this.isTaskForToday(task)) {
      return "hopefullyToday" /* HOPEFULLY_TODAY */;
    }
    if (task.tags.people.length > 0 && task.tags.contexts.length === 0) {
      return "assigned" /* ASSIGNED */;
    }
    if (task.tags.contexts.length > 0) {
      return "nextActions" /* NEXT_ACTIONS */;
    }
    return "inbox" /* INBOX */;
  }
  /**
   * Determina si una tarea está en pausa (en espera)
   */
  isTaskWaiting(task, allTasks) {
    if (task.timing.startDate) {
      const startDate = new Date(task.timing.startDate);
      const today = /* @__PURE__ */ new Date();
      today.setHours(0, 0, 0, 0);
      if (startDate > today) {
        task.isBlocked = true;
        task.blockReason = `Esperando hasta ${task.timing.startDate}`;
        return true;
      }
    }
    if (task.dependencies.length > 0) {
      const incompleteDependencies = task.dependencies.filter((depId) => {
        const dependencyTask = allTasks.find((t) => t.taskId === depId || t.id === depId);
        return dependencyTask && !dependencyTask.completed;
      });
      if (incompleteDependencies.length > 0) {
        task.isBlocked = true;
        task.blockReason = `Esperando a que se completen ${incompleteDependencies.length} tareas dependientes`;
        return true;
      }
    }
    if (task.timing.week) {
      const weekRegex = /(\d{4})-W(\d{2})/;
      const match2 = task.timing.week.match(weekRegex);
      if (match2) {
        const year = parseInt(match2[1]);
        const week = parseInt(match2[2]);
        const today = /* @__PURE__ */ new Date();
        const currentYear = today.getFullYear();
        const currentWeek = this.getWeekNumber(today);
        if (year > currentYear || year === currentYear && week > currentWeek) {
          task.isBlocked = true;
          task.blockReason = `Programado para la semana ${task.timing.week}`;
          return true;
        }
      }
    }
    return false;
  }
  /**
   * Determina si una tarea es para "Ojalá Hoy"
   */
  isTaskForToday(task) {
    const today = /* @__PURE__ */ new Date();
    today.setHours(0, 0, 0, 0);
    const todayStr = today.toISOString().split("T")[0];
    if ((task.timing.dueDate === todayStr || task.timing.scheduledDate === todayStr) && !task.timing.startTime) {
      return true;
    }
    return false;
  }
  /**
   * Obtiene el número de semana del año de una fecha
   */
  getWeekNumber(date) {
    const firstDayOfYear = new Date(date.getFullYear(), 0, 1);
    const pastDaysOfYear = (date.getTime() - firstDayOfYear.getTime()) / 864e5;
    return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);
  }
};

// src/modules/taskNavigator/components/ViewRenderer.ts
init_HierarchyViewModel();

// src/modules/taskNavigator/components/FilterPanel.ts
init_HierarchyViewModel();
init_Task();
var FilterPanel = class {
  constructor(onApplyFilters) {
    this.containerShown = true;
    this.onApplyFilters = onApplyFilters;
    this.currentFilters = {
      showCompleted: false,
      showActive: true,
      showPaused: true,
      showStopped: false,
      showArchived: false,
      showAreasVida: true,
      showAreasInteres: true,
      showProyectosQ: true,
      showProyectosGTD: true,
      showOtherEntities: true,
      contexts: [],
      people: [],
      enabledLists: Object.values(TaskListType),
      searchText: "",
      daysRange: 7
    };
  }
  /**
   * Renderiza el panel de filtros en el contenedor proporcionado
   */
  render(container) {
    this.container = container;
    const filterPanel = container.createDiv({ cls: "task-navigator-filter-panel" });
    const header = filterPanel.createDiv({ cls: "filter-panel-header" });
    header.createEl("h3", { text: "Filtros", cls: "filter-panel-title" });
    const toggleButton = header.createDiv({ cls: "filter-panel-toggle" });
    toggleButton.innerHTML = this.containerShown ? "\u25BC" : "\u25B6";
    toggleButton.addEventListener("click", () => this.togglePanel(toggleButton));
    const content = filterPanel.createDiv({ cls: "filter-panel-content" });
    if (!this.containerShown) {
      content.style.display = "none";
    }
    this.createSearchSection(content);
    this.createEntityStateSection(content);
    this.createEntityTypeSection(content);
    this.createGTDListsSection(content);
    this.createContextsSection(content);
    this.createPeopleSection(content);
    this.createDateRangeSection(content);
    const actionsDiv = content.createDiv({ cls: "filter-panel-actions" });
    const applyButton = actionsDiv.createEl("button", {
      text: "Aplicar Filtros",
      cls: "filter-apply-button"
    });
    applyButton.addEventListener("click", () => this.applyFilters());
    const resetButton = actionsDiv.createEl("button", {
      text: "Restablecer",
      cls: "filter-reset-button"
    });
    resetButton.addEventListener("click", () => this.resetFilters());
    container.addEventListener("task-navigator-update-filters", (event) => {
      var _a;
      console.log("[TaskNavigator] Evento de actualizaci\xF3n de filtros recibido", event.detail);
      if ((_a = event.detail) == null ? void 0 : _a.filters) {
        this.currentFilters = { ...this.currentFilters, ...event.detail.filters };
        this.updateUI();
        this.applyFilters();
      }
    });
  }
  /**
   * Cambia la visibilidad del panel de filtros
   */
  togglePanel(toggleButton) {
    this.containerShown = !this.containerShown;
    const content = this.container.querySelector(".filter-panel-content");
    if (this.containerShown) {
      content.style.display = "block";
      toggleButton.innerHTML = "\u25BC";
    } else {
      content.style.display = "none";
      toggleButton.innerHTML = "\u25B6";
    }
  }
  /**
   * Crea la sección de búsqueda de texto
   */
  createSearchSection(container) {
    const section = container.createDiv({ cls: "filter-section" });
    section.createEl("h4", { text: "B\xFAsqueda", cls: "filter-section-title" });
    const searchInput = section.createEl("input", {
      type: "text",
      placeholder: "Buscar tareas o entidades...",
      cls: "filter-search-input"
    });
    searchInput.value = this.currentFilters.searchText;
    searchInput.addEventListener("input", (e) => {
      this.currentFilters.searchText = e.target.value;
    });
  }
  /**
   * Crea la sección de filtros por estado de entidad
   */
  createEntityStateSection(container) {
    const section = container.createDiv({ cls: "filter-section" });
    section.createEl("h4", { text: "Estados", cls: "filter-section-title" });
    this.createCheckbox(section, "showActive", "\u{1F7E2} Activo", this.currentFilters.showActive);
    this.createCheckbox(section, "showPaused", "\u{1F7E1} En Pausa", this.currentFilters.showPaused);
    this.createCheckbox(section, "showStopped", "\u{1F534} Detenido", this.currentFilters.showStopped);
    this.createCheckbox(section, "showArchived", "\u{1F535} Archivado", this.currentFilters.showArchived);
    this.createCheckbox(section, "showCompleted", "\u2705 Tareas Completadas", this.currentFilters.showCompleted);
  }
  /**
   * Crea la sección de filtros por tipo de entidad
   */
  createEntityTypeSection(container) {
    const section = container.createDiv({ cls: "filter-section" });
    section.createEl("h4", { text: "Tipos de Entidad", cls: "filter-section-title" });
    this.createCheckbox(section, "showAreasVida", "\xC1reas de Vida", this.currentFilters.showAreasVida);
    this.createCheckbox(section, "showAreasInteres", "\xC1reas de Inter\xE9s", this.currentFilters.showAreasInteres);
    this.createCheckbox(section, "showProyectosQ", "Proyectos Q", this.currentFilters.showProyectosQ);
    this.createCheckbox(section, "showProyectosGTD", "Proyectos GTD", this.currentFilters.showProyectosGTD);
    this.createCheckbox(section, "showOtherEntities", "Otras Entidades", this.currentFilters.showOtherEntities);
  }
  /**
   * Crea la sección de filtros por listas GTD
   */
  createGTDListsSection(container) {
    const section = container.createDiv({ cls: "filter-section" });
    section.createEl("h4", { text: "Listas GTD", cls: "filter-section-title" });
    const listLabels = {
      ["inbox" /* INBOX */]: "Bandeja de Entrada",
      ["nextActions" /* NEXT_ACTIONS */]: "Pr\xF3ximas Acciones",
      ["calendar" /* CALENDAR */]: "Calendario",
      ["hopefullyToday" /* HOPEFULLY_TODAY */]: "Ojal\xE1 Hoy",
      ["assigned" /* ASSIGNED */]: "Asignadas",
      ["projects" /* PROJECTS */]: "Proyectos",
      ["somedayMaybe" /* SOMEDAY_MAYBE */]: "Alg\xFAn D\xEDa / Tal Vez",
      ["notThisWeek" /* NOT_THIS_WEEK */]: "Esta Semana No",
      ["waiting" /* WAITING */]: "En Pausa"
    };
    for (const listType of Object.values(TaskListType)) {
      const isEnabled = this.currentFilters.enabledLists.includes(listType);
      const checkboxDiv = section.createDiv({ cls: "filter-checkbox-container" });
      const checkbox = checkboxDiv.createEl("input", {
        type: "checkbox",
        cls: "filter-checkbox"
      });
      checkbox.id = `list-${listType}`;
      checkbox.checked = isEnabled;
      checkbox.addEventListener("change", (e) => {
        const checked = e.target.checked;
        if (checked) {
          if (!this.currentFilters.enabledLists.includes(listType)) {
            this.currentFilters.enabledLists.push(listType);
          }
        } else {
          this.currentFilters.enabledLists = this.currentFilters.enabledLists.filter(
            (type2) => type2 !== listType
          );
        }
      });
      const label = checkboxDiv.createEl("label", {
        text: listLabels[listType] || listType,
        cls: "filter-checkbox-label"
      });
      label.htmlFor = checkbox.id;
    }
  }
  /**
   * Crea la sección de filtros por contextos
   */
  createContextsSection(container) {
    const section = container.createDiv({ cls: "filter-section" });
    section.createEl("h4", { text: "Contextos (#cx)", cls: "filter-section-title" });
    const contextInput = section.createEl("input", {
      type: "text",
      placeholder: "A\xF1adir contexto (cx-nombre)",
      cls: "filter-text-input"
    });
    const addButton = section.createEl("button", {
      text: "A\xF1adir",
      cls: "filter-add-button"
    });
    addButton.addEventListener("click", () => {
      const context = contextInput.value.trim();
      if (context && !this.currentFilters.contexts.includes(context)) {
        const formattedContext = context.startsWith("cx-") ? context : `cx-${context}`;
        this.currentFilters.contexts.push(formattedContext);
        this.updateContextTags(section);
        contextInput.value = "";
      }
    });
    contextInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        addButton.click();
      }
    });
    const contextTags = section.createDiv({ cls: "filter-tags-container" });
    this.updateContextTags = (parent) => {
      const container2 = parent.querySelector(".filter-tags-container");
      container2.empty();
      for (const context of this.currentFilters.contexts) {
        const tag = container2.createDiv({ cls: "filter-tag" });
        tag.createSpan({ text: context });
        const removeButton = tag.createSpan({ cls: "filter-tag-remove", text: "\xD7" });
        removeButton.addEventListener("click", () => {
          this.currentFilters.contexts = this.currentFilters.contexts.filter((c) => c !== context);
          this.updateContextTags(parent);
        });
      }
    };
    this.updateContextTags(section);
  }
  /**
   * Crea la sección de filtros por personas asignadas
   */
  createPeopleSection(container) {
    const section = container.createDiv({ cls: "filter-section" });
    section.createEl("h4", { text: "Personas (#px)", cls: "filter-section-title" });
    const personInput = section.createEl("input", {
      type: "text",
      placeholder: "A\xF1adir persona (px-nombre)",
      cls: "filter-text-input"
    });
    const addButton = section.createEl("button", {
      text: "A\xF1adir",
      cls: "filter-add-button"
    });
    addButton.addEventListener("click", () => {
      const person = personInput.value.trim();
      if (person && !this.currentFilters.people.includes(person)) {
        const formattedPerson = person.startsWith("px-") ? person : `px-${person}`;
        this.currentFilters.people.push(formattedPerson);
        this.updatePeopleTags(section);
        personInput.value = "";
      }
    });
    personInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        addButton.click();
      }
    });
    const peopleTags = section.createDiv({ cls: "filter-tags-container" });
    this.updatePeopleTags = (parent) => {
      const container2 = parent.querySelector(".filter-tags-container");
      container2.empty();
      for (const person of this.currentFilters.people) {
        const tag = container2.createDiv({ cls: "filter-tag" });
        tag.createSpan({ text: person });
        const removeButton = tag.createSpan({ cls: "filter-tag-remove", text: "\xD7" });
        removeButton.addEventListener("click", () => {
          this.currentFilters.people = this.currentFilters.people.filter((p) => p !== person);
          this.updatePeopleTags(parent);
        });
      }
    };
    this.updatePeopleTags(section);
  }
  /**
   * Crea la sección de filtros por rango de fechas
   */
  createDateRangeSection(container) {
    const section = container.createDiv({ cls: "filter-section" });
    section.createEl("h4", { text: "Rango de D\xEDas", cls: "filter-section-title" });
    const sliderContainer = section.createDiv({ cls: "filter-slider-container" });
    const slider = sliderContainer.createEl("input", {
      type: "range",
      cls: "filter-slider",
      attr: {
        min: "1",
        max: "30",
        step: "1",
        value: this.currentFilters.daysRange.toString()
      }
    });
    const valueDisplay = sliderContainer.createDiv({ cls: "filter-slider-value" });
    valueDisplay.textContent = `${this.currentFilters.daysRange} d\xEDas`;
    slider.addEventListener("input", (e) => {
      const value = parseInt(e.target.value);
      this.currentFilters.daysRange = value;
      valueDisplay.textContent = `${value} d\xEDas`;
    });
  }
  /**
   * Crea un checkbox con etiqueta
   */
  createCheckbox(container, filterKey, label, isChecked) {
    const checkboxDiv = container.createDiv({ cls: "filter-checkbox-container" });
    const checkbox = checkboxDiv.createEl("input", {
      type: "checkbox",
      cls: "filter-checkbox"
    });
    checkbox.id = `filter-${filterKey}`;
    checkbox.checked = isChecked;
    checkbox.addEventListener("change", (e) => {
      this.currentFilters[filterKey] = e.target.checked;
    });
    const labelEl = checkboxDiv.createEl("label", {
      text: label,
      cls: "filter-checkbox-label"
    });
    labelEl.htmlFor = checkbox.id;
  }
  /**
   * Aplica los filtros actuales
   */
  applyFilters() {
    this.onApplyFilters({ ...this.currentFilters });
  }
  /**
   * Restablece los filtros a sus valores por defecto
   */
  resetFilters() {
    this.currentFilters = {
      showCompleted: false,
      showActive: true,
      showPaused: true,
      showStopped: false,
      showArchived: false,
      showAreasVida: true,
      showAreasInteres: true,
      showProyectosQ: true,
      showProyectosGTD: true,
      showOtherEntities: true,
      contexts: [],
      people: [],
      enabledLists: Object.values(TaskListType),
      searchText: "",
      daysRange: 7
    };
    this.updateUI();
    this.applyFilters();
  }
  /**
   * Actualiza la UI para reflejar los valores actuales de los filtros
   */
  updateUI() {
    this.updateCheckbox("showActive", this.currentFilters.showActive);
    this.updateCheckbox("showPaused", this.currentFilters.showPaused);
    this.updateCheckbox("showStopped", this.currentFilters.showStopped);
    this.updateCheckbox("showArchived", this.currentFilters.showArchived);
    this.updateCheckbox("showCompleted", this.currentFilters.showCompleted);
    this.updateCheckbox("showAreasVida", this.currentFilters.showAreasVida);
    this.updateCheckbox("showAreasInteres", this.currentFilters.showAreasInteres);
    this.updateCheckbox("showProyectosQ", this.currentFilters.showProyectosQ);
    this.updateCheckbox("showProyectosGTD", this.currentFilters.showProyectosGTD);
    this.updateCheckbox("showOtherEntities", this.currentFilters.showOtherEntities);
    for (const listType of Object.values(TaskListType)) {
      const checkbox = document.getElementById(`list-${listType}`);
      if (checkbox) {
        checkbox.checked = this.currentFilters.enabledLists.includes(listType);
      }
    }
    const searchInput = this.container.querySelector(".filter-search-input");
    if (searchInput) {
      searchInput.value = this.currentFilters.searchText;
    }
    const slider = this.container.querySelector(".filter-slider");
    const valueDisplay = this.container.querySelector(".filter-slider-value");
    if (slider && valueDisplay) {
      slider.value = this.currentFilters.daysRange.toString();
      valueDisplay.textContent = `${this.currentFilters.daysRange} d\xEDas`;
    }
    const contextSection = this.container.querySelectorAll(".filter-section")[5];
    if (contextSection) {
      this.updateContextTags(contextSection);
    }
    const peopleSection = this.container.querySelectorAll(".filter-section")[6];
    if (peopleSection) {
      this.updatePeopleTags(peopleSection);
    }
  }
  /**
   * Actualiza el estado de un checkbox
   */
  updateCheckbox(filterKey, isChecked) {
    const checkbox = document.getElementById(`filter-${filterKey}`);
    if (checkbox) {
      checkbox.checked = isChecked;
    }
  }
};

// src/modules/taskNavigator/components/ViewRenderer.ts
init_Entity();
init_Task();

// src/modules/taskNavigator/utils/NavigationUtils.ts
var import_obsidian85 = require("obsidian");
var NavigationUtils4 = class {
  /**
   * Abre una entidad en una nueva hoja (pestaña)
   */
  openEntityInNewLeaf(file) {
    try {
      app.workspace.getLeaf(true).openFile(file);
    } catch (error) {
      console.error("Error al abrir entidad:", error);
      new Notice(`Error al abrir archivo: ${error.message}`);
    }
  }
  /**
   * Abre una entidad y navega a una tarea específica
   */
  openTaskInEntity(file, lineNumber) {
    try {
      app.workspace.getLeaf(true).openFile(file, {
        eState: { line: lineNumber - 1 }
      }).then(() => {
        this.highlightLine(lineNumber - 1);
      });
    } catch (error) {
      console.error("Error al abrir tarea:", error);
      app.workspace.getLeaf(true).openFile(file).then(() => {
        const view = app.workspace.getActiveViewOfType("markdown");
        if (view && view.editor) {
          view.editor.setCursor({ line: lineNumber - 1, ch: 0 });
          view.editor.scrollIntoView({ from: { line: lineNumber - 1, ch: 0 }, to: { line: lineNumber - 1, ch: 0 } }, true);
          this.highlightLine(lineNumber - 1);
        }
      });
    }
  }
  /**
   * Resalta visualmente una línea en el editor
   */
  highlightLine(lineNumber) {
    setTimeout(() => {
      const view = app.workspace.getActiveViewOfType("markdown");
      if (!view || !view.editor)
        return;
      if (view.editor.cm && view.editor.cm.dom) {
        const lines = view.editor.cm.dom.querySelectorAll(".cm-line");
        if (lines && lines.length > lineNumber) {
          const line = lines[lineNumber];
          line.classList.add("task-highlighted-line");
          setTimeout(() => {
            line.classList.remove("task-highlighted-line");
          }, 2e3);
        }
      } else if (view.editor.lineDiv) {
        const lines = view.editor.lineDiv.querySelectorAll(".CodeMirror-line");
        if (lines && lines.length > lineNumber) {
          const line = lines[lineNumber];
          line.classList.add("task-highlighted-line");
          setTimeout(() => {
            line.classList.remove("task-highlighted-line");
          }, 2e3);
        }
      }
    }, 100);
  }
};

// src/modules/taskNavigator/components/ViewRenderer.ts
var ViewRenderer = class {
  constructor() {
    this.navigationUtils = new NavigationUtils4();
  }
  /**
   * Renderiza la vista completa del navegador de tareas
   */
  // Modificar el método render de ViewRenderer para añadir manejo de eventos
  /**
   * Renderiza la vista completa del navegador de tareas
   */
  render(containerEl, model, filterPanel) {
    containerEl.empty();
    containerEl.addClass("task-navigator-container");
    const header = this.createHeader(containerEl, model);
    const viewOptions = this.createViewOptions(containerEl, model);
    const contentContainer = containerEl.createDiv({ cls: "task-navigator-content" });
    const filterContainer = containerEl.createDiv({ cls: "task-navigator-filter-container" });
    filterPanel.render(filterContainer);
    containerEl.addEventListener("task-navigator-reset-filters", () => {
      console.log("[TaskNavigator] Evento de restablecer filtros recibido");
      const resetFilters = {
        showCompleted: true,
        // Mostrar tareas completadas
        showActive: true,
        // Mostrar entidades activas
        showPaused: true,
        // Mostrar entidades pausadas
        showStopped: true,
        // Mostrar entidades detenidas
        showArchived: true,
        // Mostrar entidades archivadas
        showAreasVida: true,
        // Mostrar Áreas de Vida
        showAreasInteres: true,
        // Mostrar Áreas de Interés 
        showProyectosQ: true,
        // Mostrar Proyectos Q
        showProyectosGTD: true,
        // Mostrar Proyectos GTD
        showOtherEntities: true,
        // Mostrar otras entidades
        contexts: [],
        // Sin filtro de contextos específicos
        people: [],
        // Sin filtro de personas específicas
        enabledLists: Object.values(TaskListType),
        // Todas las listas GTD
        searchText: "",
        // Sin texto de búsqueda
        daysRange: 30
        // Mayor rango de días
      };
      containerEl.dispatchEvent(new CustomEvent("task-navigator-update-filters", {
        detail: { filters: resetFilters }
      }));
      model.filters = resetFilters;
      model.applyFilters(resetFilters);
      contentContainer.empty();
      switch (model.viewMode) {
        case "hierarchy" /* HIERARCHY */:
          this.renderHierarchyView(contentContainer, model);
          break;
        case "gtdLists" /* GTD_LISTS */:
          this.renderGTDListsView(contentContainer, model);
          break;
        case "combined" /* COMBINED */:
          this.renderCombinedView(contentContainer, model);
          break;
      }
    });
    switch (model.viewMode) {
      case "hierarchy" /* HIERARCHY */:
        this.renderHierarchyView(contentContainer, model);
        break;
      case "gtdLists" /* GTD_LISTS */:
        this.renderGTDListsView(contentContainer, model);
        break;
      case "combined" /* COMBINED */:
        this.renderCombinedView(contentContainer, model);
        break;
    }
  }
  /**
   * Crea el encabezado de la vista
   */
  createHeader(containerEl, model) {
    const header = containerEl.createDiv({ cls: "task-navigator-header" });
    header.createEl("h1", {
      text: "Navegador de Tareas GTD",
      cls: "task-navigator-title"
    });
    const subtitle = header.createEl("div", { cls: "task-navigator-subtitle" });
    if (model.focusEntity) {
      const entityName = model.focusEntity.title;
      const entityType = this.getEntityTypeLabel(model.focusEntity.type);
      subtitle.createSpan({ text: `Contexto: ${entityType} - ${entityName}` });
      const openButton = subtitle.createEl("button", {
        cls: "task-navigator-open-button",
        text: "Abrir"
      });
      openButton.addEventListener("click", () => {
        this.navigationUtils.openEntityInNewLeaf(model.focusEntity.file);
      });
    } else {
      subtitle.createSpan({ text: "Mostrando vista global" });
    }
    const stats = header.createDiv({ cls: "task-navigator-stats" });
    const totalEntities = model.allEntities.length;
    const totalTasks = model.allTasks.length;
    const completedTasks = model.allTasks.filter((task) => task.completed).length;
    const pendingTasks = totalTasks - completedTasks;
    stats.createEl("span", {
      text: `${totalEntities} entidades | ${pendingTasks}/${totalTasks} tareas pendientes`,
      cls: "task-navigator-stats-text"
    });
    const refreshButton = header.createEl("button", {
      cls: "task-navigator-refresh-button",
      text: "Actualizar"
    });
    refreshButton.addEventListener("click", () => {
      containerEl.dispatchEvent(new CustomEvent("task-navigator-refresh"));
    });
    return header;
  }
  /**
   * Crea los botones de opciones de vista
   */
  createViewOptions(containerEl, model) {
    const viewOptions = containerEl.createDiv({ cls: "task-navigator-view-options" });
    const hierarchyButton = viewOptions.createEl("button", {
      cls: `task-navigator-view-button ${model.viewMode === "hierarchy" /* HIERARCHY */ ? "active" : ""}`,
      text: "Vista Jer\xE1rquica"
    });
    hierarchyButton.addEventListener("click", () => {
      containerEl.dispatchEvent(new CustomEvent("task-navigator-view-change", {
        detail: { viewMode: "hierarchy" /* HIERARCHY */ }
      }));
    });
    const gtdListsButton = viewOptions.createEl("button", {
      cls: `task-navigator-view-button ${model.viewMode === "gtdLists" /* GTD_LISTS */ ? "active" : ""}`,
      text: "Listas GTD"
    });
    gtdListsButton.addEventListener("click", () => {
      containerEl.dispatchEvent(new CustomEvent("task-navigator-view-change", {
        detail: { viewMode: "gtdLists" /* GTD_LISTS */ }
      }));
    });
    const combinedButton = viewOptions.createEl("button", {
      cls: `task-navigator-view-button ${model.viewMode === "combined" /* COMBINED */ ? "active" : ""}`,
      text: "Vista Combinada"
    });
    combinedButton.addEventListener("click", () => {
      containerEl.dispatchEvent(new CustomEvent("task-navigator-view-change", {
        detail: { viewMode: "combined" /* COMBINED */ }
      }));
    });
    return viewOptions;
  }
  /**
   * Renderiza la vista jerárquica
   */
  renderHierarchyView(containerEl, model) {
    const hierarchyTree = containerEl.createDiv({ cls: "hierarchy-tree-container" });
    if (model.filteredEntities.length === 0) {
      hierarchyTree.createEl("div", {
        cls: "hierarchy-tree-empty",
        text: "No hay entidades que coincidan con los filtros aplicados."
      });
      this.renderDiagnosticInfo(hierarchyTree, model);
      return;
    }
    this.renderEntityTree(hierarchyTree, model.filteredEntities, 0);
  }
  /**
   * Renderiza la vista de listas GTD
   */
  renderGTDListsView(containerEl, model) {
    const gtdListsContainer = containerEl.createDiv({ cls: "gtd-lists-container" });
    if (model.filters.enabledLists.length === 0) {
      gtdListsContainer.createEl("div", {
        cls: "gtd-lists-empty",
        text: "No hay listas GTD habilitadas en los filtros."
      });
      this.renderDiagnosticInfo(gtdListsContainer, model);
      return;
    }
    let totalTasksInLists = 0;
    model.filters.enabledLists.forEach((listType) => {
      var _a;
      totalTasksInLists += ((_a = model.filteredTasks.get(listType)) == null ? void 0 : _a.length) || 0;
    });
    if (totalTasksInLists === 0) {
      gtdListsContainer.createEl("div", {
        cls: "gtd-lists-empty",
        text: "No hay tareas que coincidan con los filtros aplicados."
      });
      this.renderDiagnosticInfo(gtdListsContainer, model);
      return;
    }
    for (const listType of model.filters.enabledLists) {
      const tasks = model.filteredTasks.get(listType) || [];
      this.renderGTDList(gtdListsContainer, listType, tasks);
    }
  }
  /**
   * Renderiza la vista combinada (jerarquía + listas GTD)
   */
  renderCombinedView(containerEl, model) {
    const combinedContainer = containerEl.createDiv({ cls: "combined-view-container" });
    const hierarchyColumn = combinedContainer.createDiv({ cls: "combined-view-column hierarchy-column" });
    hierarchyColumn.createEl("h2", { text: "Jerarqu\xEDa", cls: "combined-view-title" });
    this.renderHierarchyView(hierarchyColumn, model);
    const gtdColumn = combinedContainer.createDiv({ cls: "combined-view-column gtd-column" });
    gtdColumn.createEl("h2", { text: "Listas GTD", cls: "combined-view-title" });
    this.renderGTDListsView(gtdColumn, model);
  }
  /**
   * Renderiza recursivamente el árbol de entidades
   */
  renderEntityTree(container, entities, level) {
    const treeList = container.createEl("ul", { cls: `hierarchy-tree-list level-${level}` });
    for (const entity of entities) {
      const treeItem = treeList.createEl("li", { cls: "hierarchy-tree-item" });
      const header = treeItem.createDiv({ cls: `hierarchy-tree-entity entity-type-${entity.type.toLowerCase()}` });
      const entityInfo = header.createDiv({ cls: "hierarchy-tree-entity-info" });
      const expandIcon = entityInfo.createSpan({ cls: "hierarchy-tree-expand-icon", text: "\u25BC" });
      expandIcon.setAttribute("aria-expanded", "true");
      expandIcon.addEventListener("click", (e) => {
        e.stopPropagation();
        const isExpanded = expandIcon.getAttribute("aria-expanded") === "true";
        expandIcon.setAttribute("aria-expanded", isExpanded ? "false" : "true");
        expandIcon.textContent = isExpanded ? "\u25B6" : "\u25BC";
        const content2 = treeItem.querySelector(".hierarchy-tree-content");
        if (content2) {
          content2.toggleClass("collapsed", !isExpanded);
        }
      });
      if (entity.state) {
        entityInfo.createSpan({
          cls: `entity-state state-${this.getEntityStateClass(entity.state)}`,
          text: entity.state
        });
      }
      entityInfo.createSpan({
        cls: "entity-type",
        text: this.getEntityTypeLabel(entity.type)
      });
      const titleLink = entityInfo.createEl("a", {
        cls: "entity-title",
        text: entity.title
      });
      titleLink.addEventListener("click", () => {
        this.navigationUtils.openEntityInNewLeaf(entity.file);
      });
      const taskCount = entity.tasks.filter((task) => !task.completed).length;
      if (taskCount > 0) {
        entityInfo.createSpan({
          cls: "entity-task-count",
          text: `${taskCount}`
        });
      }
      const content = treeItem.createDiv({ cls: "hierarchy-tree-content" });
      if (entity.tasks.length > 0) {
        this.renderTasksList(content, entity.tasks, entity);
      }
      if (entity.children && entity.children.length > 0) {
        this.renderEntityTree(content, entity.children, level + 1);
      }
    }
  }
  /**
   * Renderiza una lista de tareas para una entidad
   */
  renderTasksList(container, tasks, parentEntity) {
    const tasksContainer = container.createDiv({ cls: "entity-tasks-container" });
    tasksContainer.createEl("h3", {
      cls: "entity-tasks-title",
      text: "Tareas"
    });
    const filteredTasks = tasks.filter((task) => !task.completed);
    if (filteredTasks.length === 0) {
      tasksContainer.createEl("div", {
        cls: "entity-tasks-empty",
        text: "No hay tareas pendientes"
      });
      return;
    }
    const tasksList = tasksContainer.createEl("ul", { cls: "entity-tasks-list" });
    for (const task of filteredTasks) {
      this.renderTaskItem(tasksList, task, parentEntity);
    }
  }
  /**
   * Renderiza un elemento de tarea
   */
  renderTaskItem(container, task, parentEntity) {
    const taskItem = container.createEl("li", {
      cls: `task-item ${task.completed ? "task-completed" : ""} ${task.isBlocked ? "task-blocked" : ""}`
    });
    const taskInfo = taskItem.createDiv({ cls: "task-info" });
    taskInfo.createSpan({
      cls: `task-checkbox ${task.completed ? "checked" : ""}`,
      text: task.completed ? "\u2713" : " "
    });
    if (task.priority !== "normal" /* NORMAL */) {
      taskInfo.createSpan({
        cls: `task-priority priority-${task.priority}`,
        text: this.getPriorityIcon(task.priority)
      });
    }
    const taskText = taskInfo.createSpan({
      cls: "task-text",
      text: task.text
    });
    taskItem.addEventListener("click", () => {
      this.navigationUtils.openTaskInEntity(task.file, task.lineInfo.number);
    });
    if (task.timing.dueDate || task.timing.scheduledDate) {
      const dateClass = task.isOverdue() ? "task-date-overdue" : task.isForToday() ? "task-date-today" : "task-date-future";
      let dateText = "";
      if (task.timing.dueDate) {
        dateText = `\u{1F4C5} ${task.timing.dueDate}`;
      } else if (task.timing.scheduledDate) {
        dateText = `\u23F3 ${task.timing.scheduledDate}`;
      }
      taskInfo.createSpan({
        cls: `task-date ${dateClass}`,
        text: dateText
      });
    }
    const taskMeta = taskItem.createDiv({ cls: "task-meta" });
    if (task.listType) {
      taskMeta.createSpan({
        cls: `task-list-type list-${task.listType}`,
        text: this.getListTypeLabel(task.listType)
      });
    }
    if (task.tags.contexts.length > 0) {
      const contextsContainer = taskMeta.createDiv({ cls: "task-contexts" });
      contextsContainer.createSpan({ cls: "task-meta-label", text: "Contextos:" });
      for (const context of task.tags.contexts) {
        contextsContainer.createSpan({
          cls: "task-context-tag",
          text: context
        });
      }
    }
    if (task.tags.people.length > 0) {
      const peopleContainer = taskMeta.createDiv({ cls: "task-people" });
      peopleContainer.createSpan({ cls: "task-meta-label", text: "Asignada a:" });
      for (const person of task.tags.people) {
        peopleContainer.createSpan({
          cls: "task-person-tag",
          text: person
        });
      }
    }
    if (task.isBlocked && task.blockReason) {
      taskMeta.createDiv({
        cls: "task-block-reason",
        text: task.blockReason
      });
    }
  }
  /**
   * Renderiza una lista GTD
   */
  renderGTDList(container, listType, tasks) {
    const listContainer = container.createDiv({ cls: `gtd-list gtd-list-${listType}` });
    const listHeader = listContainer.createDiv({ cls: "gtd-list-header" });
    listHeader.createEl("h2", {
      cls: "gtd-list-title",
      text: `${this.getListTypeLabel(listType)} (${tasks.length})`
    });
    listHeader.createEl("div", {
      cls: "gtd-list-description",
      text: this.getListTypeDescription(listType)
    });
    if (tasks.length === 0) {
      listContainer.createEl("div", {
        cls: "gtd-list-empty",
        text: "No hay tareas en esta lista"
      });
      return;
    }
    const tasksList = listContainer.createEl("ul", { cls: "gtd-tasks-list" });
    const sortedTasks = this.sortTasksForList(tasks, listType);
    for (const task of sortedTasks) {
      this.renderGTDTaskItem(tasksList, task);
    }
  }
  /**
   * Renderiza un elemento de tarea para una lista GTD
   */
  renderGTDTaskItem(container, task) {
    const taskItem = container.createEl("li", {
      cls: `gtd-task-item ${task.completed ? "task-completed" : ""} ${task.isBlocked ? "task-blocked" : ""}`
    });
    if (task.parentEntity) {
      const entityInfo = taskItem.createDiv({ cls: "gtd-task-entity-info" });
      if (task.parentEntity.state) {
        entityInfo.createSpan({
          cls: `entity-state state-${this.getEntityStateClass(task.parentEntity.state)}`,
          text: task.parentEntity.state
        });
      }
      const entityLink = entityInfo.createEl("a", {
        cls: "entity-link",
        text: `${this.getEntityTypeLabel(task.parentEntity.type)}: ${task.parentEntity.title}`
      });
      entityLink.addEventListener("click", () => {
        this.navigationUtils.openEntityInNewLeaf(task.parentEntity.file);
      });
    }
    const taskInfo = taskItem.createDiv({ cls: "gtd-task-info" });
    taskInfo.createSpan({
      cls: `task-checkbox ${task.completed ? "checked" : ""}`,
      text: task.completed ? "\u2713" : " "
    });
    if (task.priority !== "normal" /* NORMAL */) {
      taskInfo.createSpan({
        cls: `task-priority priority-${task.priority}`,
        text: this.getPriorityIcon(task.priority)
      });
    }
    const taskText = taskInfo.createSpan({
      cls: "task-text",
      text: task.text
    });
    taskItem.addEventListener("click", () => {
      this.navigationUtils.openTaskInEntity(task.file, task.lineInfo.number);
    });
    const timingInfo = taskItem.createDiv({ cls: "gtd-task-timing" });
    if (task.timing.dueDate) {
      const dateClass = task.isOverdue() ? "task-date-overdue" : task.isForToday() ? "task-date-today" : "task-date-future";
      timingInfo.createSpan({
        cls: `task-date ${dateClass}`,
        text: `\u{1F4C5} ${task.timing.dueDate}`
      });
    }
    if (task.timing.scheduledDate && !task.timing.dueDate) {
      const dateClass = task.isOverdue() ? "task-date-overdue" : task.isForToday() ? "task-date-today" : "task-date-future";
      timingInfo.createSpan({
        cls: `task-date ${dateClass}`,
        text: `\u23F3 ${task.timing.scheduledDate}`
      });
    }
    if (task.timing.startTime) {
      timingInfo.createSpan({
        cls: "task-time",
        text: `${task.timing.startTime}${task.timing.endTime ? ` - ${task.timing.endTime}` : ""}`
      });
    }
    if (task.timing.duration) {
      let durationText = "";
      if (task.timing.duration >= 60) {
        const hours = Math.floor(task.timing.duration / 60);
        const minutes = task.timing.duration % 60;
        durationText = `${hours}h${minutes > 0 ? ` ${minutes}min` : ""}`;
      } else {
        durationText = `${task.timing.duration}min`;
      }
      timingInfo.createSpan({
        cls: "task-duration",
        text: durationText
      });
    }
    if (task.timing.week) {
      timingInfo.createSpan({
        cls: "task-week",
        text: `Semana: ${task.timing.week}`
      });
    }
    const tagsInfo = taskItem.createDiv({ cls: "gtd-task-tags" });
    for (const context of task.tags.contexts) {
      tagsInfo.createSpan({
        cls: "task-context-tag",
        text: context
      });
    }
    for (const person of task.tags.people) {
      tagsInfo.createSpan({
        cls: "task-person-tag",
        text: person
      });
    }
    for (const tag of task.tags.gtdTags.concat(task.tags.otherTags)) {
      tagsInfo.createSpan({
        cls: "task-other-tag",
        text: tag
      });
    }
    if (task.isBlocked && task.blockReason) {
      taskItem.createDiv({
        cls: "gtd-task-block-reason",
        text: task.blockReason
      });
    }
  }
  /**
   * Ordena las tareas según el tipo de lista GTD
   */
  sortTasksForList(tasks, listType) {
    const tasksCopy = [...tasks];
    switch (listType) {
      case "inbox" /* INBOX */:
        return tasksCopy;
      case "nextActions" /* NEXT_ACTIONS */:
        return tasksCopy.sort((a, b) => {
          const contextA = a.tags.contexts[0] || "";
          const contextB = b.tags.contexts[0] || "";
          const contextComp = contextA.localeCompare(contextB);
          if (contextComp !== 0)
            return contextComp;
          return this.comparePriorities(b.priority, a.priority);
        });
      case "calendar" /* CALENDAR */:
        return tasksCopy.sort((a, b) => {
          const dateA = a.timing.dueDate || "";
          const dateB = b.timing.dueDate || "";
          const dateComp = dateA.localeCompare(dateB);
          if (dateComp !== 0)
            return dateComp;
          const timeA = a.timing.startTime || "";
          const timeB = b.timing.startTime || "";
          return timeA.localeCompare(timeB);
        });
      case "hopefullyToday" /* HOPEFULLY_TODAY */:
        return tasksCopy.sort((a, b) => {
          const hasLimitA = !!a.timing.dueDate;
          const hasLimitB = !!b.timing.dueDate;
          if (hasLimitA !== hasLimitB)
            return hasLimitB ? 1 : -1;
          return this.comparePriorities(b.priority, a.priority);
        });
      case "assigned" /* ASSIGNED */:
        return tasksCopy.sort((a, b) => {
          const personA = a.tags.people[0] || "";
          const personB = b.tags.people[0] || "";
          const personComp = personA.localeCompare(personB);
          if (personComp !== 0)
            return personComp;
          const dateA = a.timing.dueDate || "9999-99-99";
          const dateB = b.timing.dueDate || "9999-99-99";
          return dateA.localeCompare(dateB);
        });
      case "waiting" /* WAITING */:
        return tasksCopy.sort((a, b) => {
          const blockTypeA = this.getBlockType(a);
          const blockTypeB = this.getBlockType(b);
          if (blockTypeA !== blockTypeB)
            return blockTypeA - blockTypeB;
          if (blockTypeA === 1) {
            const dateA = a.timing.startDate || "";
            const dateB = b.timing.startDate || "";
            return dateA.localeCompare(dateB);
          } else if (blockTypeA === 3) {
            const weekA = a.timing.week || "";
            const weekB = b.timing.week || "";
            return weekA.localeCompare(weekB);
          }
          return 0;
        });
      default:
        return tasksCopy.sort((a, b) => {
          return this.comparePriorities(b.priority, a.priority);
        });
    }
  }
  /**
   * Obtiene el tipo de bloqueo para ordenar tareas en pausa
   * 1: Fecha futura, 2: Dependencia, 3: Semana futura
   */
  getBlockType(task) {
    if (task.timing.startDate)
      return 1;
    if (task.dependencies.length > 0)
      return 2;
    if (task.timing.week)
      return 3;
    return 0;
  }
  /**
   * Compara dos prioridades para ordenar (del más alto al más bajo)
   */
  comparePriorities(a, b) {
    const priorityValues = {
      ["highest" /* HIGHEST */]: 4,
      ["high" /* HIGH */]: 3,
      ["normal" /* NORMAL */]: 2,
      ["low" /* LOW */]: 1,
      ["lowest" /* LOWEST */]: 0
    };
    return priorityValues[a] - priorityValues[b];
  }
  /**
   * Obtiene la etiqueta para un tipo de entidad
   */
  getEntityTypeLabel(type2) {
    switch (type2) {
      case "AV" /* AREA_VIDA */:
        return "\xC1rea de Vida";
      case "AI" /* AREA_INTERES */:
        return "\xC1rea de Inter\xE9s";
      case "PQ" /* PROYECTO_Q */:
        return "Proyecto Q";
      case "PGTD" /* PROYECTO_GTD */:
        return "Proyecto GTD";
      case "Ax" /* ANOTACION */:
        return "Anotaci\xF3n";
      case "Cp" /* CAMPANA */:
        return "Campa\xF1a";
      case "EMkt" /* ENTREGABLE */:
        return "Entregable";
      case "RT" /* REGISTRO_TIEMPO */:
        return "Registro Tiempo";
      case "Tx" /* TRANSACCION */:
        return "Transacci\xF3n";
      case "OTHER" /* OTHER */:
        return "Otra Entidad";
      case "UNKNOWN" /* UNKNOWN */:
      default:
        return "Entidad";
    }
  }
  /**
   * Obtiene la clase CSS para un estado de entidad
   */
  getEntityStateClass(state) {
    switch (state) {
      case "\u{1F7E2}" /* ACTIVE */:
        return "active";
      case "\u{1F7E1}" /* PAUSED */:
        return "paused";
      case "\u{1F534}" /* STOPPED */:
        return "stopped";
      case "\u{1F535}" /* ARCHIVED */:
        return "archived";
      default:
        return "unknown";
    }
  }
  /**
   * Obtiene el icono para una prioridad
   */
  getPriorityIcon(priority) {
    switch (priority) {
      case "highest" /* HIGHEST */:
        return "\u23EB";
      case "high" /* HIGH */:
        return "\u{1F53C}";
      case "low" /* LOW */:
        return "\u{1F53D}";
      case "lowest" /* LOWEST */:
        return "\u23EC";
      case "normal" /* NORMAL */:
      default:
        return "";
    }
  }
  /**
   * Obtiene la etiqueta para un tipo de lista GTD
   */
  getListTypeLabel(listType) {
    switch (listType) {
      case "inbox" /* INBOX */:
        return "Bandeja de Entrada";
      case "nextActions" /* NEXT_ACTIONS */:
        return "Pr\xF3ximas Acciones";
      case "calendar" /* CALENDAR */:
        return "Calendario";
      case "hopefullyToday" /* HOPEFULLY_TODAY */:
        return "Ojal\xE1 Hoy";
      case "assigned" /* ASSIGNED */:
        return "Asignadas";
      case "projects" /* PROJECTS */:
        return "Proyectos";
      case "somedayMaybe" /* SOMEDAY_MAYBE */:
        return "Alg\xFAn D\xEDa / Tal Vez";
      case "notThisWeek" /* NOT_THIS_WEEK */:
        return "Esta Semana No";
      case "waiting" /* WAITING */:
        return "En Pausa";
      default:
        return "Lista Desconocida";
    }
  }
  /**
   * Obtiene la descripción para un tipo de lista GTD
   */
  getListTypeDescription(listType) {
    switch (listType) {
      case "inbox" /* INBOX */:
        return "Tareas que necesitan ser procesadas o clasificadas.";
      case "nextActions" /* NEXT_ACTIONS */:
        return "Acciones listas para ejecutar en contextos espec\xEDficos.";
      case "calendar" /* CALENDAR */:
        return "Compromisos con fecha y hora espec\xEDfica.";
      case "hopefullyToday" /* HOPEFULLY_TODAY */:
        return "Tareas que se desean completar hoy, sin hora espec\xEDfica.";
      case "assigned" /* ASSIGNED */:
        return "Tareas delegadas a otras personas.";
      case "projects" /* PROJECTS */:
        return "Resultados que requieren m\xFAltiples acciones.";
      case "somedayMaybe" /* SOMEDAY_MAYBE */:
        return "Ideas para considerar en el futuro.";
      case "notThisWeek" /* NOT_THIS_WEEK */:
        return "Tareas pospuestas para despu\xE9s de esta semana.";
      case "waiting" /* WAITING */:
        return "Tareas bloqueadas por dependencias o fechas futuras.";
      default:
        return "";
    }
  }
  // Añadir este método a la clase ViewRenderer para mostrar información de diagnóstico
  /**
   * Muestra un mensaje de diagnóstico cuando no hay entidades o tareas
   */
  renderDiagnosticInfo(containerEl, model) {
    const diagnosticEl = containerEl.createEl("div", { cls: "task-navigator-diagnostic" });
    diagnosticEl.createEl("h3", { text: "Informaci\xF3n de diagn\xF3stico", cls: "diagnostic-title" });
    const infoSection = diagnosticEl.createEl("div", { cls: "diagnostic-section" });
    infoSection.createEl("h4", { text: "Datos generales" });
    const infoList = infoSection.createEl("ul");
    infoList.createEl("li", { text: `Total de entidades: ${model.allEntities.length}` });
    infoList.createEl("li", { text: `Entidades filtradas: ${model.filteredEntities.length}` });
    infoList.createEl("li", { text: `Total de tareas: ${model.allTasks.length}` });
    const filtersSection = diagnosticEl.createEl("div", { cls: "diagnostic-section" });
    filtersSection.createEl("h4", { text: "Filtros activos" });
    const filtersList = filtersSection.createEl("ul");
    let statesText = "Estados: ";
    if (model.filters.showActive)
      statesText += "\u{1F7E2} ";
    if (model.filters.showPaused)
      statesText += "\u{1F7E1} ";
    if (model.filters.showStopped)
      statesText += "\u{1F534} ";
    if (model.filters.showArchived)
      statesText += "\u{1F535} ";
    filtersList.createEl("li", { text: statesText });
    let typesText = "Tipos: ";
    if (model.filters.showAreasVida)
      typesText += "\xC1reas de Vida, ";
    if (model.filters.showAreasInteres)
      typesText += "\xC1reas de Inter\xE9s, ";
    if (model.filters.showProyectosQ)
      typesText += "Proyectos Q, ";
    if (model.filters.showProyectosGTD)
      typesText += "Proyectos GTD, ";
    if (model.filters.showOtherEntities)
      typesText += "Otras entidades, ";
    typesText = typesText.endsWith(", ") ? typesText.slice(0, -2) : typesText;
    filtersList.createEl("li", { text: typesText });
    if (model.filters.searchText) {
      filtersList.createEl("li", { text: `Texto de b\xFAsqueda: "${model.filters.searchText}"` });
    }
    if (model.filters.contexts.length > 0) {
      filtersList.createEl("li", { text: `Contextos: ${model.filters.contexts.join(", ")}` });
    }
    if (model.filters.people.length > 0) {
      filtersList.createEl("li", { text: `Personas: ${model.filters.people.join(", ")}` });
    }
    if (model.focusEntity) {
      const focusSection = diagnosticEl.createEl("div", { cls: "diagnostic-section" });
      focusSection.createEl("h4", { text: "Entidad focal" });
      const focusList = focusSection.createEl("ul");
      focusList.createEl("li", { text: `T\xEDtulo: ${model.focusEntity.title}` });
      focusList.createEl("li", { text: `Tipo: ${model.focusEntity.type}` });
      focusList.createEl("li", { text: `Estado: ${model.focusEntity.state}` });
      focusList.createEl("li", { text: `Archivo: ${model.focusEntity.file.path}` });
      focusList.createEl("li", { text: `Tareas directas: ${model.focusEntity.tasks.length}` });
    }
    const suggestionsSection = diagnosticEl.createEl("div", { cls: "diagnostic-section" });
    suggestionsSection.createEl("h4", { text: "Sugerencias" });
    const suggestionsList = suggestionsSection.createEl("ul");
    suggestionsList.createEl("li", { text: 'Verifica que las tareas est\xE9n en formato correcto: "- [ ] Texto de la tarea"' });
    suggestionsList.createEl("li", { text: "Aseg\xFArate de que el archivo tenga las propiedades frontmatter correctas (type, estado, etc.)" });
    suggestionsList.createEl("li", { text: "Revisa si hay filtros aplicados que puedan estar ocultando las tareas" });
    suggestionsList.createEl("li", { text: "Prueba a abrir el navegador desde una nota que sepas que contiene tareas" });
    const actionSection = diagnosticEl.createEl("div", { cls: "diagnostic-actions" });
    const resetFiltersButton = actionSection.createEl("button", {
      text: "Mostrar todo (quitar filtros)",
      cls: "task-navigator-refresh-button"
    });
    resetFiltersButton.addEventListener("click", () => {
      containerEl.dispatchEvent(new CustomEvent("task-navigator-reset-filters"));
    });
  }
};

// src/modules/taskNavigator/views/TaskNavigatorView.ts
init_HierarchyViewModel();
init_DebugUtils();
init_Entity();
init_Task();
var TaskNavigatorView = class extends import_obsidian86.ItemView {
  // Activar mensajes de depuración
  constructor(leaf, plugin) {
    super(leaf);
    this.currentModel = null;
    this.contextFile = null;
    // Archivo de contexto guardado
    this.refreshInterval = null;
    this.DEBUG = true;
    // Handlers para eventos personalizados (definidos como propiedades de clase para poder eliminarlos)
    this.handleFocusEntity = (event) => {
      var _a;
      this.log("handleFocusEntity() llamado - Evento recibido", event.detail);
      if ((_a = event.detail) == null ? void 0 : _a.filePath) {
        const file = this.app.vault.getAbstractFileByPath(event.detail.filePath);
        if (file instanceof import_obsidian86.TFile) {
          this.log("Nuevo archivo de contexto establecido", file.path);
          this.contextFile = file;
          this.refreshView();
        } else {
          this.warn("No se pudo encontrar el archivo para enfocar", event.detail.filePath);
        }
      }
    };
    this.handleShowOverdue = async () => {
      this.log("handleShowOverdue() llamado - Mostrando tareas vencidas");
      try {
        await this.refreshView();
        if (this.currentModel) {
          this.log("Aplicando filtro para tareas vencidas");
          this.currentModel.applyFilters({
            searchText: "vencida"
            // Esto es un ejemplo simple
            // Otros filtros necesarios...
          });
          this.renderCurrentView();
        } else {
          this.warn("No hay modelo para mostrar tareas vencidas");
        }
      } catch (error) {
        this.error("Error al mostrar tareas vencidas", error);
      }
    };
    this.plugin = plugin;
    this.log("Inicializando servicios del navegador de tareas");
    this.taskParser = new TaskParser();
    this.hierarchyBuilder = new TaskHierarchyBuilder(this.plugin);
    this.taskClassifier = new TaskClassifier();
    this.entityDetector = new EntityDetector(this.plugin);
    this.log("Inicializando componentes de UI");
    this.viewRenderer = new ViewRenderer();
    this.filterPanel = new FilterPanel((filters) => this.applyFilters(filters));
  }
  // Método para mostrar mensajes de depuración
  log(message, data) {
    if (this.DEBUG) {
      console.log(`[TaskNavigator] ${message}`, data || "");
    }
  }
  // Método para mostrar advertencias
  warn(message, data) {
    if (this.DEBUG) {
      console.warn(`[TaskNavigator] ${message}`, data || "");
    }
  }
  // Método para mostrar errores
  error(message, error) {
    console.error(`[TaskNavigator] ${message}`, error || "");
    if (this.DEBUG) {
      new import_obsidian86.Notice(`[TaskNavigator] Error: ${message}`);
    }
  }
  getViewType() {
    return "task-navigator-view";
  }
  getDisplayText() {
    return "Navegador de Tareas GTD";
  }
  getIcon() {
    return "checkmark";
  }
  /**
   * Guarda el estado de la vista
   */
  getState() {
    this.log("Guardando estado de la vista");
    return {
      contextFile: this.contextFile ? this.contextFile.path : null,
      currentFilters: this.currentModel ? this.currentModel.filters : null,
      viewMode: this.currentModel ? this.currentModel.viewMode : null
    };
  }
  /**
   * Restaura el estado de la vista
   */
  setState(state) {
    this.log("Restaurando estado de la vista", state);
    if (state.contextFile) {
      const file = this.app.vault.getAbstractFileByPath(state.contextFile);
      if (file instanceof import_obsidian86.TFile) {
        this.contextFile = file;
        this.log("Contexto restaurado", file.path);
      } else {
        this.warn("No se pudo restaurar el archivo de contexto", state.contextFile);
      }
    }
    if (this.currentModel) {
      if (state.currentFilters) {
        this.currentModel.filters = state.currentFilters;
        this.log("Filtros restaurados", state.currentFilters);
      }
      if (state.viewMode) {
        this.currentModel.viewMode = state.viewMode;
        this.log("Modo de vista restaurado", state.viewMode);
      }
    }
  }
  /**
   * Se ejecuta cuando la vista se recarga (tras cambiar de pestaña y volver)
   */
  onload() {
    super.onload();
    this.log("onload() llamado - Vista recargada");
    if (this.contextFile) {
      this.log("Actualizando vista con contexto guardado", this.contextFile.path);
      this.refreshView();
    } else {
      this.warn("No hay archivo de contexto guardado para actualizar la vista");
    }
  }
  /**
   * Se ejecuta cuando la vista se abre
   */
  async onOpen() {
    var _a;
    try {
      console.log("=====================================================");
      console.log("[TaskNavigator] ABRIENDO VISTA DE NAVEGACI\xD3N DE TAREAS");
      console.log("=====================================================");
      if (this.DEBUG) {
        console.log("[TaskNavigator] Modo de depuraci\xF3n ACTIVADO");
        console.log("[TaskNavigator] Informaci\xF3n del entorno:");
        console.log("- Obsidian API version:", this.app.version);
        try {
          console.log("- Ruta de la b\xF3veda:", this.app.vault.adapter.basePath);
        } catch (e) {
          console.log("- Ruta de la b\xF3veda: No disponible");
        }
        console.log("- Archivos en la b\xF3veda:", this.app.vault.getMarkdownFiles().length);
        if (typeof EntityType !== "undefined") {
          const entityTypes = Object.values(EntityType);
          console.log("- Tipos de entidad disponibles:", entityTypes);
        } else {
          console.log("- Tipos de entidad disponibles: No se pudo acceder a EntityType");
        }
        console.log("- Servicios inicializados:");
        console.log("  * EntityDetector:", !!this.entityDetector);
        console.log("  * TaskParser:", !!this.taskParser);
        console.log("  * HierarchyBuilder:", !!this.hierarchyBuilder);
        console.log("  * TaskClassifier:", !!this.taskClassifier);
        new import_obsidian86.Notice("TaskNavigator: Modo de depuraci\xF3n activado");
      }
      this.log("onOpen() llamado - Abriendo vista");
      this.contentEl.empty();
      this.contentEl.addClass("task-navigator-container");
      this.contentEl.createEl("div", { text: "Cargando navegador de tareas...", cls: "task-navigator-loading" });
      if ((_a = this.leaf.getViewState().state) == null ? void 0 : _a.contextFile) {
        const contextPath = this.leaf.getViewState().state.contextFile;
        this.log("Obteniendo archivo de contexto del estado", contextPath);
        const file = this.app.vault.getAbstractFileByPath(contextPath);
        if (file instanceof import_obsidian86.TFile) {
          this.contextFile = file;
          this.log("Archivo de contexto establecido desde el estado", file.path);
        } else {
          this.warn("No se pudo obtener el archivo de contexto del estado", contextPath);
        }
      }
      if (!this.contextFile) {
        this.log("Intentando usar el archivo activo como contexto");
        this.contextFile = this.app.workspace.getActiveFile();
        if (this.contextFile) {
          this.log("Archivo activo establecido como contexto", this.contextFile.path);
        } else {
          this.warn("No hay archivo activo para usar como contexto");
        }
      }
      await this.refreshView();
      this.log("Configurando actualizaci\xF3n peri\xF3dica (2 minutos)");
      this.refreshInterval = window.setInterval(() => {
        this.log("Ejecutando actualizaci\xF3n peri\xF3dica");
        this.refreshView();
      }, 12e4);
      this.registerCustomEvents();
    } catch (error) {
      console.error("[TaskNavigator] Error cr\xEDtico en onOpen:", error);
      this.contentEl.empty();
      const errorContainer = this.contentEl.createEl("div", { cls: "task-navigator-error" });
      errorContainer.createEl("h3", { text: "Error al iniciar el Navegador de Tareas" });
      errorContainer.createEl("p", { text: "Se ha producido un error al iniciar el navegador de tareas." });
      errorContainer.createEl("p", { text: `Detalles: ${error.message}` });
      errorContainer.createEl("p", { text: "Consulta la consola de desarrollador para m\xE1s informaci\xF3n (Ctrl+Shift+I)." });
      const helpSection = errorContainer.createEl("div", { cls: "task-navigator-help-section" });
      helpSection.createEl("h4", { text: "Posibles soluciones:" });
      const suggestionsList = helpSection.createEl("ul");
      suggestionsList.createEl("li", { text: "Reinicia Obsidian e intenta nuevamente." });
      suggestionsList.createEl("li", { text: "Verifica que tienes las \xFAltimas versiones de los m\xF3dulos." });
      suggestionsList.createEl("li", { text: "Comprueba si hay tareas en la nota actual en formato correcto (- [ ] Texto de la tarea)." });
      const reloadButton = errorContainer.createEl("button", {
        text: "Intentar nuevamente",
        cls: "task-navigator-refresh-button"
      });
      reloadButton.addEventListener("click", () => {
        this.refreshView();
      });
    }
  }
  /**
   * Registra listeners para eventos personalizados
   */
  registerCustomEvents() {
    this.log("Registrando eventos personalizados");
    document.addEventListener("task-navigator-focus-entity", this.handleFocusEntity);
    document.addEventListener("task-navigator-show-overdue", this.handleShowOverdue);
    this.contentEl.addEventListener("task-navigator-refresh", () => {
      this.log("Evento task-navigator-refresh recibido");
      this.refreshView();
    });
    this.contentEl.addEventListener("task-navigator-view-change", (event) => {
      var _a;
      this.log("Evento task-navigator-view-change recibido", event.detail);
      if (((_a = event.detail) == null ? void 0 : _a.viewMode) && this.currentModel) {
        this.currentModel.viewMode = event.detail.viewMode;
        this.renderCurrentView();
      }
    });
  }
  /**
   * Se ejecuta cuando la vista se cierra
   */
  onClose() {
    this.log("onClose() llamado - Cerrando vista");
    if (this.refreshInterval) {
      clearInterval(this.refreshInterval);
      this.refreshInterval = null;
      this.log("Intervalo de actualizaci\xF3n eliminado");
    }
    document.removeEventListener("task-navigator-focus-entity", this.handleFocusEntity);
    document.removeEventListener("task-navigator-show-overdue", this.handleShowOverdue);
    this.log("Eventos personalizados eliminados");
  }
  /**
  * Actualiza la vista con los datos más recientes
  */
  async refreshView() {
    var _a, _b;
    this.log("refreshView() llamado - Actualizando vista");
    const loadingIndicator = this.contentEl.createEl("div", {
      cls: "task-navigator-loading"
    });
    const loadingSpinner = loadingIndicator.createEl("div", {
      cls: "task-navigator-spinner"
    });
    const loadingText = loadingIndicator.createEl("div", {
      text: "Actualizando datos..."
    });
    try {
      const updateLoadingText = (text) => {
        loadingText.textContent = text;
      };
      let entityContext = null;
      if (this.contextFile) {
        updateLoadingText("Detectando tipo de entidad del archivo de contexto...");
        this.log("Detectando tipo de entidad del archivo de contexto", this.contextFile.path);
        try {
          entityContext = await this.entityDetector.detectEntityFromFile(this.contextFile);
          if (entityContext) {
            this.log("Entidad de contexto detectada", {
              type: entityContext.type,
              title: entityContext.title,
              file: entityContext.file.path
            });
            updateLoadingText(`Entidad detectada: ${entityContext.title} (${entityContext.type})`);
          } else {
            this.warn("No se pudo detectar una entidad para el archivo de contexto");
            updateLoadingText("No se pudo detectar una entidad espec\xEDfica. Mostrando vista global.");
          }
        } catch (e) {
          this.error("Error al detectar entidad", e);
          updateLoadingText("Error al detectar entidad. Continuando con vista global.");
        }
      } else {
        this.warn("No hay archivo de contexto para detectar entidad");
        updateLoadingText("No hay archivo de contexto. Mostrando vista global.");
      }
      if (this.contextFile && !entityContext) {
        this.log("Verificando tareas directamente en el archivo de contexto");
        updateLoadingText("Verificando tareas directamente en el archivo...");
        try {
          const tasks = await this.taskParser.extractTasksFromFile(this.contextFile);
          if (tasks.length > 0) {
            this.log(`Se encontraron ${tasks.length} tareas directamente en el archivo`);
            entityContext = {
              id: this.contextFile.basename,
              type: "UNKNOWN" /* UNKNOWN */,
              title: this.contextFile.basename,
              description: "Archivo con tareas",
              file: this.contextFile,
              state: "" /* UNKNOWN */,
              tasks,
              children: [],
              metadata: {},
              getTotalTaskCount: () => tasks.length,
              getPendingTaskCount: () => tasks.filter((t) => !t.completed).length,
              addTask: (task) => {
              },
              addChild: (child) => {
              }
            };
            this.log("Creada entidad gen\xE9rica con tareas:", {
              title: entityContext.title,
              tasks: entityContext.tasks.length
            });
          } else {
            this.warn("No se encontraron tareas directamente en el archivo");
          }
        } catch (e) {
          this.error("Error al verificar tareas directamente", e);
        }
      }
      updateLoadingText("Construyendo modelo de jerarqu\xEDa...");
      this.log("Construyendo modelo de jerarqu\xEDa");
      this.currentModel = await this.hierarchyBuilder.buildHierarchy(entityContext);
      if (this.currentModel) {
        updateLoadingText(`Modelo construido con ${this.currentModel.allEntities.length} entidades.`);
        this.log("Modelo de jerarqu\xEDa construido", {
          entitiesCount: this.currentModel.allEntities.length,
          rootEntitiesCount: this.currentModel.rootEntities.length,
          focusEntity: this.currentModel.focusEntity ? this.currentModel.focusEntity.title : "ninguna"
        });
        updateLoadingText("Clasificando tareas seg\xFAn reglas GTD...");
        this.log("Clasificando tareas seg\xFAn reglas GTD");
        await this.taskClassifier.classifyTasks(this.currentModel);
        const totalTasks = this.currentModel.allTasks.length;
        updateLoadingText(`Clasificaci\xF3n completada: ${totalTasks} tareas encontradas.`);
        this.log("Tareas clasificadas", {
          totalTasks,
          inboxTasks: ((_a = this.currentModel.gtdLists.get("inbox")) == null ? void 0 : _a.length) || 0,
          nextActionsTasks: ((_b = this.currentModel.gtdLists.get("nextActions")) == null ? void 0 : _b.length) || 0
          // Mostrar otras listas GTD...
        });
        if (totalTasks === 0 && this.DEBUG) {
          console.warn("[TaskNavigator] ALERTA: No se encontraron tareas en el modelo");
          if (entityContext) {
            console.warn("[TaskNavigator] Archivo de contexto:", entityContext.file.path);
            console.warn("[TaskNavigator] Contenido de la entidad:", await this.app.vault.read(entityContext.file));
          }
        }
        if (this.DEBUG) {
          console.log("=== VOLCADO DETALLADO DEL MODELO DE JERARQU\xCDA ===");
          DebugUtils.dumpModelInfo(this.currentModel);
          console.log("=== FIN DEL VOLCADO ===");
        }
        if (this.DEBUG && entityContext) {
          console.log("=== TAREAS EN LA ENTIDAD FOCAL ===");
          entityContext.tasks.forEach((task) => {
            console.log(`Tarea: "${task.text}", Completada: ${task.completed}, Lista: ${task.listType || "Sin clasificar"}`);
          });
          console.log("=== FIN DE TAREAS EN ENTIDAD FOCAL ===");
        }
        const state = this.leaf.getViewState().state;
        if (state == null ? void 0 : state.currentFilters) {
          this.log("Restaurando filtros del estado", state.currentFilters);
          this.currentModel.filters = state.currentFilters;
        } else {
          this.log("Estableciendo filtros por defecto para mostrar todo");
          this.currentModel.filters = {
            showCompleted: true,
            // Mostrar tareas completadas
            showActive: true,
            // Mostrar entidades activas
            showPaused: true,
            // Mostrar entidades pausadas
            showStopped: true,
            // Mostrar entidades detenidas
            showArchived: true,
            // Mostrar entidades archivadas
            showAreasVida: true,
            // Mostrar Áreas de Vida
            showAreasInteres: true,
            // Mostrar Áreas de Interés 
            showProyectosQ: true,
            // Mostrar Proyectos Q
            showProyectosGTD: true,
            // Mostrar Proyectos GTD
            showOtherEntities: true,
            // Mostrar otras entidades
            contexts: [],
            // Sin filtro de contextos específicos
            people: [],
            // Sin filtro de personas específicas
            enabledLists: Object.values(TaskListType),
            // Todas las listas GTD
            searchText: "",
            // Sin texto de búsqueda
            daysRange: 30
            // Mayor rango de días
          };
        }
        if (state == null ? void 0 : state.viewMode) {
          this.log("Restaurando modo de vista del estado", state.viewMode);
          this.currentModel.viewMode = state.viewMode;
        }
        this.currentModel.applyFilters(this.currentModel.filters);
      } else {
        this.warn("No se pudo construir el modelo de jerarqu\xEDa");
        updateLoadingText("Error al construir el modelo de jerarqu\xEDa.");
      }
      this.contentEl.empty();
      this.renderCurrentView();
    } catch (error) {
      this.error("Error al actualizar vista de TaskNavigator", error);
      this.contentEl.empty();
      const errorEl = this.contentEl.createEl("div", {
        cls: "task-navigator-error"
      });
      errorEl.createEl("h3", { text: "Error al actualizar el Navegador de Tareas" });
      errorEl.createEl("p", { text: `Mensaje: ${error.message}` });
      if (error.stack) {
        const stackContainer = errorEl.createEl("details");
        stackContainer.createEl("summary", { text: "Detalles t\xE9cnicos (para desarrolladores)" });
        const pre = stackContainer.createEl("pre");
        pre.createEl("code", { text: error.stack });
      }
      const retryButton = errorEl.createEl("button", {
        text: "Reintentar",
        cls: "task-navigator-refresh-button"
      });
      retryButton.addEventListener("click", () => {
        this.refreshView();
      });
    }
  }
  /**
   * Renderiza la vista con el modelo actual
   */
  renderCurrentView() {
    this.log("renderCurrentView() llamado - Renderizando vista");
    if (!this.currentModel) {
      this.warn("No hay modelo para renderizar");
      return;
    }
    this.contentEl.empty();
    this.log("Renderizando vista con ViewRenderer");
    this.viewRenderer.render(this.contentEl, this.currentModel, this.filterPanel);
  }
  /**
   * Aplica los filtros seleccionados por el usuario
   */
  applyFilters(filters) {
    this.log("applyFilters() llamado - Aplicando filtros", filters);
    if (!this.currentModel) {
      this.warn("No hay modelo para aplicar filtros");
      return;
    }
    this.currentModel.applyFilters(filters);
    this.renderCurrentView();
  }
};

// src/modules/taskNavigator/services/TaskManagerIntegration.ts
init_Task();
var import_obsidian87 = require("obsidian");
var TaskManagerIntegration = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.tareasAPI = plugin.tareasAPI;
  }
  /**
   * Carga tareas vencidas desde el TaskManager
   */
  async loadOverdueTasks() {
    try {
      if (!this.tareasAPI) {
        console.warn("TareasAPI no est\xE1 disponible");
        return [];
      }
      const overdueTasks = await this.tareasAPI.getTareasVencidasAbiertas();
      return this.convertTareasToNavigatorTasks(overdueTasks);
    } catch (error) {
      console.error("Error al cargar tareas vencidas:", error);
      return [];
    }
  }
  /**
   * Convierte tareas del formato de TareasAPI al formato de TaskNavigator
   */
  convertTareasToNavigatorTasks(tareas) {
    const tasks = [];
    for (const tarea of tareas) {
      try {
        const lineInfo = {
          number: tarea.line || 0,
          text: tarea.rawText || "",
          indentation: 0
        };
        const task = new Task3(
          tarea.id || "",
          tarea.text || "",
          tarea.rawText || "",
          false,
          // Asumimos que no está completada ya que son tareas vencidas abiertas
          tarea.file,
          // TFile
          lineInfo
        );
        task.timing.dueDate = tarea.dueDate || "";
        task.timing.scheduledDate = tarea.scheduledDate || "";
        task.timing.startDate = tarea.startDate || "";
        if (tarea.contexts && tarea.contexts.length > 0) {
          task.tags.contexts = tarea.contexts;
          task.listType = "nextActions" /* NEXT_ACTIONS */;
        } else if (tarea.people && tarea.people.length > 0) {
          task.tags.people = tarea.people;
          task.listType = "assigned" /* ASSIGNED */;
        } else {
          task.listType = "inbox" /* INBOX */;
        }
        if (tarea.dueDate || tarea.scheduledDate) {
          task.isOverdue = () => true;
        }
        tasks.push(task);
      } catch (error) {
        console.error("Error al convertir tarea:", error);
      }
    }
    return tasks;
  }
  /**
   * Actualiza el estado de una tarea en el sistema
   */
  async updateTaskStatus(task, completed) {
    try {
      if (!this.tareasAPI) {
        console.warn("TareasAPI no est\xE1 disponible");
        return false;
      }
      return true;
    } catch (error) {
      console.error("Error al actualizar estado de tarea:", error);
      return false;
    }
  }
  /**
   * Obtiene estadísticas de tareas desde el TaskManager
   */
  async getTaskStats() {
    try {
      if (!this.tareasAPI) {
        console.warn("TareasAPI no est\xE1 disponible");
        return {};
      }
      return {};
    } catch (error) {
      console.error("Error al obtener estad\xEDsticas de tareas:", error);
      return {};
    }
  }
};

// src/modules/taskNavigator/module.ts
var TaskNavigatorModule = class {
  constructor(plugin) {
    this.VIEW_TYPE = "task-navigator-view";
    this.isActivated = false;
    this.plugin = plugin;
    this.taskParser = new TaskParser();
    this.entityDetector = new EntityDetector(plugin);
    this.hierarchyBuilder = new TaskHierarchyBuilder(plugin);
    this.taskClassifier = new TaskClassifier();
    this.navigationUtils = new NavigationUtils4();
    this.taskManagerIntegration = new TaskManagerIntegration(plugin);
  }
  /**
   * Activa el módulo TaskNavigator
   */
  activate() {
    if (this.isActivated)
      return;
    console.log("Activando m\xF3dulo TaskNavigator");
    this.plugin.registerView(
      this.VIEW_TYPE,
      (leaf) => new TaskNavigatorView(leaf, this.plugin)
    );
    this.registerCommands();
    this.isActivated = true;
  }
  /**
   * Desactiva el módulo TaskNavigator
   */
  deactivate() {
    if (!this.isActivated)
      return;
    console.log("Desactivando m\xF3dulo TaskNavigator");
    this.plugin.app.workspace.detachLeavesOfType(this.VIEW_TYPE);
    this.isActivated = false;
  }
  /**
   * Comprueba si el módulo está activo
   */
  isActive() {
    return this.isActivated;
  }
  /**
   * Registra los comandos para el módulo
   */
  registerCommands() {
    this.plugin.addCommand({
      id: "open-task-navigator",
      name: "Abrir Navegador de Tareas GTD",
      callback: () => this.openTaskNavigatorView()
    });
    this.plugin.addCommand({
      id: "show-current-note-tasks",
      name: "Mostrar Tareas de la Nota Actual",
      callback: () => this.openTaskNavigatorWithCurrentNote()
    });
    this.plugin.addCommand({
      id: "show-overdue-tasks",
      name: "Mostrar Tareas Vencidas",
      callback: async () => {
        await this.openTaskNavigatorView();
        document.dispatchEvent(new CustomEvent("task-navigator-show-overdue"));
      }
    });
    this.plugin.addCommand({
      id: "debug-task-navigator",
      name: "Depurar Navegador de Tareas GTD",
      callback: () => this.debugTaskNavigator()
    });
  }
  /**
  * Abre la vista del navegador de tareas como una pestaña nueva
  */
  async openTaskNavigatorView() {
    const workspace = this.plugin.app.workspace;
    const existingLeaves = workspace.getLeavesOfType(this.VIEW_TYPE);
    if (existingLeaves.length > 0) {
      workspace.revealLeaf(existingLeaves[0]);
      return;
    }
    const activeFile = workspace.getActiveFile();
    const leaf = workspace.getLeaf("tab");
    await leaf.setViewState({
      type: this.VIEW_TYPE,
      active: true,
      state: {
        contextFile: activeFile ? activeFile.path : null
      }
    });
    workspace.revealLeaf(leaf);
  }
  /**
   * Abre la vista del navegador centrada en la nota actual
   */
  async openTaskNavigatorWithCurrentNote() {
    const workspace = this.plugin.app.workspace;
    const currentFile = workspace.getActiveFile();
    if (!currentFile) {
      await this.openTaskNavigatorView();
      return;
    }
    const existingLeaves = workspace.getLeavesOfType(this.VIEW_TYPE);
    if (existingLeaves.length > 0) {
      workspace.revealLeaf(existingLeaves[0]);
      document.dispatchEvent(new CustomEvent("task-navigator-focus-entity", {
        detail: { filePath: currentFile.path }
      }));
      return;
    }
    const leaf = workspace.getLeaf("tab");
    await leaf.setViewState({
      type: this.VIEW_TYPE,
      active: true,
      state: {
        contextFile: currentFile.path
      }
    });
    workspace.revealLeaf(leaf);
  }
  /**
   * Método de depuración para el navegador de tareas
   * Muestra información detallada en la consola
   */
  async debugTaskNavigator() {
    console.log("=====================================================");
    console.log("[TaskNavigator] INICIANDO DEPURACI\xD3N MANUAL");
    console.log("=====================================================");
    const workspace = this.plugin.app.workspace;
    const existingLeaves = workspace.getLeavesOfType(this.VIEW_TYPE);
    if (existingLeaves.length > 0) {
      console.log("[TaskNavigator] Vista encontrada, accediendo al modelo...");
      const view = existingLeaves[0].view;
      if (view && view.currentModel) {
        console.log("[TaskNavigator] Modelo encontrado, volcando informaci\xF3n...");
        const { DebugUtils: DebugUtils2 } = (init_DebugUtils(), __toCommonJS(DebugUtils_exports));
        DebugUtils2.dumpModelInfo(view.currentModel);
        new Notice("Informaci\xF3n de depuraci\xF3n volcada a la consola");
      } else {
        console.log("[TaskNavigator] No se encontr\xF3 un modelo v\xE1lido en la vista");
        new Notice("No se encontr\xF3 un modelo v\xE1lido para depurar");
      }
    } else {
      console.log("[TaskNavigator] No hay ninguna vista de navegador abierta");
      const shouldOpen = await new Promise((resolve) => {
        const notice = new Notice(
          "No hay ninguna vista de navegador abierta. \xBFDeseas abrir una?",
          0
          // 0 significa que no se cierra automáticamente
        );
        const buttonYes = createEl("button", { text: "S\xED" });
        const buttonNo = createEl("button", { text: "No" });
        buttonYes.addEventListener("click", () => {
          resolve(true);
          notice.hide();
        });
        buttonNo.addEventListener("click", () => {
          resolve(false);
          notice.hide();
        });
        notice.noticeEl.appendChild(buttonYes);
        notice.noticeEl.appendChild(buttonNo);
      });
      if (shouldOpen) {
        console.log("[TaskNavigator] Abriendo vista para depuraci\xF3n");
        await this.openTaskNavigatorView();
        setTimeout(() => {
          this.debugTaskNavigator();
        }, 2e3);
      }
    }
  }
  /**
   * Proporciona el constructor de jerarquía a otros componentes
   */
  getHierarchyBuilder() {
    return this.hierarchyBuilder;
  }
  /**
   * Proporciona el clasificador de tareas a otros componentes
   */
  getTaskClassifier() {
    return this.taskClassifier;
  }
  /**
   * Proporciona el analizador de tareas a otros componentes
   */
  getTaskParser() {
    return this.taskParser;
  }
  /**
   * Proporciona el detector de entidades a otros componentes
   */
  getEntityDetector() {
    return this.entityDetector;
  }
  /**
   * Proporciona las utilidades de navegación a otros componentes
   */
  getNavigationUtils() {
    return this.navigationUtils;
  }
  /**
   * Proporciona la integración con el gestor de tareas a otros componentes
   */
  getTaskManagerIntegration() {
    return this.taskManagerIntegration;
  }
};

// src/main.ts
var ManagementPlugin = class extends import_obsidian89.Plugin {
  constructor() {
    super(...arguments);
    // Declara una propiedad `settings` para almacenar la configuración del plugin.
    this.statusBarExtension = null;
    this.moduloRegistroTiempo = null;
    this.moduloBase = null;
    this.moduloGTD = null;
    //moduloTerceros: ModuloTerceros | null = null;
    this.registeredCommandIdsRT = [];
    this.registeredCommandIdsMB = [];
    this.registeredCommandIdsGTD = [];
    this.registeredCommandIds_Terceros = [];
    this.ribbonButtonRT = null;
    this.moduloTabTitle = null;
    this.moduloTaskManager = null;
    this.moduloDataviewQueries = null;
    this.taskExecutionNavigatorModule = null;
    this.taskNavigatorModule = null;
  }
  // Declara una propiedad para mantener una instancia de `StatusBarExtension`.
  async onload() {
    var _a, _b, _c, _d, _e;
    await this.loadSettings();
    this.tp = this.getTp();
    this.registerView(
      "vista-registro-activo",
      (leaf) => new VistaRegistroActivo(leaf, this)
    );
    this.registerView(
      "vista-resumen-semanal",
      (leaf) => new VistaResumenSemanal(leaf, this)
    );
    this.registerView(
      "vista-registro-diario",
      (leaf) => new VistaRegistroDiario(leaf, this)
    );
    this.registroTiempoAPI = new registroTiempoAPI(this);
    this.starterAPI = new starterAPI(this);
    this.addOnsAPI = new addOnsAPI(this);
    this.YAMLUpdaterAPI = new YAMLUpdaterAPI2(this);
    this.updateSesionLectura = new updateSesionLectura(this);
    this.menuHoyAPI = new menuHoyAPI(this);
    this.menuSemanalAPI = new menuSemanalAPI(this);
    this.subsistemasAPI = new subsistemasAPI(this);
    this.librosAPI = new librosAPI(this);
    this.newInbox = ingresarBandejaEntrada.bind(this);
    this.taskExecutionNavigatorModule = new TaskExecutionNavigatorModule(this);
    this.taskNavigatorModule = new TaskNavigatorModule(this);
    this.addSettingTab(new PluginMainSettingsTab(this));
    this.statusBarExtension = new StatusBarExtension(this);
    this.moduloRegistroTiempo = new ModuloRegistroTiempo(this);
    this.moduloBase = new ModuloBase(this);
    this.moduloGTD = new ModuloGTD(this);
    this.tareasAPI = new TareasAPI(this);
    this.moduloTabTitle = new ModuloTabTitle(this);
    this.moduloTaskManager = new ModuloTaskManager(this);
    this.moduloDataviewQueries = new ModuloDataviewQueries(this);
    this.applyConfiguration();
    console.log("Iniciando carga de plugin de Gesti\xF3n Personal");
    this.registerGPThora();
    if (this.settings.moduloTabTitle) {
      (_a = this.moduloTabTitle) == null ? void 0 : _a.activate();
    } else {
      (_b = this.moduloTabTitle) == null ? void 0 : _b.deactivate();
    }
    if (this.settings.moduloTaskManager) {
      this.moduloTaskManager.activate();
    }
    if (this.settings.moduloDataviewQueries) {
      console.log("ManagementPlugin: Aplicando configuraci\xF3n DataviewQueries...");
      try {
        if (!this.moduloDataviewQueries.isActive()) {
          this.moduloDataviewQueries.activate();
        }
      } catch (error) {
        console.error("Error en applyConfiguration:", error);
      }
    } else {
      (_c = this.moduloDataviewQueries) == null ? void 0 : _c.deactivate();
    }
    if (this.settings.taskExecutionNavigatorModule) {
      (_d = this.taskExecutionNavigatorModule) == null ? void 0 : _d.activate();
    }
    if (this.settings.taskNavigatorModule) {
      (_e = this.taskNavigatorModule) == null ? void 0 : _e.activate();
    }
  }
  registerGPThora() {
    const gptHora = new GPThora(this.app);
    gptHora.onload();
  }
  applyConfiguration() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p;
    if (this.settings.moduloBase) {
      (_a = this.moduloBase) == null ? void 0 : _a.activate(this);
    } else {
      (_b = this.moduloBase) == null ? void 0 : _b.deactivate(this);
    }
    if (this.settings.moduloRegistroTiempo) {
      (_c = this.moduloRegistroTiempo) == null ? void 0 : _c.activate(this);
    } else {
      (_d = this.moduloRegistroTiempo) == null ? void 0 : _d.deactivate(this);
    }
    if (this.settings.moduloAliasStatusBar) {
      (_e = this.statusBarExtension) == null ? void 0 : _e.activate();
    } else {
      (_f = this.statusBarExtension) == null ? void 0 : _f.deactivate();
    }
    if (this.settings.moduloGTD) {
      (_g = this.moduloGTD) == null ? void 0 : _g.activate(this);
    } else {
      (_h = this.moduloGTD) == null ? void 0 : _h.deactivate(this);
    }
    if (this.settings.moduloTaskManager) {
      (_i = this.moduloTaskManager) == null ? void 0 : _i.activate();
    } else {
      (_j = this.moduloTaskManager) == null ? void 0 : _j.deactivate();
    }
    if (this.settings.moduloDataviewQueries) {
      console.log("Aplicando configuraci\xF3n: Activando DataviewQueries");
      (_k = this.moduloDataviewQueries) == null ? void 0 : _k.activate();
    } else {
      console.log("Aplicando configuraci\xF3n: Desactivando DataviewQueries");
      (_l = this.moduloDataviewQueries) == null ? void 0 : _l.deactivate();
    }
    if (this.settings.taskExecutionNavigatorModule) {
      (_m = this.taskExecutionNavigatorModule) == null ? void 0 : _m.activate();
    } else {
      (_n = this.taskExecutionNavigatorModule) == null ? void 0 : _n.deactivate();
    }
    if (this.settings.taskNavigatorModule) {
      (_o = this.taskNavigatorModule) == null ? void 0 : _o.activate();
    } else {
      (_p = this.taskNavigatorModule) == null ? void 0 : _p.deactivate();
    }
  }
  async onunload() {
    console.log("Descargando plugin Gesti\xF3n Personal");
    if (this.moduloDataviewQueries) {
      this.moduloDataviewQueries.deactivate();
    }
    if (this.taskExecutionNavigatorModule) {
      this.taskExecutionNavigatorModule.deactivate();
    }
    if (this.taskNavigatorModule) {
      this.taskNavigatorModule.deactivate();
    }
    delete this.app.gpManagement;
    return Promise.resolve();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.applyConfiguration();
  }
  getTp() {
    if (!this.app || !this.app.plugins.enabledPlugins.has("templater-obsidian")) {
      console.error("El plugin Templater no est\xE1 habilitado.");
      return;
    }
    let tpGen = this.app.plugins.plugins["templater-obsidian"].templater;
    tpGen = tpGen.functions_generator.internal_functions.modules_array;
    let tp = {};
    tp.file = tpGen.find((m) => m.name == "file");
    tp.system = tpGen.find((m) => m.name == "system");
    if (!tp.system) {
      console.error(
        "No se pudo acceder al objeto de funciones actuales de Templater."
      );
      return;
    }
    console.log("Instancia de tp cargada satisfactoriamente en Plugin");
    return tp;
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21vZHVsZXMvbW9kYWxlcy9zZWxlY2Npb25Nb2RhbC50cyIsICJzcmMvbW9kdWxlcy9tb2RhbGVzL3NlbGVjY2lvbk1vZGFsVGFyZWFzLnRzIiwgInNyYy9tb2R1bGVzL21vZGFsZXMvZnV6enlTZWxlY3RPckNyZWF0ZS50cyIsICJub2RlX21vZHVsZXMvbHV4b24vc3JjL2Vycm9ycy5qcyIsICJub2RlX21vZHVsZXMvbHV4b24vc3JjL2ltcGwvZm9ybWF0cy5qcyIsICJub2RlX21vZHVsZXMvbHV4b24vc3JjL3pvbmUuanMiLCAibm9kZV9tb2R1bGVzL2x1eG9uL3NyYy96b25lcy9zeXN0ZW1ab25lLmpzIiwgIm5vZGVfbW9kdWxlcy9sdXhvbi9zcmMvem9uZXMvSUFOQVpvbmUuanMiLCAibm9kZV9tb2R1bGVzL2x1eG9uL3NyYy9pbXBsL2xvY2FsZS5qcyIsICJub2RlX21vZHVsZXMvbHV4b24vc3JjL3pvbmVzL2ZpeGVkT2Zmc2V0Wm9uZS5qcyIsICJub2RlX21vZHVsZXMvbHV4b24vc3JjL3pvbmVzL2ludmFsaWRab25lLmpzIiwgIm5vZGVfbW9kdWxlcy9sdXhvbi9zcmMvaW1wbC96b25lVXRpbC5qcyIsICJub2RlX21vZHVsZXMvbHV4b24vc3JjL3NldHRpbmdzLmpzIiwgIm5vZGVfbW9kdWxlcy9sdXhvbi9zcmMvaW1wbC9pbnZhbGlkLmpzIiwgIm5vZGVfbW9kdWxlcy9sdXhvbi9zcmMvaW1wbC9jb252ZXJzaW9ucy5qcyIsICJub2RlX21vZHVsZXMvbHV4b24vc3JjL2ltcGwvdXRpbC5qcyIsICJub2RlX21vZHVsZXMvbHV4b24vc3JjL2ltcGwvZW5nbGlzaC5qcyIsICJub2RlX21vZHVsZXMvbHV4b24vc3JjL2ltcGwvZm9ybWF0dGVyLmpzIiwgIm5vZGVfbW9kdWxlcy9sdXhvbi9zcmMvaW1wbC9yZWdleFBhcnNlci5qcyIsICJub2RlX21vZHVsZXMvbHV4b24vc3JjL2R1cmF0aW9uLmpzIiwgIm5vZGVfbW9kdWxlcy9sdXhvbi9zcmMvaW50ZXJ2YWwuanMiLCAibm9kZV9tb2R1bGVzL2x1eG9uL3NyYy9pbmZvLmpzIiwgIm5vZGVfbW9kdWxlcy9sdXhvbi9zcmMvaW1wbC9kaWZmLmpzIiwgIm5vZGVfbW9kdWxlcy9sdXhvbi9zcmMvaW1wbC9kaWdpdHMuanMiLCAibm9kZV9tb2R1bGVzL2x1eG9uL3NyYy9pbXBsL3Rva2VuUGFyc2VyLmpzIiwgIm5vZGVfbW9kdWxlcy9sdXhvbi9zcmMvZGF0ZXRpbWUuanMiLCAibm9kZV9tb2R1bGVzL2x1eG9uL3NyYy9sdXhvbi5qcyIsICJzcmMvbW9kdWxlcy9tb2R1bG9SZWdpc3Ryb1RpZW1wby9BUEkvbWVudU90cm8udHMiLCAic3JjL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG8vQVBJL3V0aWxzQVBJLnRzIiwgInNyYy9tb2R1bGVzL21vZHVsb1JlZ2lzdHJvVGllbXBvL0ludGVyZmFjZXMvUmVnaXN0cm9UaWVtcG8udHMiLCAic3JjL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG8vSW50ZXJmYWNlcy9TZXNpb25MZWN0dXJhLnRzIiwgInNyYy9tb2R1bGVzL21vZHVsb1JlZ2lzdHJvVGllbXBvL0FQSS9TZXNpb25MZWN0dXJhLnRzIiwgInNyYy9tb2R1bGVzL21vZHVsb1JlZ2lzdHJvVGllbXBvL0FQSS9SVEJhc2UudHMiLCAic3JjL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG8vQVBJL3JlZ2lzdHJvVGllbXBvQVBJLnRzIiwgInNyYy9tb2R1bGVzL3Rhc2tOYXZpZ2F0b3IvbW9kZWxzL1Rhc2sudHMiLCAic3JjL21vZHVsZXMvdGFza05hdmlnYXRvci9tb2RlbHMvRW50aXR5LnRzIiwgInNyYy9tb2R1bGVzL3Rhc2tOYXZpZ2F0b3IvbW9kZWxzL0hpZXJhcmNoeVZpZXdNb2RlbC50cyIsICJzcmMvbW9kdWxlcy90YXNrTmF2aWdhdG9yL3V0aWxzL0RlYnVnVXRpbHMudHMiLCAic3JjL21haW4udHMiLCAic3JjL3NldHRpbmdzVGFiLnRzIiwgInNyYy9tb2R1bGVzL21vZHVsb0Jhc2UvaW5kZXgudHMiLCAic3JjL21vZHVsZXMvbW9kdWxvQmFzZS91dGlscy9jcmVhckNhcnBldGEudHMiLCAic3JjL21vZHVsZXMvbW9kdWxvQmFzZS91dGlscy9jcmVhclBsYW50aWxsYS50cyIsICJzcmMvbW9kdWxlcy9tb2R1bG9CYXNlL3V0aWxzL2ZpbGVMaW5rTW9kYWwudHMiLCAic3JjL21vZHVsZXMvbW9kdWxvQmFzZS9jb21tYW5kcy50cyIsICJzcmMvbW9kdWxlcy9tb2R1bG9CYXNlL3V0aWxzL2NyZWF0ZU5vdGVGcm9tVGVtcGxhdGUudHMiLCAic3JjL21vZHVsZXMvTV9idXNxdWVkYUF2YW56YWRhL2FjdGl2YWRvcmVzLnRzIiwgInNyYy9tb2R1bGVzL01fYnVzcXVlZGFBdmFuemFkYS91aS9yaWJib25CdXR0b24udHMiLCAic3JjL21vZHVsZXMvTV9idXNxdWVkYUF2YW56YWRhL3VpL21vZGFsLnRzIiwgInNyYy9tb2R1bGVzL01fYnVzcXVlZGFBdmFuemFkYS9zZWFyY2gvRnV6enlOb3RlU3VnZ2VzdGVyLnRzIiwgInNyYy9tb2R1bGVzL21vZHVsb0FsaWFzU3RhdHVzQmFyL3N0YXR1c0Jhci50cyIsICJzcmMvbW9kdWxlcy9tb2R1bG9SZWdpc3Ryb1RpZW1wby9pbmRleC50cyIsICJzcmMvbW9kdWxlcy9tb2R1bG9SZWdpc3Ryb1RpZW1wby9yaWJib25NZW51LnRzIiwgInNyYy9tb2R1bGVzL21vZHVsb1JlZ2lzdHJvVGllbXBvL3V0aWxzLnRzIiwgInNyYy9tb2R1bGVzL21vZHVsb1JlZ2lzdHJvVGllbXBvL2NvbW1hbmRzLnRzIiwgInNyYy9tb2R1bGVzL21vZHVsb1JlZ2lzdHJvVGllbXBvL21vZGFscy9tb2RhbF9BaG9yYS50cyIsICJzcmMvZGVmYXVsdHMvZGVmYXVsdFNldHRpbmdzLnRzIiwgInNyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL0FQSS9zdGFydGVyQVBJLnRzIiwgInNyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL2ZpZWxkSGFuZGxlcnMvRkggU3Vic2lzdGVtYXMvQWdyYWRlY2ltaWVudG9zRmllbGRIYW5kbGVyLnRzIiwgInNyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL0ZpZWxkSGFuZGxlclV0aWxzLnRzIiwgInNyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL2ZpZWxkSGFuZGxlcnMvRkggQmFzZS9Ob3RlRmllbGRIYW5kbGVyQmFzZS50cyIsICJzcmMvbW9kdWxlcy9ub3RlTGlmZWN5Y2xlTWFuYWdlci9maWVsZEhhbmRsZXJzL0ZIIFN1YnNpc3RlbWFzL1JlZmxleGlvbmVzRmllbGRIYW5kbGVycy50cyIsICJzcmMvbW9kdWxlcy9ub3RlTGlmZWN5Y2xlTWFuYWdlci9maWVsZEhhbmRsZXJzL0ZIIEJhc2UvTm90ZUZpZWxkSGFuZGxlci50cyIsICJzcmMvbW9kdWxlcy9ub3RlTGlmZWN5Y2xlTWFuYWdlci9maWVsZEhhbmRsZXJzL0ZIIFN1YnNpc3RlbWFzL0NQRUZpZWxkSGFuZGxlci50cyIsICJzcmMvbW9kdWxlcy9ub3RlTGlmZWN5Y2xlTWFuYWdlci9maWVsZEhhbmRsZXJzL1JSRmllbGRIYW5kbGVyLnRzIiwgInNyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL2ZpZWxkSGFuZGxlcnMvRkggRXN0cnVjdHVyYS9QR1RERmllbGRIYW5kbGVyLnRzIiwgInNyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL2ZpZWxkSGFuZGxlcnMvRkggRXN0cnVjdHVyYS9QUUZpZWxkSGFuZGxlci50cyIsICJzcmMvbW9kdWxlcy9ub3RlTGlmZWN5Y2xlTWFuYWdlci9maWVsZEhhbmRsZXJzL0ZIIFN1YnNpc3RlbWFzL0Fub3RhY2lvbmVzRmllbGRIYW5kbGVyLnRzIiwgInNyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL2ZpZWxkSGFuZGxlcnMvRkggU3Vic2lzdGVtYXMvVHJhbnNhY2Npb25lc0ZpZWxkSGFuZGxlci50cyIsICJzcmMvbW9kdWxlcy9ub3RlTGlmZWN5Y2xlTWFuYWdlci9maWVsZEhhbmRsZXJzL0ZIIEVzdHJ1Y3R1cmEvQXJlYXNJbnRlcmVzRmllbGRIYW5kbGVyLnRzIiwgInNyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL2ZpZWxkSGFuZGxlcnMvRkggRXN0cnVjdHVyYS9BcmVhVmlkYUZpZWxkSGFuZGxlci50cyIsICJzcmMvbW9kdWxlcy9ub3RlTGlmZWN5Y2xlTWFuYWdlci9maWVsZEhhbmRsZXJzL0ZIIEVzdHJ1Y3R1cmEvbm9kb0FyZWFWaWRhRmllbGRIYW5kbGVyLnRzIiwgInNyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL2ZpZWxkSGFuZGxlcnMvT2JqQ29tcGFzc0FudWFsRmllbGRIYW5kbGVyLnRzIiwgInNyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL2ZpZWxkSGFuZGxlcnMvQ29tcGFzc1BsYW5lYWNpb25BbnVhbF9GSC50cyIsICJzcmMvbW9kdWxlcy9ub3RlTGlmZWN5Y2xlTWFuYWdlci9maWVsZEhhbmRsZXJzL0ZIIFN1YnNpc3RlbWFzL1JlcG9zaXRvcmlvTGlicm9zX0ZILnRzIiwgInNyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL2ZpZWxkSGFuZGxlcnMvRkggU3Vic2lzdGVtYXMvQmlibGlvdGVjYV9GSC50cyIsICJzcmMvbW9kdWxlcy9ub3RlTGlmZWN5Y2xlTWFuYWdlci9maWVsZEhhbmRsZXJzL0ZIIEpvdXJuYWxzL0FudWFsX0ZILnRzIiwgInNyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL2ZpZWxkSGFuZGxlcnMvRkggSm91cm5hbHMvVHJpbWVzdHJhbEZpZWxkSGFuZGxlci50cyIsICJzcmMvbW9kdWxlcy9ub3RlTGlmZWN5Y2xlTWFuYWdlci9maWVsZEhhbmRsZXJzL0ZIIFN1YnNpc3RlbWFzL0NhbXBhXHUwMEYxYXNGaWVsZEhhbmRsZXIudHMiLCAic3JjL21vZHVsZXMvbm90ZUxpZmVjeWNsZU1hbmFnZXIvZmllbGRIYW5kbGVycy9GSCBTdWJzaXN0ZW1hcy9FbnRyZWdhYmxlRmllbGRIYW5kbGVyLnRzIiwgInNyYy9tb2R1bGVzL21vZGFsZXMvc2VsZWNjaW9uTXVsdGlwbGVNb2RhbC50cyIsICJzcmMvbW9kdWxlcy9tb2RhbGVzL3NwaW5uZXJNb2RhbC50cyIsICJzcmMvbW9kdWxlcy9tb2RhbGVzL2RhdGVQaWNrZXJNb2RhbC50cyIsICJzcmMvbW9kdWxlcy9tb2RhbGVzL3BlZGlkb3NDbGllbnRlTW9kYWwudHMiLCAic3JjL21vZHVsZXMvbm90ZUxpZmVjeWNsZU1hbmFnZXIvQVBJL3V0aWxzL0RPTVV0aWxzLnRzIiwgInNyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL0FQSS91dGlscy9OYXZpZ2F0aW9uVXRpbHMudHMiLCAic3JjL21vZHVsZXMvbm90ZUxpZmVjeWNsZU1hbmFnZXIvQVBJL2NvbXBvbmVudHMvVGFyZWFzSW5ib3hDb21wb25lbnQudHMiLCAic3JjL21vZHVsZXMvbm90ZUxpZmVjeWNsZU1hbmFnZXIvQVBJL2NvbXBvbmVudHMvUHJveWVjdG9DYW1wYW5hc0NvbXBvbmVudC50cyIsICJzcmMvbW9kdWxlcy9ub3RlTGlmZWN5Y2xlTWFuYWdlci9BUEkvYWRkT25zQVBJLnRzIiwgInNyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL0FQSS9ZQU1MVXBkYXRlckFQSS50cyIsICJzcmMvbW9kdWxlcy9tb2R1bG9SZWdpc3Ryb1RpZW1wby9tb2RhbHMvY2FtYmlvSEYudHMiLCAic3JjL21vZHVsZXMvbm90ZUxpZmVjeWNsZU1hbmFnZXIvQVBJL21lbnVEaWFyaW9BUEkudHMiLCAic3JjL21vZHVsZXMvbm90ZUxpZmVjeWNsZU1hbmFnZXIvQVBJL21lbnVTZW1hbmFsQVBJLnRzIiwgInNyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL3ZpZXdzL3Zpc3RhUmVzdW1lblNlbWFuYWwudHMiLCAic3JjL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG8vdmlld3MvdmlzdGFSVEFjdGl2by50cyIsICJzcmMvbW9kdWxlcy9tb2R1bG9HVEQvaW5kZXgudHMiLCAic3JjL21vZHVsZXMvbW9kdWxvR1REL2NvbW1hbmRzLnRzIiwgInNyYy9tb2R1bGVzL21vZHVsb0dURC9pbmJveC50cyIsICJzcmMvbW9kdWxlcy9tb2RhbGVzL2luYm94TW9kYWwudHMiLCAic3JjL21vZHVsZXMvbm90ZUxpZmVjeWNsZU1hbmFnZXIvQVBJL3N1YnNpc3RlbWFzQVBJLnRzIiwgInNyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL3ZpZXdzL3Zpc3RhUmVnaXN0cm9EaWFyaW8udHMiLCAic3JjL21vZHVsZXMvR1BUaG9yYS9HUFRob3JhLnRzIiwgInNyYy9tb2R1bGVzL21vZHVsb0xpYnJvcy9saWJyb3NBUEkudHMiLCAic3JjL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG8vQVBJL3VwZGF0ZVNlc2lvbkxlY3R1cmEudHMiLCAic3JjL21vZHVsZXMvdGFza01hbmFnZXIvYXBpL3RhcmVhc0FQSS50cyIsICJzcmMvbW9kdWxlcy90YXNrTWFuYWdlci91dGlscy90YXNrVXRpbHMudHMiLCAic3JjL21vZHVsZXMvdGFza01hbmFnZXIvdXRpbHMvdGFza1dlaWdodENhbGN1bGF0b3IudHMiLCAic3JjL21vZHVsZXMvbW9kdWxvVGFiVGl0bGUvaW5kZXgudHMiLCAic3JjL21vZHVsZXMvbW9kdWxvVGFiVGl0bGUvY29tbWFuZHMudHMiLCAic3JjL21vZHVsZXMvbW9kdWxvVGFiVGl0bGUvVGFiVGl0bGVNYW5hZ2VyLnRzIiwgInNyYy9tb2R1bGVzL21vZHVsb1RhYlRpdGxlL3ZpZXdzL0N1c3RvbU1hcmtkb3duVmlldy50cyIsICJzcmMvbW9kdWxlcy9tb2R1bG9UYWJUaXRsZS91dGlscy9sb2dnZXIudHMiLCAic3JjL21vZHVsZXMvbW9kdWxvVGFiVGl0bGUvZGVmYXVsdHMvZGVmYXVsdFNldHRpbmdzLnRzIiwgInNyYy9tb2R1bGVzL3Rhc2tNYW5hZ2VyL2luZGV4LnRzIiwgInNyYy9tb2R1bGVzL3Rhc2tNYW5hZ2VyL2NvbW1hbmRzLnRzIiwgInNyYy9tb2R1bGVzL2RhdGF2aWV3UXVlcmllcy9pbmRleC50cyIsICJzcmMvbW9kdWxlcy9kYXRhdmlld1F1ZXJpZXMvRGF0YXZpZXdRdWVyeU1hbmFnZXIudHMiLCAic3JjL21vZHVsZXMvZGF0YXZpZXdRdWVyaWVzL2NvbW1hbmRzLnRzIiwgInNyYy9tb2R1bGVzL2RhdGF2aWV3UXVlcmllcy9RdWVyeVJlbmRlcmVyLnRzIiwgInNyYy9tb2R1bGVzL3Rhc2tFeGVjdXRpb25OYXZpZ2F0b3IvaW5kZXgudHMiLCAic3JjL21vZHVsZXMvdGFza0V4ZWN1dGlvbk5hdmlnYXRvci9jb21tYW5kcy50cyIsICJzcmMvbW9kdWxlcy90YXNrRXhlY3V0aW9uTmF2aWdhdG9yL3Rhc2tFeGVjdXRpb25OYXZpZ2F0b3IudHMiLCAic3JjL21vZHVsZXMvdGFza05hdmlnYXRvci9tb2R1bGUudHMiLCAic3JjL21vZHVsZXMvdGFza05hdmlnYXRvci92aWV3cy9UYXNrTmF2aWdhdG9yVmlldy50cyIsICJzcmMvbW9kdWxlcy90YXNrTmF2aWdhdG9yL3NlcnZpY2VzL1Rhc2tIaWVyYXJjaHlCdWlsZGVyLnRzIiwgInNyYy9tb2R1bGVzL3Rhc2tOYXZpZ2F0b3Ivc2VydmljZXMvRW50aXR5RGV0ZWN0b3IudHMiLCAic3JjL21vZHVsZXMvdGFza05hdmlnYXRvci9zZXJ2aWNlcy9UYXNrUGFyc2VyLnRzIiwgInNyYy9tb2R1bGVzL3Rhc2tOYXZpZ2F0b3Ivc2VydmljZXMvVGFza0NsYXNzaWZpZXIudHMiLCAic3JjL21vZHVsZXMvdGFza05hdmlnYXRvci9jb21wb25lbnRzL1ZpZXdSZW5kZXJlci50cyIsICJzcmMvbW9kdWxlcy90YXNrTmF2aWdhdG9yL2NvbXBvbmVudHMvRmlsdGVyUGFuZWwudHMiLCAic3JjL21vZHVsZXMvdGFza05hdmlnYXRvci91dGlscy9OYXZpZ2F0aW9uVXRpbHMudHMiLCAic3JjL21vZHVsZXMvdGFza05hdmlnYXRvci9zZXJ2aWNlcy9UYXNrTWFuYWdlckludGVncmF0aW9uLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyBJbXBvcnRhY2lcdTAwRjNuIGRlIGNsYXNlcyBuZWNlc2FyaWFzIGRlc2RlIGxhIGxpYnJlclx1MDBFRGEgZGUgT2JzaWRpYW4uXG5pbXBvcnQgeyBBcHAsIEZ1enp5U3VnZ2VzdE1vZGFsLCBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XG5cbi8vIERlZmluaWNpXHUwMEYzbiBkZSBsYSBjbGFzZSBTZWxlY2Npb25Nb2RhbCBxdWUgZXh0aWVuZGUgZGUgRnV6enlTdWdnZXN0TW9kYWwgcGFyYSBtYW5lamFyIHNlbGVjY2lvbmVzIGRlIHN0cmluZ3MuXG5leHBvcnQgY2xhc3MgU2VsZWNjaW9uTW9kYWwgZXh0ZW5kcyBGdXp6eVN1Z2dlc3RNb2RhbDxzdHJpbmc+IHtcbiAgICB0aXRsZXM6IHN0cmluZ1tdOyAvLyBBcnJheSBkZSB0XHUwMEVEdHVsb3MgcGFyYSBsYXMgb3BjaW9uZXMgZGVsIG1vZGFsLlxuICAgIHZhbHVlczogc3RyaW5nW107IC8vIEFycmF5IGRlIHZhbG9yZXMgYXNvY2lhZG9zIGEgY2FkYSB0XHUwMEVEdHVsby5cbiAgICB2YWx1ZU1hcDogUmVjb3JkPHN0cmluZywgc3RyaW5nPjsgLy8gT2JqZXRvIHBhcmEgbWFwZWFyIHRcdTAwRUR0dWxvcyBhIHZhbG9yZXMuXG4gICAgcHJpdmF0ZSBzZWxlY2Npb25IZWNoYTogYm9vbGVhbiA9IGZhbHNlOyAvLyBGbGFnIHBhcmEgZGV0ZXJtaW5hciBzaSBzZSBoYSBoZWNobyB1bmEgc2VsZWNjaVx1MDBGM24uXG5cbiAgICAvLyBDb25zdHJ1Y3RvciBkZSBsYSBjbGFzZS5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgdGl0bGVzOiBzdHJpbmdbXSwgdmFsdWVzOiBzdHJpbmdbXSwgcGxhY2Vob2xkZXI6IHN0cmluZykge1xuICAgICAgICBzdXBlcihhcHApOyAvLyBMbGFtYWRhIGFsIGNvbnN0cnVjdG9yIGRlIGxhIGNsYXNlIGJhc2UgY29uIGxhIGluc3RhbmNpYSBkZSBBcHAgZGUgT2JzaWRpYW4uXG4gICAgICAgIHRoaXMudGl0bGVzID0gdGl0bGVzOyAvLyBJbmljaWFsaXphY2lcdTAwRjNuIGRlbCBhcnJheSBkZSB0XHUwMEVEdHVsb3MuXG4gICAgICAgIHRoaXMudmFsdWVzID0gdmFsdWVzOyAvLyBJbmljaWFsaXphY2lcdTAwRjNuIGRlbCBhcnJheSBkZSB2YWxvcmVzLlxuICAgICAgICAvLyBDcmVhY2lcdTAwRjNuIGRlbCBtYXBlbyBkZSB0XHUwMEVEdHVsb3MgYSB2YWxvcmVzLlxuICAgICAgICB0aGlzLnZhbHVlTWFwID0gdGl0bGVzLnJlZHVjZSgoYWNjLCB0aXRsZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGFjY1t0aXRsZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfSwge30pO1xuICAgICAgICB0aGlzLnNldFBsYWNlaG9sZGVyKHBsYWNlaG9sZGVyKTsgLy8gRXN0YWJsZWNpbWllbnRvIGRlbCB0ZXh0byBkZSBwbGFjZWhvbGRlciBwYXJhIGVsIGNhbXBvIGRlIGJcdTAwRkFzcXVlZGEgZW4gZWwgbW9kYWwuXG4gICAgfVxuXG4gICAgLy8gTVx1MDBFOXRvZG8gcGFyYSBvYnRlbmVyIGxvcyBcdTAwRUR0ZW1zICh0XHUwMEVEdHVsb3MpIHF1ZSBzZSBtb3N0cmFyXHUwMEUxbiBlbiBlbCBtb2RhbC5cbiAgICBnZXRJdGVtcygpOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpdGxlcztcbiAgICB9XG5cbiAgICAvLyBNXHUwMEU5dG9kbyBwYXJhIG9idGVuZXIgZWwgdGV4dG8gcXVlIHNlIG1vc3RyYXJcdTAwRTEgcGFyYSBjYWRhIFx1MDBFRHRlbSBlbiBlbCBtb2RhbC5cbiAgICBnZXRJdGVtVGV4dChpdGVtOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG5cbiAgICAvLyBNXHUwMEU5dG9kbyBxdWUgc2UgbGxhbWEgYWwgY2VycmFyIGVsIG1vZGFsLlxuICAgIG9uQ2xvc2UoKTogdm9pZCB7XG4gICAgICAgIC8vIFNpIGVsIG1vZGFsIHNlIGNpZXJyYSBzaW4gcXVlIHNlIGhheWEgaGVjaG8gdW5hIHNlbGVjY2lcdTAwRjNuLCBzZSByZWNoYXphIGxhIHByb21lc2EuXG4gICAgICAgIGlmICghdGhpcy5zZWxlY2Npb25IZWNoYSkge1xuICAgICAgICAgICAgdGhpcy5yZWplY3QobmV3IEVycm9yKCdNb2RhbCBjZXJyYWRvIHNpbiBzZWxlY2NpXHUwMEYzbicpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1cdTAwRTl0b2RvIHBhcmEgbWFuZWphciBsYSBzZWxlY2NpXHUwMEYzbiBkZSB1biBcdTAwRUR0ZW0uXG4gICAgc2VsZWN0U3VnZ2VzdGlvbihpdGVtOiBzdHJpbmcsIGV2dDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZWxlY2Npb25IZWNoYSA9IHRydWU7IC8vIE1hcmNhciBxdWUgc2UgaGEgaGVjaG8gdW5hIHNlbGVjY2lcdTAwRjNuLlxuICAgICAgICBzdXBlci5zZWxlY3RTdWdnZXN0aW9uKGl0ZW0sIGV2dCk7IC8vIExsYW1hciBhbCBtXHUwMEU5dG9kbyBjb3JyZXNwb25kaWVudGUgZGUgbGEgY2xhc2UgYmFzZSBwYXJhIG1hbmVqYXIgbGEgc2VsZWNjaVx1MDBGM24uXG4gICAgfVxuXG4gICAgLy8gTVx1MDBFOXRvZG8gcXVlIHNlIGxsYW1hIGFsIGVsZWdpciB1biBcdTAwRUR0ZW0sIGRvbmRlIHNlIHJlc3VlbHZlIGxhIHByb21lc2EgY29uIGVsIHZhbG9yIGFzb2NpYWRvIGFsIFx1MDBFRHRlbSBzZWxlY2Npb25hZG8uXG4gICAgb25DaG9vc2VJdGVtKGl0ZW06IHN0cmluZywgZXZ0OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMudmFsdWVNYXBbaXRlbV07IC8vIE9idGVuZXIgZWwgdmFsb3IgYXNvY2lhZG8gYWwgXHUwMEVEdGVtIHNlbGVjY2lvbmFkby5cbiAgICAgICAgdGhpcy5yZXNvbHZlKHZhbHVlKTsgLy8gUmVzb2x2ZXIgbGEgcHJvbWVzYSBjb24gZWwgdmFsb3Igc2VsZWNjaW9uYWRvLlxuICAgIH1cblxuICAgIC8vIE1cdTAwRTl0b2RvIHBhcmEgYWJyaXIgZWwgbW9kYWwgeSBlc3BlcmFyIGEgcXVlIGVsIHVzdWFyaW8gaGFnYSB1bmEgc2VsZWNjaVx1MDBGM24sIGRldm9sdmllbmRvIHVuYSBwcm9tZXNhIGNvbiBlbCB2YWxvciBzZWxlY2Npb25hZG8uXG4gICAgb3BlbkFuZEF3YWl0U2VsZWN0aW9uKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZSA9IHJlc29sdmU7IC8vIEd1YXJkYXIgbGEgZnVuY2lcdTAwRjNuIHJlc29sdmUgZGUgbGEgcHJvbWVzYSBwYXJhIHVzYXJsYSBhbCBzZWxlY2Npb25hciB1biBcdTAwRUR0ZW0uXG4gICAgICAgICAgICB0aGlzLnJlamVjdCA9IHJlamVjdDsgLy8gR3VhcmRhciBsYSBmdW5jaVx1MDBGM24gcmVqZWN0IGRlIGxhIHByb21lc2EgcGFyYSB1c2FybGEgc2kgc2UgY2llcnJhIGVsIG1vZGFsIHNpbiBzZWxlY2NpXHUwMEYzbi5cbiAgICAgICAgICAgIHRoaXMub3BlbigpOyAvLyBBYnJpciBlbCBtb2RhbC5cbiAgICAgICAgfSk7XG4gICAgfVxufSIsICJpbXBvcnQgeyBBcHAsIEZ1enp5U3VnZ2VzdE1vZGFsLCBGdXp6eU1hdGNoIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmV4cG9ydCBjbGFzcyBTZWxlY2Npb25Nb2RhbFRhcmVhcyBleHRlbmRzIEZ1enp5U3VnZ2VzdE1vZGFsPHN0cmluZz4ge1xuICAgIHByaXZhdGUgb3B0aW9uczogc3RyaW5nW107IC8vIEFxdVx1MDBFRCBndWFyZGFtb3MgbGFzIGNhZGVuYXMgSFRNTCBxdWUgc2UgbW9zdHJhclx1MDBFMW5cbiAgICBwcml2YXRlIHZhbHVlczogc3RyaW5nW107ICAvLyBWYWxvcmVzIHF1ZSBzZSByZXRvcm5hbiBhbCBlbGVnaXJcbiAgICBwcml2YXRlIHNlbGVjY2lvbkhlY2hhID0gZmFsc2U7XG4gICAgcHJpdmF0ZSByZXNvbHZlU2VsZWN0aW9uITogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgcHJpdmF0ZSByZWplY3RTZWxlY3Rpb24hOiAocmVhc29uPzogYW55KSA9PiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIGFwcCBPYnNpZGlhbiBBcHBcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBMaXN0YSBkZSBjYWRlbmFzIChQVUVERSBJTkNMVUlSIEhUTUwpIHF1ZSBzZSBtb3N0cmFyXHUwMEUxbiBlbiBlbCBtb2RhbFxuICAgICAqIEBwYXJhbSB2YWx1ZXMgIExpc3RhIGRlIHZhbG9yZXMgYXNvY2lhZG9zIGEgY2FkYSBvcGNpXHUwMEYzblxuICAgICAqIEBwYXJhbSBwbGFjZWhvbGRlciBUZXh0byBlbiBsYSBiYXJyYSBkZSBiXHUwMEZBc3F1ZWRhXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIG9wdGlvbnM6IHN0cmluZ1tdLCB2YWx1ZXM6IHN0cmluZ1tdLCBwbGFjZWhvbGRlcjogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICAgICAgICB0aGlzLnNldFBsYWNlaG9sZGVyKHBsYWNlaG9sZGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRvcm5hIGxhIGxpc3RhIGRlIFx1MDBFRHRlbXMgKGVuIGVzdGUgY2FzbywgY2FkZW5hcykgc29icmUgbGFzIHF1ZSBzZSBoYXJcdTAwRTEgbGEgYlx1MDBGQXNxdWVkYSBkaWZ1c2EuXG4gICAgICovXG4gICAgZ2V0SXRlbXMoKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERldGVybWluYSBlbCB0ZXh0byBxdWUgc2UgdXNhIGludGVybmFtZW50ZSBwYXJhIGxhIGJcdTAwRkFzcXVlZGEgZGlmdXNhLlxuICAgICAqIEFxdVx1MDBFRCBxdWl0YW1vcyBldGlxdWV0YXMgSFRNTCwgcGFyYSBxdWUgbGEgYlx1MDBGQXNxdWVkYSBzZWEgc29icmUgdGV4dG8gcGxhbm8uXG4gICAgICovXG4gICAgZ2V0SXRlbVRleHQoaXRlbTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgLy8gRWxpbWluYXIgZXRpcXVldGFzIEhUTUxcbiAgICAgICAgcmV0dXJuIGl0ZW0ucmVwbGFjZSgvPFtePl0rPi9nLCBcIlwiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb250cm9sYSBjXHUwMEYzbW8gc2UgbXVlc3RyYSBjYWRhIG9wY2lcdTAwRjNuIGVuIGxhIGxpc3RhIGRlIHN1Z2VyZW5jaWFzLlxuICAgICAqIEFzaWduYW1vcyAnZWwuaW5uZXJIVE1MJyBwYXJhIHF1ZSBzZSByZW5kZXJpY2UgZWwgSFRNTCBjb24gZXN0aWxvcyxcbiAgICAgKiBlbiBsdWdhciBkZSBtb3N0cmFyIGxhcyBldGlxdWV0YXMgZW4gY3J1ZG8uXG4gICAgICovXG4gICAgcmVuZGVyU3VnZ2VzdGlvbihyZXN1bHQ6IEZ1enp5TWF0Y2g8c3RyaW5nPiwgZWw6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGVsLmlubmVySFRNTCA9IHJlc3VsdC5pdGVtOyBcbiAgICAgICAgLy8gU2kgcXVpc2llcmFzIHJlc2FsdGFyIGNvaW5jaWRlbmNpYXMgbWFudWFsbWVudGUsIGhhYnJcdTAwRURhIHF1ZSBtb2RpZmljYXIgYXF1XHUwMEVELlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1hbmVqYSBsYSBzZWxlY2NpXHUwMEYzbiBkZSB1biBcdTAwRUR0ZW0uIE1hcmNhbW9zIHF1ZSBzZSBoYSBoZWNobyBzZWxlY2NpXHUwMEYzbiB5IGRlbGVnYW1vcyBhbCBtXHUwMEU5dG9kbyBwYWRyZS5cbiAgICAgKi9cbiAgICBzZWxlY3RTdWdnZXN0aW9uKGl0ZW06IHN0cmluZywgZXZ0OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLnNlbGVjY2lvbkhlY2hhID0gdHJ1ZTtcbiAgICAgICAgc3VwZXIuc2VsZWN0U3VnZ2VzdGlvbihpdGVtLCBldnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlIGxsYW1hIGN1YW5kbyBlbCB1c3VhcmlvIGNvbmZpcm1hIGxhIGVsZWNjaVx1MDBGM24gZGUgdW4gXHUwMEVEdGVtIGRlIGxhIGxpc3RhLlxuICAgICAqIE9idGVuZW1vcyBlbCB2YWxvciBhc29jaWFkbyB5IHJlc29sdmVtb3MgbGEgcHJvbWVzYS5cbiAgICAgKi9cbiAgICBvbkNob29zZUl0ZW0oaXRlbTogc3RyaW5nLCBldnQ6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5vcHRpb25zLmluZGV4T2YoaXRlbSk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy52YWx1ZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnJlc29sdmVTZWxlY3Rpb24odmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNpIGVsIG1vZGFsIHNlIGNpZXJyYSBzaW4gcXVlIGVsIHVzdWFyaW8gc2VsZWNjaW9uZSBuYWRhLCByZWNoYXphbW9zIGxhIHByb21lc2EuXG4gICAgICovXG4gICAgb25DbG9zZSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjY2lvbkhlY2hhKSB7XG4gICAgICAgICAgICB0aGlzLnJlamVjdFNlbGVjdGlvbihuZXcgRXJyb3IoXCJNb2RhbCBjZXJyYWRvIHNpbiBzZWxlY2NpXHUwMEYzblwiKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNXHUwMEU5dG9kbyBwYXJhIGFicmlyIGVsIG1vZGFsIHkgcmV0b3JuYXIgdW5hIHByb21lc2EgcXVlIHNlIHJlc3VlbHZlIGN1YW5kb1xuICAgICAqIGVsIHVzdWFyaW8gZWxpZ2UgdW4gXHUwMEVEdGVtIG8gc2UgcmVjaGF6YSBzaSBjaWVycmEgc2luIGVsZWdpci5cbiAgICAgKi9cbiAgICBvcGVuQW5kQXdhaXRTZWxlY3Rpb24oKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZVNlbGVjdGlvbiA9IHJlc29sdmU7XG4gICAgICAgICAgICB0aGlzLnJlamVjdFNlbGVjdGlvbiA9IHJlamVjdDtcbiAgICAgICAgICAgIHRoaXMub3BlbigpO1xuICAgICAgICB9KTtcbiAgICB9XG59IiwgImltcG9ydCB7IEFwcCwgUGx1Z2luLCBOb3RpY2UgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7U2VsZWNjaW9uTW9kYWx9IGZyb20gXCIuL3NlbGVjY2lvbk1vZGFsXCI7XG5cbmV4cG9ydCBjbGFzcyBmdXp6eVNlbGVjdE9yQ3JlYXRlIHtcbiAgYXBwOiBBcHA7XG4gIHBsdWdpbjogUGx1Z2luO1xuICBwYXRoQ2FtcG9zOiBzdHJpbmcgPSBcIkVzdHJ1Y3R1cmEvQ2FtcG9zIFNpc3RlbWEgR2VzdGlvbi9DYW1wb3MgUmVnaXN0cm8gVGllbXBvLm1kXCI7XG5cbiAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogUGx1Z2luKSB7XG4gICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gIH1cblxuICBjcmVhdGVNb2RhbCgpIHtcbiAgICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgbW9kYWwuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJmdXp6eVNlYXJjaE1vZGFsXCIpO1xuICAgIG1vZGFsLnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICAgIG1vZGFsLnN0eWxlLnRvcCA9IFwiNTAlXCI7XG4gICAgbW9kYWwuc3R5bGUubGVmdCA9IFwiNTAlXCI7XG4gICAgbW9kYWwuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoLTUwJSwgLTUwJSlcIjtcbiAgICBtb2RhbC5zdHlsZS56SW5kZXggPSBcIjEwMDBcIjtcbiAgICBtb2RhbC5zdHlsZS5wYWRkaW5nID0gXCIyMHB4XCI7XG4gICAgbW9kYWwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ3aGl0ZVwiO1xuICAgIG1vZGFsLnN0eWxlLmJvcmRlciA9IFwiMXB4IHNvbGlkICNjY2NcIjtcbiAgICBtb2RhbC5zdHlsZS5ib3JkZXJSYWRpdXMgPSBcIjVweFwiO1xuICAgIG1vZGFsLnN0eWxlLmJveFNoYWRvdyA9IFwiMCA0cHggNnB4IHJnYmEoMCwwLDAsLjEpXCI7XG4gICAgbW9kYWwuc3R5bGUud2lkdGggPSBcIjMwMHB4XCI7XG4gIFxuICAgIGNvbnN0IGNsb3NlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBjbG9zZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiXHUwMEQ3XCI7XG4gICAgY2xvc2VCdXR0b24uc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgY2xvc2VCdXR0b24uc3R5bGUudG9wID0gXCI1cHhcIjtcbiAgICBjbG9zZUJ1dHRvbi5zdHlsZS5yaWdodCA9IFwiNXB4XCI7XG4gICAgY2xvc2VCdXR0b24uc3R5bGUuYm9yZGVyID0gXCJub25lXCI7XG4gICAgY2xvc2VCdXR0b24uc3R5bGUuYmFja2dyb3VuZCA9IFwibm9uZVwiO1xuICAgIGNsb3NlQnV0dG9uLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xuICAgIGNsb3NlQnV0dG9uLnN0eWxlLmZvbnRTaXplID0gXCIxNnB4XCI7XG4gICAgY2xvc2VCdXR0b24uc3R5bGUuZm9udFdlaWdodCA9IFwiYm9sZFwiO1xuICAgIGNsb3NlQnV0dG9uLnN0eWxlLnBhZGRpbmcgPSBcIjBweCA0cHhcIjtcbiAgICBjbG9zZUJ1dHRvbi5zdHlsZS5ib3JkZXJSYWRpdXMgPSBcIjEwcHhcIjtcbiAgICBjbG9zZUJ1dHRvbi5zdHlsZS5vdXRsaW5lID0gXCJub25lXCI7XG4gICAgY2xvc2VCdXR0b24uc3R5bGUuYm94U2hhZG93ID0gXCJub25lXCI7XG4gICAgY2xvc2VCdXR0b24ub25jbGljayA9ICgpID0+IG1vZGFsLnJlbW92ZSgpO1xuICBcbiAgICBtb2RhbC5hcHBlbmRDaGlsZChjbG9zZUJ1dHRvbik7XG4gICAgcmV0dXJuIG1vZGFsO1xuICB9XG5cbiAgZmlsdGVySXRlbXMocXVlcnk6IHN0cmluZywgaXRlbXM6IGFueVtdKSB7XG4gICAgcmV0dXJuIGl0ZW1zLmZpbHRlcigoaXRlbTogeyB2YWx1ZTogc3RyaW5nOyB9KSA9PlxuICAgICAgaXRlbS52YWx1ZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5LnRvTG93ZXJDYXNlKCkpXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZVlBTUxGaWVsZHModGlwbzogc3RyaW5nIHwgbnVtYmVyLCBzZWxlY3RlZFZhbHVlOiBhbnksIHNlbGVjdGVkR3JvdXA6IGFueSkge1xuICAgIHRyeSB7XG4gICAgICAgIGRlYnVnZ2VyXG4gICAgICAgIGNvbnN0IGZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHRoaXMucGF0aENhbXBvcyk7XG4gICAgICAgIGF3YWl0IGFwcC5maWxlTWFuYWdlci5wcm9jZXNzRnJvbnRNYXR0ZXIoZmlsZSwgKGZyb250bWF0dGVyOiB7IFt4OiBzdHJpbmddOiBhbnlbXTsgfSkgPT4ge1xuICAgICAgICAgICAgLy8gQXN1bWllbmRvIHF1ZSAnYWN0c1RlbWFzJyBlcyBlbCBjYW1wbyBhIG1vZGlmaWNhclxuICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgICBsZXQgY3VycmVudEFjdHMgPSBmcm9udG1hdHRlclt0aXBvXSB8fCBbXTtcbiAgICAgICAgICAgIGxldCBuZXdWYWx1ZUZvckFjdHMgPSBbLi4uY3VycmVudEFjdHMsIFtzZWxlY3RlZEdyb3VwLCBzZWxlY3RlZFZhbHVlXV07XG4gICAgICAgICAgICBmcm9udG1hdHRlclt0aXBvXSA9IG5ld1ZhbHVlRm9yQWN0cztcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkZyb250bWF0dGVyIGFjdHVhbGl6YWRvIGNvbiBcdTAwRTl4aXRvXCIpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIGFjdHVhbGl6YXIgZWwgZnJvbnRtYXR0ZXJcIiwgZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gIGFzeW5jIHNob3dGdXp6eVNlYXJjaE1vZGFsKGl0ZW1zOiBhbnksIGdyb3VwczogYW55W10sIHRpcG86IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGxldCBzZWxlY3RlZFZhbHVlID0gXCJcIjsgLy8gVmFyaWFibGUgcGFyYSBndWFyZGFyIGxhIG9wY2lcdTAwRjNuIHNlbGVjY2lvbmFkYSBvIGluZ3Jlc2FkYSBwb3IgZWwgdXN1YXJpb1xuICAgICAgICBsZXQgc2VsZWN0ZWRHcm91cCA9IFwiXCI7XG4gICAgICAgIGNvbnN0IG1vZGFsID0gdGhpcy5jcmVhdGVNb2RhbCgpO1xuICAgICAgXG5cbiAgICAgICAgLy8gQ3JlYXIgeSBjb25maWd1cmFyIGVsIHRcdTAwRUR0dWxvIGRlbCBtb2RhbFxuICAgICAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMlwiKTtcbiAgICAgICAgdGl0bGUudGV4dENvbnRlbnQgPSBcIkJ1c2NhIG8gY3JlYSB0dSBhY3RpdmlkYWRcIjtcbiAgICAgICAgdGl0bGUuc3R5bGUudGV4dEFsaWduID0gXCJjZW50ZXJcIjsgLy8gQ2VudHJhciBlbCB0XHUwMEVEdHVsbywgYWp1c3RhIGxvcyBlc3RpbG9zIHNlZ1x1MDBGQW4gc2VhIG5lY2VzYXJpb1xuICAgICAgICBtb2RhbC5hcHBlbmRDaGlsZCh0aXRsZSk7XG5cbiAgICAgICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIGlucHV0LnR5cGUgPSBcInRleHRcIjtcbiAgICAgICAgaW5wdXQucGxhY2Vob2xkZXIgPSBcIkVzY3JpYmUgdHUgYWN0aXZpZGFkLi4uXCI7XG4gICAgICAgIC8vIEVzdGFibGVjZSBlbCBhbmNobyBkZWwgaW5wdXQgYSB1biBwb3JjZW50YWplIGRlbCBjb250ZW5lZG9yIHBhcmEgaGFjZXJsbyBtXHUwMEUxcyBhbmNoby5cbiAgICAgICAgaW5wdXQuc3R5bGUud2lkdGggPSBcIjgwJVwiO1xuICAgICAgICAvLyBDZW50cmFyIGVsIHRleHRvIGRlbnRybyBkZWwgaW5wdXRcbiAgICAgICAgaW5wdXQuc3R5bGUudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcbiAgICAgICAgLy8gQ2VudHJhciBlbCBpbnB1dCBkZW50cm8gZGVsIG1vZGFsIChzaSBlbCBtb2RhbCB0aWVuZSB1biBkaXNwbGF5IGZsZXgpXG4gICAgICAgIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgICAgICAgbW9kYWwuc3R5bGUuZmxleERpcmVjdGlvbiA9IFwiY29sdW1uXCI7XG4gICAgICAgIG1vZGFsLnN0eWxlLmFsaWduSXRlbXMgPSBcImNlbnRlclwiO1xuICAgICAgICBtb2RhbC5hcHBlbmRDaGlsZChpbnB1dCk7XG5cblxuICAgICAgICAvLyBDcmVhciB5IGFncmVnYXIgdW4gZXNwYWNpbyBlbnRyZSBlbCBpbnB1dCB5IHJlc3VsdHNEaXZcbiAgICAgICAgY29uc3Qgc3BhY2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgc3BhY2VyLnN0eWxlLmhlaWdodCA9IFwiMTZweFwiOyAvLyBBanVzdGEgZXN0YSBhbHR1cmEgc2VnXHUwMEZBbiBuZWNlc2l0ZXMgcGFyYSBlbCBlc3BhY2lvXG4gICAgICAgIG1vZGFsLmFwcGVuZENoaWxkKHNwYWNlcik7XG4gICAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0c0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIG1vZGFsLmFwcGVuZENoaWxkKHJlc3VsdHNEaXYpO1xuICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVJlc3VsdHNEaXNwbGF5KGZpbHRlcmVkUmVzdWx0czogYW55W10sIG1lbnVPdHJvOiB0aGlzKSB7XG4gICAgICAgICAgcmVzdWx0c0Rpdi5pbm5lckhUTUwgPSBcIlwiOyAvLyBMaW1waWFyIHJlc3VsdGFkb3MgcHJldmlvc1xuICAgICAgICAgIGZpbHRlcmVkUmVzdWx0cy5mb3JFYWNoKChyZXN1bHQ6IHsgdmFsdWU6IHN0cmluZyB8IG51bGw7IGFjdGl2aXR5OiBzdHJpbmc7IGdyb3VwOiBzdHJpbmc7IH0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBkaXYudGV4dENvbnRlbnQgPSByZXN1bHQudmFsdWU7XG4gICAgICAgICAgICBkaXYuc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XG4gICAgICAgICAgICBkaXYub25tb3VzZW92ZXIgPSAoKSA9PiAoZGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiI2YwZjBmMFwiKTtcbiAgICAgICAgICAgIGRpdi5vbm1vdXNlb3V0ID0gKCkgPT4gKGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInRyYW5zcGFyZW50XCIpO1xuICAgICAgICAgICAgZGl2Lm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICAgIHNlbGVjdGVkVmFsdWUgPSByZXN1bHQuYWN0aXZpdHk7IC8vIEd1YXJkYXIgZWwgdmFsb3Igc2VsZWNjaW9uYWRvXG4gICAgICAgICAgICAgIHNlbGVjdGVkR3JvdXAgPSByZXN1bHQuZ3JvdXA7IC8vIEd1YXJkYXIgZWwgZ3J1cG8gc2VsZWNjaW9uYWRvXG4gICAgICAgICAgICAgIC8vZGlzcGxheVNlbGVjdGVkVmFsdWUoc2VsZWN0ZWRWYWx1ZSwgc2VsZWN0ZWRHcm91cCk7IC8vIE1vc3RyYXIgbGEgc2VsZWNjaVx1MDBGM24gYWwgdXN1YXJpb1xuICAgICAgICAgICAgICBtb2RhbC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgcmVzb2x2ZShbc2VsZWN0ZWRWYWx1ZSwgc2VsZWN0ZWRHcm91cF0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlc3VsdHNEaXYuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICAgICAgICB9KTtcbiAgICAgIFxuICAgICAgICAgIC8vIFNpIG5vIGhheSByZXN1bHRhZG9zIHkgZWwgdXN1YXJpbyBoYSBpbmdyZXNhZG8gdW4gdGV4dG8sIG9mcmVjZXIgbGEgY3JlYWNpXHUwMEYzbiBkZSB1bmEgbnVldmEgYWN0aXZpZGFkXG4gICAgICAgICAgaWYgKGZpbHRlcmVkUmVzdWx0cy5sZW5ndGggPT09IDAgJiYgaW5wdXQudmFsdWUudHJpbSgpICE9PSBcIlwiKSB7XG4gICAgICAgICAgICBjb25zdCBjcmVhdGVOZXdEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgY3JlYXRlTmV3RGl2LnRleHRDb250ZW50ID0gYENyZWFyIG51ZXZhIGFjdGl2aWRhZDogXCIke2lucHV0LnZhbHVlfVwiYDtcbiAgICAgICAgICAgIGNyZWF0ZU5ld0Rpdi5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgICAgIGNyZWF0ZU5ld0Rpdi5zdHlsZS5jb2xvciA9IFwiYmx1ZVwiO1xuICAgICAgICAgICAgY3JlYXRlTmV3RGl2Lm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICAgIHNlbGVjdGVkVmFsdWUgPSBpbnB1dC52YWx1ZTsgLy8gR3VhcmRhciBsYSBudWV2YSBhY3RpdmlkYWRcbiAgICAgICAgICAgICAgZGVidWdnZXJcbiAgICAgICAgICAgICAgaWYgKHRpcG89PSB1bmRlZmluZWQpeyB0aXBvID0gXCJhY3RzVGVtYXNcIn1cbiAgICAgICAgICAgICAgc2VsZWN0R3JvdXBGb3JOZXdBY3Rpdml0eShtZW51T3RybywgdGlwbyk7IC8vIFByb2NlZGVyIGEgc2VsZWNjaW9uYXIgdW4gZ3J1cG9cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXN1bHRzRGl2LmFwcGVuZENoaWxkKGNyZWF0ZU5ld0Rpdik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBcbiAgICAgICAgZnVuY3Rpb24gc2VsZWN0R3JvdXBGb3JOZXdBY3Rpdml0eShtZW51T3RybzogeyBlc1JlY3VycmVudGU6IChhcmcwOiBzdHJpbmcpID0+IGFueTsgdXBkYXRlWUFNTEZpZWxkczogKGFyZzA6IGFueSwgYXJnMTogc3RyaW5nLCBhcmcyOiBzdHJpbmcpID0+IGFueTsgfSwgdGlwbzogYW55KSB7XG4gICAgICAgICAgcmVzdWx0c0Rpdi5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICAgIGlucHV0LnJlbW92ZSgpO1xuICAgICAgICAgIHNwYWNlci5yZW1vdmUoKTtcbiAgICAgICAgICB0aXRsZS5yZW1vdmUoKTtcblxuICAgICAgICAgIGNvbnN0IHRleHRvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgICAgdGV4dG8udGV4dENvbnRlbnQgPSBgVmFtb3MgYSBjcmVhciBsYSBhY3RpdmlkYWQ6IFwiJHtzZWxlY3RlZFZhbHVlfVwiLiBTZWxlY2Npb25hIHVuIGdydXBvOmA7O1xuICAgICAgICAgIHRleHRvLnN0eWxlLnRleHRBbGlnbiA9IFwiY2VudGVyXCI7IC8vIENlbnRyYXIgZWwgdFx1MDBFRHR1bG8sIGFqdXN0YSBsb3MgZXN0aWxvcyBzZWdcdTAwRkFuIHNlYSBuZWNlc2FyaW9cbiAgICAgICAgICByZXN1bHRzRGl2LmFwcGVuZENoaWxkKHRleHRvKTsgXG4gICAgICBcbiAgICAgICAgICBncm91cHMuZm9yRWFjaCgoZ3JvdXA6IHN0cmluZyB8IG51bGwpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIGdyb3VwRGl2LnRleHRDb250ZW50ID0gZ3JvdXA7XG4gICAgICAgICAgICBncm91cERpdi5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgICAgIGdyb3VwRGl2Lm9ubW91c2VvdmVyID0gKCkgPT4gKGdyb3VwRGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiI2YwZjBmMFwiKTtcbiAgICAgICAgICAgIGdyb3VwRGl2Lm9ubW91c2VvdXQgPSAoKSA9PiAoZ3JvdXBEaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ0cmFuc3BhcmVudFwiKTtcbiAgICAgICAgICAgIGdyb3VwRGl2Lm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgIHNlbGVjdGVkR3JvdXAgPSBncm91cDsgLy8gR3VhcmRhciBlbCBncnVwbyBzZWxlY2Npb25hZG9cbiAgICAgICAgICAgICAgLy9kaXNwbGF5U2VsZWN0ZWRWYWx1ZShzZWxlY3RlZFZhbHVlLCBzZWxlY3RlZEdyb3VwKTsgLy8gTW9zdHJhciBsYSBhY3RpdmlkYWQgeSBlbCBncnVwbyBzZWxlY2Npb25hZG9cbiAgICAgICAgICAgICAgbW9kYWwucmVtb3ZlKCk7XG4gICAgICAgICAgICAgIGxldCByZWN1cnJlbnRlID0gYXdhaXQgbWVudU90cm8uZXNSZWN1cnJlbnRlKHNlbGVjdGVkVmFsdWUpXG4gICAgICAgICAgICAgIGlmIChyZWN1cnJlbnRlKXtcbiAgICAgICAgICAgICAgICBhd2FpdCBtZW51T3Ryby51cGRhdGVZQU1MRmllbGRzKHRpcG8sIHNlbGVjdGVkVmFsdWUsIHNlbGVjdGVkR3JvdXApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlc29sdmUoW3NlbGVjdGVkVmFsdWUsIHNlbGVjdGVkR3JvdXBdKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXN1bHRzRGl2LmFwcGVuZENoaWxkKGdyb3VwRGl2KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIGRpc3BsYXlTZWxlY3RlZFZhbHVlKGFjdGl2aXR5OiBhbnksIGdyb3VwOiBhbnkpIHtcbiAgICAgICAgICByZXN1bHRzRGl2LmlubmVySFRNTCA9IGBTZWxlY2Npb25hZG86ICR7YWN0aXZpdHl9IC8gJHtncm91cH1gO1xuICAgICAgICAgIC8vIEFxdVx1MDBFRCBwdWVkZXMgY2VycmFyIGVsIG1vZGFsIG8gcGVybWl0aXIgYWwgdXN1YXJpbyBoYWNlciBtXHUwMEUxcyBhY2Npb25lc1xuICAgICAgICB9XG4gICAgICBcbiAgICAgICAgaW5wdXQub25pbnB1dCA9ICgpID0+IHtcbiAgICAgICAgICBjb25zdCBmaWx0ZXJlZEl0ZW1zID0gdGhpcy5maWx0ZXJJdGVtcyhpbnB1dC52YWx1ZSwgaXRlbXMpO1xuICAgICAgICAgIHVwZGF0ZVJlc3VsdHNEaXNwbGF5KGZpbHRlcmVkSXRlbXMsIHRoaXMpO1xuICAgICAgICB9O1xuICAgICAgXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobW9kYWwpO1xuICAgICAgIFxuICAgIH0pOyAgIFxufVxuXG5hc3luYyBlc1JlY3VycmVudGUodGFyZWE6c3RyaW5nKTpQcm9taXNlPGJvb2xlYW4+e1xuICBjb25zdCBvcGNpb25lcyA9IFtcIlNpXCIsXCJOb1wiXSA7XG4gIGNvbnN0IHZhbG9yZXMgPSBbdHJ1ZSxmYWxzZV07XG4gIGNvbnN0IHBsYWNlaG9sZGVyID0gYCR7dGFyZWF9IGVzIHRhcmVhIHJlY3VycmVudGU/YDtcbiAgY29uc3QgbW9kYWwgPSBuZXcgU2VsZWNjaW9uTW9kYWwoYXBwLCBvcGNpb25lcywgdmFsb3JlcywgcGxhY2Vob2xkZXIpO1xuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCBtb2RhbC5vcGVuQW5kQXdhaXRTZWxlY3Rpb24oKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgbyBtb2RhbCBjZXJyYWRvIHNpbiBzZWxlY2NpXHUwMEYzbjpcIiwgZXJyb3IpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbn0iLCAiLy8gdGhlc2UgYXJlbid0IHJlYWxseSBwcml2YXRlLCBidXQgbm9yIGFyZSB0aGV5IHJlYWxseSB1c2VmdWwgdG8gZG9jdW1lbnRcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBMdXhvbkVycm9yIGV4dGVuZHMgRXJyb3Ige31cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY2xhc3MgSW52YWxpZERhdGVUaW1lRXJyb3IgZXh0ZW5kcyBMdXhvbkVycm9yIHtcbiAgY29uc3RydWN0b3IocmVhc29uKSB7XG4gICAgc3VwZXIoYEludmFsaWQgRGF0ZVRpbWU6ICR7cmVhc29uLnRvTWVzc2FnZSgpfWApO1xuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNsYXNzIEludmFsaWRJbnRlcnZhbEVycm9yIGV4dGVuZHMgTHV4b25FcnJvciB7XG4gIGNvbnN0cnVjdG9yKHJlYXNvbikge1xuICAgIHN1cGVyKGBJbnZhbGlkIEludGVydmFsOiAke3JlYXNvbi50b01lc3NhZ2UoKX1gKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnZhbGlkRHVyYXRpb25FcnJvciBleHRlbmRzIEx1eG9uRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihyZWFzb24pIHtcbiAgICBzdXBlcihgSW52YWxpZCBEdXJhdGlvbjogJHtyZWFzb24udG9NZXNzYWdlKCl9YCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY2xhc3MgQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IgZXh0ZW5kcyBMdXhvbkVycm9yIHt9XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNsYXNzIEludmFsaWRVbml0RXJyb3IgZXh0ZW5kcyBMdXhvbkVycm9yIHtcbiAgY29uc3RydWN0b3IodW5pdCkge1xuICAgIHN1cGVyKGBJbnZhbGlkIHVuaXQgJHt1bml0fWApO1xuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNsYXNzIEludmFsaWRBcmd1bWVudEVycm9yIGV4dGVuZHMgTHV4b25FcnJvciB7fVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBab25lSXNBYnN0cmFjdEVycm9yIGV4dGVuZHMgTHV4b25FcnJvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiWm9uZSBpcyBhbiBhYnN0cmFjdCBjbGFzc1wiKTtcbiAgfVxufVxuIiwgIi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jb25zdCBuID0gXCJudW1lcmljXCIsXG4gIHMgPSBcInNob3J0XCIsXG4gIGwgPSBcImxvbmdcIjtcblxuZXhwb3J0IGNvbnN0IERBVEVfU0hPUlQgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBuLFxuICBkYXk6IG4sXG59O1xuXG5leHBvcnQgY29uc3QgREFURV9NRUQgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBzLFxuICBkYXk6IG4sXG59O1xuXG5leHBvcnQgY29uc3QgREFURV9NRURfV0lUSF9XRUVLREFZID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogcyxcbiAgZGF5OiBuLFxuICB3ZWVrZGF5OiBzLFxufTtcblxuZXhwb3J0IGNvbnN0IERBVEVfRlVMTCA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IGwsXG4gIGRheTogbixcbn07XG5cbmV4cG9ydCBjb25zdCBEQVRFX0hVR0UgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBsLFxuICBkYXk6IG4sXG4gIHdlZWtkYXk6IGwsXG59O1xuXG5leHBvcnQgY29uc3QgVElNRV9TSU1QTEUgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbn07XG5cbmV4cG9ydCBjb25zdCBUSU1FX1dJVEhfU0VDT05EUyA9IHtcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG4sXG59O1xuXG5leHBvcnQgY29uc3QgVElNRV9XSVRIX1NIT1JUX09GRlNFVCA9IHtcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG4sXG4gIHRpbWVab25lTmFtZTogcyxcbn07XG5cbmV4cG9ydCBjb25zdCBUSU1FX1dJVEhfTE9OR19PRkZTRVQgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxuICB0aW1lWm9uZU5hbWU6IGwsXG59O1xuXG5leHBvcnQgY29uc3QgVElNRV8yNF9TSU1QTEUgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgaG91ckN5Y2xlOiBcImgyM1wiLFxufTtcblxuZXhwb3J0IGNvbnN0IFRJTUVfMjRfV0lUSF9TRUNPTkRTID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgaG91ckN5Y2xlOiBcImgyM1wiLFxufTtcblxuZXhwb3J0IGNvbnN0IFRJTUVfMjRfV0lUSF9TSE9SVF9PRkZTRVQgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxuICBob3VyQ3ljbGU6IFwiaDIzXCIsXG4gIHRpbWVab25lTmFtZTogcyxcbn07XG5cbmV4cG9ydCBjb25zdCBUSU1FXzI0X1dJVEhfTE9OR19PRkZTRVQgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxuICBob3VyQ3ljbGU6IFwiaDIzXCIsXG4gIHRpbWVab25lTmFtZTogbCxcbn07XG5cbmV4cG9ydCBjb25zdCBEQVRFVElNRV9TSE9SVCA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IG4sXG4gIGRheTogbixcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxufTtcblxuZXhwb3J0IGNvbnN0IERBVEVUSU1FX1NIT1JUX1dJVEhfU0VDT05EUyA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IG4sXG4gIGRheTogbixcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG4sXG59O1xuXG5leHBvcnQgY29uc3QgREFURVRJTUVfTUVEID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogcyxcbiAgZGF5OiBuLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG59O1xuXG5leHBvcnQgY29uc3QgREFURVRJTUVfTUVEX1dJVEhfU0VDT05EUyA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IHMsXG4gIGRheTogbixcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG4sXG59O1xuXG5leHBvcnQgY29uc3QgREFURVRJTUVfTUVEX1dJVEhfV0VFS0RBWSA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IHMsXG4gIGRheTogbixcbiAgd2Vla2RheTogcyxcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxufTtcblxuZXhwb3J0IGNvbnN0IERBVEVUSU1FX0ZVTEwgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBsLFxuICBkYXk6IG4sXG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgdGltZVpvbmVOYW1lOiBzLFxufTtcblxuZXhwb3J0IGNvbnN0IERBVEVUSU1FX0ZVTExfV0lUSF9TRUNPTkRTID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbCxcbiAgZGF5OiBuLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgdGltZVpvbmVOYW1lOiBzLFxufTtcblxuZXhwb3J0IGNvbnN0IERBVEVUSU1FX0hVR0UgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBsLFxuICBkYXk6IG4sXG4gIHdlZWtkYXk6IGwsXG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgdGltZVpvbmVOYW1lOiBsLFxufTtcblxuZXhwb3J0IGNvbnN0IERBVEVUSU1FX0hVR0VfV0lUSF9TRUNPTkRTID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbCxcbiAgZGF5OiBuLFxuICB3ZWVrZGF5OiBsLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgdGltZVpvbmVOYW1lOiBsLFxufTtcbiIsICJpbXBvcnQgeyBab25lSXNBYnN0cmFjdEVycm9yIH0gZnJvbSBcIi4vZXJyb3JzLmpzXCI7XG5cbi8qKlxuICogQGludGVyZmFjZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBab25lIHtcbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHpvbmVcbiAgICogQGFic3RyYWN0XG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgdHlwZSgpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoaXMgem9uZS5cbiAgICogQGFic3RyYWN0XG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgbmFtZSgpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICB9XG5cbiAgZ2V0IGlhbmFOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBvZmZzZXQgaXMga25vd24gdG8gYmUgZml4ZWQgZm9yIHRoZSB3aG9sZSB5ZWFyLlxuICAgKiBAYWJzdHJhY3RcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgaXNVbml2ZXJzYWwoKSB7XG4gICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBvZmZzZXQncyBjb21tb24gbmFtZSAoc3VjaCBhcyBFU1QpIGF0IHRoZSBzcGVjaWZpZWQgdGltZXN0YW1wXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAcGFyYW0ge251bWJlcn0gdHMgLSBFcG9jaCBtaWxsaXNlY29uZHMgZm9yIHdoaWNoIHRvIGdldCB0aGUgbmFtZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIE9wdGlvbnMgdG8gYWZmZWN0IHRoZSBmb3JtYXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZm9ybWF0IC0gV2hhdCBzdHlsZSBvZiBvZmZzZXQgdG8gcmV0dXJuLiBBY2NlcHRzICdsb25nJyBvciAnc2hvcnQnLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5sb2NhbGUgLSBXaGF0IGxvY2FsZSB0byByZXR1cm4gdGhlIG9mZnNldCBuYW1lIGluLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBvZmZzZXROYW1lKHRzLCBvcHRzKSB7XG4gICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBvZmZzZXQncyB2YWx1ZSBhcyBhIHN0cmluZ1xuICAgKiBAYWJzdHJhY3RcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRzIC0gRXBvY2ggbWlsbGlzZWNvbmRzIGZvciB3aGljaCB0byBnZXQgdGhlIG9mZnNldFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0IC0gV2hhdCBzdHlsZSBvZiBvZmZzZXQgdG8gcmV0dXJuLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgQWNjZXB0cyAnbmFycm93JywgJ3Nob3J0Jywgb3IgJ3RlY2hpZScuIFJldHVybmluZyAnKzYnLCAnKzA2OjAwJywgb3IgJyswNjAwJyByZXNwZWN0aXZlbHlcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZm9ybWF0T2Zmc2V0KHRzLCBmb3JtYXQpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgb2Zmc2V0IGluIG1pbnV0ZXMgZm9yIHRoaXMgem9uZSBhdCB0aGUgc3BlY2lmaWVkIHRpbWVzdGFtcC5cbiAgICogQGFic3RyYWN0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0cyAtIEVwb2NoIG1pbGxpc2Vjb25kcyBmb3Igd2hpY2ggdG8gY29tcHV0ZSB0aGUgb2Zmc2V0XG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIG9mZnNldCh0cykge1xuICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBab25lIGlzIGVxdWFsIHRvIGFub3RoZXIgem9uZVxuICAgKiBAYWJzdHJhY3RcbiAgICogQHBhcmFtIHtab25lfSBvdGhlclpvbmUgLSB0aGUgem9uZSB0byBjb21wYXJlXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBlcXVhbHMob3RoZXJab25lKSB7XG4gICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIFpvbmUgaXMgdmFsaWQuXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBpc1ZhbGlkKCkge1xuICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBmb3JtYXRPZmZzZXQsIHBhcnNlWm9uZUluZm8gfSBmcm9tIFwiLi4vaW1wbC91dGlsLmpzXCI7XG5pbXBvcnQgWm9uZSBmcm9tIFwiLi4vem9uZS5qc1wiO1xuXG5sZXQgc2luZ2xldG9uID0gbnVsbDtcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBsb2NhbCB6b25lIGZvciB0aGlzIEphdmFTY3JpcHQgZW52aXJvbm1lbnQuXG4gKiBAaW1wbGVtZW50cyB7Wm9uZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3lzdGVtWm9uZSBleHRlbmRzIFpvbmUge1xuICAvKipcbiAgICogR2V0IGEgc2luZ2xldG9uIGluc3RhbmNlIG9mIHRoZSBsb2NhbCB6b25lXG4gICAqIEByZXR1cm4ge1N5c3RlbVpvbmV9XG4gICAqL1xuICBzdGF0aWMgZ2V0IGluc3RhbmNlKCkge1xuICAgIGlmIChzaW5nbGV0b24gPT09IG51bGwpIHtcbiAgICAgIHNpbmdsZXRvbiA9IG5ldyBTeXN0ZW1ab25lKCk7XG4gICAgfVxuICAgIHJldHVybiBzaW5nbGV0b247XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gXCJzeXN0ZW1cIjtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgpLnJlc29sdmVkT3B0aW9ucygpLnRpbWVab25lO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgZ2V0IGlzVW5pdmVyc2FsKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIG9mZnNldE5hbWUodHMsIHsgZm9ybWF0LCBsb2NhbGUgfSkge1xuICAgIHJldHVybiBwYXJzZVpvbmVJbmZvKHRzLCBmb3JtYXQsIGxvY2FsZSk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBmb3JtYXRPZmZzZXQodHMsIGZvcm1hdCkge1xuICAgIHJldHVybiBmb3JtYXRPZmZzZXQodGhpcy5vZmZzZXQodHMpLCBmb3JtYXQpO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgb2Zmc2V0KHRzKSB7XG4gICAgcmV0dXJuIC1uZXcgRGF0ZSh0cykuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIGVxdWFscyhvdGhlclpvbmUpIHtcbiAgICByZXR1cm4gb3RoZXJab25lLnR5cGUgPT09IFwic3lzdGVtXCI7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBnZXQgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuIiwgImltcG9ydCB7IGZvcm1hdE9mZnNldCwgcGFyc2Vab25lSW5mbywgaXNVbmRlZmluZWQsIG9ialRvTG9jYWxUUyB9IGZyb20gXCIuLi9pbXBsL3V0aWwuanNcIjtcbmltcG9ydCBab25lIGZyb20gXCIuLi96b25lLmpzXCI7XG5cbmxldCBkdGZDYWNoZSA9IHt9O1xuZnVuY3Rpb24gbWFrZURURih6b25lKSB7XG4gIGlmICghZHRmQ2FjaGVbem9uZV0pIHtcbiAgICBkdGZDYWNoZVt6b25lXSA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KFwiZW4tVVNcIiwge1xuICAgICAgaG91cjEyOiBmYWxzZSxcbiAgICAgIHRpbWVab25lOiB6b25lLFxuICAgICAgeWVhcjogXCJudW1lcmljXCIsXG4gICAgICBtb250aDogXCIyLWRpZ2l0XCIsXG4gICAgICBkYXk6IFwiMi1kaWdpdFwiLFxuICAgICAgaG91cjogXCIyLWRpZ2l0XCIsXG4gICAgICBtaW51dGU6IFwiMi1kaWdpdFwiLFxuICAgICAgc2Vjb25kOiBcIjItZGlnaXRcIixcbiAgICAgIGVyYTogXCJzaG9ydFwiLFxuICAgIH0pO1xuICB9XG4gIHJldHVybiBkdGZDYWNoZVt6b25lXTtcbn1cblxuY29uc3QgdHlwZVRvUG9zID0ge1xuICB5ZWFyOiAwLFxuICBtb250aDogMSxcbiAgZGF5OiAyLFxuICBlcmE6IDMsXG4gIGhvdXI6IDQsXG4gIG1pbnV0ZTogNSxcbiAgc2Vjb25kOiA2LFxufTtcblxuZnVuY3Rpb24gaGFja3lPZmZzZXQoZHRmLCBkYXRlKSB7XG4gIGNvbnN0IGZvcm1hdHRlZCA9IGR0Zi5mb3JtYXQoZGF0ZSkucmVwbGFjZSgvXFx1MjAwRS9nLCBcIlwiKSxcbiAgICBwYXJzZWQgPSAvKFxcZCspXFwvKFxcZCspXFwvKFxcZCspIChBRHxCQyksPyAoXFxkKyk6KFxcZCspOihcXGQrKS8uZXhlYyhmb3JtYXR0ZWQpLFxuICAgIFssIGZNb250aCwgZkRheSwgZlllYXIsIGZhZE9yQmMsIGZIb3VyLCBmTWludXRlLCBmU2Vjb25kXSA9IHBhcnNlZDtcbiAgcmV0dXJuIFtmWWVhciwgZk1vbnRoLCBmRGF5LCBmYWRPckJjLCBmSG91ciwgZk1pbnV0ZSwgZlNlY29uZF07XG59XG5cbmZ1bmN0aW9uIHBhcnRzT2Zmc2V0KGR0ZiwgZGF0ZSkge1xuICBjb25zdCBmb3JtYXR0ZWQgPSBkdGYuZm9ybWF0VG9QYXJ0cyhkYXRlKTtcbiAgY29uc3QgZmlsbGVkID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZm9ybWF0dGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgeyB0eXBlLCB2YWx1ZSB9ID0gZm9ybWF0dGVkW2ldO1xuICAgIGNvbnN0IHBvcyA9IHR5cGVUb1Bvc1t0eXBlXTtcblxuICAgIGlmICh0eXBlID09PSBcImVyYVwiKSB7XG4gICAgICBmaWxsZWRbcG9zXSA9IHZhbHVlO1xuICAgIH0gZWxzZSBpZiAoIWlzVW5kZWZpbmVkKHBvcykpIHtcbiAgICAgIGZpbGxlZFtwb3NdID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZpbGxlZDtcbn1cblxubGV0IGlhbmFab25lQ2FjaGUgPSB7fTtcbi8qKlxuICogQSB6b25lIGlkZW50aWZpZWQgYnkgYW4gSUFOQSBpZGVudGlmaWVyLCBsaWtlIEFtZXJpY2EvTmV3X1lvcmtcbiAqIEBpbXBsZW1lbnRzIHtab25lfVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJQU5BWm9uZSBleHRlbmRzIFpvbmUge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBab25lIG5hbWVcbiAgICogQHJldHVybiB7SUFOQVpvbmV9XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlKG5hbWUpIHtcbiAgICBpZiAoIWlhbmFab25lQ2FjaGVbbmFtZV0pIHtcbiAgICAgIGlhbmFab25lQ2FjaGVbbmFtZV0gPSBuZXcgSUFOQVpvbmUobmFtZSk7XG4gICAgfVxuICAgIHJldHVybiBpYW5hWm9uZUNhY2hlW25hbWVdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0IGxvY2FsIGNhY2hlcy4gU2hvdWxkIG9ubHkgYmUgbmVjZXNzYXJ5IGluIHRlc3Rpbmcgc2NlbmFyaW9zLlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgc3RhdGljIHJlc2V0Q2FjaGUoKSB7XG4gICAgaWFuYVpvbmVDYWNoZSA9IHt9O1xuICAgIGR0ZkNhY2hlID0ge307XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBwcm92aWRlZCBzdHJpbmcgaXMgYSB2YWxpZCBzcGVjaWZpZXIuIFRoaXMgb25seSBjaGVja3MgdGhlIHN0cmluZydzIGZvcm1hdCwgbm90IHRoYXQgdGhlIHNwZWNpZmllciBpZGVudGlmaWVzIGEga25vd24gem9uZTsgc2VlIGlzVmFsaWRab25lIGZvciB0aGF0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcyAtIFRoZSBzdHJpbmcgdG8gY2hlY2sgdmFsaWRpdHkgb25cbiAgICogQGV4YW1wbGUgSUFOQVpvbmUuaXNWYWxpZFNwZWNpZmllcihcIkFtZXJpY2EvTmV3X1lvcmtcIikgLy89PiB0cnVlXG4gICAqIEBleGFtcGxlIElBTkFab25lLmlzVmFsaWRTcGVjaWZpZXIoXCJTcG9ydH5+YmxvcnBcIikgLy89PiBmYWxzZVxuICAgKiBAZGVwcmVjYXRlZCBUaGlzIG1ldGhvZCByZXR1cm5zIGZhbHNlIGZvciBzb21lIHZhbGlkIElBTkEgbmFtZXMuIFVzZSBpc1ZhbGlkWm9uZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzVmFsaWRTcGVjaWZpZXIocykge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWRab25lKHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgcHJvdmlkZWQgc3RyaW5nIGlkZW50aWZpZXMgYSByZWFsIHpvbmVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHpvbmUgLSBUaGUgc3RyaW5nIHRvIGNoZWNrXG4gICAqIEBleGFtcGxlIElBTkFab25lLmlzVmFsaWRab25lKFwiQW1lcmljYS9OZXdfWW9ya1wiKSAvLz0+IHRydWVcbiAgICogQGV4YW1wbGUgSUFOQVpvbmUuaXNWYWxpZFpvbmUoXCJGYW50YXNpYS9DYXN0bGVcIikgLy89PiBmYWxzZVxuICAgKiBAZXhhbXBsZSBJQU5BWm9uZS5pc1ZhbGlkWm9uZShcIlNwb3J0fn5ibG9ycFwiKSAvLz0+IGZhbHNlXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaXNWYWxpZFpvbmUoem9uZSkge1xuICAgIGlmICghem9uZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoXCJlbi1VU1wiLCB7IHRpbWVab25lOiB6b25lIH0pLmZvcm1hdCgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICBzdXBlcigpO1xuICAgIC8qKiBAcHJpdmF0ZSAqKi9cbiAgICB0aGlzLnpvbmVOYW1lID0gbmFtZTtcbiAgICAvKiogQHByaXZhdGUgKiovXG4gICAgdGhpcy52YWxpZCA9IElBTkFab25lLmlzVmFsaWRab25lKG5hbWUpO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuIFwiaWFuYVwiO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuem9uZU5hbWU7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBnZXQgaXNVbml2ZXJzYWwoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgb2Zmc2V0TmFtZSh0cywgeyBmb3JtYXQsIGxvY2FsZSB9KSB7XG4gICAgcmV0dXJuIHBhcnNlWm9uZUluZm8odHMsIGZvcm1hdCwgbG9jYWxlLCB0aGlzLm5hbWUpO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgZm9ybWF0T2Zmc2V0KHRzLCBmb3JtYXQpIHtcbiAgICByZXR1cm4gZm9ybWF0T2Zmc2V0KHRoaXMub2Zmc2V0KHRzKSwgZm9ybWF0KTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIG9mZnNldCh0cykge1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh0cyk7XG5cbiAgICBpZiAoaXNOYU4oZGF0ZSkpIHJldHVybiBOYU47XG5cbiAgICBjb25zdCBkdGYgPSBtYWtlRFRGKHRoaXMubmFtZSk7XG4gICAgbGV0IFt5ZWFyLCBtb250aCwgZGF5LCBhZE9yQmMsIGhvdXIsIG1pbnV0ZSwgc2Vjb25kXSA9IGR0Zi5mb3JtYXRUb1BhcnRzXG4gICAgICA/IHBhcnRzT2Zmc2V0KGR0ZiwgZGF0ZSlcbiAgICAgIDogaGFja3lPZmZzZXQoZHRmLCBkYXRlKTtcblxuICAgIGlmIChhZE9yQmMgPT09IFwiQkNcIikge1xuICAgICAgeWVhciA9IC1NYXRoLmFicyh5ZWFyKSArIDE7XG4gICAgfVxuXG4gICAgLy8gYmVjYXVzZSB3ZSdyZSB1c2luZyBob3VyMTIgYW5kIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTEwMjU1NjQmY2FuPTImcT0lMjIyNCUzQTAwJTIyJTIwZGF0ZXRpbWVmb3JtYXRcbiAgICBjb25zdCBhZGp1c3RlZEhvdXIgPSBob3VyID09PSAyNCA/IDAgOiBob3VyO1xuXG4gICAgY29uc3QgYXNVVEMgPSBvYmpUb0xvY2FsVFMoe1xuICAgICAgeWVhcixcbiAgICAgIG1vbnRoLFxuICAgICAgZGF5LFxuICAgICAgaG91cjogYWRqdXN0ZWRIb3VyLFxuICAgICAgbWludXRlLFxuICAgICAgc2Vjb25kLFxuICAgICAgbWlsbGlzZWNvbmQ6IDAsXG4gICAgfSk7XG5cbiAgICBsZXQgYXNUUyA9ICtkYXRlO1xuICAgIGNvbnN0IG92ZXIgPSBhc1RTICUgMTAwMDtcbiAgICBhc1RTIC09IG92ZXIgPj0gMCA/IG92ZXIgOiAxMDAwICsgb3ZlcjtcbiAgICByZXR1cm4gKGFzVVRDIC0gYXNUUykgLyAoNjAgKiAxMDAwKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIGVxdWFscyhvdGhlclpvbmUpIHtcbiAgICByZXR1cm4gb3RoZXJab25lLnR5cGUgPT09IFwiaWFuYVwiICYmIG90aGVyWm9uZS5uYW1lID09PSB0aGlzLm5hbWU7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBnZXQgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZDtcbiAgfVxufVxuIiwgImltcG9ydCB7IGhhc0xvY2FsZVdlZWtJbmZvLCBoYXNSZWxhdGl2ZSwgcGFkU3RhcnQsIHJvdW5kVG8sIHZhbGlkYXRlV2Vla1NldHRpbmdzIH0gZnJvbSBcIi4vdXRpbC5qc1wiO1xuaW1wb3J0ICogYXMgRW5nbGlzaCBmcm9tIFwiLi9lbmdsaXNoLmpzXCI7XG5pbXBvcnQgU2V0dGluZ3MgZnJvbSBcIi4uL3NldHRpbmdzLmpzXCI7XG5pbXBvcnQgRGF0ZVRpbWUgZnJvbSBcIi4uL2RhdGV0aW1lLmpzXCI7XG5pbXBvcnQgSUFOQVpvbmUgZnJvbSBcIi4uL3pvbmVzL0lBTkFab25lLmpzXCI7XG5cbi8vIHRvZG8gLSByZW1hcCBjYWNoaW5nXG5cbmxldCBpbnRsTEZDYWNoZSA9IHt9O1xuZnVuY3Rpb24gZ2V0Q2FjaGVkTEYobG9jU3RyaW5nLCBvcHRzID0ge30pIHtcbiAgY29uc3Qga2V5ID0gSlNPTi5zdHJpbmdpZnkoW2xvY1N0cmluZywgb3B0c10pO1xuICBsZXQgZHRmID0gaW50bExGQ2FjaGVba2V5XTtcbiAgaWYgKCFkdGYpIHtcbiAgICBkdGYgPSBuZXcgSW50bC5MaXN0Rm9ybWF0KGxvY1N0cmluZywgb3B0cyk7XG4gICAgaW50bExGQ2FjaGVba2V5XSA9IGR0ZjtcbiAgfVxuICByZXR1cm4gZHRmO1xufVxuXG5sZXQgaW50bERUQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGdldENhY2hlZERURihsb2NTdHJpbmcsIG9wdHMgPSB7fSkge1xuICBjb25zdCBrZXkgPSBKU09OLnN0cmluZ2lmeShbbG9jU3RyaW5nLCBvcHRzXSk7XG4gIGxldCBkdGYgPSBpbnRsRFRDYWNoZVtrZXldO1xuICBpZiAoIWR0Zikge1xuICAgIGR0ZiA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY1N0cmluZywgb3B0cyk7XG4gICAgaW50bERUQ2FjaGVba2V5XSA9IGR0ZjtcbiAgfVxuICByZXR1cm4gZHRmO1xufVxuXG5sZXQgaW50bE51bUNhY2hlID0ge307XG5mdW5jdGlvbiBnZXRDYWNoZWRJTkYobG9jU3RyaW5nLCBvcHRzID0ge30pIHtcbiAgY29uc3Qga2V5ID0gSlNPTi5zdHJpbmdpZnkoW2xvY1N0cmluZywgb3B0c10pO1xuICBsZXQgaW5mID0gaW50bE51bUNhY2hlW2tleV07XG4gIGlmICghaW5mKSB7XG4gICAgaW5mID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY1N0cmluZywgb3B0cyk7XG4gICAgaW50bE51bUNhY2hlW2tleV0gPSBpbmY7XG4gIH1cbiAgcmV0dXJuIGluZjtcbn1cblxubGV0IGludGxSZWxDYWNoZSA9IHt9O1xuZnVuY3Rpb24gZ2V0Q2FjaGVkUlRGKGxvY1N0cmluZywgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IHsgYmFzZSwgLi4uY2FjaGVLZXlPcHRzIH0gPSBvcHRzOyAvLyBleGNsdWRlIGBiYXNlYCBmcm9tIHRoZSBvcHRpb25zXG4gIGNvbnN0IGtleSA9IEpTT04uc3RyaW5naWZ5KFtsb2NTdHJpbmcsIGNhY2hlS2V5T3B0c10pO1xuICBsZXQgaW5mID0gaW50bFJlbENhY2hlW2tleV07XG4gIGlmICghaW5mKSB7XG4gICAgaW5mID0gbmV3IEludGwuUmVsYXRpdmVUaW1lRm9ybWF0KGxvY1N0cmluZywgb3B0cyk7XG4gICAgaW50bFJlbENhY2hlW2tleV0gPSBpbmY7XG4gIH1cbiAgcmV0dXJuIGluZjtcbn1cblxubGV0IHN5c0xvY2FsZUNhY2hlID0gbnVsbDtcbmZ1bmN0aW9uIHN5c3RlbUxvY2FsZSgpIHtcbiAgaWYgKHN5c0xvY2FsZUNhY2hlKSB7XG4gICAgcmV0dXJuIHN5c0xvY2FsZUNhY2hlO1xuICB9IGVsc2Uge1xuICAgIHN5c0xvY2FsZUNhY2hlID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoKS5yZXNvbHZlZE9wdGlvbnMoKS5sb2NhbGU7XG4gICAgcmV0dXJuIHN5c0xvY2FsZUNhY2hlO1xuICB9XG59XG5cbmxldCB3ZWVrSW5mb0NhY2hlID0ge307XG5mdW5jdGlvbiBnZXRDYWNoZWRXZWVrSW5mbyhsb2NTdHJpbmcpIHtcbiAgbGV0IGRhdGEgPSB3ZWVrSW5mb0NhY2hlW2xvY1N0cmluZ107XG4gIGlmICghZGF0YSkge1xuICAgIGNvbnN0IGxvY2FsZSA9IG5ldyBJbnRsLkxvY2FsZShsb2NTdHJpbmcpO1xuICAgIC8vIGJyb3dzZXJzIGN1cnJlbnRseSBpbXBsZW1lbnQgdGhpcyBhcyBhIHByb3BlcnR5LCBidXQgc3BlYyBzYXlzIGl0IHNob3VsZCBiZSBhIGdldHRlciBmdW5jdGlvblxuICAgIGRhdGEgPSBcImdldFdlZWtJbmZvXCIgaW4gbG9jYWxlID8gbG9jYWxlLmdldFdlZWtJbmZvKCkgOiBsb2NhbGUud2Vla0luZm87XG4gICAgd2Vla0luZm9DYWNoZVtsb2NTdHJpbmddID0gZGF0YTtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gcGFyc2VMb2NhbGVTdHJpbmcobG9jYWxlU3RyKSB7XG4gIC8vIEkgcmVhbGx5IHdhbnQgdG8gYXZvaWQgd3JpdGluZyBhIEJDUCA0NyBwYXJzZXJcbiAgLy8gc2VlLCBlLmcuIGh0dHBzOi8vZ2l0aHViLmNvbS93b29vcm0vYmNwLTQ3XG4gIC8vIEluc3RlYWQsIHdlJ2xsIGRvIHRoaXM6XG5cbiAgLy8gYSkgaWYgdGhlIHN0cmluZyBoYXMgbm8gLXUgZXh0ZW5zaW9ucywganVzdCBsZWF2ZSBpdCBhbG9uZVxuICAvLyBiKSBpZiBpdCBkb2VzLCB1c2UgSW50bCB0byByZXNvbHZlIGV2ZXJ5dGhpbmdcbiAgLy8gYykgaWYgSW50bCBmYWlscywgdHJ5IGFnYWluIHdpdGhvdXQgdGhlIC11XG5cbiAgLy8gcHJpdmF0ZSBzdWJ0YWdzIGFuZCB1bmljb2RlIHN1YnRhZ3MgaGF2ZSBvcmRlcmluZyByZXF1aXJlbWVudHMsXG4gIC8vIGFuZCB3ZSdyZSBub3QgcHJvcGVybHkgcGFyc2luZyB0aGlzLCBzbyBqdXN0IHN0cmlwIG91dCB0aGVcbiAgLy8gcHJpdmF0ZSBvbmVzIGlmIHRoZXkgZXhpc3QuXG4gIGNvbnN0IHhJbmRleCA9IGxvY2FsZVN0ci5pbmRleE9mKFwiLXgtXCIpO1xuICBpZiAoeEluZGV4ICE9PSAtMSkge1xuICAgIGxvY2FsZVN0ciA9IGxvY2FsZVN0ci5zdWJzdHJpbmcoMCwgeEluZGV4KTtcbiAgfVxuXG4gIGNvbnN0IHVJbmRleCA9IGxvY2FsZVN0ci5pbmRleE9mKFwiLXUtXCIpO1xuICBpZiAodUluZGV4ID09PSAtMSkge1xuICAgIHJldHVybiBbbG9jYWxlU3RyXTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgb3B0aW9ucztcbiAgICBsZXQgc2VsZWN0ZWRTdHI7XG4gICAgdHJ5IHtcbiAgICAgIG9wdGlvbnMgPSBnZXRDYWNoZWREVEYobG9jYWxlU3RyKS5yZXNvbHZlZE9wdGlvbnMoKTtcbiAgICAgIHNlbGVjdGVkU3RyID0gbG9jYWxlU3RyO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHNtYWxsZXIgPSBsb2NhbGVTdHIuc3Vic3RyaW5nKDAsIHVJbmRleCk7XG4gICAgICBvcHRpb25zID0gZ2V0Q2FjaGVkRFRGKHNtYWxsZXIpLnJlc29sdmVkT3B0aW9ucygpO1xuICAgICAgc2VsZWN0ZWRTdHIgPSBzbWFsbGVyO1xuICAgIH1cblxuICAgIGNvbnN0IHsgbnVtYmVyaW5nU3lzdGVtLCBjYWxlbmRhciB9ID0gb3B0aW9ucztcbiAgICByZXR1cm4gW3NlbGVjdGVkU3RyLCBudW1iZXJpbmdTeXN0ZW0sIGNhbGVuZGFyXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnRsQ29uZmlnU3RyaW5nKGxvY2FsZVN0ciwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhcikge1xuICBpZiAob3V0cHV0Q2FsZW5kYXIgfHwgbnVtYmVyaW5nU3lzdGVtKSB7XG4gICAgaWYgKCFsb2NhbGVTdHIuaW5jbHVkZXMoXCItdS1cIikpIHtcbiAgICAgIGxvY2FsZVN0ciArPSBcIi11XCI7XG4gICAgfVxuXG4gICAgaWYgKG91dHB1dENhbGVuZGFyKSB7XG4gICAgICBsb2NhbGVTdHIgKz0gYC1jYS0ke291dHB1dENhbGVuZGFyfWA7XG4gICAgfVxuXG4gICAgaWYgKG51bWJlcmluZ1N5c3RlbSkge1xuICAgICAgbG9jYWxlU3RyICs9IGAtbnUtJHtudW1iZXJpbmdTeXN0ZW19YDtcbiAgICB9XG4gICAgcmV0dXJuIGxvY2FsZVN0cjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbG9jYWxlU3RyO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcE1vbnRocyhmKSB7XG4gIGNvbnN0IG1zID0gW107XG4gIGZvciAobGV0IGkgPSAxOyBpIDw9IDEyOyBpKyspIHtcbiAgICBjb25zdCBkdCA9IERhdGVUaW1lLnV0YygyMDA5LCBpLCAxKTtcbiAgICBtcy5wdXNoKGYoZHQpKTtcbiAgfVxuICByZXR1cm4gbXM7XG59XG5cbmZ1bmN0aW9uIG1hcFdlZWtkYXlzKGYpIHtcbiAgY29uc3QgbXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPD0gNzsgaSsrKSB7XG4gICAgY29uc3QgZHQgPSBEYXRlVGltZS51dGMoMjAxNiwgMTEsIDEzICsgaSk7XG4gICAgbXMucHVzaChmKGR0KSk7XG4gIH1cbiAgcmV0dXJuIG1zO1xufVxuXG5mdW5jdGlvbiBsaXN0U3R1ZmYobG9jLCBsZW5ndGgsIGVuZ2xpc2hGbiwgaW50bEZuKSB7XG4gIGNvbnN0IG1vZGUgPSBsb2MubGlzdGluZ01vZGUoKTtcblxuICBpZiAobW9kZSA9PT0gXCJlcnJvclwiKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gZWxzZSBpZiAobW9kZSA9PT0gXCJlblwiKSB7XG4gICAgcmV0dXJuIGVuZ2xpc2hGbihsZW5ndGgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpbnRsRm4obGVuZ3RoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdXBwb3J0c0Zhc3ROdW1iZXJzKGxvYykge1xuICBpZiAobG9jLm51bWJlcmluZ1N5c3RlbSAmJiBsb2MubnVtYmVyaW5nU3lzdGVtICE9PSBcImxhdG5cIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFxuICAgICAgbG9jLm51bWJlcmluZ1N5c3RlbSA9PT0gXCJsYXRuXCIgfHxcbiAgICAgICFsb2MubG9jYWxlIHx8XG4gICAgICBsb2MubG9jYWxlLnN0YXJ0c1dpdGgoXCJlblwiKSB8fFxuICAgICAgbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jLmludGwpLnJlc29sdmVkT3B0aW9ucygpLm51bWJlcmluZ1N5c3RlbSA9PT0gXCJsYXRuXCJcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jbGFzcyBQb2x5TnVtYmVyRm9ybWF0dGVyIHtcbiAgY29uc3RydWN0b3IoaW50bCwgZm9yY2VTaW1wbGUsIG9wdHMpIHtcbiAgICB0aGlzLnBhZFRvID0gb3B0cy5wYWRUbyB8fCAwO1xuICAgIHRoaXMuZmxvb3IgPSBvcHRzLmZsb29yIHx8IGZhbHNlO1xuXG4gICAgY29uc3QgeyBwYWRUbywgZmxvb3IsIC4uLm90aGVyT3B0cyB9ID0gb3B0cztcblxuICAgIGlmICghZm9yY2VTaW1wbGUgfHwgT2JqZWN0LmtleXMob3RoZXJPcHRzKS5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBpbnRsT3B0cyA9IHsgdXNlR3JvdXBpbmc6IGZhbHNlLCAuLi5vcHRzIH07XG4gICAgICBpZiAob3B0cy5wYWRUbyA+IDApIGludGxPcHRzLm1pbmltdW1JbnRlZ2VyRGlnaXRzID0gb3B0cy5wYWRUbztcbiAgICAgIHRoaXMuaW5mID0gZ2V0Q2FjaGVkSU5GKGludGwsIGludGxPcHRzKTtcbiAgICB9XG4gIH1cblxuICBmb3JtYXQoaSkge1xuICAgIGlmICh0aGlzLmluZikge1xuICAgICAgY29uc3QgZml4ZWQgPSB0aGlzLmZsb29yID8gTWF0aC5mbG9vcihpKSA6IGk7XG4gICAgICByZXR1cm4gdGhpcy5pbmYuZm9ybWF0KGZpeGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdG8gbWF0Y2ggdGhlIGJyb3dzZXIncyBudW1iZXJmb3JtYXR0ZXIgZGVmYXVsdHNcbiAgICAgIGNvbnN0IGZpeGVkID0gdGhpcy5mbG9vciA/IE1hdGguZmxvb3IoaSkgOiByb3VuZFRvKGksIDMpO1xuICAgICAgcmV0dXJuIHBhZFN0YXJ0KGZpeGVkLCB0aGlzLnBhZFRvKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmNsYXNzIFBvbHlEYXRlRm9ybWF0dGVyIHtcbiAgY29uc3RydWN0b3IoZHQsIGludGwsIG9wdHMpIHtcbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIHRoaXMub3JpZ2luYWxab25lID0gdW5kZWZpbmVkO1xuXG4gICAgbGV0IHogPSB1bmRlZmluZWQ7XG4gICAgaWYgKHRoaXMub3B0cy50aW1lWm9uZSkge1xuICAgICAgLy8gRG9uJ3QgYXBwbHkgYW55IHdvcmthcm91bmRzIGlmIGEgdGltZVpvbmUgaXMgZXhwbGljaXRseSBwcm92aWRlZCBpbiBvcHRzXG4gICAgICB0aGlzLmR0ID0gZHQ7XG4gICAgfSBlbHNlIGlmIChkdC56b25lLnR5cGUgPT09IFwiZml4ZWRcIikge1xuICAgICAgLy8gVVRDLTggb3IgRXRjL1VUQy04IGFyZSBub3QgcGFydCBvZiB0emRhdGEsIG9ubHkgRXRjL0dNVCs4IGFuZCB0aGUgbGlrZS5cbiAgICAgIC8vIFRoYXQgaXMgd2h5IGZpeGVkLW9mZnNldCBUWiBpcyBzZXQgdG8gdGhhdCB1bmxlc3MgaXQgaXM6XG4gICAgICAvLyAxLiBSZXByZXNlbnRpbmcgb2Zmc2V0IDAgd2hlbiBVVEMgaXMgdXNlZCB0byBtYWludGFpbiBwcmV2aW91cyBiZWhhdmlvciBhbmQgZG9lcyBub3QgYmVjb21lIEdNVC5cbiAgICAgIC8vIDIuIFVuc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyOlxuICAgICAgLy8gICAgLSBzb21lIGRvIG5vdCBzdXBwb3J0IEV0Yy9cbiAgICAgIC8vICAgIC0gPCBFdGMvR01ULTE0LCA+IEV0Yy9HTVQrMTIsIGFuZCAzMC1taW51dGUgb3IgNDUtbWludXRlIG9mZnNldHMgYXJlIG5vdCBwYXJ0IG9mIHR6ZGF0YVxuICAgICAgY29uc3QgZ210T2Zmc2V0ID0gLTEgKiAoZHQub2Zmc2V0IC8gNjApO1xuICAgICAgY29uc3Qgb2Zmc2V0WiA9IGdtdE9mZnNldCA+PSAwID8gYEV0Yy9HTVQrJHtnbXRPZmZzZXR9YCA6IGBFdGMvR01UJHtnbXRPZmZzZXR9YDtcbiAgICAgIGlmIChkdC5vZmZzZXQgIT09IDAgJiYgSUFOQVpvbmUuY3JlYXRlKG9mZnNldFopLnZhbGlkKSB7XG4gICAgICAgIHogPSBvZmZzZXRaO1xuICAgICAgICB0aGlzLmR0ID0gZHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBOb3QgYWxsIGZpeGVkLW9mZnNldCB6b25lcyBsaWtlIEV0Yy8rNDozMCBhcmUgcHJlc2VudCBpbiB0emRhdGEgc29cbiAgICAgICAgLy8gd2UgbWFudWFsbHkgYXBwbHkgdGhlIG9mZnNldCBhbmQgc3Vic3RpdHV0ZSB0aGUgem9uZSBhcyBuZWVkZWQuXG4gICAgICAgIHogPSBcIlVUQ1wiO1xuICAgICAgICB0aGlzLmR0ID0gZHQub2Zmc2V0ID09PSAwID8gZHQgOiBkdC5zZXRab25lKFwiVVRDXCIpLnBsdXMoeyBtaW51dGVzOiBkdC5vZmZzZXQgfSk7XG4gICAgICAgIHRoaXMub3JpZ2luYWxab25lID0gZHQuem9uZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGR0LnpvbmUudHlwZSA9PT0gXCJzeXN0ZW1cIikge1xuICAgICAgdGhpcy5kdCA9IGR0O1xuICAgIH0gZWxzZSBpZiAoZHQuem9uZS50eXBlID09PSBcImlhbmFcIikge1xuICAgICAgdGhpcy5kdCA9IGR0O1xuICAgICAgeiA9IGR0LnpvbmUubmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ3VzdG9tIHpvbmVzIGNhbiBoYXZlIGFueSBvZmZzZXQgLyBvZmZzZXROYW1lIHNvIHdlIGp1c3QgbWFudWFsbHlcbiAgICAgIC8vIGFwcGx5IHRoZSBvZmZzZXQgYW5kIHN1YnN0aXR1dGUgdGhlIHpvbmUgYXMgbmVlZGVkLlxuICAgICAgeiA9IFwiVVRDXCI7XG4gICAgICB0aGlzLmR0ID0gZHQuc2V0Wm9uZShcIlVUQ1wiKS5wbHVzKHsgbWludXRlczogZHQub2Zmc2V0IH0pO1xuICAgICAgdGhpcy5vcmlnaW5hbFpvbmUgPSBkdC56b25lO1xuICAgIH1cblxuICAgIGNvbnN0IGludGxPcHRzID0geyAuLi50aGlzLm9wdHMgfTtcbiAgICBpbnRsT3B0cy50aW1lWm9uZSA9IGludGxPcHRzLnRpbWVab25lIHx8IHo7XG4gICAgdGhpcy5kdGYgPSBnZXRDYWNoZWREVEYoaW50bCwgaW50bE9wdHMpO1xuICB9XG5cbiAgZm9ybWF0KCkge1xuICAgIGlmICh0aGlzLm9yaWdpbmFsWm9uZSkge1xuICAgICAgLy8gSWYgd2UgaGF2ZSB0byBzdWJzdGl0dXRlIGluIHRoZSBhY3R1YWwgem9uZSBuYW1lLCB3ZSBoYXZlIHRvIHVzZVxuICAgICAgLy8gZm9ybWF0VG9QYXJ0cyBzbyB0aGF0IHRoZSB0aW1lem9uZSBjYW4gYmUgcmVwbGFjZWQuXG4gICAgICByZXR1cm4gdGhpcy5mb3JtYXRUb1BhcnRzKClcbiAgICAgICAgLm1hcCgoeyB2YWx1ZSB9KSA9PiB2YWx1ZSlcbiAgICAgICAgLmpvaW4oXCJcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmR0Zi5mb3JtYXQodGhpcy5kdC50b0pTRGF0ZSgpKTtcbiAgfVxuXG4gIGZvcm1hdFRvUGFydHMoKSB7XG4gICAgY29uc3QgcGFydHMgPSB0aGlzLmR0Zi5mb3JtYXRUb1BhcnRzKHRoaXMuZHQudG9KU0RhdGUoKSk7XG4gICAgaWYgKHRoaXMub3JpZ2luYWxab25lKSB7XG4gICAgICByZXR1cm4gcGFydHMubWFwKChwYXJ0KSA9PiB7XG4gICAgICAgIGlmIChwYXJ0LnR5cGUgPT09IFwidGltZVpvbmVOYW1lXCIpIHtcbiAgICAgICAgICBjb25zdCBvZmZzZXROYW1lID0gdGhpcy5vcmlnaW5hbFpvbmUub2Zmc2V0TmFtZSh0aGlzLmR0LnRzLCB7XG4gICAgICAgICAgICBsb2NhbGU6IHRoaXMuZHQubG9jYWxlLFxuICAgICAgICAgICAgZm9ybWF0OiB0aGlzLm9wdHMudGltZVpvbmVOYW1lLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5wYXJ0LFxuICAgICAgICAgICAgdmFsdWU6IG9mZnNldE5hbWUsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcGFydDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cztcbiAgfVxuXG4gIHJlc29sdmVkT3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5kdGYucmVzb2x2ZWRPcHRpb25zKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBQb2x5UmVsRm9ybWF0dGVyIHtcbiAgY29uc3RydWN0b3IoaW50bCwgaXNFbmdsaXNoLCBvcHRzKSB7XG4gICAgdGhpcy5vcHRzID0geyBzdHlsZTogXCJsb25nXCIsIC4uLm9wdHMgfTtcbiAgICBpZiAoIWlzRW5nbGlzaCAmJiBoYXNSZWxhdGl2ZSgpKSB7XG4gICAgICB0aGlzLnJ0ZiA9IGdldENhY2hlZFJURihpbnRsLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICBmb3JtYXQoY291bnQsIHVuaXQpIHtcbiAgICBpZiAodGhpcy5ydGYpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ0Zi5mb3JtYXQoY291bnQsIHVuaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gRW5nbGlzaC5mb3JtYXRSZWxhdGl2ZVRpbWUodW5pdCwgY291bnQsIHRoaXMub3B0cy5udW1lcmljLCB0aGlzLm9wdHMuc3R5bGUgIT09IFwibG9uZ1wiKTtcbiAgICB9XG4gIH1cblxuICBmb3JtYXRUb1BhcnRzKGNvdW50LCB1bml0KSB7XG4gICAgaWYgKHRoaXMucnRmKSB7XG4gICAgICByZXR1cm4gdGhpcy5ydGYuZm9ybWF0VG9QYXJ0cyhjb3VudCwgdW5pdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgZmFsbGJhY2tXZWVrU2V0dGluZ3MgPSB7XG4gIGZpcnN0RGF5OiAxLFxuICBtaW5pbWFsRGF5czogNCxcbiAgd2Vla2VuZDogWzYsIDddLFxufTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvY2FsZSB7XG4gIHN0YXRpYyBmcm9tT3B0cyhvcHRzKSB7XG4gICAgcmV0dXJuIExvY2FsZS5jcmVhdGUoXG4gICAgICBvcHRzLmxvY2FsZSxcbiAgICAgIG9wdHMubnVtYmVyaW5nU3lzdGVtLFxuICAgICAgb3B0cy5vdXRwdXRDYWxlbmRhcixcbiAgICAgIG9wdHMud2Vla1NldHRpbmdzLFxuICAgICAgb3B0cy5kZWZhdWx0VG9FTlxuICAgICk7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlKGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhciwgd2Vla1NldHRpbmdzLCBkZWZhdWx0VG9FTiA9IGZhbHNlKSB7XG4gICAgY29uc3Qgc3BlY2lmaWVkTG9jYWxlID0gbG9jYWxlIHx8IFNldHRpbmdzLmRlZmF1bHRMb2NhbGU7XG4gICAgLy8gdGhlIHN5c3RlbSBsb2NhbGUgaXMgdXNlZnVsIGZvciBodW1hbiByZWFkYWJsZSBzdHJpbmdzIGJ1dCBhbm5veWluZyBmb3IgcGFyc2luZy9mb3JtYXR0aW5nIGtub3duIGZvcm1hdHNcbiAgICBjb25zdCBsb2NhbGVSID0gc3BlY2lmaWVkTG9jYWxlIHx8IChkZWZhdWx0VG9FTiA/IFwiZW4tVVNcIiA6IHN5c3RlbUxvY2FsZSgpKTtcbiAgICBjb25zdCBudW1iZXJpbmdTeXN0ZW1SID0gbnVtYmVyaW5nU3lzdGVtIHx8IFNldHRpbmdzLmRlZmF1bHROdW1iZXJpbmdTeXN0ZW07XG4gICAgY29uc3Qgb3V0cHV0Q2FsZW5kYXJSID0gb3V0cHV0Q2FsZW5kYXIgfHwgU2V0dGluZ3MuZGVmYXVsdE91dHB1dENhbGVuZGFyO1xuICAgIGNvbnN0IHdlZWtTZXR0aW5nc1IgPSB2YWxpZGF0ZVdlZWtTZXR0aW5ncyh3ZWVrU2V0dGluZ3MpIHx8IFNldHRpbmdzLmRlZmF1bHRXZWVrU2V0dGluZ3M7XG4gICAgcmV0dXJuIG5ldyBMb2NhbGUobG9jYWxlUiwgbnVtYmVyaW5nU3lzdGVtUiwgb3V0cHV0Q2FsZW5kYXJSLCB3ZWVrU2V0dGluZ3NSLCBzcGVjaWZpZWRMb2NhbGUpO1xuICB9XG5cbiAgc3RhdGljIHJlc2V0Q2FjaGUoKSB7XG4gICAgc3lzTG9jYWxlQ2FjaGUgPSBudWxsO1xuICAgIGludGxEVENhY2hlID0ge307XG4gICAgaW50bE51bUNhY2hlID0ge307XG4gICAgaW50bFJlbENhY2hlID0ge307XG4gIH1cblxuICBzdGF0aWMgZnJvbU9iamVjdCh7IGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhciwgd2Vla1NldHRpbmdzIH0gPSB7fSkge1xuICAgIHJldHVybiBMb2NhbGUuY3JlYXRlKGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhciwgd2Vla1NldHRpbmdzKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGxvY2FsZSwgbnVtYmVyaW5nLCBvdXRwdXRDYWxlbmRhciwgd2Vla1NldHRpbmdzLCBzcGVjaWZpZWRMb2NhbGUpIHtcbiAgICBjb25zdCBbcGFyc2VkTG9jYWxlLCBwYXJzZWROdW1iZXJpbmdTeXN0ZW0sIHBhcnNlZE91dHB1dENhbGVuZGFyXSA9IHBhcnNlTG9jYWxlU3RyaW5nKGxvY2FsZSk7XG5cbiAgICB0aGlzLmxvY2FsZSA9IHBhcnNlZExvY2FsZTtcbiAgICB0aGlzLm51bWJlcmluZ1N5c3RlbSA9IG51bWJlcmluZyB8fCBwYXJzZWROdW1iZXJpbmdTeXN0ZW0gfHwgbnVsbDtcbiAgICB0aGlzLm91dHB1dENhbGVuZGFyID0gb3V0cHV0Q2FsZW5kYXIgfHwgcGFyc2VkT3V0cHV0Q2FsZW5kYXIgfHwgbnVsbDtcbiAgICB0aGlzLndlZWtTZXR0aW5ncyA9IHdlZWtTZXR0aW5ncztcbiAgICB0aGlzLmludGwgPSBpbnRsQ29uZmlnU3RyaW5nKHRoaXMubG9jYWxlLCB0aGlzLm51bWJlcmluZ1N5c3RlbSwgdGhpcy5vdXRwdXRDYWxlbmRhcik7XG5cbiAgICB0aGlzLndlZWtkYXlzQ2FjaGUgPSB7IGZvcm1hdDoge30sIHN0YW5kYWxvbmU6IHt9IH07XG4gICAgdGhpcy5tb250aHNDYWNoZSA9IHsgZm9ybWF0OiB7fSwgc3RhbmRhbG9uZToge30gfTtcbiAgICB0aGlzLm1lcmlkaWVtQ2FjaGUgPSBudWxsO1xuICAgIHRoaXMuZXJhQ2FjaGUgPSB7fTtcblxuICAgIHRoaXMuc3BlY2lmaWVkTG9jYWxlID0gc3BlY2lmaWVkTG9jYWxlO1xuICAgIHRoaXMuZmFzdE51bWJlcnNDYWNoZWQgPSBudWxsO1xuICB9XG5cbiAgZ2V0IGZhc3ROdW1iZXJzKCkge1xuICAgIGlmICh0aGlzLmZhc3ROdW1iZXJzQ2FjaGVkID09IG51bGwpIHtcbiAgICAgIHRoaXMuZmFzdE51bWJlcnNDYWNoZWQgPSBzdXBwb3J0c0Zhc3ROdW1iZXJzKHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmZhc3ROdW1iZXJzQ2FjaGVkO1xuICB9XG5cbiAgbGlzdGluZ01vZGUoKSB7XG4gICAgY29uc3QgaXNBY3R1YWxseUVuID0gdGhpcy5pc0VuZ2xpc2goKTtcbiAgICBjb25zdCBoYXNOb1dlaXJkbmVzcyA9XG4gICAgICAodGhpcy5udW1iZXJpbmdTeXN0ZW0gPT09IG51bGwgfHwgdGhpcy5udW1iZXJpbmdTeXN0ZW0gPT09IFwibGF0blwiKSAmJlxuICAgICAgKHRoaXMub3V0cHV0Q2FsZW5kYXIgPT09IG51bGwgfHwgdGhpcy5vdXRwdXRDYWxlbmRhciA9PT0gXCJncmVnb3J5XCIpO1xuICAgIHJldHVybiBpc0FjdHVhbGx5RW4gJiYgaGFzTm9XZWlyZG5lc3MgPyBcImVuXCIgOiBcImludGxcIjtcbiAgfVxuXG4gIGNsb25lKGFsdHMpIHtcbiAgICBpZiAoIWFsdHMgfHwgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYWx0cykubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIExvY2FsZS5jcmVhdGUoXG4gICAgICAgIGFsdHMubG9jYWxlIHx8IHRoaXMuc3BlY2lmaWVkTG9jYWxlLFxuICAgICAgICBhbHRzLm51bWJlcmluZ1N5c3RlbSB8fCB0aGlzLm51bWJlcmluZ1N5c3RlbSxcbiAgICAgICAgYWx0cy5vdXRwdXRDYWxlbmRhciB8fCB0aGlzLm91dHB1dENhbGVuZGFyLFxuICAgICAgICB2YWxpZGF0ZVdlZWtTZXR0aW5ncyhhbHRzLndlZWtTZXR0aW5ncykgfHwgdGhpcy53ZWVrU2V0dGluZ3MsXG4gICAgICAgIGFsdHMuZGVmYXVsdFRvRU4gfHwgZmFsc2VcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmVkZWZhdWx0VG9FTihhbHRzID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSh7IC4uLmFsdHMsIGRlZmF1bHRUb0VOOiB0cnVlIH0pO1xuICB9XG5cbiAgcmVkZWZhdWx0VG9TeXN0ZW0oYWx0cyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoeyAuLi5hbHRzLCBkZWZhdWx0VG9FTjogZmFsc2UgfSk7XG4gIH1cblxuICBtb250aHMobGVuZ3RoLCBmb3JtYXQgPSBmYWxzZSkge1xuICAgIHJldHVybiBsaXN0U3R1ZmYodGhpcywgbGVuZ3RoLCBFbmdsaXNoLm1vbnRocywgKCkgPT4ge1xuICAgICAgY29uc3QgaW50bCA9IGZvcm1hdCA/IHsgbW9udGg6IGxlbmd0aCwgZGF5OiBcIm51bWVyaWNcIiB9IDogeyBtb250aDogbGVuZ3RoIH0sXG4gICAgICAgIGZvcm1hdFN0ciA9IGZvcm1hdCA/IFwiZm9ybWF0XCIgOiBcInN0YW5kYWxvbmVcIjtcbiAgICAgIGlmICghdGhpcy5tb250aHNDYWNoZVtmb3JtYXRTdHJdW2xlbmd0aF0pIHtcbiAgICAgICAgdGhpcy5tb250aHNDYWNoZVtmb3JtYXRTdHJdW2xlbmd0aF0gPSBtYXBNb250aHMoKGR0KSA9PiB0aGlzLmV4dHJhY3QoZHQsIGludGwsIFwibW9udGhcIikpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubW9udGhzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdO1xuICAgIH0pO1xuICB9XG5cbiAgd2Vla2RheXMobGVuZ3RoLCBmb3JtYXQgPSBmYWxzZSkge1xuICAgIHJldHVybiBsaXN0U3R1ZmYodGhpcywgbGVuZ3RoLCBFbmdsaXNoLndlZWtkYXlzLCAoKSA9PiB7XG4gICAgICBjb25zdCBpbnRsID0gZm9ybWF0XG4gICAgICAgICAgPyB7IHdlZWtkYXk6IGxlbmd0aCwgeWVhcjogXCJudW1lcmljXCIsIG1vbnRoOiBcImxvbmdcIiwgZGF5OiBcIm51bWVyaWNcIiB9XG4gICAgICAgICAgOiB7IHdlZWtkYXk6IGxlbmd0aCB9LFxuICAgICAgICBmb3JtYXRTdHIgPSBmb3JtYXQgPyBcImZvcm1hdFwiIDogXCJzdGFuZGFsb25lXCI7XG4gICAgICBpZiAoIXRoaXMud2Vla2RheXNDYWNoZVtmb3JtYXRTdHJdW2xlbmd0aF0pIHtcbiAgICAgICAgdGhpcy53ZWVrZGF5c0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXSA9IG1hcFdlZWtkYXlzKChkdCkgPT5cbiAgICAgICAgICB0aGlzLmV4dHJhY3QoZHQsIGludGwsIFwid2Vla2RheVwiKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMud2Vla2RheXNDYWNoZVtmb3JtYXRTdHJdW2xlbmd0aF07XG4gICAgfSk7XG4gIH1cblxuICBtZXJpZGllbXMoKSB7XG4gICAgcmV0dXJuIGxpc3RTdHVmZihcbiAgICAgIHRoaXMsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICAoKSA9PiBFbmdsaXNoLm1lcmlkaWVtcyxcbiAgICAgICgpID0+IHtcbiAgICAgICAgLy8gSW4gdGhlb3J5IHRoZXJlIGNvdWxkIGJlIGFyaWJpdHJhcnkgZGF5IHBlcmlvZHMuIFdlJ3JlIGdvbm5hIGFzc3VtZSB0aGVyZSBhcmUgZXhhY3RseSB0d29cbiAgICAgICAgLy8gZm9yIEFNIGFuZCBQTS4gVGhpcyBpcyBwcm9iYWJseSB3cm9uZywgYnV0IGl0J3MgbWFrZXMgcGFyc2luZyB3YXkgZWFzaWVyLlxuICAgICAgICBpZiAoIXRoaXMubWVyaWRpZW1DYWNoZSkge1xuICAgICAgICAgIGNvbnN0IGludGwgPSB7IGhvdXI6IFwibnVtZXJpY1wiLCBob3VyQ3ljbGU6IFwiaDEyXCIgfTtcbiAgICAgICAgICB0aGlzLm1lcmlkaWVtQ2FjaGUgPSBbRGF0ZVRpbWUudXRjKDIwMTYsIDExLCAxMywgOSksIERhdGVUaW1lLnV0YygyMDE2LCAxMSwgMTMsIDE5KV0ubWFwKFxuICAgICAgICAgICAgKGR0KSA9PiB0aGlzLmV4dHJhY3QoZHQsIGludGwsIFwiZGF5cGVyaW9kXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLm1lcmlkaWVtQ2FjaGU7XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIGVyYXMobGVuZ3RoKSB7XG4gICAgcmV0dXJuIGxpc3RTdHVmZih0aGlzLCBsZW5ndGgsIEVuZ2xpc2guZXJhcywgKCkgPT4ge1xuICAgICAgY29uc3QgaW50bCA9IHsgZXJhOiBsZW5ndGggfTtcblxuICAgICAgLy8gVGhpcyBpcyBwcm9ibGVtYXRpYy4gRGlmZmVyZW50IGNhbGVuZGFycyBhcmUgZ29pbmcgdG8gZGVmaW5lIGVyYXMgdG90YWxseSBkaWZmZXJlbnRseS4gV2hhdCBJIG5lZWQgaXMgdGhlIG1pbmltdW0gc2V0IG9mIGRhdGVzXG4gICAgICAvLyB0byBkZWZpbml0ZWx5IGVudW1lcmF0ZSB0aGVtLlxuICAgICAgaWYgKCF0aGlzLmVyYUNhY2hlW2xlbmd0aF0pIHtcbiAgICAgICAgdGhpcy5lcmFDYWNoZVtsZW5ndGhdID0gW0RhdGVUaW1lLnV0YygtNDAsIDEsIDEpLCBEYXRlVGltZS51dGMoMjAxNywgMSwgMSldLm1hcCgoZHQpID0+XG4gICAgICAgICAgdGhpcy5leHRyYWN0KGR0LCBpbnRsLCBcImVyYVwiKVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5lcmFDYWNoZVtsZW5ndGhdO1xuICAgIH0pO1xuICB9XG5cbiAgZXh0cmFjdChkdCwgaW50bE9wdHMsIGZpZWxkKSB7XG4gICAgY29uc3QgZGYgPSB0aGlzLmR0Rm9ybWF0dGVyKGR0LCBpbnRsT3B0cyksXG4gICAgICByZXN1bHRzID0gZGYuZm9ybWF0VG9QYXJ0cygpLFxuICAgICAgbWF0Y2hpbmcgPSByZXN1bHRzLmZpbmQoKG0pID0+IG0udHlwZS50b0xvd2VyQ2FzZSgpID09PSBmaWVsZCk7XG4gICAgcmV0dXJuIG1hdGNoaW5nID8gbWF0Y2hpbmcudmFsdWUgOiBudWxsO1xuICB9XG5cbiAgbnVtYmVyRm9ybWF0dGVyKG9wdHMgPSB7fSkge1xuICAgIC8vIHRoaXMgZm9yY2VzaW1wbGUgb3B0aW9uIGlzIG5ldmVyIHVzZWQgKHRoZSBvbmx5IGNhbGxlciBzaG9ydC1jaXJjdWl0cyBvbiBpdCwgYnV0IGl0IHNlZW1zIHNhZmVyIHRvIGxlYXZlKVxuICAgIC8vIChpbiBjb250cmFzdCwgdGhlIHJlc3Qgb2YgdGhlIGNvbmRpdGlvbiBpcyB1c2VkIGhlYXZpbHkpXG4gICAgcmV0dXJuIG5ldyBQb2x5TnVtYmVyRm9ybWF0dGVyKHRoaXMuaW50bCwgb3B0cy5mb3JjZVNpbXBsZSB8fCB0aGlzLmZhc3ROdW1iZXJzLCBvcHRzKTtcbiAgfVxuXG4gIGR0Rm9ybWF0dGVyKGR0LCBpbnRsT3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIG5ldyBQb2x5RGF0ZUZvcm1hdHRlcihkdCwgdGhpcy5pbnRsLCBpbnRsT3B0cyk7XG4gIH1cblxuICByZWxGb3JtYXR0ZXIob3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIG5ldyBQb2x5UmVsRm9ybWF0dGVyKHRoaXMuaW50bCwgdGhpcy5pc0VuZ2xpc2goKSwgb3B0cyk7XG4gIH1cblxuICBsaXN0Rm9ybWF0dGVyKG9wdHMgPSB7fSkge1xuICAgIHJldHVybiBnZXRDYWNoZWRMRih0aGlzLmludGwsIG9wdHMpO1xuICB9XG5cbiAgaXNFbmdsaXNoKCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmxvY2FsZSA9PT0gXCJlblwiIHx8XG4gICAgICB0aGlzLmxvY2FsZS50b0xvd2VyQ2FzZSgpID09PSBcImVuLXVzXCIgfHxcbiAgICAgIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KHRoaXMuaW50bCkucmVzb2x2ZWRPcHRpb25zKCkubG9jYWxlLnN0YXJ0c1dpdGgoXCJlbi11c1wiKVxuICAgICk7XG4gIH1cblxuICBnZXRXZWVrU2V0dGluZ3MoKSB7XG4gICAgaWYgKHRoaXMud2Vla1NldHRpbmdzKSB7XG4gICAgICByZXR1cm4gdGhpcy53ZWVrU2V0dGluZ3M7XG4gICAgfSBlbHNlIGlmICghaGFzTG9jYWxlV2Vla0luZm8oKSkge1xuICAgICAgcmV0dXJuIGZhbGxiYWNrV2Vla1NldHRpbmdzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZ2V0Q2FjaGVkV2Vla0luZm8odGhpcy5sb2NhbGUpO1xuICAgIH1cbiAgfVxuXG4gIGdldFN0YXJ0T2ZXZWVrKCkge1xuICAgIHJldHVybiB0aGlzLmdldFdlZWtTZXR0aW5ncygpLmZpcnN0RGF5O1xuICB9XG5cbiAgZ2V0TWluRGF5c0luRmlyc3RXZWVrKCkge1xuICAgIHJldHVybiB0aGlzLmdldFdlZWtTZXR0aW5ncygpLm1pbmltYWxEYXlzO1xuICB9XG5cbiAgZ2V0V2Vla2VuZERheXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0V2Vla1NldHRpbmdzKCkud2Vla2VuZDtcbiAgfVxuXG4gIGVxdWFscyhvdGhlcikge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmxvY2FsZSA9PT0gb3RoZXIubG9jYWxlICYmXG4gICAgICB0aGlzLm51bWJlcmluZ1N5c3RlbSA9PT0gb3RoZXIubnVtYmVyaW5nU3lzdGVtICYmXG4gICAgICB0aGlzLm91dHB1dENhbGVuZGFyID09PSBvdGhlci5vdXRwdXRDYWxlbmRhclxuICAgICk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBmb3JtYXRPZmZzZXQsIHNpZ25lZE9mZnNldCB9IGZyb20gXCIuLi9pbXBsL3V0aWwuanNcIjtcbmltcG9ydCBab25lIGZyb20gXCIuLi96b25lLmpzXCI7XG5cbmxldCBzaW5nbGV0b24gPSBudWxsO1xuXG4vKipcbiAqIEEgem9uZSB3aXRoIGEgZml4ZWQgb2Zmc2V0IChtZWFuaW5nIG5vIERTVClcbiAqIEBpbXBsZW1lbnRzIHtab25lfVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaXhlZE9mZnNldFpvbmUgZXh0ZW5kcyBab25lIHtcbiAgLyoqXG4gICAqIEdldCBhIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiBVVENcbiAgICogQHJldHVybiB7Rml4ZWRPZmZzZXRab25lfVxuICAgKi9cbiAgc3RhdGljIGdldCB1dGNJbnN0YW5jZSgpIHtcbiAgICBpZiAoc2luZ2xldG9uID09PSBudWxsKSB7XG4gICAgICBzaW5nbGV0b24gPSBuZXcgRml4ZWRPZmZzZXRab25lKDApO1xuICAgIH1cbiAgICByZXR1cm4gc2luZ2xldG9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbiBpbnN0YW5jZSB3aXRoIGEgc3BlY2lmaWVkIG9mZnNldFxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IC0gVGhlIG9mZnNldCBpbiBtaW51dGVzXG4gICAqIEByZXR1cm4ge0ZpeGVkT2Zmc2V0Wm9uZX1cbiAgICovXG4gIHN0YXRpYyBpbnN0YW5jZShvZmZzZXQpIHtcbiAgICByZXR1cm4gb2Zmc2V0ID09PSAwID8gRml4ZWRPZmZzZXRab25lLnV0Y0luc3RhbmNlIDogbmV3IEZpeGVkT2Zmc2V0Wm9uZShvZmZzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbiBpbnN0YW5jZSBvZiBGaXhlZE9mZnNldFpvbmUgZnJvbSBhIFVUQyBvZmZzZXQgc3RyaW5nLCBsaWtlIFwiVVRDKzZcIlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcyAtIFRoZSBvZmZzZXQgc3RyaW5nIHRvIHBhcnNlXG4gICAqIEBleGFtcGxlIEZpeGVkT2Zmc2V0Wm9uZS5wYXJzZVNwZWNpZmllcihcIlVUQys2XCIpXG4gICAqIEBleGFtcGxlIEZpeGVkT2Zmc2V0Wm9uZS5wYXJzZVNwZWNpZmllcihcIlVUQyswNlwiKVxuICAgKiBAZXhhbXBsZSBGaXhlZE9mZnNldFpvbmUucGFyc2VTcGVjaWZpZXIoXCJVVEMtNjowMFwiKVxuICAgKiBAcmV0dXJuIHtGaXhlZE9mZnNldFpvbmV9XG4gICAqL1xuICBzdGF0aWMgcGFyc2VTcGVjaWZpZXIocykge1xuICAgIGlmIChzKSB7XG4gICAgICBjb25zdCByID0gcy5tYXRjaCgvXnV0Yyg/OihbKy1dXFxkezEsMn0pKD86OihcXGR7Mn0pKT8pPyQvaSk7XG4gICAgICBpZiAocikge1xuICAgICAgICByZXR1cm4gbmV3IEZpeGVkT2Zmc2V0Wm9uZShzaWduZWRPZmZzZXQoclsxXSwgclsyXSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKG9mZnNldCkge1xuICAgIHN1cGVyKCk7XG4gICAgLyoqIEBwcml2YXRlICoqL1xuICAgIHRoaXMuZml4ZWQgPSBvZmZzZXQ7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gXCJmaXhlZFwiO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZml4ZWQgPT09IDAgPyBcIlVUQ1wiIDogYFVUQyR7Zm9ybWF0T2Zmc2V0KHRoaXMuZml4ZWQsIFwibmFycm93XCIpfWA7XG4gIH1cblxuICBnZXQgaWFuYU5hbWUoKSB7XG4gICAgaWYgKHRoaXMuZml4ZWQgPT09IDApIHtcbiAgICAgIHJldHVybiBcIkV0Yy9VVENcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGBFdGMvR01UJHtmb3JtYXRPZmZzZXQoLXRoaXMuZml4ZWQsIFwibmFycm93XCIpfWA7XG4gICAgfVxuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgb2Zmc2V0TmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgZm9ybWF0T2Zmc2V0KHRzLCBmb3JtYXQpIHtcbiAgICByZXR1cm4gZm9ybWF0T2Zmc2V0KHRoaXMuZml4ZWQsIGZvcm1hdCk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBnZXQgaXNVbml2ZXJzYWwoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBvZmZzZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZml4ZWQ7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBlcXVhbHMob3RoZXJab25lKSB7XG4gICAgcmV0dXJuIG90aGVyWm9uZS50eXBlID09PSBcImZpeGVkXCIgJiYgb3RoZXJab25lLmZpeGVkID09PSB0aGlzLmZpeGVkO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbiIsICJpbXBvcnQgWm9uZSBmcm9tIFwiLi4vem9uZS5qc1wiO1xuXG4vKipcbiAqIEEgem9uZSB0aGF0IGZhaWxlZCB0byBwYXJzZS4gWW91IHNob3VsZCBuZXZlciBuZWVkIHRvIGluc3RhbnRpYXRlIHRoaXMuXG4gKiBAaW1wbGVtZW50cyB7Wm9uZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52YWxpZFpvbmUgZXh0ZW5kcyBab25lIHtcbiAgY29uc3RydWN0b3Ioem9uZU5hbWUpIHtcbiAgICBzdXBlcigpO1xuICAgIC8qKiAgQHByaXZhdGUgKi9cbiAgICB0aGlzLnpvbmVOYW1lID0gem9uZU5hbWU7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gXCJpbnZhbGlkXCI7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy56b25lTmFtZTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIGdldCBpc1VuaXZlcnNhbCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBvZmZzZXROYW1lKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgZm9ybWF0T2Zmc2V0KCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgb2Zmc2V0KCkge1xuICAgIHJldHVybiBOYU47XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBlcXVhbHMoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iLCAiLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmltcG9ydCBab25lIGZyb20gXCIuLi96b25lLmpzXCI7XG5pbXBvcnQgSUFOQVpvbmUgZnJvbSBcIi4uL3pvbmVzL0lBTkFab25lLmpzXCI7XG5pbXBvcnQgRml4ZWRPZmZzZXRab25lIGZyb20gXCIuLi96b25lcy9maXhlZE9mZnNldFpvbmUuanNcIjtcbmltcG9ydCBJbnZhbGlkWm9uZSBmcm9tIFwiLi4vem9uZXMvaW52YWxpZFpvbmUuanNcIjtcblxuaW1wb3J0IHsgaXNVbmRlZmluZWQsIGlzU3RyaW5nLCBpc051bWJlciB9IGZyb20gXCIuL3V0aWwuanNcIjtcbmltcG9ydCBTeXN0ZW1ab25lIGZyb20gXCIuLi96b25lcy9zeXN0ZW1ab25lLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVab25lKGlucHV0LCBkZWZhdWx0Wm9uZSkge1xuICBsZXQgb2Zmc2V0O1xuICBpZiAoaXNVbmRlZmluZWQoaW5wdXQpIHx8IGlucHV0ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRab25lO1xuICB9IGVsc2UgaWYgKGlucHV0IGluc3RhbmNlb2YgWm9uZSkge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfSBlbHNlIGlmIChpc1N0cmluZyhpbnB1dCkpIHtcbiAgICBjb25zdCBsb3dlcmVkID0gaW5wdXQudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAobG93ZXJlZCA9PT0gXCJkZWZhdWx0XCIpIHJldHVybiBkZWZhdWx0Wm9uZTtcbiAgICBlbHNlIGlmIChsb3dlcmVkID09PSBcImxvY2FsXCIgfHwgbG93ZXJlZCA9PT0gXCJzeXN0ZW1cIikgcmV0dXJuIFN5c3RlbVpvbmUuaW5zdGFuY2U7XG4gICAgZWxzZSBpZiAobG93ZXJlZCA9PT0gXCJ1dGNcIiB8fCBsb3dlcmVkID09PSBcImdtdFwiKSByZXR1cm4gRml4ZWRPZmZzZXRab25lLnV0Y0luc3RhbmNlO1xuICAgIGVsc2UgcmV0dXJuIEZpeGVkT2Zmc2V0Wm9uZS5wYXJzZVNwZWNpZmllcihsb3dlcmVkKSB8fCBJQU5BWm9uZS5jcmVhdGUoaW5wdXQpO1xuICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSkge1xuICAgIHJldHVybiBGaXhlZE9mZnNldFpvbmUuaW5zdGFuY2UoaW5wdXQpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJvYmplY3RcIiAmJiBcIm9mZnNldFwiIGluIGlucHV0ICYmIHR5cGVvZiBpbnB1dC5vZmZzZXQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIC8vIFRoaXMgaXMgZHVtYiwgYnV0IHRoZSBpbnN0YW5jZW9mIGNoZWNrIGFib3ZlIGRvZXNuJ3Qgc2VlbSB0byByZWFsbHkgd29ya1xuICAgIC8vIHNvIHdlJ3JlIGR1Y2sgY2hlY2tpbmcgaXRcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBJbnZhbGlkWm9uZShpbnB1dCk7XG4gIH1cbn1cbiIsICJpbXBvcnQgU3lzdGVtWm9uZSBmcm9tIFwiLi96b25lcy9zeXN0ZW1ab25lLmpzXCI7XG5pbXBvcnQgSUFOQVpvbmUgZnJvbSBcIi4vem9uZXMvSUFOQVpvbmUuanNcIjtcbmltcG9ydCBMb2NhbGUgZnJvbSBcIi4vaW1wbC9sb2NhbGUuanNcIjtcblxuaW1wb3J0IHsgbm9ybWFsaXplWm9uZSB9IGZyb20gXCIuL2ltcGwvem9uZVV0aWwuanNcIjtcbmltcG9ydCB7IHZhbGlkYXRlV2Vla1NldHRpbmdzIH0gZnJvbSBcIi4vaW1wbC91dGlsLmpzXCI7XG5cbmxldCBub3cgPSAoKSA9PiBEYXRlLm5vdygpLFxuICBkZWZhdWx0Wm9uZSA9IFwic3lzdGVtXCIsXG4gIGRlZmF1bHRMb2NhbGUgPSBudWxsLFxuICBkZWZhdWx0TnVtYmVyaW5nU3lzdGVtID0gbnVsbCxcbiAgZGVmYXVsdE91dHB1dENhbGVuZGFyID0gbnVsbCxcbiAgdHdvRGlnaXRDdXRvZmZZZWFyID0gNjAsXG4gIHRocm93T25JbnZhbGlkLFxuICBkZWZhdWx0V2Vla1NldHRpbmdzID0gbnVsbDtcblxuLyoqXG4gKiBTZXR0aW5ncyBjb250YWlucyBzdGF0aWMgZ2V0dGVycyBhbmQgc2V0dGVycyB0aGF0IGNvbnRyb2wgTHV4b24ncyBvdmVyYWxsIGJlaGF2aW9yLiBMdXhvbiBpcyBhIHNpbXBsZSBsaWJyYXJ5IHdpdGggZmV3IG9wdGlvbnMsIGJ1dCB0aGUgb25lcyBpdCBkb2VzIGhhdmUgbGl2ZSBoZXJlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXR0aW5ncyB7XG4gIC8qKlxuICAgKiBHZXQgdGhlIGNhbGxiYWNrIGZvciByZXR1cm5pbmcgdGhlIGN1cnJlbnQgdGltZXN0YW1wLlxuICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAqL1xuICBzdGF0aWMgZ2V0IG5vdygpIHtcbiAgICByZXR1cm4gbm93O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgY2FsbGJhY2sgZm9yIHJldHVybmluZyB0aGUgY3VycmVudCB0aW1lc3RhbXAuXG4gICAqIFRoZSBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgbnVtYmVyLCB3aGljaCB3aWxsIGJlIGludGVycHJldGVkIGFzIGFuIEVwb2NoIG1pbGxpc2Vjb25kIGNvdW50XG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICogQGV4YW1wbGUgU2V0dGluZ3Mubm93ID0gKCkgPT4gRGF0ZS5ub3coKSArIDMwMDAgLy8gcHJldGVuZCBpdCBpcyAzIHNlY29uZHMgaW4gdGhlIGZ1dHVyZVxuICAgKiBAZXhhbXBsZSBTZXR0aW5ncy5ub3cgPSAoKSA9PiAwIC8vIGFsd2F5cyBwcmV0ZW5kIGl0J3MgSmFuIDEsIDE5NzAgYXQgbWlkbmlnaHQgaW4gVVRDIHRpbWVcbiAgICovXG4gIHN0YXRpYyBzZXQgbm93KG4pIHtcbiAgICBub3cgPSBuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgZGVmYXVsdCB0aW1lIHpvbmUgdG8gY3JlYXRlIERhdGVUaW1lcyBpbi4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICogVXNlIHRoZSB2YWx1ZSBcInN5c3RlbVwiIHRvIHJlc2V0IHRoaXMgdmFsdWUgdG8gdGhlIHN5c3RlbSdzIHRpbWUgem9uZS5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBzZXQgZGVmYXVsdFpvbmUoem9uZSkge1xuICAgIGRlZmF1bHRab25lID0gem9uZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGRlZmF1bHQgdGltZSB6b25lIG9iamVjdCBjdXJyZW50bHkgdXNlZCB0byBjcmVhdGUgRGF0ZVRpbWVzLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0aGUgc3lzdGVtJ3MgdGltZSB6b25lICh0aGUgb25lIHNldCBvbiB0aGUgbWFjaGluZSB0aGF0IHJ1bnMgdGhpcyBjb2RlKS5cbiAgICogQHR5cGUge1pvbmV9XG4gICAqL1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRab25lKCkge1xuICAgIHJldHVybiBub3JtYWxpemVab25lKGRlZmF1bHRab25lLCBTeXN0ZW1ab25lLmluc3RhbmNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGRlZmF1bHQgbG9jYWxlIHRvIGNyZWF0ZSBEYXRlVGltZXMgd2l0aC4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBnZXQgZGVmYXVsdExvY2FsZSgpIHtcbiAgICByZXR1cm4gZGVmYXVsdExvY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGRlZmF1bHQgbG9jYWxlIHRvIGNyZWF0ZSBEYXRlVGltZXMgd2l0aC4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBzZXQgZGVmYXVsdExvY2FsZShsb2NhbGUpIHtcbiAgICBkZWZhdWx0TG9jYWxlID0gbG9jYWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZGVmYXVsdCBudW1iZXJpbmcgc3lzdGVtIHRvIGNyZWF0ZSBEYXRlVGltZXMgd2l0aC4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE51bWJlcmluZ1N5c3RlbSgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE51bWJlcmluZ1N5c3RlbTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGRlZmF1bHQgbnVtYmVyaW5nIHN5c3RlbSB0byBjcmVhdGUgRGF0ZVRpbWVzIHdpdGguIERvZXMgbm90IGFmZmVjdCBleGlzdGluZyBpbnN0YW5jZXMuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgc2V0IGRlZmF1bHROdW1iZXJpbmdTeXN0ZW0obnVtYmVyaW5nU3lzdGVtKSB7XG4gICAgZGVmYXVsdE51bWJlcmluZ1N5c3RlbSA9IG51bWJlcmluZ1N5c3RlbTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGRlZmF1bHQgb3V0cHV0IGNhbGVuZGFyIHRvIGNyZWF0ZSBEYXRlVGltZXMgd2l0aC4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE91dHB1dENhbGVuZGFyKCkge1xuICAgIHJldHVybiBkZWZhdWx0T3V0cHV0Q2FsZW5kYXI7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBkZWZhdWx0IG91dHB1dCBjYWxlbmRhciB0byBjcmVhdGUgRGF0ZVRpbWVzIHdpdGguIERvZXMgbm90IGFmZmVjdCBleGlzdGluZyBpbnN0YW5jZXMuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgc2V0IGRlZmF1bHRPdXRwdXRDYWxlbmRhcihvdXRwdXRDYWxlbmRhcikge1xuICAgIGRlZmF1bHRPdXRwdXRDYWxlbmRhciA9IG91dHB1dENhbGVuZGFyO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IFdlZWtTZXR0aW5nc1xuICAgKiBAcHJvcGVydHkge251bWJlcn0gZmlyc3REYXlcbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IG1pbmltYWxEYXlzXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyW119IHdlZWtlbmRcbiAgICovXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge1dlZWtTZXR0aW5nc3xudWxsfVxuICAgKi9cbiAgc3RhdGljIGdldCBkZWZhdWx0V2Vla1NldHRpbmdzKCkge1xuICAgIHJldHVybiBkZWZhdWx0V2Vla1NldHRpbmdzO1xuICB9XG5cbiAgLyoqXG4gICAqIEFsbG93cyBvdmVycmlkaW5nIHRoZSBkZWZhdWx0IGxvY2FsZSB3ZWVrIHNldHRpbmdzLCBpLmUuIHRoZSBzdGFydCBvZiB0aGUgd2VlaywgdGhlIHdlZWtlbmQgYW5kXG4gICAqIGhvdyBtYW55IGRheXMgYXJlIHJlcXVpcmVkIGluIHRoZSBmaXJzdCB3ZWVrIG9mIGEgeWVhci5cbiAgICogRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICpcbiAgICogQHBhcmFtIHtXZWVrU2V0dGluZ3N8bnVsbH0gd2Vla1NldHRpbmdzXG4gICAqL1xuICBzdGF0aWMgc2V0IGRlZmF1bHRXZWVrU2V0dGluZ3Mod2Vla1NldHRpbmdzKSB7XG4gICAgZGVmYXVsdFdlZWtTZXR0aW5ncyA9IHZhbGlkYXRlV2Vla1NldHRpbmdzKHdlZWtTZXR0aW5ncyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjdXRvZmYgeWVhciBhZnRlciB3aGljaCBhIHN0cmluZyBlbmNvZGluZyBhIHllYXIgYXMgdHdvIGRpZ2l0cyBpcyBpbnRlcnByZXRlZCB0byBvY2N1ciBpbiB0aGUgY3VycmVudCBjZW50dXJ5LlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgc3RhdGljIGdldCB0d29EaWdpdEN1dG9mZlllYXIoKSB7XG4gICAgcmV0dXJuIHR3b0RpZ2l0Q3V0b2ZmWWVhcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGN1dG9mZiB5ZWFyIGFmdGVyIHdoaWNoIGEgc3RyaW5nIGVuY29kaW5nIGEgeWVhciBhcyB0d28gZGlnaXRzIGlzIGludGVycHJldGVkIHRvIG9jY3VyIGluIHRoZSBjdXJyZW50IGNlbnR1cnkuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBleGFtcGxlIFNldHRpbmdzLnR3b0RpZ2l0Q3V0b2ZmWWVhciA9IDAgLy8gY3V0LW9mZiB5ZWFyIGlzIDAsIHNvIGFsbCAneXknIGFyZSBpbnRlcnByZXRlZCBhcyBjdXJyZW50IGNlbnR1cnlcbiAgICogQGV4YW1wbGUgU2V0dGluZ3MudHdvRGlnaXRDdXRvZmZZZWFyID0gNTAgLy8gJzQ5JyAtPiAxOTQ5OyAnNTAnIC0+IDIwNTBcbiAgICogQGV4YW1wbGUgU2V0dGluZ3MudHdvRGlnaXRDdXRvZmZZZWFyID0gMTk1MCAvLyBpbnRlcnByZXRlZCBhcyA1MFxuICAgKiBAZXhhbXBsZSBTZXR0aW5ncy50d29EaWdpdEN1dG9mZlllYXIgPSAyMDUwIC8vIEFMU08gaW50ZXJwcmV0ZWQgYXMgNTBcbiAgICovXG4gIHN0YXRpYyBzZXQgdHdvRGlnaXRDdXRvZmZZZWFyKGN1dG9mZlllYXIpIHtcbiAgICB0d29EaWdpdEN1dG9mZlllYXIgPSBjdXRvZmZZZWFyICUgMTAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB3aGV0aGVyIEx1eG9uIHdpbGwgdGhyb3cgd2hlbiBpdCBlbmNvdW50ZXJzIGludmFsaWQgRGF0ZVRpbWVzLCBEdXJhdGlvbnMsIG9yIEludGVydmFsc1xuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBnZXQgdGhyb3dPbkludmFsaWQoKSB7XG4gICAgcmV0dXJuIHRocm93T25JbnZhbGlkO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB3aGV0aGVyIEx1eG9uIHdpbGwgdGhyb3cgd2hlbiBpdCBlbmNvdW50ZXJzIGludmFsaWQgRGF0ZVRpbWVzLCBEdXJhdGlvbnMsIG9yIEludGVydmFsc1xuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBzZXQgdGhyb3dPbkludmFsaWQodCkge1xuICAgIHRocm93T25JbnZhbGlkID0gdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCBMdXhvbidzIGdsb2JhbCBjYWNoZXMuIFNob3VsZCBvbmx5IGJlIG5lY2Vzc2FyeSBpbiB0ZXN0aW5nIHNjZW5hcmlvcy5cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHN0YXRpYyByZXNldENhY2hlcygpIHtcbiAgICBMb2NhbGUucmVzZXRDYWNoZSgpO1xuICAgIElBTkFab25lLnJlc2V0Q2FjaGUoKTtcbiAgfVxufVxuIiwgImV4cG9ydCBkZWZhdWx0IGNsYXNzIEludmFsaWQge1xuICBjb25zdHJ1Y3RvcihyZWFzb24sIGV4cGxhbmF0aW9uKSB7XG4gICAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gICAgdGhpcy5leHBsYW5hdGlvbiA9IGV4cGxhbmF0aW9uO1xuICB9XG5cbiAgdG9NZXNzYWdlKCkge1xuICAgIGlmICh0aGlzLmV4cGxhbmF0aW9uKSB7XG4gICAgICByZXR1cm4gYCR7dGhpcy5yZWFzb259OiAke3RoaXMuZXhwbGFuYXRpb259YDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucmVhc29uO1xuICAgIH1cbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIGludGVnZXJCZXR3ZWVuLFxuICBpc0xlYXBZZWFyLFxuICB0aW1lT2JqZWN0LFxuICBkYXlzSW5ZZWFyLFxuICBkYXlzSW5Nb250aCxcbiAgd2Vla3NJbldlZWtZZWFyLFxuICBpc0ludGVnZXIsXG4gIGlzVW5kZWZpbmVkLFxufSBmcm9tIFwiLi91dGlsLmpzXCI7XG5pbXBvcnQgSW52YWxpZCBmcm9tIFwiLi9pbnZhbGlkLmpzXCI7XG5pbXBvcnQgeyBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvciB9IGZyb20gXCIuLi9lcnJvcnMuanNcIjtcblxuY29uc3Qgbm9uTGVhcExhZGRlciA9IFswLCAzMSwgNTksIDkwLCAxMjAsIDE1MSwgMTgxLCAyMTIsIDI0MywgMjczLCAzMDQsIDMzNF0sXG4gIGxlYXBMYWRkZXIgPSBbMCwgMzEsIDYwLCA5MSwgMTIxLCAxNTIsIDE4MiwgMjEzLCAyNDQsIDI3NCwgMzA1LCAzMzVdO1xuXG5mdW5jdGlvbiB1bml0T3V0T2ZSYW5nZSh1bml0LCB2YWx1ZSkge1xuICByZXR1cm4gbmV3IEludmFsaWQoXG4gICAgXCJ1bml0IG91dCBvZiByYW5nZVwiLFxuICAgIGB5b3Ugc3BlY2lmaWVkICR7dmFsdWV9IChvZiB0eXBlICR7dHlwZW9mIHZhbHVlfSkgYXMgYSAke3VuaXR9LCB3aGljaCBpcyBpbnZhbGlkYFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF5T2ZXZWVrKHllYXIsIG1vbnRoLCBkYXkpIHtcbiAgY29uc3QgZCA9IG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIG1vbnRoIC0gMSwgZGF5KSk7XG5cbiAgaWYgKHllYXIgPCAxMDAgJiYgeWVhciA+PSAwKSB7XG4gICAgZC5zZXRVVENGdWxsWWVhcihkLmdldFVUQ0Z1bGxZZWFyKCkgLSAxOTAwKTtcbiAgfVxuXG4gIGNvbnN0IGpzID0gZC5nZXRVVENEYXkoKTtcblxuICByZXR1cm4ganMgPT09IDAgPyA3IDoganM7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVPcmRpbmFsKHllYXIsIG1vbnRoLCBkYXkpIHtcbiAgcmV0dXJuIGRheSArIChpc0xlYXBZZWFyKHllYXIpID8gbGVhcExhZGRlciA6IG5vbkxlYXBMYWRkZXIpW21vbnRoIC0gMV07XG59XG5cbmZ1bmN0aW9uIHVuY29tcHV0ZU9yZGluYWwoeWVhciwgb3JkaW5hbCkge1xuICBjb25zdCB0YWJsZSA9IGlzTGVhcFllYXIoeWVhcikgPyBsZWFwTGFkZGVyIDogbm9uTGVhcExhZGRlcixcbiAgICBtb250aDAgPSB0YWJsZS5maW5kSW5kZXgoKGkpID0+IGkgPCBvcmRpbmFsKSxcbiAgICBkYXkgPSBvcmRpbmFsIC0gdGFibGVbbW9udGgwXTtcbiAgcmV0dXJuIHsgbW9udGg6IG1vbnRoMCArIDEsIGRheSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNvV2Vla2RheVRvTG9jYWwoaXNvV2Vla2RheSwgc3RhcnRPZldlZWspIHtcbiAgcmV0dXJuICgoaXNvV2Vla2RheSAtIHN0YXJ0T2ZXZWVrICsgNykgJSA3KSArIDE7XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ3JlZ29yaWFuVG9XZWVrKGdyZWdPYmosIG1pbkRheXNJbkZpcnN0V2VlayA9IDQsIHN0YXJ0T2ZXZWVrID0gMSkge1xuICBjb25zdCB7IHllYXIsIG1vbnRoLCBkYXkgfSA9IGdyZWdPYmosXG4gICAgb3JkaW5hbCA9IGNvbXB1dGVPcmRpbmFsKHllYXIsIG1vbnRoLCBkYXkpLFxuICAgIHdlZWtkYXkgPSBpc29XZWVrZGF5VG9Mb2NhbChkYXlPZldlZWsoeWVhciwgbW9udGgsIGRheSksIHN0YXJ0T2ZXZWVrKTtcblxuICBsZXQgd2Vla051bWJlciA9IE1hdGguZmxvb3IoKG9yZGluYWwgLSB3ZWVrZGF5ICsgMTQgLSBtaW5EYXlzSW5GaXJzdFdlZWspIC8gNyksXG4gICAgd2Vla1llYXI7XG5cbiAgaWYgKHdlZWtOdW1iZXIgPCAxKSB7XG4gICAgd2Vla1llYXIgPSB5ZWFyIC0gMTtcbiAgICB3ZWVrTnVtYmVyID0gd2Vla3NJbldlZWtZZWFyKHdlZWtZZWFyLCBtaW5EYXlzSW5GaXJzdFdlZWssIHN0YXJ0T2ZXZWVrKTtcbiAgfSBlbHNlIGlmICh3ZWVrTnVtYmVyID4gd2Vla3NJbldlZWtZZWFyKHllYXIsIG1pbkRheXNJbkZpcnN0V2Vlaywgc3RhcnRPZldlZWspKSB7XG4gICAgd2Vla1llYXIgPSB5ZWFyICsgMTtcbiAgICB3ZWVrTnVtYmVyID0gMTtcbiAgfSBlbHNlIHtcbiAgICB3ZWVrWWVhciA9IHllYXI7XG4gIH1cblxuICByZXR1cm4geyB3ZWVrWWVhciwgd2Vla051bWJlciwgd2Vla2RheSwgLi4udGltZU9iamVjdChncmVnT2JqKSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2Vla1RvR3JlZ29yaWFuKHdlZWtEYXRhLCBtaW5EYXlzSW5GaXJzdFdlZWsgPSA0LCBzdGFydE9mV2VlayA9IDEpIHtcbiAgY29uc3QgeyB3ZWVrWWVhciwgd2Vla051bWJlciwgd2Vla2RheSB9ID0gd2Vla0RhdGEsXG4gICAgd2Vla2RheU9mSmFuNCA9IGlzb1dlZWtkYXlUb0xvY2FsKGRheU9mV2Vlayh3ZWVrWWVhciwgMSwgbWluRGF5c0luRmlyc3RXZWVrKSwgc3RhcnRPZldlZWspLFxuICAgIHllYXJJbkRheXMgPSBkYXlzSW5ZZWFyKHdlZWtZZWFyKTtcblxuICBsZXQgb3JkaW5hbCA9IHdlZWtOdW1iZXIgKiA3ICsgd2Vla2RheSAtIHdlZWtkYXlPZkphbjQgLSA3ICsgbWluRGF5c0luRmlyc3RXZWVrLFxuICAgIHllYXI7XG5cbiAgaWYgKG9yZGluYWwgPCAxKSB7XG4gICAgeWVhciA9IHdlZWtZZWFyIC0gMTtcbiAgICBvcmRpbmFsICs9IGRheXNJblllYXIoeWVhcik7XG4gIH0gZWxzZSBpZiAob3JkaW5hbCA+IHllYXJJbkRheXMpIHtcbiAgICB5ZWFyID0gd2Vla1llYXIgKyAxO1xuICAgIG9yZGluYWwgLT0gZGF5c0luWWVhcih3ZWVrWWVhcik7XG4gIH0gZWxzZSB7XG4gICAgeWVhciA9IHdlZWtZZWFyO1xuICB9XG5cbiAgY29uc3QgeyBtb250aCwgZGF5IH0gPSB1bmNvbXB1dGVPcmRpbmFsKHllYXIsIG9yZGluYWwpO1xuICByZXR1cm4geyB5ZWFyLCBtb250aCwgZGF5LCAuLi50aW1lT2JqZWN0KHdlZWtEYXRhKSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3JlZ29yaWFuVG9PcmRpbmFsKGdyZWdEYXRhKSB7XG4gIGNvbnN0IHsgeWVhciwgbW9udGgsIGRheSB9ID0gZ3JlZ0RhdGE7XG4gIGNvbnN0IG9yZGluYWwgPSBjb21wdXRlT3JkaW5hbCh5ZWFyLCBtb250aCwgZGF5KTtcbiAgcmV0dXJuIHsgeWVhciwgb3JkaW5hbCwgLi4udGltZU9iamVjdChncmVnRGF0YSkgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9yZGluYWxUb0dyZWdvcmlhbihvcmRpbmFsRGF0YSkge1xuICBjb25zdCB7IHllYXIsIG9yZGluYWwgfSA9IG9yZGluYWxEYXRhO1xuICBjb25zdCB7IG1vbnRoLCBkYXkgfSA9IHVuY29tcHV0ZU9yZGluYWwoeWVhciwgb3JkaW5hbCk7XG4gIHJldHVybiB7IHllYXIsIG1vbnRoLCBkYXksIC4uLnRpbWVPYmplY3Qob3JkaW5hbERhdGEpIH07XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgbG9jYWwgd2VlayB1bml0cyBsaWtlIGxvY2FsV2Vla2RheSBhcmUgdXNlZCBpbiBvYmouXG4gKiBJZiBzbywgdmFsaWRhdGVzIHRoYXQgdGhleSBhcmUgbm90IG1peGVkIHdpdGggSVNPIHdlZWsgdW5pdHMgYW5kIHRoZW4gY29waWVzIHRoZW0gdG8gdGhlIG5vcm1hbCB3ZWVrIHVuaXQgcHJvcGVydGllcy5cbiAqIE1vZGlmaWVzIG9iaiBpbi1wbGFjZSFcbiAqIEBwYXJhbSBvYmogdGhlIG9iamVjdCB2YWx1ZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZXNMb2NhbFdlZWtWYWx1ZXMob2JqLCBsb2MpIHtcbiAgY29uc3QgaGFzTG9jYWxlV2Vla0RhdGEgPVxuICAgICFpc1VuZGVmaW5lZChvYmoubG9jYWxXZWVrZGF5KSB8fFxuICAgICFpc1VuZGVmaW5lZChvYmoubG9jYWxXZWVrTnVtYmVyKSB8fFxuICAgICFpc1VuZGVmaW5lZChvYmoubG9jYWxXZWVrWWVhcik7XG4gIGlmIChoYXNMb2NhbGVXZWVrRGF0YSkge1xuICAgIGNvbnN0IGhhc0lzb1dlZWtEYXRhID1cbiAgICAgICFpc1VuZGVmaW5lZChvYmoud2Vla2RheSkgfHwgIWlzVW5kZWZpbmVkKG9iai53ZWVrTnVtYmVyKSB8fCAhaXNVbmRlZmluZWQob2JqLndlZWtZZWFyKTtcblxuICAgIGlmIChoYXNJc29XZWVrRGF0YSkge1xuICAgICAgdGhyb3cgbmV3IENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yKFxuICAgICAgICBcIkNhbm5vdCBtaXggbG9jYWxlLWJhc2VkIHdlZWsgZmllbGRzIHdpdGggSVNPLWJhc2VkIHdlZWsgZmllbGRzXCJcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQob2JqLmxvY2FsV2Vla2RheSkpIG9iai53ZWVrZGF5ID0gb2JqLmxvY2FsV2Vla2RheTtcbiAgICBpZiAoIWlzVW5kZWZpbmVkKG9iai5sb2NhbFdlZWtOdW1iZXIpKSBvYmoud2Vla051bWJlciA9IG9iai5sb2NhbFdlZWtOdW1iZXI7XG4gICAgaWYgKCFpc1VuZGVmaW5lZChvYmoubG9jYWxXZWVrWWVhcikpIG9iai53ZWVrWWVhciA9IG9iai5sb2NhbFdlZWtZZWFyO1xuICAgIGRlbGV0ZSBvYmoubG9jYWxXZWVrZGF5O1xuICAgIGRlbGV0ZSBvYmoubG9jYWxXZWVrTnVtYmVyO1xuICAgIGRlbGV0ZSBvYmoubG9jYWxXZWVrWWVhcjtcbiAgICByZXR1cm4ge1xuICAgICAgbWluRGF5c0luRmlyc3RXZWVrOiBsb2MuZ2V0TWluRGF5c0luRmlyc3RXZWVrKCksXG4gICAgICBzdGFydE9mV2VlazogbG9jLmdldFN0YXJ0T2ZXZWVrKCksXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geyBtaW5EYXlzSW5GaXJzdFdlZWs6IDQsIHN0YXJ0T2ZXZWVrOiAxIH07XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0ludmFsaWRXZWVrRGF0YShvYmosIG1pbkRheXNJbkZpcnN0V2VlayA9IDQsIHN0YXJ0T2ZXZWVrID0gMSkge1xuICBjb25zdCB2YWxpZFllYXIgPSBpc0ludGVnZXIob2JqLndlZWtZZWFyKSxcbiAgICB2YWxpZFdlZWsgPSBpbnRlZ2VyQmV0d2VlbihcbiAgICAgIG9iai53ZWVrTnVtYmVyLFxuICAgICAgMSxcbiAgICAgIHdlZWtzSW5XZWVrWWVhcihvYmoud2Vla1llYXIsIG1pbkRheXNJbkZpcnN0V2Vlaywgc3RhcnRPZldlZWspXG4gICAgKSxcbiAgICB2YWxpZFdlZWtkYXkgPSBpbnRlZ2VyQmV0d2VlbihvYmoud2Vla2RheSwgMSwgNyk7XG5cbiAgaWYgKCF2YWxpZFllYXIpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJ3ZWVrWWVhclwiLCBvYmoud2Vla1llYXIpO1xuICB9IGVsc2UgaWYgKCF2YWxpZFdlZWspIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJ3ZWVrXCIsIG9iai53ZWVrTnVtYmVyKTtcbiAgfSBlbHNlIGlmICghdmFsaWRXZWVrZGF5KSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwid2Vla2RheVwiLCBvYmoud2Vla2RheSk7XG4gIH0gZWxzZSByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNJbnZhbGlkT3JkaW5hbERhdGEob2JqKSB7XG4gIGNvbnN0IHZhbGlkWWVhciA9IGlzSW50ZWdlcihvYmoueWVhciksXG4gICAgdmFsaWRPcmRpbmFsID0gaW50ZWdlckJldHdlZW4ob2JqLm9yZGluYWwsIDEsIGRheXNJblllYXIob2JqLnllYXIpKTtcblxuICBpZiAoIXZhbGlkWWVhcikge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcInllYXJcIiwgb2JqLnllYXIpO1xuICB9IGVsc2UgaWYgKCF2YWxpZE9yZGluYWwpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJvcmRpbmFsXCIsIG9iai5vcmRpbmFsKTtcbiAgfSBlbHNlIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0ludmFsaWRHcmVnb3JpYW5EYXRhKG9iaikge1xuICBjb25zdCB2YWxpZFllYXIgPSBpc0ludGVnZXIob2JqLnllYXIpLFxuICAgIHZhbGlkTW9udGggPSBpbnRlZ2VyQmV0d2VlbihvYmoubW9udGgsIDEsIDEyKSxcbiAgICB2YWxpZERheSA9IGludGVnZXJCZXR3ZWVuKG9iai5kYXksIDEsIGRheXNJbk1vbnRoKG9iai55ZWFyLCBvYmoubW9udGgpKTtcblxuICBpZiAoIXZhbGlkWWVhcikge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcInllYXJcIiwgb2JqLnllYXIpO1xuICB9IGVsc2UgaWYgKCF2YWxpZE1vbnRoKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwibW9udGhcIiwgb2JqLm1vbnRoKTtcbiAgfSBlbHNlIGlmICghdmFsaWREYXkpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJkYXlcIiwgb2JqLmRheSk7XG4gIH0gZWxzZSByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNJbnZhbGlkVGltZURhdGEob2JqKSB7XG4gIGNvbnN0IHsgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kIH0gPSBvYmo7XG4gIGNvbnN0IHZhbGlkSG91ciA9XG4gICAgICBpbnRlZ2VyQmV0d2Vlbihob3VyLCAwLCAyMykgfHxcbiAgICAgIChob3VyID09PSAyNCAmJiBtaW51dGUgPT09IDAgJiYgc2Vjb25kID09PSAwICYmIG1pbGxpc2Vjb25kID09PSAwKSxcbiAgICB2YWxpZE1pbnV0ZSA9IGludGVnZXJCZXR3ZWVuKG1pbnV0ZSwgMCwgNTkpLFxuICAgIHZhbGlkU2Vjb25kID0gaW50ZWdlckJldHdlZW4oc2Vjb25kLCAwLCA1OSksXG4gICAgdmFsaWRNaWxsaXNlY29uZCA9IGludGVnZXJCZXR3ZWVuKG1pbGxpc2Vjb25kLCAwLCA5OTkpO1xuXG4gIGlmICghdmFsaWRIb3VyKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwiaG91clwiLCBob3VyKTtcbiAgfSBlbHNlIGlmICghdmFsaWRNaW51dGUpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJtaW51dGVcIiwgbWludXRlKTtcbiAgfSBlbHNlIGlmICghdmFsaWRTZWNvbmQpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJzZWNvbmRcIiwgc2Vjb25kKTtcbiAgfSBlbHNlIGlmICghdmFsaWRNaWxsaXNlY29uZCkge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcIm1pbGxpc2Vjb25kXCIsIG1pbGxpc2Vjb25kKTtcbiAgfSBlbHNlIHJldHVybiBmYWxzZTtcbn1cbiIsICIvKlxuICBUaGlzIGlzIGp1c3QgYSBqdW5rIGRyYXdlciwgY29udGFpbmluZyBhbnl0aGluZyB1c2VkIGFjcm9zcyBtdWx0aXBsZSBjbGFzc2VzLlxuICBCZWNhdXNlIEx1eG9uIGlzIHNtYWxsKGlzaCksIHRoaXMgc2hvdWxkIHN0YXkgc21hbGwgYW5kIHdlIHdvbid0IHdvcnJ5IGFib3V0IHNwbGl0dGluZ1xuICBpdCB1cCBpbnRvLCBzYXksIHBhcnNpbmdVdGlsLmpzIGFuZCBiYXNpY1V0aWwuanMgYW5kIHNvIG9uLiBCdXQgdGhleSBhcmUgZGl2aWRlZCB1cCBieSBmZWF0dXJlIGFyZWEuXG4qL1xuXG5pbXBvcnQgeyBJbnZhbGlkQXJndW1lbnRFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMuanNcIjtcbmltcG9ydCBTZXR0aW5ncyBmcm9tIFwiLi4vc2V0dGluZ3MuanNcIjtcbmltcG9ydCB7IGRheU9mV2VlaywgaXNvV2Vla2RheVRvTG9jYWwgfSBmcm9tIFwiLi9jb252ZXJzaW9ucy5qc1wiO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuLy8gVFlQRVNcblxuZXhwb3J0IGZ1bmN0aW9uIGlzVW5kZWZpbmVkKG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSBcInVuZGVmaW5lZFwiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXIobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09IFwibnVtYmVyXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVnZXIobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09IFwibnVtYmVyXCIgJiYgbyAlIDEgPT09IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyhvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGF0ZShvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykgPT09IFwiW29iamVjdCBEYXRlXVwiO1xufVxuXG4vLyBDQVBBQklMSVRJRVNcblxuZXhwb3J0IGZ1bmN0aW9uIGhhc1JlbGF0aXZlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB0eXBlb2YgSW50bCAhPT0gXCJ1bmRlZmluZWRcIiAmJiAhIUludGwuUmVsYXRpdmVUaW1lRm9ybWF0O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNMb2NhbGVXZWVrSW5mbygpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gKFxuICAgICAgdHlwZW9mIEludGwgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICEhSW50bC5Mb2NhbGUgJiZcbiAgICAgIChcIndlZWtJbmZvXCIgaW4gSW50bC5Mb2NhbGUucHJvdG90eXBlIHx8IFwiZ2V0V2Vla0luZm9cIiBpbiBJbnRsLkxvY2FsZS5wcm90b3R5cGUpXG4gICAgKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLyBPQkpFQ1RTIEFORCBBUlJBWVNcblxuZXhwb3J0IGZ1bmN0aW9uIG1heWJlQXJyYXkodGhpbmcpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodGhpbmcpID8gdGhpbmcgOiBbdGhpbmddO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmVzdEJ5KGFyciwgYnksIGNvbXBhcmUpIHtcbiAgaWYgKGFyci5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiBhcnIucmVkdWNlKChiZXN0LCBuZXh0KSA9PiB7XG4gICAgY29uc3QgcGFpciA9IFtieShuZXh0KSwgbmV4dF07XG4gICAgaWYgKCFiZXN0KSB7XG4gICAgICByZXR1cm4gcGFpcjtcbiAgICB9IGVsc2UgaWYgKGNvbXBhcmUoYmVzdFswXSwgcGFpclswXSkgPT09IGJlc3RbMF0pIHtcbiAgICAgIHJldHVybiBiZXN0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcGFpcjtcbiAgICB9XG4gIH0sIG51bGwpWzFdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGljayhvYmosIGtleXMpIHtcbiAgcmV0dXJuIGtleXMucmVkdWNlKChhLCBrKSA9PiB7XG4gICAgYVtrXSA9IG9ialtrXTtcbiAgICByZXR1cm4gYTtcbiAgfSwge30pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlV2Vla1NldHRpbmdzKHNldHRpbmdzKSB7XG4gIGlmIChzZXR0aW5ncyA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNldHRpbmdzICE9PSBcIm9iamVjdFwiKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwiV2VlayBzZXR0aW5ncyBtdXN0IGJlIGFuIG9iamVjdFwiKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoXG4gICAgICAhaW50ZWdlckJldHdlZW4oc2V0dGluZ3MuZmlyc3REYXksIDEsIDcpIHx8XG4gICAgICAhaW50ZWdlckJldHdlZW4oc2V0dGluZ3MubWluaW1hbERheXMsIDEsIDcpIHx8XG4gICAgICAhQXJyYXkuaXNBcnJheShzZXR0aW5ncy53ZWVrZW5kKSB8fFxuICAgICAgc2V0dGluZ3Mud2Vla2VuZC5zb21lKCh2KSA9PiAhaW50ZWdlckJldHdlZW4odiwgMSwgNykpXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXCJJbnZhbGlkIHdlZWsgc2V0dGluZ3NcIik7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBmaXJzdERheTogc2V0dGluZ3MuZmlyc3REYXksXG4gICAgICBtaW5pbWFsRGF5czogc2V0dGluZ3MubWluaW1hbERheXMsXG4gICAgICB3ZWVrZW5kOiBBcnJheS5mcm9tKHNldHRpbmdzLndlZWtlbmQpLFxuICAgIH07XG4gIH1cbn1cblxuLy8gTlVNQkVSUyBBTkQgU1RSSU5HU1xuXG5leHBvcnQgZnVuY3Rpb24gaW50ZWdlckJldHdlZW4odGhpbmcsIGJvdHRvbSwgdG9wKSB7XG4gIHJldHVybiBpc0ludGVnZXIodGhpbmcpICYmIHRoaW5nID49IGJvdHRvbSAmJiB0aGluZyA8PSB0b3A7XG59XG5cbi8vIHggJSBuIGJ1dCB0YWtlcyB0aGUgc2lnbiBvZiBuIGluc3RlYWQgb2YgeFxuZXhwb3J0IGZ1bmN0aW9uIGZsb29yTW9kKHgsIG4pIHtcbiAgcmV0dXJuIHggLSBuICogTWF0aC5mbG9vcih4IC8gbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWRTdGFydChpbnB1dCwgbiA9IDIpIHtcbiAgY29uc3QgaXNOZWcgPSBpbnB1dCA8IDA7XG4gIGxldCBwYWRkZWQ7XG4gIGlmIChpc05lZykge1xuICAgIHBhZGRlZCA9IFwiLVwiICsgKFwiXCIgKyAtaW5wdXQpLnBhZFN0YXJ0KG4sIFwiMFwiKTtcbiAgfSBlbHNlIHtcbiAgICBwYWRkZWQgPSAoXCJcIiArIGlucHV0KS5wYWRTdGFydChuLCBcIjBcIik7XG4gIH1cbiAgcmV0dXJuIHBhZGRlZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSW50ZWdlcihzdHJpbmcpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHN0cmluZykgfHwgc3RyaW5nID09PSBudWxsIHx8IHN0cmluZyA9PT0gXCJcIikge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHN0cmluZywgMTApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUZsb2F0aW5nKHN0cmluZykge1xuICBpZiAoaXNVbmRlZmluZWQoc3RyaW5nKSB8fCBzdHJpbmcgPT09IG51bGwgfHwgc3RyaW5nID09PSBcIlwiKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChzdHJpbmcpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU1pbGxpcyhmcmFjdGlvbikge1xuICAvLyBSZXR1cm4gdW5kZWZpbmVkIChpbnN0ZWFkIG9mIDApIGluIHRoZXNlIGNhc2VzLCB3aGVyZSBmcmFjdGlvbiBpcyBub3Qgc2V0XG4gIGlmIChpc1VuZGVmaW5lZChmcmFjdGlvbikgfHwgZnJhY3Rpb24gPT09IG51bGwgfHwgZnJhY3Rpb24gPT09IFwiXCIpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGYgPSBwYXJzZUZsb2F0KFwiMC5cIiArIGZyYWN0aW9uKSAqIDEwMDA7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoZik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kVG8obnVtYmVyLCBkaWdpdHMsIHRvd2FyZFplcm8gPSBmYWxzZSkge1xuICBjb25zdCBmYWN0b3IgPSAxMCAqKiBkaWdpdHMsXG4gICAgcm91bmRlciA9IHRvd2FyZFplcm8gPyBNYXRoLnRydW5jIDogTWF0aC5yb3VuZDtcbiAgcmV0dXJuIHJvdW5kZXIobnVtYmVyICogZmFjdG9yKSAvIGZhY3Rvcjtcbn1cblxuLy8gREFURSBCQVNJQ1NcblxuZXhwb3J0IGZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICByZXR1cm4geWVhciAlIDQgPT09IDAgJiYgKHllYXIgJSAxMDAgIT09IDAgfHwgeWVhciAlIDQwMCA9PT0gMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXlzSW5ZZWFyKHllYXIpIHtcbiAgcmV0dXJuIGlzTGVhcFllYXIoeWVhcikgPyAzNjYgOiAzNjU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXlzSW5Nb250aCh5ZWFyLCBtb250aCkge1xuICBjb25zdCBtb2RNb250aCA9IGZsb29yTW9kKG1vbnRoIC0gMSwgMTIpICsgMSxcbiAgICBtb2RZZWFyID0geWVhciArIChtb250aCAtIG1vZE1vbnRoKSAvIDEyO1xuXG4gIGlmIChtb2RNb250aCA9PT0gMikge1xuICAgIHJldHVybiBpc0xlYXBZZWFyKG1vZFllYXIpID8gMjkgOiAyODtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gWzMxLCBudWxsLCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV1bbW9kTW9udGggLSAxXTtcbiAgfVxufVxuXG4vLyBjb252ZXJ0IGEgY2FsZW5kYXIgb2JqZWN0IHRvIGEgbG9jYWwgdGltZXN0YW1wIChlcG9jaCwgYnV0IHdpdGggdGhlIG9mZnNldCBiYWtlZCBpbilcbmV4cG9ydCBmdW5jdGlvbiBvYmpUb0xvY2FsVFMob2JqKSB7XG4gIGxldCBkID0gRGF0ZS5VVEMoXG4gICAgb2JqLnllYXIsXG4gICAgb2JqLm1vbnRoIC0gMSxcbiAgICBvYmouZGF5LFxuICAgIG9iai5ob3VyLFxuICAgIG9iai5taW51dGUsXG4gICAgb2JqLnNlY29uZCxcbiAgICBvYmoubWlsbGlzZWNvbmRcbiAgKTtcblxuICAvLyBmb3IgbGVnYWN5IHJlYXNvbnMsIHllYXJzIGJldHdlZW4gMCBhbmQgOTkgYXJlIGludGVycHJldGVkIGFzIDE5WFg7IHJldmVydCB0aGF0XG4gIGlmIChvYmoueWVhciA8IDEwMCAmJiBvYmoueWVhciA+PSAwKSB7XG4gICAgZCA9IG5ldyBEYXRlKGQpO1xuICAgIC8vIHNldCB0aGUgbW9udGggYW5kIGRheSBhZ2FpbiwgdGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSB5ZWFyIDIwMDAgaXMgYSBsZWFwIHllYXIsIGJ1dCB5ZWFyIDEwMCBpcyBub3RcbiAgICAvLyBzbyBpZiBvYmoueWVhciBpcyBpbiA5OSwgYnV0IG9iai5kYXkgbWFrZXMgaXQgcm9sbCBvdmVyIGludG8geWVhciAxMDAsXG4gICAgLy8gdGhlIGNhbGN1bGF0aW9ucyBkb25lIGJ5IERhdGUuVVRDIGFyZSB1c2luZyB5ZWFyIDIwMDAgLSB3aGljaCBpcyBpbmNvcnJlY3RcbiAgICBkLnNldFVUQ0Z1bGxZZWFyKG9iai55ZWFyLCBvYmoubW9udGggLSAxLCBvYmouZGF5KTtcbiAgfVxuICByZXR1cm4gK2Q7XG59XG5cbi8vIGFkYXB0ZWQgZnJvbSBtb21lbnQuanM6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2Jsb2IvMDAwYWMxODAwZTYyMGY3NzBmNGViMzFiNWFlOTA4ZjYxNjdiMGFiMi9zcmMvbGliL3VuaXRzL3dlZWstY2FsZW5kYXItdXRpbHMuanNcbmZ1bmN0aW9uIGZpcnN0V2Vla09mZnNldCh5ZWFyLCBtaW5EYXlzSW5GaXJzdFdlZWssIHN0YXJ0T2ZXZWVrKSB7XG4gIGNvbnN0IGZ3ZGx3ID0gaXNvV2Vla2RheVRvTG9jYWwoZGF5T2ZXZWVrKHllYXIsIDEsIG1pbkRheXNJbkZpcnN0V2VlayksIHN0YXJ0T2ZXZWVrKTtcbiAgcmV0dXJuIC1md2RsdyArIG1pbkRheXNJbkZpcnN0V2VlayAtIDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3ZWVrc0luV2Vla1llYXIod2Vla1llYXIsIG1pbkRheXNJbkZpcnN0V2VlayA9IDQsIHN0YXJ0T2ZXZWVrID0gMSkge1xuICBjb25zdCB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHdlZWtZZWFyLCBtaW5EYXlzSW5GaXJzdFdlZWssIHN0YXJ0T2ZXZWVrKTtcbiAgY29uc3Qgd2Vla09mZnNldE5leHQgPSBmaXJzdFdlZWtPZmZzZXQod2Vla1llYXIgKyAxLCBtaW5EYXlzSW5GaXJzdFdlZWssIHN0YXJ0T2ZXZWVrKTtcbiAgcmV0dXJuIChkYXlzSW5ZZWFyKHdlZWtZZWFyKSAtIHdlZWtPZmZzZXQgKyB3ZWVrT2Zmc2V0TmV4dCkgLyA3O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW50cnVuY2F0ZVllYXIoeWVhcikge1xuICBpZiAoeWVhciA+IDk5KSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSByZXR1cm4geWVhciA+IFNldHRpbmdzLnR3b0RpZ2l0Q3V0b2ZmWWVhciA/IDE5MDAgKyB5ZWFyIDogMjAwMCArIHllYXI7XG59XG5cbi8vIFBBUlNJTkdcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlWm9uZUluZm8odHMsIG9mZnNldEZvcm1hdCwgbG9jYWxlLCB0aW1lWm9uZSA9IG51bGwpIHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRzKSxcbiAgICBpbnRsT3B0cyA9IHtcbiAgICAgIGhvdXJDeWNsZTogXCJoMjNcIixcbiAgICAgIHllYXI6IFwibnVtZXJpY1wiLFxuICAgICAgbW9udGg6IFwiMi1kaWdpdFwiLFxuICAgICAgZGF5OiBcIjItZGlnaXRcIixcbiAgICAgIGhvdXI6IFwiMi1kaWdpdFwiLFxuICAgICAgbWludXRlOiBcIjItZGlnaXRcIixcbiAgICB9O1xuXG4gIGlmICh0aW1lWm9uZSkge1xuICAgIGludGxPcHRzLnRpbWVab25lID0gdGltZVpvbmU7XG4gIH1cblxuICBjb25zdCBtb2RpZmllZCA9IHsgdGltZVpvbmVOYW1lOiBvZmZzZXRGb3JtYXQsIC4uLmludGxPcHRzIH07XG5cbiAgY29uc3QgcGFyc2VkID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCBtb2RpZmllZClcbiAgICAuZm9ybWF0VG9QYXJ0cyhkYXRlKVxuICAgIC5maW5kKChtKSA9PiBtLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0aW1lem9uZW5hbWVcIik7XG4gIHJldHVybiBwYXJzZWQgPyBwYXJzZWQudmFsdWUgOiBudWxsO1xufVxuXG4vLyBzaWduZWRPZmZzZXQoJy01JywgJzMwJykgLT4gLTMzMFxuZXhwb3J0IGZ1bmN0aW9uIHNpZ25lZE9mZnNldChvZmZIb3VyU3RyLCBvZmZNaW51dGVTdHIpIHtcbiAgbGV0IG9mZkhvdXIgPSBwYXJzZUludChvZmZIb3VyU3RyLCAxMCk7XG5cbiAgLy8gZG9uJ3QgfHwgdGhpcyBiZWNhdXNlIHdlIHdhbnQgdG8gcHJlc2VydmUgLTBcbiAgaWYgKE51bWJlci5pc05hTihvZmZIb3VyKSkge1xuICAgIG9mZkhvdXIgPSAwO1xuICB9XG5cbiAgY29uc3Qgb2ZmTWluID0gcGFyc2VJbnQob2ZmTWludXRlU3RyLCAxMCkgfHwgMCxcbiAgICBvZmZNaW5TaWduZWQgPSBvZmZIb3VyIDwgMCB8fCBPYmplY3QuaXMob2ZmSG91ciwgLTApID8gLW9mZk1pbiA6IG9mZk1pbjtcbiAgcmV0dXJuIG9mZkhvdXIgKiA2MCArIG9mZk1pblNpZ25lZDtcbn1cblxuLy8gQ09FUkNJT05cblxuZXhwb3J0IGZ1bmN0aW9uIGFzTnVtYmVyKHZhbHVlKSB7XG4gIGNvbnN0IG51bWVyaWNWYWx1ZSA9IE51bWJlcih2YWx1ZSk7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiIHx8IHZhbHVlID09PSBcIlwiIHx8IE51bWJlci5pc05hTihudW1lcmljVmFsdWUpKVxuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihgSW52YWxpZCB1bml0IHZhbHVlICR7dmFsdWV9YCk7XG4gIHJldHVybiBudW1lcmljVmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVPYmplY3Qob2JqLCBub3JtYWxpemVyKSB7XG4gIGNvbnN0IG5vcm1hbGl6ZWQgPSB7fTtcbiAgZm9yIChjb25zdCB1IGluIG9iaikge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eShvYmosIHUpKSB7XG4gICAgICBjb25zdCB2ID0gb2JqW3VdO1xuICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsKSBjb250aW51ZTtcbiAgICAgIG5vcm1hbGl6ZWRbbm9ybWFsaXplcih1KV0gPSBhc051bWJlcih2KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vcm1hbGl6ZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRPZmZzZXQob2Zmc2V0LCBmb3JtYXQpIHtcbiAgY29uc3QgaG91cnMgPSBNYXRoLnRydW5jKE1hdGguYWJzKG9mZnNldCAvIDYwKSksXG4gICAgbWludXRlcyA9IE1hdGgudHJ1bmMoTWF0aC5hYnMob2Zmc2V0ICUgNjApKSxcbiAgICBzaWduID0gb2Zmc2V0ID49IDAgPyBcIitcIiA6IFwiLVwiO1xuXG4gIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgY2FzZSBcInNob3J0XCI6XG4gICAgICByZXR1cm4gYCR7c2lnbn0ke3BhZFN0YXJ0KGhvdXJzLCAyKX06JHtwYWRTdGFydChtaW51dGVzLCAyKX1gO1xuICAgIGNhc2UgXCJuYXJyb3dcIjpcbiAgICAgIHJldHVybiBgJHtzaWdufSR7aG91cnN9JHttaW51dGVzID4gMCA/IGA6JHttaW51dGVzfWAgOiBcIlwifWA7XG4gICAgY2FzZSBcInRlY2hpZVwiOlxuICAgICAgcmV0dXJuIGAke3NpZ259JHtwYWRTdGFydChob3VycywgMil9JHtwYWRTdGFydChtaW51dGVzLCAyKX1gO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgVmFsdWUgZm9ybWF0ICR7Zm9ybWF0fSBpcyBvdXQgb2YgcmFuZ2UgZm9yIHByb3BlcnR5IGZvcm1hdGApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lT2JqZWN0KG9iaikge1xuICByZXR1cm4gcGljayhvYmosIFtcImhvdXJcIiwgXCJtaW51dGVcIiwgXCJzZWNvbmRcIiwgXCJtaWxsaXNlY29uZFwiXSk7XG59XG4iLCAiaW1wb3J0ICogYXMgRm9ybWF0cyBmcm9tIFwiLi9mb3JtYXRzLmpzXCI7XG5pbXBvcnQgeyBwaWNrIH0gZnJvbSBcIi4vdXRpbC5qc1wiO1xuXG5mdW5jdGlvbiBzdHJpbmdpZnkob2JqKSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIE9iamVjdC5rZXlzKG9iaikuc29ydCgpKTtcbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmV4cG9ydCBjb25zdCBtb250aHNMb25nID0gW1xuICBcIkphbnVhcnlcIixcbiAgXCJGZWJydWFyeVwiLFxuICBcIk1hcmNoXCIsXG4gIFwiQXByaWxcIixcbiAgXCJNYXlcIixcbiAgXCJKdW5lXCIsXG4gIFwiSnVseVwiLFxuICBcIkF1Z3VzdFwiLFxuICBcIlNlcHRlbWJlclwiLFxuICBcIk9jdG9iZXJcIixcbiAgXCJOb3ZlbWJlclwiLFxuICBcIkRlY2VtYmVyXCIsXG5dO1xuXG5leHBvcnQgY29uc3QgbW9udGhzU2hvcnQgPSBbXG4gIFwiSmFuXCIsXG4gIFwiRmViXCIsXG4gIFwiTWFyXCIsXG4gIFwiQXByXCIsXG4gIFwiTWF5XCIsXG4gIFwiSnVuXCIsXG4gIFwiSnVsXCIsXG4gIFwiQXVnXCIsXG4gIFwiU2VwXCIsXG4gIFwiT2N0XCIsXG4gIFwiTm92XCIsXG4gIFwiRGVjXCIsXG5dO1xuXG5leHBvcnQgY29uc3QgbW9udGhzTmFycm93ID0gW1wiSlwiLCBcIkZcIiwgXCJNXCIsIFwiQVwiLCBcIk1cIiwgXCJKXCIsIFwiSlwiLCBcIkFcIiwgXCJTXCIsIFwiT1wiLCBcIk5cIiwgXCJEXCJdO1xuXG5leHBvcnQgZnVuY3Rpb24gbW9udGhzKGxlbmd0aCkge1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgXCJuYXJyb3dcIjpcbiAgICAgIHJldHVybiBbLi4ubW9udGhzTmFycm93XTtcbiAgICBjYXNlIFwic2hvcnRcIjpcbiAgICAgIHJldHVybiBbLi4ubW9udGhzU2hvcnRdO1xuICAgIGNhc2UgXCJsb25nXCI6XG4gICAgICByZXR1cm4gWy4uLm1vbnRoc0xvbmddO1xuICAgIGNhc2UgXCJudW1lcmljXCI6XG4gICAgICByZXR1cm4gW1wiMVwiLCBcIjJcIiwgXCIzXCIsIFwiNFwiLCBcIjVcIiwgXCI2XCIsIFwiN1wiLCBcIjhcIiwgXCI5XCIsIFwiMTBcIiwgXCIxMVwiLCBcIjEyXCJdO1xuICAgIGNhc2UgXCIyLWRpZ2l0XCI6XG4gICAgICByZXR1cm4gW1wiMDFcIiwgXCIwMlwiLCBcIjAzXCIsIFwiMDRcIiwgXCIwNVwiLCBcIjA2XCIsIFwiMDdcIiwgXCIwOFwiLCBcIjA5XCIsIFwiMTBcIiwgXCIxMVwiLCBcIjEyXCJdO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgd2Vla2RheXNMb25nID0gW1xuICBcIk1vbmRheVwiLFxuICBcIlR1ZXNkYXlcIixcbiAgXCJXZWRuZXNkYXlcIixcbiAgXCJUaHVyc2RheVwiLFxuICBcIkZyaWRheVwiLFxuICBcIlNhdHVyZGF5XCIsXG4gIFwiU3VuZGF5XCIsXG5dO1xuXG5leHBvcnQgY29uc3Qgd2Vla2RheXNTaG9ydCA9IFtcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiLCBcIlN1blwiXTtcblxuZXhwb3J0IGNvbnN0IHdlZWtkYXlzTmFycm93ID0gW1wiTVwiLCBcIlRcIiwgXCJXXCIsIFwiVFwiLCBcIkZcIiwgXCJTXCIsIFwiU1wiXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHdlZWtkYXlzKGxlbmd0aCkge1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgXCJuYXJyb3dcIjpcbiAgICAgIHJldHVybiBbLi4ud2Vla2RheXNOYXJyb3ddO1xuICAgIGNhc2UgXCJzaG9ydFwiOlxuICAgICAgcmV0dXJuIFsuLi53ZWVrZGF5c1Nob3J0XTtcbiAgICBjYXNlIFwibG9uZ1wiOlxuICAgICAgcmV0dXJuIFsuLi53ZWVrZGF5c0xvbmddO1xuICAgIGNhc2UgXCJudW1lcmljXCI6XG4gICAgICByZXR1cm4gW1wiMVwiLCBcIjJcIiwgXCIzXCIsIFwiNFwiLCBcIjVcIiwgXCI2XCIsIFwiN1wiXTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IG1lcmlkaWVtcyA9IFtcIkFNXCIsIFwiUE1cIl07XG5cbmV4cG9ydCBjb25zdCBlcmFzTG9uZyA9IFtcIkJlZm9yZSBDaHJpc3RcIiwgXCJBbm5vIERvbWluaVwiXTtcblxuZXhwb3J0IGNvbnN0IGVyYXNTaG9ydCA9IFtcIkJDXCIsIFwiQURcIl07XG5cbmV4cG9ydCBjb25zdCBlcmFzTmFycm93ID0gW1wiQlwiLCBcIkFcIl07XG5cbmV4cG9ydCBmdW5jdGlvbiBlcmFzKGxlbmd0aCkge1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgXCJuYXJyb3dcIjpcbiAgICAgIHJldHVybiBbLi4uZXJhc05hcnJvd107XG4gICAgY2FzZSBcInNob3J0XCI6XG4gICAgICByZXR1cm4gWy4uLmVyYXNTaG9ydF07XG4gICAgY2FzZSBcImxvbmdcIjpcbiAgICAgIHJldHVybiBbLi4uZXJhc0xvbmddO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVyaWRpZW1Gb3JEYXRlVGltZShkdCkge1xuICByZXR1cm4gbWVyaWRpZW1zW2R0LmhvdXIgPCAxMiA/IDAgOiAxXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdlZWtkYXlGb3JEYXRlVGltZShkdCwgbGVuZ3RoKSB7XG4gIHJldHVybiB3ZWVrZGF5cyhsZW5ndGgpW2R0LndlZWtkYXkgLSAxXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vbnRoRm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkge1xuICByZXR1cm4gbW9udGhzKGxlbmd0aClbZHQubW9udGggLSAxXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVyYUZvckRhdGVUaW1lKGR0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGVyYXMobGVuZ3RoKVtkdC55ZWFyIDwgMCA/IDAgOiAxXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlVGltZSh1bml0LCBjb3VudCwgbnVtZXJpYyA9IFwiYWx3YXlzXCIsIG5hcnJvdyA9IGZhbHNlKSB7XG4gIGNvbnN0IHVuaXRzID0ge1xuICAgIHllYXJzOiBbXCJ5ZWFyXCIsIFwieXIuXCJdLFxuICAgIHF1YXJ0ZXJzOiBbXCJxdWFydGVyXCIsIFwicXRyLlwiXSxcbiAgICBtb250aHM6IFtcIm1vbnRoXCIsIFwibW8uXCJdLFxuICAgIHdlZWtzOiBbXCJ3ZWVrXCIsIFwid2suXCJdLFxuICAgIGRheXM6IFtcImRheVwiLCBcImRheVwiLCBcImRheXNcIl0sXG4gICAgaG91cnM6IFtcImhvdXJcIiwgXCJoci5cIl0sXG4gICAgbWludXRlczogW1wibWludXRlXCIsIFwibWluLlwiXSxcbiAgICBzZWNvbmRzOiBbXCJzZWNvbmRcIiwgXCJzZWMuXCJdLFxuICB9O1xuXG4gIGNvbnN0IGxhc3RhYmxlID0gW1wiaG91cnNcIiwgXCJtaW51dGVzXCIsIFwic2Vjb25kc1wiXS5pbmRleE9mKHVuaXQpID09PSAtMTtcblxuICBpZiAobnVtZXJpYyA9PT0gXCJhdXRvXCIgJiYgbGFzdGFibGUpIHtcbiAgICBjb25zdCBpc0RheSA9IHVuaXQgPT09IFwiZGF5c1wiO1xuICAgIHN3aXRjaCAoY291bnQpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIGlzRGF5ID8gXCJ0b21vcnJvd1wiIDogYG5leHQgJHt1bml0c1t1bml0XVswXX1gO1xuICAgICAgY2FzZSAtMTpcbiAgICAgICAgcmV0dXJuIGlzRGF5ID8gXCJ5ZXN0ZXJkYXlcIiA6IGBsYXN0ICR7dW5pdHNbdW5pdF1bMF19YDtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIGlzRGF5ID8gXCJ0b2RheVwiIDogYHRoaXMgJHt1bml0c1t1bml0XVswXX1gO1xuICAgICAgZGVmYXVsdDogLy8gZmFsbCB0aHJvdWdoXG4gICAgfVxuICB9XG5cbiAgY29uc3QgaXNJblBhc3QgPSBPYmplY3QuaXMoY291bnQsIC0wKSB8fCBjb3VudCA8IDAsXG4gICAgZm10VmFsdWUgPSBNYXRoLmFicyhjb3VudCksXG4gICAgc2luZ3VsYXIgPSBmbXRWYWx1ZSA9PT0gMSxcbiAgICBsaWxVbml0cyA9IHVuaXRzW3VuaXRdLFxuICAgIGZtdFVuaXQgPSBuYXJyb3dcbiAgICAgID8gc2luZ3VsYXJcbiAgICAgICAgPyBsaWxVbml0c1sxXVxuICAgICAgICA6IGxpbFVuaXRzWzJdIHx8IGxpbFVuaXRzWzFdXG4gICAgICA6IHNpbmd1bGFyXG4gICAgICA/IHVuaXRzW3VuaXRdWzBdXG4gICAgICA6IHVuaXQ7XG4gIHJldHVybiBpc0luUGFzdCA/IGAke2ZtdFZhbHVlfSAke2ZtdFVuaXR9IGFnb2AgOiBgaW4gJHtmbXRWYWx1ZX0gJHtmbXRVbml0fWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRTdHJpbmcoa25vd25Gb3JtYXQpIHtcbiAgLy8gdGhlc2UgYWxsIGhhdmUgdGhlIG9mZnNldHMgcmVtb3ZlZCBiZWNhdXNlIHdlIGRvbid0IGhhdmUgYWNjZXNzIHRvIHRoZW1cbiAgLy8gd2l0aG91dCBhbGwgdGhlIGludGwgc3R1ZmYgdGhpcyBpcyBiYWNrZmlsbGluZ1xuICBjb25zdCBmaWx0ZXJlZCA9IHBpY2soa25vd25Gb3JtYXQsIFtcbiAgICAgIFwid2Vla2RheVwiLFxuICAgICAgXCJlcmFcIixcbiAgICAgIFwieWVhclwiLFxuICAgICAgXCJtb250aFwiLFxuICAgICAgXCJkYXlcIixcbiAgICAgIFwiaG91clwiLFxuICAgICAgXCJtaW51dGVcIixcbiAgICAgIFwic2Vjb25kXCIsXG4gICAgICBcInRpbWVab25lTmFtZVwiLFxuICAgICAgXCJob3VyQ3ljbGVcIixcbiAgICBdKSxcbiAgICBrZXkgPSBzdHJpbmdpZnkoZmlsdGVyZWQpLFxuICAgIGRhdGVUaW1lSHVnZSA9IFwiRUVFRSwgTExMTCBkLCB5eXl5LCBoOm1tIGFcIjtcbiAgc3dpdGNoIChrZXkpIHtcbiAgICBjYXNlIHN0cmluZ2lmeShGb3JtYXRzLkRBVEVfU0hPUlQpOlxuICAgICAgcmV0dXJuIFwiTS9kL3l5eXlcIjtcbiAgICBjYXNlIHN0cmluZ2lmeShGb3JtYXRzLkRBVEVfTUVEKTpcbiAgICAgIHJldHVybiBcIkxMTCBkLCB5eXl5XCI7XG4gICAgY2FzZSBzdHJpbmdpZnkoRm9ybWF0cy5EQVRFX01FRF9XSVRIX1dFRUtEQVkpOlxuICAgICAgcmV0dXJuIFwiRUVFLCBMTEwgZCwgeXl5eVwiO1xuICAgIGNhc2Ugc3RyaW5naWZ5KEZvcm1hdHMuREFURV9GVUxMKTpcbiAgICAgIHJldHVybiBcIkxMTEwgZCwgeXl5eVwiO1xuICAgIGNhc2Ugc3RyaW5naWZ5KEZvcm1hdHMuREFURV9IVUdFKTpcbiAgICAgIHJldHVybiBcIkVFRUUsIExMTEwgZCwgeXl5eVwiO1xuICAgIGNhc2Ugc3RyaW5naWZ5KEZvcm1hdHMuVElNRV9TSU1QTEUpOlxuICAgICAgcmV0dXJuIFwiaDptbSBhXCI7XG4gICAgY2FzZSBzdHJpbmdpZnkoRm9ybWF0cy5USU1FX1dJVEhfU0VDT05EUyk6XG4gICAgICByZXR1cm4gXCJoOm1tOnNzIGFcIjtcbiAgICBjYXNlIHN0cmluZ2lmeShGb3JtYXRzLlRJTUVfV0lUSF9TSE9SVF9PRkZTRVQpOlxuICAgICAgcmV0dXJuIFwiaDptbSBhXCI7XG4gICAgY2FzZSBzdHJpbmdpZnkoRm9ybWF0cy5USU1FX1dJVEhfTE9OR19PRkZTRVQpOlxuICAgICAgcmV0dXJuIFwiaDptbSBhXCI7XG4gICAgY2FzZSBzdHJpbmdpZnkoRm9ybWF0cy5USU1FXzI0X1NJTVBMRSk6XG4gICAgICByZXR1cm4gXCJISDptbVwiO1xuICAgIGNhc2Ugc3RyaW5naWZ5KEZvcm1hdHMuVElNRV8yNF9XSVRIX1NFQ09ORFMpOlxuICAgICAgcmV0dXJuIFwiSEg6bW06c3NcIjtcbiAgICBjYXNlIHN0cmluZ2lmeShGb3JtYXRzLlRJTUVfMjRfV0lUSF9TSE9SVF9PRkZTRVQpOlxuICAgICAgcmV0dXJuIFwiSEg6bW1cIjtcbiAgICBjYXNlIHN0cmluZ2lmeShGb3JtYXRzLlRJTUVfMjRfV0lUSF9MT05HX09GRlNFVCk6XG4gICAgICByZXR1cm4gXCJISDptbVwiO1xuICAgIGNhc2Ugc3RyaW5naWZ5KEZvcm1hdHMuREFURVRJTUVfU0hPUlQpOlxuICAgICAgcmV0dXJuIFwiTS9kL3l5eXksIGg6bW0gYVwiO1xuICAgIGNhc2Ugc3RyaW5naWZ5KEZvcm1hdHMuREFURVRJTUVfTUVEKTpcbiAgICAgIHJldHVybiBcIkxMTCBkLCB5eXl5LCBoOm1tIGFcIjtcbiAgICBjYXNlIHN0cmluZ2lmeShGb3JtYXRzLkRBVEVUSU1FX0ZVTEwpOlxuICAgICAgcmV0dXJuIFwiTExMTCBkLCB5eXl5LCBoOm1tIGFcIjtcbiAgICBjYXNlIHN0cmluZ2lmeShGb3JtYXRzLkRBVEVUSU1FX0hVR0UpOlxuICAgICAgcmV0dXJuIGRhdGVUaW1lSHVnZTtcbiAgICBjYXNlIHN0cmluZ2lmeShGb3JtYXRzLkRBVEVUSU1FX1NIT1JUX1dJVEhfU0VDT05EUyk6XG4gICAgICByZXR1cm4gXCJNL2QveXl5eSwgaDptbTpzcyBhXCI7XG4gICAgY2FzZSBzdHJpbmdpZnkoRm9ybWF0cy5EQVRFVElNRV9NRURfV0lUSF9TRUNPTkRTKTpcbiAgICAgIHJldHVybiBcIkxMTCBkLCB5eXl5LCBoOm1tOnNzIGFcIjtcbiAgICBjYXNlIHN0cmluZ2lmeShGb3JtYXRzLkRBVEVUSU1FX01FRF9XSVRIX1dFRUtEQVkpOlxuICAgICAgcmV0dXJuIFwiRUVFLCBkIExMTCB5eXl5LCBoOm1tIGFcIjtcbiAgICBjYXNlIHN0cmluZ2lmeShGb3JtYXRzLkRBVEVUSU1FX0ZVTExfV0lUSF9TRUNPTkRTKTpcbiAgICAgIHJldHVybiBcIkxMTEwgZCwgeXl5eSwgaDptbTpzcyBhXCI7XG4gICAgY2FzZSBzdHJpbmdpZnkoRm9ybWF0cy5EQVRFVElNRV9IVUdFX1dJVEhfU0VDT05EUyk6XG4gICAgICByZXR1cm4gXCJFRUVFLCBMTExMIGQsIHl5eXksIGg6bW06c3MgYVwiO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZGF0ZVRpbWVIdWdlO1xuICB9XG59XG4iLCAiaW1wb3J0ICogYXMgRW5nbGlzaCBmcm9tIFwiLi9lbmdsaXNoLmpzXCI7XG5pbXBvcnQgKiBhcyBGb3JtYXRzIGZyb20gXCIuL2Zvcm1hdHMuanNcIjtcbmltcG9ydCB7IHBhZFN0YXJ0IH0gZnJvbSBcIi4vdXRpbC5qc1wiO1xuXG5mdW5jdGlvbiBzdHJpbmdpZnlUb2tlbnMoc3BsaXRzLCB0b2tlblRvU3RyaW5nKSB7XG4gIGxldCBzID0gXCJcIjtcbiAgZm9yIChjb25zdCB0b2tlbiBvZiBzcGxpdHMpIHtcbiAgICBpZiAodG9rZW4ubGl0ZXJhbCkge1xuICAgICAgcyArPSB0b2tlbi52YWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMgKz0gdG9rZW5Ub1N0cmluZyh0b2tlbi52YWwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcztcbn1cblxuY29uc3QgbWFjcm9Ub2tlblRvRm9ybWF0T3B0cyA9IHtcbiAgRDogRm9ybWF0cy5EQVRFX1NIT1JULFxuICBERDogRm9ybWF0cy5EQVRFX01FRCxcbiAgREREOiBGb3JtYXRzLkRBVEVfRlVMTCxcbiAgRERERDogRm9ybWF0cy5EQVRFX0hVR0UsXG4gIHQ6IEZvcm1hdHMuVElNRV9TSU1QTEUsXG4gIHR0OiBGb3JtYXRzLlRJTUVfV0lUSF9TRUNPTkRTLFxuICB0dHQ6IEZvcm1hdHMuVElNRV9XSVRIX1NIT1JUX09GRlNFVCxcbiAgdHR0dDogRm9ybWF0cy5USU1FX1dJVEhfTE9OR19PRkZTRVQsXG4gIFQ6IEZvcm1hdHMuVElNRV8yNF9TSU1QTEUsXG4gIFRUOiBGb3JtYXRzLlRJTUVfMjRfV0lUSF9TRUNPTkRTLFxuICBUVFQ6IEZvcm1hdHMuVElNRV8yNF9XSVRIX1NIT1JUX09GRlNFVCxcbiAgVFRUVDogRm9ybWF0cy5USU1FXzI0X1dJVEhfTE9OR19PRkZTRVQsXG4gIGY6IEZvcm1hdHMuREFURVRJTUVfU0hPUlQsXG4gIGZmOiBGb3JtYXRzLkRBVEVUSU1FX01FRCxcbiAgZmZmOiBGb3JtYXRzLkRBVEVUSU1FX0ZVTEwsXG4gIGZmZmY6IEZvcm1hdHMuREFURVRJTUVfSFVHRSxcbiAgRjogRm9ybWF0cy5EQVRFVElNRV9TSE9SVF9XSVRIX1NFQ09ORFMsXG4gIEZGOiBGb3JtYXRzLkRBVEVUSU1FX01FRF9XSVRIX1NFQ09ORFMsXG4gIEZGRjogRm9ybWF0cy5EQVRFVElNRV9GVUxMX1dJVEhfU0VDT05EUyxcbiAgRkZGRjogRm9ybWF0cy5EQVRFVElNRV9IVUdFX1dJVEhfU0VDT05EUyxcbn07XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtYXR0ZXIge1xuICBzdGF0aWMgY3JlYXRlKGxvY2FsZSwgb3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIG5ldyBGb3JtYXR0ZXIobG9jYWxlLCBvcHRzKTtcbiAgfVxuXG4gIHN0YXRpYyBwYXJzZUZvcm1hdChmbXQpIHtcbiAgICAvLyB3aGl0ZS1zcGFjZSBpcyBhbHdheXMgY29uc2lkZXJlZCBhIGxpdGVyYWwgaW4gdXNlci1wcm92aWRlZCBmb3JtYXRzXG4gICAgLy8gdGhlIFwiIFwiIHRva2VuIGhhcyBhIHNwZWNpYWwgbWVhbmluZyAoc2VlIHVuaXRGb3JUb2tlbilcblxuICAgIGxldCBjdXJyZW50ID0gbnVsbCxcbiAgICAgIGN1cnJlbnRGdWxsID0gXCJcIixcbiAgICAgIGJyYWNrZXRlZCA9IGZhbHNlO1xuICAgIGNvbnN0IHNwbGl0cyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm10Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjID0gZm10LmNoYXJBdChpKTtcbiAgICAgIGlmIChjID09PSBcIidcIikge1xuICAgICAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNwbGl0cy5wdXNoKHsgbGl0ZXJhbDogYnJhY2tldGVkIHx8IC9eXFxzKyQvLnRlc3QoY3VycmVudEZ1bGwpLCB2YWw6IGN1cnJlbnRGdWxsIH0pO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBudWxsO1xuICAgICAgICBjdXJyZW50RnVsbCA9IFwiXCI7XG4gICAgICAgIGJyYWNrZXRlZCA9ICFicmFja2V0ZWQ7XG4gICAgICB9IGVsc2UgaWYgKGJyYWNrZXRlZCkge1xuICAgICAgICBjdXJyZW50RnVsbCArPSBjO1xuICAgICAgfSBlbHNlIGlmIChjID09PSBjdXJyZW50KSB7XG4gICAgICAgIGN1cnJlbnRGdWxsICs9IGM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNwbGl0cy5wdXNoKHsgbGl0ZXJhbDogL15cXHMrJC8udGVzdChjdXJyZW50RnVsbCksIHZhbDogY3VycmVudEZ1bGwgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudEZ1bGwgPSBjO1xuICAgICAgICBjdXJyZW50ID0gYztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkge1xuICAgICAgc3BsaXRzLnB1c2goeyBsaXRlcmFsOiBicmFja2V0ZWQgfHwgL15cXHMrJC8udGVzdChjdXJyZW50RnVsbCksIHZhbDogY3VycmVudEZ1bGwgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNwbGl0cztcbiAgfVxuXG4gIHN0YXRpYyBtYWNyb1Rva2VuVG9Gb3JtYXRPcHRzKHRva2VuKSB7XG4gICAgcmV0dXJuIG1hY3JvVG9rZW5Ub0Zvcm1hdE9wdHNbdG9rZW5dO1xuICB9XG5cbiAgY29uc3RydWN0b3IobG9jYWxlLCBmb3JtYXRPcHRzKSB7XG4gICAgdGhpcy5vcHRzID0gZm9ybWF0T3B0cztcbiAgICB0aGlzLmxvYyA9IGxvY2FsZTtcbiAgICB0aGlzLnN5c3RlbUxvYyA9IG51bGw7XG4gIH1cblxuICBmb3JtYXRXaXRoU3lzdGVtRGVmYXVsdChkdCwgb3B0cykge1xuICAgIGlmICh0aGlzLnN5c3RlbUxvYyA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5zeXN0ZW1Mb2MgPSB0aGlzLmxvYy5yZWRlZmF1bHRUb1N5c3RlbSgpO1xuICAgIH1cbiAgICBjb25zdCBkZiA9IHRoaXMuc3lzdGVtTG9jLmR0Rm9ybWF0dGVyKGR0LCB7IC4uLnRoaXMub3B0cywgLi4ub3B0cyB9KTtcbiAgICByZXR1cm4gZGYuZm9ybWF0KCk7XG4gIH1cblxuICBkdEZvcm1hdHRlcihkdCwgb3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMubG9jLmR0Rm9ybWF0dGVyKGR0LCB7IC4uLnRoaXMub3B0cywgLi4ub3B0cyB9KTtcbiAgfVxuXG4gIGZvcm1hdERhdGVUaW1lKGR0LCBvcHRzKSB7XG4gICAgcmV0dXJuIHRoaXMuZHRGb3JtYXR0ZXIoZHQsIG9wdHMpLmZvcm1hdCgpO1xuICB9XG5cbiAgZm9ybWF0RGF0ZVRpbWVQYXJ0cyhkdCwgb3B0cykge1xuICAgIHJldHVybiB0aGlzLmR0Rm9ybWF0dGVyKGR0LCBvcHRzKS5mb3JtYXRUb1BhcnRzKCk7XG4gIH1cblxuICBmb3JtYXRJbnRlcnZhbChpbnRlcnZhbCwgb3B0cykge1xuICAgIGNvbnN0IGRmID0gdGhpcy5kdEZvcm1hdHRlcihpbnRlcnZhbC5zdGFydCwgb3B0cyk7XG4gICAgcmV0dXJuIGRmLmR0Zi5mb3JtYXRSYW5nZShpbnRlcnZhbC5zdGFydC50b0pTRGF0ZSgpLCBpbnRlcnZhbC5lbmQudG9KU0RhdGUoKSk7XG4gIH1cblxuICByZXNvbHZlZE9wdGlvbnMoZHQsIG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5kdEZvcm1hdHRlcihkdCwgb3B0cykucmVzb2x2ZWRPcHRpb25zKCk7XG4gIH1cblxuICBudW0obiwgcCA9IDApIHtcbiAgICAvLyB3ZSBnZXQgc29tZSBwZXJmIG91dCBvZiBkb2luZyB0aGlzIGhlcmUsIGFubm95aW5nbHlcbiAgICBpZiAodGhpcy5vcHRzLmZvcmNlU2ltcGxlKSB7XG4gICAgICByZXR1cm4gcGFkU3RhcnQobiwgcCk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3B0cyA9IHsgLi4udGhpcy5vcHRzIH07XG5cbiAgICBpZiAocCA+IDApIHtcbiAgICAgIG9wdHMucGFkVG8gPSBwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmxvYy5udW1iZXJGb3JtYXR0ZXIob3B0cykuZm9ybWF0KG4pO1xuICB9XG5cbiAgZm9ybWF0RGF0ZVRpbWVGcm9tU3RyaW5nKGR0LCBmbXQpIHtcbiAgICBjb25zdCBrbm93bkVuZ2xpc2ggPSB0aGlzLmxvYy5saXN0aW5nTW9kZSgpID09PSBcImVuXCIsXG4gICAgICB1c2VEYXRlVGltZUZvcm1hdHRlciA9IHRoaXMubG9jLm91dHB1dENhbGVuZGFyICYmIHRoaXMubG9jLm91dHB1dENhbGVuZGFyICE9PSBcImdyZWdvcnlcIixcbiAgICAgIHN0cmluZyA9IChvcHRzLCBleHRyYWN0KSA9PiB0aGlzLmxvYy5leHRyYWN0KGR0LCBvcHRzLCBleHRyYWN0KSxcbiAgICAgIGZvcm1hdE9mZnNldCA9IChvcHRzKSA9PiB7XG4gICAgICAgIGlmIChkdC5pc09mZnNldEZpeGVkICYmIGR0Lm9mZnNldCA9PT0gMCAmJiBvcHRzLmFsbG93Wikge1xuICAgICAgICAgIHJldHVybiBcIlpcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkdC5pc1ZhbGlkID8gZHQuem9uZS5mb3JtYXRPZmZzZXQoZHQudHMsIG9wdHMuZm9ybWF0KSA6IFwiXCI7XG4gICAgICB9LFxuICAgICAgbWVyaWRpZW0gPSAoKSA9PlxuICAgICAgICBrbm93bkVuZ2xpc2hcbiAgICAgICAgICA/IEVuZ2xpc2gubWVyaWRpZW1Gb3JEYXRlVGltZShkdClcbiAgICAgICAgICA6IHN0cmluZyh7IGhvdXI6IFwibnVtZXJpY1wiLCBob3VyQ3ljbGU6IFwiaDEyXCIgfSwgXCJkYXlwZXJpb2RcIiksXG4gICAgICBtb250aCA9IChsZW5ndGgsIHN0YW5kYWxvbmUpID0+XG4gICAgICAgIGtub3duRW5nbGlzaFxuICAgICAgICAgID8gRW5nbGlzaC5tb250aEZvckRhdGVUaW1lKGR0LCBsZW5ndGgpXG4gICAgICAgICAgOiBzdHJpbmcoc3RhbmRhbG9uZSA/IHsgbW9udGg6IGxlbmd0aCB9IDogeyBtb250aDogbGVuZ3RoLCBkYXk6IFwibnVtZXJpY1wiIH0sIFwibW9udGhcIiksXG4gICAgICB3ZWVrZGF5ID0gKGxlbmd0aCwgc3RhbmRhbG9uZSkgPT5cbiAgICAgICAga25vd25FbmdsaXNoXG4gICAgICAgICAgPyBFbmdsaXNoLndlZWtkYXlGb3JEYXRlVGltZShkdCwgbGVuZ3RoKVxuICAgICAgICAgIDogc3RyaW5nKFxuICAgICAgICAgICAgICBzdGFuZGFsb25lID8geyB3ZWVrZGF5OiBsZW5ndGggfSA6IHsgd2Vla2RheTogbGVuZ3RoLCBtb250aDogXCJsb25nXCIsIGRheTogXCJudW1lcmljXCIgfSxcbiAgICAgICAgICAgICAgXCJ3ZWVrZGF5XCJcbiAgICAgICAgICAgICksXG4gICAgICBtYXliZU1hY3JvID0gKHRva2VuKSA9PiB7XG4gICAgICAgIGNvbnN0IGZvcm1hdE9wdHMgPSBGb3JtYXR0ZXIubWFjcm9Ub2tlblRvRm9ybWF0T3B0cyh0b2tlbik7XG4gICAgICAgIGlmIChmb3JtYXRPcHRzKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0V2l0aFN5c3RlbURlZmF1bHQoZHQsIGZvcm1hdE9wdHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGVyYSA9IChsZW5ndGgpID0+XG4gICAgICAgIGtub3duRW5nbGlzaCA/IEVuZ2xpc2guZXJhRm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkgOiBzdHJpbmcoeyBlcmE6IGxlbmd0aCB9LCBcImVyYVwiKSxcbiAgICAgIHRva2VuVG9TdHJpbmcgPSAodG9rZW4pID0+IHtcbiAgICAgICAgLy8gV2hlcmUgcG9zc2libGU6IGh0dHBzOi8vY2xkci51bmljb2RlLm9yZy90cmFuc2xhdGlvbi9kYXRlLXRpbWUvZGF0ZS10aW1lLXN5bWJvbHNcbiAgICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICAgIC8vIG1zXG4gICAgICAgICAgY2FzZSBcIlNcIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5taWxsaXNlY29uZCk7XG4gICAgICAgICAgY2FzZSBcInVcIjpcbiAgICAgICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICAgICAgY2FzZSBcIlNTU1wiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0Lm1pbGxpc2Vjb25kLCAzKTtcbiAgICAgICAgICAvLyBzZWNvbmRzXG4gICAgICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5zZWNvbmQpO1xuICAgICAgICAgIGNhc2UgXCJzc1wiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LnNlY29uZCwgMik7XG4gICAgICAgICAgLy8gZnJhY3Rpb25hbCBzZWNvbmRzXG4gICAgICAgICAgY2FzZSBcInV1XCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oTWF0aC5mbG9vcihkdC5taWxsaXNlY29uZCAvIDEwKSwgMik7XG4gICAgICAgICAgY2FzZSBcInV1dVwiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKE1hdGguZmxvb3IoZHQubWlsbGlzZWNvbmQgLyAxMDApKTtcbiAgICAgICAgICAvLyBtaW51dGVzXG4gICAgICAgICAgY2FzZSBcIm1cIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5taW51dGUpO1xuICAgICAgICAgIGNhc2UgXCJtbVwiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0Lm1pbnV0ZSwgMik7XG4gICAgICAgICAgLy8gaG91cnNcbiAgICAgICAgICBjYXNlIFwiaFwiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LmhvdXIgJSAxMiA9PT0gMCA/IDEyIDogZHQuaG91ciAlIDEyKTtcbiAgICAgICAgICBjYXNlIFwiaGhcIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5ob3VyICUgMTIgPT09IDAgPyAxMiA6IGR0LmhvdXIgJSAxMiwgMik7XG4gICAgICAgICAgY2FzZSBcIkhcIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5ob3VyKTtcbiAgICAgICAgICBjYXNlIFwiSEhcIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5ob3VyLCAyKTtcbiAgICAgICAgICAvLyBvZmZzZXRcbiAgICAgICAgICBjYXNlIFwiWlwiOlxuICAgICAgICAgICAgLy8gbGlrZSArNlxuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE9mZnNldCh7IGZvcm1hdDogXCJuYXJyb3dcIiwgYWxsb3daOiB0aGlzLm9wdHMuYWxsb3daIH0pO1xuICAgICAgICAgIGNhc2UgXCJaWlwiOlxuICAgICAgICAgICAgLy8gbGlrZSArMDY6MDBcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRPZmZzZXQoeyBmb3JtYXQ6IFwic2hvcnRcIiwgYWxsb3daOiB0aGlzLm9wdHMuYWxsb3daIH0pO1xuICAgICAgICAgIGNhc2UgXCJaWlpcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgKzA2MDBcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRPZmZzZXQoeyBmb3JtYXQ6IFwidGVjaGllXCIsIGFsbG93WjogdGhpcy5vcHRzLmFsbG93WiB9KTtcbiAgICAgICAgICBjYXNlIFwiWlpaWlwiOlxuICAgICAgICAgICAgLy8gbGlrZSBFU1RcbiAgICAgICAgICAgIHJldHVybiBkdC56b25lLm9mZnNldE5hbWUoZHQudHMsIHsgZm9ybWF0OiBcInNob3J0XCIsIGxvY2FsZTogdGhpcy5sb2MubG9jYWxlIH0pO1xuICAgICAgICAgIGNhc2UgXCJaWlpaWlwiOlxuICAgICAgICAgICAgLy8gbGlrZSBFYXN0ZXJuIFN0YW5kYXJkIFRpbWVcbiAgICAgICAgICAgIHJldHVybiBkdC56b25lLm9mZnNldE5hbWUoZHQudHMsIHsgZm9ybWF0OiBcImxvbmdcIiwgbG9jYWxlOiB0aGlzLmxvYy5sb2NhbGUgfSk7XG4gICAgICAgICAgLy8gem9uZVxuICAgICAgICAgIGNhc2UgXCJ6XCI6XG4gICAgICAgICAgICAvLyBsaWtlIEFtZXJpY2EvTmV3X1lvcmtcbiAgICAgICAgICAgIHJldHVybiBkdC56b25lTmFtZTtcbiAgICAgICAgICAvLyBtZXJpZGllbXNcbiAgICAgICAgICBjYXNlIFwiYVwiOlxuICAgICAgICAgICAgcmV0dXJuIG1lcmlkaWVtKCk7XG4gICAgICAgICAgLy8gZGF0ZXNcbiAgICAgICAgICBjYXNlIFwiZFwiOlxuICAgICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyID8gc3RyaW5nKHsgZGF5OiBcIm51bWVyaWNcIiB9LCBcImRheVwiKSA6IHRoaXMubnVtKGR0LmRheSk7XG4gICAgICAgICAgY2FzZSBcImRkXCI6XG4gICAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPyBzdHJpbmcoeyBkYXk6IFwiMi1kaWdpdFwiIH0sIFwiZGF5XCIpIDogdGhpcy5udW0oZHQuZGF5LCAyKTtcbiAgICAgICAgICAvLyB3ZWVrZGF5cyAtIHN0YW5kYWxvbmVcbiAgICAgICAgICBjYXNlIFwiY1wiOlxuICAgICAgICAgICAgLy8gbGlrZSAxXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQud2Vla2RheSk7XG4gICAgICAgICAgY2FzZSBcImNjY1wiOlxuICAgICAgICAgICAgLy8gbGlrZSAnVHVlcydcbiAgICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwic2hvcnRcIiwgdHJ1ZSk7XG4gICAgICAgICAgY2FzZSBcImNjY2NcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgJ1R1ZXNkYXknXG4gICAgICAgICAgICByZXR1cm4gd2Vla2RheShcImxvbmdcIiwgdHJ1ZSk7XG4gICAgICAgICAgY2FzZSBcImNjY2NjXCI6XG4gICAgICAgICAgICAvLyBsaWtlICdUJ1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtkYXkoXCJuYXJyb3dcIiwgdHJ1ZSk7XG4gICAgICAgICAgLy8gd2Vla2RheXMgLSBmb3JtYXRcbiAgICAgICAgICBjYXNlIFwiRVwiOlxuICAgICAgICAgICAgLy8gbGlrZSAxXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQud2Vla2RheSk7XG4gICAgICAgICAgY2FzZSBcIkVFRVwiOlxuICAgICAgICAgICAgLy8gbGlrZSAnVHVlcydcbiAgICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwic2hvcnRcIiwgZmFsc2UpO1xuICAgICAgICAgIGNhc2UgXCJFRUVFXCI6XG4gICAgICAgICAgICAvLyBsaWtlICdUdWVzZGF5J1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtkYXkoXCJsb25nXCIsIGZhbHNlKTtcbiAgICAgICAgICBjYXNlIFwiRUVFRUVcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgJ1QnXG4gICAgICAgICAgICByZXR1cm4gd2Vla2RheShcIm5hcnJvd1wiLCBmYWxzZSk7XG4gICAgICAgICAgLy8gbW9udGhzIC0gc3RhbmRhbG9uZVxuICAgICAgICAgIGNhc2UgXCJMXCI6XG4gICAgICAgICAgICAvLyBsaWtlIDFcbiAgICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlclxuICAgICAgICAgICAgICA/IHN0cmluZyh7IG1vbnRoOiBcIm51bWVyaWNcIiwgZGF5OiBcIm51bWVyaWNcIiB9LCBcIm1vbnRoXCIpXG4gICAgICAgICAgICAgIDogdGhpcy5udW0oZHQubW9udGgpO1xuICAgICAgICAgIGNhc2UgXCJMTFwiOlxuICAgICAgICAgICAgLy8gbGlrZSAwMSwgZG9lc24ndCBzZWVtIHRvIHdvcmtcbiAgICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlclxuICAgICAgICAgICAgICA/IHN0cmluZyh7IG1vbnRoOiBcIjItZGlnaXRcIiwgZGF5OiBcIm51bWVyaWNcIiB9LCBcIm1vbnRoXCIpXG4gICAgICAgICAgICAgIDogdGhpcy5udW0oZHQubW9udGgsIDIpO1xuICAgICAgICAgIGNhc2UgXCJMTExcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgSmFuXG4gICAgICAgICAgICByZXR1cm4gbW9udGgoXCJzaG9ydFwiLCB0cnVlKTtcbiAgICAgICAgICBjYXNlIFwiTExMTFwiOlxuICAgICAgICAgICAgLy8gbGlrZSBKYW51YXJ5XG4gICAgICAgICAgICByZXR1cm4gbW9udGgoXCJsb25nXCIsIHRydWUpO1xuICAgICAgICAgIGNhc2UgXCJMTExMTFwiOlxuICAgICAgICAgICAgLy8gbGlrZSBKXG4gICAgICAgICAgICByZXR1cm4gbW9udGgoXCJuYXJyb3dcIiwgdHJ1ZSk7XG4gICAgICAgICAgLy8gbW9udGhzIC0gZm9ybWF0XG4gICAgICAgICAgY2FzZSBcIk1cIjpcbiAgICAgICAgICAgIC8vIGxpa2UgMVxuICAgICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyXG4gICAgICAgICAgICAgID8gc3RyaW5nKHsgbW9udGg6IFwibnVtZXJpY1wiIH0sIFwibW9udGhcIilcbiAgICAgICAgICAgICAgOiB0aGlzLm51bShkdC5tb250aCk7XG4gICAgICAgICAgY2FzZSBcIk1NXCI6XG4gICAgICAgICAgICAvLyBsaWtlIDAxXG4gICAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXJcbiAgICAgICAgICAgICAgPyBzdHJpbmcoeyBtb250aDogXCIyLWRpZ2l0XCIgfSwgXCJtb250aFwiKVxuICAgICAgICAgICAgICA6IHRoaXMubnVtKGR0Lm1vbnRoLCAyKTtcbiAgICAgICAgICBjYXNlIFwiTU1NXCI6XG4gICAgICAgICAgICAvLyBsaWtlIEphblxuICAgICAgICAgICAgcmV0dXJuIG1vbnRoKFwic2hvcnRcIiwgZmFsc2UpO1xuICAgICAgICAgIGNhc2UgXCJNTU1NXCI6XG4gICAgICAgICAgICAvLyBsaWtlIEphbnVhcnlcbiAgICAgICAgICAgIHJldHVybiBtb250aChcImxvbmdcIiwgZmFsc2UpO1xuICAgICAgICAgIGNhc2UgXCJNTU1NTVwiOlxuICAgICAgICAgICAgLy8gbGlrZSBKXG4gICAgICAgICAgICByZXR1cm4gbW9udGgoXCJuYXJyb3dcIiwgZmFsc2UpO1xuICAgICAgICAgIC8vIHllYXJzXG4gICAgICAgICAgY2FzZSBcInlcIjpcbiAgICAgICAgICAgIC8vIGxpa2UgMjAxNFxuICAgICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyID8gc3RyaW5nKHsgeWVhcjogXCJudW1lcmljXCIgfSwgXCJ5ZWFyXCIpIDogdGhpcy5udW0oZHQueWVhcik7XG4gICAgICAgICAgY2FzZSBcInl5XCI6XG4gICAgICAgICAgICAvLyBsaWtlIDE0XG4gICAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXJcbiAgICAgICAgICAgICAgPyBzdHJpbmcoeyB5ZWFyOiBcIjItZGlnaXRcIiB9LCBcInllYXJcIilcbiAgICAgICAgICAgICAgOiB0aGlzLm51bShkdC55ZWFyLnRvU3RyaW5nKCkuc2xpY2UoLTIpLCAyKTtcbiAgICAgICAgICBjYXNlIFwieXl5eVwiOlxuICAgICAgICAgICAgLy8gbGlrZSAwMDEyXG4gICAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXJcbiAgICAgICAgICAgICAgPyBzdHJpbmcoeyB5ZWFyOiBcIm51bWVyaWNcIiB9LCBcInllYXJcIilcbiAgICAgICAgICAgICAgOiB0aGlzLm51bShkdC55ZWFyLCA0KTtcbiAgICAgICAgICBjYXNlIFwieXl5eXl5XCI6XG4gICAgICAgICAgICAvLyBsaWtlIDAwMDAxMlxuICAgICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyXG4gICAgICAgICAgICAgID8gc3RyaW5nKHsgeWVhcjogXCJudW1lcmljXCIgfSwgXCJ5ZWFyXCIpXG4gICAgICAgICAgICAgIDogdGhpcy5udW0oZHQueWVhciwgNik7XG4gICAgICAgICAgLy8gZXJhc1xuICAgICAgICAgIGNhc2UgXCJHXCI6XG4gICAgICAgICAgICAvLyBsaWtlIEFEXG4gICAgICAgICAgICByZXR1cm4gZXJhKFwic2hvcnRcIik7XG4gICAgICAgICAgY2FzZSBcIkdHXCI6XG4gICAgICAgICAgICAvLyBsaWtlIEFubm8gRG9taW5pXG4gICAgICAgICAgICByZXR1cm4gZXJhKFwibG9uZ1wiKTtcbiAgICAgICAgICBjYXNlIFwiR0dHR0dcIjpcbiAgICAgICAgICAgIHJldHVybiBlcmEoXCJuYXJyb3dcIik7XG4gICAgICAgICAgY2FzZSBcImtrXCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQud2Vla1llYXIudG9TdHJpbmcoKS5zbGljZSgtMiksIDIpO1xuICAgICAgICAgIGNhc2UgXCJra2trXCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQud2Vla1llYXIsIDQpO1xuICAgICAgICAgIGNhc2UgXCJXXCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQud2Vla051bWJlcik7XG4gICAgICAgICAgY2FzZSBcIldXXCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQud2Vla051bWJlciwgMik7XG4gICAgICAgICAgY2FzZSBcIm5cIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5sb2NhbFdlZWtOdW1iZXIpO1xuICAgICAgICAgIGNhc2UgXCJublwiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LmxvY2FsV2Vla051bWJlciwgMik7XG4gICAgICAgICAgY2FzZSBcImlpXCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQubG9jYWxXZWVrWWVhci50b1N0cmluZygpLnNsaWNlKC0yKSwgMik7XG4gICAgICAgICAgY2FzZSBcImlpaWlcIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5sb2NhbFdlZWtZZWFyLCA0KTtcbiAgICAgICAgICBjYXNlIFwib1wiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0Lm9yZGluYWwpO1xuICAgICAgICAgIGNhc2UgXCJvb29cIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5vcmRpbmFsLCAzKTtcbiAgICAgICAgICBjYXNlIFwicVwiOlxuICAgICAgICAgICAgLy8gbGlrZSAxXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQucXVhcnRlcik7XG4gICAgICAgICAgY2FzZSBcInFxXCI6XG4gICAgICAgICAgICAvLyBsaWtlIDAxXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQucXVhcnRlciwgMik7XG4gICAgICAgICAgY2FzZSBcIlhcIjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShNYXRoLmZsb29yKGR0LnRzIC8gMTAwMCkpO1xuICAgICAgICAgIGNhc2UgXCJ4XCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQudHMpO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbWF5YmVNYWNybyh0b2tlbik7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICByZXR1cm4gc3RyaW5naWZ5VG9rZW5zKEZvcm1hdHRlci5wYXJzZUZvcm1hdChmbXQpLCB0b2tlblRvU3RyaW5nKTtcbiAgfVxuXG4gIGZvcm1hdER1cmF0aW9uRnJvbVN0cmluZyhkdXIsIGZtdCkge1xuICAgIGNvbnN0IHRva2VuVG9GaWVsZCA9ICh0b2tlbikgPT4ge1xuICAgICAgICBzd2l0Y2ggKHRva2VuWzBdKSB7XG4gICAgICAgICAgY2FzZSBcIlNcIjpcbiAgICAgICAgICAgIHJldHVybiBcIm1pbGxpc2Vjb25kXCI7XG4gICAgICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgICAgIHJldHVybiBcInNlY29uZFwiO1xuICAgICAgICAgIGNhc2UgXCJtXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJtaW51dGVcIjtcbiAgICAgICAgICBjYXNlIFwiaFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiaG91clwiO1xuICAgICAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJkYXlcIjtcbiAgICAgICAgICBjYXNlIFwid1wiOlxuICAgICAgICAgICAgcmV0dXJuIFwid2Vla1wiO1xuICAgICAgICAgIGNhc2UgXCJNXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJtb250aFwiO1xuICAgICAgICAgIGNhc2UgXCJ5XCI6XG4gICAgICAgICAgICByZXR1cm4gXCJ5ZWFyXCI7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG9rZW5Ub1N0cmluZyA9IChsaWxkdXIpID0+ICh0b2tlbikgPT4ge1xuICAgICAgICBjb25zdCBtYXBwZWQgPSB0b2tlblRvRmllbGQodG9rZW4pO1xuICAgICAgICBpZiAobWFwcGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGxpbGR1ci5nZXQobWFwcGVkKSwgdG9rZW4ubGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0b2tlbnMgPSBGb3JtYXR0ZXIucGFyc2VGb3JtYXQoZm10KSxcbiAgICAgIHJlYWxUb2tlbnMgPSB0b2tlbnMucmVkdWNlKFxuICAgICAgICAoZm91bmQsIHsgbGl0ZXJhbCwgdmFsIH0pID0+IChsaXRlcmFsID8gZm91bmQgOiBmb3VuZC5jb25jYXQodmFsKSksXG4gICAgICAgIFtdXG4gICAgICApLFxuICAgICAgY29sbGFwc2VkID0gZHVyLnNoaWZ0VG8oLi4ucmVhbFRva2Vucy5tYXAodG9rZW5Ub0ZpZWxkKS5maWx0ZXIoKHQpID0+IHQpKTtcbiAgICByZXR1cm4gc3RyaW5naWZ5VG9rZW5zKHRva2VucywgdG9rZW5Ub1N0cmluZyhjb2xsYXBzZWQpKTtcbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIHVudHJ1bmNhdGVZZWFyLFxuICBzaWduZWRPZmZzZXQsXG4gIHBhcnNlSW50ZWdlcixcbiAgcGFyc2VNaWxsaXMsXG4gIGlzVW5kZWZpbmVkLFxuICBwYXJzZUZsb2F0aW5nLFxufSBmcm9tIFwiLi91dGlsLmpzXCI7XG5pbXBvcnQgKiBhcyBFbmdsaXNoIGZyb20gXCIuL2VuZ2xpc2guanNcIjtcbmltcG9ydCBGaXhlZE9mZnNldFpvbmUgZnJvbSBcIi4uL3pvbmVzL2ZpeGVkT2Zmc2V0Wm9uZS5qc1wiO1xuaW1wb3J0IElBTkFab25lIGZyb20gXCIuLi96b25lcy9JQU5BWm9uZS5qc1wiO1xuXG4vKlxuICogVGhpcyBmaWxlIGhhbmRsZXMgcGFyc2luZyBmb3Igd2VsbC1zcGVjaWZpZWQgZm9ybWF0cy4gSGVyZSdzIGhvdyBpdCB3b3JrczpcbiAqIFR3byB0aGluZ3MgZ28gaW50byBwYXJzaW5nOiBhIHJlZ2V4IHRvIG1hdGNoIHdpdGggYW5kIGFuIGV4dHJhY3RvciB0byB0YWtlIGFwYXJ0IHRoZSBncm91cHMgaW4gdGhlIG1hdGNoLlxuICogQW4gZXh0cmFjdG9yIGlzIGp1c3QgYSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgcmVnZXggbWF0Y2ggYXJyYXkgYW5kIHJldHVybnMgYSB7IHllYXI6IC4uLiwgbW9udGg6IC4uLiB9IG9iamVjdFxuICogcGFyc2UoKSBkb2VzIHRoZSB3b3JrIG9mIGV4ZWN1dGluZyB0aGUgcmVnZXggYW5kIGFwcGx5aW5nIHRoZSBleHRyYWN0b3IuIEl0IHRha2VzIG11bHRpcGxlIHJlZ2V4L2V4dHJhY3RvciBwYWlycyB0byB0cnkgaW4gc2VxdWVuY2UuXG4gKiBFeHRyYWN0b3JzIGNhbiB0YWtlIGEgXCJjdXJzb3JcIiByZXByZXNlbnRpbmcgdGhlIG9mZnNldCBpbiB0aGUgbWF0Y2ggdG8gbG9vayBhdC4gVGhpcyBtYWtlcyBpdCBlYXN5IHRvIGNvbWJpbmUgZXh0cmFjdG9ycy5cbiAqIGNvbWJpbmVFeHRyYWN0b3JzKCkgZG9lcyB0aGUgd29yayBvZiBjb21iaW5pbmcgdGhlbSwga2VlcGluZyB0cmFjayBvZiB0aGUgY3Vyc29yIHRocm91Z2ggbXVsdGlwbGUgZXh0cmFjdGlvbnMuXG4gKiBTb21lIGV4dHJhY3Rpb25zIGFyZSBzdXBlciBkdW1iIGFuZCBzaW1wbGVQYXJzZSBhbmQgZnJvbVN0cmluZ3MgaGVscCBEUlkgdGhlbS5cbiAqL1xuXG5jb25zdCBpYW5hUmVnZXggPSAvW0EtWmEtel8rLV17MSwyNTZ9KD86Oj9cXC9bQS1aYS16MC05XystXXsxLDI1Nn0oPzpcXC9bQS1aYS16MC05XystXXsxLDI1Nn0pPyk/LztcblxuZnVuY3Rpb24gY29tYmluZVJlZ2V4ZXMoLi4ucmVnZXhlcykge1xuICBjb25zdCBmdWxsID0gcmVnZXhlcy5yZWR1Y2UoKGYsIHIpID0+IGYgKyByLnNvdXJjZSwgXCJcIik7XG4gIHJldHVybiBSZWdFeHAoYF4ke2Z1bGx9JGApO1xufVxuXG5mdW5jdGlvbiBjb21iaW5lRXh0cmFjdG9ycyguLi5leHRyYWN0b3JzKSB7XG4gIHJldHVybiAobSkgPT5cbiAgICBleHRyYWN0b3JzXG4gICAgICAucmVkdWNlKFxuICAgICAgICAoW21lcmdlZFZhbHMsIG1lcmdlZFpvbmUsIGN1cnNvcl0sIGV4KSA9PiB7XG4gICAgICAgICAgY29uc3QgW3ZhbCwgem9uZSwgbmV4dF0gPSBleChtLCBjdXJzb3IpO1xuICAgICAgICAgIHJldHVybiBbeyAuLi5tZXJnZWRWYWxzLCAuLi52YWwgfSwgem9uZSB8fCBtZXJnZWRab25lLCBuZXh0XTtcbiAgICAgICAgfSxcbiAgICAgICAgW3t9LCBudWxsLCAxXVxuICAgICAgKVxuICAgICAgLnNsaWNlKDAsIDIpO1xufVxuXG5mdW5jdGlvbiBwYXJzZShzLCAuLi5wYXR0ZXJucykge1xuICBpZiAocyA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtudWxsLCBudWxsXTtcbiAgfVxuXG4gIGZvciAoY29uc3QgW3JlZ2V4LCBleHRyYWN0b3JdIG9mIHBhdHRlcm5zKSB7XG4gICAgY29uc3QgbSA9IHJlZ2V4LmV4ZWMocyk7XG4gICAgaWYgKG0pIHtcbiAgICAgIHJldHVybiBleHRyYWN0b3IobSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBbbnVsbCwgbnVsbF07XG59XG5cbmZ1bmN0aW9uIHNpbXBsZVBhcnNlKC4uLmtleXMpIHtcbiAgcmV0dXJuIChtYXRjaCwgY3Vyc29yKSA9PiB7XG4gICAgY29uc3QgcmV0ID0ge307XG4gICAgbGV0IGk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgcmV0W2tleXNbaV1dID0gcGFyc2VJbnRlZ2VyKG1hdGNoW2N1cnNvciArIGldKTtcbiAgICB9XG4gICAgcmV0dXJuIFtyZXQsIG51bGwsIGN1cnNvciArIGldO1xuICB9O1xufVxuXG4vLyBJU08gYW5kIFNRTCBwYXJzaW5nXG5jb25zdCBvZmZzZXRSZWdleCA9IC8oPzooWil8KFsrLV1cXGRcXGQpKD86Oj8oXFxkXFxkKSk/KS87XG5jb25zdCBpc29FeHRlbmRlZFpvbmUgPSBgKD86JHtvZmZzZXRSZWdleC5zb3VyY2V9Pyg/OlxcXFxbKCR7aWFuYVJlZ2V4LnNvdXJjZX0pXFxcXF0pPyk/YDtcbmNvbnN0IGlzb1RpbWVCYXNlUmVnZXggPSAvKFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86Oj8oXFxkXFxkKSg/OlsuLF0oXFxkezEsMzB9KSk/KT8pPy87XG5jb25zdCBpc29UaW1lUmVnZXggPSBSZWdFeHAoYCR7aXNvVGltZUJhc2VSZWdleC5zb3VyY2V9JHtpc29FeHRlbmRlZFpvbmV9YCk7XG5jb25zdCBpc29UaW1lRXh0ZW5zaW9uUmVnZXggPSBSZWdFeHAoYCg/OlQke2lzb1RpbWVSZWdleC5zb3VyY2V9KT9gKTtcbmNvbnN0IGlzb1ltZFJlZ2V4ID0gLyhbKy1dXFxkezZ9fFxcZHs0fSkoPzotPyhcXGRcXGQpKD86LT8oXFxkXFxkKSk/KT8vO1xuY29uc3QgaXNvV2Vla1JlZ2V4ID0gLyhcXGR7NH0pLT9XKFxcZFxcZCkoPzotPyhcXGQpKT8vO1xuY29uc3QgaXNvT3JkaW5hbFJlZ2V4ID0gLyhcXGR7NH0pLT8oXFxkezN9KS87XG5jb25zdCBleHRyYWN0SVNPV2Vla0RhdGEgPSBzaW1wbGVQYXJzZShcIndlZWtZZWFyXCIsIFwid2Vla051bWJlclwiLCBcIndlZWtEYXlcIik7XG5jb25zdCBleHRyYWN0SVNPT3JkaW5hbERhdGEgPSBzaW1wbGVQYXJzZShcInllYXJcIiwgXCJvcmRpbmFsXCIpO1xuY29uc3Qgc3FsWW1kUmVnZXggPSAvKFxcZHs0fSktKFxcZFxcZCktKFxcZFxcZCkvOyAvLyBkdW1iZWQtZG93biB2ZXJzaW9uIG9mIHRoZSBJU08gb25lXG5jb25zdCBzcWxUaW1lUmVnZXggPSBSZWdFeHAoXG4gIGAke2lzb1RpbWVCYXNlUmVnZXguc291cmNlfSA/KD86JHtvZmZzZXRSZWdleC5zb3VyY2V9fCgke2lhbmFSZWdleC5zb3VyY2V9KSk/YFxuKTtcbmNvbnN0IHNxbFRpbWVFeHRlbnNpb25SZWdleCA9IFJlZ0V4cChgKD86ICR7c3FsVGltZVJlZ2V4LnNvdXJjZX0pP2ApO1xuXG5mdW5jdGlvbiBpbnQobWF0Y2gsIHBvcywgZmFsbGJhY2spIHtcbiAgY29uc3QgbSA9IG1hdGNoW3Bvc107XG4gIHJldHVybiBpc1VuZGVmaW5lZChtKSA/IGZhbGxiYWNrIDogcGFyc2VJbnRlZ2VyKG0pO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0SVNPWW1kKG1hdGNoLCBjdXJzb3IpIHtcbiAgY29uc3QgaXRlbSA9IHtcbiAgICB5ZWFyOiBpbnQobWF0Y2gsIGN1cnNvciksXG4gICAgbW9udGg6IGludChtYXRjaCwgY3Vyc29yICsgMSwgMSksXG4gICAgZGF5OiBpbnQobWF0Y2gsIGN1cnNvciArIDIsIDEpLFxuICB9O1xuXG4gIHJldHVybiBbaXRlbSwgbnVsbCwgY3Vyc29yICsgM107XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RJU09UaW1lKG1hdGNoLCBjdXJzb3IpIHtcbiAgY29uc3QgaXRlbSA9IHtcbiAgICBob3VyczogaW50KG1hdGNoLCBjdXJzb3IsIDApLFxuICAgIG1pbnV0ZXM6IGludChtYXRjaCwgY3Vyc29yICsgMSwgMCksXG4gICAgc2Vjb25kczogaW50KG1hdGNoLCBjdXJzb3IgKyAyLCAwKSxcbiAgICBtaWxsaXNlY29uZHM6IHBhcnNlTWlsbGlzKG1hdGNoW2N1cnNvciArIDNdKSxcbiAgfTtcblxuICByZXR1cm4gW2l0ZW0sIG51bGwsIGN1cnNvciArIDRdO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0SVNPT2Zmc2V0KG1hdGNoLCBjdXJzb3IpIHtcbiAgY29uc3QgbG9jYWwgPSAhbWF0Y2hbY3Vyc29yXSAmJiAhbWF0Y2hbY3Vyc29yICsgMV0sXG4gICAgZnVsbE9mZnNldCA9IHNpZ25lZE9mZnNldChtYXRjaFtjdXJzb3IgKyAxXSwgbWF0Y2hbY3Vyc29yICsgMl0pLFxuICAgIHpvbmUgPSBsb2NhbCA/IG51bGwgOiBGaXhlZE9mZnNldFpvbmUuaW5zdGFuY2UoZnVsbE9mZnNldCk7XG4gIHJldHVybiBbe30sIHpvbmUsIGN1cnNvciArIDNdO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0SUFOQVpvbmUobWF0Y2gsIGN1cnNvcikge1xuICBjb25zdCB6b25lID0gbWF0Y2hbY3Vyc29yXSA/IElBTkFab25lLmNyZWF0ZShtYXRjaFtjdXJzb3JdKSA6IG51bGw7XG4gIHJldHVybiBbe30sIHpvbmUsIGN1cnNvciArIDFdO1xufVxuXG4vLyBJU08gdGltZSBwYXJzaW5nXG5cbmNvbnN0IGlzb1RpbWVPbmx5ID0gUmVnRXhwKGBeVD8ke2lzb1RpbWVCYXNlUmVnZXguc291cmNlfSRgKTtcblxuLy8gSVNPIGR1cmF0aW9uIHBhcnNpbmdcblxuY29uc3QgaXNvRHVyYXRpb24gPVxuICAvXi0/UCg/Oig/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KVkpPyg/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KU0pPyg/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KVcpPyg/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KUQpPyg/OlQoPzooLT9cXGR7MSwyMH0oPzpcXC5cXGR7MSwyMH0pPylIKT8oPzooLT9cXGR7MSwyMH0oPzpcXC5cXGR7MSwyMH0pPylNKT8oPzooLT9cXGR7MSwyMH0pKD86Wy4sXSgtP1xcZHsxLDIwfSkpP1MpPyk/KSQvO1xuXG5mdW5jdGlvbiBleHRyYWN0SVNPRHVyYXRpb24obWF0Y2gpIHtcbiAgY29uc3QgW3MsIHllYXJTdHIsIG1vbnRoU3RyLCB3ZWVrU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyLCBtaWxsaXNlY29uZHNTdHJdID1cbiAgICBtYXRjaDtcblxuICBjb25zdCBoYXNOZWdhdGl2ZVByZWZpeCA9IHNbMF0gPT09IFwiLVwiO1xuICBjb25zdCBuZWdhdGl2ZVNlY29uZHMgPSBzZWNvbmRTdHIgJiYgc2Vjb25kU3RyWzBdID09PSBcIi1cIjtcblxuICBjb25zdCBtYXliZU5lZ2F0ZSA9IChudW0sIGZvcmNlID0gZmFsc2UpID0+XG4gICAgbnVtICE9PSB1bmRlZmluZWQgJiYgKGZvcmNlIHx8IChudW0gJiYgaGFzTmVnYXRpdmVQcmVmaXgpKSA/IC1udW0gOiBudW07XG5cbiAgcmV0dXJuIFtcbiAgICB7XG4gICAgICB5ZWFyczogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyh5ZWFyU3RyKSksXG4gICAgICBtb250aHM6IG1heWJlTmVnYXRlKHBhcnNlRmxvYXRpbmcobW9udGhTdHIpKSxcbiAgICAgIHdlZWtzOiBtYXliZU5lZ2F0ZShwYXJzZUZsb2F0aW5nKHdlZWtTdHIpKSxcbiAgICAgIGRheXM6IG1heWJlTmVnYXRlKHBhcnNlRmxvYXRpbmcoZGF5U3RyKSksXG4gICAgICBob3VyczogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyhob3VyU3RyKSksXG4gICAgICBtaW51dGVzOiBtYXliZU5lZ2F0ZShwYXJzZUZsb2F0aW5nKG1pbnV0ZVN0cikpLFxuICAgICAgc2Vjb25kczogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyhzZWNvbmRTdHIpLCBzZWNvbmRTdHIgPT09IFwiLTBcIiksXG4gICAgICBtaWxsaXNlY29uZHM6IG1heWJlTmVnYXRlKHBhcnNlTWlsbGlzKG1pbGxpc2Vjb25kc1N0ciksIG5lZ2F0aXZlU2Vjb25kcyksXG4gICAgfSxcbiAgXTtcbn1cblxuLy8gVGhlc2UgYXJlIGEgbGl0dGxlIGJyYWluZGVhZC4gRURUICpzaG91bGQqIHRlbGwgdXMgdGhhdCB3ZSdyZSBpbiwgc2F5LCBBbWVyaWNhL05ld19Zb3JrXG4vLyBhbmQgbm90IGp1c3QgdGhhdCB3ZSdyZSBpbiAtMjQwICpyaWdodCBub3cqLiBCdXQgc2luY2UgSSBkb24ndCB0aGluayB0aGVzZSBhcmUgdXNlZCB0aGF0IG9mdGVuXG4vLyBJJ20ganVzdCBnb2luZyB0byBpZ25vcmUgdGhhdFxuY29uc3Qgb2JzT2Zmc2V0cyA9IHtcbiAgR01UOiAwLFxuICBFRFQ6IC00ICogNjAsXG4gIEVTVDogLTUgKiA2MCxcbiAgQ0RUOiAtNSAqIDYwLFxuICBDU1Q6IC02ICogNjAsXG4gIE1EVDogLTYgKiA2MCxcbiAgTVNUOiAtNyAqIDYwLFxuICBQRFQ6IC03ICogNjAsXG4gIFBTVDogLTggKiA2MCxcbn07XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmdzKHdlZWtkYXlTdHIsIHllYXJTdHIsIG1vbnRoU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyKSB7XG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICB5ZWFyOiB5ZWFyU3RyLmxlbmd0aCA9PT0gMiA/IHVudHJ1bmNhdGVZZWFyKHBhcnNlSW50ZWdlcih5ZWFyU3RyKSkgOiBwYXJzZUludGVnZXIoeWVhclN0ciksXG4gICAgbW9udGg6IEVuZ2xpc2gubW9udGhzU2hvcnQuaW5kZXhPZihtb250aFN0cikgKyAxLFxuICAgIGRheTogcGFyc2VJbnRlZ2VyKGRheVN0ciksXG4gICAgaG91cjogcGFyc2VJbnRlZ2VyKGhvdXJTdHIpLFxuICAgIG1pbnV0ZTogcGFyc2VJbnRlZ2VyKG1pbnV0ZVN0ciksXG4gIH07XG5cbiAgaWYgKHNlY29uZFN0cikgcmVzdWx0LnNlY29uZCA9IHBhcnNlSW50ZWdlcihzZWNvbmRTdHIpO1xuICBpZiAod2Vla2RheVN0cikge1xuICAgIHJlc3VsdC53ZWVrZGF5ID1cbiAgICAgIHdlZWtkYXlTdHIubGVuZ3RoID4gM1xuICAgICAgICA/IEVuZ2xpc2gud2Vla2RheXNMb25nLmluZGV4T2Yod2Vla2RheVN0cikgKyAxXG4gICAgICAgIDogRW5nbGlzaC53ZWVrZGF5c1Nob3J0LmluZGV4T2Yod2Vla2RheVN0cikgKyAxO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gUkZDIDI4MjIvNTMyMlxuY29uc3QgcmZjMjgyMiA9XG4gIC9eKD86KE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksXFxzKT8oXFxkezEsMn0pXFxzKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKVxccyhcXGR7Miw0fSlcXHMoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKSk/XFxzKD86KFVUfEdNVHxbRUNNUF1bU0RdVCl8KFtael0pfCg/OihbKy1dXFxkXFxkKShcXGRcXGQpKSkkLztcblxuZnVuY3Rpb24gZXh0cmFjdFJGQzI4MjIobWF0Y2gpIHtcbiAgY29uc3QgW1xuICAgICAgLFxuICAgICAgd2Vla2RheVN0cixcbiAgICAgIGRheVN0cixcbiAgICAgIG1vbnRoU3RyLFxuICAgICAgeWVhclN0cixcbiAgICAgIGhvdXJTdHIsXG4gICAgICBtaW51dGVTdHIsXG4gICAgICBzZWNvbmRTdHIsXG4gICAgICBvYnNPZmZzZXQsXG4gICAgICBtaWxPZmZzZXQsXG4gICAgICBvZmZIb3VyU3RyLFxuICAgICAgb2ZmTWludXRlU3RyLFxuICAgIF0gPSBtYXRjaCxcbiAgICByZXN1bHQgPSBmcm9tU3RyaW5ncyh3ZWVrZGF5U3RyLCB5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cik7XG5cbiAgbGV0IG9mZnNldDtcbiAgaWYgKG9ic09mZnNldCkge1xuICAgIG9mZnNldCA9IG9ic09mZnNldHNbb2JzT2Zmc2V0XTtcbiAgfSBlbHNlIGlmIChtaWxPZmZzZXQpIHtcbiAgICBvZmZzZXQgPSAwO1xuICB9IGVsc2Uge1xuICAgIG9mZnNldCA9IHNpZ25lZE9mZnNldChvZmZIb3VyU3RyLCBvZmZNaW51dGVTdHIpO1xuICB9XG5cbiAgcmV0dXJuIFtyZXN1bHQsIG5ldyBGaXhlZE9mZnNldFpvbmUob2Zmc2V0KV07XG59XG5cbmZ1bmN0aW9uIHByZXByb2Nlc3NSRkMyODIyKHMpIHtcbiAgLy8gUmVtb3ZlIGNvbW1lbnRzIGFuZCBmb2xkaW5nIHdoaXRlc3BhY2UgYW5kIHJlcGxhY2UgbXVsdGlwbGUtc3BhY2VzIHdpdGggYSBzaW5nbGUgc3BhY2VcbiAgcmV0dXJuIHNcbiAgICAucmVwbGFjZSgvXFwoW14oKV0qXFwpfFtcXG5cXHRdL2csIFwiIFwiKVxuICAgIC5yZXBsYWNlKC8oXFxzXFxzKykvZywgXCIgXCIpXG4gICAgLnRyaW0oKTtcbn1cblxuLy8gaHR0cCBkYXRlXG5cbmNvbnN0IHJmYzExMjMgPVxuICAgIC9eKE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksIChcXGRcXGQpIChKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYykgKFxcZHs0fSkgKFxcZFxcZCk6KFxcZFxcZCk6KFxcZFxcZCkgR01UJC8sXG4gIHJmYzg1MCA9XG4gICAgL14oTW9uZGF5fFR1ZXNkYXl8V2VkbmVzZGF5fFRodXJzZGF5fEZyaWRheXxTYXR1cmRheXxTdW5kYXkpLCAoXFxkXFxkKS0oSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpLShcXGRcXGQpIChcXGRcXGQpOihcXGRcXGQpOihcXGRcXGQpIEdNVCQvLFxuICBhc2NpaSA9XG4gICAgL14oTW9ufFR1ZXxXZWR8VGh1fEZyaXxTYXR8U3VuKSAoSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpICggXFxkfFxcZFxcZCkgKFxcZFxcZCk6KFxcZFxcZCk6KFxcZFxcZCkgKFxcZHs0fSkkLztcblxuZnVuY3Rpb24gZXh0cmFjdFJGQzExMjNPcjg1MChtYXRjaCkge1xuICBjb25zdCBbLCB3ZWVrZGF5U3RyLCBkYXlTdHIsIG1vbnRoU3RyLCB5ZWFyU3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cl0gPSBtYXRjaCxcbiAgICByZXN1bHQgPSBmcm9tU3RyaW5ncyh3ZWVrZGF5U3RyLCB5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cik7XG4gIHJldHVybiBbcmVzdWx0LCBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2VdO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0QVNDSUkobWF0Y2gpIHtcbiAgY29uc3QgWywgd2Vla2RheVN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIsIHllYXJTdHJdID0gbWF0Y2gsXG4gICAgcmVzdWx0ID0gZnJvbVN0cmluZ3Mod2Vla2RheVN0ciwgeWVhclN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIpO1xuICByZXR1cm4gW3Jlc3VsdCwgRml4ZWRPZmZzZXRab25lLnV0Y0luc3RhbmNlXTtcbn1cblxuY29uc3QgaXNvWW1kV2l0aFRpbWVFeHRlbnNpb25SZWdleCA9IGNvbWJpbmVSZWdleGVzKGlzb1ltZFJlZ2V4LCBpc29UaW1lRXh0ZW5zaW9uUmVnZXgpO1xuY29uc3QgaXNvV2Vla1dpdGhUaW1lRXh0ZW5zaW9uUmVnZXggPSBjb21iaW5lUmVnZXhlcyhpc29XZWVrUmVnZXgsIGlzb1RpbWVFeHRlbnNpb25SZWdleCk7XG5jb25zdCBpc29PcmRpbmFsV2l0aFRpbWVFeHRlbnNpb25SZWdleCA9IGNvbWJpbmVSZWdleGVzKGlzb09yZGluYWxSZWdleCwgaXNvVGltZUV4dGVuc2lvblJlZ2V4KTtcbmNvbnN0IGlzb1RpbWVDb21iaW5lZFJlZ2V4ID0gY29tYmluZVJlZ2V4ZXMoaXNvVGltZVJlZ2V4KTtcblxuY29uc3QgZXh0cmFjdElTT1ltZFRpbWVBbmRPZmZzZXQgPSBjb21iaW5lRXh0cmFjdG9ycyhcbiAgZXh0cmFjdElTT1ltZCxcbiAgZXh0cmFjdElTT1RpbWUsXG4gIGV4dHJhY3RJU09PZmZzZXQsXG4gIGV4dHJhY3RJQU5BWm9uZVxuKTtcbmNvbnN0IGV4dHJhY3RJU09XZWVrVGltZUFuZE9mZnNldCA9IGNvbWJpbmVFeHRyYWN0b3JzKFxuICBleHRyYWN0SVNPV2Vla0RhdGEsXG4gIGV4dHJhY3RJU09UaW1lLFxuICBleHRyYWN0SVNPT2Zmc2V0LFxuICBleHRyYWN0SUFOQVpvbmVcbik7XG5jb25zdCBleHRyYWN0SVNPT3JkaW5hbERhdGVBbmRUaW1lID0gY29tYmluZUV4dHJhY3RvcnMoXG4gIGV4dHJhY3RJU09PcmRpbmFsRGF0YSxcbiAgZXh0cmFjdElTT1RpbWUsXG4gIGV4dHJhY3RJU09PZmZzZXQsXG4gIGV4dHJhY3RJQU5BWm9uZVxuKTtcbmNvbnN0IGV4dHJhY3RJU09UaW1lQW5kT2Zmc2V0ID0gY29tYmluZUV4dHJhY3RvcnMoXG4gIGV4dHJhY3RJU09UaW1lLFxuICBleHRyYWN0SVNPT2Zmc2V0LFxuICBleHRyYWN0SUFOQVpvbmVcbik7XG5cbi8qXG4gKiBAcHJpdmF0ZVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUlTT0RhdGUocykge1xuICByZXR1cm4gcGFyc2UoXG4gICAgcyxcbiAgICBbaXNvWW1kV2l0aFRpbWVFeHRlbnNpb25SZWdleCwgZXh0cmFjdElTT1ltZFRpbWVBbmRPZmZzZXRdLFxuICAgIFtpc29XZWVrV2l0aFRpbWVFeHRlbnNpb25SZWdleCwgZXh0cmFjdElTT1dlZWtUaW1lQW5kT2Zmc2V0XSxcbiAgICBbaXNvT3JkaW5hbFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXgsIGV4dHJhY3RJU09PcmRpbmFsRGF0ZUFuZFRpbWVdLFxuICAgIFtpc29UaW1lQ29tYmluZWRSZWdleCwgZXh0cmFjdElTT1RpbWVBbmRPZmZzZXRdXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVJGQzI4MjJEYXRlKHMpIHtcbiAgcmV0dXJuIHBhcnNlKHByZXByb2Nlc3NSRkMyODIyKHMpLCBbcmZjMjgyMiwgZXh0cmFjdFJGQzI4MjJdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSFRUUERhdGUocykge1xuICByZXR1cm4gcGFyc2UoXG4gICAgcyxcbiAgICBbcmZjMTEyMywgZXh0cmFjdFJGQzExMjNPcjg1MF0sXG4gICAgW3JmYzg1MCwgZXh0cmFjdFJGQzExMjNPcjg1MF0sXG4gICAgW2FzY2lpLCBleHRyYWN0QVNDSUldXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUlTT0R1cmF0aW9uKHMpIHtcbiAgcmV0dXJuIHBhcnNlKHMsIFtpc29EdXJhdGlvbiwgZXh0cmFjdElTT0R1cmF0aW9uXSk7XG59XG5cbmNvbnN0IGV4dHJhY3RJU09UaW1lT25seSA9IGNvbWJpbmVFeHRyYWN0b3JzKGV4dHJhY3RJU09UaW1lKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSVNPVGltZU9ubHkocykge1xuICByZXR1cm4gcGFyc2UocywgW2lzb1RpbWVPbmx5LCBleHRyYWN0SVNPVGltZU9ubHldKTtcbn1cblxuY29uc3Qgc3FsWW1kV2l0aFRpbWVFeHRlbnNpb25SZWdleCA9IGNvbWJpbmVSZWdleGVzKHNxbFltZFJlZ2V4LCBzcWxUaW1lRXh0ZW5zaW9uUmVnZXgpO1xuY29uc3Qgc3FsVGltZUNvbWJpbmVkUmVnZXggPSBjb21iaW5lUmVnZXhlcyhzcWxUaW1lUmVnZXgpO1xuXG5jb25zdCBleHRyYWN0SVNPVGltZU9mZnNldEFuZElBTkFab25lID0gY29tYmluZUV4dHJhY3RvcnMoXG4gIGV4dHJhY3RJU09UaW1lLFxuICBleHRyYWN0SVNPT2Zmc2V0LFxuICBleHRyYWN0SUFOQVpvbmVcbik7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVNRTChzKSB7XG4gIHJldHVybiBwYXJzZShcbiAgICBzLFxuICAgIFtzcWxZbWRXaXRoVGltZUV4dGVuc2lvblJlZ2V4LCBleHRyYWN0SVNPWW1kVGltZUFuZE9mZnNldF0sXG4gICAgW3NxbFRpbWVDb21iaW5lZFJlZ2V4LCBleHRyYWN0SVNPVGltZU9mZnNldEFuZElBTkFab25lXVxuICApO1xufVxuIiwgImltcG9ydCB7IEludmFsaWRBcmd1bWVudEVycm9yLCBJbnZhbGlkRHVyYXRpb25FcnJvciwgSW52YWxpZFVuaXRFcnJvciB9IGZyb20gXCIuL2Vycm9ycy5qc1wiO1xuaW1wb3J0IEZvcm1hdHRlciBmcm9tIFwiLi9pbXBsL2Zvcm1hdHRlci5qc1wiO1xuaW1wb3J0IEludmFsaWQgZnJvbSBcIi4vaW1wbC9pbnZhbGlkLmpzXCI7XG5pbXBvcnQgTG9jYWxlIGZyb20gXCIuL2ltcGwvbG9jYWxlLmpzXCI7XG5pbXBvcnQgeyBwYXJzZUlTT0R1cmF0aW9uLCBwYXJzZUlTT1RpbWVPbmx5IH0gZnJvbSBcIi4vaW1wbC9yZWdleFBhcnNlci5qc1wiO1xuaW1wb3J0IHtcbiAgYXNOdW1iZXIsXG4gIGhhc093blByb3BlcnR5LFxuICBpc051bWJlcixcbiAgaXNVbmRlZmluZWQsXG4gIG5vcm1hbGl6ZU9iamVjdCxcbiAgcm91bmRUbyxcbn0gZnJvbSBcIi4vaW1wbC91dGlsLmpzXCI7XG5pbXBvcnQgU2V0dGluZ3MgZnJvbSBcIi4vc2V0dGluZ3MuanNcIjtcbmltcG9ydCBEYXRlVGltZSBmcm9tIFwiLi9kYXRldGltZS5qc1wiO1xuXG5jb25zdCBJTlZBTElEID0gXCJJbnZhbGlkIER1cmF0aW9uXCI7XG5cbi8vIHVuaXQgY29udmVyc2lvbiBjb25zdGFudHNcbmV4cG9ydCBjb25zdCBsb3dPcmRlck1hdHJpeCA9IHtcbiAgICB3ZWVrczoge1xuICAgICAgZGF5czogNyxcbiAgICAgIGhvdXJzOiA3ICogMjQsXG4gICAgICBtaW51dGVzOiA3ICogMjQgKiA2MCxcbiAgICAgIHNlY29uZHM6IDcgKiAyNCAqIDYwICogNjAsXG4gICAgICBtaWxsaXNlY29uZHM6IDcgKiAyNCAqIDYwICogNjAgKiAxMDAwLFxuICAgIH0sXG4gICAgZGF5czoge1xuICAgICAgaG91cnM6IDI0LFxuICAgICAgbWludXRlczogMjQgKiA2MCxcbiAgICAgIHNlY29uZHM6IDI0ICogNjAgKiA2MCxcbiAgICAgIG1pbGxpc2Vjb25kczogMjQgKiA2MCAqIDYwICogMTAwMCxcbiAgICB9LFxuICAgIGhvdXJzOiB7IG1pbnV0ZXM6IDYwLCBzZWNvbmRzOiA2MCAqIDYwLCBtaWxsaXNlY29uZHM6IDYwICogNjAgKiAxMDAwIH0sXG4gICAgbWludXRlczogeyBzZWNvbmRzOiA2MCwgbWlsbGlzZWNvbmRzOiA2MCAqIDEwMDAgfSxcbiAgICBzZWNvbmRzOiB7IG1pbGxpc2Vjb25kczogMTAwMCB9LFxuICB9LFxuICBjYXN1YWxNYXRyaXggPSB7XG4gICAgeWVhcnM6IHtcbiAgICAgIHF1YXJ0ZXJzOiA0LFxuICAgICAgbW9udGhzOiAxMixcbiAgICAgIHdlZWtzOiA1MixcbiAgICAgIGRheXM6IDM2NSxcbiAgICAgIGhvdXJzOiAzNjUgKiAyNCxcbiAgICAgIG1pbnV0ZXM6IDM2NSAqIDI0ICogNjAsXG4gICAgICBzZWNvbmRzOiAzNjUgKiAyNCAqIDYwICogNjAsXG4gICAgICBtaWxsaXNlY29uZHM6IDM2NSAqIDI0ICogNjAgKiA2MCAqIDEwMDAsXG4gICAgfSxcbiAgICBxdWFydGVyczoge1xuICAgICAgbW9udGhzOiAzLFxuICAgICAgd2Vla3M6IDEzLFxuICAgICAgZGF5czogOTEsXG4gICAgICBob3VyczogOTEgKiAyNCxcbiAgICAgIG1pbnV0ZXM6IDkxICogMjQgKiA2MCxcbiAgICAgIHNlY29uZHM6IDkxICogMjQgKiA2MCAqIDYwLFxuICAgICAgbWlsbGlzZWNvbmRzOiA5MSAqIDI0ICogNjAgKiA2MCAqIDEwMDAsXG4gICAgfSxcbiAgICBtb250aHM6IHtcbiAgICAgIHdlZWtzOiA0LFxuICAgICAgZGF5czogMzAsXG4gICAgICBob3VyczogMzAgKiAyNCxcbiAgICAgIG1pbnV0ZXM6IDMwICogMjQgKiA2MCxcbiAgICAgIHNlY29uZHM6IDMwICogMjQgKiA2MCAqIDYwLFxuICAgICAgbWlsbGlzZWNvbmRzOiAzMCAqIDI0ICogNjAgKiA2MCAqIDEwMDAsXG4gICAgfSxcblxuICAgIC4uLmxvd09yZGVyTWF0cml4LFxuICB9LFxuICBkYXlzSW5ZZWFyQWNjdXJhdGUgPSAxNDYwOTcuMCAvIDQwMCxcbiAgZGF5c0luTW9udGhBY2N1cmF0ZSA9IDE0NjA5Ny4wIC8gNDgwMCxcbiAgYWNjdXJhdGVNYXRyaXggPSB7XG4gICAgeWVhcnM6IHtcbiAgICAgIHF1YXJ0ZXJzOiA0LFxuICAgICAgbW9udGhzOiAxMixcbiAgICAgIHdlZWtzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgLyA3LFxuICAgICAgZGF5czogZGF5c0luWWVhckFjY3VyYXRlLFxuICAgICAgaG91cnM6IGRheXNJblllYXJBY2N1cmF0ZSAqIDI0LFxuICAgICAgbWludXRlczogZGF5c0luWWVhckFjY3VyYXRlICogMjQgKiA2MCxcbiAgICAgIHNlY29uZHM6IGRheXNJblllYXJBY2N1cmF0ZSAqIDI0ICogNjAgKiA2MCxcbiAgICAgIG1pbGxpc2Vjb25kczogZGF5c0luWWVhckFjY3VyYXRlICogMjQgKiA2MCAqIDYwICogMTAwMCxcbiAgICB9LFxuICAgIHF1YXJ0ZXJzOiB7XG4gICAgICBtb250aHM6IDMsXG4gICAgICB3ZWVrczogZGF5c0luWWVhckFjY3VyYXRlIC8gMjgsXG4gICAgICBkYXlzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgLyA0LFxuICAgICAgaG91cnM6IChkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCkgLyA0LFxuICAgICAgbWludXRlczogKGRheXNJblllYXJBY2N1cmF0ZSAqIDI0ICogNjApIC8gNCxcbiAgICAgIHNlY29uZHM6IChkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAqIDYwICogNjApIC8gNCxcbiAgICAgIG1pbGxpc2Vjb25kczogKGRheXNJblllYXJBY2N1cmF0ZSAqIDI0ICogNjAgKiA2MCAqIDEwMDApIC8gNCxcbiAgICB9LFxuICAgIG1vbnRoczoge1xuICAgICAgd2Vla3M6IGRheXNJbk1vbnRoQWNjdXJhdGUgLyA3LFxuICAgICAgZGF5czogZGF5c0luTW9udGhBY2N1cmF0ZSxcbiAgICAgIGhvdXJzOiBkYXlzSW5Nb250aEFjY3VyYXRlICogMjQsXG4gICAgICBtaW51dGVzOiBkYXlzSW5Nb250aEFjY3VyYXRlICogMjQgKiA2MCxcbiAgICAgIHNlY29uZHM6IGRheXNJbk1vbnRoQWNjdXJhdGUgKiAyNCAqIDYwICogNjAsXG4gICAgICBtaWxsaXNlY29uZHM6IGRheXNJbk1vbnRoQWNjdXJhdGUgKiAyNCAqIDYwICogNjAgKiAxMDAwLFxuICAgIH0sXG4gICAgLi4ubG93T3JkZXJNYXRyaXgsXG4gIH07XG5cbi8vIHVuaXRzIG9yZGVyZWQgYnkgc2l6ZVxuY29uc3Qgb3JkZXJlZFVuaXRzID0gW1xuICBcInllYXJzXCIsXG4gIFwicXVhcnRlcnNcIixcbiAgXCJtb250aHNcIixcbiAgXCJ3ZWVrc1wiLFxuICBcImRheXNcIixcbiAgXCJob3Vyc1wiLFxuICBcIm1pbnV0ZXNcIixcbiAgXCJzZWNvbmRzXCIsXG4gIFwibWlsbGlzZWNvbmRzXCIsXG5dO1xuXG5jb25zdCByZXZlcnNlVW5pdHMgPSBvcmRlcmVkVW5pdHMuc2xpY2UoMCkucmV2ZXJzZSgpO1xuXG4vLyBjbG9uZSByZWFsbHkgbWVhbnMgXCJjcmVhdGUgYW5vdGhlciBpbnN0YW5jZSBqdXN0IGxpa2UgdGhpcyBvbmUsIGJ1dCB3aXRoIHRoZXNlIGNoYW5nZXNcIlxuZnVuY3Rpb24gY2xvbmUoZHVyLCBhbHRzLCBjbGVhciA9IGZhbHNlKSB7XG4gIC8vIGRlZXAgbWVyZ2UgZm9yIHZhbHNcbiAgY29uc3QgY29uZiA9IHtcbiAgICB2YWx1ZXM6IGNsZWFyID8gYWx0cy52YWx1ZXMgOiB7IC4uLmR1ci52YWx1ZXMsIC4uLihhbHRzLnZhbHVlcyB8fCB7fSkgfSxcbiAgICBsb2M6IGR1ci5sb2MuY2xvbmUoYWx0cy5sb2MpLFxuICAgIGNvbnZlcnNpb25BY2N1cmFjeTogYWx0cy5jb252ZXJzaW9uQWNjdXJhY3kgfHwgZHVyLmNvbnZlcnNpb25BY2N1cmFjeSxcbiAgICBtYXRyaXg6IGFsdHMubWF0cml4IHx8IGR1ci5tYXRyaXgsXG4gIH07XG4gIHJldHVybiBuZXcgRHVyYXRpb24oY29uZik7XG59XG5cbmZ1bmN0aW9uIGR1cmF0aW9uVG9NaWxsaXMobWF0cml4LCB2YWxzKSB7XG4gIGxldCBzdW0gPSB2YWxzLm1pbGxpc2Vjb25kcyA/PyAwO1xuICBmb3IgKGNvbnN0IHVuaXQgb2YgcmV2ZXJzZVVuaXRzLnNsaWNlKDEpKSB7XG4gICAgaWYgKHZhbHNbdW5pdF0pIHtcbiAgICAgIHN1bSArPSB2YWxzW3VuaXRdICogbWF0cml4W3VuaXRdW1wibWlsbGlzZWNvbmRzXCJdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3VtO1xufVxuXG4vLyBOQjogbXV0YXRlcyBwYXJhbWV0ZXJzXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZXMobWF0cml4LCB2YWxzKSB7XG4gIC8vIHRoZSBsb2dpYyBiZWxvdyBhc3N1bWVzIHRoZSBvdmVyYWxsIHZhbHVlIG9mIHRoZSBkdXJhdGlvbiBpcyBwb3NpdGl2ZVxuICAvLyBpZiB0aGlzIGlzIG5vdCB0aGUgY2FzZSwgZmFjdG9yIGlzIHVzZWQgdG8gbWFrZSBpdCBzb1xuICBjb25zdCBmYWN0b3IgPSBkdXJhdGlvblRvTWlsbGlzKG1hdHJpeCwgdmFscykgPCAwID8gLTEgOiAxO1xuXG4gIG9yZGVyZWRVbml0cy5yZWR1Y2VSaWdodCgocHJldmlvdXMsIGN1cnJlbnQpID0+IHtcbiAgICBpZiAoIWlzVW5kZWZpbmVkKHZhbHNbY3VycmVudF0pKSB7XG4gICAgICBpZiAocHJldmlvdXMpIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNWYWwgPSB2YWxzW3ByZXZpb3VzXSAqIGZhY3RvcjtcbiAgICAgICAgY29uc3QgY29udiA9IG1hdHJpeFtjdXJyZW50XVtwcmV2aW91c107XG5cbiAgICAgICAgLy8gaWYgKHByZXZpb3VzVmFsIDwgMCk6XG4gICAgICAgIC8vIGxvd2VyIG9yZGVyIHVuaXQgaXMgbmVnYXRpdmUgKGUuZy4geyB5ZWFyczogMiwgZGF5czogLTIgfSlcbiAgICAgICAgLy8gbm9ybWFsaXplIHRoaXMgYnkgcmVkdWNpbmcgdGhlIGhpZ2hlciBvcmRlciB1bml0IGJ5IHRoZSBhcHByb3ByaWF0ZSBhbW91bnRcbiAgICAgICAgLy8gYW5kIGluY3JlYXNpbmcgdGhlIGxvd2VyIG9yZGVyIHVuaXRcbiAgICAgICAgLy8gdGhpcyBjYW4gbmV2ZXIgbWFrZSB0aGUgaGlnaGVyIG9yZGVyIHVuaXQgbmVnYXRpdmUsIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBvbmx5IG9wZXJhdGVzXG4gICAgICAgIC8vIG9uIHBvc2l0aXZlIGR1cmF0aW9ucywgc28gdGhlIGFtb3VudCBvZiB0aW1lIHJlcHJlc2VudGVkIGJ5IHRoZSBsb3dlciBvcmRlciB1bml0IGNhbm5vdFxuICAgICAgICAvLyBiZSBsYXJnZXIgdGhhbiB0aGUgaGlnaGVyIG9yZGVyIHVuaXRcbiAgICAgICAgLy8gZWxzZTpcbiAgICAgICAgLy8gbG93ZXIgb3JkZXIgdW5pdCBpcyBwb3NpdGl2ZSAoZS5nLiB7IHllYXJzOiAyLCBkYXlzOiA0NTAgfSBvciB7IHllYXJzOiAtMiwgZGF5czogNDUwIH0pXG4gICAgICAgIC8vIGluIHRoaXMgY2FzZSB3ZSBhdHRlbXB0IHRvIGNvbnZlcnQgYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIHRoZSBsb3dlciBvcmRlciB1bml0IGludG9cbiAgICAgICAgLy8gdGhlIGhpZ2hlciBvcmRlciBvbmVcbiAgICAgICAgLy9cbiAgICAgICAgLy8gTWF0aC5mbG9vciB0YWtlcyBjYXJlIG9mIGJvdGggb2YgdGhlc2UgY2FzZXMsIHJvdW5kaW5nIGF3YXkgZnJvbSAwXG4gICAgICAgIC8vIGlmIHByZXZpb3VzVmFsIDwgMCBpdCBtYWtlcyB0aGUgYWJzb2x1dGUgdmFsdWUgbGFyZ2VyXG4gICAgICAgIC8vIGlmIHByZXZpb3VzVmFsID49IGl0IG1ha2VzIHRoZSBhYnNvbHV0ZSB2YWx1ZSBzbWFsbGVyXG4gICAgICAgIGNvbnN0IHJvbGxVcCA9IE1hdGguZmxvb3IocHJldmlvdXNWYWwgLyBjb252KTtcbiAgICAgICAgdmFsc1tjdXJyZW50XSArPSByb2xsVXAgKiBmYWN0b3I7XG4gICAgICAgIHZhbHNbcHJldmlvdXNdIC09IHJvbGxVcCAqIGNvbnYgKiBmYWN0b3I7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3VycmVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHByZXZpb3VzO1xuICAgIH1cbiAgfSwgbnVsbCk7XG5cbiAgLy8gdHJ5IHRvIGNvbnZlcnQgYW55IGRlY2ltYWxzIGludG8gc21hbGxlciB1bml0cyBpZiBwb3NzaWJsZVxuICAvLyBmb3IgZXhhbXBsZSBmb3IgeyB5ZWFyczogMi41LCBkYXlzOiAwLCBzZWNvbmRzOiAwIH0gd2Ugd2FudCB0byBnZXQgeyB5ZWFyczogMiwgZGF5czogMTgyLCBob3VyczogMTIgfVxuICBvcmRlcmVkVW5pdHMucmVkdWNlKChwcmV2aW91cywgY3VycmVudCkgPT4ge1xuICAgIGlmICghaXNVbmRlZmluZWQodmFsc1tjdXJyZW50XSkpIHtcbiAgICAgIGlmIChwcmV2aW91cykge1xuICAgICAgICBjb25zdCBmcmFjdGlvbiA9IHZhbHNbcHJldmlvdXNdICUgMTtcbiAgICAgICAgdmFsc1twcmV2aW91c10gLT0gZnJhY3Rpb247XG4gICAgICAgIHZhbHNbY3VycmVudF0gKz0gZnJhY3Rpb24gKiBtYXRyaXhbcHJldmlvdXNdW2N1cnJlbnRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwcmV2aW91cztcbiAgICB9XG4gIH0sIG51bGwpO1xufVxuXG4vLyBSZW1vdmUgYWxsIHByb3BlcnRpZXMgd2l0aCBhIHZhbHVlIG9mIDAgZnJvbSBhbiBvYmplY3RcbmZ1bmN0aW9uIHJlbW92ZVplcm9lcyh2YWxzKSB7XG4gIGNvbnN0IG5ld1ZhbHMgPSB7fTtcbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModmFscykpIHtcbiAgICBpZiAodmFsdWUgIT09IDApIHtcbiAgICAgIG5ld1ZhbHNba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3VmFscztcbn1cblxuLyoqXG4gKiBBIER1cmF0aW9uIG9iamVjdCByZXByZXNlbnRzIGEgcGVyaW9kIG9mIHRpbWUsIGxpa2UgXCIyIG1vbnRoc1wiIG9yIFwiMSBkYXksIDEgaG91clwiLiBDb25jZXB0dWFsbHksIGl0J3MganVzdCBhIG1hcCBvZiB1bml0cyB0byB0aGVpciBxdWFudGl0aWVzLCBhY2NvbXBhbmllZCBieSBzb21lIGFkZGl0aW9uYWwgY29uZmlndXJhdGlvbiBhbmQgbWV0aG9kcyBmb3IgY3JlYXRpbmcsIHBhcnNpbmcsIGludGVycm9nYXRpbmcsIHRyYW5zZm9ybWluZywgYW5kIGZvcm1hdHRpbmcgdGhlbS4gVGhleSBjYW4gYmUgdXNlZCBvbiB0aGVpciBvd24gb3IgaW4gY29uanVuY3Rpb24gd2l0aCBvdGhlciBMdXhvbiB0eXBlczsgZm9yIGV4YW1wbGUsIHlvdSBjYW4gdXNlIHtAbGluayBEYXRlVGltZSNwbHVzfSB0byBhZGQgYSBEdXJhdGlvbiBvYmplY3QgdG8gYSBEYXRlVGltZSwgcHJvZHVjaW5nIGFub3RoZXIgRGF0ZVRpbWUuXG4gKlxuICogSGVyZSBpcyBhIGJyaWVmIG92ZXJ2aWV3IG9mIGNvbW1vbmx5IHVzZWQgbWV0aG9kcyBhbmQgZ2V0dGVycyBpbiBEdXJhdGlvbjpcbiAqXG4gKiAqICoqQ3JlYXRpb24qKiBUbyBjcmVhdGUgYSBEdXJhdGlvbiwgdXNlIHtAbGluayBEdXJhdGlvbi5mcm9tTWlsbGlzfSwge0BsaW5rIER1cmF0aW9uLmZyb21PYmplY3R9LCBvciB7QGxpbmsgRHVyYXRpb24uZnJvbUlTT30uXG4gKiAqICoqVW5pdCB2YWx1ZXMqKiBTZWUgdGhlIHtAbGluayBEdXJhdGlvbiN5ZWFyc30sIHtAbGluayBEdXJhdGlvbiNtb250aHN9LCB7QGxpbmsgRHVyYXRpb24jd2Vla3N9LCB7QGxpbmsgRHVyYXRpb24jZGF5c30sIHtAbGluayBEdXJhdGlvbiNob3Vyc30sIHtAbGluayBEdXJhdGlvbiNtaW51dGVzfSwge0BsaW5rIER1cmF0aW9uI3NlY29uZHN9LCB7QGxpbmsgRHVyYXRpb24jbWlsbGlzZWNvbmRzfSBhY2Nlc3NvcnMuXG4gKiAqICoqQ29uZmlndXJhdGlvbioqIFNlZSAge0BsaW5rIER1cmF0aW9uI2xvY2FsZX0gYW5kIHtAbGluayBEdXJhdGlvbiNudW1iZXJpbmdTeXN0ZW19IGFjY2Vzc29ycy5cbiAqICogKipUcmFuc2Zvcm1hdGlvbioqIFRvIGNyZWF0ZSBuZXcgRHVyYXRpb25zIG91dCBvZiBvbGQgb25lcyB1c2Uge0BsaW5rIER1cmF0aW9uI3BsdXN9LCB7QGxpbmsgRHVyYXRpb24jbWludXN9LCB7QGxpbmsgRHVyYXRpb24jbm9ybWFsaXplfSwge0BsaW5rIER1cmF0aW9uI3NldH0sIHtAbGluayBEdXJhdGlvbiNyZWNvbmZpZ3VyZX0sIHtAbGluayBEdXJhdGlvbiNzaGlmdFRvfSwgYW5kIHtAbGluayBEdXJhdGlvbiNuZWdhdGV9LlxuICogKiAqKk91dHB1dCoqIFRvIGNvbnZlcnQgdGhlIER1cmF0aW9uIGludG8gb3RoZXIgcmVwcmVzZW50YXRpb25zLCBzZWUge0BsaW5rIER1cmF0aW9uI2FzfSwge0BsaW5rIER1cmF0aW9uI3RvSVNPfSwge0BsaW5rIER1cmF0aW9uI3RvRm9ybWF0fSwgYW5kIHtAbGluayBEdXJhdGlvbiN0b0pTT059XG4gKlxuICogVGhlcmUncyBhcmUgbW9yZSBtZXRob2RzIGRvY3VtZW50ZWQgYmVsb3cuIEluIGFkZGl0aW9uLCBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBzdWJ0bGVyIHRvcGljcyBsaWtlIGludGVybmF0aW9uYWxpemF0aW9uIGFuZCB2YWxpZGl0eSwgc2VlIHRoZSBleHRlcm5hbCBkb2N1bWVudGF0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEdXJhdGlvbiB7XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgY29uc3QgYWNjdXJhdGUgPSBjb25maWcuY29udmVyc2lvbkFjY3VyYWN5ID09PSBcImxvbmd0ZXJtXCIgfHwgZmFsc2U7XG4gICAgbGV0IG1hdHJpeCA9IGFjY3VyYXRlID8gYWNjdXJhdGVNYXRyaXggOiBjYXN1YWxNYXRyaXg7XG5cbiAgICBpZiAoY29uZmlnLm1hdHJpeCkge1xuICAgICAgbWF0cml4ID0gY29uZmlnLm1hdHJpeDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLnZhbHVlcyA9IGNvbmZpZy52YWx1ZXM7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5sb2MgPSBjb25maWcubG9jIHx8IExvY2FsZS5jcmVhdGUoKTtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmNvbnZlcnNpb25BY2N1cmFjeSA9IGFjY3VyYXRlID8gXCJsb25ndGVybVwiIDogXCJjYXN1YWxcIjtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmludmFsaWQgPSBjb25maWcuaW52YWxpZCB8fCBudWxsO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMubWF0cml4ID0gbWF0cml4O1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuaXNMdXhvbkR1cmF0aW9uID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgRHVyYXRpb24gZnJvbSBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCBvZiBtaWxsaXNlY29uZHNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIGZvciBwYXJzaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J2VuLVVTJ10gLSB0aGUgbG9jYWxlIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmNvbnZlcnNpb25BY2N1cmFjeT0nY2FzdWFsJ10gLSB0aGUgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgc3RhdGljIGZyb21NaWxsaXMoY291bnQsIG9wdHMpIHtcbiAgICByZXR1cm4gRHVyYXRpb24uZnJvbU9iamVjdCh7IG1pbGxpc2Vjb25kczogY291bnQgfSwgb3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgRHVyYXRpb24gZnJvbSBhIEphdmFTY3JpcHQgb2JqZWN0IHdpdGgga2V5cyBsaWtlICd5ZWFycycgYW5kICdob3VycycuXG4gICAqIElmIHRoaXMgb2JqZWN0IGlzIGVtcHR5IHRoZW4gYSB6ZXJvIG1pbGxpc2Vjb25kcyBkdXJhdGlvbiBpcyByZXR1cm5lZC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iaiAtIHRoZSBvYmplY3QgdG8gY3JlYXRlIHRoZSBEYXRlVGltZSBmcm9tXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoueWVhcnNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5xdWFydGVyc1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLm1vbnRoc1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLndlZWtzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmouZGF5c1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLmhvdXJzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubWludXRlc1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLnNlY29uZHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5taWxsaXNlY29uZHNcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzPVtdXSAtIG9wdGlvbnMgZm9yIGNyZWF0aW5nIHRoaXMgRHVyYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nZW4tVVMnXSAtIHRoZSBsb2NhbGUgdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBwcmVzZXQgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5tYXRyaXg9T2JqZWN0XSAtIHRoZSBjdXN0b20gY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgc3RhdGljIGZyb21PYmplY3Qob2JqLCBvcHRzID0ge30pIHtcbiAgICBpZiAob2JqID09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIikge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICBgRHVyYXRpb24uZnJvbU9iamVjdDogYXJndW1lbnQgZXhwZWN0ZWQgdG8gYmUgYW4gb2JqZWN0LCBnb3QgJHtcbiAgICAgICAgICBvYmogPT09IG51bGwgPyBcIm51bGxcIiA6IHR5cGVvZiBvYmpcbiAgICAgICAgfWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEdXJhdGlvbih7XG4gICAgICB2YWx1ZXM6IG5vcm1hbGl6ZU9iamVjdChvYmosIER1cmF0aW9uLm5vcm1hbGl6ZVVuaXQpLFxuICAgICAgbG9jOiBMb2NhbGUuZnJvbU9iamVjdChvcHRzKSxcbiAgICAgIGNvbnZlcnNpb25BY2N1cmFjeTogb3B0cy5jb252ZXJzaW9uQWNjdXJhY3ksXG4gICAgICBtYXRyaXg6IG9wdHMubWF0cml4LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIER1cmF0aW9uIGZyb20gRHVyYXRpb25MaWtlLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdCB8IG51bWJlciB8IER1cmF0aW9ufSBkdXJhdGlvbkxpa2VcbiAgICogT25lIG9mOlxuICAgKiAtIG9iamVjdCB3aXRoIGtleXMgbGlrZSAneWVhcnMnIGFuZCAnaG91cnMnLlxuICAgKiAtIG51bWJlciByZXByZXNlbnRpbmcgbWlsbGlzZWNvbmRzXG4gICAqIC0gRHVyYXRpb24gaW5zdGFuY2VcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBzdGF0aWMgZnJvbUR1cmF0aW9uTGlrZShkdXJhdGlvbkxpa2UpIHtcbiAgICBpZiAoaXNOdW1iZXIoZHVyYXRpb25MaWtlKSkge1xuICAgICAgcmV0dXJuIER1cmF0aW9uLmZyb21NaWxsaXMoZHVyYXRpb25MaWtlKTtcbiAgICB9IGVsc2UgaWYgKER1cmF0aW9uLmlzRHVyYXRpb24oZHVyYXRpb25MaWtlKSkge1xuICAgICAgcmV0dXJuIGR1cmF0aW9uTGlrZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkdXJhdGlvbkxpa2UgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5mcm9tT2JqZWN0KGR1cmF0aW9uTGlrZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgYFVua25vd24gZHVyYXRpb24gYXJndW1lbnQgJHtkdXJhdGlvbkxpa2V9IG9mIHR5cGUgJHt0eXBlb2YgZHVyYXRpb25MaWtlfWBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIER1cmF0aW9uIGZyb20gYW4gSVNPIDg2MDEgZHVyYXRpb24gc3RyaW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIHRleHQgdG8gcGFyc2VcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIGZvciBwYXJzaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J2VuLVVTJ10gLSB0aGUgbG9jYWxlIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmNvbnZlcnNpb25BY2N1cmFjeT0nY2FzdWFsJ10gLSB0aGUgcHJlc2V0IGNvbnZlcnNpb24gc3lzdGVtIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubWF0cml4PU9iamVjdF0gLSB0aGUgcHJlc2V0IGNvbnZlcnNpb24gc3lzdGVtIHRvIHVzZVxuICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxI0R1cmF0aW9uc1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPKCdQM1k2TTFXNERUMTJIMzBNNVMnKS50b09iamVjdCgpIC8vPT4geyB5ZWFyczogMywgbW9udGhzOiA2LCB3ZWVrczogMSwgZGF5czogNCwgaG91cnM6IDEyLCBtaW51dGVzOiAzMCwgc2Vjb25kczogNSB9XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU08oJ1BUMjNIJykudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDIzIH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbUlTTygnUDVZM00nKS50b09iamVjdCgpIC8vPT4geyB5ZWFyczogNSwgbW9udGhzOiAzIH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBzdGF0aWMgZnJvbUlTTyh0ZXh0LCBvcHRzKSB7XG4gICAgY29uc3QgW3BhcnNlZF0gPSBwYXJzZUlTT0R1cmF0aW9uKHRleHQpO1xuICAgIGlmIChwYXJzZWQpIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5mcm9tT2JqZWN0KHBhcnNlZCwgb3B0cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5pbnZhbGlkKFwidW5wYXJzYWJsZVwiLCBgdGhlIGlucHV0IFwiJHt0ZXh0fVwiIGNhbid0IGJlIHBhcnNlZCBhcyBJU08gODYwMWApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEdXJhdGlvbiBmcm9tIGFuIElTTyA4NjAxIHRpbWUgc3RyaW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIHRleHQgdG8gcGFyc2VcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIGZvciBwYXJzaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J2VuLVVTJ10gLSB0aGUgbG9jYWxlIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmNvbnZlcnNpb25BY2N1cmFjeT0nY2FzdWFsJ10gLSB0aGUgcHJlc2V0IGNvbnZlcnNpb24gc3lzdGVtIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubWF0cml4PU9iamVjdF0gLSB0aGUgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZXNcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbUlTT1RpbWUoJzExOjIyOjMzLjQ0NCcpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAxMSwgbWludXRlczogMjIsIHNlY29uZHM6IDMzLCBtaWxsaXNlY29uZHM6IDQ0NCB9XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU09UaW1lKCcxMTowMCcpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAxMSwgbWludXRlczogMCwgc2Vjb25kczogMCB9XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU09UaW1lKCdUMTE6MDAnKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMTEsIG1pbnV0ZXM6IDAsIHNlY29uZHM6IDAgfVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPVGltZSgnMTEwMCcpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAxMSwgbWludXRlczogMCwgc2Vjb25kczogMCB9XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU09UaW1lKCdUMTEwMCcpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAxMSwgbWludXRlczogMCwgc2Vjb25kczogMCB9XG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgc3RhdGljIGZyb21JU09UaW1lKHRleHQsIG9wdHMpIHtcbiAgICBjb25zdCBbcGFyc2VkXSA9IHBhcnNlSVNPVGltZU9ubHkodGV4dCk7XG4gICAgaWYgKHBhcnNlZCkge1xuICAgICAgcmV0dXJuIER1cmF0aW9uLmZyb21PYmplY3QocGFyc2VkLCBvcHRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIER1cmF0aW9uLmludmFsaWQoXCJ1bnBhcnNhYmxlXCIsIGB0aGUgaW5wdXQgXCIke3RleHR9XCIgY2FuJ3QgYmUgcGFyc2VkIGFzIElTTyA4NjAxYCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbnZhbGlkIER1cmF0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIC0gc2ltcGxlIHN0cmluZyBvZiB3aHkgdGhpcyBkYXRldGltZSBpcyBpbnZhbGlkLiBTaG91bGQgbm90IGNvbnRhaW4gcGFyYW1ldGVycyBvciBhbnl0aGluZyBlbHNlIGRhdGEtZGVwZW5kZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZXhwbGFuYXRpb249bnVsbF0gLSBsb25nZXIgZXhwbGFuYXRpb24sIG1heSBpbmNsdWRlIHBhcmFtZXRlcnMgYW5kIG90aGVyIHVzZWZ1bCBkZWJ1Z2dpbmcgaW5mb3JtYXRpb25cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBzdGF0aWMgaW52YWxpZChyZWFzb24sIGV4cGxhbmF0aW9uID0gbnVsbCkge1xuICAgIGlmICghcmVhc29uKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXCJuZWVkIHRvIHNwZWNpZnkgYSByZWFzb24gdGhlIER1cmF0aW9uIGlzIGludmFsaWRcIik7XG4gICAgfVxuXG4gICAgY29uc3QgaW52YWxpZCA9IHJlYXNvbiBpbnN0YW5jZW9mIEludmFsaWQgPyByZWFzb24gOiBuZXcgSW52YWxpZChyZWFzb24sIGV4cGxhbmF0aW9uKTtcblxuICAgIGlmIChTZXR0aW5ncy50aHJvd09uSW52YWxpZCkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWREdXJhdGlvbkVycm9yKGludmFsaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IER1cmF0aW9uKHsgaW52YWxpZCB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBub3JtYWxpemVVbml0KHVuaXQpIHtcbiAgICBjb25zdCBub3JtYWxpemVkID0ge1xuICAgICAgeWVhcjogXCJ5ZWFyc1wiLFxuICAgICAgeWVhcnM6IFwieWVhcnNcIixcbiAgICAgIHF1YXJ0ZXI6IFwicXVhcnRlcnNcIixcbiAgICAgIHF1YXJ0ZXJzOiBcInF1YXJ0ZXJzXCIsXG4gICAgICBtb250aDogXCJtb250aHNcIixcbiAgICAgIG1vbnRoczogXCJtb250aHNcIixcbiAgICAgIHdlZWs6IFwid2Vla3NcIixcbiAgICAgIHdlZWtzOiBcIndlZWtzXCIsXG4gICAgICBkYXk6IFwiZGF5c1wiLFxuICAgICAgZGF5czogXCJkYXlzXCIsXG4gICAgICBob3VyOiBcImhvdXJzXCIsXG4gICAgICBob3VyczogXCJob3Vyc1wiLFxuICAgICAgbWludXRlOiBcIm1pbnV0ZXNcIixcbiAgICAgIG1pbnV0ZXM6IFwibWludXRlc1wiLFxuICAgICAgc2Vjb25kOiBcInNlY29uZHNcIixcbiAgICAgIHNlY29uZHM6IFwic2Vjb25kc1wiLFxuICAgICAgbWlsbGlzZWNvbmQ6IFwibWlsbGlzZWNvbmRzXCIsXG4gICAgICBtaWxsaXNlY29uZHM6IFwibWlsbGlzZWNvbmRzXCIsXG4gICAgfVt1bml0ID8gdW5pdC50b0xvd2VyQ2FzZSgpIDogdW5pdF07XG5cbiAgICBpZiAoIW5vcm1hbGl6ZWQpIHRocm93IG5ldyBJbnZhbGlkVW5pdEVycm9yKHVuaXQpO1xuXG4gICAgcmV0dXJuIG5vcm1hbGl6ZWQ7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gb2JqZWN0IGlzIGEgRHVyYXRpb24uIFdvcmtzIGFjcm9zcyBjb250ZXh0IGJvdW5kYXJpZXNcbiAgICogQHBhcmFtIHtvYmplY3R9IG9cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc0R1cmF0aW9uKG8pIHtcbiAgICByZXR1cm4gKG8gJiYgby5pc0x1eG9uRHVyYXRpb24pIHx8IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCAgdGhlIGxvY2FsZSBvZiBhIER1cmF0aW9uLCBzdWNoICdlbi1HQidcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBsb2NhbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMubG9jLmxvY2FsZSA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBudW1iZXJpbmcgc3lzdGVtIG9mIGEgRHVyYXRpb24sIHN1Y2ggJ2JlbmcnLiBUaGUgbnVtYmVyaW5nIHN5c3RlbSBpcyB1c2VkIHdoZW4gZm9ybWF0dGluZyB0aGUgRHVyYXRpb25cbiAgICpcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBudW1iZXJpbmdTeXN0ZW0oKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMubG9jLm51bWJlcmluZ1N5c3RlbSA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIER1cmF0aW9uIGZvcm1hdHRlZCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBmb3JtYXQgc3RyaW5nLiBZb3UgbWF5IHVzZSB0aGVzZSB0b2tlbnM6XG4gICAqICogYFNgIGZvciBtaWxsaXNlY29uZHNcbiAgICogKiBgc2AgZm9yIHNlY29uZHNcbiAgICogKiBgbWAgZm9yIG1pbnV0ZXNcbiAgICogKiBgaGAgZm9yIGhvdXJzXG4gICAqICogYGRgIGZvciBkYXlzXG4gICAqICogYHdgIGZvciB3ZWVrc1xuICAgKiAqIGBNYCBmb3IgbW9udGhzXG4gICAqICogYHlgIGZvciB5ZWFyc1xuICAgKiBOb3RlczpcbiAgICogKiBBZGQgcGFkZGluZyBieSByZXBlYXRpbmcgdGhlIHRva2VuLCBlLmcuIFwieXlcIiBwYWRzIHRoZSB5ZWFycyB0byB0d28gZGlnaXRzLCBcImhoaGhcIiBwYWRzIHRoZSBob3VycyBvdXQgdG8gZm91ciBkaWdpdHNcbiAgICogKiBUb2tlbnMgY2FuIGJlIGVzY2FwZWQgYnkgd3JhcHBpbmcgd2l0aCBzaW5nbGUgcXVvdGVzLlxuICAgKiAqIFRoZSBkdXJhdGlvbiB3aWxsIGJlIGNvbnZlcnRlZCB0byB0aGUgc2V0IG9mIHVuaXRzIGluIHRoZSBmb3JtYXQgc3RyaW5nIHVzaW5nIHtAbGluayBEdXJhdGlvbiNzaGlmdFRvfSBhbmQgdGhlIER1cmF0aW9ucydzIGNvbnZlcnNpb24gYWNjdXJhY3kgc2V0dGluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGZtdCAtIHRoZSBmb3JtYXQgc3RyaW5nXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmZsb29yPXRydWVdIC0gZmxvb3IgbnVtZXJpY2FsIHZhbHVlc1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgeWVhcnM6IDEsIGRheXM6IDYsIHNlY29uZHM6IDIgfSkudG9Gb3JtYXQoXCJ5IGQgc1wiKSAvLz0+IFwiMSA2IDJcIlxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgeWVhcnM6IDEsIGRheXM6IDYsIHNlY29uZHM6IDIgfSkudG9Gb3JtYXQoXCJ5eSBkZCBzc3NcIikgLy89PiBcIjAxIDA2IDAwMlwiXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyB5ZWFyczogMSwgZGF5czogNiwgc2Vjb25kczogMiB9KS50b0Zvcm1hdChcIk0gU1wiKSAvLz0+IFwiMTIgNTE4NDAyMDAwXCJcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9Gb3JtYXQoZm10LCBvcHRzID0ge30pIHtcbiAgICAvLyByZXZlcnNlLWNvbXBhdCBzaW5jZSAxLjI7IHdlIGFsd2F5cyByb3VuZCBkb3duIG5vdywgbmV2ZXIgdXAsIGFuZCB3ZSBkbyBpdCBieSBkZWZhdWx0XG4gICAgY29uc3QgZm10T3B0cyA9IHtcbiAgICAgIC4uLm9wdHMsXG4gICAgICBmbG9vcjogb3B0cy5yb3VuZCAhPT0gZmFsc2UgJiYgb3B0cy5mbG9vciAhPT0gZmFsc2UsXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkXG4gICAgICA/IEZvcm1hdHRlci5jcmVhdGUodGhpcy5sb2MsIGZtdE9wdHMpLmZvcm1hdER1cmF0aW9uRnJvbVN0cmluZyh0aGlzLCBmbXQpXG4gICAgICA6IElOVkFMSUQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIER1cmF0aW9uIHdpdGggYWxsIHVuaXRzIGluY2x1ZGVkLlxuICAgKiBUbyBtb2RpZnkgaXRzIGJlaGF2aW9yLCB1c2UgYGxpc3RTdHlsZWAgYW5kIGFueSBJbnRsLk51bWJlckZvcm1hdCBvcHRpb24sIHRob3VnaCBgdW5pdERpc3BsYXlgIGlzIGVzcGVjaWFsbHkgcmVsZXZhbnQuXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvSW50bC9OdW1iZXJGb3JtYXQvTnVtYmVyRm9ybWF0I29wdGlvbnNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBGb3JtYXR0aW5nIG9wdGlvbnMuIEFjY2VwdHMgdGhlIHNhbWUga2V5cyBhcyB0aGUgb3B0aW9ucyBwYXJhbWV0ZXIgb2YgdGhlIG5hdGl2ZSBgSW50bC5OdW1iZXJGb3JtYXRgIGNvbnN0cnVjdG9yLCBhcyB3ZWxsIGFzIGBsaXN0U3R5bGVgLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubGlzdFN0eWxlPSduYXJyb3cnXSAtIEhvdyB0byBmb3JtYXQgdGhlIG1lcmdlZCBsaXN0LiBDb3JyZXNwb25kcyB0byB0aGUgYHN0eWxlYCBwcm9wZXJ0eSBvZiB0aGUgb3B0aW9ucyBwYXJhbWV0ZXIgb2YgdGhlIG5hdGl2ZSBgSW50bC5MaXN0Rm9ybWF0YCBjb25zdHJ1Y3Rvci5cbiAgICogQGV4YW1wbGVcbiAgICogYGBganNcbiAgICogdmFyIGR1ciA9IER1cmF0aW9uLmZyb21PYmplY3QoeyBkYXlzOiAxLCBob3VyczogNSwgbWludXRlczogNiB9KVxuICAgKiBkdXIudG9IdW1hbigpIC8vPT4gJzEgZGF5LCA1IGhvdXJzLCA2IG1pbnV0ZXMnXG4gICAqIGR1ci50b0h1bWFuKHsgbGlzdFN0eWxlOiBcImxvbmdcIiB9KSAvLz0+ICcxIGRheSwgNSBob3VycywgYW5kIDYgbWludXRlcydcbiAgICogZHVyLnRvSHVtYW4oeyB1bml0RGlzcGxheTogXCJzaG9ydFwiIH0pIC8vPT4gJzEgZGF5LCA1IGhyLCA2IG1pbidcbiAgICogYGBgXG4gICAqL1xuICB0b0h1bWFuKG9wdHMgPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gSU5WQUxJRDtcblxuICAgIGNvbnN0IGwgPSBvcmRlcmVkVW5pdHNcbiAgICAgIC5tYXAoKHVuaXQpID0+IHtcbiAgICAgICAgY29uc3QgdmFsID0gdGhpcy52YWx1ZXNbdW5pdF07XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWwpKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubG9jXG4gICAgICAgICAgLm51bWJlckZvcm1hdHRlcih7IHN0eWxlOiBcInVuaXRcIiwgdW5pdERpc3BsYXk6IFwibG9uZ1wiLCAuLi5vcHRzLCB1bml0OiB1bml0LnNsaWNlKDAsIC0xKSB9KVxuICAgICAgICAgIC5mb3JtYXQodmFsKTtcbiAgICAgIH0pXG4gICAgICAuZmlsdGVyKChuKSA9PiBuKTtcblxuICAgIHJldHVybiB0aGlzLmxvY1xuICAgICAgLmxpc3RGb3JtYXR0ZXIoeyB0eXBlOiBcImNvbmp1bmN0aW9uXCIsIHN0eWxlOiBvcHRzLmxpc3RTdHlsZSB8fCBcIm5hcnJvd1wiLCAuLi5vcHRzIH0pXG4gICAgICAuZm9ybWF0KGwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBKYXZhU2NyaXB0IG9iamVjdCB3aXRoIHRoaXMgRHVyYXRpb24ncyB2YWx1ZXMuXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyB5ZWFyczogMSwgZGF5czogNiwgc2Vjb25kczogMiB9KS50b09iamVjdCgpIC8vPT4geyB5ZWFyczogMSwgZGF5czogNiwgc2Vjb25kczogMiB9XG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIHRvT2JqZWN0KCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4ge307XG4gICAgcmV0dXJuIHsgLi4udGhpcy52YWx1ZXMgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEdXJhdGlvbi5cbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNEdXJhdGlvbnNcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IHllYXJzOiAzLCBzZWNvbmRzOiA0NSB9KS50b0lTTygpIC8vPT4gJ1AzWVQ0NVMnXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBtb250aHM6IDQsIHNlY29uZHM6IDQ1IH0pLnRvSVNPKCkgLy89PiAnUDRNVDQ1UydcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IG1vbnRoczogNSB9KS50b0lTTygpIC8vPT4gJ1A1TSdcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IG1pbnV0ZXM6IDUgfSkudG9JU08oKSAvLz0+ICdQVDVNJ1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgbWlsbGlzZWNvbmRzOiA2IH0pLnRvSVNPKCkgLy89PiAnUFQwLjAwNlMnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvSVNPKCkge1xuICAgIC8vIHdlIGNvdWxkIHVzZSB0aGUgZm9ybWF0dGVyLCBidXQgdGhpcyBpcyBhbiBlYXNpZXIgd2F5IHRvIGdldCB0aGUgbWluaW11bSBzdHJpbmdcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIG51bGw7XG5cbiAgICBsZXQgcyA9IFwiUFwiO1xuICAgIGlmICh0aGlzLnllYXJzICE9PSAwKSBzICs9IHRoaXMueWVhcnMgKyBcIllcIjtcbiAgICBpZiAodGhpcy5tb250aHMgIT09IDAgfHwgdGhpcy5xdWFydGVycyAhPT0gMCkgcyArPSB0aGlzLm1vbnRocyArIHRoaXMucXVhcnRlcnMgKiAzICsgXCJNXCI7XG4gICAgaWYgKHRoaXMud2Vla3MgIT09IDApIHMgKz0gdGhpcy53ZWVrcyArIFwiV1wiO1xuICAgIGlmICh0aGlzLmRheXMgIT09IDApIHMgKz0gdGhpcy5kYXlzICsgXCJEXCI7XG4gICAgaWYgKHRoaXMuaG91cnMgIT09IDAgfHwgdGhpcy5taW51dGVzICE9PSAwIHx8IHRoaXMuc2Vjb25kcyAhPT0gMCB8fCB0aGlzLm1pbGxpc2Vjb25kcyAhPT0gMClcbiAgICAgIHMgKz0gXCJUXCI7XG4gICAgaWYgKHRoaXMuaG91cnMgIT09IDApIHMgKz0gdGhpcy5ob3VycyArIFwiSFwiO1xuICAgIGlmICh0aGlzLm1pbnV0ZXMgIT09IDApIHMgKz0gdGhpcy5taW51dGVzICsgXCJNXCI7XG4gICAgaWYgKHRoaXMuc2Vjb25kcyAhPT0gMCB8fCB0aGlzLm1pbGxpc2Vjb25kcyAhPT0gMClcbiAgICAgIC8vIHRoaXMgd2lsbCBoYW5kbGUgXCJmbG9hdGluZyBwb2ludCBtYWRuZXNzXCIgYnkgcmVtb3ZpbmcgZXh0cmEgZGVjaW1hbCBwbGFjZXNcbiAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU4ODAwNC9pcy1mbG9hdGluZy1wb2ludC1tYXRoLWJyb2tlblxuICAgICAgcyArPSByb3VuZFRvKHRoaXMuc2Vjb25kcyArIHRoaXMubWlsbGlzZWNvbmRzIC8gMTAwMCwgMykgKyBcIlNcIjtcbiAgICBpZiAocyA9PT0gXCJQXCIpIHMgKz0gXCJUMFNcIjtcbiAgICByZXR1cm4gcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEdXJhdGlvbiwgZm9ybWF0dGVkIGFzIGEgdGltZSBvZiBkYXkuXG4gICAqIE5vdGUgdGhhdCB0aGlzIHdpbGwgcmV0dXJuIG51bGwgaWYgdGhlIGR1cmF0aW9uIGlzIGludmFsaWQsIG5lZ2F0aXZlLCBvciBlcXVhbCB0byBvciBncmVhdGVyIHRoYW4gMjQgaG91cnMuXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZXNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc3VwcHJlc3NNaWxsaXNlY29uZHM9ZmFsc2VdIC0gZXhjbHVkZSBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZm9ybWF0IGlmIHRoZXkncmUgMFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnN1cHByZXNzU2Vjb25kcz1mYWxzZV0gLSBleGNsdWRlIHNlY29uZHMgZnJvbSB0aGUgZm9ybWF0IGlmIHRoZXkncmUgMFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVQcmVmaXg9ZmFsc2VdIC0gaW5jbHVkZSB0aGUgYFRgIHByZWZpeFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuZm9ybWF0PSdleHRlbmRlZCddIC0gY2hvb3NlIGJldHdlZW4gdGhlIGJhc2ljIGFuZCBleHRlbmRlZCBmb3JtYXRcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxMSB9KS50b0lTT1RpbWUoKSAvLz0+ICcxMTowMDowMC4wMDAnXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMTEgfSkudG9JU09UaW1lKHsgc3VwcHJlc3NNaWxsaXNlY29uZHM6IHRydWUgfSkgLy89PiAnMTE6MDA6MDAnXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMTEgfSkudG9JU09UaW1lKHsgc3VwcHJlc3NTZWNvbmRzOiB0cnVlIH0pIC8vPT4gJzExOjAwJ1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDExIH0pLnRvSVNPVGltZSh7IGluY2x1ZGVQcmVmaXg6IHRydWUgfSkgLy89PiAnVDExOjAwOjAwLjAwMCdcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxMSB9KS50b0lTT1RpbWUoeyBmb3JtYXQ6ICdiYXNpYycgfSkgLy89PiAnMTEwMDAwLjAwMCdcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9JU09UaW1lKG9wdHMgPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gbnVsbDtcblxuICAgIGNvbnN0IG1pbGxpcyA9IHRoaXMudG9NaWxsaXMoKTtcbiAgICBpZiAobWlsbGlzIDwgMCB8fCBtaWxsaXMgPj0gODY0MDAwMDApIHJldHVybiBudWxsO1xuXG4gICAgb3B0cyA9IHtcbiAgICAgIHN1cHByZXNzTWlsbGlzZWNvbmRzOiBmYWxzZSxcbiAgICAgIHN1cHByZXNzU2Vjb25kczogZmFsc2UsXG4gICAgICBpbmNsdWRlUHJlZml4OiBmYWxzZSxcbiAgICAgIGZvcm1hdDogXCJleHRlbmRlZFwiLFxuICAgICAgLi4ub3B0cyxcbiAgICAgIGluY2x1ZGVPZmZzZXQ6IGZhbHNlLFxuICAgIH07XG5cbiAgICBjb25zdCBkYXRlVGltZSA9IERhdGVUaW1lLmZyb21NaWxsaXMobWlsbGlzLCB7IHpvbmU6IFwiVVRDXCIgfSk7XG4gICAgcmV0dXJuIGRhdGVUaW1lLnRvSVNPVGltZShvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRHVyYXRpb24gYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBKU09OLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9JU08oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRHVyYXRpb24gYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBkZWJ1Z2dpbmcuXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnRvSVNPKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIER1cmF0aW9uIGFwcHJvcHJpYXRlIGZvciB0aGUgUkVQTC5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgW1N5bWJvbC5mb3IoXCJub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbVwiKV0oKSB7XG4gICAgaWYgKHRoaXMuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIGBEdXJhdGlvbiB7IHZhbHVlczogJHtKU09OLnN0cmluZ2lmeSh0aGlzLnZhbHVlcyl9IH1gO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYER1cmF0aW9uIHsgSW52YWxpZCwgcmVhc29uOiAke3RoaXMuaW52YWxpZFJlYXNvbn0gfWA7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gbWlsbGlzZWNvbmRzIHZhbHVlIG9mIHRoaXMgRHVyYXRpb24uXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHRvTWlsbGlzKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gTmFOO1xuXG4gICAgcmV0dXJuIGR1cmF0aW9uVG9NaWxsaXModGhpcy5tYXRyaXgsIHRoaXMudmFsdWVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG1pbGxpc2Vjb25kcyB2YWx1ZSBvZiB0aGlzIER1cmF0aW9uLiBBbGlhcyBvZiB7QGxpbmsgdG9NaWxsaXN9XG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHZhbHVlT2YoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9NaWxsaXMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYWtlIHRoaXMgRHVyYXRpb24gbG9uZ2VyIGJ5IHRoZSBzcGVjaWZpZWQgYW1vdW50LiBSZXR1cm4gYSBuZXdseS1jb25zdHJ1Y3RlZCBEdXJhdGlvbi5cbiAgICogQHBhcmFtIHtEdXJhdGlvbnxPYmplY3R8bnVtYmVyfSBkdXJhdGlvbiAtIFRoZSBhbW91bnQgdG8gYWRkLiBFaXRoZXIgYSBMdXhvbiBEdXJhdGlvbiwgYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLCB0aGUgb2JqZWN0IGFyZ3VtZW50IHRvIER1cmF0aW9uLmZyb21PYmplY3QoKVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIHBsdXMoZHVyYXRpb24pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG5cbiAgICBjb25zdCBkdXIgPSBEdXJhdGlvbi5mcm9tRHVyYXRpb25MaWtlKGR1cmF0aW9uKSxcbiAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgZm9yIChjb25zdCBrIG9mIG9yZGVyZWRVbml0cykge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5KGR1ci52YWx1ZXMsIGspIHx8IGhhc093blByb3BlcnR5KHRoaXMudmFsdWVzLCBrKSkge1xuICAgICAgICByZXN1bHRba10gPSBkdXIuZ2V0KGspICsgdGhpcy5nZXQoayk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIHsgdmFsdWVzOiByZXN1bHQgfSwgdHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogTWFrZSB0aGlzIER1cmF0aW9uIHNob3J0ZXIgYnkgdGhlIHNwZWNpZmllZCBhbW91bnQuIFJldHVybiBhIG5ld2x5LWNvbnN0cnVjdGVkIER1cmF0aW9uLlxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGFtb3VudCB0byBzdWJ0cmFjdC4gRWl0aGVyIGEgTHV4b24gRHVyYXRpb24sIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgdGhlIG9iamVjdCBhcmd1bWVudCB0byBEdXJhdGlvbi5mcm9tT2JqZWN0KClcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBtaW51cyhkdXJhdGlvbikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcblxuICAgIGNvbnN0IGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pO1xuICAgIHJldHVybiB0aGlzLnBsdXMoZHVyLm5lZ2F0ZSgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZSB0aGlzIER1cmF0aW9uIGJ5IHRoZSBzcGVjaWZpZWQgYW1vdW50LiBSZXR1cm4gYSBuZXdseS1jb25zdHJ1Y3RlZCBEdXJhdGlvbi5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gZm4gLSBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgdG8gZWFjaCB1bml0LiBBcml0eSBpcyAxIG9yIDI6IHRoZSB2YWx1ZSBvZiB0aGUgdW5pdCBhbmQsIG9wdGlvbmFsbHksIHRoZSB1bml0IG5hbWUuIE11c3QgcmV0dXJuIGEgbnVtYmVyLlxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDEsIG1pbnV0ZXM6IDMwIH0pLm1hcFVuaXRzKHggPT4geCAqIDIpIC8vPT4geyBob3VyczogMiwgbWludXRlczogNjAgfVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDEsIG1pbnV0ZXM6IDMwIH0pLm1hcFVuaXRzKCh4LCB1KSA9PiB1ID09PSBcImhvdXJzXCIgPyB4ICogMiA6IHgpIC8vPT4geyBob3VyczogMiwgbWludXRlczogMzAgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIG1hcFVuaXRzKGZuKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgayBvZiBPYmplY3Qua2V5cyh0aGlzLnZhbHVlcykpIHtcbiAgICAgIHJlc3VsdFtrXSA9IGFzTnVtYmVyKGZuKHRoaXMudmFsdWVzW2tdLCBrKSk7XG4gICAgfVxuICAgIHJldHVybiBjbG9uZSh0aGlzLCB7IHZhbHVlczogcmVzdWx0IH0sIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgdmFsdWUgb2YgdW5pdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSBhIHVuaXQgc3VjaCBhcyAnbWludXRlJyBvciAnZGF5J1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHt5ZWFyczogMiwgZGF5czogM30pLmdldCgneWVhcnMnKSAvLz0+IDJcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7eWVhcnM6IDIsIGRheXM6IDN9KS5nZXQoJ21vbnRocycpIC8vPT4gMFxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHt5ZWFyczogMiwgZGF5czogM30pLmdldCgnZGF5cycpIC8vPT4gM1xuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXQodW5pdCkge1xuICAgIHJldHVybiB0aGlzW0R1cmF0aW9uLm5vcm1hbGl6ZVVuaXQodW5pdCldO1xuICB9XG5cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIHZhbHVlcyBvZiBzcGVjaWZpZWQgdW5pdHMuIFJldHVybiBhIG5ld2x5LWNvbnN0cnVjdGVkIER1cmF0aW9uLlxuICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWVzIC0gYSBtYXBwaW5nIG9mIHVuaXRzIHRvIG51bWJlcnNcbiAgICogQGV4YW1wbGUgZHVyLnNldCh7IHllYXJzOiAyMDE3IH0pXG4gICAqIEBleGFtcGxlIGR1ci5zZXQoeyBob3VyczogOCwgbWludXRlczogMzAgfSlcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBzZXQodmFsdWVzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuXG4gICAgY29uc3QgbWl4ZWQgPSB7IC4uLnRoaXMudmFsdWVzLCAuLi5ub3JtYWxpemVPYmplY3QodmFsdWVzLCBEdXJhdGlvbi5ub3JtYWxpemVVbml0KSB9O1xuICAgIHJldHVybiBjbG9uZSh0aGlzLCB7IHZhbHVlczogbWl4ZWQgfSk7XG4gIH1cblxuICAvKipcbiAgICogXCJTZXRcIiB0aGUgbG9jYWxlIGFuZC9vciBudW1iZXJpbmdTeXN0ZW0uICBSZXR1cm5zIGEgbmV3bHktY29uc3RydWN0ZWQgRHVyYXRpb24uXG4gICAqIEBleGFtcGxlIGR1ci5yZWNvbmZpZ3VyZSh7IGxvY2FsZTogJ2VuLUdCJyB9KVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIHJlY29uZmlndXJlKHsgbG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIGNvbnZlcnNpb25BY2N1cmFjeSwgbWF0cml4IH0gPSB7fSkge1xuICAgIGNvbnN0IGxvYyA9IHRoaXMubG9jLmNsb25lKHsgbG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0gfSk7XG4gICAgY29uc3Qgb3B0cyA9IHsgbG9jLCBtYXRyaXgsIGNvbnZlcnNpb25BY2N1cmFjeSB9O1xuICAgIHJldHVybiBjbG9uZSh0aGlzLCBvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgZHVyYXRpb24gaW4gdGhlIHNwZWNpZmllZCB1bml0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIGEgdW5pdCBzdWNoIGFzICdtaW51dGVzJyBvciAnZGF5cydcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7eWVhcnM6IDF9KS5hcygnZGF5cycpIC8vPT4gMzY1XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3Qoe3llYXJzOiAxfSkuYXMoJ21vbnRocycpIC8vPT4gMTJcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7aG91cnM6IDYwfSkuYXMoJ2RheXMnKSAvLz0+IDIuNVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBhcyh1bml0KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuc2hpZnRUbyh1bml0KS5nZXQodW5pdCkgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogUmVkdWNlIHRoaXMgRHVyYXRpb24gdG8gaXRzIGNhbm9uaWNhbCByZXByZXNlbnRhdGlvbiBpbiBpdHMgY3VycmVudCB1bml0cy5cbiAgICogQXNzdW1pbmcgdGhlIG92ZXJhbGwgdmFsdWUgb2YgdGhlIER1cmF0aW9uIGlzIHBvc2l0aXZlLCB0aGlzIG1lYW5zOlxuICAgKiAtIGV4Y2Vzc2l2ZSB2YWx1ZXMgZm9yIGxvd2VyLW9yZGVyIHVuaXRzIGFyZSBjb252ZXJ0ZWQgdG8gaGlnaGVyLW9yZGVyIHVuaXRzIChpZiBwb3NzaWJsZSwgc2VlIGZpcnN0IGFuZCBzZWNvbmQgZXhhbXBsZSlcbiAgICogLSBuZWdhdGl2ZSBsb3dlci1vcmRlciB1bml0cyBhcmUgY29udmVydGVkIHRvIGhpZ2hlciBvcmRlciB1bml0cyAodGhlcmUgbXVzdCBiZSBzdWNoIGEgaGlnaGVyIG9yZGVyIHVuaXQsIG90aGVyd2lzZVxuICAgKiAgIHRoZSBvdmVyYWxsIHZhbHVlIHdvdWxkIGJlIG5lZ2F0aXZlLCBzZWUgdGhpcmQgZXhhbXBsZSlcbiAgICogLSBmcmFjdGlvbmFsIHZhbHVlcyBmb3IgaGlnaGVyLW9yZGVyIHVuaXRzIGFyZSBjb252ZXJ0ZWQgdG8gbG93ZXItb3JkZXIgdW5pdHMgKGlmIHBvc3NpYmxlLCBzZWUgZm91cnRoIGV4YW1wbGUpXG4gICAqXG4gICAqIElmIHRoZSBvdmVyYWxsIHZhbHVlIGlzIG5lZ2F0aXZlLCB0aGUgcmVzdWx0IG9mIHRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYHRoaXMubmVnYXRlKCkubm9ybWFsaXplKCkubmVnYXRlKClgLlxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgeWVhcnM6IDIsIGRheXM6IDUwMDAgfSkubm9ybWFsaXplKCkudG9PYmplY3QoKSAvLz0+IHsgeWVhcnM6IDE1LCBkYXlzOiAyNTUgfVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgZGF5czogNTAwMCB9KS5ub3JtYWxpemUoKS50b09iamVjdCgpIC8vPT4geyBkYXlzOiA1MDAwIH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxMiwgbWludXRlczogLTQ1IH0pLm5vcm1hbGl6ZSgpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAxMSwgbWludXRlczogMTUgfVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgeWVhcnM6IDIuNSwgZGF5czogMCwgaG91cnM6IDAgfSkubm9ybWFsaXplKCkudG9PYmplY3QoKSAvLz0+IHsgeWVhcnM6IDIsIGRheXM6IDE4MiwgaG91cnM6IDEyIH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBub3JtYWxpemUoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IHZhbHMgPSB0aGlzLnRvT2JqZWN0KCk7XG4gICAgbm9ybWFsaXplVmFsdWVzKHRoaXMubWF0cml4LCB2YWxzKTtcbiAgICByZXR1cm4gY2xvbmUodGhpcywgeyB2YWx1ZXM6IHZhbHMgfSwgdHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogUmVzY2FsZSB1bml0cyB0byBpdHMgbGFyZ2VzdCByZXByZXNlbnRhdGlvblxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgbWlsbGlzZWNvbmRzOiA5MDAwMCB9KS5yZXNjYWxlKCkudG9PYmplY3QoKSAvLz0+IHsgbWludXRlczogMSwgc2Vjb25kczogMzAgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIHJlc2NhbGUoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IHZhbHMgPSByZW1vdmVaZXJvZXModGhpcy5ub3JtYWxpemUoKS5zaGlmdFRvQWxsKCkudG9PYmplY3QoKSk7XG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIHsgdmFsdWVzOiB2YWxzIH0sIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgdGhpcyBEdXJhdGlvbiBpbnRvIGl0cyByZXByZXNlbnRhdGlvbiBpbiBhIGRpZmZlcmVudCBzZXQgb2YgdW5pdHMuXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMSwgc2Vjb25kczogMzAgfSkuc2hpZnRUbygnbWludXRlcycsICdtaWxsaXNlY29uZHMnKS50b09iamVjdCgpIC8vPT4geyBtaW51dGVzOiA2MCwgbWlsbGlzZWNvbmRzOiAzMDAwMCB9XG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgc2hpZnRUbyguLi51bml0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcblxuICAgIGlmICh1bml0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHVuaXRzID0gdW5pdHMubWFwKCh1KSA9PiBEdXJhdGlvbi5ub3JtYWxpemVVbml0KHUpKTtcblxuICAgIGNvbnN0IGJ1aWx0ID0ge30sXG4gICAgICBhY2N1bXVsYXRlZCA9IHt9LFxuICAgICAgdmFscyA9IHRoaXMudG9PYmplY3QoKTtcbiAgICBsZXQgbGFzdFVuaXQ7XG5cbiAgICBmb3IgKGNvbnN0IGsgb2Ygb3JkZXJlZFVuaXRzKSB7XG4gICAgICBpZiAodW5pdHMuaW5kZXhPZihrKSA+PSAwKSB7XG4gICAgICAgIGxhc3RVbml0ID0gaztcblxuICAgICAgICBsZXQgb3duID0gMDtcblxuICAgICAgICAvLyBhbnl0aGluZyB3ZSBoYXZlbid0IGJvaWxlZCBkb3duIHlldCBzaG91bGQgZ2V0IGJvaWxlZCB0byB0aGlzIHVuaXRcbiAgICAgICAgZm9yIChjb25zdCBhayBpbiBhY2N1bXVsYXRlZCkge1xuICAgICAgICAgIG93biArPSB0aGlzLm1hdHJpeFtha11ba10gKiBhY2N1bXVsYXRlZFtha107XG4gICAgICAgICAgYWNjdW11bGF0ZWRbYWtdID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHBsdXMgYW55dGhpbmcgdGhhdCdzIGFscmVhZHkgaW4gdGhpcyB1bml0XG4gICAgICAgIGlmIChpc051bWJlcih2YWxzW2tdKSkge1xuICAgICAgICAgIG93biArPSB2YWxzW2tdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gb25seSBrZWVwIHRoZSBpbnRlZ2VyIHBhcnQgZm9yIG5vdyBpbiB0aGUgaG9wZXMgb2YgcHV0dGluZyBhbnkgZGVjaW1hbCBwYXJ0XG4gICAgICAgIC8vIGludG8gYSBzbWFsbGVyIHVuaXQgbGF0ZXJcbiAgICAgICAgY29uc3QgaSA9IE1hdGgudHJ1bmMob3duKTtcbiAgICAgICAgYnVpbHRba10gPSBpO1xuICAgICAgICBhY2N1bXVsYXRlZFtrXSA9IChvd24gKiAxMDAwIC0gaSAqIDEwMDApIC8gMTAwMDtcblxuICAgICAgICAvLyBvdGhlcndpc2UsIGtlZXAgaXQgaW4gdGhlIHdpbmdzIHRvIGJvaWwgaXQgbGF0ZXJcbiAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIodmFsc1trXSkpIHtcbiAgICAgICAgYWNjdW11bGF0ZWRba10gPSB2YWxzW2tdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFueXRoaW5nIGxlZnRvdmVyIGJlY29tZXMgdGhlIGRlY2ltYWwgZm9yIHRoZSBsYXN0IHVuaXRcbiAgICAvLyBsYXN0VW5pdCBtdXN0IGJlIGRlZmluZWQgc2luY2UgdW5pdHMgaXMgbm90IGVtcHR5XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYWNjdW11bGF0ZWQpIHtcbiAgICAgIGlmIChhY2N1bXVsYXRlZFtrZXldICE9PSAwKSB7XG4gICAgICAgIGJ1aWx0W2xhc3RVbml0XSArPVxuICAgICAgICAgIGtleSA9PT0gbGFzdFVuaXQgPyBhY2N1bXVsYXRlZFtrZXldIDogYWNjdW11bGF0ZWRba2V5XSAvIHRoaXMubWF0cml4W2xhc3RVbml0XVtrZXldO1xuICAgICAgfVxuICAgIH1cblxuICAgIG5vcm1hbGl6ZVZhbHVlcyh0aGlzLm1hdHJpeCwgYnVpbHQpO1xuICAgIHJldHVybiBjbG9uZSh0aGlzLCB7IHZhbHVlczogYnVpbHQgfSwgdHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogU2hpZnQgdGhpcyBEdXJhdGlvbiB0byBhbGwgYXZhaWxhYmxlIHVuaXRzLlxuICAgKiBTYW1lIGFzIHNoaWZ0VG8oXCJ5ZWFyc1wiLCBcIm1vbnRoc1wiLCBcIndlZWtzXCIsIFwiZGF5c1wiLCBcImhvdXJzXCIsIFwibWludXRlc1wiLCBcInNlY29uZHNcIiwgXCJtaWxsaXNlY29uZHNcIilcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBzaGlmdFRvQWxsKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICByZXR1cm4gdGhpcy5zaGlmdFRvKFxuICAgICAgXCJ5ZWFyc1wiLFxuICAgICAgXCJtb250aHNcIixcbiAgICAgIFwid2Vla3NcIixcbiAgICAgIFwiZGF5c1wiLFxuICAgICAgXCJob3Vyc1wiLFxuICAgICAgXCJtaW51dGVzXCIsXG4gICAgICBcInNlY29uZHNcIixcbiAgICAgIFwibWlsbGlzZWNvbmRzXCJcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbmVnYXRpdmUgb2YgdGhpcyBEdXJhdGlvbi5cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxLCBzZWNvbmRzOiAzMCB9KS5uZWdhdGUoKS50b09iamVjdCgpIC8vPT4geyBob3VyczogLTEsIHNlY29uZHM6IC0zMCB9XG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgbmVnYXRlKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCBuZWdhdGVkID0ge307XG4gICAgZm9yIChjb25zdCBrIG9mIE9iamVjdC5rZXlzKHRoaXMudmFsdWVzKSkge1xuICAgICAgbmVnYXRlZFtrXSA9IHRoaXMudmFsdWVzW2tdID09PSAwID8gMCA6IC10aGlzLnZhbHVlc1trXTtcbiAgICB9XG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIHsgdmFsdWVzOiBuZWdhdGVkIH0sIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgeWVhcnMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgeWVhcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLnllYXJzIHx8IDAgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBxdWFydGVycy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBxdWFydGVycygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMucXVhcnRlcnMgfHwgMCA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG1vbnRocy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBtb250aHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLm1vbnRocyB8fCAwIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgd2Vla3NcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCB3ZWVrcygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMud2Vla3MgfHwgMCA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGRheXMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgZGF5cygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMuZGF5cyB8fCAwIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgaG91cnMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgaG91cnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLmhvdXJzIHx8IDAgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBtaW51dGVzLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IG1pbnV0ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLm1pbnV0ZXMgfHwgMCA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHNlY29uZHMuXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldCBzZWNvbmRzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5zZWNvbmRzIHx8IDAgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBtaWxsaXNlY29uZHMuXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldCBtaWxsaXNlY29uZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLm1pbGxpc2Vjb25kcyB8fCAwIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgRHVyYXRpb24gaXMgaW52YWxpZC4gSW52YWxpZCBkdXJhdGlvbnMgYXJlIHJldHVybmVkIGJ5IGRpZmYgb3BlcmF0aW9uc1xuICAgKiBvbiBpbnZhbGlkIERhdGVUaW1lcyBvciBJbnRlcnZhbHMuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkID09PSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gZXJyb3IgY29kZSBpZiB0aGlzIER1cmF0aW9uIGJlY2FtZSBpbnZhbGlkLCBvciBudWxsIGlmIHRoZSBEdXJhdGlvbiBpcyB2YWxpZFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgaW52YWxpZFJlYXNvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkID8gdGhpcy5pbnZhbGlkLnJlYXNvbiA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBleHBsYW5hdGlvbiBvZiB3aHkgdGhpcyBEdXJhdGlvbiBiZWNhbWUgaW52YWxpZCwgb3IgbnVsbCBpZiB0aGUgRHVyYXRpb24gaXMgdmFsaWRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBpbnZhbGlkRXhwbGFuYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5leHBsYW5hdGlvbiA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogRXF1YWxpdHkgY2hlY2tcbiAgICogVHdvIER1cmF0aW9ucyBhcmUgZXF1YWwgaWZmIHRoZXkgaGF2ZSB0aGUgc2FtZSB1bml0cyBhbmQgdGhlIHNhbWUgdmFsdWVzIGZvciBlYWNoIHVuaXQuXG4gICAqIEBwYXJhbSB7RHVyYXRpb259IG90aGVyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBlcXVhbHMob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCB8fCAhb3RoZXIuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5sb2MuZXF1YWxzKG90aGVyLmxvYykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcSh2MSwgdjIpIHtcbiAgICAgIC8vIENvbnNpZGVyIDAgYW5kIHVuZGVmaW5lZCBhcyBlcXVhbFxuICAgICAgaWYgKHYxID09PSB1bmRlZmluZWQgfHwgdjEgPT09IDApIHJldHVybiB2MiA9PT0gdW5kZWZpbmVkIHx8IHYyID09PSAwO1xuICAgICAgcmV0dXJuIHYxID09PSB2MjtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHUgb2Ygb3JkZXJlZFVuaXRzKSB7XG4gICAgICBpZiAoIWVxKHRoaXMudmFsdWVzW3VdLCBvdGhlci52YWx1ZXNbdV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbiIsICJpbXBvcnQgRGF0ZVRpbWUsIHsgZnJpZW5kbHlEYXRlVGltZSB9IGZyb20gXCIuL2RhdGV0aW1lLmpzXCI7XG5pbXBvcnQgRHVyYXRpb24gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcbmltcG9ydCBTZXR0aW5ncyBmcm9tIFwiLi9zZXR0aW5ncy5qc1wiO1xuaW1wb3J0IHsgSW52YWxpZEFyZ3VtZW50RXJyb3IsIEludmFsaWRJbnRlcnZhbEVycm9yIH0gZnJvbSBcIi4vZXJyb3JzLmpzXCI7XG5pbXBvcnQgSW52YWxpZCBmcm9tIFwiLi9pbXBsL2ludmFsaWQuanNcIjtcbmltcG9ydCBGb3JtYXR0ZXIgZnJvbSBcIi4vaW1wbC9mb3JtYXR0ZXIuanNcIjtcbmltcG9ydCAqIGFzIEZvcm1hdHMgZnJvbSBcIi4vaW1wbC9mb3JtYXRzLmpzXCI7XG5cbmNvbnN0IElOVkFMSUQgPSBcIkludmFsaWQgSW50ZXJ2YWxcIjtcblxuLy8gY2hlY2tzIGlmIHRoZSBzdGFydCBpcyBlcXVhbCB0byBvciBiZWZvcmUgdGhlIGVuZFxuZnVuY3Rpb24gdmFsaWRhdGVTdGFydEVuZChzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQgfHwgIXN0YXJ0LmlzVmFsaWQpIHtcbiAgICByZXR1cm4gSW50ZXJ2YWwuaW52YWxpZChcIm1pc3Npbmcgb3IgaW52YWxpZCBzdGFydFwiKTtcbiAgfSBlbHNlIGlmICghZW5kIHx8ICFlbmQuaXNWYWxpZCkge1xuICAgIHJldHVybiBJbnRlcnZhbC5pbnZhbGlkKFwibWlzc2luZyBvciBpbnZhbGlkIGVuZFwiKTtcbiAgfSBlbHNlIGlmIChlbmQgPCBzdGFydCkge1xuICAgIHJldHVybiBJbnRlcnZhbC5pbnZhbGlkKFxuICAgICAgXCJlbmQgYmVmb3JlIHN0YXJ0XCIsXG4gICAgICBgVGhlIGVuZCBvZiBhbiBpbnRlcnZhbCBtdXN0IGJlIGFmdGVyIGl0cyBzdGFydCwgYnV0IHlvdSBoYWQgc3RhcnQ9JHtzdGFydC50b0lTTygpfSBhbmQgZW5kPSR7ZW5kLnRvSVNPKCl9YFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBBbiBJbnRlcnZhbCBvYmplY3QgcmVwcmVzZW50cyBhIGhhbGYtb3BlbiBpbnRlcnZhbCBvZiB0aW1lLCB3aGVyZSBlYWNoIGVuZHBvaW50IGlzIGEge0BsaW5rIERhdGVUaW1lfS4gQ29uY2VwdHVhbGx5LCBpdCdzIGEgY29udGFpbmVyIGZvciB0aG9zZSB0d28gZW5kcG9pbnRzLCBhY2NvbXBhbmllZCBieSBtZXRob2RzIGZvciBjcmVhdGluZywgcGFyc2luZywgaW50ZXJyb2dhdGluZywgY29tcGFyaW5nLCB0cmFuc2Zvcm1pbmcsIGFuZCBmb3JtYXR0aW5nIHRoZW0uXG4gKlxuICogSGVyZSBpcyBhIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBtb3N0IGNvbW1vbmx5IHVzZWQgbWV0aG9kcyBhbmQgZ2V0dGVycyBpbiBJbnRlcnZhbDpcbiAqXG4gKiAqICoqQ3JlYXRpb24qKiBUbyBjcmVhdGUgYW4gSW50ZXJ2YWwsIHVzZSB7QGxpbmsgSW50ZXJ2YWwuZnJvbURhdGVUaW1lc30sIHtAbGluayBJbnRlcnZhbC5hZnRlcn0sIHtAbGluayBJbnRlcnZhbC5iZWZvcmV9LCBvciB7QGxpbmsgSW50ZXJ2YWwuZnJvbUlTT30uXG4gKiAqICoqQWNjZXNzb3JzKiogVXNlIHtAbGluayBJbnRlcnZhbCNzdGFydH0gYW5kIHtAbGluayBJbnRlcnZhbCNlbmR9IHRvIGdldCB0aGUgc3RhcnQgYW5kIGVuZC5cbiAqICogKipJbnRlcnJvZ2F0aW9uKiogVG8gYW5hbHl6ZSB0aGUgSW50ZXJ2YWwsIHVzZSB7QGxpbmsgSW50ZXJ2YWwjY291bnR9LCB7QGxpbmsgSW50ZXJ2YWwjbGVuZ3RofSwge0BsaW5rIEludGVydmFsI2hhc1NhbWV9LCB7QGxpbmsgSW50ZXJ2YWwjY29udGFpbnN9LCB7QGxpbmsgSW50ZXJ2YWwjaXNBZnRlcn0sIG9yIHtAbGluayBJbnRlcnZhbCNpc0JlZm9yZX0uXG4gKiAqICoqVHJhbnNmb3JtYXRpb24qKiBUbyBjcmVhdGUgb3RoZXIgSW50ZXJ2YWxzIG91dCBvZiB0aGlzIG9uZSwgdXNlIHtAbGluayBJbnRlcnZhbCNzZXR9LCB7QGxpbmsgSW50ZXJ2YWwjc3BsaXRBdH0sIHtAbGluayBJbnRlcnZhbCNzcGxpdEJ5fSwge0BsaW5rIEludGVydmFsI2RpdmlkZUVxdWFsbHl9LCB7QGxpbmsgSW50ZXJ2YWwubWVyZ2V9LCB7QGxpbmsgSW50ZXJ2YWwueG9yfSwge0BsaW5rIEludGVydmFsI3VuaW9ufSwge0BsaW5rIEludGVydmFsI2ludGVyc2VjdGlvbn0sIG9yIHtAbGluayBJbnRlcnZhbCNkaWZmZXJlbmNlfS5cbiAqICogKipDb21wYXJpc29uKiogVG8gY29tcGFyZSB0aGlzIEludGVydmFsIHRvIGFub3RoZXIgb25lLCB1c2Uge0BsaW5rIEludGVydmFsI2VxdWFsc30sIHtAbGluayBJbnRlcnZhbCNvdmVybGFwc30sIHtAbGluayBJbnRlcnZhbCNhYnV0c1N0YXJ0fSwge0BsaW5rIEludGVydmFsI2FidXRzRW5kfSwge0BsaW5rIEludGVydmFsI2VuZ3VsZnN9XG4gKiAqICoqT3V0cHV0KiogVG8gY29udmVydCB0aGUgSW50ZXJ2YWwgaW50byBvdGhlciByZXByZXNlbnRhdGlvbnMsIHNlZSB7QGxpbmsgSW50ZXJ2YWwjdG9TdHJpbmd9LCB7QGxpbmsgSW50ZXJ2YWwjdG9Mb2NhbGVTdHJpbmd9LCB7QGxpbmsgSW50ZXJ2YWwjdG9JU099LCB7QGxpbmsgSW50ZXJ2YWwjdG9JU09EYXRlfSwge0BsaW5rIEludGVydmFsI3RvSVNPVGltZX0sIHtAbGluayBJbnRlcnZhbCN0b0Zvcm1hdH0sIGFuZCB7QGxpbmsgSW50ZXJ2YWwjdG9EdXJhdGlvbn0uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludGVydmFsIHtcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLnMgPSBjb25maWcuc3RhcnQ7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5lID0gY29uZmlnLmVuZDtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmludmFsaWQgPSBjb25maWcuaW52YWxpZCB8fCBudWxsO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuaXNMdXhvbkludGVydmFsID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW52YWxpZCBJbnRlcnZhbC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiAtIHNpbXBsZSBzdHJpbmcgb2Ygd2h5IHRoaXMgSW50ZXJ2YWwgaXMgaW52YWxpZC4gU2hvdWxkIG5vdCBjb250YWluIHBhcmFtZXRlcnMgb3IgYW55dGhpbmcgZWxzZSBkYXRhLWRlcGVuZGVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2V4cGxhbmF0aW9uPW51bGxdIC0gbG9uZ2VyIGV4cGxhbmF0aW9uLCBtYXkgaW5jbHVkZSBwYXJhbWV0ZXJzIGFuZCBvdGhlciB1c2VmdWwgZGVidWdnaW5nIGluZm9ybWF0aW9uXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cbiAgc3RhdGljIGludmFsaWQocmVhc29uLCBleHBsYW5hdGlvbiA9IG51bGwpIHtcbiAgICBpZiAoIXJlYXNvbikge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwibmVlZCB0byBzcGVjaWZ5IGEgcmVhc29uIHRoZSBJbnRlcnZhbCBpcyBpbnZhbGlkXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGludmFsaWQgPSByZWFzb24gaW5zdGFuY2VvZiBJbnZhbGlkID8gcmVhc29uIDogbmV3IEludmFsaWQocmVhc29uLCBleHBsYW5hdGlvbik7XG5cbiAgICBpZiAoU2V0dGluZ3MudGhyb3dPbkludmFsaWQpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkSW50ZXJ2YWxFcnJvcihpbnZhbGlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBJbnRlcnZhbCh7IGludmFsaWQgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBJbnRlcnZhbCBmcm9tIGEgc3RhcnQgRGF0ZVRpbWUgYW5kIGFuIGVuZCBEYXRlVGltZS4gSW5jbHVzaXZlIG9mIHRoZSBzdGFydCBidXQgbm90IHRoZSBlbmQuXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV8RGF0ZXxPYmplY3R9IHN0YXJ0XG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV8RGF0ZXxPYmplY3R9IGVuZFxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG4gIHN0YXRpYyBmcm9tRGF0ZVRpbWVzKHN0YXJ0LCBlbmQpIHtcbiAgICBjb25zdCBidWlsdFN0YXJ0ID0gZnJpZW5kbHlEYXRlVGltZShzdGFydCksXG4gICAgICBidWlsdEVuZCA9IGZyaWVuZGx5RGF0ZVRpbWUoZW5kKTtcblxuICAgIGNvbnN0IHZhbGlkYXRlRXJyb3IgPSB2YWxpZGF0ZVN0YXJ0RW5kKGJ1aWx0U3RhcnQsIGJ1aWx0RW5kKTtcblxuICAgIGlmICh2YWxpZGF0ZUVycm9yID09IG51bGwpIHtcbiAgICAgIHJldHVybiBuZXcgSW50ZXJ2YWwoe1xuICAgICAgICBzdGFydDogYnVpbHRTdGFydCxcbiAgICAgICAgZW5kOiBidWlsdEVuZCxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdmFsaWRhdGVFcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIEludGVydmFsIGZyb20gYSBzdGFydCBEYXRlVGltZSBhbmQgYSBEdXJhdGlvbiB0byBleHRlbmQgdG8uXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV8RGF0ZXxPYmplY3R9IHN0YXJ0XG4gICAqIEBwYXJhbSB7RHVyYXRpb258T2JqZWN0fG51bWJlcn0gZHVyYXRpb24gLSB0aGUgbGVuZ3RoIG9mIHRoZSBJbnRlcnZhbC5cbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuICBzdGF0aWMgYWZ0ZXIoc3RhcnQsIGR1cmF0aW9uKSB7XG4gICAgY29uc3QgZHVyID0gRHVyYXRpb24uZnJvbUR1cmF0aW9uTGlrZShkdXJhdGlvbiksXG4gICAgICBkdCA9IGZyaWVuZGx5RGF0ZVRpbWUoc3RhcnQpO1xuICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0LCBkdC5wbHVzKGR1cikpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBJbnRlcnZhbCBmcm9tIGFuIGVuZCBEYXRlVGltZSBhbmQgYSBEdXJhdGlvbiB0byBleHRlbmQgYmFja3dhcmRzIHRvLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfERhdGV8T2JqZWN0fSBlbmRcbiAgICogQHBhcmFtIHtEdXJhdGlvbnxPYmplY3R8bnVtYmVyfSBkdXJhdGlvbiAtIHRoZSBsZW5ndGggb2YgdGhlIEludGVydmFsLlxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG4gIHN0YXRpYyBiZWZvcmUoZW5kLCBkdXJhdGlvbikge1xuICAgIGNvbnN0IGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pLFxuICAgICAgZHQgPSBmcmllbmRseURhdGVUaW1lKGVuZCk7XG4gICAgcmV0dXJuIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQubWludXMoZHVyKSwgZHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBJbnRlcnZhbCBmcm9tIGFuIElTTyA4NjAxIHN0cmluZy5cbiAgICogQWNjZXB0cyBgPHN0YXJ0Pi88ZW5kPmAsIGA8c3RhcnQ+LzxkdXJhdGlvbj5gLCBhbmQgYDxkdXJhdGlvbj4vPGVuZD5gIGZvcm1hdHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIElTTyBzdHJpbmcgdG8gcGFyc2VcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXSAtIG9wdGlvbnMgdG8gcGFzcyB7QGxpbmsgRGF0ZVRpbWUjZnJvbUlTT30gYW5kIG9wdGlvbmFsbHkge0BsaW5rIER1cmF0aW9uI2Zyb21JU099XG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZV9pbnRlcnZhbHNcbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuICBzdGF0aWMgZnJvbUlTTyh0ZXh0LCBvcHRzKSB7XG4gICAgY29uc3QgW3MsIGVdID0gKHRleHQgfHwgXCJcIikuc3BsaXQoXCIvXCIsIDIpO1xuICAgIGlmIChzICYmIGUpIHtcbiAgICAgIGxldCBzdGFydCwgc3RhcnRJc1ZhbGlkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RhcnQgPSBEYXRlVGltZS5mcm9tSVNPKHMsIG9wdHMpO1xuICAgICAgICBzdGFydElzVmFsaWQgPSBzdGFydC5pc1ZhbGlkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBzdGFydElzVmFsaWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgbGV0IGVuZCwgZW5kSXNWYWxpZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGVuZCA9IERhdGVUaW1lLmZyb21JU08oZSwgb3B0cyk7XG4gICAgICAgIGVuZElzVmFsaWQgPSBlbmQuaXNWYWxpZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZW5kSXNWYWxpZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhcnRJc1ZhbGlkICYmIGVuZElzVmFsaWQpIHtcbiAgICAgICAgcmV0dXJuIEludGVydmFsLmZyb21EYXRlVGltZXMoc3RhcnQsIGVuZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGFydElzVmFsaWQpIHtcbiAgICAgICAgY29uc3QgZHVyID0gRHVyYXRpb24uZnJvbUlTTyhlLCBvcHRzKTtcbiAgICAgICAgaWYgKGR1ci5pc1ZhbGlkKSB7XG4gICAgICAgICAgcmV0dXJuIEludGVydmFsLmFmdGVyKHN0YXJ0LCBkdXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGVuZElzVmFsaWQpIHtcbiAgICAgICAgY29uc3QgZHVyID0gRHVyYXRpb24uZnJvbUlTTyhzLCBvcHRzKTtcbiAgICAgICAgaWYgKGR1ci5pc1ZhbGlkKSB7XG4gICAgICAgICAgcmV0dXJuIEludGVydmFsLmJlZm9yZShlbmQsIGR1cik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIEludGVydmFsLmludmFsaWQoXCJ1bnBhcnNhYmxlXCIsIGB0aGUgaW5wdXQgXCIke3RleHR9XCIgY2FuJ3QgYmUgcGFyc2VkIGFzIElTTyA4NjAxYCk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gb2JqZWN0IGlzIGFuIEludGVydmFsLiBXb3JrcyBhY3Jvc3MgY29udGV4dCBib3VuZGFyaWVzXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaXNJbnRlcnZhbChvKSB7XG4gICAgcmV0dXJuIChvICYmIG8uaXNMdXhvbkludGVydmFsKSB8fCBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzdGFydCBvZiB0aGUgSW50ZXJ2YWxcbiAgICogQHR5cGUge0RhdGVUaW1lfVxuICAgKi9cbiAgZ2V0IHN0YXJ0KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnMgOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGVuZCBvZiB0aGUgSW50ZXJ2YWxcbiAgICogQHR5cGUge0RhdGVUaW1lfVxuICAgKi9cbiAgZ2V0IGVuZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5lIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIGVuZCBpcyBhdCBsZWFzdCBpdHMgc3RhcnQsIG1lYW5pbmcgdGhhdCB0aGUgSW50ZXJ2YWwgaXNuJ3QgJ2JhY2t3YXJkcycuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZFJlYXNvbiA9PT0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGVycm9yIGNvZGUgaWYgdGhpcyBJbnRlcnZhbCBpcyBpbnZhbGlkLCBvciBudWxsIGlmIHRoZSBJbnRlcnZhbCBpcyB2YWxpZFxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IGludmFsaWRSZWFzb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5yZWFzb24gOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gZXhwbGFuYXRpb24gb2Ygd2h5IHRoaXMgSW50ZXJ2YWwgYmVjYW1lIGludmFsaWQsIG9yIG51bGwgaWYgdGhlIEludGVydmFsIGlzIHZhbGlkXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgaW52YWxpZEV4cGxhbmF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmludmFsaWQgPyB0aGlzLmludmFsaWQuZXhwbGFuYXRpb24gOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgSW50ZXJ2YWwgaW4gdGhlIHNwZWNpZmllZCB1bml0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIHRoZSB1bml0IChzdWNoIGFzICdob3Vycycgb3IgJ2RheXMnKSB0byByZXR1cm4gdGhlIGxlbmd0aCBpbi5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgbGVuZ3RoKHVuaXQgPSBcIm1pbGxpc2Vjb25kc1wiKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudG9EdXJhdGlvbiguLi5bdW5pdF0pLmdldCh1bml0KSA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjb3VudCBvZiBtaW51dGVzLCBob3VycywgZGF5cywgbW9udGhzLCBvciB5ZWFycyBpbmNsdWRlZCBpbiB0aGUgSW50ZXJ2YWwsIGV2ZW4gaW4gcGFydC5cbiAgICogVW5saWtlIHtAbGluayBJbnRlcnZhbCNsZW5ndGh9IHRoaXMgY291bnRzIHNlY3Rpb25zIG9mIHRoZSBjYWxlbmRhciwgbm90IHBlcmlvZHMgb2YgdGltZSwgZS5nLiBzcGVjaWZ5aW5nICdkYXknXG4gICAqIGFza3MgJ3doYXQgZGF0ZXMgYXJlIGluY2x1ZGVkIGluIHRoaXMgaW50ZXJ2YWw/Jywgbm90ICdob3cgbWFueSBkYXlzIGxvbmcgaXMgdGhpcyBpbnRlcnZhbD8nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdW5pdD0nbWlsbGlzZWNvbmRzJ10gLSB0aGUgdW5pdCBvZiB0aW1lIHRvIGNvdW50LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy51c2VMb2NhbGVXZWVrcz1mYWxzZV0gLSBJZiB0cnVlLCB1c2Ugd2Vla3MgYmFzZWQgb24gdGhlIGxvY2FsZSwgaS5lLiB1c2UgdGhlIGxvY2FsZS1kZXBlbmRlbnQgc3RhcnQgb2YgdGhlIHdlZWs7IHRoaXMgb3BlcmF0aW9uIHdpbGwgYWx3YXlzIHVzZSB0aGUgbG9jYWxlIG9mIHRoZSBzdGFydCBEYXRlVGltZVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBjb3VudCh1bml0ID0gXCJtaWxsaXNlY29uZHNcIiwgb3B0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gTmFOO1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5zdGFydC5zdGFydE9mKHVuaXQsIG9wdHMpO1xuICAgIGxldCBlbmQ7XG4gICAgaWYgKG9wdHM/LnVzZUxvY2FsZVdlZWtzKSB7XG4gICAgICBlbmQgPSB0aGlzLmVuZC5yZWNvbmZpZ3VyZSh7IGxvY2FsZTogc3RhcnQubG9jYWxlIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmQgPSB0aGlzLmVuZDtcbiAgICB9XG4gICAgZW5kID0gZW5kLnN0YXJ0T2YodW5pdCwgb3B0cyk7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoZW5kLmRpZmYoc3RhcnQsIHVuaXQpLmdldCh1bml0KSkgKyAoZW5kLnZhbHVlT2YoKSAhPT0gdGhpcy5lbmQudmFsdWVPZigpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIHN0YXJ0IGFuZCBlbmQgYXJlIGJvdGggaW4gdGhlIHNhbWUgdW5pdCBvZiB0aW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0IC0gdGhlIHVuaXQgb2YgdGltZSB0byBjaGVjayBzYW1lbmVzcyBvblxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaGFzU2FtZSh1bml0KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuaXNFbXB0eSgpIHx8IHRoaXMuZS5taW51cygxKS5oYXNTYW1lKHRoaXMucywgdW5pdCkgOiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsIGhhcyB0aGUgc2FtZSBzdGFydCBhbmQgZW5kIERhdGVUaW1lcy5cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMucy52YWx1ZU9mKCkgPT09IHRoaXMuZS52YWx1ZU9mKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIHN0YXJ0IGlzIGFmdGVyIHRoZSBzcGVjaWZpZWQgRGF0ZVRpbWUuXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IGRhdGVUaW1lXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc0FmdGVyKGRhdGVUaW1lKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5zID4gZGF0ZVRpbWU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIGVuZCBpcyBiZWZvcmUgdGhlIHNwZWNpZmllZCBEYXRlVGltZS5cbiAgICogQHBhcmFtIHtEYXRlVGltZX0gZGF0ZVRpbWVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQmVmb3JlKGRhdGVUaW1lKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5lIDw9IGRhdGVUaW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwgY29udGFpbnMgdGhlIHNwZWNpZmllZCBEYXRlVGltZS5cbiAgICogQHBhcmFtIHtEYXRlVGltZX0gZGF0ZVRpbWVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGNvbnRhaW5zKGRhdGVUaW1lKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5zIDw9IGRhdGVUaW1lICYmIHRoaXMuZSA+IGRhdGVUaW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIFwiU2V0c1wiIHRoZSBzdGFydCBhbmQvb3IgZW5kIGRhdGVzLiBSZXR1cm5zIGEgbmV3bHktY29uc3RydWN0ZWQgSW50ZXJ2YWwuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZXMgLSB0aGUgdmFsdWVzIHRvIHNldFxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSB2YWx1ZXMuc3RhcnQgLSB0aGUgc3RhcnRpbmcgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtEYXRlVGltZX0gdmFsdWVzLmVuZCAtIHRoZSBlbmRpbmcgRGF0ZVRpbWVcbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuICBzZXQoeyBzdGFydCwgZW5kIH0gPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICByZXR1cm4gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzdGFydCB8fCB0aGlzLnMsIGVuZCB8fCB0aGlzLmUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0IHRoaXMgSW50ZXJ2YWwgYXQgZWFjaCBvZiB0aGUgc3BlY2lmaWVkIERhdGVUaW1lc1xuICAgKiBAcGFyYW0gey4uLkRhdGVUaW1lfSBkYXRlVGltZXMgLSB0aGUgdW5pdCBvZiB0aW1lIHRvIGNvdW50LlxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIHNwbGl0QXQoLi4uZGF0ZVRpbWVzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBbXTtcbiAgICBjb25zdCBzb3J0ZWQgPSBkYXRlVGltZXNcbiAgICAgICAgLm1hcChmcmllbmRseURhdGVUaW1lKVxuICAgICAgICAuZmlsdGVyKChkKSA9PiB0aGlzLmNvbnRhaW5zKGQpKVxuICAgICAgICAuc29ydCgoYSwgYikgPT4gYS50b01pbGxpcygpIC0gYi50b01pbGxpcygpKSxcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICBsZXQgeyBzIH0gPSB0aGlzLFxuICAgICAgaSA9IDA7XG5cbiAgICB3aGlsZSAocyA8IHRoaXMuZSkge1xuICAgICAgY29uc3QgYWRkZWQgPSBzb3J0ZWRbaV0gfHwgdGhpcy5lLFxuICAgICAgICBuZXh0ID0gK2FkZGVkID4gK3RoaXMuZSA/IHRoaXMuZSA6IGFkZGVkO1xuICAgICAgcmVzdWx0cy5wdXNoKEludGVydmFsLmZyb21EYXRlVGltZXMocywgbmV4dCkpO1xuICAgICAgcyA9IG5leHQ7XG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXQgdGhpcyBJbnRlcnZhbCBpbnRvIHNtYWxsZXIgSW50ZXJ2YWxzLCBlYWNoIG9mIHRoZSBzcGVjaWZpZWQgbGVuZ3RoLlxuICAgKiBMZWZ0IG92ZXIgdGltZSBpcyBncm91cGVkIGludG8gYSBzbWFsbGVyIGludGVydmFsXG4gICAqIEBwYXJhbSB7RHVyYXRpb258T2JqZWN0fG51bWJlcn0gZHVyYXRpb24gLSBUaGUgbGVuZ3RoIG9mIGVhY2ggcmVzdWx0aW5nIGludGVydmFsLlxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIHNwbGl0QnkoZHVyYXRpb24pIHtcbiAgICBjb25zdCBkdXIgPSBEdXJhdGlvbi5mcm9tRHVyYXRpb25MaWtlKGR1cmF0aW9uKTtcblxuICAgIGlmICghdGhpcy5pc1ZhbGlkIHx8ICFkdXIuaXNWYWxpZCB8fCBkdXIuYXMoXCJtaWxsaXNlY29uZHNcIikgPT09IDApIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBsZXQgeyBzIH0gPSB0aGlzLFxuICAgICAgaWR4ID0gMSxcbiAgICAgIG5leHQ7XG5cbiAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgd2hpbGUgKHMgPCB0aGlzLmUpIHtcbiAgICAgIGNvbnN0IGFkZGVkID0gdGhpcy5zdGFydC5wbHVzKGR1ci5tYXBVbml0cygoeCkgPT4geCAqIGlkeCkpO1xuICAgICAgbmV4dCA9ICthZGRlZCA+ICt0aGlzLmUgPyB0aGlzLmUgOiBhZGRlZDtcbiAgICAgIHJlc3VsdHMucHVzaChJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHMsIG5leHQpKTtcbiAgICAgIHMgPSBuZXh0O1xuICAgICAgaWR4ICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXQgdGhpcyBJbnRlcnZhbCBpbnRvIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIHNtYWxsZXIgaW50ZXJ2YWxzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyT2ZQYXJ0cyAtIFRoZSBudW1iZXIgb2YgSW50ZXJ2YWxzIHRvIGRpdmlkZSB0aGUgSW50ZXJ2YWwgaW50by5cbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuICBkaXZpZGVFcXVhbGx5KG51bWJlck9mUGFydHMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIFtdO1xuICAgIHJldHVybiB0aGlzLnNwbGl0QnkodGhpcy5sZW5ndGgoKSAvIG51bWJlck9mUGFydHMpLnNsaWNlKDAsIG51bWJlck9mUGFydHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwgb3ZlcmxhcHMgd2l0aCB0aGUgc3BlY2lmaWVkIEludGVydmFsXG4gICAqIEBwYXJhbSB7SW50ZXJ2YWx9IG90aGVyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBvdmVybGFwcyhvdGhlcikge1xuICAgIHJldHVybiB0aGlzLmUgPiBvdGhlci5zICYmIHRoaXMucyA8IG90aGVyLmU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIGVuZCBpcyBhZGphY2VudCB0byB0aGUgc3BlY2lmaWVkIEludGVydmFsJ3Mgc3RhcnQuXG4gICAqIEBwYXJhbSB7SW50ZXJ2YWx9IG90aGVyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBhYnV0c1N0YXJ0KG90aGVyKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gK3RoaXMuZSA9PT0gK290aGVyLnM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIHN0YXJ0IGlzIGFkamFjZW50IHRvIHRoZSBzcGVjaWZpZWQgSW50ZXJ2YWwncyBlbmQuXG4gICAqIEBwYXJhbSB7SW50ZXJ2YWx9IG90aGVyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBhYnV0c0VuZChvdGhlcikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuICtvdGhlci5lID09PSArdGhpcy5zO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwgZW5ndWxmcyB0aGUgc3RhcnQgYW5kIGVuZCBvZiB0aGUgc3BlY2lmaWVkIEludGVydmFsLlxuICAgKiBAcGFyYW0ge0ludGVydmFsfSBvdGhlclxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgZW5ndWxmcyhvdGhlcikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXMucyA8PSBvdGhlci5zICYmIHRoaXMuZSA+PSBvdGhlci5lO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwgaGFzIHRoZSBzYW1lIHN0YXJ0IGFuZCBlbmQgYXMgdGhlIHNwZWNpZmllZCBJbnRlcnZhbC5cbiAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGVxdWFscyhvdGhlcikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkIHx8ICFvdGhlci5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucy5lcXVhbHMob3RoZXIucykgJiYgdGhpcy5lLmVxdWFscyhvdGhlci5lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gSW50ZXJ2YWwgcmVwcmVzZW50aW5nIHRoZSBpbnRlcnNlY3Rpb24gb2YgdGhpcyBJbnRlcnZhbCBhbmQgdGhlIHNwZWNpZmllZCBJbnRlcnZhbC5cbiAgICogU3BlY2lmaWNhbGx5LCB0aGUgcmVzdWx0aW5nIEludGVydmFsIGhhcyB0aGUgbWF4aW11bSBzdGFydCB0aW1lIGFuZCB0aGUgbWluaW11bSBlbmQgdGltZSBvZiB0aGUgdHdvIEludGVydmFscy5cbiAgICogUmV0dXJucyBudWxsIGlmIHRoZSBpbnRlcnNlY3Rpb24gaXMgZW1wdHksIG1lYW5pbmcsIHRoZSBpbnRlcnZhbHMgZG9uJ3QgaW50ZXJzZWN0LlxuICAgKiBAcGFyYW0ge0ludGVydmFsfSBvdGhlclxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG4gIGludGVyc2VjdGlvbihvdGhlcikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCBzID0gdGhpcy5zID4gb3RoZXIucyA/IHRoaXMucyA6IG90aGVyLnMsXG4gICAgICBlID0gdGhpcy5lIDwgb3RoZXIuZSA/IHRoaXMuZSA6IG90aGVyLmU7XG5cbiAgICBpZiAocyA+PSBlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEludGVydmFsLmZyb21EYXRlVGltZXMocywgZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhbiBJbnRlcnZhbCByZXByZXNlbnRpbmcgdGhlIHVuaW9uIG9mIHRoaXMgSW50ZXJ2YWwgYW5kIHRoZSBzcGVjaWZpZWQgSW50ZXJ2YWwuXG4gICAqIFNwZWNpZmljYWxseSwgdGhlIHJlc3VsdGluZyBJbnRlcnZhbCBoYXMgdGhlIG1pbmltdW0gc3RhcnQgdGltZSBhbmQgdGhlIG1heGltdW0gZW5kIHRpbWUgb2YgdGhlIHR3byBJbnRlcnZhbHMuXG4gICAqIEBwYXJhbSB7SW50ZXJ2YWx9IG90aGVyXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cbiAgdW5pb24ob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgcyA9IHRoaXMucyA8IG90aGVyLnMgPyB0aGlzLnMgOiBvdGhlci5zLFxuICAgICAgZSA9IHRoaXMuZSA+IG90aGVyLmUgPyB0aGlzLmUgOiBvdGhlci5lO1xuICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHMsIGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1lcmdlIGFuIGFycmF5IG9mIEludGVydmFscyBpbnRvIGEgZXF1aXZhbGVudCBtaW5pbWFsIHNldCBvZiBJbnRlcnZhbHMuXG4gICAqIENvbWJpbmVzIG92ZXJsYXBwaW5nIGFuZCBhZGphY2VudCBJbnRlcnZhbHMuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGludGVydmFsc1xuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIHN0YXRpYyBtZXJnZShpbnRlcnZhbHMpIHtcbiAgICBjb25zdCBbZm91bmQsIGZpbmFsXSA9IGludGVydmFsc1xuICAgICAgLnNvcnQoKGEsIGIpID0+IGEucyAtIGIucylcbiAgICAgIC5yZWR1Y2UoXG4gICAgICAgIChbc29mYXIsIGN1cnJlbnRdLCBpdGVtKSA9PiB7XG4gICAgICAgICAgaWYgKCFjdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gW3NvZmFyLCBpdGVtXTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnQub3ZlcmxhcHMoaXRlbSkgfHwgY3VycmVudC5hYnV0c1N0YXJ0KGl0ZW0pKSB7XG4gICAgICAgICAgICByZXR1cm4gW3NvZmFyLCBjdXJyZW50LnVuaW9uKGl0ZW0pXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFtzb2Zhci5jb25jYXQoW2N1cnJlbnRdKSwgaXRlbV07XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBbW10sIG51bGxdXG4gICAgICApO1xuICAgIGlmIChmaW5hbCkge1xuICAgICAgZm91bmQucHVzaChmaW5hbCk7XG4gICAgfVxuICAgIHJldHVybiBmb3VuZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgSW50ZXJ2YWxzIHJlcHJlc2VudGluZyB0aGUgc3BhbnMgb2YgdGltZSB0aGF0IG9ubHkgYXBwZWFyIGluIG9uZSBvZiB0aGUgc3BlY2lmaWVkIEludGVydmFscy5cbiAgICogQHBhcmFtIHtBcnJheX0gaW50ZXJ2YWxzXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cbiAgc3RhdGljIHhvcihpbnRlcnZhbHMpIHtcbiAgICBsZXQgc3RhcnQgPSBudWxsLFxuICAgICAgY3VycmVudENvdW50ID0gMDtcbiAgICBjb25zdCByZXN1bHRzID0gW10sXG4gICAgICBlbmRzID0gaW50ZXJ2YWxzLm1hcCgoaSkgPT4gW1xuICAgICAgICB7IHRpbWU6IGkucywgdHlwZTogXCJzXCIgfSxcbiAgICAgICAgeyB0aW1lOiBpLmUsIHR5cGU6IFwiZVwiIH0sXG4gICAgICBdKSxcbiAgICAgIGZsYXR0ZW5lZCA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQoLi4uZW5kcyksXG4gICAgICBhcnIgPSBmbGF0dGVuZWQuc29ydCgoYSwgYikgPT4gYS50aW1lIC0gYi50aW1lKTtcblxuICAgIGZvciAoY29uc3QgaSBvZiBhcnIpIHtcbiAgICAgIGN1cnJlbnRDb3VudCArPSBpLnR5cGUgPT09IFwic1wiID8gMSA6IC0xO1xuXG4gICAgICBpZiAoY3VycmVudENvdW50ID09PSAxKSB7XG4gICAgICAgIHN0YXJ0ID0gaS50aW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN0YXJ0ICYmICtzdGFydCAhPT0gK2kudGltZSkge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHN0YXJ0LCBpLnRpbWUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gSW50ZXJ2YWwubWVyZ2UocmVzdWx0cyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGFuIEludGVydmFsIHJlcHJlc2VudGluZyB0aGUgc3BhbiBvZiB0aW1lIGluIHRoaXMgSW50ZXJ2YWwgdGhhdCBkb2Vzbid0IG92ZXJsYXAgd2l0aCBhbnkgb2YgdGhlIHNwZWNpZmllZCBJbnRlcnZhbHMuXG4gICAqIEBwYXJhbSB7Li4uSW50ZXJ2YWx9IGludGVydmFsc1xuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIGRpZmZlcmVuY2UoLi4uaW50ZXJ2YWxzKSB7XG4gICAgcmV0dXJuIEludGVydmFsLnhvcihbdGhpc10uY29uY2F0KGludGVydmFscykpXG4gICAgICAubWFwKChpKSA9PiB0aGlzLmludGVyc2VjdGlvbihpKSlcbiAgICAgIC5maWx0ZXIoKGkpID0+IGkgJiYgIWkuaXNFbXB0eSgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgSW50ZXJ2YWwgYXBwcm9wcmlhdGUgZm9yIGRlYnVnZ2luZy5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9TdHJpbmcoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBJTlZBTElEO1xuICAgIHJldHVybiBgWyR7dGhpcy5zLnRvSVNPKCl9IFx1MjAxMyAke3RoaXMuZS50b0lTTygpfSlgO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBJbnRlcnZhbCBhcHByb3ByaWF0ZSBmb3IgdGhlIFJFUEwuXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIFtTeW1ib2wuZm9yKFwibm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b21cIildKCkge1xuICAgIGlmICh0aGlzLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBgSW50ZXJ2YWwgeyBzdGFydDogJHt0aGlzLnMudG9JU08oKX0sIGVuZDogJHt0aGlzLmUudG9JU08oKX0gfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBgSW50ZXJ2YWwgeyBJbnZhbGlkLCByZWFzb246ICR7dGhpcy5pbnZhbGlkUmVhc29ufSB9YDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGxvY2FsaXplZCBzdHJpbmcgcmVwcmVzZW50aW5nIHRoaXMgSW50ZXJ2YWwuIEFjY2VwdHMgdGhlIHNhbWUgb3B0aW9ucyBhcyB0aGVcbiAgICogSW50bC5EYXRlVGltZUZvcm1hdCBjb25zdHJ1Y3RvciBhbmQgYW55IHByZXNldHMgZGVmaW5lZCBieSBMdXhvbiwgc3VjaCBhc1xuICAgKiB7QGxpbmsgRGF0ZVRpbWUuREFURV9GVUxMfSBvciB7QGxpbmsgRGF0ZVRpbWUuVElNRV9TSU1QTEV9LiBUaGUgZXhhY3QgYmVoYXZpb3Igb2YgdGhpcyBtZXRob2RcbiAgICogaXMgYnJvd3Nlci1zcGVjaWZpYywgYnV0IGluIGdlbmVyYWwgaXQgd2lsbCByZXR1cm4gYW4gYXBwcm9wcmlhdGUgcmVwcmVzZW50YXRpb24gb2YgdGhlXG4gICAqIEludGVydmFsIGluIHRoZSBhc3NpZ25lZCBsb2NhbGUuIERlZmF1bHRzIHRvIHRoZSBzeXN0ZW0ncyBsb2NhbGUgaWYgbm8gbG9jYWxlIGhhcyBiZWVuXG4gICAqIHNwZWNpZmllZC5cbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9EYXRlVGltZUZvcm1hdFxuICAgKiBAcGFyYW0ge09iamVjdH0gW2Zvcm1hdE9wdHM9RGF0ZVRpbWUuREFURV9TSE9SVF0gLSBFaXRoZXIgYSBEYXRlVGltZSBwcmVzZXQgb3JcbiAgICogSW50bC5EYXRlVGltZUZvcm1hdCBjb25zdHJ1Y3RvciBvcHRpb25zLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIE9wdGlvbnMgdG8gb3ZlcnJpZGUgdGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIHN0YXJ0IERhdGVUaW1lLlxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tSVNPKCcyMDIyLTExLTA3VDA5OjAwWi8yMDIyLTExLTA4VDA5OjAwWicpLnRvTG9jYWxlU3RyaW5nKCk7IC8vPT4gMTEvNy8yMDIyIFx1MjAxMyAxMS84LzIwMjJcbiAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbUlTTygnMjAyMi0xMS0wN1QwOTowMFovMjAyMi0xMS0wOFQwOTowMFonKS50b0xvY2FsZVN0cmluZyhEYXRlVGltZS5EQVRFX0ZVTEwpOyAvLz0+IE5vdmVtYmVyIDcgXHUyMDEzIDgsIDIwMjJcbiAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbUlTTygnMjAyMi0xMS0wN1QwOTowMFovMjAyMi0xMS0wOFQwOTowMFonKS50b0xvY2FsZVN0cmluZyhEYXRlVGltZS5EQVRFX0ZVTEwsIHsgbG9jYWxlOiAnZnItRlInIH0pOyAvLz0+IDdcdTIwMTM4IG5vdmVtYnJlIDIwMjJcbiAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbUlTTygnMjAyMi0xMS0wN1QxNzowMFovMjAyMi0xMS0wN1QxOTowMFonKS50b0xvY2FsZVN0cmluZyhEYXRlVGltZS5USU1FX1NJTVBMRSk7IC8vPT4gNjowMCBcdTIwMTMgODowMCBQTVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tSVNPKCcyMDIyLTExLTA3VDE3OjAwWi8yMDIyLTExLTA3VDE5OjAwWicpLnRvTG9jYWxlU3RyaW5nKHsgd2Vla2RheTogJ3Nob3J0JywgbW9udGg6ICdzaG9ydCcsIGRheTogJzItZGlnaXQnLCBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pOyAvLz0+IE1vbiwgTm92IDA3LCA2OjAwIFx1MjAxMyA4OjAwIHBcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9Mb2NhbGVTdHJpbmcoZm9ybWF0T3B0cyA9IEZvcm1hdHMuREFURV9TSE9SVCwgb3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZFxuICAgICAgPyBGb3JtYXR0ZXIuY3JlYXRlKHRoaXMucy5sb2MuY2xvbmUob3B0cyksIGZvcm1hdE9wdHMpLmZvcm1hdEludGVydmFsKHRoaXMpXG4gICAgICA6IElOVkFMSUQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgSW50ZXJ2YWwuXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZV9pbnRlcnZhbHNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBUaGUgc2FtZSBvcHRpb25zIGFzIHtAbGluayBEYXRlVGltZSN0b0lTT31cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9JU08ob3B0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gSU5WQUxJRDtcbiAgICByZXR1cm4gYCR7dGhpcy5zLnRvSVNPKG9wdHMpfS8ke3RoaXMuZS50b0lTTyhvcHRzKX1gO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBkYXRlIG9mIHRoaXMgSW50ZXJ2YWwuXG4gICAqIFRoZSB0aW1lIGNvbXBvbmVudHMgYXJlIGlnbm9yZWQuXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZV9pbnRlcnZhbHNcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9JU09EYXRlKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gSU5WQUxJRDtcbiAgICByZXR1cm4gYCR7dGhpcy5zLnRvSVNPRGF0ZSgpfS8ke3RoaXMuZS50b0lTT0RhdGUoKX1gO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aW1lIG9mIHRoaXMgSW50ZXJ2YWwuXG4gICAqIFRoZSBkYXRlIGNvbXBvbmVudHMgYXJlIGlnbm9yZWQuXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZV9pbnRlcnZhbHNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBUaGUgc2FtZSBvcHRpb25zIGFzIHtAbGluayBEYXRlVGltZSN0b0lTT31cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9JU09UaW1lKG9wdHMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIElOVkFMSUQ7XG4gICAgcmV0dXJuIGAke3RoaXMucy50b0lTT1RpbWUob3B0cyl9LyR7dGhpcy5lLnRvSVNPVGltZShvcHRzKX1gO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBJbnRlcnZhbCBmb3JtYXR0ZWQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgZm9ybWF0XG4gICAqIHN0cmluZy4gKipZb3UgbWF5IG5vdCB3YW50IHRoaXMuKiogU2VlIHtAbGluayBJbnRlcnZhbCN0b0xvY2FsZVN0cmluZ30gZm9yIGEgbW9yZSBmbGV4aWJsZVxuICAgKiBmb3JtYXR0aW5nIHRvb2wuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRlRm9ybWF0IC0gVGhlIGZvcm1hdCBzdHJpbmcuIFRoaXMgc3RyaW5nIGZvcm1hdHMgdGhlIHN0YXJ0IGFuZCBlbmQgdGltZS5cbiAgICogU2VlIHtAbGluayBEYXRlVGltZSN0b0Zvcm1hdH0gZm9yIGRldGFpbHMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gT3B0aW9ucy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnNlcGFyYXRvciA9ICAnIFx1MjAxMyAnXSAtIEEgc2VwYXJhdG9yIHRvIHBsYWNlIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmRcbiAgICogcmVwcmVzZW50YXRpb25zLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0Zvcm1hdChkYXRlRm9ybWF0LCB7IHNlcGFyYXRvciA9IFwiIFx1MjAxMyBcIiB9ID0ge30pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIElOVkFMSUQ7XG4gICAgcmV0dXJuIGAke3RoaXMucy50b0Zvcm1hdChkYXRlRm9ybWF0KX0ke3NlcGFyYXRvcn0ke3RoaXMuZS50b0Zvcm1hdChkYXRlRm9ybWF0KX1gO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhIER1cmF0aW9uIHJlcHJlc2VudGluZyB0aGUgdGltZSBzcGFubmVkIGJ5IHRoaXMgaW50ZXJ2YWwuXG4gICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBbdW5pdD1bJ21pbGxpc2Vjb25kcyddXSAtIHRoZSB1bml0IG9yIHVuaXRzIChzdWNoIGFzICdob3Vycycgb3IgJ2RheXMnKSB0byBpbmNsdWRlIGluIHRoZSBkdXJhdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRoYXQgYWZmZWN0IHRoZSBjcmVhdGlvbiBvZiB0aGUgRHVyYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmNvbnZlcnNpb25BY2N1cmFjeT0nY2FzdWFsJ10gLSB0aGUgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQxLCBkdDIpLnRvRHVyYXRpb24oKS50b09iamVjdCgpIC8vPT4geyBtaWxsaXNlY29uZHM6IDg4NDg5MjU3IH1cbiAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdDEsIGR0MikudG9EdXJhdGlvbignZGF5cycpLnRvT2JqZWN0KCkgLy89PiB7IGRheXM6IDEuMDI0MTgxMjE1Mjc3Nzc3OCB9XG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQxLCBkdDIpLnRvRHVyYXRpb24oWydob3VycycsICdtaW51dGVzJ10pLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAyNCwgbWludXRlczogMzQuODIwOTUgfVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS50b0R1cmF0aW9uKFsnaG91cnMnLCAnbWludXRlcycsICdzZWNvbmRzJ10pLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAyNCwgbWludXRlczogMzQsIHNlY29uZHM6IDQ5LjI1NyB9XG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQxLCBkdDIpLnRvRHVyYXRpb24oJ3NlY29uZHMnKS50b09iamVjdCgpIC8vPT4geyBzZWNvbmRzOiA4ODQ4OS4yNTcgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIHRvRHVyYXRpb24odW5pdCwgb3B0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uaW52YWxpZCh0aGlzLmludmFsaWRSZWFzb24pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5lLmRpZmYodGhpcy5zLCB1bml0LCBvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSdW4gbWFwRm4gb24gdGhlIGludGVydmFsIHN0YXJ0IGFuZCBlbmQsIHJldHVybmluZyBhIG5ldyBJbnRlcnZhbCBmcm9tIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWVzXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IG1hcEZuXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS5tYXBFbmRwb2ludHMoZW5kcG9pbnQgPT4gZW5kcG9pbnQudG9VVEMoKSlcbiAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdDEsIGR0MikubWFwRW5kcG9pbnRzKGVuZHBvaW50ID0+IGVuZHBvaW50LnBsdXMoeyBob3VyczogMiB9KSlcbiAgICovXG4gIG1hcEVuZHBvaW50cyhtYXBGbikge1xuICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKG1hcEZuKHRoaXMucyksIG1hcEZuKHRoaXMuZSkpO1xuICB9XG59XG4iLCAiaW1wb3J0IERhdGVUaW1lIGZyb20gXCIuL2RhdGV0aW1lLmpzXCI7XG5pbXBvcnQgU2V0dGluZ3MgZnJvbSBcIi4vc2V0dGluZ3MuanNcIjtcbmltcG9ydCBMb2NhbGUgZnJvbSBcIi4vaW1wbC9sb2NhbGUuanNcIjtcbmltcG9ydCBJQU5BWm9uZSBmcm9tIFwiLi96b25lcy9JQU5BWm9uZS5qc1wiO1xuaW1wb3J0IHsgbm9ybWFsaXplWm9uZSB9IGZyb20gXCIuL2ltcGwvem9uZVV0aWwuanNcIjtcblxuaW1wb3J0IHsgaGFzTG9jYWxlV2Vla0luZm8sIGhhc1JlbGF0aXZlIH0gZnJvbSBcIi4vaW1wbC91dGlsLmpzXCI7XG5cbi8qKlxuICogVGhlIEluZm8gY2xhc3MgY29udGFpbnMgc3RhdGljIG1ldGhvZHMgZm9yIHJldHJpZXZpbmcgZ2VuZXJhbCB0aW1lIGFuZCBkYXRlIHJlbGF0ZWQgZGF0YS4gRm9yIGV4YW1wbGUsIGl0IGhhcyBtZXRob2RzIGZvciBmaW5kaW5nIG91dCBpZiBhIHRpbWUgem9uZSBoYXMgYSBEU1QsIGZvciBsaXN0aW5nIHRoZSBtb250aHMgaW4gYW55IHN1cHBvcnRlZCBsb2NhbGUsIGFuZCBmb3IgZGlzY292ZXJpbmcgd2hpY2ggb2YgTHV4b24gZmVhdHVyZXMgYXJlIGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBlbnZpcm9ubWVudC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5mbyB7XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGUgc3BlY2lmaWVkIHpvbmUgY29udGFpbnMgYSBEU1QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFt6b25lPSdsb2NhbCddIC0gWm9uZSB0byBjaGVjay4gRGVmYXVsdHMgdG8gdGhlIGVudmlyb25tZW50J3MgbG9jYWwgem9uZS5cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBoYXNEU1Qoem9uZSA9IFNldHRpbmdzLmRlZmF1bHRab25lKSB7XG4gICAgY29uc3QgcHJvdG8gPSBEYXRlVGltZS5ub3coKS5zZXRab25lKHpvbmUpLnNldCh7IG1vbnRoOiAxMiB9KTtcblxuICAgIHJldHVybiAhem9uZS5pc1VuaXZlcnNhbCAmJiBwcm90by5vZmZzZXQgIT09IHByb3RvLnNldCh7IG1vbnRoOiA2IH0pLm9mZnNldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGUgc3BlY2lmaWVkIHpvbmUgaXMgYSB2YWxpZCBJQU5BIHNwZWNpZmllci5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHpvbmUgLSBab25lIHRvIGNoZWNrXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaXNWYWxpZElBTkFab25lKHpvbmUpIHtcbiAgICByZXR1cm4gSUFOQVpvbmUuaXNWYWxpZFpvbmUoem9uZSk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgdGhlIGlucHV0IGludG8gYSB7QGxpbmsgWm9uZX0gaW5zdGFuY2UuXG4gICAqXG4gICAqICogSWYgYGlucHV0YCBpcyBhbHJlYWR5IGEgWm9uZSBpbnN0YW5jZSwgaXQgaXMgcmV0dXJuZWQgdW5jaGFuZ2VkLlxuICAgKiAqIElmIGBpbnB1dGAgaXMgYSBzdHJpbmcgY29udGFpbmluZyBhIHZhbGlkIHRpbWUgem9uZSBuYW1lLCBhIFpvbmUgaW5zdGFuY2VcbiAgICogICB3aXRoIHRoYXQgbmFtZSBpcyByZXR1cm5lZC5cbiAgICogKiBJZiBgaW5wdXRgIGlzIGEgc3RyaW5nIHRoYXQgZG9lc24ndCByZWZlciB0byBhIGtub3duIHRpbWUgem9uZSwgYSBab25lXG4gICAqICAgaW5zdGFuY2Ugd2l0aCB7QGxpbmsgWm9uZSNpc1ZhbGlkfSA9PSBmYWxzZSBpcyByZXR1cm5lZC5cbiAgICogKiBJZiBgaW5wdXQgaXMgYSBudW1iZXIsIGEgWm9uZSBpbnN0YW5jZSB3aXRoIHRoZSBzcGVjaWZpZWQgZml4ZWQgb2Zmc2V0XG4gICAqICAgaW4gbWludXRlcyBpcyByZXR1cm5lZC5cbiAgICogKiBJZiBgaW5wdXRgIGlzIGBudWxsYCBvciBgdW5kZWZpbmVkYCwgdGhlIGRlZmF1bHQgem9uZSBpcyByZXR1cm5lZC5cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZXxudW1iZXJ9IFtpbnB1dF0gLSB0aGUgdmFsdWUgdG8gYmUgY29udmVydGVkXG4gICAqIEByZXR1cm4ge1pvbmV9XG4gICAqL1xuICBzdGF0aWMgbm9ybWFsaXplWm9uZShpbnB1dCkge1xuICAgIHJldHVybiBub3JtYWxpemVab25lKGlucHV0LCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB3ZWVrZGF5IG9uIHdoaWNoIHRoZSB3ZWVrIHN0YXJ0cyBhY2NvcmRpbmcgdG8gdGhlIGdpdmVuIGxvY2FsZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGVdIC0gdGhlIGxvY2FsZSBjb2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NPYmo9bnVsbF0gLSBhbiBleGlzdGluZyBsb2NhbGUgb2JqZWN0IHRvIHVzZVxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSB0aGUgc3RhcnQgb2YgdGhlIHdlZWssIDEgZm9yIE1vbmRheSB0aHJvdWdoIDcgZm9yIFN1bmRheVxuICAgKi9cbiAgc3RhdGljIGdldFN0YXJ0T2ZXZWVrKHsgbG9jYWxlID0gbnVsbCwgbG9jT2JqID0gbnVsbCB9ID0ge30pIHtcbiAgICByZXR1cm4gKGxvY09iaiB8fCBMb2NhbGUuY3JlYXRlKGxvY2FsZSkpLmdldFN0YXJ0T2ZXZWVrKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBtaW5pbXVtIG51bWJlciBvZiBkYXlzIG5lY2Vzc2FyeSBpbiBhIHdlZWsgYmVmb3JlIGl0IGlzIGNvbnNpZGVyZWQgcGFydCBvZiB0aGUgbmV4dCB5ZWFyIGFjY29yZGluZ1xuICAgKiB0byB0aGUgZ2l2ZW4gbG9jYWxlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZV0gLSB0aGUgbG9jYWxlIGNvZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY09iaj1udWxsXSAtIGFuIGV4aXN0aW5nIGxvY2FsZSBvYmplY3QgdG8gdXNlXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBzdGF0aWMgZ2V0TWluaW11bURheXNJbkZpcnN0V2Vlayh7IGxvY2FsZSA9IG51bGwsIGxvY09iaiA9IG51bGwgfSA9IHt9KSB7XG4gICAgcmV0dXJuIChsb2NPYmogfHwgTG9jYWxlLmNyZWF0ZShsb2NhbGUpKS5nZXRNaW5EYXlzSW5GaXJzdFdlZWsoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHdlZWtkYXlzLCB3aGljaCBhcmUgY29uc2lkZXJlZCB0aGUgd2Vla2VuZCBhY2NvcmRpbmcgdG8gdGhlIGdpdmVuIGxvY2FsZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZV0gLSB0aGUgbG9jYWxlIGNvZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY09iaj1udWxsXSAtIGFuIGV4aXN0aW5nIGxvY2FsZSBvYmplY3QgdG8gdXNlXG4gICAqIEByZXR1cm5zIHtudW1iZXJbXX0gYW4gYXJyYXkgb2Ygd2Vla2RheXMsIDEgZm9yIE1vbmRheSB0aHJvdWdoIDcgZm9yIFN1bmRheVxuICAgKi9cbiAgc3RhdGljIGdldFdlZWtlbmRXZWVrZGF5cyh7IGxvY2FsZSA9IG51bGwsIGxvY09iaiA9IG51bGwgfSA9IHt9KSB7XG4gICAgLy8gY29weSB0aGUgYXJyYXksIGJlY2F1c2Ugd2UgY2FjaGUgaXQgaW50ZXJuYWxseVxuICAgIHJldHVybiAobG9jT2JqIHx8IExvY2FsZS5jcmVhdGUobG9jYWxlKSkuZ2V0V2Vla2VuZERheXMoKS5zbGljZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhbiBhcnJheSBvZiBzdGFuZGFsb25lIG1vbnRoIG5hbWVzLlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGVUaW1lRm9ybWF0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGVuZ3RoPSdsb25nJ10gLSB0aGUgbGVuZ3RoIG9mIHRoZSBtb250aCByZXByZXNlbnRhdGlvbiwgc3VjaCBhcyBcIm51bWVyaWNcIiwgXCIyLWRpZ2l0XCIsIFwibmFycm93XCIsIFwic2hvcnRcIiwgXCJsb25nXCJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGVdIC0gdGhlIGxvY2FsZSBjb2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5udW1iZXJpbmdTeXN0ZW09bnVsbF0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jT2JqPW51bGxdIC0gYW4gZXhpc3RpbmcgbG9jYWxlIG9iamVjdCB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm91dHB1dENhbGVuZGFyPSdncmVnb3J5J10gLSB0aGUgY2FsZW5kYXJcbiAgICogQGV4YW1wbGUgSW5mby5tb250aHMoKVswXSAvLz0+ICdKYW51YXJ5J1xuICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnc2hvcnQnKVswXSAvLz0+ICdKYW4nXG4gICAqIEBleGFtcGxlIEluZm8ubW9udGhzKCdudW1lcmljJylbMF0gLy89PiAnMSdcbiAgICogQGV4YW1wbGUgSW5mby5tb250aHMoJ3Nob3J0JywgeyBsb2NhbGU6ICdmci1DQScgfSApWzBdIC8vPT4gJ2phbnYuJ1xuICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnbnVtZXJpYycsIHsgbG9jYWxlOiAnYXInIH0pWzBdIC8vPT4gJ1x1MDY2MSdcbiAgICogQGV4YW1wbGUgSW5mby5tb250aHMoJ2xvbmcnLCB7IG91dHB1dENhbGVuZGFyOiAnaXNsYW1pYycgfSlbMF0gLy89PiAnUmFiaVx1MDJCQiBJJ1xuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIHN0YXRpYyBtb250aHMoXG4gICAgbGVuZ3RoID0gXCJsb25nXCIsXG4gICAgeyBsb2NhbGUgPSBudWxsLCBudW1iZXJpbmdTeXN0ZW0gPSBudWxsLCBsb2NPYmogPSBudWxsLCBvdXRwdXRDYWxlbmRhciA9IFwiZ3JlZ29yeVwiIH0gPSB7fVxuICApIHtcbiAgICByZXR1cm4gKGxvY09iaiB8fCBMb2NhbGUuY3JlYXRlKGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhcikpLm1vbnRocyhsZW5ndGgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhbiBhcnJheSBvZiBmb3JtYXQgbW9udGggbmFtZXMuXG4gICAqIEZvcm1hdCBtb250aHMgZGlmZmVyIGZyb20gc3RhbmRhbG9uZSBtb250aHMgaW4gdGhhdCB0aGV5J3JlIG1lYW50IHRvIGFwcGVhciBuZXh0IHRvIHRoZSBkYXkgb2YgdGhlIG1vbnRoLiBJbiBzb21lIGxhbmd1YWdlcywgdGhhdFxuICAgKiBjaGFuZ2VzIHRoZSBzdHJpbmcuXG4gICAqIFNlZSB7QGxpbmsgSW5mbyNtb250aHN9XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGVuZ3RoPSdsb25nJ10gLSB0aGUgbGVuZ3RoIG9mIHRoZSBtb250aCByZXByZXNlbnRhdGlvbiwgc3VjaCBhcyBcIm51bWVyaWNcIiwgXCIyLWRpZ2l0XCIsIFwibmFycm93XCIsIFwic2hvcnRcIiwgXCJsb25nXCJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGVdIC0gdGhlIGxvY2FsZSBjb2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5udW1iZXJpbmdTeXN0ZW09bnVsbF0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jT2JqPW51bGxdIC0gYW4gZXhpc3RpbmcgbG9jYWxlIG9iamVjdCB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm91dHB1dENhbGVuZGFyPSdncmVnb3J5J10gLSB0aGUgY2FsZW5kYXJcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuICBzdGF0aWMgbW9udGhzRm9ybWF0KFxuICAgIGxlbmd0aCA9IFwibG9uZ1wiLFxuICAgIHsgbG9jYWxlID0gbnVsbCwgbnVtYmVyaW5nU3lzdGVtID0gbnVsbCwgbG9jT2JqID0gbnVsbCwgb3V0cHV0Q2FsZW5kYXIgPSBcImdyZWdvcnlcIiB9ID0ge31cbiAgKSB7XG4gICAgcmV0dXJuIChsb2NPYmogfHwgTG9jYWxlLmNyZWF0ZShsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgb3V0cHV0Q2FsZW5kYXIpKS5tb250aHMobGVuZ3RoLCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gYXJyYXkgb2Ygc3RhbmRhbG9uZSB3ZWVrIG5hbWVzLlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGVUaW1lRm9ybWF0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGVuZ3RoPSdsb25nJ10gLSB0aGUgbGVuZ3RoIG9mIHRoZSB3ZWVrZGF5IHJlcHJlc2VudGF0aW9uLCBzdWNoIGFzIFwibmFycm93XCIsIFwic2hvcnRcIiwgXCJsb25nXCIuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlXSAtIHRoZSBsb2NhbGUgY29kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubnVtYmVyaW5nU3lzdGVtPW51bGxdIC0gdGhlIG51bWJlcmluZyBzeXN0ZW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY09iaj1udWxsXSAtIGFuIGV4aXN0aW5nIGxvY2FsZSBvYmplY3QgdG8gdXNlXG4gICAqIEBleGFtcGxlIEluZm8ud2Vla2RheXMoKVswXSAvLz0+ICdNb25kYXknXG4gICAqIEBleGFtcGxlIEluZm8ud2Vla2RheXMoJ3Nob3J0JylbMF0gLy89PiAnTW9uJ1xuICAgKiBAZXhhbXBsZSBJbmZvLndlZWtkYXlzKCdzaG9ydCcsIHsgbG9jYWxlOiAnZnItQ0EnIH0pWzBdIC8vPT4gJ2x1bi4nXG4gICAqIEBleGFtcGxlIEluZm8ud2Vla2RheXMoJ3Nob3J0JywgeyBsb2NhbGU6ICdhcicgfSlbMF0gLy89PiAnXHUwNjI3XHUwNjQ0XHUwNjI3XHUwNjJCXHUwNjQ2XHUwNjRBXHUwNjQ2J1xuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIHN0YXRpYyB3ZWVrZGF5cyhsZW5ndGggPSBcImxvbmdcIiwgeyBsb2NhbGUgPSBudWxsLCBudW1iZXJpbmdTeXN0ZW0gPSBudWxsLCBsb2NPYmogPSBudWxsIH0gPSB7fSkge1xuICAgIHJldHVybiAobG9jT2JqIHx8IExvY2FsZS5jcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG51bGwpKS53ZWVrZGF5cyhsZW5ndGgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhbiBhcnJheSBvZiBmb3JtYXQgd2VlayBuYW1lcy5cbiAgICogRm9ybWF0IHdlZWtkYXlzIGRpZmZlciBmcm9tIHN0YW5kYWxvbmUgd2Vla2RheXMgaW4gdGhhdCB0aGV5J3JlIG1lYW50IHRvIGFwcGVhciBuZXh0IHRvIG1vcmUgZGF0ZSBpbmZvcm1hdGlvbi4gSW4gc29tZSBsYW5ndWFnZXMsIHRoYXRcbiAgICogY2hhbmdlcyB0aGUgc3RyaW5nLlxuICAgKiBTZWUge0BsaW5rIEluZm8jd2Vla2RheXN9XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGVuZ3RoPSdsb25nJ10gLSB0aGUgbGVuZ3RoIG9mIHRoZSBtb250aCByZXByZXNlbnRhdGlvbiwgc3VjaCBhcyBcIm5hcnJvd1wiLCBcInNob3J0XCIsIFwibG9uZ1wiLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT1udWxsXSAtIHRoZSBsb2NhbGUgY29kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubnVtYmVyaW5nU3lzdGVtPW51bGxdIC0gdGhlIG51bWJlcmluZyBzeXN0ZW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY09iaj1udWxsXSAtIGFuIGV4aXN0aW5nIGxvY2FsZSBvYmplY3QgdG8gdXNlXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cbiAgc3RhdGljIHdlZWtkYXlzRm9ybWF0KFxuICAgIGxlbmd0aCA9IFwibG9uZ1wiLFxuICAgIHsgbG9jYWxlID0gbnVsbCwgbnVtYmVyaW5nU3lzdGVtID0gbnVsbCwgbG9jT2JqID0gbnVsbCB9ID0ge31cbiAgKSB7XG4gICAgcmV0dXJuIChsb2NPYmogfHwgTG9jYWxlLmNyZWF0ZShsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgbnVsbCkpLndlZWtkYXlzKGxlbmd0aCwgdHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGFuIGFycmF5IG9mIG1lcmlkaWVtcy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGVdIC0gdGhlIGxvY2FsZSBjb2RlXG4gICAqIEBleGFtcGxlIEluZm8ubWVyaWRpZW1zKCkgLy89PiBbICdBTScsICdQTScgXVxuICAgKiBAZXhhbXBsZSBJbmZvLm1lcmlkaWVtcyh7IGxvY2FsZTogJ215JyB9KSAvLz0+IFsgJ1x1MTAxNFx1MTAzNlx1MTAxNFx1MTAwMFx1MTAzQScsICdcdTEwMEFcdTEwMTRcdTEwMzEnIF1cbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuICBzdGF0aWMgbWVyaWRpZW1zKHsgbG9jYWxlID0gbnVsbCB9ID0ge30pIHtcbiAgICByZXR1cm4gTG9jYWxlLmNyZWF0ZShsb2NhbGUpLm1lcmlkaWVtcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhbiBhcnJheSBvZiBlcmFzLCBzdWNoIGFzIFsnQkMnLCAnQUQnXS4gVGhlIGxvY2FsZSBjYW4gYmUgc3BlY2lmaWVkLCBidXQgdGhlIGNhbGVuZGFyIHN5c3RlbSBpcyBhbHdheXMgR3JlZ29yaWFuLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2xlbmd0aD0nc2hvcnQnXSAtIHRoZSBsZW5ndGggb2YgdGhlIGVyYSByZXByZXNlbnRhdGlvbiwgc3VjaCBhcyBcInNob3J0XCIgb3IgXCJsb25nXCIuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlXSAtIHRoZSBsb2NhbGUgY29kZVxuICAgKiBAZXhhbXBsZSBJbmZvLmVyYXMoKSAvLz0+IFsgJ0JDJywgJ0FEJyBdXG4gICAqIEBleGFtcGxlIEluZm8uZXJhcygnbG9uZycpIC8vPT4gWyAnQmVmb3JlIENocmlzdCcsICdBbm5vIERvbWluaScgXVxuICAgKiBAZXhhbXBsZSBJbmZvLmVyYXMoJ2xvbmcnLCB7IGxvY2FsZTogJ2ZyJyB9KSAvLz0+IFsgJ2F2YW50IEpcdTAwRTlzdXMtQ2hyaXN0JywgJ2Fwclx1MDBFOHMgSlx1MDBFOXN1cy1DaHJpc3QnIF1cbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuICBzdGF0aWMgZXJhcyhsZW5ndGggPSBcInNob3J0XCIsIHsgbG9jYWxlID0gbnVsbCB9ID0ge30pIHtcbiAgICByZXR1cm4gTG9jYWxlLmNyZWF0ZShsb2NhbGUsIG51bGwsIFwiZ3JlZ29yeVwiKS5lcmFzKGxlbmd0aCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBzZXQgb2YgYXZhaWxhYmxlIGZlYXR1cmVzIGluIHRoaXMgZW52aXJvbm1lbnQuXG4gICAqIFNvbWUgZmVhdHVyZXMgb2YgTHV4b24gYXJlIG5vdCBhdmFpbGFibGUgaW4gYWxsIGVudmlyb25tZW50cy4gRm9yIGV4YW1wbGUsIG9uIG9sZGVyIGJyb3dzZXJzLCByZWxhdGl2ZSB0aW1lIGZvcm1hdHRpbmcgc3VwcG9ydCBpcyBub3QgYXZhaWxhYmxlLiBVc2UgdGhpcyBmdW5jdGlvbiB0byBmaWd1cmUgb3V0IGlmIHRoYXQncyB0aGUgY2FzZS5cbiAgICogS2V5czpcbiAgICogKiBgcmVsYXRpdmVgOiB3aGV0aGVyIHRoaXMgZW52aXJvbm1lbnQgc3VwcG9ydHMgcmVsYXRpdmUgdGltZSBmb3JtYXR0aW5nXG4gICAqICogYGxvY2FsZVdlZWtgOiB3aGV0aGVyIHRoaXMgZW52aXJvbm1lbnQgc3VwcG9ydHMgZGlmZmVyZW50IHdlZWtkYXlzIGZvciB0aGUgc3RhcnQgb2YgdGhlIHdlZWsgYmFzZWQgb24gdGhlIGxvY2FsZVxuICAgKiBAZXhhbXBsZSBJbmZvLmZlYXR1cmVzKCkgLy89PiB7IHJlbGF0aXZlOiBmYWxzZSwgbG9jYWxlV2VlazogdHJ1ZSB9XG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBmZWF0dXJlcygpIHtcbiAgICByZXR1cm4geyByZWxhdGl2ZTogaGFzUmVsYXRpdmUoKSwgbG9jYWxlV2VlazogaGFzTG9jYWxlV2Vla0luZm8oKSB9O1xuICB9XG59XG4iLCAiaW1wb3J0IER1cmF0aW9uIGZyb20gXCIuLi9kdXJhdGlvbi5qc1wiO1xuXG5mdW5jdGlvbiBkYXlEaWZmKGVhcmxpZXIsIGxhdGVyKSB7XG4gIGNvbnN0IHV0Y0RheVN0YXJ0ID0gKGR0KSA9PiBkdC50b1VUQygwLCB7IGtlZXBMb2NhbFRpbWU6IHRydWUgfSkuc3RhcnRPZihcImRheVwiKS52YWx1ZU9mKCksXG4gICAgbXMgPSB1dGNEYXlTdGFydChsYXRlcikgLSB1dGNEYXlTdGFydChlYXJsaWVyKTtcbiAgcmV0dXJuIE1hdGguZmxvb3IoRHVyYXRpb24uZnJvbU1pbGxpcyhtcykuYXMoXCJkYXlzXCIpKTtcbn1cblxuZnVuY3Rpb24gaGlnaE9yZGVyRGlmZnMoY3Vyc29yLCBsYXRlciwgdW5pdHMpIHtcbiAgY29uc3QgZGlmZmVycyA9IFtcbiAgICBbXCJ5ZWFyc1wiLCAoYSwgYikgPT4gYi55ZWFyIC0gYS55ZWFyXSxcbiAgICBbXCJxdWFydGVyc1wiLCAoYSwgYikgPT4gYi5xdWFydGVyIC0gYS5xdWFydGVyICsgKGIueWVhciAtIGEueWVhcikgKiA0XSxcbiAgICBbXCJtb250aHNcIiwgKGEsIGIpID0+IGIubW9udGggLSBhLm1vbnRoICsgKGIueWVhciAtIGEueWVhcikgKiAxMl0sXG4gICAgW1xuICAgICAgXCJ3ZWVrc1wiLFxuICAgICAgKGEsIGIpID0+IHtcbiAgICAgICAgY29uc3QgZGF5cyA9IGRheURpZmYoYSwgYik7XG4gICAgICAgIHJldHVybiAoZGF5cyAtIChkYXlzICUgNykpIC8gNztcbiAgICAgIH0sXG4gICAgXSxcbiAgICBbXCJkYXlzXCIsIGRheURpZmZdLFxuICBdO1xuXG4gIGNvbnN0IHJlc3VsdHMgPSB7fTtcbiAgY29uc3QgZWFybGllciA9IGN1cnNvcjtcbiAgbGV0IGxvd2VzdE9yZGVyLCBoaWdoV2F0ZXI7XG5cbiAgLyogVGhpcyBsb29wIHRyaWVzIHRvIGRpZmYgdXNpbmcgbGFyZ2VyIHVuaXRzIGZpcnN0LlxuICAgICBJZiB3ZSBvdmVyc2hvb3QsIHdlIGJhY2t0cmFjayBhbmQgdHJ5IHRoZSBuZXh0IHNtYWxsZXIgdW5pdC5cbiAgICAgXCJjdXJzb3JcIiBzdGFydHMgb3V0IGF0IHRoZSBlYXJsaWVyIHRpbWVzdGFtcCBhbmQgbW92ZXMgY2xvc2VyIGFuZCBjbG9zZXIgdG8gXCJsYXRlclwiXG4gICAgIGFzIHdlIHVzZSBzbWFsbGVyIGFuZCBzbWFsbGVyIHVuaXRzLlxuICAgICBoaWdoV2F0ZXIga2VlcHMgdHJhY2sgb2Ygd2hlcmUgd2Ugd291bGQgYmUgaWYgd2UgYWRkZWQgb25lIG1vcmUgb2YgdGhlIHNtYWxsZXN0IHVuaXQsXG4gICAgIHRoaXMgaXMgdXNlZCBsYXRlciB0byBwb3RlbnRpYWxseSBjb252ZXJ0IGFueSBkaWZmZXJlbmNlIHNtYWxsZXIgdGhhbiB0aGUgc21hbGxlc3QgaGlnaGVyIG9yZGVyIHVuaXRcbiAgICAgaW50byBhIGZyYWN0aW9uIG9mIHRoYXQgc21hbGxlc3QgaGlnaGVyIG9yZGVyIHVuaXRcbiAgKi9cbiAgZm9yIChjb25zdCBbdW5pdCwgZGlmZmVyXSBvZiBkaWZmZXJzKSB7XG4gICAgaWYgKHVuaXRzLmluZGV4T2YodW5pdCkgPj0gMCkge1xuICAgICAgbG93ZXN0T3JkZXIgPSB1bml0O1xuXG4gICAgICByZXN1bHRzW3VuaXRdID0gZGlmZmVyKGN1cnNvciwgbGF0ZXIpO1xuICAgICAgaGlnaFdhdGVyID0gZWFybGllci5wbHVzKHJlc3VsdHMpO1xuXG4gICAgICBpZiAoaGlnaFdhdGVyID4gbGF0ZXIpIHtcbiAgICAgICAgLy8gd2Ugb3ZlcnNob3QgdGhlIGVuZCBwb2ludCwgYmFja3RyYWNrIGN1cnNvciBieSAxXG4gICAgICAgIHJlc3VsdHNbdW5pdF0tLTtcbiAgICAgICAgY3Vyc29yID0gZWFybGllci5wbHVzKHJlc3VsdHMpO1xuXG4gICAgICAgIC8vIGlmIHdlIGFyZSBzdGlsbCBvdmVyc2hvb3Rpbmcgbm93LCB3ZSBuZWVkIHRvIGJhY2t0cmFjayBhZ2FpblxuICAgICAgICAvLyB0aGlzIGhhcHBlbnMgaW4gY2VydGFpbiBzaXR1YXRpb25zIHdoZW4gZGlmZmluZyB0aW1lcyBpbiBkaWZmZXJlbnQgem9uZXMsXG4gICAgICAgIC8vIGJlY2F1c2UgdGhpcyBjYWxjdWxhdGlvbiBpZ25vcmVzIHRpbWUgem9uZXNcbiAgICAgICAgaWYgKGN1cnNvciA+IGxhdGVyKSB7XG4gICAgICAgICAgLy8ga2VlcCB0aGUgXCJvdmVyc2hvdCBieSAxXCIgYXJvdW5kIGFzIGhpZ2hXYXRlclxuICAgICAgICAgIGhpZ2hXYXRlciA9IGN1cnNvcjtcbiAgICAgICAgICAvLyBiYWNrdHJhY2sgY3Vyc29yIGJ5IDFcbiAgICAgICAgICByZXN1bHRzW3VuaXRdLS07XG4gICAgICAgICAgY3Vyc29yID0gZWFybGllci5wbHVzKHJlc3VsdHMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJzb3IgPSBoaWdoV2F0ZXI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFtjdXJzb3IsIHJlc3VsdHMsIGhpZ2hXYXRlciwgbG93ZXN0T3JkZXJdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoZWFybGllciwgbGF0ZXIsIHVuaXRzLCBvcHRzKSB7XG4gIGxldCBbY3Vyc29yLCByZXN1bHRzLCBoaWdoV2F0ZXIsIGxvd2VzdE9yZGVyXSA9IGhpZ2hPcmRlckRpZmZzKGVhcmxpZXIsIGxhdGVyLCB1bml0cyk7XG5cbiAgY29uc3QgcmVtYWluaW5nTWlsbGlzID0gbGF0ZXIgLSBjdXJzb3I7XG5cbiAgY29uc3QgbG93ZXJPcmRlclVuaXRzID0gdW5pdHMuZmlsdGVyKFxuICAgICh1KSA9PiBbXCJob3Vyc1wiLCBcIm1pbnV0ZXNcIiwgXCJzZWNvbmRzXCIsIFwibWlsbGlzZWNvbmRzXCJdLmluZGV4T2YodSkgPj0gMFxuICApO1xuXG4gIGlmIChsb3dlck9yZGVyVW5pdHMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGhpZ2hXYXRlciA8IGxhdGVyKSB7XG4gICAgICBoaWdoV2F0ZXIgPSBjdXJzb3IucGx1cyh7IFtsb3dlc3RPcmRlcl06IDEgfSk7XG4gICAgfVxuXG4gICAgaWYgKGhpZ2hXYXRlciAhPT0gY3Vyc29yKSB7XG4gICAgICByZXN1bHRzW2xvd2VzdE9yZGVyXSA9IChyZXN1bHRzW2xvd2VzdE9yZGVyXSB8fCAwKSArIHJlbWFpbmluZ01pbGxpcyAvIChoaWdoV2F0ZXIgLSBjdXJzb3IpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGR1cmF0aW9uID0gRHVyYXRpb24uZnJvbU9iamVjdChyZXN1bHRzLCBvcHRzKTtcblxuICBpZiAobG93ZXJPcmRlclVuaXRzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gRHVyYXRpb24uZnJvbU1pbGxpcyhyZW1haW5pbmdNaWxsaXMsIG9wdHMpXG4gICAgICAuc2hpZnRUbyguLi5sb3dlck9yZGVyVW5pdHMpXG4gICAgICAucGx1cyhkdXJhdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGR1cmF0aW9uO1xuICB9XG59XG4iLCAiY29uc3QgbnVtYmVyaW5nU3lzdGVtcyA9IHtcbiAgYXJhYjogXCJbXFx1MDY2MC1cXHUwNjY5XVwiLFxuICBhcmFiZXh0OiBcIltcXHUwNkYwLVxcdTA2RjldXCIsXG4gIGJhbGk6IFwiW1xcdTFCNTAtXFx1MUI1OV1cIixcbiAgYmVuZzogXCJbXFx1MDlFNi1cXHUwOUVGXVwiLFxuICBkZXZhOiBcIltcXHUwOTY2LVxcdTA5NkZdXCIsXG4gIGZ1bGx3aWRlOiBcIltcXHVGRjEwLVxcdUZGMTldXCIsXG4gIGd1anI6IFwiW1xcdTBBRTYtXFx1MEFFRl1cIixcbiAgaGFuaWRlYzogXCJbXHUzMDA3fFx1NEUwMHxcdTRFOEN8XHU0RTA5fFx1NTZEQnxcdTRFOTR8XHU1MTZEfFx1NEUwM3xcdTUxNkJ8XHU0RTVEXVwiLFxuICBraG1yOiBcIltcXHUxN0UwLVxcdTE3RTldXCIsXG4gIGtuZGE6IFwiW1xcdTBDRTYtXFx1MENFRl1cIixcbiAgbGFvbzogXCJbXFx1MEVEMC1cXHUwRUQ5XVwiLFxuICBsaW1iOiBcIltcXHUxOTQ2LVxcdTE5NEZdXCIsXG4gIG1seW06IFwiW1xcdTBENjYtXFx1MEQ2Rl1cIixcbiAgbW9uZzogXCJbXFx1MTgxMC1cXHUxODE5XVwiLFxuICBteW1yOiBcIltcXHUxMDQwLVxcdTEwNDldXCIsXG4gIG9yeWE6IFwiW1xcdTBCNjYtXFx1MEI2Rl1cIixcbiAgdGFtbGRlYzogXCJbXFx1MEJFNi1cXHUwQkVGXVwiLFxuICB0ZWx1OiBcIltcXHUwQzY2LVxcdTBDNkZdXCIsXG4gIHRoYWk6IFwiW1xcdTBFNTAtXFx1MEU1OV1cIixcbiAgdGlidDogXCJbXFx1MEYyMC1cXHUwRjI5XVwiLFxuICBsYXRuOiBcIlxcXFxkXCIsXG59O1xuXG5jb25zdCBudW1iZXJpbmdTeXN0ZW1zVVRGMTYgPSB7XG4gIGFyYWI6IFsxNjMyLCAxNjQxXSxcbiAgYXJhYmV4dDogWzE3NzYsIDE3ODVdLFxuICBiYWxpOiBbNjk5MiwgNzAwMV0sXG4gIGJlbmc6IFsyNTM0LCAyNTQzXSxcbiAgZGV2YTogWzI0MDYsIDI0MTVdLFxuICBmdWxsd2lkZTogWzY1Mjk2LCA2NTMwM10sXG4gIGd1anI6IFsyNzkwLCAyNzk5XSxcbiAga2htcjogWzYxMTIsIDYxMjFdLFxuICBrbmRhOiBbMzMwMiwgMzMxMV0sXG4gIGxhb286IFszNzkyLCAzODAxXSxcbiAgbGltYjogWzY0NzAsIDY0NzldLFxuICBtbHltOiBbMzQzMCwgMzQzOV0sXG4gIG1vbmc6IFs2MTYwLCA2MTY5XSxcbiAgbXltcjogWzQxNjAsIDQxNjldLFxuICBvcnlhOiBbMjkxOCwgMjkyN10sXG4gIHRhbWxkZWM6IFszMDQ2LCAzMDU1XSxcbiAgdGVsdTogWzMxNzQsIDMxODNdLFxuICB0aGFpOiBbMzY2NCwgMzY3M10sXG4gIHRpYnQ6IFszODcyLCAzODgxXSxcbn07XG5cbmNvbnN0IGhhbmlkZWNDaGFycyA9IG51bWJlcmluZ1N5c3RlbXMuaGFuaWRlYy5yZXBsYWNlKC9bXFxbfFxcXV0vZywgXCJcIikuc3BsaXQoXCJcIik7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZURpZ2l0cyhzdHIpIHtcbiAgbGV0IHZhbHVlID0gcGFyc2VJbnQoc3RyLCAxMCk7XG4gIGlmIChpc05hTih2YWx1ZSkpIHtcbiAgICB2YWx1ZSA9IFwiXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGNvZGUgPSBzdHIuY2hhckNvZGVBdChpKTtcblxuICAgICAgaWYgKHN0cltpXS5zZWFyY2gobnVtYmVyaW5nU3lzdGVtcy5oYW5pZGVjKSAhPT0gLTEpIHtcbiAgICAgICAgdmFsdWUgKz0gaGFuaWRlY0NoYXJzLmluZGV4T2Yoc3RyW2ldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG51bWJlcmluZ1N5c3RlbXNVVEYxNikge1xuICAgICAgICAgIGNvbnN0IFttaW4sIG1heF0gPSBudW1iZXJpbmdTeXN0ZW1zVVRGMTZba2V5XTtcbiAgICAgICAgICBpZiAoY29kZSA+PSBtaW4gJiYgY29kZSA8PSBtYXgpIHtcbiAgICAgICAgICAgIHZhbHVlICs9IGNvZGUgLSBtaW47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlnaXRSZWdleCh7IG51bWJlcmluZ1N5c3RlbSB9LCBhcHBlbmQgPSBcIlwiKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKGAke251bWJlcmluZ1N5c3RlbXNbbnVtYmVyaW5nU3lzdGVtIHx8IFwibGF0blwiXX0ke2FwcGVuZH1gKTtcbn1cbiIsICJpbXBvcnQgeyBwYXJzZU1pbGxpcywgaXNVbmRlZmluZWQsIHVudHJ1bmNhdGVZZWFyLCBzaWduZWRPZmZzZXQsIGhhc093blByb3BlcnR5IH0gZnJvbSBcIi4vdXRpbC5qc1wiO1xuaW1wb3J0IEZvcm1hdHRlciBmcm9tIFwiLi9mb3JtYXR0ZXIuanNcIjtcbmltcG9ydCBGaXhlZE9mZnNldFpvbmUgZnJvbSBcIi4uL3pvbmVzL2ZpeGVkT2Zmc2V0Wm9uZS5qc1wiO1xuaW1wb3J0IElBTkFab25lIGZyb20gXCIuLi96b25lcy9JQU5BWm9uZS5qc1wiO1xuaW1wb3J0IERhdGVUaW1lIGZyb20gXCIuLi9kYXRldGltZS5qc1wiO1xuaW1wb3J0IHsgZGlnaXRSZWdleCwgcGFyc2VEaWdpdHMgfSBmcm9tIFwiLi9kaWdpdHMuanNcIjtcbmltcG9ydCB7IENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yIH0gZnJvbSBcIi4uL2Vycm9ycy5qc1wiO1xuXG5jb25zdCBNSVNTSU5HX0ZUUCA9IFwibWlzc2luZyBJbnRsLkRhdGVUaW1lRm9ybWF0LmZvcm1hdFRvUGFydHMgc3VwcG9ydFwiO1xuXG5mdW5jdGlvbiBpbnRVbml0KHJlZ2V4LCBwb3N0ID0gKGkpID0+IGkpIHtcbiAgcmV0dXJuIHsgcmVnZXgsIGRlc2VyOiAoW3NdKSA9PiBwb3N0KHBhcnNlRGlnaXRzKHMpKSB9O1xufVxuXG5jb25zdCBOQlNQID0gU3RyaW5nLmZyb21DaGFyQ29kZSgxNjApO1xuY29uc3Qgc3BhY2VPck5CU1AgPSBgWyAke05CU1B9XWA7XG5jb25zdCBzcGFjZU9yTkJTUFJlZ0V4cCA9IG5ldyBSZWdFeHAoc3BhY2VPck5CU1AsIFwiZ1wiKTtcblxuZnVuY3Rpb24gZml4TGlzdFJlZ2V4KHMpIHtcbiAgLy8gbWFrZSBkb3RzIG9wdGlvbmFsIGFuZCBhbHNvIG1ha2UgdGhlbSBsaXRlcmFsXG4gIC8vIG1ha2Ugc3BhY2UgYW5kIG5vbiBicmVha2FibGUgc3BhY2UgY2hhcmFjdGVycyBpbnRlcmNoYW5nZWFibGVcbiAgcmV0dXJuIHMucmVwbGFjZSgvXFwuL2csIFwiXFxcXC4/XCIpLnJlcGxhY2Uoc3BhY2VPck5CU1BSZWdFeHAsIHNwYWNlT3JOQlNQKTtcbn1cblxuZnVuY3Rpb24gc3RyaXBJbnNlbnNpdGl2aXRpZXMocykge1xuICByZXR1cm4gc1xuICAgIC5yZXBsYWNlKC9cXC4vZywgXCJcIikgLy8gaWdub3JlIGRvdHMgdGhhdCB3ZXJlIG1hZGUgb3B0aW9uYWxcbiAgICAucmVwbGFjZShzcGFjZU9yTkJTUFJlZ0V4cCwgXCIgXCIpIC8vIGludGVyY2hhbmdlIHNwYWNlIGFuZCBuYnNwXG4gICAgLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIG9uZU9mKHN0cmluZ3MsIHN0YXJ0SW5kZXgpIHtcbiAgaWYgKHN0cmluZ3MgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVnZXg6IFJlZ0V4cChzdHJpbmdzLm1hcChmaXhMaXN0UmVnZXgpLmpvaW4oXCJ8XCIpKSxcbiAgICAgIGRlc2VyOiAoW3NdKSA9PlxuICAgICAgICBzdHJpbmdzLmZpbmRJbmRleCgoaSkgPT4gc3RyaXBJbnNlbnNpdGl2aXRpZXMocykgPT09IHN0cmlwSW5zZW5zaXRpdml0aWVzKGkpKSArIHN0YXJ0SW5kZXgsXG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvZmZzZXQocmVnZXgsIGdyb3Vwcykge1xuICByZXR1cm4geyByZWdleCwgZGVzZXI6IChbLCBoLCBtXSkgPT4gc2lnbmVkT2Zmc2V0KGgsIG0pLCBncm91cHMgfTtcbn1cblxuZnVuY3Rpb24gc2ltcGxlKHJlZ2V4KSB7XG4gIHJldHVybiB7IHJlZ2V4LCBkZXNlcjogKFtzXSkgPT4gcyB9O1xufVxuXG5mdW5jdGlvbiBlc2NhcGVUb2tlbih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUucmVwbGFjZSgvW1xcLVxcW1xcXXt9KCkqKz8uLFxcXFxcXF4kfCNcXHNdL2csIFwiXFxcXCQmXCIpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB0b2tlblxuICogQHBhcmFtIHtMb2NhbGV9IGxvY1xuICovXG5mdW5jdGlvbiB1bml0Rm9yVG9rZW4odG9rZW4sIGxvYykge1xuICBjb25zdCBvbmUgPSBkaWdpdFJlZ2V4KGxvYyksXG4gICAgdHdvID0gZGlnaXRSZWdleChsb2MsIFwiezJ9XCIpLFxuICAgIHRocmVlID0gZGlnaXRSZWdleChsb2MsIFwiezN9XCIpLFxuICAgIGZvdXIgPSBkaWdpdFJlZ2V4KGxvYywgXCJ7NH1cIiksXG4gICAgc2l4ID0gZGlnaXRSZWdleChsb2MsIFwiezZ9XCIpLFxuICAgIG9uZU9yVHdvID0gZGlnaXRSZWdleChsb2MsIFwiezEsMn1cIiksXG4gICAgb25lVG9UaHJlZSA9IGRpZ2l0UmVnZXgobG9jLCBcInsxLDN9XCIpLFxuICAgIG9uZVRvU2l4ID0gZGlnaXRSZWdleChsb2MsIFwiezEsNn1cIiksXG4gICAgb25lVG9OaW5lID0gZGlnaXRSZWdleChsb2MsIFwiezEsOX1cIiksXG4gICAgdHdvVG9Gb3VyID0gZGlnaXRSZWdleChsb2MsIFwiezIsNH1cIiksXG4gICAgZm91clRvU2l4ID0gZGlnaXRSZWdleChsb2MsIFwiezQsNn1cIiksXG4gICAgbGl0ZXJhbCA9ICh0KSA9PiAoeyByZWdleDogUmVnRXhwKGVzY2FwZVRva2VuKHQudmFsKSksIGRlc2VyOiAoW3NdKSA9PiBzLCBsaXRlcmFsOiB0cnVlIH0pLFxuICAgIHVuaXRhdGUgPSAodCkgPT4ge1xuICAgICAgaWYgKHRva2VuLmxpdGVyYWwpIHtcbiAgICAgICAgcmV0dXJuIGxpdGVyYWwodCk7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKHQudmFsKSB7XG4gICAgICAgIC8vIGVyYVxuICAgICAgICBjYXNlIFwiR1wiOlxuICAgICAgICAgIHJldHVybiBvbmVPZihsb2MuZXJhcyhcInNob3J0XCIpLCAwKTtcbiAgICAgICAgY2FzZSBcIkdHXCI6XG4gICAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5lcmFzKFwibG9uZ1wiKSwgMCk7XG4gICAgICAgIC8vIHllYXJzXG4gICAgICAgIGNhc2UgXCJ5XCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQob25lVG9TaXgpO1xuICAgICAgICBjYXNlIFwieXlcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d29Ub0ZvdXIsIHVudHJ1bmNhdGVZZWFyKTtcbiAgICAgICAgY2FzZSBcInl5eXlcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChmb3VyKTtcbiAgICAgICAgY2FzZSBcInl5eXl5XCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQoZm91clRvU2l4KTtcbiAgICAgICAgY2FzZSBcInl5eXl5eVwiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KHNpeCk7XG4gICAgICAgIC8vIG1vbnRoc1xuICAgICAgICBjYXNlIFwiTVwiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcbiAgICAgICAgY2FzZSBcIk1NXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcbiAgICAgICAgY2FzZSBcIk1NTVwiOlxuICAgICAgICAgIHJldHVybiBvbmVPZihsb2MubW9udGhzKFwic2hvcnRcIiwgdHJ1ZSksIDEpO1xuICAgICAgICBjYXNlIFwiTU1NTVwiOlxuICAgICAgICAgIHJldHVybiBvbmVPZihsb2MubW9udGhzKFwibG9uZ1wiLCB0cnVlKSwgMSk7XG4gICAgICAgIGNhc2UgXCJMXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuICAgICAgICBjYXNlIFwiTExcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuICAgICAgICBjYXNlIFwiTExMXCI6XG4gICAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tb250aHMoXCJzaG9ydFwiLCBmYWxzZSksIDEpO1xuICAgICAgICBjYXNlIFwiTExMTFwiOlxuICAgICAgICAgIHJldHVybiBvbmVPZihsb2MubW9udGhzKFwibG9uZ1wiLCBmYWxzZSksIDEpO1xuICAgICAgICAvLyBkYXRlc1xuICAgICAgICBjYXNlIFwiZFwiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcbiAgICAgICAgY2FzZSBcImRkXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcbiAgICAgICAgLy8gb3JkaW5hbHNcbiAgICAgICAgY2FzZSBcIm9cIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmVUb1RocmVlKTtcbiAgICAgICAgY2FzZSBcIm9vb1wiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KHRocmVlKTtcbiAgICAgICAgLy8gdGltZVxuICAgICAgICBjYXNlIFwiSEhcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuICAgICAgICBjYXNlIFwiSFwiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcbiAgICAgICAgY2FzZSBcImhoXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcbiAgICAgICAgY2FzZSBcImhcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG4gICAgICAgIGNhc2UgXCJtbVwiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG4gICAgICAgIGNhc2UgXCJtXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuICAgICAgICBjYXNlIFwicVwiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcbiAgICAgICAgY2FzZSBcInFxXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcbiAgICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG4gICAgICAgIGNhc2UgXCJzc1wiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG4gICAgICAgIGNhc2UgXCJTXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQob25lVG9UaHJlZSk7XG4gICAgICAgIGNhc2UgXCJTU1NcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdCh0aHJlZSk7XG4gICAgICAgIGNhc2UgXCJ1XCI6XG4gICAgICAgICAgcmV0dXJuIHNpbXBsZShvbmVUb05pbmUpO1xuICAgICAgICBjYXNlIFwidXVcIjpcbiAgICAgICAgICByZXR1cm4gc2ltcGxlKG9uZU9yVHdvKTtcbiAgICAgICAgY2FzZSBcInV1dVwiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KG9uZSk7XG4gICAgICAgIC8vIG1lcmlkaWVtXG4gICAgICAgIGNhc2UgXCJhXCI6XG4gICAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tZXJpZGllbXMoKSwgMCk7XG4gICAgICAgIC8vIHdlZWtZZWFyIChrKVxuICAgICAgICBjYXNlIFwia2tra1wiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KGZvdXIpO1xuICAgICAgICBjYXNlIFwia2tcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d29Ub0ZvdXIsIHVudHJ1bmNhdGVZZWFyKTtcbiAgICAgICAgLy8gd2Vla051bWJlciAoVylcbiAgICAgICAgY2FzZSBcIldcIjpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG4gICAgICAgIGNhc2UgXCJXV1wiOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG4gICAgICAgIC8vIHdlZWtkYXlzXG4gICAgICAgIGNhc2UgXCJFXCI6XG4gICAgICAgIGNhc2UgXCJjXCI6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQob25lKTtcbiAgICAgICAgY2FzZSBcIkVFRVwiOlxuICAgICAgICAgIHJldHVybiBvbmVPZihsb2Mud2Vla2RheXMoXCJzaG9ydFwiLCBmYWxzZSksIDEpO1xuICAgICAgICBjYXNlIFwiRUVFRVwiOlxuICAgICAgICAgIHJldHVybiBvbmVPZihsb2Mud2Vla2RheXMoXCJsb25nXCIsIGZhbHNlKSwgMSk7XG4gICAgICAgIGNhc2UgXCJjY2NcIjpcbiAgICAgICAgICByZXR1cm4gb25lT2YobG9jLndlZWtkYXlzKFwic2hvcnRcIiwgdHJ1ZSksIDEpO1xuICAgICAgICBjYXNlIFwiY2NjY1wiOlxuICAgICAgICAgIHJldHVybiBvbmVPZihsb2Mud2Vla2RheXMoXCJsb25nXCIsIHRydWUpLCAxKTtcbiAgICAgICAgLy8gb2Zmc2V0L3pvbmVcbiAgICAgICAgY2FzZSBcIlpcIjpcbiAgICAgICAgY2FzZSBcIlpaXCI6XG4gICAgICAgICAgcmV0dXJuIG9mZnNldChuZXcgUmVnRXhwKGAoWystXSR7b25lT3JUd28uc291cmNlfSkoPzo6KCR7dHdvLnNvdXJjZX0pKT9gKSwgMik7XG4gICAgICAgIGNhc2UgXCJaWlpcIjpcbiAgICAgICAgICByZXR1cm4gb2Zmc2V0KG5ldyBSZWdFeHAoYChbKy1dJHtvbmVPclR3by5zb3VyY2V9KSgke3R3by5zb3VyY2V9KT9gKSwgMik7XG4gICAgICAgIC8vIHdlIGRvbid0IHN1cHBvcnQgWlpaWiAoUFNUKSBvciBaWlpaWiAoUGFjaWZpYyBTdGFuZGFyZCBUaW1lKSBpbiBwYXJzaW5nXG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSBhbnkgd2F5IHRvIGZpZ3VyZSBvdXQgd2hhdCB0aGV5IGFyZVxuICAgICAgICBjYXNlIFwielwiOlxuICAgICAgICAgIHJldHVybiBzaW1wbGUoL1thLXpfKy0vXXsxLDI1Nn0/L2kpO1xuICAgICAgICAvLyB0aGlzIHNwZWNpYWwtY2FzZSBcInRva2VuXCIgcmVwcmVzZW50cyBhIHBsYWNlIHdoZXJlIGEgbWFjcm8tdG9rZW4gZXhwYW5kZWQgaW50byBhIHdoaXRlLXNwYWNlIGxpdGVyYWxcbiAgICAgICAgLy8gaW4gdGhpcyBjYXNlIHdlIGFjY2VwdCBhbnkgbm9uLW5ld2xpbmUgd2hpdGUtc3BhY2VcbiAgICAgICAgY2FzZSBcIiBcIjpcbiAgICAgICAgICByZXR1cm4gc2ltcGxlKC9bXlxcU1xcblxccl0vKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbGl0ZXJhbCh0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gIGNvbnN0IHVuaXQgPSB1bml0YXRlKHRva2VuKSB8fCB7XG4gICAgaW52YWxpZFJlYXNvbjogTUlTU0lOR19GVFAsXG4gIH07XG5cbiAgdW5pdC50b2tlbiA9IHRva2VuO1xuXG4gIHJldHVybiB1bml0O1xufVxuXG5jb25zdCBwYXJ0VHlwZVN0eWxlVG9Ub2tlblZhbCA9IHtcbiAgeWVhcjoge1xuICAgIFwiMi1kaWdpdFwiOiBcInl5XCIsXG4gICAgbnVtZXJpYzogXCJ5eXl5eVwiLFxuICB9LFxuICBtb250aDoge1xuICAgIG51bWVyaWM6IFwiTVwiLFxuICAgIFwiMi1kaWdpdFwiOiBcIk1NXCIsXG4gICAgc2hvcnQ6IFwiTU1NXCIsXG4gICAgbG9uZzogXCJNTU1NXCIsXG4gIH0sXG4gIGRheToge1xuICAgIG51bWVyaWM6IFwiZFwiLFxuICAgIFwiMi1kaWdpdFwiOiBcImRkXCIsXG4gIH0sXG4gIHdlZWtkYXk6IHtcbiAgICBzaG9ydDogXCJFRUVcIixcbiAgICBsb25nOiBcIkVFRUVcIixcbiAgfSxcbiAgZGF5cGVyaW9kOiBcImFcIixcbiAgZGF5UGVyaW9kOiBcImFcIixcbiAgaG91cjEyOiB7XG4gICAgbnVtZXJpYzogXCJoXCIsXG4gICAgXCIyLWRpZ2l0XCI6IFwiaGhcIixcbiAgfSxcbiAgaG91cjI0OiB7XG4gICAgbnVtZXJpYzogXCJIXCIsXG4gICAgXCIyLWRpZ2l0XCI6IFwiSEhcIixcbiAgfSxcbiAgbWludXRlOiB7XG4gICAgbnVtZXJpYzogXCJtXCIsXG4gICAgXCIyLWRpZ2l0XCI6IFwibW1cIixcbiAgfSxcbiAgc2Vjb25kOiB7XG4gICAgbnVtZXJpYzogXCJzXCIsXG4gICAgXCIyLWRpZ2l0XCI6IFwic3NcIixcbiAgfSxcbiAgdGltZVpvbmVOYW1lOiB7XG4gICAgbG9uZzogXCJaWlpaWlwiLFxuICAgIHNob3J0OiBcIlpaWlwiLFxuICB9LFxufTtcblxuZnVuY3Rpb24gdG9rZW5Gb3JQYXJ0KHBhcnQsIGZvcm1hdE9wdHMsIHJlc29sdmVkT3B0cykge1xuICBjb25zdCB7IHR5cGUsIHZhbHVlIH0gPSBwYXJ0O1xuXG4gIGlmICh0eXBlID09PSBcImxpdGVyYWxcIikge1xuICAgIGNvbnN0IGlzU3BhY2UgPSAvXlxccyskLy50ZXN0KHZhbHVlKTtcbiAgICByZXR1cm4ge1xuICAgICAgbGl0ZXJhbDogIWlzU3BhY2UsXG4gICAgICB2YWw6IGlzU3BhY2UgPyBcIiBcIiA6IHZhbHVlLFxuICAgIH07XG4gIH1cblxuICBjb25zdCBzdHlsZSA9IGZvcm1hdE9wdHNbdHlwZV07XG5cbiAgLy8gVGhlIHVzZXIgbWlnaHQgaGF2ZSBleHBsaWNpdGx5IHNwZWNpZmllZCBob3VyMTIgb3IgaG91ckN5Y2xlXG4gIC8vIGlmIHNvLCByZXNwZWN0IHRoZWlyIGRlY2lzaW9uXG4gIC8vIGlmIG5vdCwgcmVmZXIgYmFjayB0byB0aGUgcmVzb2x2ZWRPcHRzLCB3aGljaCBhcmUgYmFzZWQgb24gdGhlIGxvY2FsZVxuICBsZXQgYWN0dWFsVHlwZSA9IHR5cGU7XG4gIGlmICh0eXBlID09PSBcImhvdXJcIikge1xuICAgIGlmIChmb3JtYXRPcHRzLmhvdXIxMiAhPSBudWxsKSB7XG4gICAgICBhY3R1YWxUeXBlID0gZm9ybWF0T3B0cy5ob3VyMTIgPyBcImhvdXIxMlwiIDogXCJob3VyMjRcIjtcbiAgICB9IGVsc2UgaWYgKGZvcm1hdE9wdHMuaG91ckN5Y2xlICE9IG51bGwpIHtcbiAgICAgIGlmIChmb3JtYXRPcHRzLmhvdXJDeWNsZSA9PT0gXCJoMTFcIiB8fCBmb3JtYXRPcHRzLmhvdXJDeWNsZSA9PT0gXCJoMTJcIikge1xuICAgICAgICBhY3R1YWxUeXBlID0gXCJob3VyMTJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdHVhbFR5cGUgPSBcImhvdXIyNFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0b2tlbnMgb25seSBkaWZmZXJlbnRpYXRlIGJldHdlZW4gMjQgaG91cnMgb3Igbm90LFxuICAgICAgLy8gc28gd2UgZG8gbm90IG5lZWQgdG8gY2hlY2sgaG91ckN5Y2xlIGhlcmUsIHdoaWNoIGlzIGxlc3Mgc3VwcG9ydGVkIGFueXdheXNcbiAgICAgIGFjdHVhbFR5cGUgPSByZXNvbHZlZE9wdHMuaG91cjEyID8gXCJob3VyMTJcIiA6IFwiaG91cjI0XCI7XG4gICAgfVxuICB9XG4gIGxldCB2YWwgPSBwYXJ0VHlwZVN0eWxlVG9Ub2tlblZhbFthY3R1YWxUeXBlXTtcbiAgaWYgKHR5cGVvZiB2YWwgPT09IFwib2JqZWN0XCIpIHtcbiAgICB2YWwgPSB2YWxbc3R5bGVdO1xuICB9XG5cbiAgaWYgKHZhbCkge1xuICAgIHJldHVybiB7XG4gICAgICBsaXRlcmFsOiBmYWxzZSxcbiAgICAgIHZhbCxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gYnVpbGRSZWdleCh1bml0cykge1xuICBjb25zdCByZSA9IHVuaXRzLm1hcCgodSkgPT4gdS5yZWdleCkucmVkdWNlKChmLCByKSA9PiBgJHtmfSgke3Iuc291cmNlfSlgLCBcIlwiKTtcbiAgcmV0dXJuIFtgXiR7cmV9JGAsIHVuaXRzXTtcbn1cblxuZnVuY3Rpb24gbWF0Y2goaW5wdXQsIHJlZ2V4LCBoYW5kbGVycykge1xuICBjb25zdCBtYXRjaGVzID0gaW5wdXQubWF0Y2gocmVnZXgpO1xuXG4gIGlmIChtYXRjaGVzKSB7XG4gICAgY29uc3QgYWxsID0ge307XG4gICAgbGV0IG1hdGNoSW5kZXggPSAxO1xuICAgIGZvciAoY29uc3QgaSBpbiBoYW5kbGVycykge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5KGhhbmRsZXJzLCBpKSkge1xuICAgICAgICBjb25zdCBoID0gaGFuZGxlcnNbaV0sXG4gICAgICAgICAgZ3JvdXBzID0gaC5ncm91cHMgPyBoLmdyb3VwcyArIDEgOiAxO1xuICAgICAgICBpZiAoIWgubGl0ZXJhbCAmJiBoLnRva2VuKSB7XG4gICAgICAgICAgYWxsW2gudG9rZW4udmFsWzBdXSA9IGguZGVzZXIobWF0Y2hlcy5zbGljZShtYXRjaEluZGV4LCBtYXRjaEluZGV4ICsgZ3JvdXBzKSk7XG4gICAgICAgIH1cbiAgICAgICAgbWF0Y2hJbmRleCArPSBncm91cHM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbbWF0Y2hlcywgYWxsXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gW21hdGNoZXMsIHt9XTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkYXRlVGltZUZyb21NYXRjaGVzKG1hdGNoZXMpIHtcbiAgY29uc3QgdG9GaWVsZCA9ICh0b2tlbikgPT4ge1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgXCJTXCI6XG4gICAgICAgIHJldHVybiBcIm1pbGxpc2Vjb25kXCI7XG4gICAgICBjYXNlIFwic1wiOlxuICAgICAgICByZXR1cm4gXCJzZWNvbmRcIjtcbiAgICAgIGNhc2UgXCJtXCI6XG4gICAgICAgIHJldHVybiBcIm1pbnV0ZVwiO1xuICAgICAgY2FzZSBcImhcIjpcbiAgICAgIGNhc2UgXCJIXCI6XG4gICAgICAgIHJldHVybiBcImhvdXJcIjtcbiAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgIHJldHVybiBcImRheVwiO1xuICAgICAgY2FzZSBcIm9cIjpcbiAgICAgICAgcmV0dXJuIFwib3JkaW5hbFwiO1xuICAgICAgY2FzZSBcIkxcIjpcbiAgICAgIGNhc2UgXCJNXCI6XG4gICAgICAgIHJldHVybiBcIm1vbnRoXCI7XG4gICAgICBjYXNlIFwieVwiOlxuICAgICAgICByZXR1cm4gXCJ5ZWFyXCI7XG4gICAgICBjYXNlIFwiRVwiOlxuICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgcmV0dXJuIFwid2Vla2RheVwiO1xuICAgICAgY2FzZSBcIldcIjpcbiAgICAgICAgcmV0dXJuIFwid2Vla051bWJlclwiO1xuICAgICAgY2FzZSBcImtcIjpcbiAgICAgICAgcmV0dXJuIFwid2Vla1llYXJcIjtcbiAgICAgIGNhc2UgXCJxXCI6XG4gICAgICAgIHJldHVybiBcInF1YXJ0ZXJcIjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfTtcblxuICBsZXQgem9uZSA9IG51bGw7XG4gIGxldCBzcGVjaWZpY09mZnNldDtcbiAgaWYgKCFpc1VuZGVmaW5lZChtYXRjaGVzLnopKSB7XG4gICAgem9uZSA9IElBTkFab25lLmNyZWF0ZShtYXRjaGVzLnopO1xuICB9XG5cbiAgaWYgKCFpc1VuZGVmaW5lZChtYXRjaGVzLlopKSB7XG4gICAgaWYgKCF6b25lKSB7XG4gICAgICB6b25lID0gbmV3IEZpeGVkT2Zmc2V0Wm9uZShtYXRjaGVzLlopO1xuICAgIH1cbiAgICBzcGVjaWZpY09mZnNldCA9IG1hdGNoZXMuWjtcbiAgfVxuXG4gIGlmICghaXNVbmRlZmluZWQobWF0Y2hlcy5xKSkge1xuICAgIG1hdGNoZXMuTSA9IChtYXRjaGVzLnEgLSAxKSAqIDMgKyAxO1xuICB9XG5cbiAgaWYgKCFpc1VuZGVmaW5lZChtYXRjaGVzLmgpKSB7XG4gICAgaWYgKG1hdGNoZXMuaCA8IDEyICYmIG1hdGNoZXMuYSA9PT0gMSkge1xuICAgICAgbWF0Y2hlcy5oICs9IDEyO1xuICAgIH0gZWxzZSBpZiAobWF0Y2hlcy5oID09PSAxMiAmJiBtYXRjaGVzLmEgPT09IDApIHtcbiAgICAgIG1hdGNoZXMuaCA9IDA7XG4gICAgfVxuICB9XG5cbiAgaWYgKG1hdGNoZXMuRyA9PT0gMCAmJiBtYXRjaGVzLnkpIHtcbiAgICBtYXRjaGVzLnkgPSAtbWF0Y2hlcy55O1xuICB9XG5cbiAgaWYgKCFpc1VuZGVmaW5lZChtYXRjaGVzLnUpKSB7XG4gICAgbWF0Y2hlcy5TID0gcGFyc2VNaWxsaXMobWF0Y2hlcy51KTtcbiAgfVxuXG4gIGNvbnN0IHZhbHMgPSBPYmplY3Qua2V5cyhtYXRjaGVzKS5yZWR1Y2UoKHIsIGspID0+IHtcbiAgICBjb25zdCBmID0gdG9GaWVsZChrKTtcbiAgICBpZiAoZikge1xuICAgICAgcltmXSA9IG1hdGNoZXNba107XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH0sIHt9KTtcblxuICByZXR1cm4gW3ZhbHMsIHpvbmUsIHNwZWNpZmljT2Zmc2V0XTtcbn1cblxubGV0IGR1bW15RGF0ZVRpbWVDYWNoZSA9IG51bGw7XG5cbmZ1bmN0aW9uIGdldER1bW15RGF0ZVRpbWUoKSB7XG4gIGlmICghZHVtbXlEYXRlVGltZUNhY2hlKSB7XG4gICAgZHVtbXlEYXRlVGltZUNhY2hlID0gRGF0ZVRpbWUuZnJvbU1pbGxpcygxNTU1NTU1NTU1NTU1KTtcbiAgfVxuXG4gIHJldHVybiBkdW1teURhdGVUaW1lQ2FjaGU7XG59XG5cbmZ1bmN0aW9uIG1heWJlRXhwYW5kTWFjcm9Ub2tlbih0b2tlbiwgbG9jYWxlKSB7XG4gIGlmICh0b2tlbi5saXRlcmFsKSB7XG4gICAgcmV0dXJuIHRva2VuO1xuICB9XG5cbiAgY29uc3QgZm9ybWF0T3B0cyA9IEZvcm1hdHRlci5tYWNyb1Rva2VuVG9Gb3JtYXRPcHRzKHRva2VuLnZhbCk7XG4gIGNvbnN0IHRva2VucyA9IGZvcm1hdE9wdHNUb1Rva2Vucyhmb3JtYXRPcHRzLCBsb2NhbGUpO1xuXG4gIGlmICh0b2tlbnMgPT0gbnVsbCB8fCB0b2tlbnMuaW5jbHVkZXModW5kZWZpbmVkKSkge1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxuXG4gIHJldHVybiB0b2tlbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHBhbmRNYWNyb1Rva2Vucyh0b2tlbnMsIGxvY2FsZSkge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdCguLi50b2tlbnMubWFwKCh0KSA9PiBtYXliZUV4cGFuZE1hY3JvVG9rZW4odCwgbG9jYWxlKSkpO1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGV4cGxhaW5Gcm9tVG9rZW5zKGxvY2FsZSwgaW5wdXQsIGZvcm1hdCkge1xuICBjb25zdCB0b2tlbnMgPSBleHBhbmRNYWNyb1Rva2VucyhGb3JtYXR0ZXIucGFyc2VGb3JtYXQoZm9ybWF0KSwgbG9jYWxlKSxcbiAgICB1bml0cyA9IHRva2Vucy5tYXAoKHQpID0+IHVuaXRGb3JUb2tlbih0LCBsb2NhbGUpKSxcbiAgICBkaXNxdWFsaWZ5aW5nVW5pdCA9IHVuaXRzLmZpbmQoKHQpID0+IHQuaW52YWxpZFJlYXNvbik7XG5cbiAgaWYgKGRpc3F1YWxpZnlpbmdVbml0KSB7XG4gICAgcmV0dXJuIHsgaW5wdXQsIHRva2VucywgaW52YWxpZFJlYXNvbjogZGlzcXVhbGlmeWluZ1VuaXQuaW52YWxpZFJlYXNvbiB9O1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IFtyZWdleFN0cmluZywgaGFuZGxlcnNdID0gYnVpbGRSZWdleCh1bml0cyksXG4gICAgICByZWdleCA9IFJlZ0V4cChyZWdleFN0cmluZywgXCJpXCIpLFxuICAgICAgW3Jhd01hdGNoZXMsIG1hdGNoZXNdID0gbWF0Y2goaW5wdXQsIHJlZ2V4LCBoYW5kbGVycyksXG4gICAgICBbcmVzdWx0LCB6b25lLCBzcGVjaWZpY09mZnNldF0gPSBtYXRjaGVzXG4gICAgICAgID8gZGF0ZVRpbWVGcm9tTWF0Y2hlcyhtYXRjaGVzKVxuICAgICAgICA6IFtudWxsLCBudWxsLCB1bmRlZmluZWRdO1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eShtYXRjaGVzLCBcImFcIikgJiYgaGFzT3duUHJvcGVydHkobWF0Y2hlcywgXCJIXCIpKSB7XG4gICAgICB0aHJvdyBuZXcgQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IoXG4gICAgICAgIFwiQ2FuJ3QgaW5jbHVkZSBtZXJpZGllbSB3aGVuIHNwZWNpZnlpbmcgMjQtaG91ciBmb3JtYXRcIlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgaW5wdXQsIHRva2VucywgcmVnZXgsIHJhd01hdGNoZXMsIG1hdGNoZXMsIHJlc3VsdCwgem9uZSwgc3BlY2lmaWNPZmZzZXQgfTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VGcm9tVG9rZW5zKGxvY2FsZSwgaW5wdXQsIGZvcm1hdCkge1xuICBjb25zdCB7IHJlc3VsdCwgem9uZSwgc3BlY2lmaWNPZmZzZXQsIGludmFsaWRSZWFzb24gfSA9IGV4cGxhaW5Gcm9tVG9rZW5zKGxvY2FsZSwgaW5wdXQsIGZvcm1hdCk7XG4gIHJldHVybiBbcmVzdWx0LCB6b25lLCBzcGVjaWZpY09mZnNldCwgaW52YWxpZFJlYXNvbl07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRPcHRzVG9Ub2tlbnMoZm9ybWF0T3B0cywgbG9jYWxlKSB7XG4gIGlmICghZm9ybWF0T3B0cykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgZm9ybWF0dGVyID0gRm9ybWF0dGVyLmNyZWF0ZShsb2NhbGUsIGZvcm1hdE9wdHMpO1xuICBjb25zdCBkZiA9IGZvcm1hdHRlci5kdEZvcm1hdHRlcihnZXREdW1teURhdGVUaW1lKCkpO1xuICBjb25zdCBwYXJ0cyA9IGRmLmZvcm1hdFRvUGFydHMoKTtcbiAgY29uc3QgcmVzb2x2ZWRPcHRzID0gZGYucmVzb2x2ZWRPcHRpb25zKCk7XG4gIHJldHVybiBwYXJ0cy5tYXAoKHApID0+IHRva2VuRm9yUGFydChwLCBmb3JtYXRPcHRzLCByZXNvbHZlZE9wdHMpKTtcbn1cbiIsICJpbXBvcnQgRHVyYXRpb24gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcbmltcG9ydCBJbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IFNldHRpbmdzIGZyb20gXCIuL3NldHRpbmdzLmpzXCI7XG5pbXBvcnQgSW5mbyBmcm9tIFwiLi9pbmZvLmpzXCI7XG5pbXBvcnQgRm9ybWF0dGVyIGZyb20gXCIuL2ltcGwvZm9ybWF0dGVyLmpzXCI7XG5pbXBvcnQgRml4ZWRPZmZzZXRab25lIGZyb20gXCIuL3pvbmVzL2ZpeGVkT2Zmc2V0Wm9uZS5qc1wiO1xuaW1wb3J0IExvY2FsZSBmcm9tIFwiLi9pbXBsL2xvY2FsZS5qc1wiO1xuaW1wb3J0IHtcbiAgaXNVbmRlZmluZWQsXG4gIG1heWJlQXJyYXksXG4gIGlzRGF0ZSxcbiAgaXNOdW1iZXIsXG4gIGJlc3RCeSxcbiAgZGF5c0luTW9udGgsXG4gIGRheXNJblllYXIsXG4gIGlzTGVhcFllYXIsXG4gIHdlZWtzSW5XZWVrWWVhcixcbiAgbm9ybWFsaXplT2JqZWN0LFxuICByb3VuZFRvLFxuICBvYmpUb0xvY2FsVFMsXG4gIHBhZFN0YXJ0LFxufSBmcm9tIFwiLi9pbXBsL3V0aWwuanNcIjtcbmltcG9ydCB7IG5vcm1hbGl6ZVpvbmUgfSBmcm9tIFwiLi9pbXBsL3pvbmVVdGlsLmpzXCI7XG5pbXBvcnQgZGlmZiBmcm9tIFwiLi9pbXBsL2RpZmYuanNcIjtcbmltcG9ydCB7IHBhcnNlUkZDMjgyMkRhdGUsIHBhcnNlSVNPRGF0ZSwgcGFyc2VIVFRQRGF0ZSwgcGFyc2VTUUwgfSBmcm9tIFwiLi9pbXBsL3JlZ2V4UGFyc2VyLmpzXCI7XG5pbXBvcnQge1xuICBwYXJzZUZyb21Ub2tlbnMsXG4gIGV4cGxhaW5Gcm9tVG9rZW5zLFxuICBmb3JtYXRPcHRzVG9Ub2tlbnMsXG4gIGV4cGFuZE1hY3JvVG9rZW5zLFxufSBmcm9tIFwiLi9pbXBsL3Rva2VuUGFyc2VyLmpzXCI7XG5pbXBvcnQge1xuICBncmVnb3JpYW5Ub1dlZWssXG4gIHdlZWtUb0dyZWdvcmlhbixcbiAgZ3JlZ29yaWFuVG9PcmRpbmFsLFxuICBvcmRpbmFsVG9HcmVnb3JpYW4sXG4gIGhhc0ludmFsaWRHcmVnb3JpYW5EYXRhLFxuICBoYXNJbnZhbGlkV2Vla0RhdGEsXG4gIGhhc0ludmFsaWRPcmRpbmFsRGF0YSxcbiAgaGFzSW52YWxpZFRpbWVEYXRhLFxuICB1c2VzTG9jYWxXZWVrVmFsdWVzLFxuICBpc29XZWVrZGF5VG9Mb2NhbCxcbn0gZnJvbSBcIi4vaW1wbC9jb252ZXJzaW9ucy5qc1wiO1xuaW1wb3J0ICogYXMgRm9ybWF0cyBmcm9tIFwiLi9pbXBsL2Zvcm1hdHMuanNcIjtcbmltcG9ydCB7XG4gIEludmFsaWRBcmd1bWVudEVycm9yLFxuICBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvcixcbiAgSW52YWxpZFVuaXRFcnJvcixcbiAgSW52YWxpZERhdGVUaW1lRXJyb3IsXG59IGZyb20gXCIuL2Vycm9ycy5qc1wiO1xuaW1wb3J0IEludmFsaWQgZnJvbSBcIi4vaW1wbC9pbnZhbGlkLmpzXCI7XG5cbmNvbnN0IElOVkFMSUQgPSBcIkludmFsaWQgRGF0ZVRpbWVcIjtcbmNvbnN0IE1BWF9EQVRFID0gOC42NGUxNTtcblxuZnVuY3Rpb24gdW5zdXBwb3J0ZWRab25lKHpvbmUpIHtcbiAgcmV0dXJuIG5ldyBJbnZhbGlkKFwidW5zdXBwb3J0ZWQgem9uZVwiLCBgdGhlIHpvbmUgXCIke3pvbmUubmFtZX1cIiBpcyBub3Qgc3VwcG9ydGVkYCk7XG59XG5cbi8vIHdlIGNhY2hlIHdlZWsgZGF0YSBvbiB0aGUgRFQgb2JqZWN0IGFuZCB0aGlzIGludGVybWVkaWF0ZXMgdGhlIGNhY2hlXG4vKipcbiAqIEBwYXJhbSB7RGF0ZVRpbWV9IGR0XG4gKi9cbmZ1bmN0aW9uIHBvc3NpYmx5Q2FjaGVkV2Vla0RhdGEoZHQpIHtcbiAgaWYgKGR0LndlZWtEYXRhID09PSBudWxsKSB7XG4gICAgZHQud2Vla0RhdGEgPSBncmVnb3JpYW5Ub1dlZWsoZHQuYyk7XG4gIH1cbiAgcmV0dXJuIGR0LndlZWtEYXRhO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RGF0ZVRpbWV9IGR0XG4gKi9cbmZ1bmN0aW9uIHBvc3NpYmx5Q2FjaGVkTG9jYWxXZWVrRGF0YShkdCkge1xuICBpZiAoZHQubG9jYWxXZWVrRGF0YSA9PT0gbnVsbCkge1xuICAgIGR0LmxvY2FsV2Vla0RhdGEgPSBncmVnb3JpYW5Ub1dlZWsoXG4gICAgICBkdC5jLFxuICAgICAgZHQubG9jLmdldE1pbkRheXNJbkZpcnN0V2VlaygpLFxuICAgICAgZHQubG9jLmdldFN0YXJ0T2ZXZWVrKClcbiAgICApO1xuICB9XG4gIHJldHVybiBkdC5sb2NhbFdlZWtEYXRhO1xufVxuXG4vLyBjbG9uZSByZWFsbHkgbWVhbnMsIFwibWFrZSBhIG5ldyBvYmplY3Qgd2l0aCB0aGVzZSBtb2RpZmljYXRpb25zXCIuIGFsbCBcInNldHRlcnNcIiByZWFsbHkgdXNlIHRoaXNcbi8vIHRvIGNyZWF0ZSBhIG5ldyBvYmplY3Qgd2hpbGUgb25seSBjaGFuZ2luZyBzb21lIG9mIHRoZSBwcm9wZXJ0aWVzXG5mdW5jdGlvbiBjbG9uZShpbnN0LCBhbHRzKSB7XG4gIGNvbnN0IGN1cnJlbnQgPSB7XG4gICAgdHM6IGluc3QudHMsXG4gICAgem9uZTogaW5zdC56b25lLFxuICAgIGM6IGluc3QuYyxcbiAgICBvOiBpbnN0Lm8sXG4gICAgbG9jOiBpbnN0LmxvYyxcbiAgICBpbnZhbGlkOiBpbnN0LmludmFsaWQsXG4gIH07XG4gIHJldHVybiBuZXcgRGF0ZVRpbWUoeyAuLi5jdXJyZW50LCAuLi5hbHRzLCBvbGQ6IGN1cnJlbnQgfSk7XG59XG5cbi8vIGZpbmQgdGhlIHJpZ2h0IG9mZnNldCBhIGdpdmVuIGxvY2FsIHRpbWUuIFRoZSBvIGlucHV0IGlzIG91ciBndWVzcywgd2hpY2ggZGV0ZXJtaW5lcyB3aGljaFxuLy8gb2Zmc2V0IHdlJ2xsIHBpY2sgaW4gYW1iaWd1b3VzIGNhc2VzIChlLmcuIHRoZXJlIGFyZSB0d28gMyBBTXMgYi9jIEZhbGxiYWNrIERTVClcbmZ1bmN0aW9uIGZpeE9mZnNldChsb2NhbFRTLCBvLCB0eikge1xuICAvLyBPdXIgVVRDIHRpbWUgaXMganVzdCBhIGd1ZXNzIGJlY2F1c2Ugb3VyIG9mZnNldCBpcyBqdXN0IGEgZ3Vlc3NcbiAgbGV0IHV0Y0d1ZXNzID0gbG9jYWxUUyAtIG8gKiA2MCAqIDEwMDA7XG5cbiAgLy8gVGVzdCB3aGV0aGVyIHRoZSB6b25lIG1hdGNoZXMgdGhlIG9mZnNldCBmb3IgdGhpcyB0c1xuICBjb25zdCBvMiA9IHR6Lm9mZnNldCh1dGNHdWVzcyk7XG5cbiAgLy8gSWYgc28sIG9mZnNldCBkaWRuJ3QgY2hhbmdlIGFuZCB3ZSdyZSBkb25lXG4gIGlmIChvID09PSBvMikge1xuICAgIHJldHVybiBbdXRjR3Vlc3MsIG9dO1xuICB9XG5cbiAgLy8gSWYgbm90LCBjaGFuZ2UgdGhlIHRzIGJ5IHRoZSBkaWZmZXJlbmNlIGluIHRoZSBvZmZzZXRcbiAgdXRjR3Vlc3MgLT0gKG8yIC0gbykgKiA2MCAqIDEwMDA7XG5cbiAgLy8gSWYgdGhhdCBnaXZlcyB1cyB0aGUgbG9jYWwgdGltZSB3ZSB3YW50LCB3ZSdyZSBkb25lXG4gIGNvbnN0IG8zID0gdHoub2Zmc2V0KHV0Y0d1ZXNzKTtcbiAgaWYgKG8yID09PSBvMykge1xuICAgIHJldHVybiBbdXRjR3Vlc3MsIG8yXTtcbiAgfVxuXG4gIC8vIElmIGl0J3MgZGlmZmVyZW50LCB3ZSdyZSBpbiBhIGhvbGUgdGltZS4gVGhlIG9mZnNldCBoYXMgY2hhbmdlZCwgYnV0IHRoZSB3ZSBkb24ndCBhZGp1c3QgdGhlIHRpbWVcbiAgcmV0dXJuIFtsb2NhbFRTIC0gTWF0aC5taW4obzIsIG8zKSAqIDYwICogMTAwMCwgTWF0aC5tYXgobzIsIG8zKV07XG59XG5cbi8vIGNvbnZlcnQgYW4gZXBvY2ggdGltZXN0YW1wIGludG8gYSBjYWxlbmRhciBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gb2Zmc2V0XG5mdW5jdGlvbiB0c1RvT2JqKHRzLCBvZmZzZXQpIHtcbiAgdHMgKz0gb2Zmc2V0ICogNjAgKiAxMDAwO1xuXG4gIGNvbnN0IGQgPSBuZXcgRGF0ZSh0cyk7XG5cbiAgcmV0dXJuIHtcbiAgICB5ZWFyOiBkLmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgbW9udGg6IGQuZ2V0VVRDTW9udGgoKSArIDEsXG4gICAgZGF5OiBkLmdldFVUQ0RhdGUoKSxcbiAgICBob3VyOiBkLmdldFVUQ0hvdXJzKCksXG4gICAgbWludXRlOiBkLmdldFVUQ01pbnV0ZXMoKSxcbiAgICBzZWNvbmQ6IGQuZ2V0VVRDU2Vjb25kcygpLFxuICAgIG1pbGxpc2Vjb25kOiBkLmdldFVUQ01pbGxpc2Vjb25kcygpLFxuICB9O1xufVxuXG4vLyBjb252ZXJ0IGEgY2FsZW5kYXIgb2JqZWN0IHRvIGEgZXBvY2ggdGltZXN0YW1wXG5mdW5jdGlvbiBvYmpUb1RTKG9iaiwgb2Zmc2V0LCB6b25lKSB7XG4gIHJldHVybiBmaXhPZmZzZXQob2JqVG9Mb2NhbFRTKG9iaiksIG9mZnNldCwgem9uZSk7XG59XG5cbi8vIGNyZWF0ZSBhIG5ldyBEVCBpbnN0YW5jZSBieSBhZGRpbmcgYSBkdXJhdGlvbiwgYWRqdXN0aW5nIGZvciBEU1RzXG5mdW5jdGlvbiBhZGp1c3RUaW1lKGluc3QsIGR1cikge1xuICBjb25zdCBvUHJlID0gaW5zdC5vLFxuICAgIHllYXIgPSBpbnN0LmMueWVhciArIE1hdGgudHJ1bmMoZHVyLnllYXJzKSxcbiAgICBtb250aCA9IGluc3QuYy5tb250aCArIE1hdGgudHJ1bmMoZHVyLm1vbnRocykgKyBNYXRoLnRydW5jKGR1ci5xdWFydGVycykgKiAzLFxuICAgIGMgPSB7XG4gICAgICAuLi5pbnN0LmMsXG4gICAgICB5ZWFyLFxuICAgICAgbW9udGgsXG4gICAgICBkYXk6XG4gICAgICAgIE1hdGgubWluKGluc3QuYy5kYXksIGRheXNJbk1vbnRoKHllYXIsIG1vbnRoKSkgK1xuICAgICAgICBNYXRoLnRydW5jKGR1ci5kYXlzKSArXG4gICAgICAgIE1hdGgudHJ1bmMoZHVyLndlZWtzKSAqIDcsXG4gICAgfSxcbiAgICBtaWxsaXNUb0FkZCA9IER1cmF0aW9uLmZyb21PYmplY3Qoe1xuICAgICAgeWVhcnM6IGR1ci55ZWFycyAtIE1hdGgudHJ1bmMoZHVyLnllYXJzKSxcbiAgICAgIHF1YXJ0ZXJzOiBkdXIucXVhcnRlcnMgLSBNYXRoLnRydW5jKGR1ci5xdWFydGVycyksXG4gICAgICBtb250aHM6IGR1ci5tb250aHMgLSBNYXRoLnRydW5jKGR1ci5tb250aHMpLFxuICAgICAgd2Vla3M6IGR1ci53ZWVrcyAtIE1hdGgudHJ1bmMoZHVyLndlZWtzKSxcbiAgICAgIGRheXM6IGR1ci5kYXlzIC0gTWF0aC50cnVuYyhkdXIuZGF5cyksXG4gICAgICBob3VyczogZHVyLmhvdXJzLFxuICAgICAgbWludXRlczogZHVyLm1pbnV0ZXMsXG4gICAgICBzZWNvbmRzOiBkdXIuc2Vjb25kcyxcbiAgICAgIG1pbGxpc2Vjb25kczogZHVyLm1pbGxpc2Vjb25kcyxcbiAgICB9KS5hcyhcIm1pbGxpc2Vjb25kc1wiKSxcbiAgICBsb2NhbFRTID0gb2JqVG9Mb2NhbFRTKGMpO1xuXG4gIGxldCBbdHMsIG9dID0gZml4T2Zmc2V0KGxvY2FsVFMsIG9QcmUsIGluc3Quem9uZSk7XG5cbiAgaWYgKG1pbGxpc1RvQWRkICE9PSAwKSB7XG4gICAgdHMgKz0gbWlsbGlzVG9BZGQ7XG4gICAgLy8gdGhhdCBjb3VsZCBoYXZlIGNoYW5nZWQgdGhlIG9mZnNldCBieSBnb2luZyBvdmVyIGEgRFNULCBidXQgd2Ugd2FudCB0byBrZWVwIHRoZSB0cyB0aGUgc2FtZVxuICAgIG8gPSBpbnN0LnpvbmUub2Zmc2V0KHRzKTtcbiAgfVxuXG4gIHJldHVybiB7IHRzLCBvIH07XG59XG5cbi8vIGhlbHBlciB1c2VmdWwgaW4gdHVybmluZyB0aGUgcmVzdWx0cyBvZiBwYXJzaW5nIGludG8gcmVhbCBkYXRlc1xuLy8gYnkgaGFuZGxpbmcgdGhlIHpvbmUgb3B0aW9uc1xuZnVuY3Rpb24gcGFyc2VEYXRhVG9EYXRlVGltZShwYXJzZWQsIHBhcnNlZFpvbmUsIG9wdHMsIGZvcm1hdCwgdGV4dCwgc3BlY2lmaWNPZmZzZXQpIHtcbiAgY29uc3QgeyBzZXRab25lLCB6b25lIH0gPSBvcHRzO1xuICBpZiAoKHBhcnNlZCAmJiBPYmplY3Qua2V5cyhwYXJzZWQpLmxlbmd0aCAhPT0gMCkgfHwgcGFyc2VkWm9uZSkge1xuICAgIGNvbnN0IGludGVycHJldGF0aW9uWm9uZSA9IHBhcnNlZFpvbmUgfHwgem9uZSxcbiAgICAgIGluc3QgPSBEYXRlVGltZS5mcm9tT2JqZWN0KHBhcnNlZCwge1xuICAgICAgICAuLi5vcHRzLFxuICAgICAgICB6b25lOiBpbnRlcnByZXRhdGlvblpvbmUsXG4gICAgICAgIHNwZWNpZmljT2Zmc2V0LFxuICAgICAgfSk7XG4gICAgcmV0dXJuIHNldFpvbmUgPyBpbnN0IDogaW5zdC5zZXRab25lKHpvbmUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKFxuICAgICAgbmV3IEludmFsaWQoXCJ1bnBhcnNhYmxlXCIsIGB0aGUgaW5wdXQgXCIke3RleHR9XCIgY2FuJ3QgYmUgcGFyc2VkIGFzICR7Zm9ybWF0fWApXG4gICAgKTtcbiAgfVxufVxuXG4vLyBpZiB5b3Ugd2FudCB0byBvdXRwdXQgYSB0ZWNobmljYWwgZm9ybWF0IChlLmcuIFJGQyAyODIyKSwgdGhpcyBoZWxwZXJcbi8vIGhlbHBzIGhhbmRsZSB0aGUgZGV0YWlsc1xuZnVuY3Rpb24gdG9UZWNoRm9ybWF0KGR0LCBmb3JtYXQsIGFsbG93WiA9IHRydWUpIHtcbiAgcmV0dXJuIGR0LmlzVmFsaWRcbiAgICA/IEZvcm1hdHRlci5jcmVhdGUoTG9jYWxlLmNyZWF0ZShcImVuLVVTXCIpLCB7XG4gICAgICAgIGFsbG93WixcbiAgICAgICAgZm9yY2VTaW1wbGU6IHRydWUsXG4gICAgICB9KS5mb3JtYXREYXRlVGltZUZyb21TdHJpbmcoZHQsIGZvcm1hdClcbiAgICA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIHRvSVNPRGF0ZShvLCBleHRlbmRlZCkge1xuICBjb25zdCBsb25nRm9ybWF0ID0gby5jLnllYXIgPiA5OTk5IHx8IG8uYy55ZWFyIDwgMDtcbiAgbGV0IGMgPSBcIlwiO1xuICBpZiAobG9uZ0Zvcm1hdCAmJiBvLmMueWVhciA+PSAwKSBjICs9IFwiK1wiO1xuICBjICs9IHBhZFN0YXJ0KG8uYy55ZWFyLCBsb25nRm9ybWF0ID8gNiA6IDQpO1xuXG4gIGlmIChleHRlbmRlZCkge1xuICAgIGMgKz0gXCItXCI7XG4gICAgYyArPSBwYWRTdGFydChvLmMubW9udGgpO1xuICAgIGMgKz0gXCItXCI7XG4gICAgYyArPSBwYWRTdGFydChvLmMuZGF5KTtcbiAgfSBlbHNlIHtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5tb250aCk7XG4gICAgYyArPSBwYWRTdGFydChvLmMuZGF5KTtcbiAgfVxuICByZXR1cm4gYztcbn1cblxuZnVuY3Rpb24gdG9JU09UaW1lKFxuICBvLFxuICBleHRlbmRlZCxcbiAgc3VwcHJlc3NTZWNvbmRzLFxuICBzdXBwcmVzc01pbGxpc2Vjb25kcyxcbiAgaW5jbHVkZU9mZnNldCxcbiAgZXh0ZW5kZWRab25lXG4pIHtcbiAgbGV0IGMgPSBwYWRTdGFydChvLmMuaG91cik7XG4gIGlmIChleHRlbmRlZCkge1xuICAgIGMgKz0gXCI6XCI7XG4gICAgYyArPSBwYWRTdGFydChvLmMubWludXRlKTtcbiAgICBpZiAoby5jLm1pbGxpc2Vjb25kICE9PSAwIHx8IG8uYy5zZWNvbmQgIT09IDAgfHwgIXN1cHByZXNzU2Vjb25kcykge1xuICAgICAgYyArPSBcIjpcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYyArPSBwYWRTdGFydChvLmMubWludXRlKTtcbiAgfVxuXG4gIGlmIChvLmMubWlsbGlzZWNvbmQgIT09IDAgfHwgby5jLnNlY29uZCAhPT0gMCB8fCAhc3VwcHJlc3NTZWNvbmRzKSB7XG4gICAgYyArPSBwYWRTdGFydChvLmMuc2Vjb25kKTtcblxuICAgIGlmIChvLmMubWlsbGlzZWNvbmQgIT09IDAgfHwgIXN1cHByZXNzTWlsbGlzZWNvbmRzKSB7XG4gICAgICBjICs9IFwiLlwiO1xuICAgICAgYyArPSBwYWRTdGFydChvLmMubWlsbGlzZWNvbmQsIDMpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpbmNsdWRlT2Zmc2V0KSB7XG4gICAgaWYgKG8uaXNPZmZzZXRGaXhlZCAmJiBvLm9mZnNldCA9PT0gMCAmJiAhZXh0ZW5kZWRab25lKSB7XG4gICAgICBjICs9IFwiWlwiO1xuICAgIH0gZWxzZSBpZiAoby5vIDwgMCkge1xuICAgICAgYyArPSBcIi1cIjtcbiAgICAgIGMgKz0gcGFkU3RhcnQoTWF0aC50cnVuYygtby5vIC8gNjApKTtcbiAgICAgIGMgKz0gXCI6XCI7XG4gICAgICBjICs9IHBhZFN0YXJ0KE1hdGgudHJ1bmMoLW8ubyAlIDYwKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGMgKz0gXCIrXCI7XG4gICAgICBjICs9IHBhZFN0YXJ0KE1hdGgudHJ1bmMoby5vIC8gNjApKTtcbiAgICAgIGMgKz0gXCI6XCI7XG4gICAgICBjICs9IHBhZFN0YXJ0KE1hdGgudHJ1bmMoby5vICUgNjApKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZXh0ZW5kZWRab25lKSB7XG4gICAgYyArPSBcIltcIiArIG8uem9uZS5pYW5hTmFtZSArIFwiXVwiO1xuICB9XG4gIHJldHVybiBjO1xufVxuXG4vLyBkZWZhdWx0cyBmb3IgdW5zcGVjaWZpZWQgdW5pdHMgaW4gdGhlIHN1cHBvcnRlZCBjYWxlbmRhcnNcbmNvbnN0IGRlZmF1bHRVbml0VmFsdWVzID0ge1xuICAgIG1vbnRoOiAxLFxuICAgIGRheTogMSxcbiAgICBob3VyOiAwLFxuICAgIG1pbnV0ZTogMCxcbiAgICBzZWNvbmQ6IDAsXG4gICAgbWlsbGlzZWNvbmQ6IDAsXG4gIH0sXG4gIGRlZmF1bHRXZWVrVW5pdFZhbHVlcyA9IHtcbiAgICB3ZWVrTnVtYmVyOiAxLFxuICAgIHdlZWtkYXk6IDEsXG4gICAgaG91cjogMCxcbiAgICBtaW51dGU6IDAsXG4gICAgc2Vjb25kOiAwLFxuICAgIG1pbGxpc2Vjb25kOiAwLFxuICB9LFxuICBkZWZhdWx0T3JkaW5hbFVuaXRWYWx1ZXMgPSB7XG4gICAgb3JkaW5hbDogMSxcbiAgICBob3VyOiAwLFxuICAgIG1pbnV0ZTogMCxcbiAgICBzZWNvbmQ6IDAsXG4gICAgbWlsbGlzZWNvbmQ6IDAsXG4gIH07XG5cbi8vIFVuaXRzIGluIHRoZSBzdXBwb3J0ZWQgY2FsZW5kYXJzLCBzb3J0ZWQgYnkgYmlnbmVzc1xuY29uc3Qgb3JkZXJlZFVuaXRzID0gW1wieWVhclwiLCBcIm1vbnRoXCIsIFwiZGF5XCIsIFwiaG91clwiLCBcIm1pbnV0ZVwiLCBcInNlY29uZFwiLCBcIm1pbGxpc2Vjb25kXCJdLFxuICBvcmRlcmVkV2Vla1VuaXRzID0gW1xuICAgIFwid2Vla1llYXJcIixcbiAgICBcIndlZWtOdW1iZXJcIixcbiAgICBcIndlZWtkYXlcIixcbiAgICBcImhvdXJcIixcbiAgICBcIm1pbnV0ZVwiLFxuICAgIFwic2Vjb25kXCIsXG4gICAgXCJtaWxsaXNlY29uZFwiLFxuICBdLFxuICBvcmRlcmVkT3JkaW5hbFVuaXRzID0gW1wieWVhclwiLCBcIm9yZGluYWxcIiwgXCJob3VyXCIsIFwibWludXRlXCIsIFwic2Vjb25kXCIsIFwibWlsbGlzZWNvbmRcIl07XG5cbi8vIHN0YW5kYXJkaXplIGNhc2UgYW5kIHBsdXJhbGl0eSBpbiB1bml0c1xuZnVuY3Rpb24gbm9ybWFsaXplVW5pdCh1bml0KSB7XG4gIGNvbnN0IG5vcm1hbGl6ZWQgPSB7XG4gICAgeWVhcjogXCJ5ZWFyXCIsXG4gICAgeWVhcnM6IFwieWVhclwiLFxuICAgIG1vbnRoOiBcIm1vbnRoXCIsXG4gICAgbW9udGhzOiBcIm1vbnRoXCIsXG4gICAgZGF5OiBcImRheVwiLFxuICAgIGRheXM6IFwiZGF5XCIsXG4gICAgaG91cjogXCJob3VyXCIsXG4gICAgaG91cnM6IFwiaG91clwiLFxuICAgIG1pbnV0ZTogXCJtaW51dGVcIixcbiAgICBtaW51dGVzOiBcIm1pbnV0ZVwiLFxuICAgIHF1YXJ0ZXI6IFwicXVhcnRlclwiLFxuICAgIHF1YXJ0ZXJzOiBcInF1YXJ0ZXJcIixcbiAgICBzZWNvbmQ6IFwic2Vjb25kXCIsXG4gICAgc2Vjb25kczogXCJzZWNvbmRcIixcbiAgICBtaWxsaXNlY29uZDogXCJtaWxsaXNlY29uZFwiLFxuICAgIG1pbGxpc2Vjb25kczogXCJtaWxsaXNlY29uZFwiLFxuICAgIHdlZWtkYXk6IFwid2Vla2RheVwiLFxuICAgIHdlZWtkYXlzOiBcIndlZWtkYXlcIixcbiAgICB3ZWVrbnVtYmVyOiBcIndlZWtOdW1iZXJcIixcbiAgICB3ZWVrc251bWJlcjogXCJ3ZWVrTnVtYmVyXCIsXG4gICAgd2Vla251bWJlcnM6IFwid2Vla051bWJlclwiLFxuICAgIHdlZWt5ZWFyOiBcIndlZWtZZWFyXCIsXG4gICAgd2Vla3llYXJzOiBcIndlZWtZZWFyXCIsXG4gICAgb3JkaW5hbDogXCJvcmRpbmFsXCIsXG4gIH1bdW5pdC50b0xvd2VyQ2FzZSgpXTtcblxuICBpZiAoIW5vcm1hbGl6ZWQpIHRocm93IG5ldyBJbnZhbGlkVW5pdEVycm9yKHVuaXQpO1xuXG4gIHJldHVybiBub3JtYWxpemVkO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVVbml0V2l0aExvY2FsV2Vla3ModW5pdCkge1xuICBzd2l0Y2ggKHVuaXQudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgXCJsb2NhbHdlZWtkYXlcIjpcbiAgICBjYXNlIFwibG9jYWx3ZWVrZGF5c1wiOlxuICAgICAgcmV0dXJuIFwibG9jYWxXZWVrZGF5XCI7XG4gICAgY2FzZSBcImxvY2Fsd2Vla251bWJlclwiOlxuICAgIGNhc2UgXCJsb2NhbHdlZWtudW1iZXJzXCI6XG4gICAgICByZXR1cm4gXCJsb2NhbFdlZWtOdW1iZXJcIjtcbiAgICBjYXNlIFwibG9jYWx3ZWVreWVhclwiOlxuICAgIGNhc2UgXCJsb2NhbHdlZWt5ZWFyc1wiOlxuICAgICAgcmV0dXJuIFwibG9jYWxXZWVrWWVhclwiO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbm9ybWFsaXplVW5pdCh1bml0KTtcbiAgfVxufVxuXG4vLyB0aGlzIGlzIGEgZHVtYmVkIGRvd24gdmVyc2lvbiBvZiBmcm9tT2JqZWN0KCkgdGhhdCBydW5zIGFib3V0IDYwJSBmYXN0ZXJcbi8vIGJ1dCBkb2Vzbid0IGRvIGFueSB2YWxpZGF0aW9uLCBtYWtlcyBhIGJ1bmNoIG9mIGFzc3VtcHRpb25zIGFib3V0IHdoYXQgdW5pdHNcbi8vIGFyZSBwcmVzZW50LCBhbmQgc28gb24uXG5mdW5jdGlvbiBxdWlja0RUKG9iaiwgb3B0cykge1xuICBjb25zdCB6b25lID0gbm9ybWFsaXplWm9uZShvcHRzLnpvbmUsIFNldHRpbmdzLmRlZmF1bHRab25lKSxcbiAgICBsb2MgPSBMb2NhbGUuZnJvbU9iamVjdChvcHRzKSxcbiAgICB0c05vdyA9IFNldHRpbmdzLm5vdygpO1xuXG4gIGxldCB0cywgbztcblxuICAvLyBhc3N1bWUgd2UgaGF2ZSB0aGUgaGlnaGVyLW9yZGVyIHVuaXRzXG4gIGlmICghaXNVbmRlZmluZWQob2JqLnllYXIpKSB7XG4gICAgZm9yIChjb25zdCB1IG9mIG9yZGVyZWRVbml0cykge1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKG9ialt1XSkpIHtcbiAgICAgICAgb2JqW3VdID0gZGVmYXVsdFVuaXRWYWx1ZXNbdV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgaW52YWxpZCA9IGhhc0ludmFsaWRHcmVnb3JpYW5EYXRhKG9iaikgfHwgaGFzSW52YWxpZFRpbWVEYXRhKG9iaik7XG4gICAgaWYgKGludmFsaWQpIHtcbiAgICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKGludmFsaWQpO1xuICAgIH1cblxuICAgIGNvbnN0IG9mZnNldFByb3ZpcyA9IHpvbmUub2Zmc2V0KHRzTm93KTtcbiAgICBbdHMsIG9dID0gb2JqVG9UUyhvYmosIG9mZnNldFByb3Zpcywgem9uZSk7XG4gIH0gZWxzZSB7XG4gICAgdHMgPSB0c05vdztcbiAgfVxuXG4gIHJldHVybiBuZXcgRGF0ZVRpbWUoeyB0cywgem9uZSwgbG9jLCBvIH0pO1xufVxuXG5mdW5jdGlvbiBkaWZmUmVsYXRpdmUoc3RhcnQsIGVuZCwgb3B0cykge1xuICBjb25zdCByb3VuZCA9IGlzVW5kZWZpbmVkKG9wdHMucm91bmQpID8gdHJ1ZSA6IG9wdHMucm91bmQsXG4gICAgZm9ybWF0ID0gKGMsIHVuaXQpID0+IHtcbiAgICAgIGMgPSByb3VuZFRvKGMsIHJvdW5kIHx8IG9wdHMuY2FsZW5kYXJ5ID8gMCA6IDIsIHRydWUpO1xuICAgICAgY29uc3QgZm9ybWF0dGVyID0gZW5kLmxvYy5jbG9uZShvcHRzKS5yZWxGb3JtYXR0ZXIob3B0cyk7XG4gICAgICByZXR1cm4gZm9ybWF0dGVyLmZvcm1hdChjLCB1bml0KTtcbiAgICB9LFxuICAgIGRpZmZlciA9ICh1bml0KSA9PiB7XG4gICAgICBpZiAob3B0cy5jYWxlbmRhcnkpIHtcbiAgICAgICAgaWYgKCFlbmQuaGFzU2FtZShzdGFydCwgdW5pdCkpIHtcbiAgICAgICAgICByZXR1cm4gZW5kLnN0YXJ0T2YodW5pdCkuZGlmZihzdGFydC5zdGFydE9mKHVuaXQpLCB1bml0KS5nZXQodW5pdCk7XG4gICAgICAgIH0gZWxzZSByZXR1cm4gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBlbmQuZGlmZihzdGFydCwgdW5pdCkuZ2V0KHVuaXQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgaWYgKG9wdHMudW5pdCkge1xuICAgIHJldHVybiBmb3JtYXQoZGlmZmVyKG9wdHMudW5pdCksIG9wdHMudW5pdCk7XG4gIH1cblxuICBmb3IgKGNvbnN0IHVuaXQgb2Ygb3B0cy51bml0cykge1xuICAgIGNvbnN0IGNvdW50ID0gZGlmZmVyKHVuaXQpO1xuICAgIGlmIChNYXRoLmFicyhjb3VudCkgPj0gMSkge1xuICAgICAgcmV0dXJuIGZvcm1hdChjb3VudCwgdW5pdCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JtYXQoc3RhcnQgPiBlbmQgPyAtMCA6IDAsIG9wdHMudW5pdHNbb3B0cy51bml0cy5sZW5ndGggLSAxXSk7XG59XG5cbmZ1bmN0aW9uIGxhc3RPcHRzKGFyZ0xpc3QpIHtcbiAgbGV0IG9wdHMgPSB7fSxcbiAgICBhcmdzO1xuICBpZiAoYXJnTGlzdC5sZW5ndGggPiAwICYmIHR5cGVvZiBhcmdMaXN0W2FyZ0xpc3QubGVuZ3RoIC0gMV0gPT09IFwib2JqZWN0XCIpIHtcbiAgICBvcHRzID0gYXJnTGlzdFthcmdMaXN0Lmxlbmd0aCAtIDFdO1xuICAgIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ0xpc3QpLnNsaWNlKDAsIGFyZ0xpc3QubGVuZ3RoIC0gMSk7XG4gIH0gZWxzZSB7XG4gICAgYXJncyA9IEFycmF5LmZyb20oYXJnTGlzdCk7XG4gIH1cbiAgcmV0dXJuIFtvcHRzLCBhcmdzXTtcbn1cblxuLyoqXG4gKiBBIERhdGVUaW1lIGlzIGFuIGltbXV0YWJsZSBkYXRhIHN0cnVjdHVyZSByZXByZXNlbnRpbmcgYSBzcGVjaWZpYyBkYXRlIGFuZCB0aW1lIGFuZCBhY2NvbXBhbnlpbmcgbWV0aG9kcy4gSXQgY29udGFpbnMgY2xhc3MgYW5kIGluc3RhbmNlIG1ldGhvZHMgZm9yIGNyZWF0aW5nLCBwYXJzaW5nLCBpbnRlcnJvZ2F0aW5nLCB0cmFuc2Zvcm1pbmcsIGFuZCBmb3JtYXR0aW5nIHRoZW0uXG4gKlxuICogQSBEYXRlVGltZSBjb21wcmlzZXMgb2Y6XG4gKiAqIEEgdGltZXN0YW1wLiBFYWNoIERhdGVUaW1lIGluc3RhbmNlIHJlZmVycyB0byBhIHNwZWNpZmljIG1pbGxpc2Vjb25kIG9mIHRoZSBVbml4IGVwb2NoLlxuICogKiBBIHRpbWUgem9uZS4gRWFjaCBpbnN0YW5jZSBpcyBjb25zaWRlcmVkIGluIHRoZSBjb250ZXh0IG9mIGEgc3BlY2lmaWMgem9uZSAoYnkgZGVmYXVsdCB0aGUgbG9jYWwgc3lzdGVtJ3Mgem9uZSkuXG4gKiAqIENvbmZpZ3VyYXRpb24gcHJvcGVydGllcyB0aGF0IGVmZmVjdCBob3cgb3V0cHV0IHN0cmluZ3MgYXJlIGZvcm1hdHRlZCwgc3VjaCBhcyBgbG9jYWxlYCwgYG51bWJlcmluZ1N5c3RlbWAsIGFuZCBgb3V0cHV0Q2FsZW5kYXJgLlxuICpcbiAqIEhlcmUgaXMgYSBicmllZiBvdmVydmlldyBvZiB0aGUgbW9zdCBjb21tb25seSB1c2VkIGZ1bmN0aW9uYWxpdHkgaXQgcHJvdmlkZXM6XG4gKlxuICogKiAqKkNyZWF0aW9uKio6IFRvIGNyZWF0ZSBhIERhdGVUaW1lIGZyb20gaXRzIGNvbXBvbmVudHMsIHVzZSBvbmUgb2YgaXRzIGZhY3RvcnkgY2xhc3MgbWV0aG9kczoge0BsaW5rIERhdGVUaW1lLmxvY2FsfSwge0BsaW5rIERhdGVUaW1lLnV0Y30sIGFuZCAobW9zdCBmbGV4aWJseSkge0BsaW5rIERhdGVUaW1lLmZyb21PYmplY3R9LiBUbyBjcmVhdGUgb25lIGZyb20gYSBzdGFuZGFyZCBzdHJpbmcgZm9ybWF0LCB1c2Uge0BsaW5rIERhdGVUaW1lLmZyb21JU099LCB7QGxpbmsgRGF0ZVRpbWUuZnJvbUhUVFB9LCBhbmQge0BsaW5rIERhdGVUaW1lLmZyb21SRkMyODIyfS4gVG8gY3JlYXRlIG9uZSBmcm9tIGEgY3VzdG9tIHN0cmluZyBmb3JtYXQsIHVzZSB7QGxpbmsgRGF0ZVRpbWUuZnJvbUZvcm1hdH0uIFRvIGNyZWF0ZSBvbmUgZnJvbSBhIG5hdGl2ZSBKUyBkYXRlLCB1c2Uge0BsaW5rIERhdGVUaW1lLmZyb21KU0RhdGV9LlxuICogKiAqKkdyZWdvcmlhbiBjYWxlbmRhciBhbmQgdGltZSoqOiBUbyBleGFtaW5lIHRoZSBHcmVnb3JpYW4gcHJvcGVydGllcyBvZiBhIERhdGVUaW1lIGluZGl2aWR1YWxseSAoaS5lIGFzIG9wcG9zZWQgdG8gY29sbGVjdGl2ZWx5IHRocm91Z2gge0BsaW5rIERhdGVUaW1lI3RvT2JqZWN0fSksIHVzZSB0aGUge0BsaW5rIERhdGVUaW1lI3llYXJ9LCB7QGxpbmsgRGF0ZVRpbWUjbW9udGh9LFxuICoge0BsaW5rIERhdGVUaW1lI2RheX0sIHtAbGluayBEYXRlVGltZSNob3VyfSwge0BsaW5rIERhdGVUaW1lI21pbnV0ZX0sIHtAbGluayBEYXRlVGltZSNzZWNvbmR9LCB7QGxpbmsgRGF0ZVRpbWUjbWlsbGlzZWNvbmR9IGFjY2Vzc29ycy5cbiAqICogKipXZWVrIGNhbGVuZGFyKio6IEZvciBJU08gd2VlayBjYWxlbmRhciBhdHRyaWJ1dGVzLCBzZWUgdGhlIHtAbGluayBEYXRlVGltZSN3ZWVrWWVhcn0sIHtAbGluayBEYXRlVGltZSN3ZWVrTnVtYmVyfSwgYW5kIHtAbGluayBEYXRlVGltZSN3ZWVrZGF5fSBhY2Nlc3NvcnMuXG4gKiAqICoqQ29uZmlndXJhdGlvbioqIFNlZSB0aGUge0BsaW5rIERhdGVUaW1lI2xvY2FsZX0gYW5kIHtAbGluayBEYXRlVGltZSNudW1iZXJpbmdTeXN0ZW19IGFjY2Vzc29ycy5cbiAqICogKipUcmFuc2Zvcm1hdGlvbioqOiBUbyB0cmFuc2Zvcm0gdGhlIERhdGVUaW1lIGludG8gb3RoZXIgRGF0ZVRpbWVzLCB1c2Uge0BsaW5rIERhdGVUaW1lI3NldH0sIHtAbGluayBEYXRlVGltZSNyZWNvbmZpZ3VyZX0sIHtAbGluayBEYXRlVGltZSNzZXRab25lfSwge0BsaW5rIERhdGVUaW1lI3NldExvY2FsZX0sIHtAbGluayBEYXRlVGltZS5wbHVzfSwge0BsaW5rIERhdGVUaW1lI21pbnVzfSwge0BsaW5rIERhdGVUaW1lI2VuZE9mfSwge0BsaW5rIERhdGVUaW1lI3N0YXJ0T2Z9LCB7QGxpbmsgRGF0ZVRpbWUjdG9VVEN9LCBhbmQge0BsaW5rIERhdGVUaW1lI3RvTG9jYWx9LlxuICogKiAqKk91dHB1dCoqOiBUbyBjb252ZXJ0IHRoZSBEYXRlVGltZSB0byBvdGhlciByZXByZXNlbnRhdGlvbnMsIHVzZSB0aGUge0BsaW5rIERhdGVUaW1lI3RvUmVsYXRpdmV9LCB7QGxpbmsgRGF0ZVRpbWUjdG9SZWxhdGl2ZUNhbGVuZGFyfSwge0BsaW5rIERhdGVUaW1lI3RvSlNPTn0sIHtAbGluayBEYXRlVGltZSN0b0lTT30sIHtAbGluayBEYXRlVGltZSN0b0hUVFB9LCB7QGxpbmsgRGF0ZVRpbWUjdG9PYmplY3R9LCB7QGxpbmsgRGF0ZVRpbWUjdG9SRkMyODIyfSwge0BsaW5rIERhdGVUaW1lI3RvU3RyaW5nfSwge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSwge0BsaW5rIERhdGVUaW1lI3RvRm9ybWF0fSwge0BsaW5rIERhdGVUaW1lI3RvTWlsbGlzfSBhbmQge0BsaW5rIERhdGVUaW1lI3RvSlNEYXRlfS5cbiAqXG4gKiBUaGVyZSdzIHBsZW50eSBvdGhlcnMgZG9jdW1lbnRlZCBiZWxvdy4gSW4gYWRkaXRpb24sIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHN1YnRsZXIgdG9waWNzIGxpa2UgaW50ZXJuYXRpb25hbGl6YXRpb24sIHRpbWUgem9uZXMsIGFsdGVybmF0aXZlIGNhbGVuZGFycywgdmFsaWRpdHksIGFuZCBzbyBvbiwgc2VlIHRoZSBleHRlcm5hbCBkb2N1bWVudGF0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYXRlVGltZSB7XG4gIC8qKlxuICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIGNvbnN0IHpvbmUgPSBjb25maWcuem9uZSB8fCBTZXR0aW5ncy5kZWZhdWx0Wm9uZTtcblxuICAgIGxldCBpbnZhbGlkID1cbiAgICAgIGNvbmZpZy5pbnZhbGlkIHx8XG4gICAgICAoTnVtYmVyLmlzTmFOKGNvbmZpZy50cykgPyBuZXcgSW52YWxpZChcImludmFsaWQgaW5wdXRcIikgOiBudWxsKSB8fFxuICAgICAgKCF6b25lLmlzVmFsaWQgPyB1bnN1cHBvcnRlZFpvbmUoem9uZSkgOiBudWxsKTtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLnRzID0gaXNVbmRlZmluZWQoY29uZmlnLnRzKSA/IFNldHRpbmdzLm5vdygpIDogY29uZmlnLnRzO1xuXG4gICAgbGV0IGMgPSBudWxsLFxuICAgICAgbyA9IG51bGw7XG4gICAgaWYgKCFpbnZhbGlkKSB7XG4gICAgICBjb25zdCB1bmNoYW5nZWQgPSBjb25maWcub2xkICYmIGNvbmZpZy5vbGQudHMgPT09IHRoaXMudHMgJiYgY29uZmlnLm9sZC56b25lLmVxdWFscyh6b25lKTtcblxuICAgICAgaWYgKHVuY2hhbmdlZCkge1xuICAgICAgICBbYywgb10gPSBbY29uZmlnLm9sZC5jLCBjb25maWcub2xkLm9dO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgb3QgPSB6b25lLm9mZnNldCh0aGlzLnRzKTtcbiAgICAgICAgYyA9IHRzVG9PYmoodGhpcy50cywgb3QpO1xuICAgICAgICBpbnZhbGlkID0gTnVtYmVyLmlzTmFOKGMueWVhcikgPyBuZXcgSW52YWxpZChcImludmFsaWQgaW5wdXRcIikgOiBudWxsO1xuICAgICAgICBjID0gaW52YWxpZCA/IG51bGwgOiBjO1xuICAgICAgICBvID0gaW52YWxpZCA/IG51bGwgOiBvdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl96b25lID0gem9uZTtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmxvYyA9IGNvbmZpZy5sb2MgfHwgTG9jYWxlLmNyZWF0ZSgpO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuaW52YWxpZCA9IGludmFsaWQ7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy53ZWVrRGF0YSA9IG51bGw7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5sb2NhbFdlZWtEYXRhID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmMgPSBjO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMubyA9IG87XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5pc0x1eG9uRGF0ZVRpbWUgPSB0cnVlO1xuICB9XG5cbiAgLy8gQ09OU1RSVUNUXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZvciB0aGUgY3VycmVudCBpbnN0YW50LCBpbiB0aGUgc3lzdGVtJ3MgdGltZSB6b25lLlxuICAgKlxuICAgKiBVc2UgU2V0dGluZ3MgdG8gb3ZlcnJpZGUgdGhlc2UgZGVmYXVsdCB2YWx1ZXMgaWYgbmVlZGVkLlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0lTTygpIC8vfj4gbm93IGluIHRoZSBJU08gZm9ybWF0XG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIG5vdygpIHtcbiAgICByZXR1cm4gbmV3IERhdGVUaW1lKHt9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBsb2NhbCBEYXRlVGltZVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3llYXJdIC0gVGhlIGNhbGVuZGFyIHllYXIuIElmIG9taXR0ZWQgKGFzIGluLCBjYWxsIGBsb2NhbCgpYCB3aXRoIG5vIGFyZ3VtZW50cyksIHRoZSBjdXJyZW50IHRpbWUgd2lsbCBiZSB1c2VkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbW9udGg9MV0gLSBUaGUgbW9udGgsIDEtaW5kZXhlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2RheT0xXSAtIFRoZSBkYXkgb2YgdGhlIG1vbnRoLCAxLWluZGV4ZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtob3VyPTBdIC0gVGhlIGhvdXIgb2YgdGhlIGRheSwgaW4gMjQtaG91ciB0aW1lXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbWludXRlPTBdIC0gVGhlIG1pbnV0ZSBvZiB0aGUgaG91ciwgbWVhbmluZyBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDU5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbc2Vjb25kPTBdIC0gVGhlIHNlY29uZCBvZiB0aGUgbWludXRlLCBtZWFuaW5nIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgNTlcbiAgICogQHBhcmFtIHtudW1iZXJ9IFttaWxsaXNlY29uZD0wXSAtIFRoZSBtaWxsaXNlY29uZCBvZiB0aGUgc2Vjb25kLCBtZWFuaW5nIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgOTk5XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiBub3dcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoeyB6b25lOiBcIkFtZXJpY2EvTmV3X1lvcmtcIiB9KSAgICAgIC8vfj4gbm93LCBpbiBVUyBlYXN0IGNvYXN0IHRpbWVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDEtMDFUMDA6MDA6MDBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMykgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMDFUMDA6MDA6MDBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMywgMTIsIHsgbG9jYWxlOiBcImZyXCIgfSkgICAgIC8vfj4gMjAxNy0wMy0xMlQwMDowMDowMCwgd2l0aCBhIEZyZW5jaCBsb2NhbGVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMywgMTIsIDUpICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMTJUMDU6MDA6MDBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMywgMTIsIDUsIHsgem9uZTogXCJ1dGNcIiB9KSAgIC8vfj4gMjAxNy0wMy0xMlQwNTowMDowMCwgaW4gVVRDXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMsIDEyLCA1LCA0NSkgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjAwXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMsIDEyLCA1LCA0NSwgMTApICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjEwXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMsIDEyLCA1LCA0NSwgMTAsIDc2NSkgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjEwLjc2NVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHN0YXRpYyBsb2NhbCgpIHtcbiAgICBjb25zdCBbb3B0cywgYXJnc10gPSBsYXN0T3B0cyhhcmd1bWVudHMpLFxuICAgICAgW3llYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZF0gPSBhcmdzO1xuICAgIHJldHVybiBxdWlja0RUKHsgeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kIH0sIG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGluIFVUQ1xuICAgKiBAcGFyYW0ge251bWJlcn0gW3llYXJdIC0gVGhlIGNhbGVuZGFyIHllYXIuIElmIG9taXR0ZWQgKGFzIGluLCBjYWxsIGB1dGMoKWAgd2l0aCBubyBhcmd1bWVudHMpLCB0aGUgY3VycmVudCB0aW1lIHdpbGwgYmUgdXNlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW21vbnRoPTFdIC0gVGhlIG1vbnRoLCAxLWluZGV4ZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtkYXk9MV0gLSBUaGUgZGF5IG9mIHRoZSBtb250aFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2hvdXI9MF0gLSBUaGUgaG91ciBvZiB0aGUgZGF5LCBpbiAyNC1ob3VyIHRpbWVcbiAgICogQHBhcmFtIHtudW1iZXJ9IFttaW51dGU9MF0gLSBUaGUgbWludXRlIG9mIHRoZSBob3VyLCBtZWFuaW5nIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgNTlcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtzZWNvbmQ9MF0gLSBUaGUgc2Vjb25kIG9mIHRoZSBtaW51dGUsIG1lYW5pbmcgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA1OVxuICAgKiBAcGFyYW0ge251bWJlcn0gW21pbGxpc2Vjb25kPTBdIC0gVGhlIG1pbGxpc2Vjb25kIG9mIHRoZSBzZWNvbmQsIG1lYW5pbmcgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA5OTlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBEYXRlVGltZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubG9jYWxlXSAtIGEgbG9jYWxlIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5vdXRwdXRDYWxlbmRhcl0gLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5udW1iZXJpbmdTeXN0ZW1dIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiBub3dcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTcpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAxLTAxVDAwOjAwOjAwWlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNywgMykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMDFUMDA6MDA6MDBaXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0xMlQwMDowMDowMFpcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTcsIDMsIDEyLCA1KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjAwOjAwWlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNywgMywgMTIsIDUsIDQ1KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMTJUMDU6NDU6MDBaXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMiwgNSwgNDUsIHsgbG9jYWxlOiBcImZyXCIgfSkgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjAwWiB3aXRoIGEgRnJlbmNoIGxvY2FsZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNywgMywgMTIsIDUsIDQ1LCAxMCkgICAgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMTJUMDU6NDU6MTBaXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMiwgNSwgNDUsIDEwLCA3NjUsIHsgbG9jYWxlOiBcImZyXCIgfSkgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjEwLjc2NVogd2l0aCBhIEZyZW5jaCBsb2NhbGVcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICBzdGF0aWMgdXRjKCkge1xuICAgIGNvbnN0IFtvcHRzLCBhcmdzXSA9IGxhc3RPcHRzKGFyZ3VtZW50cyksXG4gICAgICBbeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kXSA9IGFyZ3M7XG5cbiAgICBvcHRzLnpvbmUgPSBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2U7XG4gICAgcmV0dXJuIHF1aWNrRFQoeyB5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQgfSwgb3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhIEphdmFTY3JpcHQgRGF0ZSBvYmplY3QuIFVzZXMgdGhlIGRlZmF1bHQgem9uZS5cbiAgICogQHBhcmFtIHtEYXRlfSBkYXRlIC0gYSBKYXZhU2NyaXB0IERhdGUgb2JqZWN0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdGlvbnMuem9uZT0nbG9jYWwnXSAtIHRoZSB6b25lIHRvIHBsYWNlIHRoZSBEYXRlVGltZSBpbnRvXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIGZyb21KU0RhdGUoZGF0ZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgdHMgPSBpc0RhdGUoZGF0ZSkgPyBkYXRlLnZhbHVlT2YoKSA6IE5hTjtcbiAgICBpZiAoTnVtYmVyLmlzTmFOKHRzKSkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoXCJpbnZhbGlkIGlucHV0XCIpO1xuICAgIH1cblxuICAgIGNvbnN0IHpvbmVUb1VzZSA9IG5vcm1hbGl6ZVpvbmUob3B0aW9ucy56b25lLCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSk7XG4gICAgaWYgKCF6b25lVG9Vc2UuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQodW5zdXBwb3J0ZWRab25lKHpvbmVUb1VzZSkpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe1xuICAgICAgdHM6IHRzLFxuICAgICAgem9uZTogem9uZVRvVXNlLFxuICAgICAgbG9jOiBMb2NhbGUuZnJvbU9iamVjdChvcHRpb25zKSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBzaW5jZSB0aGUgZXBvY2ggKG1lYW5pbmcgc2luY2UgMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS4gVXNlcyB0aGUgZGVmYXVsdCB6b25lLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWlsbGlzZWNvbmRzIC0gYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlIDE5NzAgVVRDXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdGlvbnMuem9uZT0nbG9jYWwnXSAtIHRoZSB6b25lIHRvIHBsYWNlIHRoZSBEYXRlVGltZSBpbnRvXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sb2NhbGVdIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIGZyb21NaWxsaXMobWlsbGlzZWNvbmRzLCBvcHRpb25zID0ge30pIHtcbiAgICBpZiAoIWlzTnVtYmVyKG1pbGxpc2Vjb25kcykpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgYGZyb21NaWxsaXMgcmVxdWlyZXMgYSBudW1lcmljYWwgaW5wdXQsIGJ1dCByZWNlaXZlZCBhICR7dHlwZW9mIG1pbGxpc2Vjb25kc30gd2l0aCB2YWx1ZSAke21pbGxpc2Vjb25kc31gXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAobWlsbGlzZWNvbmRzIDwgLU1BWF9EQVRFIHx8IG1pbGxpc2Vjb25kcyA+IE1BWF9EQVRFKSB7XG4gICAgICAvLyB0aGlzIGlzbid0IHBlcmZlY3QgYmVjYXVzZSBiZWNhdXNlIHdlIGNhbiBzdGlsbCBlbmQgdXAgb3V0IG9mIHJhbmdlIGJlY2F1c2Ugb2YgYWRkaXRpb25hbCBzaGlmdGluZywgYnV0IGl0J3MgYSBzdGFydFxuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoXCJUaW1lc3RhbXAgb3V0IG9mIHJhbmdlXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IERhdGVUaW1lKHtcbiAgICAgICAgdHM6IG1pbGxpc2Vjb25kcyxcbiAgICAgICAgem9uZTogbm9ybWFsaXplWm9uZShvcHRpb25zLnpvbmUsIFNldHRpbmdzLmRlZmF1bHRab25lKSxcbiAgICAgICAgbG9jOiBMb2NhbGUuZnJvbU9iamVjdChvcHRpb25zKSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGEgbnVtYmVyIG9mIHNlY29uZHMgc2luY2UgdGhlIGVwb2NoIChtZWFuaW5nIHNpbmNlIDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuIFVzZXMgdGhlIGRlZmF1bHQgem9uZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHNlY29uZHMgLSBhIG51bWJlciBvZiBzZWNvbmRzIHNpbmNlIDE5NzAgVVRDXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdGlvbnMuem9uZT0nbG9jYWwnXSAtIHRoZSB6b25lIHRvIHBsYWNlIHRoZSBEYXRlVGltZSBpbnRvXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sb2NhbGVdIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIGZyb21TZWNvbmRzKHNlY29uZHMsIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICghaXNOdW1iZXIoc2Vjb25kcykpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcImZyb21TZWNvbmRzIHJlcXVpcmVzIGEgbnVtZXJpY2FsIGlucHV0XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IERhdGVUaW1lKHtcbiAgICAgICAgdHM6IHNlY29uZHMgKiAxMDAwLFxuICAgICAgICB6b25lOiBub3JtYWxpemVab25lKG9wdGlvbnMuem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpLFxuICAgICAgICBsb2M6IExvY2FsZS5mcm9tT2JqZWN0KG9wdGlvbnMpLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYSBKYXZhU2NyaXB0IG9iamVjdCB3aXRoIGtleXMgbGlrZSAneWVhcicgYW5kICdob3VyJyB3aXRoIHJlYXNvbmFibGUgZGVmYXVsdHMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSB0aGUgb2JqZWN0IHRvIGNyZWF0ZSB0aGUgRGF0ZVRpbWUgZnJvbVxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLnllYXIgLSBhIHllYXIsIHN1Y2ggYXMgMTk4N1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLm1vbnRoIC0gYSBtb250aCwgMS0xMlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLmRheSAtIGEgZGF5IG9mIHRoZSBtb250aCwgMS0zMSwgZGVwZW5kaW5nIG9uIHRoZSBtb250aFxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLm9yZGluYWwgLSBkYXkgb2YgdGhlIHllYXIsIDEtMzY1IG9yIDM2NlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLndlZWtZZWFyIC0gYW4gSVNPIHdlZWsgeWVhclxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLndlZWtOdW1iZXIgLSBhbiBJU08gd2VlayBudW1iZXIsIGJldHdlZW4gMSBhbmQgNTIgb3IgNTMsIGRlcGVuZGluZyBvbiB0aGUgeWVhclxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLndlZWtkYXkgLSBhbiBJU08gd2Vla2RheSwgMS03LCB3aGVyZSAxIGlzIE1vbmRheSBhbmQgNyBpcyBTdW5kYXlcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5sb2NhbFdlZWtZZWFyIC0gYSB3ZWVrIHllYXIsIGFjY29yZGluZyB0byB0aGUgbG9jYWxlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubG9jYWxXZWVrTnVtYmVyIC0gYSB3ZWVrIG51bWJlciwgYmV0d2VlbiAxIGFuZCA1MiBvciA1MywgZGVwZW5kaW5nIG9uIHRoZSB5ZWFyLCBhY2NvcmRpbmcgdG8gdGhlIGxvY2FsZVxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLmxvY2FsV2Vla2RheSAtIGEgd2Vla2RheSwgMS03LCB3aGVyZSAxIGlzIHRoZSBmaXJzdCBhbmQgNyBpcyB0aGUgbGFzdCBkYXkgb2YgdGhlIHdlZWssIGFjY29yZGluZyB0byB0aGUgbG9jYWxlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmouaG91ciAtIGhvdXIgb2YgdGhlIGRheSwgMC0yM1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLm1pbnV0ZSAtIG1pbnV0ZSBvZiB0aGUgaG91ciwgMC01OVxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLnNlY29uZCAtIHNlY29uZCBvZiB0aGUgbWludXRlLCAwLTU5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubWlsbGlzZWNvbmQgLSBtaWxsaXNlY29uZCBvZiB0aGUgc2Vjb25kLCAwLTk5OVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgZm9yIGNyZWF0aW5nIHRoaXMgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIGludGVycHJldCB0aGUgbnVtYmVycyBpbiB0aGUgY29udGV4dCBvZiBhIHBhcnRpY3VsYXIgem9uZS4gQ2FuIHRha2UgYW55IHZhbHVlIHRha2VuIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byBzZXRab25lKClcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nc3lzdGVtXFwncyBsb2NhbGUnXSAtIGEgbG9jYWxlIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm91dHB1dENhbGVuZGFyIC0gdGhlIG91dHB1dCBjYWxlbmRhciB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tT2JqZWN0KHsgeWVhcjogMTk4MiwgbW9udGg6IDUsIGRheTogMjV9KS50b0lTT0RhdGUoKSAvLz0+ICcxOTgyLTA1LTI1J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tT2JqZWN0KHsgeWVhcjogMTk4MiB9KS50b0lTT0RhdGUoKSAvLz0+ICcxOTgyLTAxLTAxJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tT2JqZWN0KHsgaG91cjogMTAsIG1pbnV0ZTogMjYsIHNlY29uZDogNiB9KSAvL34+IHRvZGF5IGF0IDEwOjI2OjA2XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyBob3VyOiAxMCwgbWludXRlOiAyNiwgc2Vjb25kOiA2IH0sIHsgem9uZTogJ3V0YycgfSksXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyBob3VyOiAxMCwgbWludXRlOiAyNiwgc2Vjb25kOiA2IH0sIHsgem9uZTogJ2xvY2FsJyB9KVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tT2JqZWN0KHsgaG91cjogMTAsIG1pbnV0ZTogMjYsIHNlY29uZDogNiB9LCB7IHpvbmU6ICdBbWVyaWNhL05ld19Zb3JrJyB9KVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tT2JqZWN0KHsgd2Vla1llYXI6IDIwMTYsIHdlZWtOdW1iZXI6IDIsIHdlZWtkYXk6IDMgfSkudG9JU09EYXRlKCkgLy89PiAnMjAxNi0wMS0xMydcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IGxvY2FsV2Vla1llYXI6IDIwMjIsIGxvY2FsV2Vla051bWJlcjogMSwgbG9jYWxXZWVrZGF5OiAxIH0sIHsgbG9jYWxlOiBcImVuLVVTXCIgfSkudG9JU09EYXRlKCkgLy89PiAnMjAyMS0xMi0yNidcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICBzdGF0aWMgZnJvbU9iamVjdChvYmosIG9wdHMgPSB7fSkge1xuICAgIG9iaiA9IG9iaiB8fCB7fTtcbiAgICBjb25zdCB6b25lVG9Vc2UgPSBub3JtYWxpemVab25lKG9wdHMuem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpO1xuICAgIGlmICghem9uZVRvVXNlLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKHVuc3VwcG9ydGVkWm9uZSh6b25lVG9Vc2UpKTtcbiAgICB9XG5cbiAgICBjb25zdCBsb2MgPSBMb2NhbGUuZnJvbU9iamVjdChvcHRzKTtcbiAgICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplT2JqZWN0KG9iaiwgbm9ybWFsaXplVW5pdFdpdGhMb2NhbFdlZWtzKTtcbiAgICBjb25zdCB7IG1pbkRheXNJbkZpcnN0V2Vlaywgc3RhcnRPZldlZWsgfSA9IHVzZXNMb2NhbFdlZWtWYWx1ZXMobm9ybWFsaXplZCwgbG9jKTtcblxuICAgIGNvbnN0IHRzTm93ID0gU2V0dGluZ3Mubm93KCksXG4gICAgICBvZmZzZXRQcm92aXMgPSAhaXNVbmRlZmluZWQob3B0cy5zcGVjaWZpY09mZnNldClcbiAgICAgICAgPyBvcHRzLnNwZWNpZmljT2Zmc2V0XG4gICAgICAgIDogem9uZVRvVXNlLm9mZnNldCh0c05vdyksXG4gICAgICBjb250YWluc09yZGluYWwgPSAhaXNVbmRlZmluZWQobm9ybWFsaXplZC5vcmRpbmFsKSxcbiAgICAgIGNvbnRhaW5zR3JlZ29yWWVhciA9ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLnllYXIpLFxuICAgICAgY29udGFpbnNHcmVnb3JNRCA9ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLm1vbnRoKSB8fCAhaXNVbmRlZmluZWQobm9ybWFsaXplZC5kYXkpLFxuICAgICAgY29udGFpbnNHcmVnb3IgPSBjb250YWluc0dyZWdvclllYXIgfHwgY29udGFpbnNHcmVnb3JNRCxcbiAgICAgIGRlZmluaXRlV2Vla0RlZiA9IG5vcm1hbGl6ZWQud2Vla1llYXIgfHwgbm9ybWFsaXplZC53ZWVrTnVtYmVyO1xuXG4gICAgLy8gY2FzZXM6XG4gICAgLy8ganVzdCBhIHdlZWtkYXkgLT4gdGhpcyB3ZWVrJ3MgaW5zdGFuY2Ugb2YgdGhhdCB3ZWVrZGF5LCBubyB3b3JyaWVzXG4gICAgLy8gKGdyZWdvcmlhbiBkYXRhIG9yIG9yZGluYWwpICsgKHdlZWtZZWFyIG9yIHdlZWtOdW1iZXIpIC0+IGVycm9yXG4gICAgLy8gKGdyZWdvcmlhbiBtb250aCBvciBkYXkpICsgb3JkaW5hbCAtPiBlcnJvclxuICAgIC8vIG90aGVyd2lzZSBqdXN0IHVzZSB3ZWVrcyBvciBvcmRpbmFscyBvciBncmVnb3JpYW4sIGRlcGVuZGluZyBvbiB3aGF0J3Mgc3BlY2lmaWVkXG5cbiAgICBpZiAoKGNvbnRhaW5zR3JlZ29yIHx8IGNvbnRhaW5zT3JkaW5hbCkgJiYgZGVmaW5pdGVXZWVrRGVmKSB7XG4gICAgICB0aHJvdyBuZXcgQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IoXG4gICAgICAgIFwiQ2FuJ3QgbWl4IHdlZWtZZWFyL3dlZWtOdW1iZXIgdW5pdHMgd2l0aCB5ZWFyL21vbnRoL2RheSBvciBvcmRpbmFsc1wiXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChjb250YWluc0dyZWdvck1EICYmIGNvbnRhaW5zT3JkaW5hbCkge1xuICAgICAgdGhyb3cgbmV3IENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yKFwiQ2FuJ3QgbWl4IG9yZGluYWwgZGF0ZXMgd2l0aCBtb250aC9kYXlcIik7XG4gICAgfVxuXG4gICAgY29uc3QgdXNlV2Vla0RhdGEgPSBkZWZpbml0ZVdlZWtEZWYgfHwgKG5vcm1hbGl6ZWQud2Vla2RheSAmJiAhY29udGFpbnNHcmVnb3IpO1xuXG4gICAgLy8gY29uZmlndXJlIG91cnNlbHZlcyB0byBkZWFsIHdpdGggZ3JlZ29yaWFuIGRhdGVzIG9yIHdlZWsgc3R1ZmZcbiAgICBsZXQgdW5pdHMsXG4gICAgICBkZWZhdWx0VmFsdWVzLFxuICAgICAgb2JqTm93ID0gdHNUb09iaih0c05vdywgb2Zmc2V0UHJvdmlzKTtcbiAgICBpZiAodXNlV2Vla0RhdGEpIHtcbiAgICAgIHVuaXRzID0gb3JkZXJlZFdlZWtVbml0cztcbiAgICAgIGRlZmF1bHRWYWx1ZXMgPSBkZWZhdWx0V2Vla1VuaXRWYWx1ZXM7XG4gICAgICBvYmpOb3cgPSBncmVnb3JpYW5Ub1dlZWsob2JqTm93LCBtaW5EYXlzSW5GaXJzdFdlZWssIHN0YXJ0T2ZXZWVrKTtcbiAgICB9IGVsc2UgaWYgKGNvbnRhaW5zT3JkaW5hbCkge1xuICAgICAgdW5pdHMgPSBvcmRlcmVkT3JkaW5hbFVuaXRzO1xuICAgICAgZGVmYXVsdFZhbHVlcyA9IGRlZmF1bHRPcmRpbmFsVW5pdFZhbHVlcztcbiAgICAgIG9iak5vdyA9IGdyZWdvcmlhblRvT3JkaW5hbChvYmpOb3cpO1xuICAgIH0gZWxzZSB7XG4gICAgICB1bml0cyA9IG9yZGVyZWRVbml0cztcbiAgICAgIGRlZmF1bHRWYWx1ZXMgPSBkZWZhdWx0VW5pdFZhbHVlcztcbiAgICB9XG5cbiAgICAvLyBzZXQgZGVmYXVsdCB2YWx1ZXMgZm9yIG1pc3Npbmcgc3R1ZmZcbiAgICBsZXQgZm91bmRGaXJzdCA9IGZhbHNlO1xuICAgIGZvciAoY29uc3QgdSBvZiB1bml0cykge1xuICAgICAgY29uc3QgdiA9IG5vcm1hbGl6ZWRbdV07XG4gICAgICBpZiAoIWlzVW5kZWZpbmVkKHYpKSB7XG4gICAgICAgIGZvdW5kRmlyc3QgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChmb3VuZEZpcnN0KSB7XG4gICAgICAgIG5vcm1hbGl6ZWRbdV0gPSBkZWZhdWx0VmFsdWVzW3VdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9ybWFsaXplZFt1XSA9IG9iak5vd1t1XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBtYWtlIHN1cmUgdGhlIHZhbHVlcyB3ZSBoYXZlIGFyZSBpbiByYW5nZVxuICAgIGNvbnN0IGhpZ2hlck9yZGVySW52YWxpZCA9IHVzZVdlZWtEYXRhXG4gICAgICAgID8gaGFzSW52YWxpZFdlZWtEYXRhKG5vcm1hbGl6ZWQsIG1pbkRheXNJbkZpcnN0V2Vlaywgc3RhcnRPZldlZWspXG4gICAgICAgIDogY29udGFpbnNPcmRpbmFsXG4gICAgICAgID8gaGFzSW52YWxpZE9yZGluYWxEYXRhKG5vcm1hbGl6ZWQpXG4gICAgICAgIDogaGFzSW52YWxpZEdyZWdvcmlhbkRhdGEobm9ybWFsaXplZCksXG4gICAgICBpbnZhbGlkID0gaGlnaGVyT3JkZXJJbnZhbGlkIHx8IGhhc0ludmFsaWRUaW1lRGF0YShub3JtYWxpemVkKTtcblxuICAgIGlmIChpbnZhbGlkKSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChpbnZhbGlkKTtcbiAgICB9XG5cbiAgICAvLyBjb21wdXRlIHRoZSBhY3R1YWwgdGltZVxuICAgIGNvbnN0IGdyZWdvcmlhbiA9IHVzZVdlZWtEYXRhXG4gICAgICAgID8gd2Vla1RvR3JlZ29yaWFuKG5vcm1hbGl6ZWQsIG1pbkRheXNJbkZpcnN0V2Vlaywgc3RhcnRPZldlZWspXG4gICAgICAgIDogY29udGFpbnNPcmRpbmFsXG4gICAgICAgID8gb3JkaW5hbFRvR3JlZ29yaWFuKG5vcm1hbGl6ZWQpXG4gICAgICAgIDogbm9ybWFsaXplZCxcbiAgICAgIFt0c0ZpbmFsLCBvZmZzZXRGaW5hbF0gPSBvYmpUb1RTKGdyZWdvcmlhbiwgb2Zmc2V0UHJvdmlzLCB6b25lVG9Vc2UpLFxuICAgICAgaW5zdCA9IG5ldyBEYXRlVGltZSh7XG4gICAgICAgIHRzOiB0c0ZpbmFsLFxuICAgICAgICB6b25lOiB6b25lVG9Vc2UsXG4gICAgICAgIG86IG9mZnNldEZpbmFsLFxuICAgICAgICBsb2MsXG4gICAgICB9KTtcblxuICAgIC8vIGdyZWdvcmlhbiBkYXRhICsgd2Vla2RheSBzZXJ2ZXMgb25seSB0byB2YWxpZGF0ZVxuICAgIGlmIChub3JtYWxpemVkLndlZWtkYXkgJiYgY29udGFpbnNHcmVnb3IgJiYgb2JqLndlZWtkYXkgIT09IGluc3Qud2Vla2RheSkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoXG4gICAgICAgIFwibWlzbWF0Y2hlZCB3ZWVrZGF5XCIsXG4gICAgICAgIGB5b3UgY2FuJ3Qgc3BlY2lmeSBib3RoIGEgd2Vla2RheSBvZiAke25vcm1hbGl6ZWQud2Vla2RheX0gYW5kIGEgZGF0ZSBvZiAke2luc3QudG9JU08oKX1gXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBpbnN0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYW4gSVNPIDg2MDEgc3RyaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIElTTyBzdHJpbmdcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRvIGFmZmVjdCB0aGUgY3JlYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIHVzZSB0aGlzIHpvbmUgaWYgbm8gb2Zmc2V0IGlzIHNwZWNpZmllZCBpbiB0aGUgaW5wdXQgc3RyaW5nIGl0c2VsZi4gV2lsbCBhbHNvIGNvbnZlcnQgdGhlIHRpbWUgdG8gdGhpcyB6b25lXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc2V0Wm9uZT1mYWxzZV0gLSBvdmVycmlkZSB0aGUgem9uZSB3aXRoIGEgZml4ZWQtb2Zmc2V0IHpvbmUgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaXRzZWxmLCBpZiBpdCBzcGVjaWZpZXMgb25lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J3N5c3RlbSdzIGxvY2FsZSddIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm91dHB1dENhbGVuZGFyXSAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm51bWJlcmluZ1N5c3RlbV0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tSVNPKCcyMDE2LTA1LTI1VDA5OjA4OjM0LjEyMycpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21JU08oJzIwMTYtMDUtMjVUMDk6MDg6MzQuMTIzKzA2OjAwJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUlTTygnMjAxNi0wNS0yNVQwOTowODozNC4xMjMrMDY6MDAnLCB7c2V0Wm9uZTogdHJ1ZX0pXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21JU08oJzIwMTYtMDUtMjVUMDk6MDg6MzQuMTIzJywge3pvbmU6ICd1dGMnfSlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUlTTygnMjAxNi1XMDUtNCcpXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIGZyb21JU08odGV4dCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgW3ZhbHMsIHBhcnNlZFpvbmVdID0gcGFyc2VJU09EYXRlKHRleHQpO1xuICAgIHJldHVybiBwYXJzZURhdGFUb0RhdGVUaW1lKHZhbHMsIHBhcnNlZFpvbmUsIG9wdHMsIFwiSVNPIDg2MDFcIiwgdGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhbiBSRkMgMjgyMiBzdHJpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0aGUgUkZDIDI4MjIgc3RyaW5nXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0byBhZmZlY3QgdGhlIGNyZWF0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFtvcHRzLnpvbmU9J2xvY2FsJ10gLSBjb252ZXJ0IHRoZSB0aW1lIHRvIHRoaXMgem9uZS4gU2luY2UgdGhlIG9mZnNldCBpcyBhbHdheXMgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaXRzZWxmLCB0aGlzIGhhcyBubyBlZmZlY3Qgb24gdGhlIGludGVycHJldGF0aW9uIG9mIHN0cmluZywgbWVyZWx5IHRoZSB6b25lIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaXMgZXhwcmVzc2VkIGluLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnNldFpvbmU9ZmFsc2VdIC0gb3ZlcnJpZGUgdGhlIHpvbmUgd2l0aCBhIGZpeGVkLW9mZnNldCB6b25lIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGl0c2VsZiwgaWYgaXQgc3BlY2lmaWVzIG9uZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdzeXN0ZW0ncyBsb2NhbGUnXSAtIGEgbG9jYWxlIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm91dHB1dENhbGVuZGFyIC0gdGhlIG91dHB1dCBjYWxlbmRhciB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tUkZDMjgyMignMjUgTm92IDIwMTYgMTM6MjM6MTIgR01UJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVJGQzI4MjIoJ0ZyaSwgMjUgTm92IDIwMTYgMTM6MjM6MTIgKzA2MDAnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tUkZDMjgyMignMjUgTm92IDIwMTYgMTM6MjMgWicpXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIGZyb21SRkMyODIyKHRleHQsIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IFt2YWxzLCBwYXJzZWRab25lXSA9IHBhcnNlUkZDMjgyMkRhdGUodGV4dCk7XG4gICAgcmV0dXJuIHBhcnNlRGF0YVRvRGF0ZVRpbWUodmFscywgcGFyc2VkWm9uZSwgb3B0cywgXCJSRkMgMjgyMlwiLCB0ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGFuIEhUVFAgaGVhZGVyIGRhdGVcbiAgICogQHNlZSBodHRwczovL3d3dy53My5vcmcvUHJvdG9jb2xzL3JmYzI2MTYvcmZjMjYxNi1zZWMzLmh0bWwjc2VjMy4zLjFcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0aGUgSFRUUCBoZWFkZXIgZGF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdG8gYWZmZWN0IHRoZSBjcmVhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbb3B0cy56b25lPSdsb2NhbCddIC0gY29udmVydCB0aGUgdGltZSB0byB0aGlzIHpvbmUuIFNpbmNlIEhUVFAgZGF0ZXMgYXJlIGFsd2F5cyBpbiBVVEMsIHRoaXMgaGFzIG5vIGVmZmVjdCBvbiB0aGUgaW50ZXJwcmV0YXRpb24gb2Ygc3RyaW5nLCBtZXJlbHkgdGhlIHpvbmUgdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpcyBleHByZXNzZWQgaW4uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc2V0Wm9uZT1mYWxzZV0gLSBvdmVycmlkZSB0aGUgem9uZSB3aXRoIHRoZSBmaXhlZC1vZmZzZXQgem9uZSBzcGVjaWZpZWQgaW4gdGhlIHN0cmluZy4gRm9yIEhUVFAgZGF0ZXMsIHRoaXMgaXMgYWx3YXlzIFVUQywgc28gdGhpcyBvcHRpb24gaXMgZXF1aXZhbGVudCB0byBzZXR0aW5nIHRoZSBgem9uZWAgb3B0aW9uIHRvICd1dGMnLCBidXQgdGhpcyBvcHRpb24gaXMgaW5jbHVkZWQgZm9yIGNvbnNpc3RlbmN5IHdpdGggc2ltaWxhciBtZXRob2RzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdzeXN0ZW0ncyBsb2NhbGUnXSAtIGEgbG9jYWxlIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm91dHB1dENhbGVuZGFyIC0gdGhlIG91dHB1dCBjYWxlbmRhciB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tSFRUUCgnU3VuLCAwNiBOb3YgMTk5NCAwODo0OTozNyBHTVQnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tSFRUUCgnU3VuZGF5LCAwNi1Ob3YtOTQgMDg6NDk6MzcgR01UJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUhUVFAoJ1N1biBOb3YgIDYgMDg6NDk6MzcgMTk5NCcpXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIGZyb21IVFRQKHRleHQsIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IFt2YWxzLCBwYXJzZWRab25lXSA9IHBhcnNlSFRUUERhdGUodGV4dCk7XG4gICAgcmV0dXJuIHBhcnNlRGF0YVRvRGF0ZVRpbWUodmFscywgcGFyc2VkWm9uZSwgb3B0cywgXCJIVFRQXCIsIG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYW4gaW5wdXQgc3RyaW5nIGFuZCBmb3JtYXQgc3RyaW5nLlxuICAgKiBEZWZhdWx0cyB0byBlbi1VUyBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkLCByZWdhcmRsZXNzIG9mIHRoZSBzeXN0ZW0ncyBsb2NhbGUuIEZvciBhIHRhYmxlIG9mIHRva2VucyBhbmQgdGhlaXIgaW50ZXJwcmV0YXRpb25zLCBzZWUgW2hlcmVdKGh0dHBzOi8vbW9tZW50LmdpdGh1Yi5pby9sdXhvbi8jL3BhcnNpbmc/aWQ9dGFibGUtb2YtdG9rZW5zKS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0aGUgc3RyaW5nIHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmbXQgLSB0aGUgZm9ybWF0IHRoZSBzdHJpbmcgaXMgZXhwZWN0ZWQgdG8gYmUgaW4gKHNlZSB0aGUgbGluayBiZWxvdyBmb3IgdGhlIGZvcm1hdHMpXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0byBhZmZlY3QgdGhlIGNyZWF0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFtvcHRzLnpvbmU9J2xvY2FsJ10gLSB1c2UgdGhpcyB6b25lIGlmIG5vIG9mZnNldCBpcyBzcGVjaWZpZWQgaW4gdGhlIGlucHV0IHN0cmluZyBpdHNlbGYuIFdpbGwgYWxzbyBjb252ZXJ0IHRoZSBEYXRlVGltZSB0byB0aGlzIHpvbmVcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zZXRab25lPWZhbHNlXSAtIG92ZXJyaWRlIHRoZSB6b25lIHdpdGggYSB6b25lIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGl0c2VsZiwgaWYgaXQgc3BlY2lmaWVzIG9uZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbi1VUyddIC0gYSBsb2NhbGUgc3RyaW5nIHRvIHVzZSB3aGVuIHBhcnNpbmcuIFdpbGwgYWxzbyBzZXQgdGhlIERhdGVUaW1lIHRvIHRoaXMgbG9jYWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHVzZSB3aGVuIHBhcnNpbmcuIFdpbGwgYWxzbyBzZXQgdGhlIHJlc3VsdGluZyBEYXRlVGltZSB0byB0aGlzIG51bWJlcmluZyBzeXN0ZW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIGZyb21Gb3JtYXQodGV4dCwgZm10LCBvcHRzID0ge30pIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodGV4dCkgfHwgaXNVbmRlZmluZWQoZm10KSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwiZnJvbUZvcm1hdCByZXF1aXJlcyBhbiBpbnB1dCBzdHJpbmcgYW5kIGEgZm9ybWF0XCIpO1xuICAgIH1cblxuICAgIGNvbnN0IHsgbG9jYWxlID0gbnVsbCwgbnVtYmVyaW5nU3lzdGVtID0gbnVsbCB9ID0gb3B0cyxcbiAgICAgIGxvY2FsZVRvVXNlID0gTG9jYWxlLmZyb21PcHRzKHtcbiAgICAgICAgbG9jYWxlLFxuICAgICAgICBudW1iZXJpbmdTeXN0ZW0sXG4gICAgICAgIGRlZmF1bHRUb0VOOiB0cnVlLFxuICAgICAgfSksXG4gICAgICBbdmFscywgcGFyc2VkWm9uZSwgc3BlY2lmaWNPZmZzZXQsIGludmFsaWRdID0gcGFyc2VGcm9tVG9rZW5zKGxvY2FsZVRvVXNlLCB0ZXh0LCBmbXQpO1xuICAgIGlmIChpbnZhbGlkKSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChpbnZhbGlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcnNlRGF0YVRvRGF0ZVRpbWUodmFscywgcGFyc2VkWm9uZSwgb3B0cywgYGZvcm1hdCAke2ZtdH1gLCB0ZXh0LCBzcGVjaWZpY09mZnNldCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHVzZSBmcm9tRm9ybWF0IGluc3RlYWRcbiAgICovXG4gIHN0YXRpYyBmcm9tU3RyaW5nKHRleHQsIGZtdCwgb3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIERhdGVUaW1lLmZyb21Gb3JtYXQodGV4dCwgZm10LCBvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGEgU1FMIGRhdGUsIHRpbWUsIG9yIGRhdGV0aW1lXG4gICAqIERlZmF1bHRzIHRvIGVuLVVTIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWQsIHJlZ2FyZGxlc3Mgb2YgdGhlIHN5c3RlbSdzIGxvY2FsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIHRoZSBzdHJpbmcgdG8gcGFyc2VcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRvIGFmZmVjdCB0aGUgY3JlYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIHVzZSB0aGlzIHpvbmUgaWYgbm8gb2Zmc2V0IGlzIHNwZWNpZmllZCBpbiB0aGUgaW5wdXQgc3RyaW5nIGl0c2VsZi4gV2lsbCBhbHNvIGNvbnZlcnQgdGhlIERhdGVUaW1lIHRvIHRoaXMgem9uZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnNldFpvbmU9ZmFsc2VdIC0gb3ZlcnJpZGUgdGhlIHpvbmUgd2l0aCBhIHpvbmUgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaXRzZWxmLCBpZiBpdCBzcGVjaWZpZXMgb25lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J2VuLVVTJ10gLSBhIGxvY2FsZSBzdHJpbmcgdG8gdXNlIHdoZW4gcGFyc2luZy4gV2lsbCBhbHNvIHNldCB0aGUgRGF0ZVRpbWUgdG8gdGhpcyBsb2NhbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gdXNlIHdoZW4gcGFyc2luZy4gV2lsbCBhbHNvIHNldCB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIHRvIHRoaXMgbnVtYmVyaW5nIHN5c3RlbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5vdXRwdXRDYWxlbmRhciAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVNRTCgnMjAxNy0wNS0xNScpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUgMDk6MTI6MzQnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tU1FMKCcyMDE3LTA1LTE1IDA5OjEyOjM0LjM0MicpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUgMDk6MTI6MzQuMzQyKzA2OjAwJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVNRTCgnMjAxNy0wNS0xNSAwOToxMjozNC4zNDIgQW1lcmljYS9Mb3NfQW5nZWxlcycpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUgMDk6MTI6MzQuMzQyIEFtZXJpY2EvTG9zX0FuZ2VsZXMnLCB7IHNldFpvbmU6IHRydWUgfSlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVNRTCgnMjAxNy0wNS0xNSAwOToxMjozNC4zNDInLCB7IHpvbmU6ICdBbWVyaWNhL0xvc19BbmdlbGVzJyB9KVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tU1FMKCcwOToxMjozNC4zNDInKVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHN0YXRpYyBmcm9tU1FMKHRleHQsIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IFt2YWxzLCBwYXJzZWRab25lXSA9IHBhcnNlU1FMKHRleHQpO1xuICAgIHJldHVybiBwYXJzZURhdGFUb0RhdGVUaW1lKHZhbHMsIHBhcnNlZFpvbmUsIG9wdHMsIFwiU1FMXCIsIHRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbnZhbGlkIERhdGVUaW1lLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIC0gc2ltcGxlIHN0cmluZyBvZiB3aHkgdGhpcyBEYXRlVGltZSBpcyBpbnZhbGlkLiBTaG91bGQgbm90IGNvbnRhaW4gcGFyYW1ldGVycyBvciBhbnl0aGluZyBlbHNlIGRhdGEtZGVwZW5kZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2V4cGxhbmF0aW9uPW51bGxdIC0gbG9uZ2VyIGV4cGxhbmF0aW9uLCBtYXkgaW5jbHVkZSBwYXJhbWV0ZXJzIGFuZCBvdGhlciB1c2VmdWwgZGVidWdnaW5nIGluZm9ybWF0aW9uXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIGludmFsaWQocmVhc29uLCBleHBsYW5hdGlvbiA9IG51bGwpIHtcbiAgICBpZiAoIXJlYXNvbikge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwibmVlZCB0byBzcGVjaWZ5IGEgcmVhc29uIHRoZSBEYXRlVGltZSBpcyBpbnZhbGlkXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGludmFsaWQgPSByZWFzb24gaW5zdGFuY2VvZiBJbnZhbGlkID8gcmVhc29uIDogbmV3IEludmFsaWQocmVhc29uLCBleHBsYW5hdGlvbik7XG5cbiAgICBpZiAoU2V0dGluZ3MudGhyb3dPbkludmFsaWQpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkRGF0ZVRpbWVFcnJvcihpbnZhbGlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlVGltZSh7IGludmFsaWQgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIG9iamVjdCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlVGltZS4gV29ya3MgYWNyb3NzIGNvbnRleHQgYm91bmRhcmllc1xuICAgKiBAcGFyYW0ge29iamVjdH0gb1xuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzRGF0ZVRpbWUobykge1xuICAgIHJldHVybiAobyAmJiBvLmlzTHV4b25EYXRlVGltZSkgfHwgZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogUHJvZHVjZSB0aGUgZm9ybWF0IHN0cmluZyBmb3IgYSBzZXQgb2Ygb3B0aW9uc1xuICAgKiBAcGFyYW0gZm9ybWF0T3B0c1xuICAgKiBAcGFyYW0gbG9jYWxlT3B0c1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIHBhcnNlRm9ybWF0Rm9yT3B0cyhmb3JtYXRPcHRzLCBsb2NhbGVPcHRzID0ge30pIHtcbiAgICBjb25zdCB0b2tlbkxpc3QgPSBmb3JtYXRPcHRzVG9Ub2tlbnMoZm9ybWF0T3B0cywgTG9jYWxlLmZyb21PYmplY3QobG9jYWxlT3B0cykpO1xuICAgIHJldHVybiAhdG9rZW5MaXN0ID8gbnVsbCA6IHRva2VuTGlzdC5tYXAoKHQpID0+ICh0ID8gdC52YWwgOiBudWxsKSkuam9pbihcIlwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9kdWNlIHRoZSB0aGUgZnVsbHkgZXhwYW5kZWQgZm9ybWF0IHRva2VuIGZvciB0aGUgbG9jYWxlXG4gICAqIERvZXMgTk9UIHF1b3RlIGNoYXJhY3RlcnMsIHNvIHF1b3RlZCB0b2tlbnMgd2lsbCBub3Qgcm91bmQgdHJpcCBjb3JyZWN0bHlcbiAgICogQHBhcmFtIGZtdFxuICAgKiBAcGFyYW0gbG9jYWxlT3B0c1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGV4cGFuZEZvcm1hdChmbXQsIGxvY2FsZU9wdHMgPSB7fSkge1xuICAgIGNvbnN0IGV4cGFuZGVkID0gZXhwYW5kTWFjcm9Ub2tlbnMoRm9ybWF0dGVyLnBhcnNlRm9ybWF0KGZtdCksIExvY2FsZS5mcm9tT2JqZWN0KGxvY2FsZU9wdHMpKTtcbiAgICByZXR1cm4gZXhwYW5kZWQubWFwKCh0KSA9PiB0LnZhbCkuam9pbihcIlwiKTtcbiAgfVxuXG4gIC8vIElORk9cblxuICAvKipcbiAgICogR2V0IHRoZSB2YWx1ZSBvZiB1bml0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIGEgdW5pdCBzdWNoIGFzICdtaW51dGUnIG9yICdkYXknXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDcsIDQpLmdldCgnbW9udGgnKTsgLy89PiA3XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDcsIDQpLmdldCgnZGF5Jyk7IC8vPT4gNFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXQodW5pdCkge1xuICAgIHJldHVybiB0aGlzW3VuaXRdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgRGF0ZVRpbWUgaXMgdmFsaWQuIEludmFsaWQgRGF0ZVRpbWVzIG9jY3VyIHdoZW46XG4gICAqICogVGhlIERhdGVUaW1lIHdhcyBjcmVhdGVkIGZyb20gaW52YWxpZCBjYWxlbmRhciBpbmZvcm1hdGlvbiwgc3VjaCBhcyB0aGUgMTN0aCBtb250aCBvciBGZWJydWFyeSAzMFxuICAgKiAqIFRoZSBEYXRlVGltZSB3YXMgY3JlYXRlZCBieSBhbiBvcGVyYXRpb24gb24gYW5vdGhlciBpbnZhbGlkIGRhdGVcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkID09PSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gZXJyb3IgY29kZSBpZiB0aGlzIERhdGVUaW1lIGlzIGludmFsaWQsIG9yIG51bGwgaWYgdGhlIERhdGVUaW1lIGlzIHZhbGlkXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgaW52YWxpZFJlYXNvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkID8gdGhpcy5pbnZhbGlkLnJlYXNvbiA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBleHBsYW5hdGlvbiBvZiB3aHkgdGhpcyBEYXRlVGltZSBiZWNhbWUgaW52YWxpZCwgb3IgbnVsbCBpZiB0aGUgRGF0ZVRpbWUgaXMgdmFsaWRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBpbnZhbGlkRXhwbGFuYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5leHBsYW5hdGlvbiA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBsb2NhbGUgb2YgYSBEYXRlVGltZSwgc3VjaCAnZW4tR0InLiBUaGUgbG9jYWxlIGlzIHVzZWQgd2hlbiBmb3JtYXR0aW5nIHRoZSBEYXRlVGltZVxuICAgKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IGxvY2FsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2MubG9jYWxlIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG51bWJlcmluZyBzeXN0ZW0gb2YgYSBEYXRlVGltZSwgc3VjaCAnYmVuZycuIFRoZSBudW1iZXJpbmcgc3lzdGVtIGlzIHVzZWQgd2hlbiBmb3JtYXR0aW5nIHRoZSBEYXRlVGltZVxuICAgKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IG51bWJlcmluZ1N5c3RlbSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2MubnVtYmVyaW5nU3lzdGVtIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG91dHB1dCBjYWxlbmRhciBvZiBhIERhdGVUaW1lLCBzdWNoICdpc2xhbWljJy4gVGhlIG91dHB1dCBjYWxlbmRhciBpcyB1c2VkIHdoZW4gZm9ybWF0dGluZyB0aGUgRGF0ZVRpbWVcbiAgICpcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBvdXRwdXRDYWxlbmRhcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2Mub3V0cHV0Q2FsZW5kYXIgOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgdGltZSB6b25lIGFzc29jaWF0ZWQgd2l0aCB0aGlzIERhdGVUaW1lLlxuICAgKiBAdHlwZSB7Wm9uZX1cbiAgICovXG4gIGdldCB6b25lKCkge1xuICAgIHJldHVybiB0aGlzLl96b25lO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmFtZSBvZiB0aGUgdGltZSB6b25lLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IHpvbmVOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnpvbmUubmFtZSA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB5ZWFyXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS55ZWFyIC8vPT4gMjAxN1xuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHllYXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuYy55ZWFyIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcXVhcnRlclxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkucXVhcnRlciAvLz0+IDJcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBxdWFydGVyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBNYXRoLmNlaWwodGhpcy5jLm1vbnRoIC8gMykgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBtb250aCAoMS0xMikuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS5tb250aCAvLz0+IDVcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBtb250aCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLm1vbnRoIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZGF5IG9mIHRoZSBtb250aCAoMS0zMGlzaCkuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS5kYXkgLy89PiAyNVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGRheSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLmRheSA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGhvdXIgb2YgdGhlIGRheSAoMC0yMykuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1LCA5KS5ob3VyIC8vPT4gOVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGhvdXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuYy5ob3VyIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbWludXRlIG9mIHRoZSBob3VyICgwLTU5KS5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUsIDksIDMwKS5taW51dGUgLy89PiAzMFxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IG1pbnV0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLm1pbnV0ZSA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHNlY29uZCBvZiB0aGUgbWludXRlICgwLTU5KS5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUsIDksIDMwLCA1Mikuc2Vjb25kIC8vPT4gNTJcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBzZWNvbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuYy5zZWNvbmQgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBtaWxsaXNlY29uZCBvZiB0aGUgc2Vjb25kICgwLTk5OSkuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1LCA5LCAzMCwgNTIsIDY1NCkubWlsbGlzZWNvbmQgLy89PiA2NTRcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBtaWxsaXNlY29uZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLm1pbGxpc2Vjb25kIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgd2VlayB5ZWFyXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAxMiwgMzEpLndlZWtZZWFyIC8vPT4gMjAxNVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHdlZWtZZWFyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBwb3NzaWJseUNhY2hlZFdlZWtEYXRhKHRoaXMpLndlZWtZZWFyIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgd2VlayBudW1iZXIgb2YgdGhlIHdlZWsgeWVhciAoMS01MmlzaCkuXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkud2Vla051bWJlciAvLz0+IDIxXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgd2Vla051bWJlcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gcG9zc2libHlDYWNoZWRXZWVrRGF0YSh0aGlzKS53ZWVrTnVtYmVyIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZGF5IG9mIHRoZSB3ZWVrLlxuICAgKiAxIGlzIE1vbmRheSBhbmQgNyBpcyBTdW5kYXlcbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDExLCAzMSkud2Vla2RheSAvLz0+IDRcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCB3ZWVrZGF5KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBwb3NzaWJseUNhY2hlZFdlZWtEYXRhKHRoaXMpLndlZWtkYXkgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgZGF0ZSBpcyBvbiBhIHdlZWtlbmQgYWNjb3JkaW5nIHRvIHRoZSBsb2NhbGUsIGZhbHNlIG90aGVyd2lzZVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBpc1dlZWtlbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCAmJiB0aGlzLmxvYy5nZXRXZWVrZW5kRGF5cygpLmluY2x1ZGVzKHRoaXMud2Vla2RheSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBkYXkgb2YgdGhlIHdlZWsgYWNjb3JkaW5nIHRvIHRoZSBsb2NhbGUuXG4gICAqIDEgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayBhbmQgNyBpcyB0aGUgbGFzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAqIElmIHRoZSBsb2NhbGUgYXNzaWducyBTdW5kYXkgYXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlaywgdGhlbiBhIGRhdGUgd2hpY2ggaXMgYSBTdW5kYXkgd2lsbCByZXR1cm4gMSxcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGdldCBsb2NhbFdlZWtkYXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHBvc3NpYmx5Q2FjaGVkTG9jYWxXZWVrRGF0YSh0aGlzKS53ZWVrZGF5IDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgd2VlayBudW1iZXIgb2YgdGhlIHdlZWsgeWVhciBhY2NvcmRpbmcgdG8gdGhlIGxvY2FsZS4gRGlmZmVyZW50IGxvY2FsZXMgYXNzaWduIHdlZWsgbnVtYmVycyBkaWZmZXJlbnRseSxcbiAgICogYmVjYXVzZSB0aGUgd2VlayBjYW4gc3RhcnQgb24gZGlmZmVyZW50IGRheXMgb2YgdGhlIHdlZWsgKHNlZSBsb2NhbFdlZWtkYXkpIGFuZCBiZWNhdXNlIGEgZGlmZmVyZW50IG51bWJlciBvZiBkYXlzXG4gICAqIGlzIHJlcXVpcmVkIGZvciBhIHdlZWsgdG8gY291bnQgYXMgdGhlIGZpcnN0IHdlZWsgb2YgYSB5ZWFyLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGxvY2FsV2Vla051bWJlcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gcG9zc2libHlDYWNoZWRMb2NhbFdlZWtEYXRhKHRoaXMpLndlZWtOdW1iZXIgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB3ZWVrIHllYXIgYWNjb3JkaW5nIHRvIHRoZSBsb2NhbGUuIERpZmZlcmVudCBsb2NhbGVzIGFzc2lnbiB3ZWVrIG51bWJlcnMgKGFuZCB0aGVyZWZvciB3ZWVrIHllYXJzKVxuICAgKiBkaWZmZXJlbnRseSwgc2VlIGxvY2FsV2Vla051bWJlci5cbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGdldCBsb2NhbFdlZWtZZWFyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBwb3NzaWJseUNhY2hlZExvY2FsV2Vla0RhdGEodGhpcykud2Vla1llYXIgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBvcmRpbmFsIChtZWFuaW5nIHRoZSBkYXkgb2YgdGhlIHllYXIpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS5vcmRpbmFsIC8vPT4gMTQ1XG4gICAqIEB0eXBlIHtudW1iZXJ8RGF0ZVRpbWV9XG4gICAqL1xuICBnZXQgb3JkaW5hbCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gZ3JlZ29yaWFuVG9PcmRpbmFsKHRoaXMuYykub3JkaW5hbCA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGh1bWFuIHJlYWRhYmxlIHNob3J0IG1vbnRoIG5hbWUsIHN1Y2ggYXMgJ09jdCcuXG4gICAqIERlZmF1bHRzIHRvIHRoZSBzeXN0ZW0ncyBsb2NhbGUgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCAxMCwgMzApLm1vbnRoU2hvcnQgLy89PiBPY3RcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBtb250aFNob3J0KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBJbmZvLm1vbnRocyhcInNob3J0XCIsIHsgbG9jT2JqOiB0aGlzLmxvYyB9KVt0aGlzLm1vbnRoIC0gMV0gOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgaHVtYW4gcmVhZGFibGUgbG9uZyBtb250aCBuYW1lLCBzdWNoIGFzICdPY3RvYmVyJy5cbiAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDEwLCAzMCkubW9udGhMb25nIC8vPT4gT2N0b2JlclxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IG1vbnRoTG9uZygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gSW5mby5tb250aHMoXCJsb25nXCIsIHsgbG9jT2JqOiB0aGlzLmxvYyB9KVt0aGlzLm1vbnRoIC0gMV0gOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgaHVtYW4gcmVhZGFibGUgc2hvcnQgd2Vla2RheSwgc3VjaCBhcyAnTW9uJy5cbiAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDEwLCAzMCkud2Vla2RheVNob3J0IC8vPT4gTW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgd2Vla2RheVNob3J0KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBJbmZvLndlZWtkYXlzKFwic2hvcnRcIiwgeyBsb2NPYmo6IHRoaXMubG9jIH0pW3RoaXMud2Vla2RheSAtIDFdIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGh1bWFuIHJlYWRhYmxlIGxvbmcgd2Vla2RheSwgc3VjaCBhcyAnTW9uZGF5Jy5cbiAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDEwLCAzMCkud2Vla2RheUxvbmcgLy89PiBNb25kYXlcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCB3ZWVrZGF5TG9uZygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gSW5mby53ZWVrZGF5cyhcImxvbmdcIiwgeyBsb2NPYmo6IHRoaXMubG9jIH0pW3RoaXMud2Vla2RheSAtIDFdIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIFVUQyBvZmZzZXQgb2YgdGhpcyBEYXRlVGltZSBpbiBtaW51dGVzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLm9mZnNldCAvLz0+IC0yNDBcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkub2Zmc2V0IC8vPT4gMFxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IG9mZnNldCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gK3RoaXMubyA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHNob3J0IGh1bWFuIG5hbWUgZm9yIHRoZSB6b25lJ3MgY3VycmVudCBvZmZzZXQsIGZvciBleGFtcGxlIFwiRVNUXCIgb3IgXCJFRFRcIi5cbiAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgb2Zmc2V0TmFtZVNob3J0KCkge1xuICAgIGlmICh0aGlzLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnpvbmUub2Zmc2V0TmFtZSh0aGlzLnRzLCB7XG4gICAgICAgIGZvcm1hdDogXCJzaG9ydFwiLFxuICAgICAgICBsb2NhbGU6IHRoaXMubG9jYWxlLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGxvbmcgaHVtYW4gbmFtZSBmb3IgdGhlIHpvbmUncyBjdXJyZW50IG9mZnNldCwgZm9yIGV4YW1wbGUgXCJFYXN0ZXJuIFN0YW5kYXJkIFRpbWVcIiBvciBcIkVhc3Rlcm4gRGF5bGlnaHQgVGltZVwiLlxuICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBvZmZzZXROYW1lTG9uZygpIHtcbiAgICBpZiAodGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gdGhpcy56b25lLm9mZnNldE5hbWUodGhpcy50cywge1xuICAgICAgICBmb3JtYXQ6IFwibG9uZ1wiLFxuICAgICAgICBsb2NhbGU6IHRoaXMubG9jYWxlLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgd2hldGhlciB0aGlzIHpvbmUncyBvZmZzZXQgZXZlciBjaGFuZ2VzLCBhcyBpbiBhIERTVC5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgaXNPZmZzZXRGaXhlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy56b25lLmlzVW5pdmVyc2FsIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgd2hldGhlciB0aGUgRGF0ZVRpbWUgaXMgaW4gYSBEU1QuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzSW5EU1QoKSB7XG4gICAgaWYgKHRoaXMuaXNPZmZzZXRGaXhlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLm9mZnNldCA+IHRoaXMuc2V0KHsgbW9udGg6IDEsIGRheTogMSB9KS5vZmZzZXQgfHxcbiAgICAgICAgdGhpcy5vZmZzZXQgPiB0aGlzLnNldCh7IG1vbnRoOiA1IH0pLm9mZnNldFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRob3NlIERhdGVUaW1lcyB3aGljaCBoYXZlIHRoZSBzYW1lIGxvY2FsIHRpbWUgYXMgdGhpcyBEYXRlVGltZSwgYnV0IGEgZGlmZmVyZW50IG9mZnNldCBmcm9tIFVUQ1xuICAgKiBpbiB0aGlzIERhdGVUaW1lJ3Mgem9uZS4gRHVyaW5nIERTVCBjaGFuZ2VzIGxvY2FsIHRpbWUgY2FuIGJlIGFtYmlndW91cywgZm9yIGV4YW1wbGVcbiAgICogYDIwMjMtMTAtMjlUMDI6MzA6MDBgIGluIGBFdXJvcGUvQmVybGluYCBjYW4gaGF2ZSBvZmZzZXQgYCswMTowMGAgb3IgYCswMjowMGAuXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGJvdGggcG9zc2libGUgRGF0ZVRpbWVzIGlmIHRoaXMgRGF0ZVRpbWUncyBsb2NhbCB0aW1lIGlzIGFtYmlndW91cy5cbiAgICogQHJldHVybnMge0RhdGVUaW1lW119XG4gICAqL1xuICBnZXRQb3NzaWJsZU9mZnNldHMoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQgfHwgdGhpcy5pc09mZnNldEZpeGVkKSB7XG4gICAgICByZXR1cm4gW3RoaXNdO1xuICAgIH1cbiAgICBjb25zdCBkYXlNcyA9IDg2NDAwMDAwO1xuICAgIGNvbnN0IG1pbnV0ZU1zID0gNjAwMDA7XG4gICAgY29uc3QgbG9jYWxUUyA9IG9ialRvTG9jYWxUUyh0aGlzLmMpO1xuICAgIGNvbnN0IG9FYXJsaWVyID0gdGhpcy56b25lLm9mZnNldChsb2NhbFRTIC0gZGF5TXMpO1xuICAgIGNvbnN0IG9MYXRlciA9IHRoaXMuem9uZS5vZmZzZXQobG9jYWxUUyArIGRheU1zKTtcblxuICAgIGNvbnN0IG8xID0gdGhpcy56b25lLm9mZnNldChsb2NhbFRTIC0gb0VhcmxpZXIgKiBtaW51dGVNcyk7XG4gICAgY29uc3QgbzIgPSB0aGlzLnpvbmUub2Zmc2V0KGxvY2FsVFMgLSBvTGF0ZXIgKiBtaW51dGVNcyk7XG4gICAgaWYgKG8xID09PSBvMikge1xuICAgICAgcmV0dXJuIFt0aGlzXTtcbiAgICB9XG4gICAgY29uc3QgdHMxID0gbG9jYWxUUyAtIG8xICogbWludXRlTXM7XG4gICAgY29uc3QgdHMyID0gbG9jYWxUUyAtIG8yICogbWludXRlTXM7XG4gICAgY29uc3QgYzEgPSB0c1RvT2JqKHRzMSwgbzEpO1xuICAgIGNvbnN0IGMyID0gdHNUb09iaih0czIsIG8yKTtcbiAgICBpZiAoXG4gICAgICBjMS5ob3VyID09PSBjMi5ob3VyICYmXG4gICAgICBjMS5taW51dGUgPT09IGMyLm1pbnV0ZSAmJlxuICAgICAgYzEuc2Vjb25kID09PSBjMi5zZWNvbmQgJiZcbiAgICAgIGMxLm1pbGxpc2Vjb25kID09PSBjMi5taWxsaXNlY29uZFxuICAgICkge1xuICAgICAgcmV0dXJuIFtjbG9uZSh0aGlzLCB7IHRzOiB0czEgfSksIGNsb25lKHRoaXMsIHsgdHM6IHRzMiB9KV07XG4gICAgfVxuICAgIHJldHVybiBbdGhpc107XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgRGF0ZVRpbWUgaXMgaW4gYSBsZWFwIHllYXIsIGZhbHNlIG90aGVyd2lzZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE2KS5pc0luTGVhcFllYXIgLy89PiB0cnVlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTMpLmlzSW5MZWFwWWVhciAvLz0+IGZhbHNlXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzSW5MZWFwWWVhcigpIHtcbiAgICByZXR1cm4gaXNMZWFwWWVhcih0aGlzLnllYXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBkYXlzIGluIHRoaXMgRGF0ZVRpbWUncyBtb250aFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE2LCAyKS5kYXlzSW5Nb250aCAvLz0+IDI5XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTYsIDMpLmRheXNJbk1vbnRoIC8vPT4gMzFcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBkYXlzSW5Nb250aCgpIHtcbiAgICByZXR1cm4gZGF5c0luTW9udGgodGhpcy55ZWFyLCB0aGlzLm1vbnRoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZGF5cyBpbiB0aGlzIERhdGVUaW1lJ3MgeWVhclxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE2KS5kYXlzSW5ZZWFyIC8vPT4gMzY2XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTMpLmRheXNJblllYXIgLy89PiAzNjVcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBkYXlzSW5ZZWFyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBkYXlzSW5ZZWFyKHRoaXMueWVhcikgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHdlZWtzIGluIHRoaXMgRGF0ZVRpbWUncyB5ZWFyXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDA0KS53ZWVrc0luV2Vla1llYXIgLy89PiA1M1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDEzKS53ZWVrc0luV2Vla1llYXIgLy89PiA1MlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHdlZWtzSW5XZWVrWWVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gd2Vla3NJbldlZWtZZWFyKHRoaXMud2Vla1llYXIpIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG51bWJlciBvZiB3ZWVrcyBpbiB0aGlzIERhdGVUaW1lJ3MgbG9jYWwgd2VlayB5ZWFyXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMjAsIDYsIHtsb2NhbGU6ICdlbi1VUyd9KS53ZWVrc0luTG9jYWxXZWVrWWVhciAvLz0+IDUyXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMjAsIDYsIHtsb2NhbGU6ICdkZS1ERSd9KS53ZWVrc0luTG9jYWxXZWVrWWVhciAvLz0+IDUzXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgd2Vla3NJbkxvY2FsV2Vla1llYXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZFxuICAgICAgPyB3ZWVrc0luV2Vla1llYXIoXG4gICAgICAgICAgdGhpcy5sb2NhbFdlZWtZZWFyLFxuICAgICAgICAgIHRoaXMubG9jLmdldE1pbkRheXNJbkZpcnN0V2VlaygpLFxuICAgICAgICAgIHRoaXMubG9jLmdldFN0YXJ0T2ZXZWVrKClcbiAgICAgICAgKVxuICAgICAgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcmVzb2x2ZWQgSW50bCBvcHRpb25zIGZvciB0aGlzIERhdGVUaW1lLlxuICAgKiBUaGlzIGlzIHVzZWZ1bCBpbiB1bmRlcnN0YW5kaW5nIHRoZSBiZWhhdmlvciBvZiBmb3JtYXR0aW5nIG1ldGhvZHNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSB0aGUgc2FtZSBvcHRpb25zIGFzIHRvTG9jYWxlU3RyaW5nXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIHJlc29sdmVkTG9jYWxlT3B0aW9ucyhvcHRzID0ge30pIHtcbiAgICBjb25zdCB7IGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBjYWxlbmRhciB9ID0gRm9ybWF0dGVyLmNyZWF0ZShcbiAgICAgIHRoaXMubG9jLmNsb25lKG9wdHMpLFxuICAgICAgb3B0c1xuICAgICkucmVzb2x2ZWRPcHRpb25zKHRoaXMpO1xuICAgIHJldHVybiB7IGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhcjogY2FsZW5kYXIgfTtcbiAgfVxuXG4gIC8vIFRSQU5TRk9STVxuXG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSBEYXRlVGltZSdzIHpvbmUgdG8gVVRDLiBSZXR1cm5zIGEgbmV3bHktY29uc3RydWN0ZWQgRGF0ZVRpbWUuXG4gICAqXG4gICAqIEVxdWl2YWxlbnQgdG8ge0BsaW5rIERhdGVUaW1lI3NldFpvbmV9KCd1dGMnKVxuICAgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIG9wdGlvbmFsbHksIGFuIG9mZnNldCBmcm9tIFVUQyBpbiBtaW51dGVzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cz17fV0gLSBvcHRpb25zIHRvIHBhc3MgdG8gYHNldFpvbmUoKWBcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICB0b1VUQyhvZmZzZXQgPSAwLCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5zZXRab25lKEZpeGVkT2Zmc2V0Wm9uZS5pbnN0YW5jZShvZmZzZXQpLCBvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSBEYXRlVGltZSdzIHpvbmUgdG8gdGhlIGhvc3QncyBsb2NhbCB6b25lLiBSZXR1cm5zIGEgbmV3bHktY29uc3RydWN0ZWQgRGF0ZVRpbWUuXG4gICAqXG4gICAqIEVxdWl2YWxlbnQgdG8gYHNldFpvbmUoJ2xvY2FsJylgXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgdG9Mb2NhbCgpIHtcbiAgICByZXR1cm4gdGhpcy5zZXRab25lKFNldHRpbmdzLmRlZmF1bHRab25lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSBEYXRlVGltZSdzIHpvbmUgdG8gc3BlY2lmaWVkIHpvbmUuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgdGhlIHNldHRlciBrZWVwcyB0aGUgdW5kZXJseWluZyB0aW1lIHRoZSBzYW1lIChhcyBpbiwgdGhlIHNhbWUgdGltZXN0YW1wKSwgYnV0IHRoZSBuZXcgaW5zdGFuY2Ugd2lsbCByZXBvcnQgZGlmZmVyZW50IGxvY2FsIHRpbWVzIGFuZCBjb25zaWRlciBEU1RzIHdoZW4gbWFraW5nIGNvbXB1dGF0aW9ucywgYXMgd2l0aCB7QGxpbmsgRGF0ZVRpbWUjcGx1c30uIFlvdSBtYXkgd2lzaCB0byB1c2Uge0BsaW5rIERhdGVUaW1lI3RvTG9jYWx9IGFuZCB7QGxpbmsgRGF0ZVRpbWUjdG9VVEN9IHdoaWNoIHByb3ZpZGUgc2ltcGxlIGNvbnZlbmllbmNlIHdyYXBwZXJzIGZvciBjb21tb25seSB1c2VkIHpvbmVzLlxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbem9uZT0nbG9jYWwnXSAtIGEgem9uZSBpZGVudGlmaWVyLiBBcyBhIHN0cmluZywgdGhhdCBjYW4gYmUgYW55IElBTkEgem9uZSBzdXBwb3J0ZWQgYnkgdGhlIGhvc3QgZW52aXJvbm1lbnQsIG9yIGEgZml4ZWQtb2Zmc2V0IG5hbWUgb2YgdGhlIGZvcm0gJ1VUQyszJywgb3IgdGhlIHN0cmluZ3MgJ2xvY2FsJyBvciAndXRjJy4gWW91IG1heSBhbHNvIHN1cHBseSBhbiBpbnN0YW5jZSBvZiBhIHtAbGluayBEYXRlVGltZSNab25lfSBjbGFzcy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMua2VlcExvY2FsVGltZT1mYWxzZV0gLSBJZiB0cnVlLCBhZGp1c3QgdGhlIHVuZGVybHlpbmcgdGltZSBzbyB0aGF0IHRoZSBsb2NhbCB0aW1lIHN0YXlzIHRoZSBzYW1lLCBidXQgaW4gdGhlIHRhcmdldCB6b25lLiBZb3Ugc2hvdWxkIHJhcmVseSBuZWVkIHRoaXMuXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc2V0Wm9uZSh6b25lLCB7IGtlZXBMb2NhbFRpbWUgPSBmYWxzZSwga2VlcENhbGVuZGFyVGltZSA9IGZhbHNlIH0gPSB7fSkge1xuICAgIHpvbmUgPSBub3JtYWxpemVab25lKHpvbmUsIFNldHRpbmdzLmRlZmF1bHRab25lKTtcbiAgICBpZiAoem9uZS5lcXVhbHModGhpcy56b25lKSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIGlmICghem9uZS5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZCh1bnN1cHBvcnRlZFpvbmUoem9uZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgbmV3VFMgPSB0aGlzLnRzO1xuICAgICAgaWYgKGtlZXBMb2NhbFRpbWUgfHwga2VlcENhbGVuZGFyVGltZSkge1xuICAgICAgICBjb25zdCBvZmZzZXRHdWVzcyA9IHpvbmUub2Zmc2V0KHRoaXMudHMpO1xuICAgICAgICBjb25zdCBhc09iaiA9IHRoaXMudG9PYmplY3QoKTtcbiAgICAgICAgW25ld1RTXSA9IG9ialRvVFMoYXNPYmosIG9mZnNldEd1ZXNzLCB6b25lKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjbG9uZSh0aGlzLCB7IHRzOiBuZXdUUywgem9uZSB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogXCJTZXRcIiB0aGUgbG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG9yIG91dHB1dENhbGVuZGFyLiBSZXR1cm5zIGEgbmV3bHktY29uc3RydWN0ZWQgRGF0ZVRpbWUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzIC0gdGhlIHByb3BlcnRpZXMgdG8gc2V0XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS5yZWNvbmZpZ3VyZSh7IGxvY2FsZTogJ2VuLUdCJyB9KVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHJlY29uZmlndXJlKHsgbG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyIH0gPSB7fSkge1xuICAgIGNvbnN0IGxvYyA9IHRoaXMubG9jLmNsb25lKHsgbG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyIH0pO1xuICAgIHJldHVybiBjbG9uZSh0aGlzLCB7IGxvYyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSBsb2NhbGUuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS5cbiAgICogSnVzdCBhIGNvbnZlbmllbnQgYWxpYXMgZm9yIHJlY29uZmlndXJlKHsgbG9jYWxlIH0pXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS5zZXRMb2NhbGUoJ2VuLUdCJylcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICBzZXRMb2NhbGUobG9jYWxlKSB7XG4gICAgcmV0dXJuIHRoaXMucmVjb25maWd1cmUoeyBsb2NhbGUgfSk7XG4gIH1cblxuICAvKipcbiAgICogXCJTZXRcIiB0aGUgdmFsdWVzIG9mIHNwZWNpZmllZCB1bml0cy4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIERhdGVUaW1lLlxuICAgKiBZb3UgY2FuIG9ubHkgc2V0IHVuaXRzIHdpdGggdGhpcyBtZXRob2Q7IGZvciBcInNldHRpbmdcIiBtZXRhZGF0YSwgc2VlIHtAbGluayBEYXRlVGltZSNyZWNvbmZpZ3VyZX0gYW5kIHtAbGluayBEYXRlVGltZSNzZXRab25lfS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgYWxzbyBzdXBwb3J0cyBzZXR0aW5nIGxvY2FsZS1iYXNlZCB3ZWVrIHVuaXRzLCBpLmUuIGBsb2NhbFdlZWtkYXlgLCBgbG9jYWxXZWVrTnVtYmVyYCBhbmQgYGxvY2FsV2Vla1llYXJgLlxuICAgKiBUaGV5IGNhbm5vdCBiZSBtaXhlZCB3aXRoIElTTy13ZWVrIHVuaXRzIGxpa2UgYHdlZWtkYXlgLlxuICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWVzIC0gYSBtYXBwaW5nIG9mIHVuaXRzIHRvIG51bWJlcnNcbiAgICogQGV4YW1wbGUgZHQuc2V0KHsgeWVhcjogMjAxNyB9KVxuICAgKiBAZXhhbXBsZSBkdC5zZXQoeyBob3VyOiA4LCBtaW51dGU6IDMwIH0pXG4gICAqIEBleGFtcGxlIGR0LnNldCh7IHdlZWtkYXk6IDUgfSlcbiAgICogQGV4YW1wbGUgZHQuc2V0KHsgeWVhcjogMjAwNSwgb3JkaW5hbDogMjM0IH0pXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc2V0KHZhbHVlcykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcblxuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVPYmplY3QodmFsdWVzLCBub3JtYWxpemVVbml0V2l0aExvY2FsV2Vla3MpO1xuICAgIGNvbnN0IHsgbWluRGF5c0luRmlyc3RXZWVrLCBzdGFydE9mV2VlayB9ID0gdXNlc0xvY2FsV2Vla1ZhbHVlcyhub3JtYWxpemVkLCB0aGlzLmxvYyk7XG5cbiAgICBjb25zdCBzZXR0aW5nV2Vla1N0dWZmID1cbiAgICAgICAgIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQud2Vla1llYXIpIHx8XG4gICAgICAgICFpc1VuZGVmaW5lZChub3JtYWxpemVkLndlZWtOdW1iZXIpIHx8XG4gICAgICAgICFpc1VuZGVmaW5lZChub3JtYWxpemVkLndlZWtkYXkpLFxuICAgICAgY29udGFpbnNPcmRpbmFsID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQub3JkaW5hbCksXG4gICAgICBjb250YWluc0dyZWdvclllYXIgPSAhaXNVbmRlZmluZWQobm9ybWFsaXplZC55ZWFyKSxcbiAgICAgIGNvbnRhaW5zR3JlZ29yTUQgPSAhaXNVbmRlZmluZWQobm9ybWFsaXplZC5tb250aCkgfHwgIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQuZGF5KSxcbiAgICAgIGNvbnRhaW5zR3JlZ29yID0gY29udGFpbnNHcmVnb3JZZWFyIHx8IGNvbnRhaW5zR3JlZ29yTUQsXG4gICAgICBkZWZpbml0ZVdlZWtEZWYgPSBub3JtYWxpemVkLndlZWtZZWFyIHx8IG5vcm1hbGl6ZWQud2Vla051bWJlcjtcblxuICAgIGlmICgoY29udGFpbnNHcmVnb3IgfHwgY29udGFpbnNPcmRpbmFsKSAmJiBkZWZpbml0ZVdlZWtEZWYpIHtcbiAgICAgIHRocm93IG5ldyBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvcihcbiAgICAgICAgXCJDYW4ndCBtaXggd2Vla1llYXIvd2Vla051bWJlciB1bml0cyB3aXRoIHllYXIvbW9udGgvZGF5IG9yIG9yZGluYWxzXCJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRhaW5zR3JlZ29yTUQgJiYgY29udGFpbnNPcmRpbmFsKSB7XG4gICAgICB0aHJvdyBuZXcgQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IoXCJDYW4ndCBtaXggb3JkaW5hbCBkYXRlcyB3aXRoIG1vbnRoL2RheVwiKTtcbiAgICB9XG5cbiAgICBsZXQgbWl4ZWQ7XG4gICAgaWYgKHNldHRpbmdXZWVrU3R1ZmYpIHtcbiAgICAgIG1peGVkID0gd2Vla1RvR3JlZ29yaWFuKFxuICAgICAgICB7IC4uLmdyZWdvcmlhblRvV2Vlayh0aGlzLmMsIG1pbkRheXNJbkZpcnN0V2Vlaywgc3RhcnRPZldlZWspLCAuLi5ub3JtYWxpemVkIH0sXG4gICAgICAgIG1pbkRheXNJbkZpcnN0V2VlayxcbiAgICAgICAgc3RhcnRPZldlZWtcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICghaXNVbmRlZmluZWQobm9ybWFsaXplZC5vcmRpbmFsKSkge1xuICAgICAgbWl4ZWQgPSBvcmRpbmFsVG9HcmVnb3JpYW4oeyAuLi5ncmVnb3JpYW5Ub09yZGluYWwodGhpcy5jKSwgLi4ubm9ybWFsaXplZCB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWl4ZWQgPSB7IC4uLnRoaXMudG9PYmplY3QoKSwgLi4ubm9ybWFsaXplZCB9O1xuXG4gICAgICAvLyBpZiB3ZSBkaWRuJ3Qgc2V0IHRoZSBkYXkgYnV0IHdlIGVuZGVkIHVwIG9uIGFuIG92ZXJmbG93IGRhdGUsXG4gICAgICAvLyB1c2UgdGhlIGxhc3QgZGF5IG9mIHRoZSByaWdodCBtb250aFxuICAgICAgaWYgKGlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQuZGF5KSkge1xuICAgICAgICBtaXhlZC5kYXkgPSBNYXRoLm1pbihkYXlzSW5Nb250aChtaXhlZC55ZWFyLCBtaXhlZC5tb250aCksIG1peGVkLmRheSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgW3RzLCBvXSA9IG9ialRvVFMobWl4ZWQsIHRoaXMubywgdGhpcy56b25lKTtcbiAgICByZXR1cm4gY2xvbmUodGhpcywgeyB0cywgbyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBwZXJpb2Qgb2YgdGltZSB0byB0aGlzIERhdGVUaW1lIGFuZCByZXR1cm4gdGhlIHJlc3VsdGluZyBEYXRlVGltZVxuICAgKlxuICAgKiBBZGRpbmcgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIG9yIG1pbGxpc2Vjb25kcyBpbmNyZWFzZXMgdGhlIHRpbWVzdGFtcCBieSB0aGUgcmlnaHQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcy4gQWRkaW5nIGRheXMsIG1vbnRocywgb3IgeWVhcnMgc2hpZnRzIHRoZSBjYWxlbmRhciwgYWNjb3VudGluZyBmb3IgRFNUcyBhbmQgbGVhcCB5ZWFycyBhbG9uZyB0aGUgd2F5LiBUaHVzLCBgZHQucGx1cyh7IGhvdXJzOiAyNCB9KWAgbWF5IHJlc3VsdCBpbiBhIGRpZmZlcmVudCB0aW1lIHRoYW4gYGR0LnBsdXMoeyBkYXlzOiAxIH0pYCBpZiB0aGVyZSdzIGEgRFNUIHNoaWZ0IGluIGJldHdlZW4uXG4gICAqIEBwYXJhbSB7RHVyYXRpb258T2JqZWN0fG51bWJlcn0gZHVyYXRpb24gLSBUaGUgYW1vdW50IHRvIGFkZC4gRWl0aGVyIGEgTHV4b24gRHVyYXRpb24sIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgdGhlIG9iamVjdCBhcmd1bWVudCB0byBEdXJhdGlvbi5mcm9tT2JqZWN0KClcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cygxMjMpIC8vfj4gaW4gMTIzIG1pbGxpc2Vjb25kc1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKHsgbWludXRlczogMTUgfSkgLy9+PiBpbiAxNSBtaW51dGVzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnBsdXMoeyBkYXlzOiAxIH0pIC8vfj4gdGhpcyB0aW1lIHRvbW9ycm93XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnBsdXMoeyBkYXlzOiAtMSB9KSAvL34+IHRoaXMgdGltZSB5ZXN0ZXJkYXlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyh7IGhvdXJzOiAzLCBtaW51dGVzOiAxMyB9KSAvL34+IGluIDMgaHIsIDEzIG1pblxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMywgbWludXRlczogMTMgfSkpIC8vfj4gaW4gMyBociwgMTMgbWluXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgcGx1cyhkdXJhdGlvbikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCBkdXIgPSBEdXJhdGlvbi5mcm9tRHVyYXRpb25MaWtlKGR1cmF0aW9uKTtcbiAgICByZXR1cm4gY2xvbmUodGhpcywgYWRqdXN0VGltZSh0aGlzLCBkdXIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJ0cmFjdCBhIHBlcmlvZCBvZiB0aW1lIHRvIHRoaXMgRGF0ZVRpbWUgYW5kIHJldHVybiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lXG4gICAqIFNlZSB7QGxpbmsgRGF0ZVRpbWUjcGx1c31cbiAgICogQHBhcmFtIHtEdXJhdGlvbnxPYmplY3R8bnVtYmVyfSBkdXJhdGlvbiAtIFRoZSBhbW91bnQgdG8gc3VidHJhY3QuIEVpdGhlciBhIEx1eG9uIER1cmF0aW9uLCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIHRoZSBvYmplY3QgYXJndW1lbnQgdG8gRHVyYXRpb24uZnJvbU9iamVjdCgpXG4gICBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIG1pbnVzKGR1cmF0aW9uKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pLm5lZ2F0ZSgpO1xuICAgIHJldHVybiBjbG9uZSh0aGlzLCBhZGp1c3RUaW1lKHRoaXMsIGR1cikpO1xuICB9XG5cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhpcyBEYXRlVGltZSB0byB0aGUgYmVnaW5uaW5nIG9mIGEgdW5pdCBvZiB0aW1lLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIFRoZSB1bml0IHRvIGdvIHRvIHRoZSBiZWdpbm5pbmcgb2YuIENhbiBiZSAneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcsIG9yICdtaWxsaXNlY29uZCcuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnVzZUxvY2FsZVdlZWtzPWZhbHNlXSAtIElmIHRydWUsIHVzZSB3ZWVrcyBiYXNlZCBvbiB0aGUgbG9jYWxlLCBpLmUuIHVzZSB0aGUgbG9jYWxlLWRlcGVuZGVudCBzdGFydCBvZiB0aGUgd2Vla1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzKS5zdGFydE9mKCdtb250aCcpLnRvSVNPRGF0ZSgpOyAvLz0+ICcyMDE0LTAzLTAxJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzKS5zdGFydE9mKCd5ZWFyJykudG9JU09EYXRlKCk7IC8vPT4gJzIwMTQtMDEtMDEnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMpLnN0YXJ0T2YoJ3dlZWsnKS50b0lTT0RhdGUoKTsgLy89PiAnMjAxNC0wMy0wMycsIHdlZWtzIGFsd2F5cyBzdGFydCBvbiBNb25kYXlzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMsIDUsIDMwKS5zdGFydE9mKCdkYXknKS50b0lTT1RpbWUoKTsgLy89PiAnMDA6MDAuMDAwLTA1OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzLCA1LCAzMCkuc3RhcnRPZignaG91cicpLnRvSVNPVGltZSgpOyAvLz0+ICcwNTowMDowMC4wMDAtMDU6MDAnXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhcnRPZih1bml0LCB7IHVzZUxvY2FsZVdlZWtzID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuXG4gICAgY29uc3QgbyA9IHt9LFxuICAgICAgbm9ybWFsaXplZFVuaXQgPSBEdXJhdGlvbi5ub3JtYWxpemVVbml0KHVuaXQpO1xuICAgIHN3aXRjaCAobm9ybWFsaXplZFVuaXQpIHtcbiAgICAgIGNhc2UgXCJ5ZWFyc1wiOlxuICAgICAgICBvLm1vbnRoID0gMTtcbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgIGNhc2UgXCJxdWFydGVyc1wiOlxuICAgICAgY2FzZSBcIm1vbnRoc1wiOlxuICAgICAgICBvLmRheSA9IDE7XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICBjYXNlIFwid2Vla3NcIjpcbiAgICAgIGNhc2UgXCJkYXlzXCI6XG4gICAgICAgIG8uaG91ciA9IDA7XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICBjYXNlIFwiaG91cnNcIjpcbiAgICAgICAgby5taW51dGUgPSAwO1xuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgY2FzZSBcIm1pbnV0ZXNcIjpcbiAgICAgICAgby5zZWNvbmQgPSAwO1xuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgY2FzZSBcInNlY29uZHNcIjpcbiAgICAgICAgby5taWxsaXNlY29uZCA9IDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm1pbGxpc2Vjb25kc1wiOlxuICAgICAgICBicmVhaztcbiAgICAgIC8vIG5vIGRlZmF1bHQsIGludmFsaWQgdW5pdHMgdGhyb3cgaW4gbm9ybWFsaXplVW5pdCgpXG4gICAgfVxuXG4gICAgaWYgKG5vcm1hbGl6ZWRVbml0ID09PSBcIndlZWtzXCIpIHtcbiAgICAgIGlmICh1c2VMb2NhbGVXZWVrcykge1xuICAgICAgICBjb25zdCBzdGFydE9mV2VlayA9IHRoaXMubG9jLmdldFN0YXJ0T2ZXZWVrKCk7XG4gICAgICAgIGNvbnN0IHsgd2Vla2RheSB9ID0gdGhpcztcbiAgICAgICAgaWYgKHdlZWtkYXkgPCBzdGFydE9mV2Vlaykge1xuICAgICAgICAgIG8ud2Vla051bWJlciA9IHRoaXMud2Vla051bWJlciAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgby53ZWVrZGF5ID0gc3RhcnRPZldlZWs7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvLndlZWtkYXkgPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChub3JtYWxpemVkVW5pdCA9PT0gXCJxdWFydGVyc1wiKSB7XG4gICAgICBjb25zdCBxID0gTWF0aC5jZWlsKHRoaXMubW9udGggLyAzKTtcbiAgICAgIG8ubW9udGggPSAocSAtIDEpICogMyArIDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc2V0KG8pO1xuICB9XG5cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhpcyBEYXRlVGltZSB0byB0aGUgZW5kIChtZWFuaW5nIHRoZSBsYXN0IG1pbGxpc2Vjb25kKSBvZiBhIHVuaXQgb2YgdGltZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIFRoZSB1bml0IHRvIGdvIHRvIHRoZSBlbmQgb2YuIENhbiBiZSAneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcsIG9yICdtaWxsaXNlY29uZCcuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnVzZUxvY2FsZVdlZWtzPWZhbHNlXSAtIElmIHRydWUsIHVzZSB3ZWVrcyBiYXNlZCBvbiB0aGUgbG9jYWxlLCBpLmUuIHVzZSB0aGUgbG9jYWxlLWRlcGVuZGVudCBzdGFydCBvZiB0aGUgd2Vla1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzKS5lbmRPZignbW9udGgnKS50b0lTTygpOyAvLz0+ICcyMDE0LTAzLTMxVDIzOjU5OjU5Ljk5OS0wNTowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMykuZW5kT2YoJ3llYXInKS50b0lTTygpOyAvLz0+ICcyMDE0LTEyLTMxVDIzOjU5OjU5Ljk5OS0wNTowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMykuZW5kT2YoJ3dlZWsnKS50b0lTTygpOyAvLyA9PiAnMjAxNC0wMy0wOVQyMzo1OTo1OS45OTktMDU6MDAnLCB3ZWVrcyBzdGFydCBvbiBNb25kYXlzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMsIDUsIDMwKS5lbmRPZignZGF5JykudG9JU08oKTsgLy89PiAnMjAxNC0wMy0wM1QyMzo1OTo1OS45OTktMDU6MDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMsIDUsIDMwKS5lbmRPZignaG91cicpLnRvSVNPKCk7IC8vPT4gJzIwMTQtMDMtMDNUMDU6NTk6NTkuOTk5LTA1OjAwJ1xuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIGVuZE9mKHVuaXQsIG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkXG4gICAgICA/IHRoaXMucGx1cyh7IFt1bml0XTogMSB9KVxuICAgICAgICAgIC5zdGFydE9mKHVuaXQsIG9wdHMpXG4gICAgICAgICAgLm1pbnVzKDEpXG4gICAgICA6IHRoaXM7XG4gIH1cblxuICAvLyBPVVRQVVRcblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lIGZvcm1hdHRlZCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBmb3JtYXQgc3RyaW5nLlxuICAgKiAqKllvdSBtYXkgbm90IHdhbnQgdGhpcy4qKiBTZWUge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3IgYSBtb3JlIGZsZXhpYmxlIGZvcm1hdHRpbmcgdG9vbC4gRm9yIGEgdGFibGUgb2YgdG9rZW5zIGFuZCB0aGVpciBpbnRlcnByZXRhdGlvbnMsIHNlZSBbaGVyZV0oaHR0cHM6Ly9tb21lbnQuZ2l0aHViLmlvL2x1eG9uLyMvZm9ybWF0dGluZz9pZD10YWJsZS1vZi10b2tlbnMpLlxuICAgKiBEZWZhdWx0cyB0byBlbi1VUyBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkLCByZWdhcmRsZXNzIG9mIHRoZSBzeXN0ZW0ncyBsb2NhbGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmbXQgLSB0aGUgZm9ybWF0IHN0cmluZ1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdHMgdG8gb3ZlcnJpZGUgdGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBvbiB0aGlzIERhdGVUaW1lXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvRm9ybWF0KCd5eXl5IExMTCBkZCcpIC8vPT4gJzIwMTcgQXByIDIyJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5zZXRMb2NhbGUoJ2ZyJykudG9Gb3JtYXQoJ3l5eXkgTExMIGRkJykgLy89PiAnMjAxNyBhdnIuIDIyJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0Zvcm1hdCgneXl5eSBMTEwgZGQnLCB7IGxvY2FsZTogXCJmclwiIH0pIC8vPT4gJzIwMTcgYXZyLiAyMidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Gb3JtYXQoXCJISCAnaG91cnMgYW5kJyBtbSAnbWludXRlcydcIikgLy89PiAnMjAgaG91cnMgYW5kIDU1IG1pbnV0ZXMnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvRm9ybWF0KGZtdCwgb3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZFxuICAgICAgPyBGb3JtYXR0ZXIuY3JlYXRlKHRoaXMubG9jLnJlZGVmYXVsdFRvRU4ob3B0cykpLmZvcm1hdERhdGVUaW1lRnJvbVN0cmluZyh0aGlzLCBmbXQpXG4gICAgICA6IElOVkFMSUQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGxvY2FsaXplZCBzdHJpbmcgcmVwcmVzZW50aW5nIHRoaXMgZGF0ZS4gQWNjZXB0cyB0aGUgc2FtZSBvcHRpb25zIGFzIHRoZSBJbnRsLkRhdGVUaW1lRm9ybWF0IGNvbnN0cnVjdG9yIGFuZCBhbnkgcHJlc2V0cyBkZWZpbmVkIGJ5IEx1eG9uLCBzdWNoIGFzIGBEYXRlVGltZS5EQVRFX0ZVTExgIG9yIGBEYXRlVGltZS5USU1FX1NJTVBMRWAuXG4gICAqIFRoZSBleGFjdCBiZWhhdmlvciBvZiB0aGlzIG1ldGhvZCBpcyBicm93c2VyLXNwZWNpZmljLCBidXQgaW4gZ2VuZXJhbCBpdCB3aWxsIHJldHVybiBhbiBhcHByb3ByaWF0ZSByZXByZXNlbnRhdGlvblxuICAgKiBvZiB0aGUgRGF0ZVRpbWUgaW4gdGhlIGFzc2lnbmVkIGxvY2FsZS5cbiAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRGF0ZVRpbWVGb3JtYXRcbiAgICogQHBhcmFtIGZvcm1hdE9wdHMge09iamVjdH0gLSBJbnRsLkRhdGVUaW1lRm9ybWF0IGNvbnN0cnVjdG9yIG9wdGlvbnMgYW5kIGNvbmZpZ3VyYXRpb24gb3B0aW9uc1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdHMgdG8gb3ZlcnJpZGUgdGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBvbiB0aGlzIERhdGVUaW1lXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKCk7IC8vPT4gNC8yMC8yMDE3XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnNldExvY2FsZSgnZW4tZ2InKS50b0xvY2FsZVN0cmluZygpOyAvLz0+ICcyMC8wNC8yMDE3J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0xvY2FsZVN0cmluZyhEYXRlVGltZS5EQVRFX0ZVTEwpOyAvLz0+ICdBcHJpbCAyMCwgMjAxNydcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Mb2NhbGVTdHJpbmcoRGF0ZVRpbWUuREFURV9GVUxMLCB7IGxvY2FsZTogJ2ZyJyB9KTsgLy89PiAnMjggYW9cdTAwRkJ0IDIwMjInXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLlRJTUVfU0lNUExFKTsgLy89PiAnMTE6MzIgQU0nXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLkRBVEVUSU1FX1NIT1JUKTsgLy89PiAnNC8yMC8yMDE3LCAxMTozMiBBTSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9Mb2NhbGVTdHJpbmcoeyB3ZWVrZGF5OiAnbG9uZycsIG1vbnRoOiAnbG9uZycsIGRheTogJzItZGlnaXQnIH0pOyAvLz0+ICdUaHVyc2RheSwgQXByaWwgMjAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKHsgd2Vla2RheTogJ3Nob3J0JywgbW9udGg6ICdzaG9ydCcsIGRheTogJzItZGlnaXQnLCBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pOyAvLz0+ICdUaHUsIEFwciAyMCwgMTE6MjcgQU0nXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvTG9jYWxlU3RyaW5nKHsgaG91cjogJzItZGlnaXQnLCBtaW51dGU6ICcyLWRpZ2l0JywgaG91ckN5Y2xlOiAnaDIzJyB9KTsgLy89PiAnMTE6MzInXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvTG9jYWxlU3RyaW5nKGZvcm1hdE9wdHMgPSBGb3JtYXRzLkRBVEVfU0hPUlQsIG9wdHMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWRcbiAgICAgID8gRm9ybWF0dGVyLmNyZWF0ZSh0aGlzLmxvYy5jbG9uZShvcHRzKSwgZm9ybWF0T3B0cykuZm9ybWF0RGF0ZVRpbWUodGhpcylcbiAgICAgIDogSU5WQUxJRDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGZvcm1hdCBcInBhcnRzXCIsIG1lYW5pbmcgaW5kaXZpZHVhbCB0b2tlbnMgYWxvbmcgd2l0aCBtZXRhZGF0YS4gVGhpcyBpcyBhbGxvd3MgY2FsbGVycyB0byBwb3N0LXByb2Nlc3MgaW5kaXZpZHVhbCBzZWN0aW9ucyBvZiB0aGUgZm9ybWF0dGVkIG91dHB1dC5cbiAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRGF0ZVRpbWVGb3JtYXQvZm9ybWF0VG9QYXJ0c1xuICAgKiBAcGFyYW0gb3B0cyB7T2JqZWN0fSAtIEludGwuRGF0ZVRpbWVGb3JtYXQgY29uc3RydWN0b3Igb3B0aW9ucywgc2FtZSBhcyBgdG9Mb2NhbGVTdHJpbmdgLlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0xvY2FsZVBhcnRzKCk7IC8vPT4gW1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy89PiAgIHsgdHlwZTogJ2RheScsIHZhbHVlOiAnMjUnIH0sXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLz0+ICAgeyB0eXBlOiAnbGl0ZXJhbCcsIHZhbHVlOiAnLycgfSxcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vPT4gICB7IHR5cGU6ICdtb250aCcsIHZhbHVlOiAnMDUnIH0sXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLz0+ICAgeyB0eXBlOiAnbGl0ZXJhbCcsIHZhbHVlOiAnLycgfSxcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vPT4gICB7IHR5cGU6ICd5ZWFyJywgdmFsdWU6ICcxOTgyJyB9XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLz0+IF1cbiAgICovXG4gIHRvTG9jYWxlUGFydHMob3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZFxuICAgICAgPyBGb3JtYXR0ZXIuY3JlYXRlKHRoaXMubG9jLmNsb25lKG9wdHMpLCBvcHRzKS5mb3JtYXREYXRlVGltZVBhcnRzKHRoaXMpXG4gICAgICA6IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnN1cHByZXNzTWlsbGlzZWNvbmRzPWZhbHNlXSAtIGV4Y2x1ZGUgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGZvcm1hdCBpZiB0aGV5J3JlIDBcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zdXBwcmVzc1NlY29uZHM9ZmFsc2VdIC0gZXhjbHVkZSBzZWNvbmRzIGZyb20gdGhlIGZvcm1hdCBpZiB0aGV5J3JlIDBcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlT2Zmc2V0PXRydWVdIC0gaW5jbHVkZSB0aGUgb2Zmc2V0LCBzdWNoIGFzICdaJyBvciAnLTA0OjAwJ1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmV4dGVuZGVkWm9uZT1mYWxzZV0gLSBhZGQgdGhlIHRpbWUgem9uZSBmb3JtYXQgZXh0ZW5zaW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5mb3JtYXQ9J2V4dGVuZGVkJ10gLSBjaG9vc2UgYmV0d2VlbiB0aGUgYmFzaWMgYW5kIGV4dGVuZGVkIGZvcm1hdFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMTk4MywgNSwgMjUpLnRvSVNPKCkgLy89PiAnMTk4Mi0wNS0yNVQwMDowMDowMC4wMDBaJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0lTTygpIC8vPT4gJzIwMTctMDQtMjJUMjA6NDc6MDUuMzM1LTA0OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0lTTyh7IGluY2x1ZGVPZmZzZXQ6IGZhbHNlIH0pIC8vPT4gJzIwMTctMDQtMjJUMjA6NDc6MDUuMzM1J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b0lTTyh7IGZvcm1hdDogJ2Jhc2ljJyB9KSAvLz0+ICcyMDE3MDQyMlQyMDQ3MDUuMzM1LTA0MDAnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvSVNPKHtcbiAgICBmb3JtYXQgPSBcImV4dGVuZGVkXCIsXG4gICAgc3VwcHJlc3NTZWNvbmRzID0gZmFsc2UsXG4gICAgc3VwcHJlc3NNaWxsaXNlY29uZHMgPSBmYWxzZSxcbiAgICBpbmNsdWRlT2Zmc2V0ID0gdHJ1ZSxcbiAgICBleHRlbmRlZFpvbmUgPSBmYWxzZSxcbiAgfSA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGV4dCA9IGZvcm1hdCA9PT0gXCJleHRlbmRlZFwiO1xuXG4gICAgbGV0IGMgPSB0b0lTT0RhdGUodGhpcywgZXh0KTtcbiAgICBjICs9IFwiVFwiO1xuICAgIGMgKz0gdG9JU09UaW1lKHRoaXMsIGV4dCwgc3VwcHJlc3NTZWNvbmRzLCBzdXBwcmVzc01pbGxpc2Vjb25kcywgaW5jbHVkZU9mZnNldCwgZXh0ZW5kZWRab25lKTtcbiAgICByZXR1cm4gYztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSdzIGRhdGUgY29tcG9uZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuZm9ybWF0PSdleHRlbmRlZCddIC0gY2hvb3NlIGJldHdlZW4gdGhlIGJhc2ljIGFuZCBleHRlbmRlZCBmb3JtYXRcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDE5ODIsIDUsIDI1KS50b0lTT0RhdGUoKSAvLz0+ICcxOTgyLTA1LTI1J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMTk4MiwgNSwgMjUpLnRvSVNPRGF0ZSh7IGZvcm1hdDogJ2Jhc2ljJyB9KSAvLz0+ICcxOTgyMDUyNSdcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9JU09EYXRlKHsgZm9ybWF0ID0gXCJleHRlbmRlZFwiIH0gPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdG9JU09EYXRlKHRoaXMsIGZvcm1hdCA9PT0gXCJleHRlbmRlZFwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSdzIHdlZWsgZGF0ZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMTk4MiwgNSwgMjUpLnRvSVNPV2Vla0RhdGUoKSAvLz0+ICcxOTgyLVcyMS0yJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0lTT1dlZWtEYXRlKCkge1xuICAgIHJldHVybiB0b1RlY2hGb3JtYXQodGhpcywgXCJra2trLSdXJ1dXLWNcIik7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUncyB0aW1lIGNvbXBvbmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zdXBwcmVzc01pbGxpc2Vjb25kcz1mYWxzZV0gLSBleGNsdWRlIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBmb3JtYXQgaWYgdGhleSdyZSAwXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc3VwcHJlc3NTZWNvbmRzPWZhbHNlXSAtIGV4Y2x1ZGUgc2Vjb25kcyBmcm9tIHRoZSBmb3JtYXQgaWYgdGhleSdyZSAwXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZU9mZnNldD10cnVlXSAtIGluY2x1ZGUgdGhlIG9mZnNldCwgc3VjaCBhcyAnWicgb3IgJy0wNDowMCdcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5leHRlbmRlZFpvbmU9dHJ1ZV0gLSBhZGQgdGhlIHRpbWUgem9uZSBmb3JtYXQgZXh0ZW5zaW9uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZVByZWZpeD1mYWxzZV0gLSBpbmNsdWRlIHRoZSBgVGAgcHJlZml4XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5mb3JtYXQ9J2V4dGVuZGVkJ10gLSBjaG9vc2UgYmV0d2VlbiB0aGUgYmFzaWMgYW5kIGV4dGVuZGVkIGZvcm1hdFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoKS5zZXQoeyBob3VyOiA3LCBtaW51dGU6IDM0IH0pLnRvSVNPVGltZSgpIC8vPT4gJzA3OjM0OjE5LjM2MVonXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygpLnNldCh7IGhvdXI6IDcsIG1pbnV0ZTogMzQsIHNlY29uZHM6IDAsIG1pbGxpc2Vjb25kczogMCB9KS50b0lTT1RpbWUoeyBzdXBwcmVzc1NlY29uZHM6IHRydWUgfSkgLy89PiAnMDc6MzRaJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoKS5zZXQoeyBob3VyOiA3LCBtaW51dGU6IDM0IH0pLnRvSVNPVGltZSh7IGZvcm1hdDogJ2Jhc2ljJyB9KSAvLz0+ICcwNzM0MTkuMzYxWidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkuc2V0KHsgaG91cjogNywgbWludXRlOiAzNCB9KS50b0lTT1RpbWUoeyBpbmNsdWRlUHJlZml4OiB0cnVlIH0pIC8vPT4gJ1QwNzozNDoxOS4zNjFaJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0lTT1RpbWUoe1xuICAgIHN1cHByZXNzTWlsbGlzZWNvbmRzID0gZmFsc2UsXG4gICAgc3VwcHJlc3NTZWNvbmRzID0gZmFsc2UsXG4gICAgaW5jbHVkZU9mZnNldCA9IHRydWUsXG4gICAgaW5jbHVkZVByZWZpeCA9IGZhbHNlLFxuICAgIGV4dGVuZGVkWm9uZSA9IGZhbHNlLFxuICAgIGZvcm1hdCA9IFwiZXh0ZW5kZWRcIixcbiAgfSA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGxldCBjID0gaW5jbHVkZVByZWZpeCA/IFwiVFwiIDogXCJcIjtcbiAgICByZXR1cm4gKFxuICAgICAgYyArXG4gICAgICB0b0lTT1RpbWUoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIGZvcm1hdCA9PT0gXCJleHRlbmRlZFwiLFxuICAgICAgICBzdXBwcmVzc1NlY29uZHMsXG4gICAgICAgIHN1cHByZXNzTWlsbGlzZWNvbmRzLFxuICAgICAgICBpbmNsdWRlT2Zmc2V0LFxuICAgICAgICBleHRlbmRlZFpvbmVcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gUkZDIDI4MjItY29tcGF0aWJsZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNCwgNywgMTMpLnRvUkZDMjgyMigpIC8vPT4gJ1N1biwgMTMgSnVsIDIwMTQgMDA6MDA6MDAgKzAwMDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDcsIDEzKS50b1JGQzI4MjIoKSAvLz0+ICdTdW4sIDEzIEp1bCAyMDE0IDAwOjAwOjAwIC0wNDAwJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b1JGQzI4MjIoKSB7XG4gICAgcmV0dXJuIHRvVGVjaEZvcm1hdCh0aGlzLCBcIkVFRSwgZGQgTExMIHl5eXkgSEg6bW06c3MgWlpaXCIsIGZhbHNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBIVFRQIGhlYWRlcnMuIFRoZSBvdXRwdXQgaXMgYWx3YXlzIGV4cHJlc3NlZCBpbiBHTVQuXG4gICAqIFNwZWNpZmljYWxseSwgdGhlIHN0cmluZyBjb25mb3JtcyB0byBSRkMgMTEyMy5cbiAgICogQHNlZSBodHRwczovL3d3dy53My5vcmcvUHJvdG9jb2xzL3JmYzI2MTYvcmZjMjYxNi1zZWMzLmh0bWwjc2VjMy4zLjFcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTQsIDcsIDEzKS50b0hUVFAoKSAvLz0+ICdTdW4sIDEzIEp1bCAyMDE0IDAwOjAwOjAwIEdNVCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTQsIDcsIDEzLCAxOSkudG9IVFRQKCkgLy89PiAnU3VuLCAxMyBKdWwgMjAxNCAxOTowMDowMCBHTVQnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvSFRUUCgpIHtcbiAgICByZXR1cm4gdG9UZWNoRm9ybWF0KHRoaXMudG9VVEMoKSwgXCJFRUUsIGRkIExMTCB5eXl5IEhIOm1tOnNzICdHTVQnXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIFNRTCBEYXRlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE0LCA3LCAxMykudG9TUUxEYXRlKCkgLy89PiAnMjAxNC0wNy0xMydcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9TUUxEYXRlKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRvSVNPRGF0ZSh0aGlzLCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBTUUwgVGltZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlWm9uZT1mYWxzZV0gLSBpbmNsdWRlIHRoZSB6b25lLCBzdWNoIGFzICdBbWVyaWNhL05ld19Zb3JrJy4gT3ZlcnJpZGVzIGluY2x1ZGVPZmZzZXQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZU9mZnNldD10cnVlXSAtIGluY2x1ZGUgdGhlIG9mZnNldCwgc3VjaCBhcyAnWicgb3IgJy0wNDowMCdcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlT2Zmc2V0U3BhY2U9dHJ1ZV0gLSBpbmNsdWRlIHRoZSBzcGFjZSBiZXR3ZWVuIHRoZSB0aW1lIGFuZCB0aGUgb2Zmc2V0LCBzdWNoIGFzICcwNToxNToxNi4zNDUgLTA0OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoKS50b1NRTCgpIC8vPT4gJzA1OjE1OjE2LjM0NSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9TUUwoKSAvLz0+ICcwNToxNToxNi4zNDUgLTA0OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS50b1NRTCh7IGluY2x1ZGVPZmZzZXQ6IGZhbHNlIH0pIC8vPT4gJzA1OjE1OjE2LjM0NSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkudG9TUUwoeyBpbmNsdWRlWm9uZTogZmFsc2UgfSkgLy89PiAnMDU6MTU6MTYuMzQ1IEFtZXJpY2EvTmV3X1lvcmsnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvU1FMVGltZSh7IGluY2x1ZGVPZmZzZXQgPSB0cnVlLCBpbmNsdWRlWm9uZSA9IGZhbHNlLCBpbmNsdWRlT2Zmc2V0U3BhY2UgPSB0cnVlIH0gPSB7fSkge1xuICAgIGxldCBmbXQgPSBcIkhIOm1tOnNzLlNTU1wiO1xuXG4gICAgaWYgKGluY2x1ZGVab25lIHx8IGluY2x1ZGVPZmZzZXQpIHtcbiAgICAgIGlmIChpbmNsdWRlT2Zmc2V0U3BhY2UpIHtcbiAgICAgICAgZm10ICs9IFwiIFwiO1xuICAgICAgfVxuICAgICAgaWYgKGluY2x1ZGVab25lKSB7XG4gICAgICAgIGZtdCArPSBcInpcIjtcbiAgICAgIH0gZWxzZSBpZiAoaW5jbHVkZU9mZnNldCkge1xuICAgICAgICBmbXQgKz0gXCJaWlwiO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0b1RlY2hGb3JtYXQodGhpcywgZm10LCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBTUUwgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZVpvbmU9ZmFsc2VdIC0gaW5jbHVkZSB0aGUgem9uZSwgc3VjaCBhcyAnQW1lcmljYS9OZXdfWW9yaycuIE92ZXJyaWRlcyBpbmNsdWRlT2Zmc2V0LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVPZmZzZXQ9dHJ1ZV0gLSBpbmNsdWRlIHRoZSBvZmZzZXQsIHN1Y2ggYXMgJ1onIG9yICctMDQ6MDAnXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZU9mZnNldFNwYWNlPXRydWVdIC0gaW5jbHVkZSB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgdGltZSBhbmQgdGhlIG9mZnNldCwgc3VjaCBhcyAnMDU6MTU6MTYuMzQ1IC0wNDowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTQsIDcsIDEzKS50b1NRTCgpIC8vPT4gJzIwMTQtMDctMTMgMDA6MDA6MDAuMDAwIFonXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDcsIDEzKS50b1NRTCgpIC8vPT4gJzIwMTQtMDctMTMgMDA6MDA6MDAuMDAwIC0wNDowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgNywgMTMpLnRvU1FMKHsgaW5jbHVkZU9mZnNldDogZmFsc2UgfSkgLy89PiAnMjAxNC0wNy0xMyAwMDowMDowMC4wMDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDcsIDEzKS50b1NRTCh7IGluY2x1ZGVab25lOiB0cnVlIH0pIC8vPT4gJzIwMTQtMDctMTMgMDA6MDA6MDAuMDAwIEFtZXJpY2EvTmV3X1lvcmsnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvU1FMKG9wdHMgPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYCR7dGhpcy50b1NRTERhdGUoKX0gJHt0aGlzLnRvU1FMVGltZShvcHRzKX1gO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBhcHByb3ByaWF0ZSBmb3IgZGVidWdnaW5nXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnRvSVNPKCkgOiBJTlZBTElEO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBhcHByb3ByaWF0ZSBmb3IgdGhlIFJFUEwuXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIFtTeW1ib2wuZm9yKFwibm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b21cIildKCkge1xuICAgIGlmICh0aGlzLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBgRGF0ZVRpbWUgeyB0czogJHt0aGlzLnRvSVNPKCl9LCB6b25lOiAke3RoaXMuem9uZS5uYW1lfSwgbG9jYWxlOiAke3RoaXMubG9jYWxlfSB9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGBEYXRlVGltZSB7IEludmFsaWQsIHJlYXNvbjogJHt0aGlzLmludmFsaWRSZWFzb259IH1gO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBlcG9jaCBtaWxsaXNlY29uZHMgb2YgdGhpcyBEYXRlVGltZS4gQWxpYXMgb2Yge0BsaW5rIERhdGVUaW1lI3RvTWlsbGlzfVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICB2YWx1ZU9mKCkge1xuICAgIHJldHVybiB0aGlzLnRvTWlsbGlzKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZXBvY2ggbWlsbGlzZWNvbmRzIG9mIHRoaXMgRGF0ZVRpbWUuXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHRvTWlsbGlzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnRzIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGVwb2NoIHNlY29uZHMgb2YgdGhpcyBEYXRlVGltZS5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgdG9TZWNvbmRzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnRzIC8gMTAwMCA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBlcG9jaCBzZWNvbmRzIChhcyBhIHdob2xlIG51bWJlcikgb2YgdGhpcyBEYXRlVGltZS5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgdG9Vbml4SW50ZWdlcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gTWF0aC5mbG9vcih0aGlzLnRzIC8gMTAwMCkgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gSlNPTi5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvSVNPKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIEJTT04gc2VyaWFsaXphYmxlIGVxdWl2YWxlbnQgdG8gdGhpcyBEYXRlVGltZS5cbiAgICogQHJldHVybiB7RGF0ZX1cbiAgICovXG4gIHRvQlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50b0pTRGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBKYXZhU2NyaXB0IG9iamVjdCB3aXRoIHRoaXMgRGF0ZVRpbWUncyB5ZWFyLCBtb250aCwgZGF5LCBhbmQgc28gb24uXG4gICAqIEBwYXJhbSBvcHRzIC0gb3B0aW9ucyBmb3IgZ2VuZXJhdGluZyB0aGUgb2JqZWN0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZUNvbmZpZz1mYWxzZV0gLSBpbmNsdWRlIGNvbmZpZ3VyYXRpb24gYXR0cmlidXRlcyBpbiB0aGUgb3V0cHV0XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnRvT2JqZWN0KCkgLy89PiB7IHllYXI6IDIwMTcsIG1vbnRoOiA0LCBkYXk6IDIyLCBob3VyOiAyMCwgbWludXRlOiA0OSwgc2Vjb25kOiA0MiwgbWlsbGlzZWNvbmQ6IDI2OCB9XG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIHRvT2JqZWN0KG9wdHMgPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4ge307XG5cbiAgICBjb25zdCBiYXNlID0geyAuLi50aGlzLmMgfTtcblxuICAgIGlmIChvcHRzLmluY2x1ZGVDb25maWcpIHtcbiAgICAgIGJhc2Uub3V0cHV0Q2FsZW5kYXIgPSB0aGlzLm91dHB1dENhbGVuZGFyO1xuICAgICAgYmFzZS5udW1iZXJpbmdTeXN0ZW0gPSB0aGlzLmxvYy5udW1iZXJpbmdTeXN0ZW07XG4gICAgICBiYXNlLmxvY2FsZSA9IHRoaXMubG9jLmxvY2FsZTtcbiAgICB9XG4gICAgcmV0dXJuIGJhc2U7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIEphdmFTY3JpcHQgRGF0ZSBlcXVpdmFsZW50IHRvIHRoaXMgRGF0ZVRpbWUuXG4gICAqIEByZXR1cm4ge0RhdGV9XG4gICAqL1xuICB0b0pTRGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IERhdGUodGhpcy5pc1ZhbGlkID8gdGhpcy50cyA6IE5hTik7XG4gIH1cblxuICAvLyBDT01QQVJFXG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHR3byBEYXRlVGltZXMgYXMgYSBEdXJhdGlvbi5cbiAgICogQHBhcmFtIHtEYXRlVGltZX0gb3RoZXJEYXRlVGltZSAtIHRoZSBEYXRlVGltZSB0byBjb21wYXJlIHRoaXMgb25lIHRvXG4gICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBbdW5pdD1bJ21pbGxpc2Vjb25kcyddXSAtIHRoZSB1bml0IG9yIGFycmF5IG9mIHVuaXRzIChzdWNoIGFzICdob3Vycycgb3IgJ2RheXMnKSB0byBpbmNsdWRlIGluIHRoZSBkdXJhdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRoYXQgYWZmZWN0IHRoZSBjcmVhdGlvbiBvZiB0aGUgRHVyYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmNvbnZlcnNpb25BY2N1cmFjeT0nY2FzdWFsJ10gLSB0aGUgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBpMSA9IERhdGVUaW1lLmZyb21JU08oJzE5ODItMDUtMjVUMDk6NDUnKSxcbiAgICogICAgIGkyID0gRGF0ZVRpbWUuZnJvbUlTTygnMTk4My0xMC0xNFQxMDozMCcpO1xuICAgKiBpMi5kaWZmKGkxKS50b09iamVjdCgpIC8vPT4geyBtaWxsaXNlY29uZHM6IDQzODA3NTAwMDAwIH1cbiAgICogaTIuZGlmZihpMSwgJ2hvdXJzJykudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDEyMTY4Ljc1IH1cbiAgICogaTIuZGlmZihpMSwgWydtb250aHMnLCAnZGF5cyddKS50b09iamVjdCgpIC8vPT4geyBtb250aHM6IDE2LCBkYXlzOiAxOS4wMzEyNSB9XG4gICAqIGkyLmRpZmYoaTEsIFsnbW9udGhzJywgJ2RheXMnLCAnaG91cnMnXSkudG9PYmplY3QoKSAvLz0+IHsgbW9udGhzOiAxNiwgZGF5czogMTksIGhvdXJzOiAwLjc1IH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBkaWZmKG90aGVyRGF0ZVRpbWUsIHVuaXQgPSBcIm1pbGxpc2Vjb25kc1wiLCBvcHRzID0ge30pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCB8fCAhb3RoZXJEYXRlVGltZS5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uaW52YWxpZChcImNyZWF0ZWQgYnkgZGlmZmluZyBhbiBpbnZhbGlkIERhdGVUaW1lXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGR1ck9wdHMgPSB7IGxvY2FsZTogdGhpcy5sb2NhbGUsIG51bWJlcmluZ1N5c3RlbTogdGhpcy5udW1iZXJpbmdTeXN0ZW0sIC4uLm9wdHMgfTtcblxuICAgIGNvbnN0IHVuaXRzID0gbWF5YmVBcnJheSh1bml0KS5tYXAoRHVyYXRpb24ubm9ybWFsaXplVW5pdCksXG4gICAgICBvdGhlcklzTGF0ZXIgPSBvdGhlckRhdGVUaW1lLnZhbHVlT2YoKSA+IHRoaXMudmFsdWVPZigpLFxuICAgICAgZWFybGllciA9IG90aGVySXNMYXRlciA/IHRoaXMgOiBvdGhlckRhdGVUaW1lLFxuICAgICAgbGF0ZXIgPSBvdGhlcklzTGF0ZXIgPyBvdGhlckRhdGVUaW1lIDogdGhpcyxcbiAgICAgIGRpZmZlZCA9IGRpZmYoZWFybGllciwgbGF0ZXIsIHVuaXRzLCBkdXJPcHRzKTtcblxuICAgIHJldHVybiBvdGhlcklzTGF0ZXIgPyBkaWZmZWQubmVnYXRlKCkgOiBkaWZmZWQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhpcyBEYXRlVGltZSBhbmQgcmlnaHQgbm93LlxuICAgKiBTZWUge0BsaW5rIERhdGVUaW1lI2RpZmZ9XG4gICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBbdW5pdD1bJ21pbGxpc2Vjb25kcyddXSAtIHRoZSB1bml0IG9yIHVuaXRzIHVuaXRzIChzdWNoIGFzICdob3Vycycgb3IgJ2RheXMnKSB0byBpbmNsdWRlIGluIHRoZSBkdXJhdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdGhhdCBhZmZlY3QgdGhlIGNyZWF0aW9uIG9mIHRoZSBEdXJhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBkaWZmTm93KHVuaXQgPSBcIm1pbGxpc2Vjb25kc1wiLCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5kaWZmKERhdGVUaW1lLm5vdygpLCB1bml0LCBvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gSW50ZXJ2YWwgc3Bhbm5pbmcgYmV0d2VlbiB0aGlzIERhdGVUaW1lIGFuZCBhbm90aGVyIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IG90aGVyRGF0ZVRpbWUgLSB0aGUgb3RoZXIgZW5kIHBvaW50IG9mIHRoZSBJbnRlcnZhbFxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG4gIHVudGlsKG90aGVyRGF0ZVRpbWUpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyh0aGlzLCBvdGhlckRhdGVUaW1lKSA6IHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBEYXRlVGltZSBpcyBpbiB0aGUgc2FtZSB1bml0IG9mIHRpbWUgYXMgYW5vdGhlciBEYXRlVGltZS5cbiAgICogSGlnaGVyLW9yZGVyIHVuaXRzIG11c3QgYWxzbyBiZSBpZGVudGljYWwgZm9yIHRoaXMgZnVuY3Rpb24gdG8gcmV0dXJuIGB0cnVlYC5cbiAgICogTm90ZSB0aGF0IHRpbWUgem9uZXMgYXJlICoqaWdub3JlZCoqIGluIHRoaXMgY29tcGFyaXNvbiwgd2hpY2ggY29tcGFyZXMgdGhlICoqbG9jYWwqKiBjYWxlbmRhciB0aW1lLiBVc2Uge0BsaW5rIERhdGVUaW1lI3NldFpvbmV9IHRvIGNvbnZlcnQgb25lIG9mIHRoZSBkYXRlcyBpZiBuZWVkZWQuXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IG90aGVyRGF0ZVRpbWUgLSB0aGUgb3RoZXIgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSB0aGUgdW5pdCBvZiB0aW1lIHRvIGNoZWNrIHNhbWVuZXNzIG9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnVzZUxvY2FsZVdlZWtzPWZhbHNlXSAtIElmIHRydWUsIHVzZSB3ZWVrcyBiYXNlZCBvbiB0aGUgbG9jYWxlLCBpLmUuIHVzZSB0aGUgbG9jYWxlLWRlcGVuZGVudCBzdGFydCBvZiB0aGUgd2Vlazsgb25seSB0aGUgbG9jYWxlIG9mIHRoaXMgRGF0ZVRpbWUgaXMgdXNlZFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5oYXNTYW1lKG90aGVyRFQsICdkYXknKTsgLy9+PiB0cnVlIGlmIG90aGVyRFQgaXMgaW4gdGhlIHNhbWUgY3VycmVudCBjYWxlbmRhciBkYXlcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGhhc1NhbWUob3RoZXJEYXRlVGltZSwgdW5pdCwgb3B0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gZmFsc2U7XG5cbiAgICBjb25zdCBpbnB1dE1zID0gb3RoZXJEYXRlVGltZS52YWx1ZU9mKCk7XG4gICAgY29uc3QgYWRqdXN0ZWRUb1pvbmUgPSB0aGlzLnNldFpvbmUob3RoZXJEYXRlVGltZS56b25lLCB7IGtlZXBMb2NhbFRpbWU6IHRydWUgfSk7XG4gICAgcmV0dXJuIChcbiAgICAgIGFkanVzdGVkVG9ab25lLnN0YXJ0T2YodW5pdCwgb3B0cykgPD0gaW5wdXRNcyAmJiBpbnB1dE1zIDw9IGFkanVzdGVkVG9ab25lLmVuZE9mKHVuaXQsIG9wdHMpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFcXVhbGl0eSBjaGVja1xuICAgKiBUd28gRGF0ZVRpbWVzIGFyZSBlcXVhbCBpZiBhbmQgb25seSBpZiB0aGV5IHJlcHJlc2VudCB0aGUgc2FtZSBtaWxsaXNlY29uZCwgaGF2ZSB0aGUgc2FtZSB6b25lIGFuZCBsb2NhdGlvbiwgYW5kIGFyZSBib3RoIHZhbGlkLlxuICAgKiBUbyBjb21wYXJlIGp1c3QgdGhlIG1pbGxpc2Vjb25kIHZhbHVlcywgdXNlIGArZHQxID09PSArZHQyYC5cbiAgICogQHBhcmFtIHtEYXRlVGltZX0gb3RoZXIgLSB0aGUgb3RoZXIgRGF0ZVRpbWVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGVxdWFscyhvdGhlcikge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmlzVmFsaWQgJiZcbiAgICAgIG90aGVyLmlzVmFsaWQgJiZcbiAgICAgIHRoaXMudmFsdWVPZigpID09PSBvdGhlci52YWx1ZU9mKCkgJiZcbiAgICAgIHRoaXMuem9uZS5lcXVhbHMob3RoZXIuem9uZSkgJiZcbiAgICAgIHRoaXMubG9jLmVxdWFscyhvdGhlci5sb2MpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgdGhpcyB0aW1lIHJlbGF0aXZlIHRvIG5vdywgc3VjaCBhcyBcImluIHR3byBkYXlzXCIuIENhbiBvbmx5IGludGVybmF0aW9uYWxpemUgaWYgeW91clxuICAgKiBwbGF0Zm9ybSBzdXBwb3J0cyBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdC4gUm91bmRzIGRvd24gYnkgZGVmYXVsdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zIHRoYXQgYWZmZWN0IHRoZSBvdXRwdXRcbiAgICogQHBhcmFtIHtEYXRlVGltZX0gW29wdGlvbnMuYmFzZT1EYXRlVGltZS5ub3coKV0gLSB0aGUgRGF0ZVRpbWUgdG8gdXNlIGFzIHRoZSBiYXNpcyB0byB3aGljaCB0aGlzIHRpbWUgaXMgY29tcGFyZWQuIERlZmF1bHRzIHRvIG5vdy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnN0eWxlPVwibG9uZ1wiXSAtIHRoZSBzdHlsZSBvZiB1bml0cywgbXVzdCBiZSBcImxvbmdcIiwgXCJzaG9ydFwiLCBvciBcIm5hcnJvd1wiXG4gICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBvcHRpb25zLnVuaXQgLSB1c2UgYSBzcGVjaWZpYyB1bml0IG9yIGFycmF5IG9mIHVuaXRzOyBpZiBvbWl0dGVkLCBvciBhbiBhcnJheSwgdGhlIG1ldGhvZCB3aWxsIHBpY2sgdGhlIGJlc3QgdW5pdC4gVXNlIGFuIGFycmF5IG9yIG9uZSBvZiBcInllYXJzXCIsIFwicXVhcnRlcnNcIiwgXCJtb250aHNcIiwgXCJ3ZWVrc1wiLCBcImRheXNcIiwgXCJob3Vyc1wiLCBcIm1pbnV0ZXNcIiwgb3IgXCJzZWNvbmRzXCJcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yb3VuZD10cnVlXSAtIHdoZXRoZXIgdG8gcm91bmQgdGhlIG51bWJlcnMgaW4gdGhlIG91dHB1dC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnBhZGRpbmc9MF0gLSBwYWRkaW5nIGluIG1pbGxpc2Vjb25kcy4gVGhpcyBhbGxvd3MgeW91IHRvIHJvdW5kIHVwIHRoZSByZXN1bHQgaWYgaXQgZml0cyBpbnNpZGUgdGhlIHRocmVzaG9sZC4gRG9uJ3QgdXNlIGluIGNvbWJpbmF0aW9uIHdpdGgge3JvdW5kOiBmYWxzZX0gYmVjYXVzZSB0aGUgZGVjaW1hbCBvdXRwdXQgd2lsbCBpbmNsdWRlIHRoZSBwYWRkaW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5sb2NhbGUgLSBvdmVycmlkZSB0aGUgbG9jYWxlIG9mIHRoaXMgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubnVtYmVyaW5nU3lzdGVtIC0gb3ZlcnJpZGUgdGhlIG51bWJlcmluZ1N5c3RlbSBvZiB0aGlzIERhdGVUaW1lLiBUaGUgSW50bCBzeXN0ZW0gbWF5IGNob29zZSBub3QgdG8gaG9ub3IgdGhpc1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5wbHVzKHsgZGF5czogMSB9KS50b1JlbGF0aXZlKCkgLy89PiBcImluIDEgZGF5XCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkuc2V0TG9jYWxlKFwiZXNcIikudG9SZWxhdGl2ZSh7IGRheXM6IDEgfSkgLy89PiBcImRlbnRybyBkZSAxIGRcdTAwRURhXCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkucGx1cyh7IGRheXM6IDEgfSkudG9SZWxhdGl2ZSh7IGxvY2FsZTogXCJmclwiIH0pIC8vPT4gXCJkYW5zIDIzIGhldXJlc1wiXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLm1pbnVzKHsgZGF5czogMiB9KS50b1JlbGF0aXZlKCkgLy89PiBcIjIgZGF5cyBhZ29cIlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5taW51cyh7IGRheXM6IDIgfSkudG9SZWxhdGl2ZSh7IHVuaXQ6IFwiaG91cnNcIiB9KSAvLz0+IFwiNDggaG91cnMgYWdvXCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubm93KCkubWludXMoeyBob3VyczogMzYgfSkudG9SZWxhdGl2ZSh7IHJvdW5kOiBmYWxzZSB9KSAvLz0+IFwiMS41IGRheXMgYWdvXCJcbiAgICovXG4gIHRvUmVsYXRpdmUob3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IGJhc2UgPSBvcHRpb25zLmJhc2UgfHwgRGF0ZVRpbWUuZnJvbU9iamVjdCh7fSwgeyB6b25lOiB0aGlzLnpvbmUgfSksXG4gICAgICBwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nID8gKHRoaXMgPCBiYXNlID8gLW9wdGlvbnMucGFkZGluZyA6IG9wdGlvbnMucGFkZGluZykgOiAwO1xuICAgIGxldCB1bml0cyA9IFtcInllYXJzXCIsIFwibW9udGhzXCIsIFwiZGF5c1wiLCBcImhvdXJzXCIsIFwibWludXRlc1wiLCBcInNlY29uZHNcIl07XG4gICAgbGV0IHVuaXQgPSBvcHRpb25zLnVuaXQ7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy51bml0KSkge1xuICAgICAgdW5pdHMgPSBvcHRpb25zLnVuaXQ7XG4gICAgICB1bml0ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gZGlmZlJlbGF0aXZlKGJhc2UsIHRoaXMucGx1cyhwYWRkaW5nKSwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIG51bWVyaWM6IFwiYWx3YXlzXCIsXG4gICAgICB1bml0cyxcbiAgICAgIHVuaXQsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGRhdGUgcmVsYXRpdmUgdG8gdG9kYXksIHN1Y2ggYXMgXCJ5ZXN0ZXJkYXlcIiBvciBcIm5leHQgbW9udGhcIi5cbiAgICogT25seSBpbnRlcm5hdGlvbmFsaXplcyBvbiBwbGF0Zm9ybXMgdGhhdCBzdXBwb3J0cyBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zIHRoYXQgYWZmZWN0IHRoZSBvdXRwdXRcbiAgICogQHBhcmFtIHtEYXRlVGltZX0gW29wdGlvbnMuYmFzZT1EYXRlVGltZS5ub3coKV0gLSB0aGUgRGF0ZVRpbWUgdG8gdXNlIGFzIHRoZSBiYXNpcyB0byB3aGljaCB0aGlzIHRpbWUgaXMgY29tcGFyZWQuIERlZmF1bHRzIHRvIG5vdy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubG9jYWxlIC0gb3ZlcnJpZGUgdGhlIGxvY2FsZSBvZiB0aGlzIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnVuaXQgLSB1c2UgYSBzcGVjaWZpYyB1bml0OyBpZiBvbWl0dGVkLCB0aGUgbWV0aG9kIHdpbGwgcGljayB0aGUgdW5pdC4gVXNlIG9uZSBvZiBcInllYXJzXCIsIFwicXVhcnRlcnNcIiwgXCJtb250aHNcIiwgXCJ3ZWVrc1wiLCBvciBcImRheXNcIlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5udW1iZXJpbmdTeXN0ZW0gLSBvdmVycmlkZSB0aGUgbnVtYmVyaW5nU3lzdGVtIG9mIHRoaXMgRGF0ZVRpbWUuIFRoZSBJbnRsIHN5c3RlbSBtYXkgY2hvb3NlIG5vdCB0byBob25vciB0aGlzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnBsdXMoeyBkYXlzOiAxIH0pLnRvUmVsYXRpdmVDYWxlbmRhcigpIC8vPT4gXCJ0b21vcnJvd1wiXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnNldExvY2FsZShcImVzXCIpLnBsdXMoeyBkYXlzOiAxIH0pLnRvUmVsYXRpdmUoKSAvLz0+IFwiXCJtYVx1MDBGMWFuYVwiXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLm5vdygpLnBsdXMoeyBkYXlzOiAxIH0pLnRvUmVsYXRpdmVDYWxlbmRhcih7IGxvY2FsZTogXCJmclwiIH0pIC8vPT4gXCJkZW1haW5cIlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5ub3coKS5taW51cyh7IGRheXM6IDIgfSkudG9SZWxhdGl2ZUNhbGVuZGFyKCkgLy89PiBcIjIgZGF5cyBhZ29cIlxuICAgKi9cbiAgdG9SZWxhdGl2ZUNhbGVuZGFyKG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gbnVsbDtcblxuICAgIHJldHVybiBkaWZmUmVsYXRpdmUob3B0aW9ucy5iYXNlIHx8IERhdGVUaW1lLmZyb21PYmplY3Qoe30sIHsgem9uZTogdGhpcy56b25lIH0pLCB0aGlzLCB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgbnVtZXJpYzogXCJhdXRvXCIsXG4gICAgICB1bml0czogW1wieWVhcnNcIiwgXCJtb250aHNcIiwgXCJkYXlzXCJdLFxuICAgICAgY2FsZW5kYXJ5OiB0cnVlLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbWluIG9mIHNldmVyYWwgZGF0ZSB0aW1lc1xuICAgKiBAcGFyYW0gey4uLkRhdGVUaW1lfSBkYXRlVGltZXMgLSB0aGUgRGF0ZVRpbWVzIGZyb20gd2hpY2ggdG8gY2hvb3NlIHRoZSBtaW5pbXVtXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfSB0aGUgbWluIERhdGVUaW1lLCBvciB1bmRlZmluZWQgaWYgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRcbiAgICovXG4gIHN0YXRpYyBtaW4oLi4uZGF0ZVRpbWVzKSB7XG4gICAgaWYgKCFkYXRlVGltZXMuZXZlcnkoRGF0ZVRpbWUuaXNEYXRlVGltZSkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcIm1pbiByZXF1aXJlcyBhbGwgYXJndW1lbnRzIGJlIERhdGVUaW1lc1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIGJlc3RCeShkYXRlVGltZXMsIChpKSA9PiBpLnZhbHVlT2YoKSwgTWF0aC5taW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbWF4IG9mIHNldmVyYWwgZGF0ZSB0aW1lc1xuICAgKiBAcGFyYW0gey4uLkRhdGVUaW1lfSBkYXRlVGltZXMgLSB0aGUgRGF0ZVRpbWVzIGZyb20gd2hpY2ggdG8gY2hvb3NlIHRoZSBtYXhpbXVtXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfSB0aGUgbWF4IERhdGVUaW1lLCBvciB1bmRlZmluZWQgaWYgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRcbiAgICovXG4gIHN0YXRpYyBtYXgoLi4uZGF0ZVRpbWVzKSB7XG4gICAgaWYgKCFkYXRlVGltZXMuZXZlcnkoRGF0ZVRpbWUuaXNEYXRlVGltZSkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcIm1heCByZXF1aXJlcyBhbGwgYXJndW1lbnRzIGJlIERhdGVUaW1lc1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIGJlc3RCeShkYXRlVGltZXMsIChpKSA9PiBpLnZhbHVlT2YoKSwgTWF0aC5tYXgpO1xuICB9XG5cbiAgLy8gTUlTQ1xuXG4gIC8qKlxuICAgKiBFeHBsYWluIGhvdyBhIHN0cmluZyB3b3VsZCBiZSBwYXJzZWQgYnkgZnJvbUZvcm1hdCgpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIHN0cmluZyB0byBwYXJzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm10IC0gdGhlIGZvcm1hdCB0aGUgc3RyaW5nIGlzIGV4cGVjdGVkIHRvIGJlIGluIChzZWUgZGVzY3JpcHRpb24pXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9ucyB0YWtlbiBieSBmcm9tRm9ybWF0KClcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGZyb21Gb3JtYXRFeHBsYWluKHRleHQsIGZtdCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyBsb2NhbGUgPSBudWxsLCBudW1iZXJpbmdTeXN0ZW0gPSBudWxsIH0gPSBvcHRpb25zLFxuICAgICAgbG9jYWxlVG9Vc2UgPSBMb2NhbGUuZnJvbU9wdHMoe1xuICAgICAgICBsb2NhbGUsXG4gICAgICAgIG51bWJlcmluZ1N5c3RlbSxcbiAgICAgICAgZGVmYXVsdFRvRU46IHRydWUsXG4gICAgICB9KTtcbiAgICByZXR1cm4gZXhwbGFpbkZyb21Ub2tlbnMobG9jYWxlVG9Vc2UsIHRleHQsIGZtdCk7XG4gIH1cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgdXNlIGZyb21Gb3JtYXRFeHBsYWluIGluc3RlYWRcbiAgICovXG4gIHN0YXRpYyBmcm9tU3RyaW5nRXhwbGFpbih0ZXh0LCBmbXQsIG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiBEYXRlVGltZS5mcm9tRm9ybWF0RXhwbGFpbih0ZXh0LCBmbXQsIG9wdGlvbnMpO1xuICB9XG5cbiAgLy8gRk9STUFUIFBSRVNFVFNcblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAxMC8xNC8xOTgzXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVfU0hPUlQoKSB7XG4gICAgcmV0dXJuIEZvcm1hdHMuREFURV9TSE9SVDtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdPY3QgMTQsIDE5ODMnXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVfTUVEKCkge1xuICAgIHJldHVybiBGb3JtYXRzLkRBVEVfTUVEO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ0ZyaSwgT2N0IDE0LCAxOTgzJ1xuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBEQVRFX01FRF9XSVRIX1dFRUtEQVkoKSB7XG4gICAgcmV0dXJuIEZvcm1hdHMuREFURV9NRURfV0lUSF9XRUVLREFZO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ09jdG9iZXIgMTQsIDE5ODMnXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVfRlVMTCgpIHtcbiAgICByZXR1cm4gRm9ybWF0cy5EQVRFX0ZVTEw7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnVHVlc2RheSwgT2N0b2JlciAxNCwgMTk4MydcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgREFURV9IVUdFKCkge1xuICAgIHJldHVybiBGb3JtYXRzLkRBVEVfSFVHRTtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMCBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBUSU1FX1NJTVBMRSgpIHtcbiAgICByZXR1cm4gRm9ybWF0cy5USU1FX1NJTVBMRTtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMDoyMyBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBUSU1FX1dJVEhfU0VDT05EUygpIHtcbiAgICByZXR1cm4gRm9ybWF0cy5USU1FX1dJVEhfU0VDT05EUztcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMDoyMyBBTSBFRFQnLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgVElNRV9XSVRIX1NIT1JUX09GRlNFVCgpIHtcbiAgICByZXR1cm4gRm9ybWF0cy5USU1FX1dJVEhfU0hPUlRfT0ZGU0VUO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwOjIzIEFNIEVhc3Rlcm4gRGF5bGlnaHQgVGltZScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBUSU1FX1dJVEhfTE9OR19PRkZTRVQoKSB7XG4gICAgcmV0dXJuIEZvcm1hdHMuVElNRV9XSVRIX0xPTkdfT0ZGU0VUO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwJywgYWx3YXlzIDI0LWhvdXIuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IFRJTUVfMjRfU0lNUExFKCkge1xuICAgIHJldHVybiBGb3JtYXRzLlRJTUVfMjRfU0lNUExFO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwOjIzJywgYWx3YXlzIDI0LWhvdXIuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IFRJTUVfMjRfV0lUSF9TRUNPTkRTKCkge1xuICAgIHJldHVybiBGb3JtYXRzLlRJTUVfMjRfV0lUSF9TRUNPTkRTO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayBEYXRlVGltZSN0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwOjIzIEVEVCcsIGFsd2F5cyAyNC1ob3VyLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBUSU1FXzI0X1dJVEhfU0hPUlRfT0ZGU0VUKCkge1xuICAgIHJldHVybiBGb3JtYXRzLlRJTUVfMjRfV0lUSF9TSE9SVF9PRkZTRVQ7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMDk6MzA6MjMgRWFzdGVybiBEYXlsaWdodCBUaW1lJywgYWx3YXlzIDI0LWhvdXIuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IFRJTUVfMjRfV0lUSF9MT05HX09GRlNFVCgpIHtcbiAgICByZXR1cm4gRm9ybWF0cy5USU1FXzI0X1dJVEhfTE9OR19PRkZTRVQ7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMTAvMTQvMTk4MywgOTozMCBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBEQVRFVElNRV9TSE9SVCgpIHtcbiAgICByZXR1cm4gRm9ybWF0cy5EQVRFVElNRV9TSE9SVDtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcxMC8xNC8xOTgzLCA5OjMwOjMzIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVUSU1FX1NIT1JUX1dJVEhfU0VDT05EUygpIHtcbiAgICByZXR1cm4gRm9ybWF0cy5EQVRFVElNRV9TSE9SVF9XSVRIX1NFQ09ORFM7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0IDE0LCAxOTgzLCA5OjMwIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVUSU1FX01FRCgpIHtcbiAgICByZXR1cm4gRm9ybWF0cy5EQVRFVElNRV9NRUQ7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0IDE0LCAxOTgzLCA5OjMwOjMzIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVUSU1FX01FRF9XSVRIX1NFQ09ORFMoKSB7XG4gICAgcmV0dXJuIEZvcm1hdHMuREFURVRJTUVfTUVEX1dJVEhfU0VDT05EUztcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdGcmksIDE0IE9jdCAxOTgzLCA5OjMwIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVUSU1FX01FRF9XSVRIX1dFRUtEQVkoKSB7XG4gICAgcmV0dXJuIEZvcm1hdHMuREFURVRJTUVfTUVEX1dJVEhfV0VFS0RBWTtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgRGF0ZVRpbWUjdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdPY3RvYmVyIDE0LCAxOTgzLCA5OjMwIEFNIEVEVCcuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBEQVRFVElNRV9GVUxMKCkge1xuICAgIHJldHVybiBGb3JtYXRzLkRBVEVUSU1FX0ZVTEw7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0b2JlciAxNCwgMTk4MywgOTozMDozMyBBTSBFRFQnLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgREFURVRJTUVfRlVMTF9XSVRIX1NFQ09ORFMoKSB7XG4gICAgcmV0dXJuIEZvcm1hdHMuREFURVRJTUVfRlVMTF9XSVRIX1NFQ09ORFM7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnRnJpZGF5LCBPY3RvYmVyIDE0LCAxOTgzLCA5OjMwIEFNIEVhc3Rlcm4gRGF5bGlnaHQgVGltZScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBEQVRFVElNRV9IVUdFKCkge1xuICAgIHJldHVybiBGb3JtYXRzLkRBVEVUSU1FX0hVR0U7XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIERhdGVUaW1lI3RvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnRnJpZGF5LCBPY3RvYmVyIDE0LCAxOTgzLCA5OjMwOjMzIEFNIEVhc3Rlcm4gRGF5bGlnaHQgVGltZScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBEQVRFVElNRV9IVUdFX1dJVEhfU0VDT05EUygpIHtcbiAgICByZXR1cm4gRm9ybWF0cy5EQVRFVElNRV9IVUdFX1dJVEhfU0VDT05EUztcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcmllbmRseURhdGVUaW1lKGRhdGVUaW1laXNoKSB7XG4gIGlmIChEYXRlVGltZS5pc0RhdGVUaW1lKGRhdGVUaW1laXNoKSkge1xuICAgIHJldHVybiBkYXRlVGltZWlzaDtcbiAgfSBlbHNlIGlmIChkYXRlVGltZWlzaCAmJiBkYXRlVGltZWlzaC52YWx1ZU9mICYmIGlzTnVtYmVyKGRhdGVUaW1laXNoLnZhbHVlT2YoKSkpIHtcbiAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUpTRGF0ZShkYXRlVGltZWlzaCk7XG4gIH0gZWxzZSBpZiAoZGF0ZVRpbWVpc2ggJiYgdHlwZW9mIGRhdGVUaW1laXNoID09PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuIERhdGVUaW1lLmZyb21PYmplY3QoZGF0ZVRpbWVpc2gpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgIGBVbmtub3duIGRhdGV0aW1lIGFyZ3VtZW50OiAke2RhdGVUaW1laXNofSwgb2YgdHlwZSAke3R5cGVvZiBkYXRlVGltZWlzaH1gXG4gICAgKTtcbiAgfVxufVxuIiwgImltcG9ydCBEYXRlVGltZSBmcm9tIFwiLi9kYXRldGltZS5qc1wiO1xuaW1wb3J0IER1cmF0aW9uIGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5pbXBvcnQgSW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCBJbmZvIGZyb20gXCIuL2luZm8uanNcIjtcbmltcG9ydCBab25lIGZyb20gXCIuL3pvbmUuanNcIjtcbmltcG9ydCBGaXhlZE9mZnNldFpvbmUgZnJvbSBcIi4vem9uZXMvZml4ZWRPZmZzZXRab25lLmpzXCI7XG5pbXBvcnQgSUFOQVpvbmUgZnJvbSBcIi4vem9uZXMvSUFOQVpvbmUuanNcIjtcbmltcG9ydCBJbnZhbGlkWm9uZSBmcm9tIFwiLi96b25lcy9pbnZhbGlkWm9uZS5qc1wiO1xuaW1wb3J0IFN5c3RlbVpvbmUgZnJvbSBcIi4vem9uZXMvc3lzdGVtWm9uZS5qc1wiO1xuaW1wb3J0IFNldHRpbmdzIGZyb20gXCIuL3NldHRpbmdzLmpzXCI7XG5cbmNvbnN0IFZFUlNJT04gPSBcIjMuNC40XCI7XG5cbmV4cG9ydCB7XG4gIFZFUlNJT04sXG4gIERhdGVUaW1lLFxuICBEdXJhdGlvbixcbiAgSW50ZXJ2YWwsXG4gIEluZm8sXG4gIFpvbmUsXG4gIEZpeGVkT2Zmc2V0Wm9uZSxcbiAgSUFOQVpvbmUsXG4gIEludmFsaWRab25lLFxuICBTeXN0ZW1ab25lLFxuICBTZXR0aW5ncyxcbn07XG4iLCAiLypcbiAqIEZpbGVuYW1lOiAvc3JjL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG8vQVBJL21lbnVPdHJvLnRzXG4gKiBQYXRoOiAvc3JjL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG8vQVBJXG4gKiBDcmVhdGVkIERhdGU6IDIwMjQtMDMtMDUgMTQ6NDM6MDlcbiAqIEF1dGhvcjogQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqIC0tLS0tXG4gKiBMYXN0IE1vZGlmaWVkOiAyMDI1LTAyLTIzIDE3OjQyOjMxXG4gKiBNb2RpZmllZCBCeTogQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqIC0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjUgLSBBbmRyXHUwMEU5cyBKdWxpXHUwMEUxbiBCb3JiXHUwMEYzblxuICovXG5cblxuXG5pbXBvcnQgeyBBcHAsIFRGaWxlLCBURm9sZGVyLCBNb2RhbCwgRnV6enlTdWdnZXN0TW9kYWwsIEZ1enp5TWF0Y2gsIE5vdGljZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHtTZWxlY2Npb25Nb2RhbH0gZnJvbSBcIi4uLy4uL21vZGFsZXMvc2VsZWNjaW9uTW9kYWxcIjtcbmltcG9ydCB7ZnV6enlTZWxlY3RPckNyZWF0ZX0gZnJvbSBcIi4uLy4uL21vZGFsZXMvZnV6enlTZWxlY3RPckNyZWF0ZVwiO1xuaW1wb3J0IHtEYXRlVGltZX0gZnJvbSAnbHV4b24nXG5cbmludGVyZmFjZSBHcnVwb0FjdGl2aWRhZCB7XG4gICAgZ3J1cG86IHN0cmluZztcbiAgICBhY3RpdmlkYWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIG1lbnVPdHJvIHtcbiAgICBcbiAgICBwYXRoQ2FtcG9zOiBzdHJpbmcgPSBcIkVzdHJ1Y3R1cmEvQ2FtcG9zIFNpc3RlbWEgR2VzdGlvbi9DYW1wb3MgUmVnaXN0cm8gVGllbXBvLm1kXCI7XG4gICAgc2VsZWN0ZWRBY3Rpdml0eTogc3RyaW5nID1cIlwiO1xuICAgIHNlbGVjdGVkR3JvdXA6IHN0cmluZyA9IFwiXCI7XG4gICAgcGx1Z2luOiBQbHVnaW47XG4gICAgXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgICAgIHRoaXMuZnV6enlTZWxlY3RPckMgPSBuZXcgZnV6enlTZWxlY3RPckNyZWF0ZSh0aGlzLmFwcCwgcGx1Z2luKTtcbiAgICAgIH1cbiAgICBcbiAgICAgIGFzeW5jIG1lbnVPdHJvIChhcHA6IEFwcCwgcmVnaXN0cm86IGFueSl7XG4gICAgICAgIGNvbnN0IG9wY2lvbmVzT3RybyA9IFtcIlByb3BpYXNcIiwgXCJBcmVhcyBkZSBWaWRhXCIsIFwiQXJlYXMgZGUgSW50ZXJcdTAwRTlzXCIsIFwiUHJveWVjdG9zIGRlIFFcIiwgXCJQcm95ZWN0b3MgR1REXCIsIFwiVGVtYSBkZSBJbnRlclx1MDBFOXNcIiwgXCJSZWN1cnNvIFJlY3VycmVudGVcIl0gO1xuICAgICAgICBjb25zdCB2YWxvcmVzT3RybyA9IFtcImhhYlwiLCBcImFjdHNBVlwiLCBcImFjdHNBSVwiLCBcImFjdHNQUVwiLCBcImFjdHNQR1REXCIsIFwiYWN0c1RJXCIsIFwiYWN0c1JSXCJdO1xuICAgICAgICBjb25zdCBwbGFjZWhvbGRlck90cm8gPSBcIlx1MDBCRlF1ZSBjYXRlZ29yaWE/XCI7XG4gICAgICAgIGNvbnN0IG1vZGFsT3RybyA9IG5ldyBTZWxlY2Npb25Nb2RhbChhcHAsIG9wY2lvbmVzT3RybywgdmFsb3Jlc090cm8sIHBsYWNlaG9sZGVyT3Rybyk7XG4gICAgICAgIGxldCB0ZW1hT3Rybzp7Z3J1cG86c3RyaW5nO2FjdGl2aWRhZDpzdHJpbmcsbm9tYnJlOnN0cmluZ307XG4gICAgICAgIGxldCBzaUFzdW50bzogYm9vbGVhbiA9IGZhbHNlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uT3RybyA9IGF3YWl0IG1vZGFsT3Ryby5vcGVuQW5kQXdhaXRTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgIHN3aXRjaChzZWxlY3Rpb25PdHJvKSB7XG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjYXNlIFwiaGFiXCI6XG4gICAgICAgICAgICAgICAgICAgIHRlbWFPdHJvID0gYXdhaXQgdGhpcy5oYWJpdHVhbChhcHApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiYWN0c0FWXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcImFjdHNBSVwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJhY3RzUFFcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiYWN0c1BHVERcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiYWN0c1RJXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcImFjdHNSUlwiOlxuICAgICAgICAgICAgICAgICAgICB0ZW1hT3RybyA9IGF3YWl0IHRoaXMuZWxlbVNHKGFwcCxzZWxlY3Rpb25PdHJvKTsgXG4gICAgICAgICAgICAgICAgICAgIHNpQXN1bnRvID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImJ1c1wiOlxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIG8gbW9kYWwgY2VycmFkbyBzaW4gc2VsZWNjaVx1MDBGM246XCIsIGVycm9yKTtcbiAgICAgICAgICAgIHJlZ2lzdHJvLmRldGVuZXIgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVidWdnZXJcbiAgICAgICAgICAgIHJldHVybiB7dGl0dWxvOiB0ZW1hT3Ryby5hY3RpdmlkYWQgKyBcIiAvIFwiICsgdGVtYU90cm8uZ3J1cG8sIHNpQXN1bnRvICxub21icmU6IHRlbWFPdHJvLmdydXBvLCBhcmVhVmlkYTogdGVtYU90cm8uZ3J1cG99XG4gICAgICAgIH1cblxuICAgICAgICBhc3luYyBoYWJpdHVhbCAoYXBwOiBBcHApe1xuICAgICAgICAgICAgY29uc3QgZ3J1cG9zID0gYXdhaXQgdGhpcy5nZXRGcm9udG1hdHRlckZpZWxkKGFwcCx0aGlzLnBhdGhDYW1wb3MsIFwidGVtYXNcIik7XG4gICAgICAgICAgICBjb25zdCBhY3RzR3J1cG9zID0gYXdhaXQgdGhpcy5yZXN1bHRZYW1sKGFwcCxcImFjdHNUZW1hc1wiKVxuICAgICAgICAgICAgLy8gRmlsdHJhciB5IHByZXBhcmFyIGxhcyBhY3RpdmlkYWRlcyBleGlzdGVudGVzIHBhcmEgbGEgYlx1MDBGQXNxdWVkYVxuICAgICAgICAgICAgbGV0IGl0ZW1zRm9yU2VhcmNoID0gYWN0c0dydXBvc1xuICAgICAgICAgICAgLmZpbHRlcigoaXRlbSkgPT4gZ3J1cG9zLmluY2x1ZGVzKGl0ZW0uZ3J1cG8pKSAvLyBVc2EgbGEgcHJvcGllZGFkICdncnVwbycgZW4gbHVnYXIgZGUgaXRlbVswXVxuICAgICAgICAgICAgLm1hcCgoaXRlbSkgPT4gKHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogYCR7aXRlbS5hY3RpdmlkYWR9IC8gJHtpdGVtLmdydXBvfWAsIC8vIENhbWJpYSBlbCBvcmRlbiBzaSBlcyBuZWNlc2FyaW9cbiAgICAgICAgICAgICAgICBhY3Rpdml0eTogaXRlbS5hY3RpdmlkYWQsIC8vIFVzYSBsYSBwcm9waWVkYWQgJ2FjdGl2aWRhZCcgZW4gbHVnYXIgZGUgaXRlbVsxXVxuICAgICAgICAgICAgICAgIGdyb3VwOiBpdGVtLmdydXBvLFxuICAgICAgICAgICAgICAgIC8vIFVzYSBsYSBwcm9waWVkYWQgJ2dydXBvJyBlbiBsdWdhciBkZSBpdGVtWzBdXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBsZXQgZWxlY2Npb24gPSBhd2FpdCB0aGlzLmZ1enp5U2VsZWN0T3JDLnNob3dGdXp6eVNlYXJjaE1vZGFsKGl0ZW1zRm9yU2VhcmNoLCBncnVwb3MpO1xuICAgICAgICAgICAgbGV0IG9iakVsZWNjaW9uID0ge2dydXBvOiBlbGVjY2lvblsxXSwgYWN0aXZpZGFkOiBlbGVjY2lvblswXSwgbm9tYnJlOiBcIlwifTtcbiAgICAgICAgICAgIHJldHVybiBvYmpFbGVjY2lvbjsgICBcbiAgICAgICAgfVxuXG4gICAgICAgIGFzeW5jIG5pbmd1bm8gKGFwcDogQXBwKXtcblxuICAgICAgICB9XG5cbiAgICAgICAgYXN5bmMgIGVsZW1TRyAoYXBwOiBBcHAsIHRpcG8gOiBzdHJpbmcpOiBQcm9taXNlPGFueT57XG4gICAgICAgICAgICBjb25zdCBhY3RpdmlkYWRlcyA9IGF3YWl0IHRoaXMucmVzdWx0WWFtbChhcHAsIHRpcG8pXG4gICAgICAgICAgICBjb25zdCBhY3RpdmVTRyA9IGF3YWl0IHRoaXMuZmluZE1haW5GaWxlc1dpdGhTdGF0ZShhcHAsdGlwbylcbiAgICAgICAgICAgIC8vIEV4dHJhZSBlbCBwcmltZXIgYWxpYXMgZGUgY2FkYSBub3RhIGVuY29udHJhZGEgeSBsb3MgYWxtYWNlbmEgZW4gdW4gYXJyYXlcbiAgICAgICAgICAgIGxldCBncm91cHM7XG4gICAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgICAgIHN3aXRjaCAodGlwbyl7XG4gICAgICAgICAgICBjYXNlIFwiYWN0c0FWXCI6XG4gICAgICAgICAgICAgICAgZ3JvdXBzID0gYWN0aXZlU0cubWFwKHBhZ2UgPT4gcGFnZS5mcm9udG1hdHRlci5hcmVhVmlkYSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGdyb3VwcyA9IGFjdGl2ZVNHLm1hcChwYWdlID0+IHBhZ2UuZnJvbnRtYXR0ZXIuYWxpYXNlcyA/IHBhZ2UuZnJvbnRtYXR0ZXIuYWxpYXNlc1swXSA6IG51bGwpLmZpbHRlcihhbGlhcyA9PiBhbGlhcyAhPT0gbnVsbCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEZpbHRyYXIgeSBwcmVwYXJhciBsYXMgYWN0aXZpZGFkZXMgZXhpc3RlbnRlcyBwYXJhIGxhIGJcdTAwRkFzcXVlZGFcbiAgICAgICAgICAgIGxldCBpdGVtc0ZvclNlYXJjaCA9IGFjdGl2aWRhZGVzXG4gICAgICAgICAgICAuZmlsdGVyKChpdGVtKSA9PiBncm91cHMuaW5jbHVkZXMoaXRlbS5ncnVwbykpIC8vIFVzYSBsYSBwcm9waWVkYWQgJ2dydXBvJyBlbiBsdWdhciBkZSBpdGVtWzBdXG4gICAgICAgICAgICAubWFwKChpdGVtKSA9PiAoe1xuICAgICAgICAgICAgICAgIHZhbHVlOiBgJHtpdGVtLmFjdGl2aWRhZH0gLyAke2l0ZW0uZ3J1cG99YCwgLy8gQ2FtYmlhIGVsIG9yZGVuIHNpIGVzIG5lY2VzYXJpb1xuICAgICAgICAgICAgICAgIGFjdGl2aXR5OiBpdGVtLmFjdGl2aWRhZCwgLy8gVXNhIGxhIHByb3BpZWRhZCAnYWN0aXZpZGFkJyBlbiBsdWdhciBkZSBpdGVtWzFdXG4gICAgICAgICAgICAgICAgZ3JvdXA6IGl0ZW0uZ3J1cG8sXG4gICAgICAgICAgICAgICAgLy8gVXNhIGxhIHByb3BpZWRhZCAnZ3J1cG8nIGVuIGx1Z2FyIGRlIGl0ZW1bMF1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIC8vIE1vc3RyYW1vcyBlbCBtb2RhbCBjb24gbGFzIG9wY2lvbmVzIGRlIGJcdTAwRkFzcXVlZGFcblxuICAgICAgICAgICAgbGV0IGVsZWNjaW9uID0gYXdhaXQgdGhpcy5mdXp6eVNlbGVjdE9yQy5zaG93RnV6enlTZWFyY2hNb2RhbChpdGVtc0ZvclNlYXJjaCwgZ3JvdXBzLCB0aXBvKTtcbiAgICAgICAgICAgIGNvbnN0IGZvdW5kRWxlbWVudCA9IGFjdGl2ZVNHLmZpbmQoYiA9PiBiLmZyb250bWF0dGVyLmFsaWFzZXNbMF0gPT09IGVsZWNjaW9uWzFdKTtcbiAgICAgICAgICAgIC8vIFNpIHNlIGVuY3VlbnRyYSBlbCBlbGVtZW50bywgZGV2b2x2ZXIgZnJvbnRtYXR0ZXIuYWxpYXNlc1sxXVxuICAgICAgICAgICAgbGV0IGFsaWFzID0gZm91bmRFbGVtZW50Py5maWxlLnBhdGg7XG4gICAgICAgICAgICBsZXQgb2JqRWxlY2Npb24gPSB7Z3J1cG86IGVsZWNjaW9uWzFdLCBhY3RpdmlkYWQ6IGVsZWNjaW9uWzBdLCBub21icmU6IGFsaWFzfTtcbiAgICAgICAgICAgIHJldHVybiBvYmpFbGVjY2lvbjsgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgYXN5bmMgYnVzY2FyIChhcHA6IEFwcCl7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGFzeW5jICByZXN1bHRZYW1sKGFwcDogQXBwLCB0ZW1hOiBzdHJpbmcpOiBQcm9taXNlPEdydXBvQWN0aXZpZGFkW10+IHtcbiAgICAgICAgICAgIC8vIEVuY3VlbnRyYSBlbCBhcmNoaXZvIHBvciBzdSBydXRhXG4gICAgICAgICAgICBjb25zdCBmaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aCh0aGlzLnBhdGhDYW1wb3MpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVzYSBtZXRhZGF0YUNhY2hlIHBhcmEgb2J0ZW5lciBsb3MgbWV0YWRhdG9zIGRlbCBhcmNoaXZvXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFjY2VkZSBhbCBmcm9udCBtYXR0ZXIgKFlBTUwpIGRlbCBhcmNoaXZvIHkgb2J0aWVuZSBlbCBhcnJlZ2xvIGJhc2FkbyBlbiBlbCB0ZW1hXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFycmVnbG9SZXN1bHQgPSBtZXRhZGF0YT8uZnJvbnRtYXR0ZXI/Llt0ZW1hXSB8fCBbXTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDb25zdHJ1eWUgZWwgYXJyZWdsbyBkZSBvYmpldG9zIHJlc3VsdGFkbyBiYXNhZG8gZW4gbGEgZXN0cnVjdHVyYSBkZSBHcnVwb0FjdGl2aWRhZFxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHRhZG86IEdydXBvQWN0aXZpZGFkW10gPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBSZWxsZW5hIGVsIGFycmVnbG8gY29uIGxvcyBkYXRvcyBkZWwgYXJyZWdsb1Jlc3VsdFxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcnJlZ2xvUmVzdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJyZWdsb1Jlc3VsdC5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pICYmIGl0ZW0ubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0YWRvLnB1c2goeyBncnVwbzogaXRlbVswXSwgYWN0aXZpZGFkOiBpdGVtWzFdIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0YWRvO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIG9idGVuaWVuZG8gZWwgYXJjaGl2byBkZSBjYW1wb3M6XCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAvLyBBcXVcdTAwRUQgbWFuZWphclx1MDBFRGFzIGVsIGVycm9yIGNvbW8gc2VhIGFwcm9waWFkbyBwYXJhIHR1IGFwbGljYWNpXHUwMEYzblxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yOyAvLyBPIGRldm9sdmVyIHVuIGFycmVnbG8gdmFjXHUwMEVEbyBjb21vIHJlc3VsdGFkbyBkZSBlcnJvclxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEZXZ1ZWx2ZSB1biBhcnJlZ2xvIHZhY1x1MDBFRG8gc2kgbm8gc2UgZW5jdWVudHJhIGVsIGFyY2hpdm8gbyBzaSBvY3VycmUgY3VhbHF1aWVyIG90cm8gcHJvYmxlbWFcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFzeW5jIGdldEZyb250bWF0dGVyRmllbGQoYXBwOiBBcHAsIGZpbGU6IHN0cmluZywgZmllbGQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRGaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmaWxlKTtcbiAgICAgICAgICAgICAgICBpZiAodEZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYWNoZSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZSh0RmlsZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyb250bWF0dGVyID0gY2FjaGU/LmZyb250bWF0dGVyO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyb250bWF0dGVyICYmIGZyb250bWF0dGVyLmhhc093blByb3BlcnR5KGZpZWxkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGRWYWx1ZSA9IGZyb250bWF0dGVyW2ZpZWxkXTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGRWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IGZpZWxkVmFsdWUgPT09IG51bGwgfHwgZmllbGRWYWx1ZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRWwgY2FtcG8gZXN0XHUwMEUxIHZhY1x1MDBFRG8gbyBubyBleGlzdGUuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyBPIG1hbmVqYXIgc2VnXHUwMEZBbiBsbyBuZWNlc2l0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJGcm9udG1hdHRlciBjb25zdWx0YWRvIGNvbiBcdTAwRTl4aXRvXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlOyAvLyBEZXZ1ZWx2ZSBlbCB2YWxvciBkZWwgY2FtcG9cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRWwgY2FtcG8gbm8gZXhpc3RlIGVuIGVsIGZyb250bWF0dGVyLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyBPIG1hbmVqYXIgc2VnXHUwMEZBbiBsbyBuZWNlc2l0ZXNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFbCBhcmNoaXZvIG5vIGV4aXN0ZSBvIG5vIGVzIHVuIGFyY2hpdm8gZGUgdGV4dG8uXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gTyBtYW5lamFyIHNlZ1x1MDBGQW4gbG8gbmVjZXNpdGVzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIGNvbnN1bHRhciBlbCBmcm9udG1hdHRlclwiLCBlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyBPIG1hbmVqYXIgc2VnXHUwMEZBbiBsbyBuZWNlc2l0ZXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcblxuICAgICAgICAvLyBFc3RhIGZ1bmNpXHUwMEYzbiBlbmN1ZW50cmEgbG9zIGFyY2hpdm9zIGRlIHN1YnNpc3RlbWFzIHkgY3V5byBlc3RhZG8gZXMgXHVEODNEXHVERkUyXG4gICAgICAgIGFzeW5jIGZpbmRNYWluRmlsZXNXaXRoU3RhdGUoYXBwLCB0aXBvKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXNUaXBvID0ge1xuICAgICAgICAgICAgICAgIGFjdHNBVjoge1xuICAgICAgICAgICAgICAgICAgZm9sZGVyOiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfQXJlYXNWaWRhLFxuICAgICAgICAgICAgICAgICAgc2FtZU5hbWU6IGZhbHNlLCBcbiAgICAgICAgICAgICAgICAgIG5hbWVGaWxlOiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5uYW1lRmlsZV9BcmVhc1ZpZGFcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFjdHNBSToge1xuICAgICAgICAgICAgICAgICAgICBmb2xkZXI6IHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9BcmVhc0ludGVyZXMsXG4gICAgICAgICAgICAgICAgICAgIHNhbWVOYW1lOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lRmlsZTogdGhpcy5wbHVnaW4uc2V0dGluZ3MubmFtZUZpbGVfQXJlYXNJbnRlcmVzXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFjdHNQUToge1xuICAgICAgICAgICAgICAgICAgZm9sZGVyOiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfUHJveWVjdG9zUSxcbiAgICAgICAgICAgICAgICAgIHNhbWVOYW1lOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIG5hbWVGaWxlOiBcIlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3RzUEdURDoge1xuICAgICAgICAgICAgICAgICAgICBmb2xkZXI6IHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9Qcm95ZWN0b3NHVEQsXG4gICAgICAgICAgICAgICAgICAgIHNhbWVOYW1lOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZUZpbGU6IFwiXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWN0c1RJOiB7XG4gICAgICAgICAgICAgICAgICAgICAgZm9sZGVyOiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfVGVtYXNJbnRlcmVzLFxuICAgICAgICAgICAgICAgICAgICAgIHNhbWVOYW1lOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lRmlsZTogXCJcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFjdHNSUjoge1xuICAgICAgICAgICAgICAgICAgICBmb2xkZXI6IHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9SZWN1cnNvc1JlY3VycmVudGVzLFxuICAgICAgICAgICAgICAgICAgICBzYW1lTmFtZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG5hbWVGaWxlOiBcIlwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC8vIFB1ZWRlcyBjb250aW51YXIgYVx1MDBGMWFkaWVuZG8gbVx1MDBFMXMgY2Fzb3MgYXF1XHUwMEVEXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAvLyBBc2VnXHUwMEZBcmF0ZSBkZSBxdWUgdGlwbyBlcyB1bmEgcHJvcGllZGFkIHZcdTAwRTFsaWRhIGFudGVzIGRlIGRlc2VzdHJ1Y3R1cmFyXG4gICAgICAgICAgICAgZGVidWdnZXJcbiAgICAgICAgICAgICBjb25zdCBhY3RpdmVGaWxlc1dpdGhGcm9udG1hdHRlciA9IFtdO1xuICAgICAgICAgICAgIHN3aXRjaCAodGlwbyl7XG4gICAgICAgICAgICAgICAgY2FzZSBcImFjdHNBVlwiOlxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGZvbGRlciwgc2FtZU5hbWUsIG5hbWVGaWxlIH0gPSBwcm9wZXJ0aWVzVGlwb1t0aXBvXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFob3JhID0gRGF0ZVRpbWUubm93KCkudG9Gb3JtYXQoXCJ5eXl5LVFxXCIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCkuZmlsdGVyKGZpbGUgPT4gXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlLnBhdGguaW5jbHVkZXMoZm9sZGVyKSAmJiAhZmlsZS5wYXRoLmluY2x1ZGVzKFwiUGxhbnRpbGxhc1wiKSAmJiBmaWxlLm5hbWUuc3RhcnRzV2l0aChhaG9yYSkpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgZmlsZSBvZiBmaWxlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1ldGFkYXRhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpPy5mcm9udG1hdHRlcjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGFkYXRhPy5lc3RhZG8gPT09IFwiXHVEODNEXHVERkUyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVGaWxlc1dpdGhGcm9udG1hdHRlci5wdXNoKHsgZmlsZTogZmlsZSwgZnJvbnRtYXR0ZXI6IG1ldGFkYXRhIH0pOyAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzVGlwby5oYXNPd25Qcm9wZXJ0eSh0aXBvKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBmb2xkZXIsIHNhbWVOYW1lLCBuYW1lRmlsZSB9ID0gcHJvcGVydGllc1RpcG9bdGlwb107XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlc0luRm9sZGVyID0gYXBwLnZhdWx0LmdldEZpbGVzKCkuZmlsdGVyKGZpbGUgPT4gZmlsZS5wYXRoLnN0YXJ0c1dpdGgoZm9sZGVyKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlc0luRm9sZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChzYW1lTmFtZSAmJiBmaWxlLmJhc2VuYW1lID09PSBuYW1lRmlsZSkgfHwgIXNhbWVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWV0YWRhdGEuZnJvbnRtYXR0ZXIgJiYgbWV0YWRhdGEuZnJvbnRtYXR0ZXIuZXN0YWRvID09PSBcIlx1RDgzRFx1REZFMlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVGaWxlc1dpdGhGcm9udG1hdHRlci5wdXNoKHsgZmlsZTogZmlsZSwgZnJvbnRtYXR0ZXI6IG1ldGFkYXRhLmZyb250bWF0dGVyIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2VsZWNjaVx1MDBGM24gbm8gcmVjb25vY2lkYTpcIiwgdGlwbyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107IC8vIE1hbmVqYXIgc2VnXHUwMEZBbiB0dSBsXHUwMEYzZ2ljYSBkZSBhcGxpY2FjaVx1MDBGM25cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZUZpbGVzV2l0aEZyb250bWF0dGVyO1xuICAgICAgICAgfVxuXG59XG4iLCAiLypcbiAqIEZpbGVuYW1lOiAvc3JjL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG8vQVBJL3V0aWxzQVBJLnRzXG4gKiBQYXRoOiAvc3JjL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG8vQVBJXG4gKiBDcmVhdGVkIERhdGU6IDIwMjQtMDMtMDUgMTc6MDI6MzRcbiAqIEF1dGhvcjogQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqIC0tLS0tXG4gKiBMYXN0IE1vZGlmaWVkOiAyMDI1LTAyLTIzIDE3OjQzOjU4XG4gKiBNb2RpZmllZCBCeTogQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqIC0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjUgLSBBbmRyXHUwMEU5cyBKdWxpXHUwMEUxbiBCb3JiXHUwMEYzblxuICovXG5cblxuaW1wb3J0IHsgQXBwLCBURmlsZSwgVEZvbGRlciwgTW9kYWwsIEZ1enp5U3VnZ2VzdE1vZGFsLCBGdXp6eU1hdGNoLCBOb3RpY2UgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7U2VsZWNjaW9uTW9kYWxUYXJlYXN9IGZyb20gXCIuLi8uLi9tb2RhbGVzL3NlbGVjY2lvbk1vZGFsVGFyZWFzXCJcbmltcG9ydCB7bWVudU90cm99IGZyb20gJy4vbWVudU90cm8nXG5pbXBvcnQgeyByZWdpc3Ryb1RpZW1wb0FQSSB9IGZyb20gXCIuL3JlZ2lzdHJvVGllbXBvQVBJXCI7XG5cbmV4cG9ydCBjbGFzcyB1dGlsc0FQSSB7XG4gIHByaXZhdGUgbWVudU90cm86IG1lbnVPdHJvO1xuICBwbHVnaW46IFBsdWdpbjtcblxuICBjb25zdHJ1Y3RvcihwbHVnaW46IFBsdWdpbikge1xuICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgIHRoaXMubWVudU90cm8gPSBuZXcgbWVudU90cm8ocGx1Z2luKTtcbiAgfVxuICAvLyBMYSBkZWNsYXJhY2lcdTAwRjNuIGRlbCBtXHUwMEU5dG9kbyBlc3RhYmEgYXNpOiBidXNjYXJSZWdpc3Ryb3NBY3Rpdm9zKGFwcDogQXBwLCByZWdpc3RybzogYW55KVxuICAvLyBEZXZ1ZWx2ZSBlbCBmaWxlIGRlbCByZWdpc3RybyBhY3Rpdm8uIFV0aWxpemFkbyBwYXJhIGN1YW5kbyBuZWNlc2l0byBvYnRlbmVyIGVsIGRhdG8gc29sYW1lbnRlIGRlIHNpIGhheSBhbGdcdTAwRkFuIHJlZ2lzdHJvIGFjdGl2by5cbiAgYXN5bmMgYnVzY2FyUmVnaXN0cm9zQWN0aXZvcyhhcHA6IEFwcCk6IFByb21pc2U8VEZpbGUgfCBudWxsPiB7XG4gICAgY29uc3QgZmlsZXMgPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgIGNvbnN0IGZvbGRlciA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9SZWdpc3Ryb1RpZW1wbztcbiAgICBmb3IgKGxldCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgICBpZiAoZmlsZS5wYXRoLnN0YXJ0c1dpdGgoZm9sZGVyKSkge1xuICAgICAgICAvLyBPYnRlbmVyIGxvcyBtZXRhZGF0b3MgZGVsIGFyY2hpdm8gZGVzZGUgbWV0YWRhdGFDYWNoZVxuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcblxuICAgICAgICAvLyBWZXJpZmljYXIgc2kgZWwgZnJvbnRtYXR0ZXIgY29udGllbmUgZWwgY2FtcG8gXCJlc3RhZG9cIiBjb24gZWwgdmFsb3IgXCJcdUQ4M0RcdURGRTJcIlxuICAgICAgICBpZiAobWV0YWRhdGE/LmZyb250bWF0dGVyPy5lc3RhZG8gPT09IFwiXHVEODNEXHVERkUyXCIpIHtcbiAgICAgICAgICByZXR1cm4gZmlsZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBTdXBvbmVtb3MgcXVlIGVzdGEgZnVuY2lcdTAwRjNuIHNlIHViaWNhclx1MDBFMSBlbiBhbGdcdTAwRkFuIGx1Z2FyIGRvbmRlIHB1ZWRhIGFjY2VkZXIgYSBgYXBwYCBkZSBPYnNpZGlhbi5cbiAgYXN5bmMgY3JlYXJPYmpldG9SZWdpc3RybyhwbHVnaW46IFBsdWdpbikge1xuICAgIGNvbnN0IGFjdGl2byA9IHBsdWdpbi5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcbiAgICBpZiAoIWFjdGl2bykge1xuICAgICAgLy8gUmV0b3JuYXIgdW4gb2JqZXRvIHJlZ2lzdHJvIHByZWRldGVybWluYWRvIHNpbiBhcmNoaXZvIGFjdGl2b1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYWN0aXZvOiBudWxsLFxuICAgICAgICBub21icmU6IFwiUmVnaXN0cm8gc2luIGFyY2hpdm8gYWN0aXZvXCIsXG4gICAgICAgIGZvbGRlcjogcGx1Z2luLnNldHRpbmdzLmZvbGRlcl9SZWdpc3Ryb1RpZW1wbyxcbiAgICAgICAgaW5kaWNlOiBwbHVnaW4uc2V0dGluZ3MuaW5kaWNlX1JlZ2lzdHJvVGllbXBvLFxuICAgICAgICBpZDogbnVsbCxcbiAgICAgICAgZmVjaGE6IHRoaXMuZm9ybWF0ZWFyRmVjaGEobmV3IERhdGUoKSksXG4gICAgICAgIGluZGljZV9EVkpTOiBgXCIke3BsdWdpbi5zZXR0aW5ncy5pbmRpY2VfUmVnaXN0cm9UaWVtcG99XCJgLFxuICAgICAgICBhbGlhc2VzOiBbXSAvLyBvIGluY2x1c28gcG9kclx1MDBFRGFzIGFzaWduYXIgYWxnXHUwMEZBbiBhbGlhcyBwb3IgZGVmZWN0byBzaSBsbyBkZXNlYXNcbiAgICAgIH07XG4gICAgfVxuICBcbiAgICBjb25zdCBmb2xkZXIgPSBwbHVnaW4uc2V0dGluZ3MuZm9sZGVyX1JlZ2lzdHJvVGllbXBvO1xuICAgIGNvbnN0IGluZGljZSA9IHBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfUmVnaXN0cm9UaWVtcG87XG4gIFxuICAgIGxldCBtYXhJZCA9IDA7XG4gICAgY29uc3QgZmlsZXMgPSBwbHVnaW4uYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcbiAgICBjb25zdCByZWdpc3Ryb3NFeGlzdGVudGVzID0gZmlsZXMuZmlsdGVyKChmaWxlOiB7IHBhdGg6IHN0cmluZyB9KSA9PlxuICAgICAgZmlsZS5wYXRoLnN0YXJ0c1dpdGgoZm9sZGVyKVxuICAgICk7XG4gIFxuICAgIHJlZ2lzdHJvc0V4aXN0ZW50ZXMuZm9yRWFjaCgoZmlsZTogYW55KSA9PiB7XG4gICAgICBjb25zdCBtZXRhZGF0YSA9IHBsdWdpbi5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk/LmZyb250bWF0dGVyO1xuICAgICAgaWYgKG1ldGFkYXRhICYmIG1ldGFkYXRhLmlkICYmICFpc05hTihtZXRhZGF0YS5pZCkpIHtcbiAgICAgICAgY29uc3QgaWQgPSBwYXJzZUludChtZXRhZGF0YS5pZCk7XG4gICAgICAgIGlmIChpZCA+IG1heElkKSBtYXhJZCA9IGlkO1xuICAgICAgfVxuICAgIH0pO1xuICBcbiAgICBjb25zdCBuZXh0SWQgPSBtYXhJZCArIDE7XG4gICAgY29uc3QgZmVjaGFDb21wbGV0YSA9IHRoaXMuZm9ybWF0ZWFyRmVjaGEobmV3IERhdGUoKSk7XG4gIFxuICAgIC8vIE9idGVuZXIgbG9zIG1ldGFkYXRvcyBkZWwgYXJjaGl2byBhY3Rpdm8gcGFyYSBleHRyYWVyIGFsaWFzZXNcbiAgICBjb25zdCBtZXRhZGF0YUFjdGl2byA9IHBsdWdpbi5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoYWN0aXZvKTtcbiAgICBjb25zdCBhbGlhc2VzID1cbiAgICAgIG1ldGFkYXRhQWN0aXZvICYmIG1ldGFkYXRhQWN0aXZvLmZyb250bWF0dGVyICYmIG1ldGFkYXRhQWN0aXZvLmZyb250bWF0dGVyLmFsaWFzZXNcbiAgICAgICAgPyBtZXRhZGF0YUFjdGl2by5mcm9udG1hdHRlci5hbGlhc2VzXG4gICAgICAgIDogW107XG4gIFxuICAgIHJldHVybiB7XG4gICAgICBhY3Rpdm8sXG4gICAgICBub21icmU6IGFjdGl2by5iYXNlbmFtZSxcbiAgICAgIGZvbGRlcixcbiAgICAgIGluZGljZSxcbiAgICAgIGlkOiBuZXh0SWQsXG4gICAgICBmZWNoYTogZmVjaGFDb21wbGV0YSxcbiAgICAgIGluZGljZV9EVkpTOiBgXCIke2luZGljZX1cImAsXG4gICAgICBhbGlhc2VzLCAvLyBTZSBhZ3JlZ2EgZWwgY2FtcG8gYWxpYXNlcyBhbCByZWdpc3Ryb1xuICAgIH07XG4gIH1cblxuICBmb3JtYXRlYXJGZWNoYShmZWNoYTogRGF0ZSk6IHN0cmluZyB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gZmVjaGEuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIDYwMDAwO1xuICAgIGNvbnN0IGZlY2hhTG9jYWwgPSBuZXcgRGF0ZShmZWNoYS5nZXRUaW1lKCkgLSBvZmZzZXQpO1xuICAgIGNvbnN0IGZlY2hhRm9ybWF0byA9IGZlY2hhTG9jYWwudG9JU09TdHJpbmcoKS5zcGxpdChcIlRcIilbMF07XG4gICAgY29uc3QgZGlhcyA9IFtcbiAgICAgIFwiRG9taW5nb1wiLFxuICAgICAgXCJMdW5lc1wiLFxuICAgICAgXCJNYXJ0ZXNcIixcbiAgICAgIFwiTWlcdTAwRTlyY29sZXNcIixcbiAgICAgIFwiSnVldmVzXCIsXG4gICAgICBcIlZpZXJuZXNcIixcbiAgICAgIFwiU1x1MDBFMWJhZG9cIixcbiAgICBdO1xuICAgIGNvbnN0IGRpYVNlbWFuYSA9IGRpYXNbZmVjaGEuZ2V0RGF5KCldO1xuICAgIGNvbnN0IGhvcmFGb3JtYXRvID0gZmVjaGEudG9UaW1lU3RyaW5nKCkuc3BsaXQoXCIgXCIpWzBdLnN1YnN0cmluZygwLCA1KTtcbiAgICByZXR1cm4gYCR7ZmVjaGFGb3JtYXRvfSAke2RpYVNlbWFuYX0gJHtob3JhRm9ybWF0b31gO1xuICB9XG5cbiAgLy8gTVx1MDBFOXRvZG8gcXVlIHZlcmlmaWNhIHNpIGhheSByZWdpc3Ryb3MgQUN0aXZvcyB5IHByZWd1bnRhIHNpIHF1aWVyZSBjZXJyYXJsb3MuXG4gIGFzeW5jIHZlcmlmaWNhclRhcmVhc0FjdGl2YXMocmVnaXN0cm86IGFueSwgYXBwOiBBcHApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBmaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG4gICAgY29uc3QgdGFyZWFzQWN0aXZhcyA9IFtdO1xuXG4gICAgZm9yIChsZXQgZmlsZSBvZiBmaWxlcykge1xuICAgICAgaWYgKGZpbGUucGF0aC5zdGFydHNXaXRoKHJlZ2lzdHJvLmZvbGRlcikpIHtcbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk/LmZyb250bWF0dGVyO1xuICAgICAgICBpZiAobWV0YWRhdGE/LmVzdGFkbyA9PT0gXCJcdUQ4M0RcdURGRTJcIikge1xuICAgICAgICAgIHRhcmVhc0FjdGl2YXMucHVzaCh7XG4gICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgdGl0dWxvOiBtZXRhZGF0YS50aXR1bG8sXG4gICAgICAgICAgICBhbGlhc2VzOiBtZXRhZGF0YS5hbGlhc2VzIHx8IGZpbGUuYmFzZW5hbWUsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGFyZWFzQWN0aXZhcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IHRhcmVhQWN0aXZhID0gdGFyZWFzQWN0aXZhc1swXTtcbiAgICAgIGNvbnN0IGRlc2VhRGV0ZW5lciA9IGF3YWl0IHRoaXMubW9zdHJhclN1Z2VyZW5jaWEoXG4gICAgICAgIGBMYSB0YXJlYSAke3RhcmVhQWN0aXZhLmFsaWFzZXN9IGVzdFx1MDBFMSBjb3JyaWVuZG8uIFx1MDBCRkRlc2VhIGRldGVuZXJsYT9gXG4gICAgICApO1xuICAgICAgaWYgKGRlc2VhRGV0ZW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5ldyBOb3RpY2UoYENyZWFjaVx1MDBGM24gZGUgcmVnaXN0cm8gY2FuY2VsYWRvIHBvciBlbCB1c3VhcmlvLmApO1xuICAgICAgICByZWdpc3Ryby5kZXRlbmVyID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGVzZWFEZXRlbmVyKSB7XG4gICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICBjb25zdCByZWdpc3Ryb1RpZW1wb0FQSW5zdGFuY2UgPSBuZXcgcmVnaXN0cm9UaWVtcG9BUEkodGhpcy5wbHVnaW4pO1xuICAgICAgICBhd2FpdCByZWdpc3Ryb1RpZW1wb0FQSW5zdGFuY2UuY2VycmFyUmVnaXN0cm8odGFyZWFBY3RpdmEuZmlsZSk7XG4gICAgICAgIHJlZ2lzdHJvLmRldGVuZXIgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ldyBOb3RpY2UoYExhIHRhcmVhICR7dGFyZWFBY3RpdmEuYWxpYXNlc30gc2VndWlyXHUwMEUxIHJlZ2lzdHJcdTAwRTFuZG9zZS5gKTtcbiAgICAgICAgcmVnaXN0cm8uZGV0ZW5lciA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRhcmVhc0FjdGl2YXMubGVuZ3RoID4gMSkge1xuICAgICAgbmV3IE5vdGljZShcbiAgICAgICAgXCJIYXkgdW4gZXJyb3IgY29uIGxhIGNhbnRpZGFkIGRlIHRhcmVhcyBjb3JyaWVuZG8gZW4gZXN0ZSBtb21lbnRvLlwiXG4gICAgICApO1xuICAgICAgcmVnaXN0cm8uZGV0ZW5lciA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiTm8gaGF5IG1cdTAwRTFzIHRhcmVhcyBjb3JyaWVuZG8uXCIpO1xuICAgICAgcmVnaXN0cm8uZGV0ZW5lciA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIG1vc3RyYXJTdWdlcmVuY2lhKG1lbnNhamU6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgc2VsZWNjaW9uYWRvID0gZmFsc2U7IC8vIEluZGljYSBzaSBzZSBoYSBoZWNobyB1bmEgc2VsZWNjaVx1MDBGM25cblxuICAgICAgY29uc3QgbW9kYWwgPSBuZXcgTW9kYWwoYXBwKTtcbiAgICAgIG1vZGFsLmNvbnRlbnRFbC5jcmVhdGVFbChcImgxXCIsIHsgdGV4dDogbWVuc2FqZSB9KTtcblxuICAgICAgLy8gQ3JlYXIgY29udGVuZWRvciBwYXJhIGJvdG9uZXNcbiAgICAgIGNvbnN0IGJ1dHRvbnNDb250YWluZXIgPSBtb2RhbC5jb250ZW50RWwuY3JlYXRlRWwoXCJkaXZcIik7XG5cbiAgICAgIC8vIEZ1bmNpXHUwMEYzbiBhdXhpbGlhciBwYXJhIG1hbmVqYXIgc2VsZWNjaW9uZXMgeSBjZXJyYXIgZWwgbW9kYWwgYWRlY3VhZGFtZW50ZVxuICAgICAgY29uc3QgaGFjZXJTZWxlY2Npb24gPSAoc2VsZWNjaW9uOiBib29sZWFuKSA9PiB7XG4gICAgICAgIHNlbGVjY2lvbmFkbyA9IHRydWU7IC8vIE1hcmNhciBxdWUgc2UgaGEgaGVjaG8gdW5hIHNlbGVjY2lcdTAwRjNuXG4gICAgICAgIG1vZGFsLmNsb3NlKCk7IC8vIENlcnJhciBlbCBtb2RhbFxuICAgICAgICByZXNvbHZlKHNlbGVjY2lvbik7IC8vIFJlc29sdmVyIGxhIHByb21lc2EgY29uIGxhIHNlbGVjY2lcdTAwRjNuXG4gICAgICB9O1xuXG4gICAgICAvLyBCb3RcdTAwRjNuIFNcdTAwRURcbiAgICAgIGNvbnN0IHllc0J1dHRvbiA9IGJ1dHRvbnNDb250YWluZXIuY3JlYXRlRWwoXCJidXR0b25cIiwge1xuICAgICAgICB0ZXh0OiBcIlNcdTAwRURcIixcbiAgICAgIH0pO1xuICAgICAgeWVzQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiBoYWNlclNlbGVjY2lvbih0cnVlKSk7XG5cbiAgICAgIC8vIEJvdFx1MDBGM24gTm9cbiAgICAgIGNvbnN0IG5vQnV0dG9uID0gYnV0dG9uc0NvbnRhaW5lci5jcmVhdGVFbChcImJ1dHRvblwiLCB7XG4gICAgICAgIHRleHQ6IFwiTm9cIixcbiAgICAgIH0pO1xuICAgICAgbm9CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IGhhY2VyU2VsZWNjaW9uKGZhbHNlKSk7XG5cbiAgICAgIG1vZGFsLm9uQ2xvc2UgPSAoKSA9PiB7XG4gICAgICAgIGlmICghc2VsZWNjaW9uYWRvKSB7XG4gICAgICAgICAgLy8gU2kgZWwgbW9kYWwgc2UgY2llcnJhIHNpbiBxdWUgc2UgaGF5YSBoZWNobyB1bmEgc2VsZWNjaVx1MDBGM24sIHJlY2hhemFyIGxhIHByb21lc2FcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiTW9kYWwgY2VycmFkbyBzaW4gc2VsZWNjaVx1MDBGM25cIikpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAvLyBBZ3JlZ2FyIGVzY3VjaGFzIGRlIGV2ZW50b3MgZGUgdGVjbGFkbyBwYXJhIHBlcm1pdGlyIGxhIG5hdmVnYWNpXHUwMEYzbiBjb24gZWwgdGVjbGFkb1xuICAgICAgbW9kYWwuY29udGVudEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChlOiB7IGtleTogYW55IH0pID0+IHtcbiAgICAgICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgICAgIGNhc2UgXCJBcnJvd0xlZnRcIjpcbiAgICAgICAgICAgIHllc0J1dHRvbi5mb2N1cygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIkFycm93UmlnaHRcIjpcbiAgICAgICAgICAgIG5vQnV0dG9uLmZvY3VzKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiRW50ZXJcIjpcbiAgICAgICAgICAgIC8vIFNpbXVsYSBjbGljIGVuIGVsIGJvdFx1MDBGM24gZW5mb2NhZG9cbiAgICAgICAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ/LmNsaWNrKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIEVuZm9jYXIgaW5pY2lhbG1lbnRlIGVsIGJvdFx1MDBGM24gJ1NcdTAwRUQnIHBhcmEgcGVybWl0aXIgbGEgbmF2ZWdhY2lcdTAwRjNuIGNvbiB0ZWNsYWRvIGRlc2RlIGVsIGluaWNpb1xuICAgICAgeWVzQnV0dG9uLmZvY3VzKCk7XG5cbiAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGRlZmluaXJUaXBvUmVnaXN0cm8ocmVnaXN0cm86IGFueSwgYXBwOiBBcHApIHtcbiAgICBjb25zdCB0b3RUYXJlYXMgPSBhd2FpdCB0aGlzLmVuY29udHJhclRhcmVhc1BlbmRpZW50ZXMoYXBwKTtcbiAgICBsZXQgb3BjaW9uZXNUaXR1bG86IHN0cmluZ1tdO1xuICAgIGxldCB2YWxvcmVzT3BjaW9uOiBzdHJpbmdbXTtcbiAgXG4gICAgaWYgKHJlZ2lzdHJvLmFjdGl2bykge1xuICAgICAgLy8gU2kgaGF5IGFyY2hpdm8gYWN0aXZvLCBzZSBkZXRlcm1pbmEgZWwgdmFsb3JNb3N0cmFyIGJhc2FkbyBlbiBhbGlhc2VzIG8gbm9tYnJlLlxuICAgICAgbGV0IHZhbG9yTW9zdHJhcjogc3RyaW5nO1xuICAgICAgaWYgKHJlZ2lzdHJvLmFsaWFzZXMgJiYgcmVnaXN0cm8uYWxpYXNlcy5sZW5ndGggPj0gMikge1xuICAgICAgICB2YWxvck1vc3RyYXIgPSByZWdpc3Ryby5hbGlhc2VzWzFdO1xuICAgICAgfSBlbHNlIGlmIChyZWdpc3Ryby5hbGlhc2VzICYmIHJlZ2lzdHJvLmFsaWFzZXMubGVuZ3RoID49IDEpIHtcbiAgICAgICAgdmFsb3JNb3N0cmFyID0gcmVnaXN0cm8uYWxpYXNlc1swXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbG9yTW9zdHJhciA9IHJlZ2lzdHJvLm5vbWJyZTtcbiAgICAgIH1cbiAgICAgIGlmICh0b3RUYXJlYXMubGVuZ3RoID4gMCkge1xuICAgICAgICBvcGNpb25lc1RpdHVsbyA9IFt2YWxvck1vc3RyYXIsIFwiQWxndW5hIHRhcmVhIGVuIEVqZWN1Y2lcdTAwRjNuXCIsIFwiT3Ryb1wiXTtcbiAgICAgICAgdmFsb3Jlc09wY2lvbiA9IFtcIk5vdGFcIiwgXCJUYXJlYVwiLCBcIk90cm9cIl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcGNpb25lc1RpdHVsbyA9IFt2YWxvck1vc3RyYXIsIFwiT3Ryb1wiXTtcbiAgICAgICAgdmFsb3Jlc09wY2lvbiA9IFtcIk5vdGFcIiwgXCJPdHJvXCJdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTaSBubyBoYXkgYXJjaGl2byBhY3Rpdm8sIHNlIG9taXRlIHZhbG9yTW9zdHJhci5cbiAgICAgIGlmICh0b3RUYXJlYXMubGVuZ3RoID4gMCkge1xuICAgICAgICBvcGNpb25lc1RpdHVsbyA9IFtcIkFsZ3VuYSB0YXJlYSBlbiBFamVjdWNpXHUwMEYzblwiLCBcIk90cm9cIl07XG4gICAgICAgIHZhbG9yZXNPcGNpb24gPSBbXCJUYXJlYVwiLCBcIk90cm9cIl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcGNpb25lc1RpdHVsbyA9IFtcIk90cm9cIl07XG4gICAgICAgIHZhbG9yZXNPcGNpb24gPSBbXCJPdHJvXCJdO1xuICAgICAgfVxuICAgIH1cbiAgXG4gICAgY29uc3QgcGxhY2Vob2xkZXIgPSBcIlx1MDBCRlNvYnJlIHF1XHUwMEU5IGVzIGVsIHJlZ2lzdHJvIGRlIHRpZW1wbz9cIjtcbiAgICBjb25zdCBtb2RhbE1lbnUxID0gbmV3IFNlbGVjY2lvbk1vZGFsVGFyZWFzKGFwcCwgb3BjaW9uZXNUaXR1bG8sIHZhbG9yZXNPcGNpb24sIHBsYWNlaG9sZGVyKTtcbiAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IGF3YWl0IG1vZGFsTWVudTEub3BlbkFuZEF3YWl0U2VsZWN0aW9uKCk7XG4gICAgICByZWdpc3Ryby50aXBvUmVnaXN0cm8gPSBzZWxlY3Rpb247XG4gIFxuICAgICAgc3dpdGNoIChyZWdpc3Ryby50aXBvUmVnaXN0cm8pIHtcbiAgICAgICAgY2FzZSBcIk5vdGFcIjpcbiAgICAgICAgICBpZiAocmVnaXN0cm8uYWN0aXZvKSB7XG4gICAgICAgICAgICByZWdpc3Ryby50aXR1bG8gPSByZWdpc3Ryby5ub21icmU7XG4gICAgICAgICAgICByZWdpc3Ryby5zaUFzdW50byA9IHRydWU7XG4gICAgICAgICAgICByZWdpc3Ryby50YXJlYSA9IGZhbHNlO1xuICAgICAgICAgICAgcmVnaXN0cm8gPSB0aGlzLmNvcGlhckNhbXBvcyhyZWdpc3Rybyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJObyBoYXkgbm90YSBhY3RpdmEgcGFyYSBhc2lnbmFyXCIpO1xuICAgICAgICAgICAgcmVnaXN0cm8udGlwb1JlZ2lzdHJvID0gXCJPdHJvXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiVGFyZWFcIjpcbiAgICAgICAgICBhd2FpdCB0aGlzLmVsZWdpclRhcmVhUGFyYVJlZ2lzdHJvKGFwcCwgcmVnaXN0cm8sIHRvdFRhcmVhcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgbGV0IHJlc3B1ZXN0YSA9IGF3YWl0IHRoaXMubWVudU90cm8ubWVudU90cm8oYXBwLCByZWdpc3Rybyk7XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihyZWdpc3RybywgcmVzcHVlc3RhKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIG8gbW9kYWwgY2VycmFkbyBzaW4gc2VsZWNjaVx1MDBGM246XCIsIGVycm9yKTtcbiAgICAgIC8vIEFxdVx1MDBFRCBzZSBwb2RyXHUwMEVEYSBtYW5lamFyIGVsIGNhc28gZGUgY2llcnJlIHNpbiBzZWxlY2NpXHUwMEYzbiwgcG9yIGVqZW1wbG8sIGVzdGFibGVjaWVuZG8gcmVnaXN0cm8uZGV0ZW5lci5cbiAgICB9XG4gIH1cblxuICBjb3BpYXJDYW1wb3MocmVnaXN0cm8pe1xuICAgIGxldCBub21icmUgPSByZWdpc3Ryby5hY3Rpdm8uYmFzZW5hbWU7XG4gICAgbGV0IG5vdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUocmVnaXN0cm8uYWN0aXZvKTtcbiAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIFBST1lFQ1RPUyBERSBRIFkgUFJPWUVDVE8gR1REXG4gICAgICAgIGlmIChub3RhLmZyb250bWF0dGVyPy50eXBlID09PSBcIlBRXCIpeyBcbiAgICAgICAgICAvLyBDVUFORE8gTEEgTk9UQSBBQ1RJVkEgRVMgVU4gUFEuXG4gICAgICAgICAgcmVnaXN0cm8ucHJveWVjdG9RID0gbm9tYnJlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIFBST1lFQ1RPU0dURFxuICAgICAgICAgIC8vIEluaWNpYWxpemFtb3MgcmVnaXN0cm8ucHJveWVjdG9HVEQgY29uIHVuIHZhbG9yIHByZWRldGVybWluYWRvIGRlIGNhZGVuYSB2YWNcdTAwRURhXG4gICAgICAgICAgcmVnaXN0cm8ucHJveWVjdG9HVEQgPSBcIlwiO1xuICAgICAgICAgIC8vIFZlcmlmaWNhbW9zIHNpIG5vdGEucHJveWVjdG9HVEQgZXhpc3RlIHkgZXMgdW4gYXJyZWdsb1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQpKSB7XG4gICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIGl0ZXJhbW9zIHNvYnJlIGNhZGEgZWxlbWVudG9cbiAgICAgICAgICAgICAgcmVnaXN0cm8ucHJveWVjdG9HVEQgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1RELm1hcChlbGVtZW50byA9PiBcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobm90YS5mcm9udG1hdHRlci5wcm95ZWN0b0dURCkge1xuICAgICAgICAgICAgICAvLyBTaSBleGlzdGUgcGVybyBubyBlcyB1biBhcnJlZ2xvLCBhcGxpY2Ftb3MgZWwgcmVnZXggZGlyZWN0YW1lbnRlXG4gICAgICAgICAgICAgIHJlZ2lzdHJvLnByb3llY3RvR1REID0gbm90YS5mcm9udG1hdHRlci5wcm95ZWN0b0dURC5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBTaSBub3RhLnByb3llY3RvR1REIG5vIGV4aXN0ZSwgcmVnaXN0cm8ucHJveWVjdG9HVEQgeWEgZXN0XHUwMEUxIGVzdGFibGVjaWRvIGVuIFwiXCIgcG9yIGRlZmVjdG9cbiAgICAgICAgICAvLyBPYnRlbmVyIFByb3llY3RvUSB5IFByb3llY3RvIEdURCBjdWFuZG8gbGEgbm90YSBlcyBQcm95ZWN0b0dURC5cbiAgICAgICAgICAgfSBlbHNlIGlmIChub3RhLmZyb250bWF0dGVyPy50eXBlID09PSBcIlBHVERcIil7XG4gICAgICAgICAgIFxuICAgICAgICAgICAvLyBDVUFORE8gTEEgTk9UQSBBQ1RJVkEgRVMgVU4gR1RELlxuICAgICAgICAgICAvLyBWRVJJRklDQUNJT04gREUgUFJPWUVDVE9TR1REXG4gICAgICAgICAgIHJlZ2lzdHJvLnByb3llY3RvR1REID0gW25vbWJyZV07XG5cbiAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm90YS5mcm9udG1hdHRlci5wcm95ZWN0b0dURCkpIHtcbiAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIHV0aWxpemFtb3MgY29uY2F0IHBhcmEgYVx1MDBGMWFkaXIgbG9zIGVsZW1lbnRvcyB5YSBwcm9jZXNhZG9zIGNvbiBlbCByZWdleCBhbCBhcnJlZ2xvIHJlZ2lzdHJvLnByb3llY3RvR1REXG4gICAgICAgICAgICAgICByZWdpc3Ryby5wcm95ZWN0b0dURCA9IHJlZ2lzdHJvLnByb3llY3RvR1RELmNvbmNhdChub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1RELm1hcChlbGVtZW50byA9PiBcbiAgICAgICAgICAgICAgICAgICBlbGVtZW50by5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKSk7XG4gICAgICAgICAgIH0gZWxzZSBpZiAobm90YS5mcm9udG1hdHRlci5wcm95ZWN0b0dURCkge1xuICAgICAgICAgICAgICAgLy8gU2kgZXhpc3RlIHBlcm8gbm8gZXMgdW4gYXJyZWdsbywgYXBsaWNhbW9zIGVsIHJlZ2V4IGRpcmVjdGFtZW50ZSB5IHVzYW1vcyBwdXNoIHBhcmEgYWdyZWdhcmxvIGEgcmVnaXN0cm8ucHJveWVjdG9HVERcbiAgICAgICAgICAgICAgIHJlZ2lzdHJvLnByb3llY3RvR1RELnB1c2gobm90YS5mcm9udG1hdHRlci5wcm95ZWN0b0dURC5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKTtcbiAgICAgICAgICAgfVxuICAgICAgICAgICBcbiAgICAgICAgICAgLy8gU2kgbm90YS5wcm95ZWN0b0dURCBubyBleGlzdGUsIHJlZ2lzdHJvLnByb3llY3RvR1REIHlhIGVzdFx1MDBFMSBlc3RhYmxlY2lkbyBlbiBcIlwiIHBvciBkZWZlY3RvXG4gICAgICAgICAgIHJlZ2lzdHJvLnByb3llY3RvUSA9IFwiXCI7XG4gICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9RKSkge1xuICAgICAgICAgICAgICAvLyBTaSBlcyB1biBhcnJlZ2xvLCBpdGVyYW1vcyBzb2JyZSBjYWRhIGVsZW1lbnRvXG4gICAgICAgICAgICAgIHJlZ2lzdHJvLnByb3llY3RvUSA9IG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9RLm1hcChlbGVtZW50byA9PiBcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobm90YS5mcm9udG1hdHRlci5wcm95ZWN0b1EpIHtcbiAgICAgICAgICAgICAgLy8gU2kgZXhpc3RlIHBlcm8gbm8gZXMgdW4gYXJyZWdsbywgYXBsaWNhbW9zIGVsIHJlZ2V4IGRpcmVjdGFtZW50ZVxuICAgICAgICAgICAgICByZWdpc3Ryby5wcm95ZWN0b1EgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvUS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgIH1cblxuXG4gICAgICAgICAgIH1cbiAgICAgICAgICAgLy8gT2J0ZW5lciBQcm95ZWN0b1EgeSBQcm95ZWN0byBHVEQgY3VhbmRvIGxhIG5vdGEgZXMgb3RyYSBjb3NhIHF1ZSBubyBlcyBwcm95ZWN0b1xuICAgICAgICAgICBlbHNle1xuXG4gICAgICAgICAgICAgIHJlZ2lzdHJvLnByb3llY3RvUSA9IFwiXCI7XG4gICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGE/LmZyb250bWF0dGVyPy5wcm95ZWN0b1EpKSB7XG4gICAgICAgICAgICAgICAgICAvLyBTaSBlcyB1biBhcnJlZ2xvLCBpdGVyYW1vcyBzb2JyZSBjYWRhIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICByZWdpc3Ryby5wcm95ZWN0b1EgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvUS5tYXAoZWxlbWVudG8gPT4gXG4gICAgICAgICAgICAgICAgICAgICAgZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LnByb3llY3RvUSkge1xuICAgICAgICAgICAgICAgICAgLy8gU2kgZXhpc3RlIHBlcm8gbm8gZXMgdW4gYXJyZWdsbywgYXBsaWNhbW9zIGVsIHJlZ2V4IGRpcmVjdGFtZW50ZVxuICAgICAgICAgICAgICAgICAgcmVnaXN0cm8ucHJveWVjdG9RID0gbm90YS5mcm9udG1hdHRlci5wcm95ZWN0b1EucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJlZ2lzdHJvLnByb3llY3RvR1REID0gXCJcIjtcbiAgICAgICAgICAgICAgLy8gVmVyaWZpY2Ftb3Mgc2kgbm90YS5wcm95ZWN0b0dURCBleGlzdGUgeSBlcyB1biBhcnJlZ2xvXG4gICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGE/LmZyb250bWF0dGVyPy5wcm95ZWN0b0dURCkpIHtcbiAgICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIGl0ZXJhbW9zIHNvYnJlIGNhZGEgZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgIHJlZ2lzdHJvLnByb3llY3RvR1REID0gbm90YS5mcm9udG1hdHRlci5wcm95ZWN0b0dURC5tYXAoZWxlbWVudG8gPT4gXG4gICAgICAgICAgICAgICAgICAgICAgZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LnByb3llY3RvR1REKSB7XG4gICAgICAgICAgICAgICAgICAvLyBTaSBleGlzdGUgcGVybyBubyBlcyB1biBhcnJlZ2xvLCBhcGxpY2Ftb3MgZWwgcmVnZXggZGlyZWN0YW1lbnRlXG4gICAgICAgICAgICAgICAgICByZWdpc3Ryby5wcm95ZWN0b0dURCA9IG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFZlcmlmaWNhbW9zIGFyZWFJbnRlcmVzIFxuICAgICAgICAgIHJlZ2lzdHJvLmFyZWFJbnRlcmVzID0gW107XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm90YT8uZnJvbnRtYXR0ZXI/LmFyZWFJbnRlcmVzKSkge1xuICAgICAgICAgICAgICAvLyBTaSBlcyB1biBhcnJlZ2xvLCBpdGVyYW1vcyBzb2JyZSBjYWRhIGVsZW1lbnRvIChleGNsdXllbmRvIGVsIHByaW1lciBlbGVtZW50byB5YSBhZ3JlZ2FkbyBxdWUgZXMgbm90YS50aXR1bG8pXG4gICAgICAgICAgICAgIC8vIHkgYXBsaWNhbW9zIGVsIHJlZ2V4IGEgY2FkYSBlbGVtZW50by4gTHVlZ28gY29uY2F0ZW5hbW9zIGNvbiBlbCBhcnJheSBleGlzdGVudGUuXG4gICAgICAgICAgICAgIHJlZ2lzdHJvLmFyZWFJbnRlcmVzID0gcmVnaXN0cm8uYXJlYUludGVyZXMuY29uY2F0KG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMubWFwKGVsZW1lbnRvID0+IFxuICAgICAgICAgICAgICAgICAgZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIFNpIG5vIGVzIHVuIGFycmVnbG8sIHJldmlzYW1vcyBzaSBub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzIGV4aXN0ZVxuICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LmFyZWFJbnRlcmVzKSB7XG4gICAgICAgICAgICAgICAgICAvLyBTaSBleGlzdGUsIGFwbGljYW1vcyBlbCByZWdleCB5IGxvIGFcdTAwRjFhZGltb3MgY29tbyBzZWd1bmRvIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICByZWdpc3Ryby5hcmVhSW50ZXJlcy5wdXNoKG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gVmVyaWZpY2Ftb3MgQXJlYVZpZGFcbiAgICAgICAgICByZWdpc3Ryby5hcmVhVmlkYSA9IFwiXCI7XG4gICAgICAgICAgaWYgKG5vdGE/LmZyb250bWF0dGVyPy5hcmVhVmlkYSkge1xuICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhKSkge1xuICAgICAgICAgICAgICAgICAgLy8gRXMgdW4gYXJyZWdsbywgdXNhIGVsIHByaW1lciBlbGVtZW50b1xuICAgICAgICAgICAgICAgICAgcmVnaXN0cm8uYXJlYVZpZGEgPSBub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhWzBdLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAvLyBFcyB1biBzdHJpbmdcbiAgICAgICAgICAgICAgICAgIHJlZ2lzdHJvLmFyZWFWaWRhID0gbm90YS5mcm9udG1hdHRlci5hcmVhVmlkYS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gTm8gZXN0XHUwMEUxIGRlZmluaWRvIG8gZXN0XHUwMEUxIHZhY1x1MDBFRG9cbiAgICAgICAgICAgICAgcmVnaXN0cm8uYXJlYVZpZGEgPSBcIk5vIGVzIGRlIG5pbmdcdTAwRkFuIEFyZWEgZGUgVmlkYVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVnaXN0cm87XG4gIH1cblxuICBhc3luYyBlbmNvbnRyYXJUYXJlYXNQZW5kaWVudGVzKGFwcDogQXBwKTogUHJvbWlzZTx7IHRhcmVhOiBzdHJpbmc7IGFyY2hpdm86IFRGaWxlIH1bXT4ge1xuICAgIGxldCB0YXJlYXNQZW5kaWVudGVzOiB7IHRhcmVhOiBzdHJpbmc7IGFyY2hpdm86IFRGaWxlIH1bXSA9IFtdO1xuICAgIGNvbnN0IGFyY2hpdm9zID0gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcbiAgICBcbiAgICAvLyBFeGNsdWlyIGFyY2hpdm9zIHF1ZSBlc3RcdTAwRTFuIGVuIGNhcnBldGFzIGluZGVzZWFkYXNcbiAgICBjb25zdCBhcmNoaXZvc1JlbGV2YW50ZXMgPSBhcmNoaXZvcy5maWx0ZXIoKGFyY2hpdm86IFRGaWxlKSA9PiB7XG4gICAgICByZXR1cm4gIWFyY2hpdm8ucGF0aC5pbmNsdWRlcyhcIlBsYW50aWxsYXNcIikgJiYgIWFyY2hpdm8ucGF0aC5pbmNsdWRlcyhcIkVzdHJ1Y3R1cmEvR1REL1Npc3RlbWEgR1REL1Npc3RlbWFcIikgJiYgIWFyY2hpdm8ucGF0aC5pbmNsdWRlcyhcIkFyY2hpdm9cIik7XG4gICAgfSk7XG4gIFxuICAgIGZvciAoY29uc3QgYXJjaGl2byBvZiBhcmNoaXZvc1JlbGV2YW50ZXMpIHtcbiAgICAgIGNvbnN0IGNvbnRlbmlkbyA9IGF3YWl0IGFwcC52YXVsdC5yZWFkKGFyY2hpdm8pO1xuICAgICAgY29uc3QgY29pbmNpZGVuY2lhcyA9IGNvbnRlbmlkby5tYXRjaCgvXiAqLSBcXFtcXC9cXF0gLiovZ20pIHx8IFtdO1xuICBcbiAgICAgIC8vIFBvciBjYWRhIHRhcmVhIGVuY29udHJhZGEsIHNlIGNyZWEgdW4gb2JqZXRvIGNvbiBsYSB0YXJlYSBsaW1waWEgeSBlbCBhcmNoaXZvIGFjdHVhbC5cbiAgICAgIGNvbnN0IHRhcmVhc0NvbkFyY2hpdm8gPSBjb2luY2lkZW5jaWFzLm1hcCgodGFyZWE6IHN0cmluZykgPT4ge1xuICAgICAgICByZXR1cm4geyB0YXJlYTogdGFyZWEudHJpbSgpLCBhcmNoaXZvOiBhcmNoaXZvIH07XG4gICAgICB9KTtcbiAgICAgIHRhcmVhc1BlbmRpZW50ZXMgPSB0YXJlYXNQZW5kaWVudGVzLmNvbmNhdCh0YXJlYXNDb25BcmNoaXZvKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmVhc1BlbmRpZW50ZXM7XG4gIH1cblxuYXN5bmMgZWxlZ2lyVGFyZWFQYXJhUmVnaXN0cm8oXG4gIGFwcDogQXBwLFxuICByZWdpc3RybzogYW55LFxuICB0YXJlYXNQZW5kaWVudGVzOiB7IHRhcmVhOiBzdHJpbmc7IGFyY2hpdm86IFRGaWxlIH1bXVxuKSB7XG4gIGNvbnN0IHBsYWNlaG9sZGVyID0gXCJFbGlnZSBsYSB0YXJlYSBxdWUgdmFzIGEgcmVnaXN0cmFyLlwiO1xuXG4gIC8vIExpbXBpYSBlbCB0ZXh0byBkZSBjYWRhIHRhcmVhXG4gIGNvbnN0IHByb21lc2FzTGltcGlhcyA9IHRhcmVhc1BlbmRpZW50ZXMubWFwKCh0YXJlYU9iaikgPT5cbiAgICB0aGlzLmxpbXBpYXJUZXh0b1RhcmVhKHRhcmVhT2JqLnRhcmVhKVxuICApO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgdGFyZWFzTGltcGlhcyA9IGF3YWl0IFByb21pc2UuYWxsKHByb21lc2FzTGltcGlhcyk7XG5cbiAgICAvLyBDb25zdHJ1eWUgZWwgbGlzdGFkbyBwYXJhIGVsIG1vZGFsOiBjYWRhIG9wY2lcdTAwRjNuIGVzIGVsIGFsaWFzIChvIG5vbWJyZSkgY29uY2F0ZW5hZG8gY29uIGVsIHRleHRvIGxpbXBpbyBkZSBsYSB0YXJlYVxuICAgIGNvbnN0IGRpc3BsYXlPcHRpb25zOiBzdHJpbmdbXSA9IFtdO1xuICAgIGNvbnN0IHZhbHVlczogbnVtYmVyW10gPSBbXTsgLy8gc2UgdXNhclx1MDBFMSBlbCBcdTAwRURuZGljZSBvIGFsZ1x1MDBGQW4gdmFsb3IgaWRlbnRpZmljYWRvclxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YXJlYXNQZW5kaWVudGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB7IHRhcmVhLCBhcmNoaXZvIH0gPSB0YXJlYXNQZW5kaWVudGVzW2ldO1xuICAgICAgY29uc3QgdGV4dG9UYXJlYSA9IHRhcmVhc0xpbXBpYXNbaV07XG5cbiAgICAgIGxldCBhbGlhc0Rpc3BsYXkgPSBcIlwiO1xuICAgICAgLy8gT2J0ZW5lciBsYSBtZXRhZGF0YSBkZWwgYXJjaGl2byBwYXJhIHZlciBzaSB0aWVuZSBhbGlhc2VzIGVuIGVsIGZyb250bWF0dGVyXG4gICAgICBjb25zdCBtZXRhZGF0YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShhcmNoaXZvKTtcbiAgICAgIGlmIChtZXRhZGF0YT8uZnJvbnRtYXR0ZXI/LmFsaWFzZXMpIHtcbiAgICAgICAgbGV0IGFsaWFzZXMgPSBtZXRhZGF0YS5mcm9udG1hdHRlci5hbGlhc2VzO1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYWxpYXNlcykpIGFsaWFzZXMgPSBbYWxpYXNlc107XG4gICAgICAgIGlmIChhbGlhc2VzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgICAgYWxpYXNEaXNwbGF5ID0gYWxpYXNlc1sxXTtcbiAgICAgICAgfSBlbHNlIGlmIChhbGlhc2VzLmxlbmd0aCA+PSAxKSB7XG4gICAgICAgICAgYWxpYXNEaXNwbGF5ID0gYWxpYXNlc1swXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2kgbm8gc2UgZW5jb250clx1MDBGMyBuaW5nXHUwMEZBbiBhbGlhcywgc2UgdXNhIGVsIG5vbWJyZSBkZWwgYXJjaGl2b1xuICAgICAgaWYgKCFhbGlhc0Rpc3BsYXkpIHtcbiAgICAgICAgYWxpYXNEaXNwbGF5ID0gYXJjaGl2by5iYXNlbmFtZTtcbiAgICAgIH1cblxuICAgICAgLy8gQ29uY2F0ZW5hciBlbCBhbGlhc0Rpc3BsYXkgKG8gbm9tYnJlKSBjb24gZWwgdGV4dG8gZGUgbGEgdGFyZWEsIHNlcGFyYWRvIHBvciBcIiAvIFwiXG4gICAgICBjb25zdCBkaXNwbGF5VGV4dCA9IGAke2FsaWFzRGlzcGxheX0gLyAke3RleHRvVGFyZWF9YDtcbiAgICAgIGRpc3BsYXlPcHRpb25zLnB1c2goZGlzcGxheVRleHQpO1xuICAgICAgdmFsdWVzLnB1c2goaSk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXIgZWwgbW9kYWwgcGFzYW5kbyBsYXMgb3BjaW9uZXMgY29uY2F0ZW5hZGFzIHkgdXNhbmRvIGxvcyBcdTAwRURuZGljZXMgY29tbyB2YWxvcmVzIGRlIHNlbGVjY2lcdTAwRjNuXG4gICAgY29uc3QgbW9kYWxNZW51ID0gbmV3IFNlbGVjY2lvbk1vZGFsVGFyZWFzKGFwcCwgZGlzcGxheU9wdGlvbnMsIHZhbHVlcywgcGxhY2Vob2xkZXIpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzZWxlY3RlZEluZGV4ID0gYXdhaXQgbW9kYWxNZW51Lm9wZW5BbmRBd2FpdFNlbGVjdGlvbigpO1xuICAgICAgLy8gU2Ugb2J0aWVuZSBsYSB0YXJlYSBjb3JyZXNwb25kaWVudGUgYSBsYSBvcGNpXHUwMEYzbiBzZWxlY2Npb25hZGFcbiAgICAgIGNvbnN0IHNlbGVjY2lvbiA9IHRhcmVhc1BlbmRpZW50ZXNbc2VsZWN0ZWRJbmRleF07XG4gICAgICByZWdpc3Ryby50aXR1bG8gPSBhd2FpdCB0aGlzLmxpbXBpYXJUZXh0b1RhcmVhKHNlbGVjY2lvbi50YXJlYSk7XG4gICAgICByZWdpc3Ryby5ub21icmUgPSBzZWxlY2Npb24uYXJjaGl2by5iYXNlbmFtZTtcbiAgICAgIHJlZ2lzdHJvLmFyY2hpdm9UYXJlYSA9IHNlbGVjY2lvbi5hcmNoaXZvO1xuICAgICAgcmVnaXN0cm8uc2lBc3VudG8gPSB0cnVlO1xuICAgICAgcmVnaXN0cm8udGFyZWEgPSB0cnVlO1xuICAgICAgcmVnaXN0cm8gPSB0aGlzLmNvcGlhckNhbXBvcyhyZWdpc3Rybyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJlZ2lzdHJvLmRldGVuZXIgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIG8gbW9kYWwgY2VycmFkbyBzaW4gc2VsZWNjaVx1MDBGM246XCIsIGVycm9yKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkh1Ym8gdW4gZXJyb3IgYWwgbGltcGlhciBsYXMgdGFyZWFzOlwiLCBlcnJvcik7XG4gIH1cbn1cblxubGltcGlhclRleHRvVGFyZWEodGl0dWxvOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAvLyBTZSB0b21hIHNvbG8gbGEgcHJpbWVyYSBsXHUwMEVEbmVhXG4gICAgbGV0IHRleHRvTGltcGlvID0gdGl0dWxvLnNwbGl0KFwiXFxuXCIpWzBdO1xuXG4gICAgLy8gVHJhbnNmb3JtYSBsYXMgc2VjY2lvbmVzIHF1ZSBlbXBpZXphbiBwb3IgXCIjXCI6XG4gICAgLy8gUG9yIGVqZW1wbG86IFwiI2N4L0dlc3RpXHUwMEYzblBlcnNvbmFsL1BsYW5TZW1hbmFsXCIgc2UgdHJhbnNmb3JtYSBlbiBcImN4X0dlc3Rpb25QZXJzb25hbF9QbGFuU2VtYW5hbFwiXG4gICAgdGV4dG9MaW1waW8gPSB0ZXh0b0xpbXBpby5yZXBsYWNlKC8jKFtcXHctL10rKS9nLCAobWF0Y2gsIHAxKSA9PiB7XG4gICAgICBsZXQgdHJhbnNmb3JtYWRvID0gcDEucmVwbGFjZSgvXFwvL2csIFwiX1wiKTtcbiAgICAgIC8vIEVsaW1pbmEgYWNlbnRvcyB1c2FuZG8gbm9ybWFsaXphY2lcdTAwRjNuIFVuaWNvZGVcbiAgICAgIHRyYW5zZm9ybWFkbyA9IHRyYW5zZm9ybWFkby5ub3JtYWxpemUoXCJORkRcIikucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgXCJcIik7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtYWRvO1xuICAgIH0pO1xuXG4gICAgLy8gRWxpbWluYSBsb3MgY2FtcG9zIGRlIGVzdGlsbyBEYXRhdmlldywgcG9yIGVqZW1wbG8gW2NhbXBvOjp2YWxvcl1cbiAgICB0ZXh0b0xpbXBpbyA9IHRleHRvTGltcGlvLnJlcGxhY2UoL1xcW1xcdys6OlteXFxdXStcXF0vZywgXCJcIik7XG5cbiAgICAvLyBFbGltaW5hIGVsIHBhdHJcdTAwRjNuIFwiIC0gWy9dXCIgYWwgaW5pY2lvIGRlIGxhIGNhZGVuYSwgY29uIHBvc2libGVzIGVzcGFjaW9zXG4gICAgdGV4dG9MaW1waW8gPSB0ZXh0b0xpbXBpby5yZXBsYWNlKC9eXFxzKi1cXHMqXFxbXFwvXFxdXFxzKi8sIFwiXCIpO1xuXG4gICAgLy8gRWxpbWluYSBsb3MgZW1vamlzIGRlIFRhc2tzIGp1bnRvIGNvbiBsYSBmZWNoYSBxdWUgdmllbmUgaW5tZWRpYXRhbWVudGUgZGVzcHVcdTAwRTlzLlxuICAgIC8vIFNlIGFzdW1lIHF1ZSBsYSBmZWNoYSB0aWVuZSBmb3JtYXRvIFlZWVktTU0tREQsIG9wY2lvbmFsbWVudGUgc2VndWlkYSBkZSBob3JhLlxuICAgIHRleHRvTGltcGlvID0gdGV4dG9MaW1waW8ucmVwbGFjZShcbiAgICAgIC9cXHB7RXh0ZW5kZWRfUGljdG9ncmFwaGljfVxccypcXGR7NH0tXFxkezJ9LVxcZHsyfSg/OlxccypcXGR7Mn06XFxkezJ9KD86OlxcZHsyfSk/KT8vZ3UsXG4gICAgICBcIlwiXG4gICAgKTtcblxuICAgIC8vIEVsaW1pbmEgY3VhbHF1aWVyIG90cm8gZW1vamkgcXVlIHF1ZWRlXG4gICAgdGV4dG9MaW1waW8gPSB0ZXh0b0xpbXBpby5yZXBsYWNlKC9cXHB7RXh0ZW5kZWRfUGljdG9ncmFwaGljfS9ndSwgXCJcIik7XG5cbiAgICAvLyBFbGltaW5hIGN1YWxxdWllciBjb250ZW5pZG8gcXVlIGVzdFx1MDBFOSBlbnRyZSBjb3JjaGV0ZXMgY3VhZHJhZG9zIChpbmNsdXllbmRvIGxvcyBjb3JjaGV0ZXMpXG4gICAgdGV4dG9MaW1waW8gPSB0ZXh0b0xpbXBpby5yZXBsYWNlKC9cXFtbXlxcXV0qXFxdL2csIFwiXCIpO1xuXG4gICAgLy8gUmVlbXBsYXphIGNhcmFjdGVyZXMgbm8gcGVybWl0aWRvcyBlbiBub21icmVzIGRlIGFyY2hpdm8gY29uIHVuIGd1aW9uIGJham9cbiAgICBjb25zdCBjYXJhY3RlcmVzTm9QZXJtaXRpZG9zID0gL1s8PjpcIlxcL1xcXFx8PypcXHgwMC1cXHgxRl0vZztcbiAgICB0ZXh0b0xpbXBpbyA9IHRleHRvTGltcGlvLnJlcGxhY2UoY2FyYWN0ZXJlc05vUGVybWl0aWRvcywgXCJfXCIpO1xuXG4gICAgLy8gUmVlbXBsYXphIGVzcGFjaW9zIG1cdTAwRkFsdGlwbGVzIHBvciB1biBcdTAwRkFuaWNvIGVzcGFjaW9cbiAgICB0ZXh0b0xpbXBpbyA9IHRleHRvTGltcGlvLnJlcGxhY2UoL1xccysvZywgXCIgXCIpO1xuXG4gICAgcmVzb2x2ZSh0ZXh0b0xpbXBpby50cmltKCkpO1xuICB9KTtcbn1cblxuYXN5bmMgY29uc3RydWlyTm9tYnJleUFsaWFzKHJlZ2lzdHJvOiBhbnksIGFwcDogQXBwKSB7XG4gIC8vIDEuIENhbGN1bGFyIGVsIFx1MDBGQWx0aW1vIGlkU2VjIGV4aXN0ZW50ZSBwYXJhIGVzdGUgdFx1MDBFRHR1bG9cbiAgY29uc3QgbWF4SWRTZWMgPSBhd2FpdCB0aGlzLmNhbGN1bGFyVWx0aW1vSWRTZWMocmVnaXN0cm8udGl0dWxvLCByZWdpc3Ryby5mb2xkZXIsIGFwcCk7XG4gIHJlZ2lzdHJvLmlkU2VjID0gbWF4SWRTZWMgKyAxO1xuICBcbiAgLy8gMi4gRGVmaW5pciBlbCBzdWZpam86IHBhcmEgaWRTZWMgPiAxIHNlIGFcdTAwRjFhZGUgXCIgLSBpZFNlY1wiLCBzaW5vIHF1ZWRhIHZhY1x1MDBFRG9cbiAgY29uc3Qgc3VmZml4ID0gcmVnaXN0cm8uaWRTZWMgPiAxID8gYCAtICR7cmVnaXN0cm8uaWRTZWN9YCA6IFwiXCI7XG4gIFxuICAvLyAzLiBHdWFyZGFyIHVuYSBjb3BpYSBkZSBsb3MgYWxpYXNlcyBvcmlnaW5hbGVzIGRlIGxhIG5vdGFcbiAgY29uc3Qgb3JpZ2luYWxBbGlhc2VzID0gQXJyYXkuaXNBcnJheShyZWdpc3Ryby5hbGlhc2VzKSA/IFsuLi5yZWdpc3Ryby5hbGlhc2VzXSA6IFtdO1xuICBcbiAgLy8gNC4gTGltcGlhciBjdWFscXVpZXIgcHJlZmlqbyBSVCBwYXJhIGV2aXRhciBkdXBsaWNhY2lvbmVzXG4gIGZ1bmN0aW9uIGNsZWFuUHJlZml4KHZhbHVlKSB7XG4gICAgaWYgKCF2YWx1ZSkgcmV0dXJuIFwiXCI7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL15SVCAtXFxzKi8sIFwiXCIpLnRyaW0oKTtcbiAgfVxuICBcbiAgLy8gNS4gQ3JlYXIgbnVldm9zIGFsaWFzZXMgc2VnXHUwMEZBbiBlbCB0aXBvIGRlIHJlZ2lzdHJvXG4gIGlmICghcmVnaXN0cm8udGFyZWEpIHtcbiAgICAvLyBDQVNPIDE6IFJlZ2lzdHJvIGRpcmVjdG8gc29icmUgbGEgbm90YVxuICAgIGNvbnN0IG5vdGVOYW1lID0gY2xlYW5QcmVmaXgocmVnaXN0cm8ubm9tYnJlIHx8IFwiXCIpO1xuICAgIFxuICAgIC8vIENyZWFyIGFycmF5IGRlIG51ZXZvcyBhbGlhc2VzXG4gICAgY29uc3QgbmV3QWxpYXNlcyA9IFtcbiAgICAgIGBSVCAtICR7bm90ZU5hbWV9JHtzdWZmaXh9YCAvLyBBbGlhcyAwOiBOb21icmUgZGUgbGEgbm90YSArIHN1Zmlqb1xuICAgIF07XG4gICAgXG4gICAgLy8gU2kgaGF5IGFsaWFzZXMgb3JpZ2luYWxlcywgdXNhcmxvcyBwYXJhIGVsIHNlZ3VuZG8geSB0ZXJjZXIgYWxpYXNcbiAgICBpZiAob3JpZ2luYWxBbGlhc2VzLmxlbmd0aCA+PSAxKSB7XG4gICAgICBuZXdBbGlhc2VzLnB1c2goYFJUIC0gJHtjbGVhblByZWZpeChvcmlnaW5hbEFsaWFzZXNbMF0pfSR7c3VmZml4fWApOyAvLyBBbGlhcyAxOiBQcmltZXIgYWxpYXMgZGUgbGEgbm90YVxuICAgICAgXG4gICAgICBpZiAob3JpZ2luYWxBbGlhc2VzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgIG5ld0FsaWFzZXMucHVzaChgUlQgLSAke2NsZWFuUHJlZml4KG9yaWdpbmFsQWxpYXNlc1sxXSl9JHtzdWZmaXh9YCk7IC8vIEFsaWFzIDI6IFNlZ3VuZG8gYWxpYXMgZGUgbGEgbm90YVxuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZWdpc3Ryby5hbGlhc2VzID0gbmV3QWxpYXNlcztcbiAgfSBlbHNlIHtcbiAgICAvLyBDQVNPIDI6IFJlZ2lzdHJvIHNvYnJlIHVuYSB0YXJlYVxuICAgIC8vIDEuIE9idGVuZXIgbWV0YWRhdG9zIGRlIGxhIG5vdGEgZG9uZGUgZXN0XHUwMEUxIGxhIHRhcmVhXG4gICAgY29uc3QgbWV0YWRhdGFOb3RhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKHJlZ2lzdHJvLmFyY2hpdm9UYXJlYVxuICAgICAgLy8gRXN0ZSBlcyBlbCBhcmNoaXZvIGRvbmRlIGVzdFx1MDBFMSBsYSB0YXJlYSwgbG8gdGllbmVzIGVuIGByZWdpc3Ryby5ub21icmVgIG8gZW4gYWxndW5hIHByb3BpZWRhZCBxdWUgZ3VhcmRlIGxhIHJlZmVyZW5jaWFcbiAgICApO1xuICAgIGNvbnN0IHRhc2tUZXh0ID0gY2xlYW5QcmVmaXgocmVnaXN0cm8udGl0dWxvIHx8IFwiXCIpO1xuICAgIGNvbnN0IG5vdGVOYW1lID0gY2xlYW5QcmVmaXgocmVnaXN0cm8ubm9tYnJlIHx8IFwiXCIpO1xuICAgIGRlYnVnZ2VyO1xuICAgIC8vIDIuIEV4dHJhZXIgYWxpYXNlcyBkZWwgZnJvbnRtYXR0ZXIgZGUgbGEgbm90YVxuICAgIGxldCBub3RlQWxpYXNlczogc3RyaW5nW10gPSBbXTtcbiAgICBpZiAobWV0YWRhdGFOb3RhPy5mcm9udG1hdHRlcj8uYWxpYXNlcykge1xuICAgICAgbm90ZUFsaWFzZXMgPSBBcnJheS5pc0FycmF5KG1ldGFkYXRhTm90YS5mcm9udG1hdHRlci5hbGlhc2VzKVxuICAgICAgICA/IG1ldGFkYXRhTm90YS5mcm9udG1hdHRlci5hbGlhc2VzXG4gICAgICAgIDogW21ldGFkYXRhTm90YS5mcm9udG1hdHRlci5hbGlhc2VzXTtcbiAgICB9XG5cbiAgICAvLyAzLiBDb25zdHJ1aXIgbmV3QWxpYXNlcyB1c2FuZG8gZXNvcyBhbGlhc2VzIGNvbW8gYmFzZVxuICAgIGNvbnN0IG5ld0FsaWFzZXMgPSBbXG4gICAgICBgUlQgLSAke3Rhc2tUZXh0fSR7c3VmZml4fWAsXG4gICAgICBgUlQgLSAke25vdGVOYW1lfSAvICR7dGFza1RleHR9JHtzdWZmaXh9YCxcbiAgICBdO1xuXG4gICAgLy8gU2kgbGEgbm90YSBvcmlnaW5hbCB0aWVuZSBhbCBtZW5vcyB1biBhbGlhcywgbG8gdXNhcyBwYXJhIGVsIHRlcmNlciBhbGlhc1xuICAgIGlmIChub3RlQWxpYXNlcy5sZW5ndGggPiAwKSB7XG4gICAgICBuZXdBbGlhc2VzLnB1c2goYFJUIC0gJHtjbGVhblByZWZpeChub3RlQWxpYXNlc1swXSl9IC8gJHt0YXNrVGV4dH0ke3N1ZmZpeH1gKTtcbiAgICB9XG5cbiAgICAvLyA0LiBGaW5hbG1lbnRlLCBhc2lnbmFzIGByZWdpc3Ryby5hbGlhc2VzID0gbmV3QWxpYXNlcztgXG4gICAgcmVnaXN0cm8uYWxpYXNlcyA9IG5ld0FsaWFzZXM7XG4gICAgcmVnaXN0cm8uZGVzY3JpcGNpb24gPSB0YXNrVGV4dDtcbiAgfVxuICBcbiAgLy8gNi4gRGVmaW5pciBlbCBub21icmUgZmluYWwgZGVsIGFyY2hpdm8gZGUgcmVnaXN0cm8gKGFzZWd1cmFyc2UgZGUgcXVlIGlkIG5vIHNlYSBudWxsKVxuICBpZiAoIXJlZ2lzdHJvLmlkKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yOiByZWdpc3Ryby5pZCBlcyBudWxsIG8gdW5kZWZpbmVkXCIpO1xuICAgIHJlZ2lzdHJvLmlkID0gRGF0ZS5ub3coKTsgLy8gQXNpZ25hciB1biB2YWxvciB0ZW1wb3JhbCBiYXNhZG8gZW4gdGltZXN0YW1wIHBhcmEgZXZpdGFyIGVycm9yZXNcbiAgfVxuICByZWdpc3Ryby5uYW1lRmlsZSA9IGAke3JlZ2lzdHJvLmZvbGRlcn0vUlQgLSAke3JlZ2lzdHJvLmlkfWA7XG59XG5cbiAgLyoqXG4gKiBDYWxjdWxhIGVsIFx1MDBGQWx0aW1vIGlkU2VjIHVzYWRvIHBhcmEgcmVnaXN0cm9zIGNvbiBlbCBtaXNtbyB0XHUwMEVEdHVsbyBlbiBsYSBjYXJwZXRhIGVzcGVjaWZpY2FkYS5cbiAqL1xuYXN5bmMgY2FsY3VsYXJVbHRpbW9JZFNlYyh0aXR1bG86IHN0cmluZywgZm9sZGVyOiBzdHJpbmcsIGFwcDogQXBwKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgY29uc3QgYXJjaGl2b3MgPSBhcHAudmF1bHQuZ2V0RmlsZXMoKTtcbiAgbGV0IG1heCA9IDA7XG4gIGZvciAoY29uc3QgYXJjaGl2byBvZiBhcmNoaXZvcykge1xuICAgIGlmIChhcmNoaXZvLnBhdGguc3RhcnRzV2l0aChmb2xkZXIpKSB7XG4gICAgICBjb25zdCBtZXRhZGF0b3MgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoYXJjaGl2byk7XG4gICAgICBpZiAobWV0YWRhdG9zICYmIG1ldGFkYXRvcy5mcm9udG1hdHRlciAmJiBtZXRhZGF0b3MuZnJvbnRtYXR0ZXIudGl0dWxvID09PSB0aXR1bG8pIHtcbiAgICAgICAgY29uc3QgaWRTZWMgPSBtZXRhZGF0b3MuZnJvbnRtYXR0ZXIuaWRTZWM7XG4gICAgICAgIGlmIChpZFNlYyAhPT0gdW5kZWZpbmVkICYmIGlkU2VjID4gbWF4KSB7XG4gICAgICAgICAgbWF4ID0gaWRTZWM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1heDtcbn1cblxuICBsaW1waWFyQWxpYXModGl0dWxvOiBzdHJpbmcpIHtcbiAgICAvLyBSZWVtcGxhemEgY2FyYWN0ZXJlcyBubyBwZXJtaXRpZG9zIGVuIG5vbWJyZXMgZGUgYXJjaGl2byBjb24gdW4gZ3Vpb24gYmFqbyBvIGFsZ1x1MDBGQW4gb3RybyBjYXJhY3RlciBzZWd1cm8uXG4gICAgY29uc3QgY2FyYWN0ZXJlc05vUGVybWl0aWRvcyA9IC9bPD46XCJcXC9cXFxcfD8qXFx4MDAtXFx4MUZdL2c7XG4gICAgbGV0IHRpdHVsb0xpbXBpbyA9IHRpdHVsby5yZXBsYWNlKGNhcmFjdGVyZXNOb1Blcm1pdGlkb3MsIFwiX1wiKTtcblxuICAgIC8vIFJlZW1wbGF6YSBlc3BhY2lvcyBtXHUwMEZBbHRpcGxlcyBwb3IgdW4gXHUwMEZBbmljbyBlc3BhY2lvIHBhcmEgZXZpdGFyIG5vbWJyZXMgZGUgYXJjaGl2byBleGNlc2l2YW1lbnRlIGxhcmdvcy5cbiAgICB0aXR1bG9MaW1waW8gPSB0aXR1bG9MaW1waW8ucmVwbGFjZSgvXFxzKy9nLCBcIiBcIik7XG5cbiAgICByZXR1cm4gdGl0dWxvTGltcGlvLnRyaW0oKTtcbiAgfVxufSIsICIvKlxuICogRmlsZW5hbWU6IC9zcmMvbW9kdWxlcy9tb2R1bG9SZWdpc3Ryb1RpZW1wby9JbnRlcmZhY2VzL1JlZ2lzdHJvVGllbXBvLnRzXG4gKiBQYXRoOiAvc3JjL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG8vSW50ZXJmYWNlc1xuICogQ3JlYXRlZCBEYXRlOiAyMDI1LTAyLTIzIDE1OjU3OjQwXG4gKiBBdXRob3I6IEFuZHJcdTAwRTlzIEp1bGlcdTAwRTFuIEJvcmJcdTAwRjNuXG4gKiAtLS0tLVxuICogTGFzdCBNb2RpZmllZDogMjAyNS0wMi0yMyAxNzo0NDozMFxuICogTW9kaWZpZWQgQnk6IEFuZHJcdTAwRTlzIEp1bGlcdTAwRTFuIEJvcmJcdTAwRjNuXG4gKiAtLS0tLVxuICogQ29weXJpZ2h0IChjKSAyMDI1IC0gQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqL1xuXG5cbmltcG9ydCB7IFJUQmFzZSB9IGZyb20gXCIuL1JUQmFzZVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlZ2lzdHJvVGllbXBvIGV4dGVuZHMgUlRCYXNlIHtcbiAgICByZXRvbWFyUmVnaXN0cm8oaWQ6IG51bWJlciB8IHN0cmluZyk6IFByb21pc2U8UmVnaXN0cm8gfCBudWxsPjtcblxuICAgIHJldG9tYXJUYXJlYShpZDogbnVtYmVyIHwgc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcbiAgXG4gICAgZGV0YWxsZVJlZ2lzdHJvKGlkOiBudW1iZXIgfCBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+O1xuICAgIGRldGFsbGVSZWdpc3RybyhmaWxlOiBURmlsZSk6IFByb21pc2U8dm9pZD47XG4gICAgZGV0YWxsZVJlZ2lzdHJvKCk6IFByb21pc2U8dm9pZD47XG59IiwgIi8qXG4gKiBGaWxlbmFtZTogL3NyYy9tb2R1bGVzL21vZHVsb1JlZ2lzdHJvVGllbXBvL0ludGVyZmFjZXMvU2VzaW9uTGVjdHVyYS50c1xuICogUGF0aDogL3NyYy9tb2R1bGVzL21vZHVsb1JlZ2lzdHJvVGllbXBvL0ludGVyZmFjZXNcbiAqIENyZWF0ZWQgRGF0ZTogMjAyNS0wMi0yMyAxNTo1Nzo0MFxuICogQXV0aG9yOiBBbmRyXHUwMEU5cyBKdWxpXHUwMEUxbiBCb3JiXHUwMEYzblxuICogLS0tLS1cbiAqIExhc3QgTW9kaWZpZWQ6IDIwMjUtMDItMjMgMTc6NDQ6NTNcbiAqIE1vZGlmaWVkIEJ5OiBBbmRyXHUwMEU5cyBKdWxpXHUwMEUxbiBCb3JiXHUwMEYzblxuICogLS0tLS1cbiAqIENvcHlyaWdodCAoYykgMjAyNSAtIEFuZHJcdTAwRTlzIEp1bGlcdTAwRTFuIEJvcmJcdTAwRjNuXG4gKi9cblxuXG5pbXBvcnQgeyBSVEJhc2UgfSBmcm9tIFwiLi9SVEJhc2VcIjtcblxuZXhwb3J0IGludGVyZmFjZSBTZXNpb25MZWN0dXJhIGV4dGVuZHMgUlRCYXNlIHtcbiAgXG5nZXRJZCgpOiBQcm9taXNlPG51bWJlcj47XG5nZXRGZWNoYSgpOiBQcm9taXNlPHN0cmluZz47XG5nZXRUaXR1bG8oKTogUHJvbWlzZTxzdHJpbmc+O1xuZ2V0RGVzY3JpcGNpb24oKTogUHJvbWlzZTxzdHJpbmc+O1xuZ2V0RXN0YWRvKCk6IFByb21pc2U8c3RyaW5nPjtcbmdldEFsaWFzZXMoKTogUHJvbWlzZTxzdHJpbmdbXT47XG5nZXRSZW5hbWUoKTogUHJvbWlzZTxzdHJpbmc+O1xuZ2V0Tm90YSgpOiBQcm9taXNlPGFueT47XG59IiwgIi8qXG4gKiBGaWxlbmFtZTogL3NyYy9tb2R1bGVzL21vZHVsb1JlZ2lzdHJvVGllbXBvL0FQSS9TZXNpb25MZWN0dXJhLnRzXG4gKiBQYXRoOiAvc3JjL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG8vQVBJXG4gKiBDcmVhdGVkIERhdGU6IDIwMjUtMDItMjMgMTU6NTc6NDBcbiAqIEF1dGhvcjogQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqIC0tLS0tXG4gKiBMYXN0IE1vZGlmaWVkOiAyMDI1LTAyLTIzIDE3OjQzOjM3XG4gKiBNb2RpZmllZCBCeTogQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqIC0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjUgLSBBbmRyXHUwMEU5cyBKdWxpXHUwMEUxbiBCb3JiXHUwMEYzblxuICovXG5cblxuaW1wb3J0IHt1dGlsc0FQSX0gZnJvbSAnLi91dGlsc0FQSSdcbmltcG9ydCB7IFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgU2VzaW9uTGVjdHVyYSB9IGZyb20gJy4uL0ludGVyZmFjZXMvU2VzaW9uTGVjdHVyYSc7XG5pbXBvcnQgeyBSVEJhc2UgfSBmcm9tICcuL1JUQmFzZSc7XG5pbXBvcnQge0RhdGVUaW1lfSBmcm9tICdsdXhvbic7XG5cbmV4cG9ydCBjbGFzcyBTZXNpb25MZWN0dXJhIGV4dGVuZHMgUlRCYXNlIGltcGxlbWVudHMgU2VzaW9uTGVjdHVyYXtcbiAgICBwcml2YXRlIHV0aWxzQXBpOiB1dGlsc0FQSTtcbiAgICBwcm90ZWN0ZWQgbm90YTogb2JqZWN0O1xuICAgIHByb3RlY3RlZCBpbmZvU3Vic2lzdGVtYTogYW55OyBcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcGx1Z2luOiBQbHVnaW4sIGluZm9TdWJzaXN0ZW1hOiBhbnkpIHtcbiAgICAgIHN1cGVyKHBsdWdpbik7XG4gICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgIHRoaXMudXRpbHNBcGkgPSBuZXcgdXRpbHNBUEkocGx1Z2luKTtcbiAgICAgIHRoaXMudHAgPSBwbHVnaW4udHA7XG4gICAgICB0aGlzLm5vdGEgPSB7fTtcbiAgICAgIHRoaXMuaW5mb1N1YnNpc3RlbWEgPSBpbmZvU3Vic2lzdGVtYTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRJZCgpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgICAgICBsZXQgbWF4SWQgPSAwO1xuICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgY29uc3QgZmlsZXMgPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgICAgICBjb25zdCByZWdpc3Ryb3NFeGlzdGVudGVzID0gZmlsZXMuZmlsdGVyKGZpbGUgPT4gZmlsZS5wYXRoLnN0YXJ0c1dpdGgodGhpcy5pbmZvU3Vic2lzdGVtYS5mb2xkZXIpKTtcbiAgICAgICAgcmVnaXN0cm9zRXhpc3RlbnRlcy5mb3JFYWNoKChmaWxlOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpPy5mcm9udG1hdHRlcjtcbiAgICAgICAgICAgIGlmIChtZXRhZGF0YSAmJiBtZXRhZGF0YS5pZCAmJiAhaXNOYU4obWV0YWRhdGEuaWQpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBwYXJzZUludChtZXRhZGF0YS5pZCk7XG4gICAgICAgICAgICAgICAgaWYgKGlkID4gbWF4SWQpIG1heElkID0gaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5vdGEuaWQgPSAgbWF4SWQgKyAxO1xuXG4gICAgICAgIC8vIEdldCB0aGUgY3VycmVudCBhY3RpdmUgbm90ZVxuICAgICAgICBjb25zdCBjdXJyZW50Tm90ZVBhdGggPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKT8ucGF0aDtcbiAgICAgICAgY29uc3QgY3VycmVudE5vdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCkpPy5mcm9udG1hdHRlcjtcblxuICAgICAgICBpZiAoY3VycmVudE5vdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nU2Vzc2lvbnMgPSByZWdpc3Ryb3NFeGlzdGVudGVzLmZpbHRlcigoZmlsZTogYW55KSA9PiBmaWxlLnBhdGggIT09IGN1cnJlbnROb3RlUGF0aCAmJiBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk/LmZyb250bWF0dGVyPy50aXR1bG8gPT09IGN1cnJlbnROb3RhLnRpdHVsbyk7XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdTZXNzaW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc29ydGVkU2Vzc2lvbnMgPSBleGlzdGluZ1Nlc3Npb25zLnNvcnQoKGE6IGFueSwgQjogYW55KSA9PiBwYXJzZUludChCLnBhdGgubWF0Y2goL1swLTldKy8pWzBdKSAtIHBhcnNlSW50KEEucGF0aC5tYXRjaCgvWzAtOV0rLylbMF0pKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0U0wgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoc29ydGVkU2Vzc2lvbnNbMF0pPy5mcm9udG1hdHRlcjtcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGEuaWRTZWMgPSBwYXJzZUludChsYXN0U0wuaWRTZWMpICsgMTtcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGEucGFnSW5pY2lvID0gbGFzdFNMLnBhZ0ZpbjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ub3RhLmlkU2VjID0gMTtcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGEucGFnSW5pY2lvID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubm90YS5pZFNlYyA9IDE7XG4gICAgICAgICAgICB0aGlzLm5vdGEucGFnSW5pY2lvID0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5ub3RhLmlkO1xuICAgIH1cblxuICAgIGFzeW5jIGdldE5vdGEoKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm90YTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRQYXJhbWV0cm9zTGlicm8oKSB7XG4gICAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRGaWxlID0gYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRGaWxlIHx8ICFjdXJyZW50RmlsZS5wYXRoKSByZXR1cm47XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhQ2FjaGUgPSBhcHAubWV0YWRhdGFDYWNoZTtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVDYWNoZSA9IG1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGN1cnJlbnRGaWxlKTtcbiAgICAgICAgaWYgKCFmaWxlQ2FjaGUgfHwgIWZpbGVDYWNoZS5mcm9udG1hdHRlciB8fCBmaWxlQ2FjaGUuZnJvbnRtYXR0ZXIudHlwZSAhPT0gJ0xCJykge1xuICAgICAgICAgICAgbmV3IE5vdGljZSgnTGEgbm90YSBhY3RpdmEgZGViZSBzZXIgZGUgdGlwbyBMaWJybyBlbiBsYSBCaWJsb3RlY2EgcGFyYSBwb2RlciBjcmVhciB1bmEgc2VzaVx1MDBGM24gZGUgTGVjdHVyYS4nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBmcm9udE1hdHRlciA9IGZpbGVDYWNoZS5mcm9udG1hdHRlcjtcbiAgICAgICAgICAgIHRoaXMubm90YVsncGFnaW5hcyddID0gZnJvbnRNYXR0ZXIucGFnaW5hcztcbiAgICAgICAgICAgIHRoaXMubm90YVsndGl0dWxvJ10gPSBmcm9udE1hdHRlci50aXR1bG87XG4gICAgICAgICAgICB0aGlzLm5vdGFbJ3BhbGFicmFzUG9ySG9qYSddID0gZnJvbnRNYXR0ZXIucGFsYWJyYXNQb3JIb2phO1xuICAgICAgICB9XG5cbiAgICBhc3luYyBnZXRBc3VudG8oKTogUHJvbWlzZTx7IHNpQXN1bnRvOiBib29sZWFuLCBub21icmU6IHN0cmluZ1tdIH0+IHsgLy8gRnVuY2lvbmEgY29uIGZyb250bWF0dGVyXG4gICAgICAgIGxldCBwYWRyZXMgPSBbXTtcbiAgICAgICAgbGV0IGFjdGl2byA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICBsZXQgc2lBc3VudG8gPSB0cnVlO1xuICAgICAgICBsZXQgbm9tYnJlID0gXCJcIjtcbiAgICAgICAgbGV0IG5vdGE7XG4gICAgICAgIGlmIChhY3Rpdm8gIT0gbnVsbCkge1xuICAgICAgICAgICAgbm9tYnJlID0gYWN0aXZvLmJhc2VuYW1lO1xuICAgICAgICAgICAgbm90YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShhY3Rpdm8pO1xuICAgICAgICAgICAgLy8gQXNlZ3VyYXIgcXVlIG5vdGEuZnJvbnRtYXR0ZXIgZXhpc3RlIHkgYXNpZ25hciB1biBvYmpldG8gdmFjXHUwMEVEbyBhIGZpbGVcbiAgICAgICAgICAgIG5vdGEuZnJvbnRtYXR0ZXIgPSBub3RhLmZyb250bWF0dGVyIHx8IHt9O1xuICAgICAgICAgICAgbm90YS5mcm9udG1hdHRlci5maWxlID0ge307XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKG5vdGEuZnJvbnRtYXR0ZXIuZmlsZSwgYWN0aXZvKTtcbiAgICAgICAgICAgIC8vMS4gc2lBc3VudG8gPSBhd2FpdCBzdWdnZXN0ZXIoW1wiU2lcIiwgXCJOb1wiXSwgW3RydWUsIGZhbHNlXSwgdHJ1ZSwgbm9tYnJlICsgXCIgZXMgb3JpZ2VuIGRlIFwiICsgdGhpcy5ub3RhLnRpdHVsbyArIFwiP1wiKTtcbiAgICAgICAgICAgIHBhZHJlcy51bnNoaWZ0KG5vbWJyZSk7IC8vIEFcdTAwRjFhZGUgZWwgbm9tYnJlIGFsIGluaWNpbyBkZWwgYXJyZWdsbywgZGVzcGxhemFuZG8gbG9zIGRlbVx1MDBFMXMgZWxlbWVudG9zXG4gICAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgICAgIHRoaXMubm90YS5hc3VudG9EZWZpbmlkbyA9IHRydWU7IC8vIFBhcmEgcXVlIG5vIGVqZWN1dGUgbGEgYnVzcXVlZGEgZGUgQXJlYSBWaWRhLCBBcmVhIGRlIEludGVyXHUwMEU5cywgcHJveWVjdG8gUSBvIEdURFxuICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvUSA9IFwiXCI7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhPy5mcm9udG1hdHRlcj8ucHJveWVjdG9RKSkge1xuICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIGl0ZXJhbW9zIHNvYnJlIGNhZGEgZWxlbWVudG9cbiAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9RID0gbm90YS5mcm9udG1hdHRlci5wcm95ZWN0b1EubWFwKGVsZW1lbnRvID0+XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChub3RhPy5mcm9udG1hdHRlcj8ucHJveWVjdG9RKSB7XG4gICAgICAgICAgICAgICAgLy8gU2kgZXhpc3RlIHBlcm8gbm8gZXMgdW4gYXJyZWdsbywgYXBsaWNhbW9zIGVsIHJlZ2V4IGRpcmVjdGFtZW50ZVxuICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b1EgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvUS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBcIlwiO1xuICAgICAgICAgICAgLy8gVmVyaWZpY2Ftb3Mgc2kgbm90YS5wcm95ZWN0b0dURCBleGlzdGUgeSBlcyB1biBhcnJlZ2xvXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhPy5mcm9udG1hdHRlcj8ucHJveWVjdG9HVEQpKSB7XG4gICAgICAgICAgICAgICAgLy8gU2kgZXMgdW4gYXJyZWdsbywgaXRlcmFtb3Mgc29icmUgY2FkYSBlbGVtZW50b1xuICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b0dURCA9IG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQubWFwKGVsZW1lbnRvID0+XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChub3RhPy5mcm9udG1hdHRlcj8ucHJveWVjdG9HVEQpIHtcbiAgICAgICAgICAgICAgICAvLyBTaSBleGlzdGUgcGVybyBubyBlcyB1biBhcnJlZ2xvLCBhcGxpY2Ftb3MgZWwgcmVnZXggZGlyZWN0YW1lbnRlXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvR1REID0gbm90YS5mcm9udG1hdHRlci5wcm95ZWN0b0dURC5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVmVyaWZpY2Ftb3MgYXJlYUludGVyZXMgXG4gICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMgPSBbXTtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGE/LmZyb250bWF0dGVyPy5hcmVhSW50ZXJlcykpIHtcbiAgICAgICAgICAgICAgICAvLyBTaSBlcyB1biBhcnJlZ2xvLCBpdGVyYW1vcyBzb2JyZSBjYWRhIGVsZW1lbnRvIChleGNsdXllbmRvIGVsIHByaW1lciBlbGVtZW50byB5YSBhZ3JlZ2FkbyBxdWUgZXMgbm90YS50aXR1bG8pXG4gICAgICAgICAgICAgICAgLy8geSBhcGxpY2Ftb3MgZWwgcmVnZXggYSBjYWRhIGVsZW1lbnRvLiBMdWVnbyBjb25jYXRlbmFtb3MgY29uIGVsIGFycmF5IGV4aXN0ZW50ZS5cbiAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMgPSB0aGlzLm5vdGEuYXJlYUludGVyZXMuY29uY2F0KG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMubWFwKGVsZW1lbnRvID0+XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gU2kgbm8gZXMgdW4gYXJyZWdsbywgcmV2aXNhbW9zIHNpIG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMgZXhpc3RlXG4gICAgICAgICAgICAgICAgaWYgKG5vdGE/LmZyb250bWF0dGVyPy5hcmVhSW50ZXJlcykge1xuICAgICAgICAgICAgICAgICAgICAvLyBTaSBleGlzdGUsIGFwbGljYW1vcyBlbCByZWdleCB5IGxvIGFcdTAwRjFhZGltb3MgY29tbyBzZWd1bmRvIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhSW50ZXJlcy5wdXNoKG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVmVyaWZpY2Ftb3MgQXJlYVZpZGFcbiAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IFwiXCI7XG4gICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LmFyZWFWaWRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm90YS5mcm9udG1hdHRlci5hcmVhVmlkYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRXMgdW4gYXJyZWdsbywgdXNhIGVsIHByaW1lciBlbGVtZW50b1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhWzBdLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygbm90YS5mcm9udG1hdHRlci5hcmVhVmlkYSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRXMgdW4gc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE5vIGVzdFx1MDBFMSBkZWZpbmlkbyBvIGVzdFx1MDBFMSB2YWNcdTAwRURvXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gXCJObyBlcyBkZSBuaW5nXHUwMEZBbiBBcmVhIGRlIFZpZGFcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHNpQXN1bnRvLCBub21icmU6IHBhZHJlcyB9XG4gICAgICAgIH1cblxuICAgICAgIFxuXG5cblxuICAgIFxuICAgXG5cbiAgfVxuXG4gIGFzeW5jIGdldEFsaWFzZXMoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIHRoaXMubm90YS5hbGlhc2VzID0gW107XG4gICAgdGhpcy5ub3RhLmFsaWFzZXMucHVzaChgU0wgLSAke3RoaXMubm90YS5pZFNlY30gLyAke3RoaXMubm90YS50aXR1bG99YClcbiAgICByZXR1cm4gdGhpcy5ub3RhLmFsaWFzZXM7XG59XG5cbmFzeW5jIGdldEZlY2hhKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgbGV0IGZlY2hhQWN0dWFsID0gRGF0ZVRpbWUubm93KCk7XG4gICAgZmVjaGFBY3R1YWwgPSBmZWNoYUFjdHVhbC5zZXRMb2NhbGUoJ2VzJyk7XG4gICAgZmVjaGFBY3R1YWwgPSBmZWNoYUFjdHVhbC50b0Zvcm1hdCgneXl5eS1NTS1kZCBFRUVFIEhIOm1tJyk7XG4gICAgdGhpcy5ub3RhLmZlY2hhID0gZmVjaGFBY3R1YWw7XG4gICAgcmV0dXJuIGZlY2hhQWN0dWFsO1xufVxuXG5hc3luYyBnZXRSZW5hbWUoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBkZWJ1Z2dlcjtcbiAgICBjb25zdCBuZXdOYW1lID0gYCR7dGhpcy5pbmZvU3Vic2lzdGVtYS5mb2xkZXJ9LyR7dGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlfSAtICR7dGhpcy5ub3RhLmlkfS5tZGA7XG4gICAgY29uc3QgZmlsZSA9IHRoaXMudHAuZmlsZS5jb25maWcudGFyZ2V0X2ZpbGU7XG4gICAgY29uc3QgZXhpc3RlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChuZXdOYW1lKTtcblxuICAgIHRyeSB7XG4gICAgICAgIGlmIChleGlzdGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgY29uc3Qgbm9tYnJlRmlsZSA9IG5ld05hbWUuc3BsaXQoXCIvXCIpO1xuICAgICAgICAgICAgY29uc3QgYm9ycmFyID0gYXdhaXQgdGhpcy5zdWdnZXN0ZXIoXG4gICAgICAgICAgICAgICAgW1wiU29icmVlc2NyaWJpciBBcmNoaXZvIEFjdHVhbFwiLCBcIkRldGVuZXIgY3JlYWNpXHUwMEYzbiBkZWwgYXJjaGl2by5cIl0sXG4gICAgICAgICAgICAgICAgW3RydWUsIGZhbHNlXSxcbiAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgIGBcdTAwQkYke25vbWJyZUZpbGUucG9wKCl9IHlhIGV4aXN0ZS4gUXVcdTAwRTkgZGVzZWFzIGhhY2VyP2BcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoYm9ycmFyKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LmRlbGV0ZShleGlzdGUpO1xuICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LnJlbmFtZShmaWxlLCBuZXdOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBcmNoaXZvIHJlbm9tYnJhZG8gY29uIFx1MDBFOXhpdG8uXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3TmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ2FuY2VsYW5kbyBsYSBjcmVhY2lcdTAwRjNuIGRlbCBhcmNoaXZvLlwiKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcm9jZXNvIGNhbmNlbGFkbyBwb3IgZWwgdXN1YXJpby5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LnJlbmFtZShmaWxlLCBuZXdOYW1lKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFyY2hpdm8gcmVub21icmFkbyBjb24gXHUwMEU5eGl0by5cIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld05hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWwgY2FtYmlhciBlbCBub21icmVcIiwgZXJyb3IpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59XG4gIFxuXG5cbn0iLCAiLypcbiAqIEZpbGVuYW1lOiAvc3JjL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG8vQVBJL1JUQmFzZS50c1xuICogUGF0aDogL3NyYy9tb2R1bGVzL21vZHVsb1JlZ2lzdHJvVGllbXBvL0FQSVxuICogQ3JlYXRlZCBEYXRlOiAyMDI1LTAyLTIzIDE1OjU3OjQwXG4gKiBBdXRob3I6IEFuZHJcdTAwRTlzIEp1bGlcdTAwRTFuIEJvcmJcdTAwRjNuXG4gKiAtLS0tLVxuICogTGFzdCBNb2RpZmllZDogMjAyNS0wMi0yMyAxNzo0MzoyMFxuICogTW9kaWZpZWQgQnk6IEFuZHJcdTAwRTlzIEp1bGlcdTAwRTFuIEJvcmJcdTAwRjNuXG4gKiAtLS0tLVxuICogQ29weXJpZ2h0IChjKSAyMDI1IC0gQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqL1xuXG5cbmltcG9ydCB7IHV0aWxzQVBJIH0gZnJvbSAnLi91dGlsc0FQSSc7XG5pbXBvcnQgeyBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJzsgLy8gQXNlZ1x1MDBGQXJhdGUgZGUgaW1wb3J0YXIgUGx1Z2luIHNpIG5vIGVzdFx1MDBFMSBpbXBvcnRhZG9cbmltcG9ydCB7IFNlc2lvbkxlY3R1cmEgfSBmcm9tICcuLi9JbnRlcmZhY2VzL1Nlc2lvbkxlY3R1cmEnO1xuXG5leHBvcnQgY2xhc3MgUlRCYXNlIHtcbiAgICBwcm90ZWN0ZWQgdXRpbHNBcGk6IHV0aWxzQVBJO1xuICAgIHByb3RlY3RlZCBub3RhOiBvYmplY3Q7XG4gICAgcHJvdGVjdGVkIGluZm9TdWJzaXN0ZW1hOiBhbnk7IC8vIENhbWJpXHUwMEU5IGVsIHRpcG8gYSBhbnkgcGFyYSBwZXJtaXRpciBjdWFscXVpZXIgb2JqZXRvXG4gICAgcHJvdGVjdGVkIHBsdWdpbjogUGx1Z2luO1xuICAgIHByb3RlY3RlZCB0cDogYW55O1xuXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgICAgIHRoaXMudXRpbHNBcGkgPSBuZXcgdXRpbHNBUEkocGx1Z2luKTtcbiAgICAgICAgdGhpcy50cCA9IHBsdWdpbi50cDtcbiAgICAgICAgdGhpcy5pbmZvU3Vic2lzdGVtYSA9IHt9O1xuICAgIH1cblxuICAgIGFzeW5jIGluaWNpYXJSZWdpc3RybyhpbmZvU3Vic2lzdGVtYTogeyBmb2xkZXI6IHN0cmluZzsgaW5kaWNlOiBzdHJpbmc7IHR5cGU6IHN0cmluZzsgfSwgY2FtcG9zOiBhbnkpOiBQcm9taXNlPGFueSB8IG51bGw+O1xuICAgIGFzeW5jIGluaWNpYXJSZWdpc3RybygpOiBQcm9taXNlPGFueSB8IG51bGw+O1xuICAgIGFzeW5jIGluaWNpYXJSZWdpc3RybyhpbmZvU3Vic2lzdGVtYT86IHsgZm9sZGVyOiBzdHJpbmc7IGluZGljZTogc3RyaW5nOyB0eXBlOiBzdHJpbmc7IH0sIGNhbXBvcz86IGFueSk6IFByb21pc2U8YW55IHwgbnVsbD4ge1xuICAgIFxuICAgICAgICBpZiAodHlwZW9mIGluZm9TdWJzaXN0ZW1hID09PSAnb2JqZWN0JyAmJiBpbmZvU3Vic2lzdGVtYSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKCFjYW1wb3MgfHwgIUFycmF5LmlzQXJyYXkoY2FtcG9zKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbXBvcyBkZWJlIHNlciB1biBhcnJheSBkZWZpbmlkby5cIik7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB0aGlzLm5vdGEgPSB7fTtcbiAgICAgICAgICAgIGxldCBub3RhO1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmluZm9TdWJzaXN0ZW1hLCBpbmZvU3Vic2lzdGVtYSk7XG4gICAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgICAgIGlmICh0aGlzLmluZm9TdWJzaXN0ZW1hLmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluZm9TdWJzaXN0ZW1hLmZvbGRlciA9IHRoaXMucGx1Z2luLnNldHRpbmdzW2luZm9TdWJzaXN0ZW1hLmZvbGRlcl07XG4gICAgICAgICAgICAgICAgdGhpcy5pbmZvU3Vic2lzdGVtYS5pbmRpY2UgPSB0aGlzLnBsdWdpbi5zZXR0aW5nc1tpbmZvU3Vic2lzdGVtYS5pbmRpY2VdO1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5ub3RhLCBpbmZvU3Vic2lzdGVtYSk7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBsZXQgZmllbGRIYW5kbGVyOiBTZXNpb25MZWN0dXJhO1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmluZm9TdWJzaXN0ZW1hLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiU0xcIjpcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgU2VzaW9uTGVjdHVyYSA9IGF3YWl0IGltcG9ydCgnLi9TZXNpb25MZWN0dXJhJyk7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkSGFuZGxlciA9IG5ldyBTZXNpb25MZWN0dXJhLlNlc2lvbkxlY3R1cmEodGhpcy5wbHVnaW4sIHRoaXMuaW5mb1N1YnNpc3RlbWEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHNlIGhhIGRlZmluaWRvIHVuIG1hbmVqYWRvciBkZSBjYW1wb3MgcGFyYSBlbCB0aXBvICR7dGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlfWApO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjYW1wbyBvZiBjYW1wb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnVuY3Rpb25OYW1lID0gYGdldCR7Y2FtcG8uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBjYW1wby5zbGljZSgxKX1gO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZpZWxkSGFuZGxlcltmdW5jdGlvbk5hbWVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGFbY2FtcG9dID0gYXdhaXQgZmllbGRIYW5kbGVyW2Z1bmN0aW9uTmFtZV0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGEgPSBhd2FpdCBmaWVsZEhhbmRsZXIuZ2V0Tm90YSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbm90YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGtleSBpbiB0aGlzLm5vdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YVtrZXldID0gbm90YVtrZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYExhIGZ1bmNpXHUwMEYzbiAke2Z1bmN0aW9uTmFtZX0gbm8gZXN0XHUwMEUxIGRlZmluaWRhLmApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTm8gc2UgcHVkbyBjcmVhciBlbCBvYmpldG8gZGUgcmVnaXN0cm8uXCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiTm8gc2UgcHVkbyBjcmVhciBlbCBvYmpldG8gZGUgcmVnaXN0cm8uXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm90YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIExcdTAwRjNnaWNhIG9yaWdpbmFsIGRlIGluaWNpYXJSZWdpc3Ryb1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWdpc3RybyA9IGF3YWl0IHRoaXMudXRpbHNBcGkuY3JlYXJPYmpldG9SZWdpc3Rybyh0aGlzLnBsdWdpbik7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy51dGlsc0FwaS52ZXJpZmljYXJUYXJlYXNBY3RpdmFzKHJlZ2lzdHJvLCB0aGlzLnBsdWdpbi5hcHApO1xuICAgICAgICAgICAgICAgIGlmIChyZWdpc3Ryby5kZXRlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdpc3RybzsgLy8gRGV2dWVsdmUgZWwgcmVnaXN0cm8gYWN0dWFsIHkgZGV0aWVuZSBsYSBlamVjdWNpXHUwMEYzbiBhcXVcdTAwRURcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy51dGlsc0FwaS5kZWZpbmlyVGlwb1JlZ2lzdHJvKHJlZ2lzdHJvLCB0aGlzLnBsdWdpbi5hcHApO1xuICAgICAgICAgICAgICAgIGlmIChyZWdpc3Ryby5kZXRlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdpc3RybzsgLy8gRGV2dWVsdmUgZWwgcmVnaXN0cm8gYWN0dWFsIHkgZGV0aWVuZSBsYSBlamVjdWNpXHUwMEYzbiBhcXVcdTAwRURcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy51dGlsc0FwaS5jb25zdHJ1aXJOb21icmV5QWxpYXMocmVnaXN0cm8sIHRoaXMucGx1Z2luLmFwcCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2lzdHJvO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiTm8gc2UgcHVkbyBjcmVhciBlbCBvYmpldG8gZGUgcmVnaXN0cm8uXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gU29icmVjYXJnYSBkZSBtXHUwMEU5dG9kbyBwYXJhIGxvcyBkaWZlcmVudGVzIHRpcG9zIGRlIGVudHJhZGFcbiAgICBhc3luYyBjZXJyYXJSZWdpc3RybyhpZDogbnVtYmVyIHwgc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcbiAgICBhc3luYyBjZXJyYXJSZWdpc3RybyhmaWxlOiBURmlsZSk6IFByb21pc2U8dm9pZD47XG4gICAgYXN5bmMgY2VycmFyUmVnaXN0cm8oKTogUHJvbWlzZTx2b2lkPjtcbiAgICBhc3luYyBjZXJyYXJSZWdpc3RybyhyZWdpc3Rybz86IG51bWJlciB8IHN0cmluZyB8IFRGaWxlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGZvbGRlciA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9SZWdpc3Ryb1RpZW1wbztcbiAgICAgICAgaWYgKHR5cGVvZiByZWdpc3RybyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJlZ2lzdHJvID0gcGFyc2VJbnQocmVnaXN0cm8pO1xuICAgICAgICB9XG4gICAgICAgIC8vIExcdTAwRjNnaWNhIHNpICdpZCcgZXMgdW4gblx1MDBGQW1lcm8gLT4gQ3VhbmRvIGxsZWdhIGRlbCBib3RcdTAwRjNuIGRlIGxhIHRhYmxhIGRlIHJlZ2lzdHJvcyBkZWwgZFx1MDBFRGEuXG4gICAgICAgIGlmICh0eXBlb2YgcmVnaXN0cm8gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG4gICAgICAgICAgICBsZXQgaW5mb05vdGE7XG4gICAgICAgICAgICBmb3IgKGxldCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZpbGUucGF0aC5zdGFydHNXaXRoKGZvbGRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk/LmZyb250bWF0dGVyO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWV0YWRhdGE/LmlkID09PSByZWdpc3Rybykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5mb05vdGEgPSB7IGZpbGUgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaW5mb05vdGEsIG1ldGFkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBjYW1wb3MgPSBbXCJmZWNoYVwiLCBcImhvcmFGaW5hbFwiLCBcInRpZW1wb1RyYWJhamFkb1wiXTtcbiAgICAgICAgICAgIGxldCByZXN1bHRhZG8gPSBhd2FpdCB0aGlzLnBsdWdpbi5ZQU1MVXBkYXRlckFQSS5hcmNoaXZhck5vdGEoaW5mb05vdGEsIGNhbXBvcyk7XG4gICAgICAgICAgICBsZXQgdGV4dG9SZXN1bHRhZG8gPSBPYmplY3QuZW50cmllcyhyZXN1bHRhZG8pLm1hcCgoW3Byb3BpZWRhZCwgdmFsb3JdKSA9PiBgJHtwcm9waWVkYWR9OiAke3ZhbG9yfWApLmpvaW4oJywgJyk7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGBUYXJlYSBjZXJyYWRhLiBDYW1wb3MgYWN0dWFsaXphZG9zOiAke3RleHRvUmVzdWx0YWRvfWApO1xuICAgICAgICB9XG4gICAgICAgIC8vIExcdTAwRjNnaWNhIHNpICdpZCcgZXMgdW4gVEZpbGVcbiAgICAgICAgZWxzZSBpZiAocmVnaXN0cm8gaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUocmVnaXN0cm8pPy5mcm9udG1hdHRlcjtcbiAgICAgICAgICAgIGxldCBpbmZvTm90YSA9IHsgZmlsZTogcmVnaXN0cm8gfTtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaW5mb05vdGEsIG1ldGFkYXRhKTtcbiAgICAgICAgICAgIGxldCBjYW1wb3MgPSBbXCJmZWNoYVwiLCBcImhvcmFGaW5hbFwiLCBcInRpZW1wb1RyYWJhamFkb1wiXTtcbiAgICAgICAgICAgIGxldCByZXN1bHRhZG8gPSBhd2FpdCB0aGlzLnBsdWdpbi5ZQU1MVXBkYXRlckFQSS5hcmNoaXZhck5vdGEoaW5mb05vdGEsIGNhbXBvcyk7XG4gICAgICAgICAgICBsZXQgdGV4dG9SZXN1bHRhZG8gPSBPYmplY3QuZW50cmllcyhyZXN1bHRhZG8pLm1hcCgoW3Byb3BpZWRhZCwgdmFsb3JdKSA9PiBgJHtwcm9waWVkYWR9OiAke3ZhbG9yfWApLmpvaW4oJywgJyk7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGBUYXJlYSBjZXJyYWRhLiBDYW1wb3MgYWN0dWFsaXphZG9zOiAke3RleHRvUmVzdWx0YWRvfWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gTFx1MDBGM2dpY2EgcGFyYSBjdWFuZG8gbm8gc2UgcHJvcG9yY2lvbmEgYXJndW1lbnRvcywgc2UgYnVzY2EgbGEgdGFyZWEgYWN0aXZhIHkgc2UgY2llcnJhLlxuICAgICAgICAgICAgY29uc3QgcmVnaXN0cm8gPSBhd2FpdCB0aGlzLnV0aWxzQXBpLmJ1c2NhclJlZ2lzdHJvc0FjdGl2b3MoYXBwKTtcbiAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKHJlZ2lzdHJvKT8uZnJvbnRtYXR0ZXI7XG4gICAgICAgICAgICBsZXQgaW5mb05vdGEgPSB7IGZpbGU6IHJlZ2lzdHJvIH07XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGluZm9Ob3RhLCBtZXRhZGF0YSk7XG4gICAgICAgICAgICBsZXQgY2FtcG9zID0gW1wiZmVjaGFcIiwgXCJob3JhRmluYWxcIiwgXCJ0aWVtcG9UcmFiYWphZG9cIl07XG4gICAgICAgICAgICBsZXQgcmVzdWx0YWRvID0gYXdhaXQgdGhpcy5wbHVnaW4uWUFNTFVwZGF0ZXJBUEkuYXJjaGl2YXJOb3RhKGluZm9Ob3RhLCBjYW1wb3MpO1xuICAgICAgICAgICAgbGV0IHRleHRvUmVzdWx0YWRvID0gT2JqZWN0LmVudHJpZXMocmVzdWx0YWRvKS5tYXAoKFtwcm9waWVkYWQsIHZhbG9yXSkgPT4gYCR7cHJvcGllZGFkfTogJHt2YWxvcn1gKS5qb2luKCcsICcpO1xuICAgICAgICAgICAgbmV3IE5vdGljZShgVGFyZWEgY2VycmFkYS4gQ2FtcG9zIGFjdHVhbGl6YWRvczogJHt0ZXh0b1Jlc3VsdGFkb31gKTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCAiLypcbiAqIEZpbGVuYW1lOiAvc3JjL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG8vQVBJL3JlZ2lzdHJvVGllbXBvQVBJLnRzXG4gKiBQYXRoOiAvc3JjL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG8vQVBJXG4gKiBDcmVhdGVkIERhdGU6IDIwMjUtMDItMjMgMTU6NTc6NDBcbiAqIEF1dGhvcjogQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqIC0tLS0tXG4gKiBMYXN0IE1vZGlmaWVkOiAyMDI1LTAyLTIzIDE3OjQzOjA5XG4gKiBNb2RpZmllZCBCeTogQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqIC0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjUgLSBBbmRyXHUwMEU5cyBKdWxpXHUwMEUxbiBCb3JiXHUwMEYzblxuICovXG5cblxuaW1wb3J0IHt1dGlsc0FQSX0gZnJvbSAnLi91dGlsc0FQSSdcbmltcG9ydCB7IFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgUmVnaXN0cm9UaWVtcG8gfSBmcm9tICcuLi9JbnRlcmZhY2VzL1JlZ2lzdHJvVGllbXBvJztcbmltcG9ydCB7IFJUQmFzZSB9IGZyb20gJy4vUlRCYXNlJztcblxuZXhwb3J0IGNsYXNzIHJlZ2lzdHJvVGllbXBvQVBJIGV4dGVuZHMgUlRCYXNlIGltcGxlbWVudHMgUmVnaXN0cm9UaWVtcG97XG4gICAgcHJpdmF0ZSB1dGlsc0FwaTogdXRpbHNBUEk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICBzdXBlcihwbHVnaW4pO1xuICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgICB0aGlzLnV0aWxzQXBpID0gbmV3IHV0aWxzQVBJKHBsdWdpbik7XG4gICAgICB0aGlzLnRwID0gcGx1Z2luLnRwO1xuICAgIH1cbiAgICBcbiAgICAvLyBJbnZvY2FkbyBkZXNkZSBlbCB0ZW1wbGF0ZSBkZSB0ZW1wbGF0ZXIgUGFzbyAzIGRlIDNcblxuYXN5bmMgcmV0b21hclJlZ2lzdHJvKGlkOiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgICBjb25zdCBmb2xkZXIgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfUmVnaXN0cm9UaWVtcG87XG4gICAgdHJ5IHtcbiAgICAgIC8vIDEuIENyZWFyIGVsIG9iamV0byByZWdpc3RybyBiYXNlXG4gICAgICBjb25zdCByZWdpc3RybyA9IGF3YWl0IHRoaXMudXRpbHNBcGkuY3JlYXJPYmpldG9SZWdpc3Rybyh0aGlzLnBsdWdpbik7XG4gIFxuICAgICAgLy8gMi4gVmVyaWZpY2FyIHNpIGhheSByZWdpc3RybyBlbiBjdXJzb1xuICAgICAgYXdhaXQgdGhpcy51dGlsc0FwaS52ZXJpZmljYXJUYXJlYXNBY3RpdmFzKHJlZ2lzdHJvLCB0aGlzLnBsdWdpbi5hcHApO1xuICAgICAgaWYgKHJlZ2lzdHJvLmRldGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdHJvO1xuICAgICAgfVxuICBcbiAgICAgIC8vIDMuIEJ1c2NhciBsYSBub3RhIGFudGlndWEgZW4gbGEgY2FycGV0YSBjb25maWd1cmFkYVxuICAgICAgY29uc3QgZmlsZXMgPSB0aGlzLnBsdWdpbi5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgICAgbGV0IHJlZ2lzdHJvQW50aWd1bzogeyBmaWxlOiBURmlsZTsgZnJvbnRtYXR0ZXI6IGFueSB9IHwgdW5kZWZpbmVkO1xuICBcbiAgICAgIGZvciAobGV0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgICAgaWYgKGZpbGUucGF0aC5zdGFydHNXaXRoKGZvbGRlcikpIHtcbiAgICAgICAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMucGx1Z2luLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXI7XG4gICAgICAgICAgaWYgKG1ldGFkYXRhPy5pZCA9PT0gcGFyc2VJbnQoaWQgYXMgc3RyaW5nKSkge1xuICAgICAgICAgICAgcmVnaXN0cm9BbnRpZ3VvID0geyBmaWxlLCBmcm9udG1hdHRlcjogbWV0YWRhdGEgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICBcbiAgICAgIGlmICghcmVnaXN0cm9BbnRpZ3VvKSB7XG4gICAgICAgIG5ldyBOb3RpY2UoYE5vIHNlIGVuY29udHJcdTAwRjMgZWwgcmVnaXN0cm8gYW50aWd1byBjb24gSUQ6ICR7aWR9YCk7XG4gICAgICAgIHJlZ2lzdHJvLmRldGVuZXIgPSB0cnVlO1xuICAgICAgICByZXR1cm4gcmVnaXN0cm87XG4gICAgICB9XG4gIFxuICAgICAgLy8gNC4gQ29waWFyIGNhbXBvcyByZWxldmFudGVzIHkgbm9ybWFsaXphciBjb3JjaGV0ZXNcbiAgICAgIGNvbnN0IGZtID0gcmVnaXN0cm9BbnRpZ3VvLmZyb250bWF0dGVyO1xuICAgICAgcmVnaXN0cm8udGl0dWxvID0gZm0udGl0dWxvID8/IFwiU2luIFRpdHVsb1wiO1xuICAgICAgcmVnaXN0cm8uYXN1bnRvUmV0b21hZG8gPSBmbS5hc3VudG8gPz8gbnVsbDtcbiAgICAgIC8vIEVqZW1wbG86IGluY3JlbWVudGEgaWRTZWMgcGFyYSBpbmRpY2FyIG51ZXZhIHNlc2lcdTAwRjNuXG4gICAgICByZWdpc3Ryby5pZFNlYyA9IChmbS5pZFNlYyA/PyAwKSArIDE7XG4gIFxuICAgICAgLy8gLS0tLSBGdW5jaW9uZXMgcGFyYSBsaW1waWFyIGNvcmNoZXRlcyAtLS0tXG4gICAgICBmdW5jdGlvbiBxdWl0YXJEb2JsZUNvcmNoZXRlKHN0cjogc3RyaW5nKSB7XG4gICAgICAgIGlmIChzdHIuc3RhcnRzV2l0aChcIltbXCIpICYmIHN0ci5lbmRzV2l0aChcIl1dXCIpKSB7XG4gICAgICAgICAgcmV0dXJuIHN0ci5zbGljZSgyLCAtMik7IC8vIEVsaW1pbmEgW1sgeSBdXVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgICB9XG4gIFxuICAgICAgZnVuY3Rpb24gbm9ybWFsaXphckFycmF5KGFycjogYW55W10pIHtcbiAgICAgICAgcmV0dXJuIGFyci5tYXAoaXRlbSA9PiB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gcXVpdGFyRG9ibGVDb3JjaGV0ZShpdGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgXG4gICAgICAvLyBBc2lnbmFyIHkgbm9ybWFsaXphciBjYWRhIGNhbXBvXG4gICAgICByZWdpc3Ryby5hcmVhVmlkYSA9IFwiXCI7XG4gICAgICBpZiAodHlwZW9mIGZtLmFyZWFWaWRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJlZ2lzdHJvLmFyZWFWaWRhID0gcXVpdGFyRG9ibGVDb3JjaGV0ZShmbS5hcmVhVmlkYSk7XG4gICAgICB9XG4gIFxuICAgICAgcmVnaXN0cm8uYXJlYUludGVyZXMgPSBbXTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGZtLmFyZWFJbnRlcmVzKSkge1xuICAgICAgICByZWdpc3Ryby5hcmVhSW50ZXJlcyA9IG5vcm1hbGl6YXJBcnJheShmbS5hcmVhSW50ZXJlcyk7XG4gICAgICB9XG4gIFxuICAgICAgcmVnaXN0cm8ucHJveWVjdG9HVEQgPSBbXTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGZtLnByb3llY3RvR1REKSkge1xuICAgICAgICByZWdpc3Ryby5wcm95ZWN0b0dURCA9IG5vcm1hbGl6YXJBcnJheShmbS5wcm95ZWN0b0dURCk7XG4gICAgICB9XG4gIFxuICAgICAgcmVnaXN0cm8ucHJveWVjdG9RID0gW107XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShmbS5wcm95ZWN0b1EpKSB7XG4gICAgICAgIHJlZ2lzdHJvLnByb3llY3RvUSA9IG5vcm1hbGl6YXJBcnJheShmbS5wcm95ZWN0b1EpO1xuICAgICAgfVxuICBcbiAgICAgIC8vICoqQ29waWFtb3MgbG9zIGFsaWFzZXMgYW50aWd1b3MgdGFsIGN1YWwsIHNpbiBwZXJkZXJsb3MqKlxuICAgICAgcmVnaXN0cm8uYWxpYXNlcyA9IFtdO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZm0uYWxpYXNlcykpIHtcbiAgICAgICAgcmVnaXN0cm8uYWxpYXNlcyA9IG5vcm1hbGl6YXJBcnJheShmbS5hbGlhc2VzKTtcbiAgICAgIH1cbiAgXG4gICAgICAvLyA1LiBDb25zdHJ1aXIgbm9tYnJlIHkgYWxpYXNcbiAgICAgIC8vICAgIElNUE9SVEFOVEU6IGNvbnN0cnVpck5vbWJyZXlBbGlhcyBOTyBkZWJlIHNvYnJlc2NyaWJpciBwb3IgY29tcGxldG8gcmVnaXN0cm8uYWxpYXNlcyxcbiAgICAgIC8vICAgIHNpbm8gYVx1MDBGMWFkaXIgbyBhanVzdGFyIGVsIGFsaWFzIHBhcmEgZXN0YSBudWV2YSBzZXNpXHUwMEYzbi5cbiAgICAgIGF3YWl0IHRoaXMudXRpbHNBcGkuY29uc3RydWlyTm9tYnJleUFsaWFzKHJlZ2lzdHJvLCB0aGlzLnBsdWdpbi5hcHApO1xuICBcbiAgICAgIC8vIDYuIFJldG9ybmFyIGVsIG9iamV0byByZWdpc3RybyBhbCB0ZW1wbGF0ZVxuICAgICAgcmV0dXJuIHJlZ2lzdHJvO1xuICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICBuZXcgTm90aWNlKFwiTm8gc2UgcHVkbyBjcmVhciBlbCBvYmpldG8gZGUgcmVnaXN0cm8gYWwgcmV0b21hci5cIik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvLyBJbnZvY2FkbyBwYXJhIGNyZWFyIGVsIHRlbXBsYXRlIGRlIFJldG9tYXIgUGFzbyAxIGRlIDNcbiAgYXN5bmMgcmV0b21hclRhcmVhKGlkKSB7IFxuICAgIC8vIEFzZWdcdTAwRkFyYXRlIGRlIHJlZW1wbGF6YXIgJ3J1dGEvYWwvYXJjaGl2by5tZCcgY29uIGxhIHJ1dGEgZXhhY3RhIGRlbCBhcmNoaXZvIHF1ZSBkZXNlYXMgb2J0ZW5lclxuICAgIGRlYnVnZ2VyO1xuICAgIGNvbnN0IGZpbGVQYXRoID0gYFBsYW50aWxsYXMvJHt0aGlzLnBsdWdpbi5zZXR0aW5nc1tgZm9sZGVyX1JlZ2lzdHJvVGllbXBvYF19L1BsdCAtIFJlZ2lzdHJvVGllbXBvLm1kYDtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZmlsZVBhdGgpO1xuXG4gICAgaWYgKHRlbXBsYXRlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgLy8gQWhvcmEgJ2ZpbGUnIGVzIHR1IGFyY2hpdm8gZGVzZWFkbywgeSBwdWVkZXMgdHJhYmFqYXIgY29uIFx1MDBFOWwgY29tbyBuZWNlc2l0ZXNcbiAgICAgICAgY29uc29sZS5sb2coXCJBcmNoaXZvIGVuY29udHJhZG86XCIsIHRlbXBsYXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTaSBlbCBhcmNoaXZvIG5vIHNlIGVuY29udHJcdTAwRjMsICdmaWxlJyBzZXJcdTAwRTEgbnVsbFxuICAgICAgICBjb25zb2xlLmxvZyhcIkFyY2hpdm8gbm8gZW5jb250cmFkby5cIik7XG4gICAgfVxuICAgIGNvbnN0IGZpbGVuYW1lID0gXCJSZXRvbWFyIFwiICsgaWQ7XG4gICAgY29uc3QgZm9sZGVyID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChcIkluYm94XCIpO1xuICAgIGxldCBjcmVhck5vdGEgPSB0aGlzLnRwLmZpbGUuc3RhdGljX2Z1bmN0aW9ucy5nZXQoXCJjcmVhdGVfbmV3XCIpXG4gICAgYXdhaXQgY3JlYXJOb3RhICh0ZW1wbGF0ZSwgZmlsZW5hbWUsIGZhbHNlLCBmb2xkZXIpLmJhc2VuYW1lO1xuICB9XG5cbiAgLy8gU29icmVjYXJnYSBkZSBtXHUwMEU5dG9kbyBwYXJhIGxvcyBkaWZlcmVudGVzIHRpcG9zIGRlIGVudHJhZGFcbiAgYXN5bmMgZGV0YWxsZVJlZ2lzdHJvKGlkOiBudW1iZXIgfCBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+O1xuICBhc3luYyBkZXRhbGxlUmVnaXN0cm8oZmlsZTogVEZpbGUpOiBQcm9taXNlPHZvaWQ+O1xuICBhc3luYyBkZXRhbGxlUmVnaXN0cm8oKTogUHJvbWlzZTx2b2lkPjtcbiAgLy8gSW1wbGVtZW50YWNpXHUwMEYzbiBkZWwgbVx1MDBFOXRvZG8gY29uIHVuaVx1MDBGM24gZGUgdGlwb3MgcGFyYSBlbCBwYXJcdTAwRTFtZXRybyBpZFxuICBhc3luYyBkZXRhbGxlUmVnaXN0cm8ocmVnaXN0cm8/OiBudW1iZXIgfCBzdHJpbmcgfCBURmlsZSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGZvbGRlciA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9SZWdpc3Ryb1RpZW1wbztcbiAgICBsZXQgaW5mb05vdGE7XG4gICAgZGVidWdnZXI7XG4gICAgaWYgKHR5cGVvZiByZWdpc3RybyA9PT0gJ3N0cmluZycpIHtcbiAgICByZWdpc3RybyA9IHBhcnNlSW50KHJlZ2lzdHJvKTtcbiAgICB9XG4gICAgLy8gTFx1MDBGM2dpY2Egc2kgJ2lkJyBlcyB1biBuXHUwMEZBbWVybyAtPiBDdWFuZG8gbGxlZ2EgZGVsIGJvdG9uIGRlIGxhIHRhYmxhIGRlIHJlZ2lzdHJvcyBkZWwgZFx1MDBFRGEuXG4gICAgaWYgKHR5cGVvZiByZWdpc3RybyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uc3QgZmlsZXMgPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgICAgICBmb3IgKGxldCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgICAgICAgICBpZiAoZmlsZS5wYXRoLnN0YXJ0c1dpdGgoZm9sZGVyKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpPy5mcm9udG1hdHRlcjtcbiAgICAgICAgICAgICAgICBpZiAobWV0YWRhdGE/LmlkID09PSByZWdpc3Rybykge1xuICAgICAgICAgICAgICAgICAgICBpbmZvTm90YSA9IHsgZmlsZSB9O1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGluZm9Ob3RhLCBtZXRhZGF0YSk7IFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBMXHUwMEYzZ2ljYSBzaSAnaWQnIGVzIHVuIFRGaWxlXG4gICAgZWxzZSBpZiAocmVnaXN0cm8gaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgY29uc3QgbWV0YWRhdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUocmVnaXN0cm8pPy5mcm9udG1hdHRlcjtcbiAgICAgIGluZm9Ob3RhID0ge2ZpbGU6IHJlZ2lzdHJvfTtcbiAgICAgIE9iamVjdC5hc3NpZ24oaW5mb05vdGEsIG1ldGFkYXRhKTsgXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBMXHUwMEYzZ2ljYSBwYXJhIGN1YW5kbyBubyBzZSBwcm9wb3JjaW9uYSBhcmd1bWVudG9zLCBzZSBidXNjYSBsYSB0YXJlYSBhY3RpdmEgeSBzZSBjaWVycmEuXG4gICAgICAgIGNvbnN0IHJlZ2lzdHJvID0gYXdhaXQgdGhpcy51dGlsc0FwaS5idXNjYXJSZWdpc3Ryb3NBY3Rpdm9zKGFwcCk7XG4gICAgICAgIGNvbnN0IG1ldGFkYXRhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKHJlZ2lzdHJvKT8uZnJvbnRtYXR0ZXI7XG4gICAgICAgIGluZm9Ob3RhID0ge2ZpbGU6IHJlZ2lzdHJvfTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihpbmZvTm90YSwgbWV0YWRhdGEpOyBcbiAgICB9XG4gICAgbGV0IGNhbXBvcyA9IFtcImRlc2NyaXBjaW9uX1JlZ2lzdHJvVGllbXBvXCJdO1xuICAgIGRlYnVnZ2VyO1xuICAgIGxldCByZXN1bHRhZG8gPSBhd2FpdCB0aGlzLnBsdWdpbi5ZQU1MVXBkYXRlckFQSS5hY3R1YWxpemFyTm90YShpbmZvTm90YSwgY2FtcG9zKTtcbiAgICBsZXQgdGV4dG9SZXN1bHRhZG8gPSBPYmplY3QuZW50cmllcyhyZXN1bHRhZG8pLm1hcCgoW3Byb3BpZWRhZCwgdmFsb3JdKSA9PiBgJHtwcm9waWVkYWR9OiAke3ZhbG9yfWApLmpvaW4oJywgJyk7XG4gICAgbmV3IE5vdGljZShgRGVzY3JpcGNpXHUwMEYzbiBhY3R1YWxpemFkYTogJHt0ZXh0b1Jlc3VsdGFkb31gKTtcbiAgfVxuXG4gIH1cbiAgIiwgIi8vIHNyYy9tb2R1bGVzL3Rhc2tOYXZpZ2F0b3IvbW9kZWxzL1Rhc2sudHNcblxuaW1wb3J0IHsgSUVudGl0eSB9IGZyb20gJy4vRW50aXR5JztcbmltcG9ydCB7IFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG4vKipcbiAqIFRpcG9zIGRlIGxpc3RhcyBHVEQgZG9uZGUgcHVlZGUgZXN0YXIgdW5hIHRhcmVhXG4gKi9cbmV4cG9ydCBlbnVtIFRhc2tMaXN0VHlwZSB7XG4gICAgSU5CT1ggPSAnaW5ib3gnLFxuICAgIE5FWFRfQUNUSU9OUyA9ICduZXh0QWN0aW9ucycsXG4gICAgQ0FMRU5EQVIgPSAnY2FsZW5kYXInLFxuICAgIEhPUEVGVUxMWV9UT0RBWSA9ICdob3BlZnVsbHlUb2RheScsXG4gICAgQVNTSUdORUQgPSAnYXNzaWduZWQnLFxuICAgIFBST0pFQ1RTID0gJ3Byb2plY3RzJyxcbiAgICBTT01FREFZX01BWUJFID0gJ3NvbWVkYXlNYXliZScsXG4gICAgTk9UX1RISVNfV0VFSyA9ICdub3RUaGlzV2VlaycsXG4gICAgV0FJVElORyA9ICd3YWl0aW5nJ1xufVxuXG4vKipcbiAqIFByaW9yaWRhZCBkZSBsYSB0YXJlYVxuICovXG5leHBvcnQgZW51bSBUYXNrUHJpb3JpdHkge1xuICAgIEhJR0hFU1QgPSAnaGlnaGVzdCcsIC8vIFx1MjNFQlxuICAgIEhJR0ggPSAnaGlnaCcsICAgICAgLy8gXHVEODNEXHVERDNDXG4gICAgTk9STUFMID0gJ25vcm1hbCcsICAgLy8gTm9ybWFsIChzaW4gbWFyY2Fkb3IpXG4gICAgTE9XID0gJ2xvdycsICAgICAgICAvLyBcdUQ4M0RcdUREM0RcbiAgICBMT1dFU1QgPSAnbG93ZXN0JyAgIC8vIFx1MjNFQ1xufVxuXG4vKipcbiAqIEluZm9ybWFjaVx1MDBGM24gc29icmUgbGEgbFx1MDBFRG5lYSBkb25kZSBzZSBlbmN1ZW50cmEgbGEgdGFyZWFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMaW5lSW5mbyB7XG4gICAgbnVtYmVyOiBudW1iZXI7XG4gICAgdGV4dDogc3RyaW5nO1xuICAgIGluZGVudGF0aW9uOiBudW1iZXI7XG59XG5cbi8qKlxuICogSW50ZXJmYXogcGFyYSBsYXMgZXRpcXVldGFzIGRlIGxhIHRhcmVhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGFza1RhZ3Mge1xuICAgIGNvbnRleHRzOiBzdHJpbmdbXTsgICAgLy8gQ29udGV4dG9zICgjY3gtKVxuICAgIHBlb3BsZTogc3RyaW5nW107ICAgICAgLy8gUGVyc29uYXMgYXNpZ25hZGFzICgjcHgtKVxuICAgIGd0ZFRhZ3M6IHN0cmluZ1tdOyAgICAgLy8gVGFncyByZWxhY2lvbmFkb3MgY29uIEdURCAoI0dURC0pXG4gICAgb3RoZXJUYWdzOiBzdHJpbmdbXTsgICAvLyBPdHJvcyB0YWdzXG4gICAgYWxsOiBzdHJpbmdbXTsgICAgICAgICAvLyBUb2RvcyBsb3MgdGFnc1xufVxuXG4vKipcbiAqIEludGVyZmF6IHBhcmEgZmVjaGFzIHkgaG9yYXMgcmVsYWNpb25hZGFzIGNvbiBsYSB0YXJlYVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRhc2tUaW1pbmcge1xuICAgIHN0YXJ0RGF0ZT86IHN0cmluZzsgICAgLy8gRmVjaGEgZGUgaW5pY2lvIChcdUQ4M0RcdURFRUIpXG4gICAgZHVlRGF0ZT86IHN0cmluZzsgICAgICAvLyBGZWNoYSBsXHUwMEVEbWl0ZSAoXHVEODNEXHVEQ0M1KVxuICAgIHNjaGVkdWxlZERhdGU/OiBzdHJpbmc7IC8vIEZlY2hhIHByb2dyYW1hZGEgKFx1MjNGMylcbiAgICBzdGFydFRpbWU/OiBzdHJpbmc7ICAgIC8vIEhvcmEgZGUgaW5pY2lvIFtoSTo6XVxuICAgIGVuZFRpbWU/OiBzdHJpbmc7ICAgICAgLy8gSG9yYSBkZSBmaW4gW2hGOjpdXG4gICAgZHVyYXRpb24/OiBudW1iZXI7ICAgICAvLyBEdXJhY2lcdTAwRjNuIGVuIG1pbnV0b3NcbiAgICB3ZWVrPzogc3RyaW5nOyAgICAgICAgIC8vIFNlbWFuYSBwbGFuaWZpY2FkYSBbdzo6XVxufVxuXG4vKipcbiAqIE1vZGVsbyBkZSB0YXJlYVxuICovXG5leHBvcnQgY2xhc3MgVGFzayB7XG4gICAgLy8gSWRlbnRpZmljYWRvcmVzXG4gICAgaWQ6IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgLy8gSUQgXHUwMEZBbmljbyAoXHVEODNDXHVERDk0KVxuICAgIHRhc2tJZDogc3RyaW5nOyAgICAgICAgICAgICAgICAgIC8vIElEIGRpcmVjdG8gZXh0cmFcdTAwRURkbyBkZSBsYSB0YXJlYVxuXG4gICAgLy8gQ29udGVuaWRvIGJcdTAwRTFzaWNvXG4gICAgdGV4dDogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAgLy8gVGV4dG8gcHJpbmNpcGFsIGRlIGxhIHRhcmVhXG4gICAgcmF3VGV4dDogc3RyaW5nOyAgICAgICAgICAgICAgICAgLy8gVGV4dG8gY29tcGxldG8gaW5jbHV5ZW5kbyBtZXRhZGF0b3NcbiAgICBjb21wbGV0ZWQ6IGJvb2xlYW47ICAgICAgICAgICAgICAvLyBTaSBlc3RcdTAwRTEgY29tcGxldGFkYSBvIG5vXG5cbiAgICAvLyBVYmljYWNpXHUwMEYzblxuICAgIGZpbGU6IFRGaWxlOyAgICAgICAgICAgICAgICAgICAgIC8vIEFyY2hpdm8gZG9uZGUgc2UgZW5jdWVudHJhIGxhIHRhcmVhXG4gICAgZmlsZVBhdGg6IHN0cmluZzsgICAgICAgICAgICAgICAgLy8gUnV0YSBkZWwgYXJjaGl2b1xuICAgIGxpbmVJbmZvOiBMaW5lSW5mbzsgICAgICAgICAgICAgIC8vIEluZm9ybWFjaVx1MDBGM24gZGUgbGEgbFx1MDBFRG5lYVxuICAgIFxuICAgIC8vIE1ldGFkYXRvc1xuICAgIHByaW9yaXR5OiBUYXNrUHJpb3JpdHk7ICAgICAgICAgIC8vIFByaW9yaWRhZCBkZSBsYSB0YXJlYVxuICAgIHRhZ3M6IFRhc2tUYWdzOyAgICAgICAgICAgICAgICAgIC8vIEV0aXF1ZXRhc1xuICAgIHRpbWluZzogVGFza1RpbWluZzsgICAgICAgICAgICAgIC8vIEZlY2hhcyB5IGhvcmFzXG4gICAgZGVwZW5kZW5jaWVzOiBzdHJpbmdbXTsgICAgICAgICAgLy8gSURzIGRlIHRhcmVhcyBkZSBsYXMgcXVlIGRlcGVuZGUgKFx1MjZENClcbiAgICBcbiAgICAvLyBSZWxhY2lvbmVzXG4gICAgcGFyZW50RW50aXR5PzogSUVudGl0eTsgICAgICAgICAgLy8gRW50aWRhZCBwYWRyZVxuICAgIFxuICAgIC8vIENsYXNpZmljYWNpXHUwMEYzbiBHVERcbiAgICBsaXN0VHlwZT86IFRhc2tMaXN0VHlwZTsgICAgICAgICAvLyBUaXBvIGRlIGxpc3RhIEdURCBkb25kZSBzZSBlbmN1ZW50cmFcbiAgICBpc0Jsb2NrZWQ6IGJvb2xlYW4gPSBmYWxzZTsgICAgICAvLyBTaSBlc3RcdTAwRTEgYmxvcXVlYWRhIHBvciBkZXBlbmRlbmNpYXNcbiAgICBibG9ja1JlYXNvbj86IHN0cmluZzsgICAgICAgICAgICAvLyBSYXpcdTAwRjNuIHBvciBsYSBxdWUgZXN0XHUwMEUxIGJsb3F1ZWFkYVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGlkOiBzdHJpbmcsXG4gICAgICAgIHRleHQ6IHN0cmluZyxcbiAgICAgICAgcmF3VGV4dDogc3RyaW5nLFxuICAgICAgICBjb21wbGV0ZWQ6IGJvb2xlYW4sXG4gICAgICAgIGZpbGU6IFRGaWxlLFxuICAgICAgICBsaW5lSW5mbzogTGluZUluZm9cbiAgICApIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnRhc2tJZCA9IGlkOyAvLyBQb3IgZGVmZWN0byBzb24gaWd1YWxlcywgcGVybyB0YXNrSWQgcHVlZGUgY2FtYmlhciBzaSBzZSBleHRyYWUgdW5vIGRlIGxhIHRhcmVhXG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgICAgIHRoaXMucmF3VGV4dCA9IHJhd1RleHQ7XG4gICAgICAgIHRoaXMuY29tcGxldGVkID0gY29tcGxldGVkO1xuICAgICAgICB0aGlzLmZpbGUgPSBmaWxlO1xuICAgICAgICB0aGlzLmZpbGVQYXRoID0gZmlsZS5wYXRoO1xuICAgICAgICB0aGlzLmxpbmVJbmZvID0gbGluZUluZm87XG4gICAgICAgIFxuICAgICAgICAvLyBJbmljaWFsaXphciB2YWxvcmVzIHBvciBkZWZlY3RvXG4gICAgICAgIHRoaXMucHJpb3JpdHkgPSBUYXNrUHJpb3JpdHkuTk9STUFMO1xuICAgICAgICB0aGlzLnRhZ3MgPSB7XG4gICAgICAgICAgICBjb250ZXh0czogW10sXG4gICAgICAgICAgICBwZW9wbGU6IFtdLFxuICAgICAgICAgICAgZ3RkVGFnczogW10sXG4gICAgICAgICAgICBvdGhlclRhZ3M6IFtdLFxuICAgICAgICAgICAgYWxsOiBbXVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnRpbWluZyA9IHt9O1xuICAgICAgICB0aGlzLmRlcGVuZGVuY2llcyA9IFtdO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBDb21wcnVlYmEgc2kgbGEgdGFyZWEgdGllbmUgdW4gY29udGV4dG8gZXNwZWNcdTAwRURmaWNvXG4gICAgICovXG4gICAgaGFzQ29udGV4dChjb250ZXh0OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFncy5jb250ZXh0cy5zb21lKGN0eCA9PiBcbiAgICAgICAgICAgIGN0eC50b0xvd2VyQ2FzZSgpID09PSBjb250ZXh0LnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBDb21wcnVlYmEgc2kgbGEgdGFyZWEgZXN0XHUwMEUxIGFzaWduYWRhIGEgdW5hIHBlcnNvbmEgZXNwZWNcdTAwRURmaWNhXG4gICAgICovXG4gICAgaXNBc3NpZ25lZFRvKHBlcnNvbjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhZ3MucGVvcGxlLnNvbWUocCA9PiBcbiAgICAgICAgICAgIHAudG9Mb3dlckNhc2UoKSA9PT0gcGVyc29uLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBDb21wcnVlYmEgc2kgbGEgdGFyZWEgdGllbmUgdW5hIGV0aXF1ZXRhIEdURCBlc3BlY1x1MDBFRGZpY2FcbiAgICAgKi9cbiAgICBoYXNHVERUYWcodGFnOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFncy5ndGRUYWdzLnNvbWUodCA9PiBcbiAgICAgICAgICAgIHQudG9Mb3dlckNhc2UoKSA9PT0gdGFnLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERldGVybWluYSBzaSB1bmEgdGFyZWEgZXN0XHUwMEUxIHZlbmNpZGFcbiAgICAgKi9cbiAgICBpc092ZXJkdWUoKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICghdGhpcy50aW1pbmcuZHVlRGF0ZSAmJiAhdGhpcy50aW1pbmcuc2NoZWR1bGVkRGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIHRvZGF5LnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgICBcbiAgICAgICAgLy8gVmVyaWZpY2FyIGZlY2hhIGxcdTAwRURtaXRlIChcdUQ4M0RcdURDQzUpXG4gICAgICAgIGlmICh0aGlzLnRpbWluZy5kdWVEYXRlKSB7XG4gICAgICAgICAgICBjb25zdCBkdWVEYXRlID0gbmV3IERhdGUodGhpcy50aW1pbmcuZHVlRGF0ZSk7XG4gICAgICAgICAgICBkdWVEYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgICAgICAgaWYgKGR1ZURhdGUgPCB0b2RheSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBWZXJpZmljYXIgZmVjaGEgcHJvZ3JhbWFkYSAoXHUyM0YzKVxuICAgICAgICBpZiAodGhpcy50aW1pbmcuc2NoZWR1bGVkRGF0ZSkge1xuICAgICAgICAgICAgY29uc3Qgc2NoZWR1bGVkRGF0ZSA9IG5ldyBEYXRlKHRoaXMudGltaW5nLnNjaGVkdWxlZERhdGUpO1xuICAgICAgICAgICAgc2NoZWR1bGVkRGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgICAgICAgIGlmIChzY2hlZHVsZWREYXRlIDwgdG9kYXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmEgc2kgdW5hIHRhcmVhIGVzdFx1MDBFMSBwcm9ncmFtYWRhIHBhcmEgaG95XG4gICAgICovXG4gICAgaXNGb3JUb2RheSgpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCF0aGlzLnRpbWluZy5kdWVEYXRlICYmICF0aGlzLnRpbWluZy5zY2hlZHVsZWREYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgICAgdG9kYXkuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICAgIFxuICAgICAgICAvLyBWZXJpZmljYXIgZmVjaGEgbFx1MDBFRG1pdGUgKFx1RDgzRFx1RENDNSlcbiAgICAgICAgaWYgKHRoaXMudGltaW5nLmR1ZURhdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGR1ZURhdGUgPSBuZXcgRGF0ZSh0aGlzLnRpbWluZy5kdWVEYXRlKTtcbiAgICAgICAgICAgIGR1ZURhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICAgICAgICBpZiAoZHVlRGF0ZS5nZXRUaW1lKCkgPT09IHRvZGF5LmdldFRpbWUoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBWZXJpZmljYXIgZmVjaGEgcHJvZ3JhbWFkYSAoXHUyM0YzKVxuICAgICAgICBpZiAodGhpcy50aW1pbmcuc2NoZWR1bGVkRGF0ZSkge1xuICAgICAgICAgICAgY29uc3Qgc2NoZWR1bGVkRGF0ZSA9IG5ldyBEYXRlKHRoaXMudGltaW5nLnNjaGVkdWxlZERhdGUpO1xuICAgICAgICAgICAgc2NoZWR1bGVkRGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgICAgICAgIGlmIChzY2hlZHVsZWREYXRlLmdldFRpbWUoKSA9PT0gdG9kYXkuZ2V0VGltZSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5hIHNpIHVuYSB0YXJlYSB0aWVuZSBob3JhIGRlIGluaWNpbyBlc3RhYmxlY2lkYVxuICAgICAqL1xuICAgIGhhc1N0YXJ0VGltZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy50aW1pbmcuc3RhcnRUaW1lO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmEgbG9zIGRcdTAwRURhcyBoYXN0YSBsYSBmZWNoYSBsXHUwMEVEbWl0ZSAocG9zaXRpdm8gc2kgYVx1MDBGQW4gaGF5IHRpZW1wbywgbmVnYXRpdm8gc2kgZXN0XHUwMEUxIHZlbmNpZGEpXG4gICAgICovXG4gICAgZ2V0RGF5c1VudGlsRHVlKCk6IG51bWJlciB8IG51bGwge1xuICAgICAgICBpZiAoIXRoaXMudGltaW5nLmR1ZURhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIHRvZGF5LnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZHVlRGF0ZSA9IG5ldyBEYXRlKHRoaXMudGltaW5nLmR1ZURhdGUpO1xuICAgICAgICBkdWVEYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZGlmZlRpbWUgPSBkdWVEYXRlLmdldFRpbWUoKSAtIHRvZGF5LmdldFRpbWUoKTtcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbChkaWZmVGltZSAvICgxMDAwICogNjAgKiA2MCAqIDI0KSk7XG4gICAgfVxufVxuXG4vLyBERVZFTE9QTUVOVF9DSEVDS1BPSU5UOiBcInRhc2tfbW9kZWxcIlxuLy8gRGVzY3JpcGNpXHUwMEYzbjogSW1wbGVtZW50YWNpXHUwMEYzbiBkZWwgbW9kZWxvIGRlIHRhcmVhc1xuLy8gRXN0YWRvOiBDb21wbGV0byIsICIvLyBzcmMvbW9kdWxlcy90YXNrTmF2aWdhdG9yL21vZGVscy9FbnRpdHkudHNcblxuaW1wb3J0IHsgVEZpbGUgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBUYXNrIH0gZnJvbSAnLi9UYXNrJztcblxuLyoqXG4gKiBUaXBvcyBkZSBlbnRpZGFkZXMgZW4gZWwgc2lzdGVtYSBHVERcbiAqL1xuZXhwb3J0IGVudW0gRW50aXR5VHlwZSB7XG4gICAgQVJFQV9WSURBID0gJ0FWJyxcbiAgICBBUkVBX0lOVEVSRVMgPSAnQUknLFxuICAgIFBST1lFQ1RPX1EgPSAnUFEnLFxuICAgIFBST1lFQ1RPX0dURCA9ICdQR1REJyxcbiAgICBBTk9UQUNJT04gPSAnQXgnLFxuICAgIENBTVBBTkEgPSAnQ3AnLFxuICAgIEVOVFJFR0FCTEUgPSAnRU1rdCcsXG4gICAgUkVHSVNUUk9fVElFTVBPID0gJ1JUJyxcbiAgICBUUkFOU0FDQ0lPTiA9ICdUeCcsXG4gICAgT1RIRVIgPSAnT1RIRVInLFxuICAgIFVOS05PV04gPSAnVU5LTk9XTidcbn1cblxuLyoqXG4gKiBFc3RhZG9zIHBvc2libGVzIHBhcmEgZW50aWRhZGVzXG4gKi9cbmV4cG9ydCBlbnVtIEVudGl0eVN0YXRlIHtcbiAgICBBQ1RJVkUgPSAnXHVEODNEXHVERkUyJyxcbiAgICBQQVVTRUQgPSAnXHVEODNEXHVERkUxJyxcbiAgICBTVE9QUEVEID0gJ1x1RDgzRFx1REQzNCcsXG4gICAgQVJDSElWRUQgPSAnXHVEODNEXHVERDM1JyxcbiAgICBVTktOT1dOID0gJydcbn1cblxuLyoqXG4gKiBJbnRlcmZheiBiYXNlIHBhcmEgdG9kYXMgbGFzIGVudGlkYWRlcyBkZWwgc2lzdGVtYSBHVERcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRW50aXR5IHtcbiAgICBpZDogc3RyaW5nO1xuICAgIHR5cGU6IEVudGl0eVR5cGU7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGZpbGU6IFRGaWxlO1xuICAgIHN0YXRlOiBFbnRpdHlTdGF0ZTtcbiAgICB0YXNrczogVGFza1tdO1xuICAgIHBhcmVudD86IElFbnRpdHk7XG4gICAgY2hpbGRyZW46IElFbnRpdHlbXTtcbiAgICBcbiAgICAvLyBQcm9waWVkYWRlcyBqZXJcdTAwRTFycXVpY2FzXG4gICAgYXJlYVZpZGE/OiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICBhcmVhSW50ZXJlcz86IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgIHByb3llY3RvUT86IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgIHByb3llY3RvR1REPzogc3RyaW5nIHwgc3RyaW5nW107XG4gICAgXG4gICAgLy8gTml2ZWxlcyBwYXJhIGVudGlkYWRlcyByZWN1cnNpdmFzXG4gICAgbGV2ZWw/OiBudW1iZXI7XG4gICAgXG4gICAgLy8gTWV0YWRhdG9zIGFkaWNpb25hbGVzIGVzcGVjXHUwMEVEZmljb3MgcG9yIHRpcG9cbiAgICBtZXRhZGF0YTogUmVjb3JkPHN0cmluZywgYW55Pjtcbn1cblxuLyoqXG4gKiBDbGFzZSBiYXNlIHBhcmEgdG9kYXMgbGFzIGVudGlkYWRlc1xuICovXG5leHBvcnQgY2xhc3MgRW50aXR5IGltcGxlbWVudHMgSUVudGl0eSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICB0eXBlOiBFbnRpdHlUeXBlO1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICBmaWxlOiBURmlsZTtcbiAgICBzdGF0ZTogRW50aXR5U3RhdGU7XG4gICAgdGFza3M6IFRhc2tbXSA9IFtdO1xuICAgIHBhcmVudD86IElFbnRpdHk7XG4gICAgY2hpbGRyZW46IElFbnRpdHlbXSA9IFtdO1xuICAgIGFyZWFWaWRhPzogc3RyaW5nIHwgc3RyaW5nW107XG4gICAgYXJlYUludGVyZXM/OiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICBwcm95ZWN0b1E/OiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICBwcm95ZWN0b0dURD86IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgIGxldmVsPzogbnVtYmVyO1xuICAgIG1ldGFkYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XG4gICAgXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGlkOiBzdHJpbmcsXG4gICAgICAgIHR5cGU6IEVudGl0eVR5cGUsXG4gICAgICAgIHRpdGxlOiBzdHJpbmcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXG4gICAgICAgIGZpbGU6IFRGaWxlLFxuICAgICAgICBzdGF0ZTogRW50aXR5U3RhdGUgPSBFbnRpdHlTdGF0ZS5VTktOT1dOXG4gICAgKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMuZmlsZSA9IGZpbGU7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQVx1MDBGMWFkZSB1bmEgdGFyZWEgYSBlc3RhIGVudGlkYWRcbiAgICAgKi9cbiAgICBhZGRUYXNrKHRhc2s6IFRhc2spOiB2b2lkIHtcbiAgICAgICAgdGhpcy50YXNrcy5wdXNoKHRhc2spO1xuICAgICAgICB0YXNrLnBhcmVudEVudGl0eSA9IHRoaXM7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIEFcdTAwRjFhZGUgdW5hIGVudGlkYWQgaGlqYVxuICAgICAqL1xuICAgIGFkZENoaWxkKGNoaWxkOiBJRW50aXR5KTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgIGNoaWxkLnBhcmVudCA9IHRoaXM7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIERldnVlbHZlIGVsIG5cdTAwRkFtZXJvIHRvdGFsIGRlIHRhcmVhcyAoaW5jbHV5ZW5kbyBsYXMgZGUgZW50aWRhZGVzIGhpamFzKVxuICAgICAqL1xuICAgIGdldFRvdGFsVGFza0NvdW50KCk6IG51bWJlciB7XG4gICAgICAgIGxldCBjb3VudCA9IHRoaXMudGFza3MubGVuZ3RoO1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGNvdW50ICs9IGNoaWxkLmdldFRvdGFsVGFza0NvdW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBEZXZ1ZWx2ZSBlbCBuXHUwMEZBbWVybyB0b3RhbCBkZSB0YXJlYXMgcGVuZGllbnRlcyAoaW5jbHV5ZW5kbyBsYXMgZGUgZW50aWRhZGVzIGhpamFzKVxuICAgICAqL1xuICAgIGdldFBlbmRpbmdUYXNrQ291bnQoKTogbnVtYmVyIHtcbiAgICAgICAgbGV0IGNvdW50ID0gdGhpcy50YXNrcy5maWx0ZXIodGFzayA9PiAhdGFzay5jb21wbGV0ZWQpLmxlbmd0aDtcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBjb3VudCArPSBjaGlsZC5nZXRQZW5kaW5nVGFza0NvdW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH1cbn1cblxuLyoqXG4gKiBDbGFzZSBlc3BlY1x1MDBFRGZpY2EgcGFyYSBcdTAwQzFyZWFzIGRlIFZpZGFcbiAqL1xuZXhwb3J0IGNsYXNzIEFyZWFWaWRhIGV4dGVuZHMgRW50aXR5IHtcbiAgICB0cmltZXN0cmU6IHN0cmluZztcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgaWQ6IHN0cmluZyxcbiAgICAgICAgdGl0bGU6IHN0cmluZyxcbiAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgICAgICAgZmlsZTogVEZpbGUsIFxuICAgICAgICBzdGF0ZTogRW50aXR5U3RhdGUsXG4gICAgICAgIHRyaW1lc3RyZTogc3RyaW5nXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGlkLCBFbnRpdHlUeXBlLkFSRUFfVklEQSwgdGl0bGUsIGRlc2NyaXB0aW9uLCBmaWxlLCBzdGF0ZSk7XG4gICAgICAgIHRoaXMudHJpbWVzdHJlID0gdHJpbWVzdHJlO1xuICAgICAgICB0aGlzLm1ldGFkYXRhLnRyaW1lc3RyZSA9IHRyaW1lc3RyZTtcbiAgICB9XG59XG5cbi8qKlxuICogQ2xhc2UgZXNwZWNcdTAwRURmaWNhIHBhcmEgXHUwMEMxcmVhcyBkZSBJbnRlclx1MDBFOXNcbiAqL1xuZXhwb3J0IGNsYXNzIEFyZWFJbnRlcmVzIGV4dGVuZHMgRW50aXR5IHtcbiAgICBuaXZlbEFJOiBudW1iZXI7XG4gICAgXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGlkOiBzdHJpbmcsXG4gICAgICAgIHRpdGxlOiBzdHJpbmcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXG4gICAgICAgIGZpbGU6IFRGaWxlLFxuICAgICAgICBzdGF0ZTogRW50aXR5U3RhdGUsXG4gICAgICAgIG5pdmVsQUk6IG51bWJlciA9IDBcbiAgICApIHtcbiAgICAgICAgc3VwZXIoaWQsIEVudGl0eVR5cGUuQVJFQV9JTlRFUkVTLCB0aXRsZSwgZGVzY3JpcHRpb24sIGZpbGUsIHN0YXRlKTtcbiAgICAgICAgdGhpcy5uaXZlbEFJID0gbml2ZWxBSTtcbiAgICAgICAgdGhpcy5sZXZlbCA9IG5pdmVsQUk7XG4gICAgICAgIHRoaXMubWV0YWRhdGEubml2ZWxBSSA9IG5pdmVsQUk7XG4gICAgfVxufVxuXG4vKipcbiAqIENsYXNlIGVzcGVjXHUwMEVEZmljYSBwYXJhIFByb3llY3RvcyBRXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm95ZWN0b1EgZXh0ZW5kcyBFbnRpdHkge1xuICAgIHRyaW1lc3RyZXM6IHN0cmluZ1tdID0gW107XG4gICAgXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGlkOiBzdHJpbmcsXG4gICAgICAgIHRpdGxlOiBzdHJpbmcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXG4gICAgICAgIGZpbGU6IFRGaWxlLFxuICAgICAgICBzdGF0ZTogRW50aXR5U3RhdGUsXG4gICAgICAgIHRyaW1lc3RyZXM6IHN0cmluZ1tdID0gW11cbiAgICApIHtcbiAgICAgICAgc3VwZXIoaWQsIEVudGl0eVR5cGUuUFJPWUVDVE9fUSwgdGl0bGUsIGRlc2NyaXB0aW9uLCBmaWxlLCBzdGF0ZSk7XG4gICAgICAgIHRoaXMudHJpbWVzdHJlcyA9IHRyaW1lc3RyZXM7XG4gICAgICAgIHRoaXMubWV0YWRhdGEudHJpbWVzdHJlcyA9IHRyaW1lc3RyZXM7XG4gICAgfVxufVxuXG4vKipcbiAqIENsYXNlIGVzcGVjXHUwMEVEZmljYSBwYXJhIFByb3llY3RvcyBHVERcbiAqL1xuZXhwb3J0IGNsYXNzIFByb3llY3RvR1REIGV4dGVuZHMgRW50aXR5IHtcbiAgICBuaXZlbFA6IG51bWJlcjtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgaWQ6IHN0cmluZyxcbiAgICAgICAgdGl0bGU6IHN0cmluZyxcbiAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgICAgICAgZmlsZTogVEZpbGUsXG4gICAgICAgIHN0YXRlOiBFbnRpdHlTdGF0ZSxcbiAgICAgICAgbml2ZWxQOiBudW1iZXIgPSAwXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGlkLCBFbnRpdHlUeXBlLlBST1lFQ1RPX0dURCwgdGl0bGUsIGRlc2NyaXB0aW9uLCBmaWxlLCBzdGF0ZSk7XG4gICAgICAgIHRoaXMubml2ZWxQID0gbml2ZWxQO1xuICAgICAgICB0aGlzLmxldmVsID0gbml2ZWxQO1xuICAgICAgICB0aGlzLm1ldGFkYXRhLm5pdmVsUCA9IG5pdmVsUDtcbiAgICB9XG59XG5cbi8qKlxuICogRnVuY2lcdTAwRjNuIGRlIHV0aWxpZGFkIHBhcmEgY3JlYXIgbGEgaW5zdGFuY2lhIGNvcnJlY3RhIHNlZ1x1MDBGQW4gZWwgdGlwb1xuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRW50aXR5KFxuICAgIHR5cGU6IEVudGl0eVR5cGUsXG4gICAgaWQ6IHN0cmluZyxcbiAgICB0aXRsZTogc3RyaW5nLFxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXG4gICAgZmlsZTogVEZpbGUsXG4gICAgc3RhdGU6IEVudGl0eVN0YXRlLFxuICAgIG1ldGFkYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge31cbik6IElFbnRpdHkge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIEVudGl0eVR5cGUuQVJFQV9WSURBOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBBcmVhVmlkYShpZCwgdGl0bGUsIGRlc2NyaXB0aW9uLCBmaWxlLCBzdGF0ZSwgbWV0YWRhdGEudHJpbWVzdHJlIHx8ICcnKTtcbiAgICAgICAgXG4gICAgICAgIGNhc2UgRW50aXR5VHlwZS5BUkVBX0lOVEVSRVM6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEFyZWFJbnRlcmVzKGlkLCB0aXRsZSwgZGVzY3JpcHRpb24sIGZpbGUsIHN0YXRlLCBtZXRhZGF0YS5uaXZlbEFJIHx8IDApO1xuICAgICAgICBcbiAgICAgICAgY2FzZSBFbnRpdHlUeXBlLlBST1lFQ1RPX1E6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb3llY3RvUShpZCwgdGl0bGUsIGRlc2NyaXB0aW9uLCBmaWxlLCBzdGF0ZSwgbWV0YWRhdGEudHJpbWVzdHJlcyB8fCBbXSk7XG4gICAgICAgIFxuICAgICAgICBjYXNlIEVudGl0eVR5cGUuUFJPWUVDVE9fR1REOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm95ZWN0b0dURChpZCwgdGl0bGUsIGRlc2NyaXB0aW9uLCBmaWxlLCBzdGF0ZSwgbWV0YWRhdGEubml2ZWxQIHx8IDApO1xuICAgICAgICBcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnN0IGVudGl0eSA9IG5ldyBFbnRpdHkoaWQsIHR5cGUsIHRpdGxlLCBkZXNjcmlwdGlvbiwgZmlsZSwgc3RhdGUpO1xuICAgICAgICAgICAgZW50aXR5Lm1ldGFkYXRhID0gbWV0YWRhdGE7XG4gICAgICAgICAgICByZXR1cm4gZW50aXR5O1xuICAgIH1cbn1cblxuLy8gREVWRUxPUE1FTlRfQ0hFQ0tQT0lOVDogXCJlbnRpdHlfbW9kZWxzXCJcbi8vIERlc2NyaXBjaVx1MDBGM246IEltcGxlbWVudGFjaVx1MDBGM24gZGUgbGFzIGNsYXNlcyBkZSBtb2RlbG9zIHBhcmEgcmVwcmVzZW50YXIgbGFzIGVudGlkYWRlcyBkZWwgc2lzdGVtYSBHVERcbi8vIEVzdGFkbzogQ29tcGxldG8iLCAiLy8gc3JjL21vZHVsZXMvdGFza05hdmlnYXRvci9tb2RlbHMvSGllcmFyY2h5Vmlld01vZGVsLnRzXG5cbmltcG9ydCB7IElFbnRpdHksIEVudGl0eVR5cGUgfSBmcm9tICcuL0VudGl0eSc7XG5pbXBvcnQgeyBUYXNrLCBUYXNrTGlzdFR5cGUgfSBmcm9tICcuL1Rhc2snO1xuXG4vKipcbiAqIE1vZG9zIGRlIHZpc3VhbGl6YWNpXHUwMEYzbiBwYXJhIGVsIG5hdmVnYWRvciBkZSB0YXJlYXNcbiAqL1xuZXhwb3J0IGVudW0gVmlld01vZGUge1xuICAgIEhJRVJBUkNIWSA9ICdoaWVyYXJjaHknLCAgICAgLy8gVmlzdGEgamVyXHUwMEUxcnF1aWNhIChwb3IgZXN0cnVjdHVyYSlcbiAgICBHVERfTElTVFMgPSAnZ3RkTGlzdHMnLCAgICAgIC8vIFZpc3RhIGRlIGxpc3RhcyBHVERcbiAgICBDT01CSU5FRCA9ICdjb21iaW5lZCcgICAgICAgIC8vIFZpc3RhIGNvbWJpbmFkYVxufVxuXG4vKipcbiAqIE9wY2lvbmVzIGRlIGZpbHRyYWRvIHBhcmEgbGEgdmlzdWFsaXphY2lcdTAwRjNuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRmlsdGVyT3B0aW9ucyB7XG4gICAgLy8gRmlsdHJvcyBnZW5lcmFsZXNcbiAgICBzaG93Q29tcGxldGVkOiBib29sZWFuOyAgICAgIC8vIE1vc3RyYXIgdGFyZWFzIGNvbXBsZXRhZGFzXG4gICAgc2hvd0FjdGl2ZTogYm9vbGVhbjsgICAgICAgICAvLyBNb3N0cmFyIGVudGlkYWRlcyBhY3RpdmFzIChcdUQ4M0RcdURGRTIpXG4gICAgc2hvd1BhdXNlZDogYm9vbGVhbjsgICAgICAgICAvLyBNb3N0cmFyIGVudGlkYWRlcyBwYXVzYWRhcyAoXHVEODNEXHVERkUxKVxuICAgIHNob3dTdG9wcGVkOiBib29sZWFuOyAgICAgICAgLy8gTW9zdHJhciBlbnRpZGFkZXMgZGV0ZW5pZGFzIChcdUQ4M0RcdUREMzQpXG4gICAgc2hvd0FyY2hpdmVkOiBib29sZWFuOyAgICAgICAvLyBNb3N0cmFyIGVudGlkYWRlcyBhcmNoaXZhZGFzIChcdUQ4M0RcdUREMzUpXG4gICAgXG4gICAgLy8gRmlsdHJvcyBwb3IgdGlwbyBkZSBlbnRpZGFkXG4gICAgc2hvd0FyZWFzVmlkYTogYm9vbGVhbjsgICAgICAvLyBNb3N0cmFyIFx1MDBDMXJlYXMgZGUgVmlkYVxuICAgIHNob3dBcmVhc0ludGVyZXM6IGJvb2xlYW47ICAgLy8gTW9zdHJhciBcdTAwQzFyZWFzIGRlIEludGVyXHUwMEU5c1xuICAgIHNob3dQcm95ZWN0b3NROiBib29sZWFuOyAgICAgLy8gTW9zdHJhciBQcm95ZWN0b3MgUVxuICAgIHNob3dQcm95ZWN0b3NHVEQ6IGJvb2xlYW47ICAgLy8gTW9zdHJhciBQcm95ZWN0b3MgR1REXG4gICAgc2hvd090aGVyRW50aXRpZXM6IGJvb2xlYW47ICAvLyBNb3N0cmFyIG90cmFzIGVudGlkYWRlc1xuICAgIFxuICAgIC8vIEZpbHRyb3MgcG9yIGNvbnRleHRvXG4gICAgY29udGV4dHM6IHN0cmluZ1tdOyAgICAgICAgICAvLyBDb250ZXh0b3MgYSBtb3N0cmFyICgjY3gtKVxuICAgIHBlb3BsZTogc3RyaW5nW107ICAgICAgICAgICAgLy8gUGVyc29uYXMgYSBtb3N0cmFyICgjcHgtKVxuICAgIFxuICAgIC8vIEZpbHRyb3MgcG9yIGxpc3RhcyBHVERcbiAgICBlbmFibGVkTGlzdHM6IFRhc2tMaXN0VHlwZVtdOyAvLyBMaXN0YXMgR1REIGhhYmlsaXRhZGFzXG4gICAgXG4gICAgLy8gT3Ryb3MgZmlsdHJvc1xuICAgIHNlYXJjaFRleHQ6IHN0cmluZzsgICAgICAgICAgLy8gVGV4dG8gZGUgYlx1MDBGQXNxdWVkYVxuICAgIGRheXNSYW5nZTogbnVtYmVyOyAgICAgICAgICAgLy8gUmFuZ28gZGUgZFx1MDBFRGFzIHBhcmEgbW9zdHJhciB0YXJlYXMgcG9yIGZlY2hhXG59XG5cbi8qKlxuICogTW9kZWxvIHBhcmEgbGEgdmlzdGEgamVyXHUwMEUxcnF1aWNhXG4gKi9cbmV4cG9ydCBjbGFzcyBIaWVyYXJjaHlWaWV3TW9kZWwge1xuICAgIC8vIEVudGlkYWQgZW4gZm9jbyAobGEgbm90YSBhY3RpdmEgYWN0dWFsKVxuICAgIGZvY3VzRW50aXR5OiBJRW50aXR5IHwgbnVsbCA9IG51bGw7XG4gICAgXG4gICAgLy8gRW50aWRhZGVzIHJhXHUwMEVEeiBwYXJhIGxhIGplcmFycXVcdTAwRURhXG4gICAgcm9vdEVudGl0aWVzOiBJRW50aXR5W10gPSBbXTtcbiAgICBcbiAgICAvLyBUb2RhcyBsYXMgZW50aWRhZGVzIGRpc3BvbmlibGVzXG4gICAgYWxsRW50aXRpZXM6IElFbnRpdHlbXSA9IFtdO1xuICAgIFxuICAgIC8vIFRvZGFzIGxhcyB0YXJlYXMgY2xhc2lmaWNhZGFzIHBvciB0aXBvIGRlIGxpc3RhIEdURFxuICAgIGd0ZExpc3RzOiBNYXA8VGFza0xpc3RUeXBlLCBUYXNrW10+ID0gbmV3IE1hcCgpO1xuICAgIFxuICAgIC8vIFRvZGFzIGxhcyB0YXJlYXMgc2luIGNsYXNpZmljYXJcbiAgICBhbGxUYXNrczogVGFza1tdID0gW107XG4gICAgXG4gICAgLy8gTW9kbyBkZSB2aXN1YWxpemFjaVx1MDBGM24gYWN0dWFsXG4gICAgdmlld01vZGU6IFZpZXdNb2RlID0gVmlld01vZGUuSElFUkFSQ0hZO1xuICAgIFxuICAgIC8vIEZpbHRyb3MgYXBsaWNhZG9zIGFjdHVhbG1lbnRlXG4gICAgZmlsdGVyczogRmlsdGVyT3B0aW9ucztcbiAgICBcbiAgICAvLyBSZXN1bHRhZG9zIGZpbHRyYWRvcyAocGFyYSBtb3N0cmFyKVxuICAgIGZpbHRlcmVkRW50aXRpZXM6IElFbnRpdHlbXSA9IFtdO1xuICAgIGZpbHRlcmVkVGFza3M6IE1hcDxUYXNrTGlzdFR5cGUsIFRhc2tbXT4gPSBuZXcgTWFwKCk7XG4gICAgXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vIEluaWNpYWxpemFyIGZpbHRyb3MgcG9yIGRlZmVjdG9cbiAgICAgICAgdGhpcy5maWx0ZXJzID0ge1xuICAgICAgICAgICAgc2hvd0NvbXBsZXRlZDogZmFsc2UsXG4gICAgICAgICAgICBzaG93QWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgc2hvd1BhdXNlZDogdHJ1ZSxcbiAgICAgICAgICAgIHNob3dTdG9wcGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHNob3dBcmNoaXZlZDogZmFsc2UsXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNob3dBcmVhc1ZpZGE6IHRydWUsXG4gICAgICAgICAgICBzaG93QXJlYXNJbnRlcmVzOiB0cnVlLFxuICAgICAgICAgICAgc2hvd1Byb3llY3Rvc1E6IHRydWUsXG4gICAgICAgICAgICBzaG93UHJveWVjdG9zR1REOiB0cnVlLFxuICAgICAgICAgICAgc2hvd090aGVyRW50aXRpZXM6IHRydWUsXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnRleHRzOiBbXSxcbiAgICAgICAgICAgIHBlb3BsZTogW10sXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGVuYWJsZWRMaXN0czogT2JqZWN0LnZhbHVlcyhUYXNrTGlzdFR5cGUpLFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBzZWFyY2hUZXh0OiAnJyxcbiAgICAgICAgICAgIGRheXNSYW5nZTogN1xuICAgICAgICB9O1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBBcGxpY2EgbG9zIGZpbHRyb3Mgc2VsZWNjaW9uYWRvcyBhIGxhcyBlbnRpZGFkZXMgeSB0YXJlYXNcbiAgICAgKi9cbiAgICBhcHBseUZpbHRlcnMoZmlsdGVyczogUGFydGlhbDxGaWx0ZXJPcHRpb25zPik6IHZvaWQge1xuICAgICAgICAvLyBBY3R1YWxpemFyIGZpbHRyb3MgY29uIGxvcyBudWV2b3MgdmFsb3Jlc1xuICAgICAgICB0aGlzLmZpbHRlcnMgPSB7IC4uLnRoaXMuZmlsdGVycywgLi4uZmlsdGVycyB9O1xuICAgICAgICBcbiAgICAgICAgLy8gRmlsdHJhciBlbnRpZGFkZXMgc2VnXHUwMEZBbiBsb3MgY3JpdGVyaW9zXG4gICAgICAgIHRoaXMuZmlsdGVyZWRFbnRpdGllcyA9IHRoaXMuZmlsdGVyRW50aXRpZXModGhpcy5yb290RW50aXRpZXMpO1xuICAgICAgICBcbiAgICAgICAgLy8gRmlsdHJhciB0YXJlYXMgc2VnXHUwMEZBbiBsb3MgY3JpdGVyaW9zXG4gICAgICAgIHRoaXMuZmlsdGVyZWRUYXNrcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgZm9yIChjb25zdCBsaXN0VHlwZSBvZiBPYmplY3QudmFsdWVzKFRhc2tMaXN0VHlwZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tzID0gdGhpcy5ndGRMaXN0cy5nZXQobGlzdFR5cGUpIHx8IFtdO1xuICAgICAgICAgICAgY29uc3QgZmlsdGVyZWRUYXNrcyA9IHRoaXMuZmlsdGVyVGFza3ModGFza3MpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodGhpcy5maWx0ZXJzLmVuYWJsZWRMaXN0cy5pbmNsdWRlcyhsaXN0VHlwZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlcmVkVGFza3Muc2V0KGxpc3RUeXBlLCBmaWx0ZXJlZFRhc2tzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBGaWx0cmEgdW4gY29uanVudG8gZGUgZW50aWRhZGVzIHkgc3VzIGhpam9zIHJlY3Vyc2l2YW1lbnRlXG4gICAgICovXG4gICAgcHJpdmF0ZSBmaWx0ZXJFbnRpdGllcyhlbnRpdGllczogSUVudGl0eVtdKTogSUVudGl0eVtdIHtcbiAgICAgICAgY29uc3QgcmVzdWx0OiBJRW50aXR5W10gPSBbXTtcbiAgICAgICAgXG4gICAgICAgIGZvciAoY29uc3QgZW50aXR5IG9mIGVudGl0aWVzKSB7XG4gICAgICAgICAgICAvLyBWZXJpZmljYXIgc2kgZWwgdGlwbyBkZSBlbnRpZGFkIGVzdFx1MDBFMSBoYWJpbGl0YWRvIGVuIGxvcyBmaWx0cm9zXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNFbnRpdHlUeXBlRW5hYmxlZChlbnRpdHkudHlwZSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVmVyaWZpY2FyIHNpIGVsIGVzdGFkbyBkZSBsYSBlbnRpZGFkIGVzdFx1MDBFMSBoYWJpbGl0YWRvIGVuIGxvcyBmaWx0cm9zXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNFbnRpdHlTdGF0ZUVuYWJsZWQoZW50aXR5LnN0YXRlKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBWZXJpZmljYXIgc2kgbGEgZW50aWRhZCBjb2luY2lkZSBjb24gZWwgdGV4dG8gZGUgYlx1MDBGQXNxdWVkYVxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVycy5zZWFyY2hUZXh0ICYmICF0aGlzLm1hdGNoZXNTZWFyY2hUZXh0KGVudGl0eSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2xvbmFyIGxhIGVudGlkYWQgcGFyYSBubyBtb2RpZmljYXIgbGEgb3JpZ2luYWxcbiAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkRW50aXR5ID0geyAuLi5lbnRpdHkgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRmlsdHJhciBoaWpvcyByZWN1cnNpdmFtZW50ZVxuICAgICAgICAgICAgZmlsdGVyZWRFbnRpdHkuY2hpbGRyZW4gPSB0aGlzLmZpbHRlckVudGl0aWVzKGVudGl0eS5jaGlsZHJlbik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEZpbHRyYXIgdGFyZWFzIGRlIGxhIGVudGlkYWRcbiAgICAgICAgICAgIGZpbHRlcmVkRW50aXR5LnRhc2tzID0gdGhpcy5maWx0ZXJUYXNrcyhlbnRpdHkudGFza3MpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBBXHUwMEYxYWRpciBsYSBlbnRpZGFkIGZpbHRyYWRhIGFsIHJlc3VsdGFkbyBzaSB0aWVuZSBoaWpvcyBvIHRhcmVhc1xuICAgICAgICAgICAgaWYgKGZpbHRlcmVkRW50aXR5LmNoaWxkcmVuLmxlbmd0aCA+IDAgfHwgZmlsdGVyZWRFbnRpdHkudGFza3MubGVuZ3RoID4gMCB8fCBlbnRpdHkgPT09IHRoaXMuZm9jdXNFbnRpdHkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChmaWx0ZXJlZEVudGl0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIEZpbHRyYSB1biBjb25qdW50byBkZSB0YXJlYXMgc2VnXHUwMEZBbiBsb3MgY3JpdGVyaW9zXG4gICAgICovXG4gICAgcHJpdmF0ZSBmaWx0ZXJUYXNrcyh0YXNrczogVGFza1tdKTogVGFza1tdIHtcbiAgICAgICAgcmV0dXJuIHRhc2tzLmZpbHRlcih0YXNrID0+IHtcbiAgICAgICAgICAgIC8vIFZlcmlmaWNhciBzaSBzZSBtdWVzdHJhbiB0YXJlYXMgY29tcGxldGFkYXNcbiAgICAgICAgICAgIGlmICh0YXNrLmNvbXBsZXRlZCAmJiAhdGhpcy5maWx0ZXJzLnNob3dDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFZlcmlmaWNhciBzaSBsYSB0YXJlYSBjb2luY2lkZSBjb24gZWwgdGV4dG8gZGUgYlx1MDBGQXNxdWVkYVxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVycy5zZWFyY2hUZXh0ICYmICF0aGlzLnRhc2tNYXRjaGVzU2VhcmNoVGV4dCh0YXNrKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRmlsdHJhciBwb3IgY29udGV4dG9zIHNpIHNlIGhhbiBlc3BlY2lmaWNhZG9cbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcnMuY29udGV4dHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhc01hdGNoaW5nQ29udGV4dCA9IHRoaXMuZmlsdGVycy5jb250ZXh0cy5zb21lKGN0eCA9PiBcbiAgICAgICAgICAgICAgICAgICAgdGFzay50YWdzLmNvbnRleHRzLmluY2x1ZGVzKGN0eCkpO1xuICAgICAgICAgICAgICAgIGlmICghaGFzTWF0Y2hpbmdDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEZpbHRyYXIgcG9yIHBlcnNvbmFzIGFzaWduYWRhcyBzaSBzZSBoYW4gZXNwZWNpZmljYWRvXG4gICAgICAgICAgICBpZiAodGhpcy5maWx0ZXJzLnBlb3BsZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFzTWF0Y2hpbmdQZXJzb24gPSB0aGlzLmZpbHRlcnMucGVvcGxlLnNvbWUocGVyc29uID0+IFxuICAgICAgICAgICAgICAgICAgICB0YXNrLnRhZ3MucGVvcGxlLmluY2x1ZGVzKHBlcnNvbikpO1xuICAgICAgICAgICAgICAgIGlmICghaGFzTWF0Y2hpbmdQZXJzb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRmlsdHJhciBwb3IgcmFuZ28gZGUgZFx1MDBFRGFzIHBhcmEgZmVjaGFzXG4gICAgICAgICAgICBpZiAodGFzay50aW1pbmcuZHVlRGF0ZSB8fCB0YXNrLnRpbWluZy5zY2hlZHVsZWREYXRlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF5c1VudGlsRHVlID0gdGFzay5nZXREYXlzVW50aWxEdWUoKTtcbiAgICAgICAgICAgICAgICBpZiAoZGF5c1VudGlsRHVlICE9PSBudWxsICYmIE1hdGguYWJzKGRheXNVbnRpbER1ZSkgPiB0aGlzLmZpbHRlcnMuZGF5c1JhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQ29tcHJ1ZWJhIHNpIGVsIHRpcG8gZGUgZW50aWRhZCBlc3RcdTAwRTEgaGFiaWxpdGFkbyBlbiBsb3MgZmlsdHJvc1xuICAgICAqL1xuICAgIHByaXZhdGUgaXNFbnRpdHlUeXBlRW5hYmxlZCh0eXBlOiBFbnRpdHlUeXBlKTogYm9vbGVhbiB7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBFbnRpdHlUeXBlLkFSRUFfVklEQTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXJzLnNob3dBcmVhc1ZpZGE7XG4gICAgICAgICAgICBjYXNlIEVudGl0eVR5cGUuQVJFQV9JTlRFUkVTOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcnMuc2hvd0FyZWFzSW50ZXJlcztcbiAgICAgICAgICAgIGNhc2UgRW50aXR5VHlwZS5QUk9ZRUNUT19ROlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcnMuc2hvd1Byb3llY3Rvc1E7XG4gICAgICAgICAgICBjYXNlIEVudGl0eVR5cGUuUFJPWUVDVE9fR1REOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcnMuc2hvd1Byb3llY3Rvc0dURDtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVycy5zaG93T3RoZXJFbnRpdGllcztcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBDb21wcnVlYmEgc2kgZWwgZXN0YWRvIGRlIGxhIGVudGlkYWQgZXN0XHUwMEUxIGhhYmlsaXRhZG8gZW4gbG9zIGZpbHRyb3NcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzRW50aXR5U3RhdGVFbmFibGVkKHN0YXRlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSAnXHVEODNEXHVERkUyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXJzLnNob3dBY3RpdmU7XG4gICAgICAgICAgICBjYXNlICdcdUQ4M0RcdURGRTEnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcnMuc2hvd1BhdXNlZDtcbiAgICAgICAgICAgIGNhc2UgJ1x1RDgzRFx1REQzNCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVycy5zaG93U3RvcHBlZDtcbiAgICAgICAgICAgIGNhc2UgJ1x1RDgzRFx1REQzNSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVycy5zaG93QXJjaGl2ZWQ7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBTaSBubyB0aWVuZSBlc3RhZG8sIG1vc3RyYXIgcG9yIGRlZmVjdG9cbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBDb21wcnVlYmEgc2kgbGEgZW50aWRhZCBjb2luY2lkZSBjb24gZWwgdGV4dG8gZGUgYlx1MDBGQXNxdWVkYVxuICAgICAqL1xuICAgIHByaXZhdGUgbWF0Y2hlc1NlYXJjaFRleHQoZW50aXR5OiBJRW50aXR5KTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IHNlYXJjaFRleHQgPSB0aGlzLmZpbHRlcnMuc2VhcmNoVGV4dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXR1cm4gZW50aXR5LnRpdGxlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoc2VhcmNoVGV4dCkgfHwgXG4gICAgICAgICAgICAgICBlbnRpdHkuZGVzY3JpcHRpb24udG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhzZWFyY2hUZXh0KTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQ29tcHJ1ZWJhIHNpIGxhIHRhcmVhIGNvaW5jaWRlIGNvbiBlbCB0ZXh0byBkZSBiXHUwMEZBc3F1ZWRhXG4gICAgICovXG4gICAgcHJpdmF0ZSB0YXNrTWF0Y2hlc1NlYXJjaFRleHQodGFzazogVGFzayk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBzZWFyY2hUZXh0ID0gdGhpcy5maWx0ZXJzLnNlYXJjaFRleHQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIHRhc2sudGV4dC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHNlYXJjaFRleHQpO1xuICAgIH1cbn1cblxuLy8gREVWRUxPUE1FTlRfQ0hFQ0tQT0lOVDogXCJoaWVyYXJjaHlfdmlld19tb2RlbFwiXG4vLyBEZXNjcmlwY2lcdTAwRjNuOiBJbXBsZW1lbnRhY2lcdTAwRjNuIGRlbCBtb2RlbG8gcGFyYSBsYSB2aXN0YSBqZXJcdTAwRTFycXVpY2EgY29uIGZpbHRyb3Ncbi8vIEVzdGFkbzogQ29tcGxldG8iLCAiLy8gc3JjL21vZHVsZXMvdGFza05hdmlnYXRvci91dGlscy9EZWJ1Z1V0aWxzLnRzXG5cbmltcG9ydCB7IFRhc2sgfSBmcm9tICcuLi9tb2RlbHMvVGFzayc7XG5pbXBvcnQgeyBJRW50aXR5IH0gZnJvbSAnLi4vbW9kZWxzL0VudGl0eSc7XG5pbXBvcnQgeyBIaWVyYXJjaHlWaWV3TW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvSGllcmFyY2h5Vmlld01vZGVsJztcblxuLyoqXG4gKiBVdGlsaWRhZGVzIHBhcmEgZGVwdXJhY2lcdTAwRjNuXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWJ1Z1V0aWxzIHtcbiAgICAvKipcbiAgICAgKiBNdWVzdHJhIGluZm9ybWFjaVx1MDBGM24gZGV0YWxsYWRhIHNvYnJlIGVsIG1vZGVsbyBkZSBqZXJhcnF1XHUwMEVEYSBlbiBsYSBjb25zb2xhXG4gICAgICovXG4gICAgc3RhdGljIGR1bXBNb2RlbEluZm8obW9kZWw6IEhpZXJhcmNoeVZpZXdNb2RlbCk6IHZvaWQge1xuICAgICAgICBjb25zb2xlLmdyb3VwKCdbVGFza05hdmlnYXRvcl0gSW5mb3JtYWNpXHUwMEYzbiBkZWwgbW9kZWxvIGRlIGplcmFycXVcdTAwRURhJyk7XG4gICAgICAgIFxuICAgICAgICAvLyBJbmZvcm1hY2lcdTAwRjNuIGdlbmVyYWxcbiAgICAgICAgY29uc29sZS5sb2coJ0VudGlkYWRlcyB0b3RhbGVzOicsIG1vZGVsLmFsbEVudGl0aWVzLmxlbmd0aCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdFbnRpZGFkZXMgcmFcdTAwRUR6OicsIG1vZGVsLnJvb3RFbnRpdGllcy5sZW5ndGgpO1xuICAgICAgICBjb25zb2xlLmxvZygnRW50aWRhZCBlbiBmb2NvOicsIG1vZGVsLmZvY3VzRW50aXR5ID8gbW9kZWwuZm9jdXNFbnRpdHkudGl0bGUgOiAnTmluZ3VuYScpO1xuICAgICAgICBjb25zb2xlLmxvZygnVGFyZWFzIHRvdGFsZXM6JywgbW9kZWwuYWxsVGFza3MubGVuZ3RoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENvbnRhZG9yIGRlIHRpcG9zIGRlIGVudGlkYWRcbiAgICAgICAgY29uc3QgZW50aXR5VHlwZXMgPSB7fTtcbiAgICAgICAgbW9kZWwuYWxsRW50aXRpZXMuZm9yRWFjaChlbnRpdHkgPT4ge1xuICAgICAgICAgICAgZW50aXR5VHlwZXNbZW50aXR5LnR5cGVdID0gKGVudGl0eVR5cGVzW2VudGl0eS50eXBlXSB8fCAwKSArIDE7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLmxvZygnRGlzdHJpYnVjaVx1MDBGM24gZGUgdGlwb3MgZGUgZW50aWRhZDonLCBlbnRpdHlUeXBlcyk7XG4gICAgICAgIFxuICAgICAgICAvLyBJbmZvcm1hY2lcdTAwRjNuIGRlIGxpc3RhcyBHVERcbiAgICAgICAgY29uc29sZS5ncm91cCgnRGlzdHJpYnVjaVx1MDBGM24gZGUgdGFyZWFzIHBvciBsaXN0YSBHVEQ6Jyk7XG4gICAgICAgIG1vZGVsLmd0ZExpc3RzLmZvckVhY2goKHRhc2tzLCBsaXN0VHlwZSkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYCR7bGlzdFR5cGV9OiAke3Rhc2tzLmxlbmd0aH0gdGFyZWFzYCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIFxuICAgICAgICAvLyBJbmZvcm1hY2lcdTAwRjNuIGRlIGVudGlkYWRlcyByYVx1MDBFRHpcbiAgICAgICAgY29uc29sZS5ncm91cCgnRW50aWRhZGVzIHJhXHUwMEVEejonKTtcbiAgICAgICAgbW9kZWwucm9vdEVudGl0aWVzLmZvckVhY2goZW50aXR5ID0+IHtcbiAgICAgICAgICAgIHRoaXMuZHVtcEVudGl0eUluZm8oZW50aXR5LCAwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogTXVlc3RyYSBpbmZvcm1hY2lcdTAwRjNuIHNvYnJlIHVuYSBlbnRpZGFkIHkgc3VzIGRlc2NlbmRpZW50ZXNcbiAgICAgKi9cbiAgICBzdGF0aWMgZHVtcEVudGl0eUluZm8oZW50aXR5OiBJRW50aXR5LCBsZXZlbDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGluZGVudCA9ICcgICcucmVwZWF0KGxldmVsKTtcbiAgICAgICAgY29uc29sZS5ncm91cChgJHtpbmRlbnR9JHtlbnRpdHkudGl0bGV9ICgke2VudGl0eS50eXBlfSlgKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEluZm9ybWFjaVx1MDBGM24gYlx1MDBFMXNpY2FcbiAgICAgICAgY29uc29sZS5sb2coYCR7aW5kZW50fUlEOmAsIGVudGl0eS5pZCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGAke2luZGVudH1Fc3RhZG86YCwgZW50aXR5LnN0YXRlKTtcbiAgICAgICAgY29uc29sZS5sb2coYCR7aW5kZW50fUFyY2hpdm86YCwgZW50aXR5LmZpbGUucGF0aCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGAke2luZGVudH1UYXJlYXM6YCwgZW50aXR5LnRhc2tzLmxlbmd0aCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGAke2luZGVudH1IaWpvczpgLCBlbnRpdHkuY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFJlbGFjaW9uZXNcbiAgICAgICAgaWYgKGVudGl0eS5hcmVhVmlkYSkgY29uc29sZS5sb2coYCR7aW5kZW50fVx1MDBDMXJlYSBkZSBWaWRhOmAsIGVudGl0eS5hcmVhVmlkYSk7XG4gICAgICAgIGlmIChlbnRpdHkuYXJlYUludGVyZXMpIGNvbnNvbGUubG9nKGAke2luZGVudH1cdTAwQzFyZWEgZGUgSW50ZXJcdTAwRTlzOmAsIGVudGl0eS5hcmVhSW50ZXJlcyk7XG4gICAgICAgIGlmIChlbnRpdHkucHJveWVjdG9RKSBjb25zb2xlLmxvZyhgJHtpbmRlbnR9UHJveWVjdG8gUTpgLCBlbnRpdHkucHJveWVjdG9RKTtcbiAgICAgICAgaWYgKGVudGl0eS5wcm95ZWN0b0dURCkgY29uc29sZS5sb2coYCR7aW5kZW50fVByb3llY3RvIEdURDpgLCBlbnRpdHkucHJveWVjdG9HVEQpO1xuICAgICAgICBcbiAgICAgICAgLy8gVGFyZWFzXG4gICAgICAgIGlmIChlbnRpdHkudGFza3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc29sZS5ncm91cChgJHtpbmRlbnR9VGFyZWFzOmApO1xuICAgICAgICAgICAgZW50aXR5LnRhc2tzLmZvckVhY2godGFzayA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kdW1wVGFza0luZm8odGFzaywgbGV2ZWwgKyAxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBFbnRpZGFkZXMgaGlqYXMgKHJlY3Vyc2l2bylcbiAgICAgICAgaWYgKGVudGl0eS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmdyb3VwKGAke2luZGVudH1FbnRpZGFkZXMgaGlqYXM6YCk7XG4gICAgICAgICAgICBlbnRpdHkuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kdW1wRW50aXR5SW5mbyhjaGlsZCwgbGV2ZWwgKyAxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIE11ZXN0cmEgaW5mb3JtYWNpXHUwMEYzbiBzb2JyZSB1bmEgdGFyZWFcbiAgICAgKi9cbiAgICBzdGF0aWMgZHVtcFRhc2tJbmZvKHRhc2s6IFRhc2ssIGxldmVsOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaW5kZW50ID0gJyAgJy5yZXBlYXQobGV2ZWwpO1xuICAgICAgICBjb25zb2xlLmdyb3VwKGAke2luZGVudH1UYXJlYTogJHt0YXNrLnRleHR9YCk7XG4gICAgICAgIFxuICAgICAgICAvLyBJbmZvcm1hY2lcdTAwRjNuIGJcdTAwRTFzaWNhXG4gICAgICAgIGNvbnNvbGUubG9nKGAke2luZGVudH1JRDpgLCB0YXNrLmlkKTtcbiAgICAgICAgY29uc29sZS5sb2coYCR7aW5kZW50fUNvbXBsZXRhZGE6YCwgdGFzay5jb21wbGV0ZWQpO1xuICAgICAgICBjb25zb2xlLmxvZyhgJHtpbmRlbnR9VGV4dG8gb3JpZ2luYWw6YCwgdGFzay5yYXdUZXh0KTtcbiAgICAgICAgY29uc29sZS5sb2coYCR7aW5kZW50fUFyY2hpdm86YCwgdGFzay5maWxlLnBhdGgpO1xuICAgICAgICBjb25zb2xlLmxvZyhgJHtpbmRlbnR9TFx1MDBFRG5lYTpgLCB0YXNrLmxpbmVJbmZvLm51bWJlcik7XG4gICAgICAgIFxuICAgICAgICAvLyBDbGFzaWZpY2FjaVx1MDBGM24gR1REXG4gICAgICAgIGlmICh0YXNrLmxpc3RUeXBlKSBjb25zb2xlLmxvZyhgJHtpbmRlbnR9TGlzdGEgR1REOmAsIHRhc2subGlzdFR5cGUpO1xuICAgICAgICBcbiAgICAgICAgLy8gVGFncyB5IG1ldGFkYXRvc1xuICAgICAgICBpZiAodGFzay50YWdzLmNvbnRleHRzLmxlbmd0aCA+IDApIGNvbnNvbGUubG9nKGAke2luZGVudH1Db250ZXh0b3M6YCwgdGFzay50YWdzLmNvbnRleHRzKTtcbiAgICAgICAgaWYgKHRhc2sudGFncy5wZW9wbGUubGVuZ3RoID4gMCkgY29uc29sZS5sb2coYCR7aW5kZW50fVBlcnNvbmFzOmAsIHRhc2sudGFncy5wZW9wbGUpO1xuICAgICAgICBpZiAodGFzay50YWdzLmd0ZFRhZ3MubGVuZ3RoID4gMCkgY29uc29sZS5sb2coYCR7aW5kZW50fVRhZ3MgR1REOmAsIHRhc2sudGFncy5ndGRUYWdzKTtcbiAgICAgICAgaWYgKHRhc2sudGltaW5nLmR1ZURhdGUpIGNvbnNvbGUubG9nKGAke2luZGVudH1GZWNoYSBsXHUwMEVEbWl0ZTpgLCB0YXNrLnRpbWluZy5kdWVEYXRlKTtcbiAgICAgICAgaWYgKHRhc2sudGltaW5nLnNjaGVkdWxlZERhdGUpIGNvbnNvbGUubG9nKGAke2luZGVudH1GZWNoYSBwcm9ncmFtYWRhOmAsIHRhc2sudGltaW5nLnNjaGVkdWxlZERhdGUpO1xuICAgICAgICBpZiAodGFzay50aW1pbmcuc3RhcnREYXRlKSBjb25zb2xlLmxvZyhgJHtpbmRlbnR9RmVjaGEgZGUgaW5pY2lvOmAsIHRhc2sudGltaW5nLnN0YXJ0RGF0ZSk7XG4gICAgICAgIGlmICh0YXNrLnRpbWluZy5zdGFydFRpbWUpIGNvbnNvbGUubG9nKGAke2luZGVudH1Ib3JhIGRlIGluaWNpbzpgLCB0YXNrLnRpbWluZy5zdGFydFRpbWUpO1xuICAgICAgICBpZiAodGFzay50aW1pbmcuZW5kVGltZSkgY29uc29sZS5sb2coYCR7aW5kZW50fUhvcmEgZmluYWw6YCwgdGFzay50aW1pbmcuZW5kVGltZSk7XG4gICAgICAgIGlmICh0YXNrLnRpbWluZy5kdXJhdGlvbikgY29uc29sZS5sb2coYCR7aW5kZW50fUR1cmFjaVx1MDBGM246YCwgdGFzay50aW1pbmcuZHVyYXRpb24sICdtaW51dG9zJyk7XG4gICAgICAgIGlmICh0YXNrLnRpbWluZy53ZWVrKSBjb25zb2xlLmxvZyhgJHtpbmRlbnR9U2VtYW5hOmAsIHRhc2sudGltaW5nLndlZWspO1xuICAgICAgICBcbiAgICAgICAgLy8gRGVwZW5kZW5jaWFzXG4gICAgICAgIGlmICh0YXNrLmRlcGVuZGVuY2llcy5sZW5ndGggPiAwKSBjb25zb2xlLmxvZyhgJHtpbmRlbnR9RGVwZW5kZW5jaWFzOmAsIHRhc2suZGVwZW5kZW5jaWVzKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEVzdGFkbyBkZSBibG9xdWVvXG4gICAgICAgIGlmICh0YXNrLmlzQmxvY2tlZCkgY29uc29sZS5sb2coYCR7aW5kZW50fUJsb3F1ZWFkYTpgLCB0YXNrLmJsb2NrUmVhc29uKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICB9XG59IiwgIi8qIGZpbGVMb2NhdGlvbjogc3JjL21haW4udHMgKi9cbmltcG9ydCB7IFBsdWdpbiB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgUGx1Z2luTWFpblNldHRpbmdzVGFiIH0gZnJvbSBcIi4vc2V0dGluZ3NUYWJcIjtcbmltcG9ydCB7IE1vZHVsb0Jhc2UgfSBmcm9tIFwiLi9tb2R1bGVzL21vZHVsb0Jhc2UvaW5kZXhcIjtcbmltcG9ydCB7IGFjdGl2YXRlTW9kdWxvQnVzcXVlZGFBdmFuemFkYSB9IGZyb20gXCIuL21vZHVsZXMvTV9idXNxdWVkYUF2YW56YWRhL2FjdGl2YWRvcmVzXCI7XG5pbXBvcnQgeyBTdGF0dXNCYXJFeHRlbnNpb24gfSBmcm9tIFwiLi9tb2R1bGVzL21vZHVsb0FsaWFzU3RhdHVzQmFyL3N0YXR1c0JhclwiO1xuaW1wb3J0IHsgTW9kdWxvUmVnaXN0cm9UaWVtcG8gfSBmcm9tIFwiLi9tb2R1bGVzL21vZHVsb1JlZ2lzdHJvVGllbXBvL2luZGV4XCI7XG5pbXBvcnQgdHlwZSB7IFBsdWdpbk1haW5TZXR0aW5ncyB9IGZyb20gXCIuL2ludGVyZmFjZXMvcGx1Z2luTWFpblNldHRpbmdzXCI7XG5pbXBvcnQgeyBERUZBVUxUX1NFVFRJTkdTIH0gZnJvbSBcIi4vZGVmYXVsdHMvZGVmYXVsdFNldHRpbmdzXCI7XG5pbXBvcnQgeyByZWdpc3Ryb1RpZW1wb0FQSSB9IGZyb20gXCIuL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG8vQVBJL3JlZ2lzdHJvVGllbXBvQVBJXCI7XG5pbXBvcnQgeyBzdGFydGVyQVBJIH0gZnJvbSBcIi4vbW9kdWxlcy9ub3RlTGlmZWN5Y2xlTWFuYWdlci9BUEkvc3RhcnRlckFQSVwiO1xuaW1wb3J0IHsgYWRkT25zQVBJIH0gZnJvbSBcIi4vbW9kdWxlcy9ub3RlTGlmZWN5Y2xlTWFuYWdlci9BUEkvYWRkT25zQVBJXCI7XG5pbXBvcnQgeyBZQU1MVXBkYXRlckFQSSB9IGZyb20gXCIuL21vZHVsZXMvbm90ZUxpZmVjeWNsZU1hbmFnZXIvQVBJL1lBTUxVcGRhdGVyQVBJXCI7XG5pbXBvcnQgeyBtZW51SG95QVBJIH0gZnJvbSBcIi4vbW9kdWxlcy9ub3RlTGlmZWN5Y2xlTWFuYWdlci9BUEkvbWVudURpYXJpb0FQSVwiO1xuaW1wb3J0IHsgbWVudVNlbWFuYWxBUEkgfSBmcm9tIFwiLi9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL0FQSS9tZW51U2VtYW5hbEFQSVwiO1xuaW1wb3J0IHsgVmlzdGFSZWdpc3Ryb0FjdGl2byB9IGZyb20gXCIuL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG8vdmlld3MvdmlzdGFSVEFjdGl2b1wiO1xuaW1wb3J0IHsgTW9kdWxvR1REIH0gZnJvbSBcIi4vbW9kdWxlcy9tb2R1bG9HVERcIjtcbi8vaW1wb3J0IHsgTW9kdWxvVGVyY2Vyb3MgfSBmcm9tICcuL21vZHVsZXMvbW9kdWxvX1RlcmNlcm9zJztcbmltcG9ydCB7IGluZ3Jlc2FyQmFuZGVqYUVudHJhZGEgfSBmcm9tIFwiLi9tb2R1bGVzL21vZHVsb0dURC9pbmJveFwiO1xuaW1wb3J0IHsgc3Vic2lzdGVtYXNBUEkgfSBmcm9tIFwiLi9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL0FQSS9zdWJzaXN0ZW1hc0FQSVwiO1xuaW1wb3J0IHsgVmlzdGFSZXN1bWVuU2VtYW5hbCB9IGZyb20gXCIuL21vZHVsZXMvbm90ZUxpZmVjeWNsZU1hbmFnZXIvdmlld3MvdmlzdGFSZXN1bWVuU2VtYW5hbFwiO1xuaW1wb3J0IHsgVmlzdGFSZWdpc3Ryb0RpYXJpbyB9IGZyb20gXCIuL21vZHVsZXMvbm90ZUxpZmVjeWNsZU1hbmFnZXIvdmlld3MvdmlzdGFSZWdpc3Ryb0RpYXJpb1wiO1xuaW1wb3J0IEdQVGhvcmEgZnJvbSBcIi4vbW9kdWxlcy9HUFRob3JhL0dQVGhvcmFcIjtcbmltcG9ydCB7IGxpYnJvc0FQSSB9IGZyb20gXCIuL21vZHVsZXMvbW9kdWxvTGlicm9zL2xpYnJvc0FQSVwiO1xuaW1wb3J0IHsgdXBkYXRlU2VzaW9uTGVjdHVyYSB9IGZyb20gXCIuL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG8vQVBJL3VwZGF0ZVNlc2lvbkxlY3R1cmFcIjtcbmltcG9ydCB7IFRhcmVhc0FQSSB9IGZyb20gXCIuL21vZHVsZXMvdGFza01hbmFnZXIvYXBpL3RhcmVhc0FQSVwiO1xuaW1wb3J0IHsgTW9kdWxvVGFiVGl0bGUgfSBmcm9tICcuL21vZHVsZXMvbW9kdWxvVGFiVGl0bGUnO1xuaW1wb3J0IHsgTW9kdWxvVGFza01hbmFnZXIgfSBmcm9tICcuL21vZHVsZXMvdGFza01hbmFnZXInO1xuaW1wb3J0IHsgTW9kdWxvRGF0YXZpZXdRdWVyaWVzIH0gZnJvbSAnLi9tb2R1bGVzL2RhdGF2aWV3UXVlcmllcyc7XG5pbXBvcnQgeyBUYXNrRXhlY3V0aW9uTmF2aWdhdG9yTW9kdWxlIH0gZnJvbSAnLi9tb2R1bGVzL3Rhc2tFeGVjdXRpb25OYXZpZ2F0b3InO1xuaW1wb3J0IHsgVGFza05hdmlnYXRvck1vZHVsZSB9IGZyb20gXCIuL21vZHVsZXMvdGFza05hdmlnYXRvci9tb2R1bGVcIjtcbmltcG9ydCB7IEVudHJlZ2FibGVGaWVsZEhhbmRsZXIgfSBmcm9tIFwiLi9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL2ZpZWxkSGFuZGxlcnMvRkggU3Vic2lzdGVtYXMvRW50cmVnYWJsZUZpZWxkSGFuZGxlclwiO1xuaW1wb3J0IHsgU2VsZWNjaW9uTXVsdGlwbGVNb2RhbCB9IGZyb20gXCIuL21vZHVsZXMvbW9kYWxlcy9zZWxlY2Npb25NdWx0aXBsZU1vZGFsXCI7XG5pbXBvcnQgeyBEYXRlUGlja2VyTW9kYWwgfSBmcm9tIFwiLi9tb2R1bGVzL21vZGFsZXMvZGF0ZVBpY2tlck1vZGFsXCI7XG5pbXBvcnQgeyBTcGlubmVyTW9kYWwgfSBmcm9tIFwiLi9tb2R1bGVzL21vZGFsZXMvc3Bpbm5lck1vZGFsXCI7XG5pbXBvcnQgeyBQZWRpZG9zQ2xpZW50ZU1vZGFsIH0gZnJvbSBcIi4vbW9kdWxlcy9tb2RhbGVzL3BlZGlkb3NDbGllbnRlTW9kYWxcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hbmFnZW1lbnRQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuICBzZXR0aW5nczogUGx1Z2luTWFpblNldHRpbmdzIHwgdW5kZWZpbmVkO1xuICAvLyBEZWNsYXJhIHVuYSBwcm9waWVkYWQgYHNldHRpbmdzYCBwYXJhIGFsbWFjZW5hciBsYSBjb25maWd1cmFjaVx1MDBGM24gZGVsIHBsdWdpbi5cbiAgc3RhdHVzQmFyRXh0ZW5zaW9uOiBTdGF0dXNCYXJFeHRlbnNpb24gfCBudWxsID0gbnVsbDtcbiAgbW9kdWxvUmVnaXN0cm9UaWVtcG86IE1vZHVsb1JlZ2lzdHJvVGllbXBvIHwgbnVsbCA9IG51bGw7XG4gIG1vZHVsb0Jhc2U6IE1vZHVsb0Jhc2UgfCBudWxsID0gbnVsbDtcbiAgbW9kdWxvR1REOiBNb2R1bG9HVEQgfCBudWxsID0gbnVsbDtcbiAgLy9tb2R1bG9UZXJjZXJvczogTW9kdWxvVGVyY2Vyb3MgfCBudWxsID0gbnVsbDtcbiAgcmVnaXN0ZXJlZENvbW1hbmRJZHNSVDogc3RyaW5nW10gPSBbXTtcbiAgcmVnaXN0ZXJlZENvbW1hbmRJZHNNQjogc3RyaW5nW10gPSBbXTtcbiAgcmVnaXN0ZXJlZENvbW1hbmRJZHNHVEQ6IHN0cmluZ1tdID0gW107XG4gIHJlZ2lzdGVyZWRDb21tYW5kSWRzX1RlcmNlcm9zOiBzdHJpbmdbXSA9IFtdO1xuICByaWJib25CdXR0b25SVDogUmV0dXJuVHlwZTxQbHVnaW5bXCJhZGRSaWJib25JY29uXCJdPiB8IG51bGwgPSBudWxsO1xuICBhcHA6IGFueTtcbiAgcmVnaXN0cm9UaWVtcG9BUEk6IHJlZ2lzdHJvVGllbXBvQVBJIHwgdW5kZWZpbmVkO1xuICBzdGFydGVyQVBJOiBzdGFydGVyQVBJIHwgdW5kZWZpbmVkO1xuICBhZGRPbnNBUEk6IGFkZE9uc0FQSSB8IHVuZGVmaW5lZDtcbiAgbWVudUhveUFQSTogbWVudUhveUFQSSB8IHVuZGVmaW5lZDtcbiAgbWVudVNlbWFuYWxBUEk6IG1lbnVTZW1hbmFsQVBJIHwgdW5kZWZpbmVkO1xuICBzdWJzaXN0ZW1hc0FQSTogc3Vic2lzdGVtYXNBUEkgfCB1bmRlZmluZWQ7XG4gIGxpYnJvc0FQSTogbGlicm9zQVBJIHwgdW5kZWZpbmVkO1xuICBuZXdJbmJveDogYW55O1xuICB0cDogYW55O1xuICB0YXJlYXNBUEk6IFRhcmVhc0FQSSB8IHVuZGVmaW5lZDtcbiAgbW9kdWxvVGFiVGl0bGU6IE1vZHVsb1RhYlRpdGxlIHwgbnVsbCA9IG51bGw7XG4gIG1vZHVsb1Rhc2tNYW5hZ2VyOiBNb2R1bG9UYXNrTWFuYWdlciB8IG51bGwgPSBudWxsO1xuICBtb2R1bG9EYXRhdmlld1F1ZXJpZXM6IE1vZHVsb0RhdGF2aWV3UXVlcmllcyB8IG51bGwgPSBudWxsO1xuICB0YXNrRXhlY3V0aW9uTmF2aWdhdG9yTW9kdWxlOiBUYXNrRXhlY3V0aW9uTmF2aWdhdG9yTW9kdWxlIHwgbnVsbCA9IG51bGw7XG4gIHRhc2tOYXZpZ2F0b3JNb2R1bGU6IFRhc2tOYXZpZ2F0b3JNb2R1bGUgfCBudWxsID0gbnVsbDtcbiAgLy8gRGVjbGFyYSB1bmEgcHJvcGllZGFkIHBhcmEgbWFudGVuZXIgdW5hIGluc3RhbmNpYSBkZSBgU3RhdHVzQmFyRXh0ZW5zaW9uYC5cblxuICBhc3luYyBvbmxvYWQoKSB7XG4gICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcbiAgICB0aGlzLnRwID0gdGhpcy5nZXRUcCgpO1xuXG4gICAgdGhpcy5yZWdpc3RlclZpZXcoXG4gICAgICBcInZpc3RhLXJlZ2lzdHJvLWFjdGl2b1wiLFxuICAgICAgKGxlYWYpID0+IG5ldyBWaXN0YVJlZ2lzdHJvQWN0aXZvKGxlYWYsIHRoaXMpXG4gICAgKTtcbiAgICB0aGlzLnJlZ2lzdGVyVmlldyhcbiAgICAgIFwidmlzdGEtcmVzdW1lbi1zZW1hbmFsXCIsXG4gICAgICAobGVhZikgPT4gbmV3IFZpc3RhUmVzdW1lblNlbWFuYWwobGVhZiwgdGhpcylcbiAgICApO1xuICAgIHRoaXMucmVnaXN0ZXJWaWV3KFxuICAgICAgXCJ2aXN0YS1yZWdpc3Ryby1kaWFyaW9cIixcbiAgICAgIChsZWFmKSA9PiBuZXcgVmlzdGFSZWdpc3Ryb0RpYXJpbyhsZWFmLCB0aGlzKVxuICAgICk7XG5cbiAgICAvLyBjYXJnYXIgQVBJIHJlZ2lzdHJvIFRpZW1wb1xuICAgIHRoaXMucmVnaXN0cm9UaWVtcG9BUEkgPSBuZXcgcmVnaXN0cm9UaWVtcG9BUEkodGhpcyk7XG4gICAgdGhpcy5zdGFydGVyQVBJID0gbmV3IHN0YXJ0ZXJBUEkodGhpcyk7XG4gICAgdGhpcy5hZGRPbnNBUEkgPSBuZXcgYWRkT25zQVBJKHRoaXMpO1xuICAgIHRoaXMuWUFNTFVwZGF0ZXJBUEkgPSBuZXcgWUFNTFVwZGF0ZXJBUEkodGhpcyk7XG4gICAgdGhpcy51cGRhdGVTZXNpb25MZWN0dXJhID0gbmV3IHVwZGF0ZVNlc2lvbkxlY3R1cmEodGhpcyk7XG4gICAgdGhpcy5tZW51SG95QVBJID0gbmV3IG1lbnVIb3lBUEkodGhpcyk7XG4gICAgdGhpcy5tZW51U2VtYW5hbEFQSSA9IG5ldyBtZW51U2VtYW5hbEFQSSh0aGlzKTtcbiAgICB0aGlzLnN1YnNpc3RlbWFzQVBJID0gbmV3IHN1YnNpc3RlbWFzQVBJKHRoaXMpO1xuICAgIHRoaXMubGlicm9zQVBJID0gbmV3IGxpYnJvc0FQSSh0aGlzKTtcbiAgICB0aGlzLm5ld0luYm94ID0gaW5ncmVzYXJCYW5kZWphRW50cmFkYS5iaW5kKHRoaXMpO1xuICAgIHRoaXMudGFza0V4ZWN1dGlvbk5hdmlnYXRvck1vZHVsZSA9IG5ldyBUYXNrRXhlY3V0aW9uTmF2aWdhdG9yTW9kdWxlKHRoaXMpO1xuICAgIHRoaXMudGFza05hdmlnYXRvck1vZHVsZSA9IG5ldyBUYXNrTmF2aWdhdG9yTW9kdWxlKHRoaXMpO1xuICAgIC8vIEFcdTAwRjFhZGUgbGEgcGVzdGFcdTAwRjFhIGRlIGNvbmZpZ3VyYWNpXHUwMEYzbiAtXG4gICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBQbHVnaW5NYWluU2V0dGluZ3NUYWIodGhpcykpO1xuICAgIC8vIEluaWNpYWxpemEgbGFzIGluc3RhbmNpYXMgZGUgbG9zIG1cdTAwRjNkdWxvc1xuICAgIHRoaXMuc3RhdHVzQmFyRXh0ZW5zaW9uID0gbmV3IFN0YXR1c0JhckV4dGVuc2lvbih0aGlzKTtcbiAgICB0aGlzLm1vZHVsb1JlZ2lzdHJvVGllbXBvID0gbmV3IE1vZHVsb1JlZ2lzdHJvVGllbXBvKHRoaXMpO1xuICAgIHRoaXMubW9kdWxvQmFzZSA9IG5ldyBNb2R1bG9CYXNlKHRoaXMpO1xuICAgIC8vdGhpcy5tb2R1bG9UZXJjZXJvcyA9IG5ldyBNb2R1bG9UZXJjZXJvcyh0aGlzKTtcbiAgICB0aGlzLm1vZHVsb0dURCA9IG5ldyBNb2R1bG9HVEQodGhpcyk7XG4gICAgLy90aGlzLmdldFRhcmVhc1ZlbmNpZGFzQWJpZXJ0YXMgPSAoKSA9PiBnZXRUYXJlYXNWZW5jaWRhc0FiaWVydGFzKHRoaXMpO1xuICAgIC8vdGhpcy5tb3N0cmFyVGFyZWFzVmVuY2lkYXMgPSAoKSA9PiBtb3N0cmFyVGFyZWFzVmVuY2lkYXModGhpcyk7XG4gICAgdGhpcy50YXJlYXNBUEkgPSBuZXcgVGFyZWFzQVBJKHRoaXMpO1xuICAgIHRoaXMubW9kdWxvVGFiVGl0bGUgPSBuZXcgTW9kdWxvVGFiVGl0bGUodGhpcyk7XG4gICAgdGhpcy5tb2R1bG9UYXNrTWFuYWdlciA9IG5ldyBNb2R1bG9UYXNrTWFuYWdlcih0aGlzKTtcbiAgICB0aGlzLm1vZHVsb0RhdGF2aWV3UXVlcmllcyA9IG5ldyBNb2R1bG9EYXRhdmlld1F1ZXJpZXModGhpcyk7XG4gICAgLypcbiAgICAodGhpcy5hcHAgYXMgYW55KS5ncE1hbmFnZW1lbnQgPSB7XG4gICAgICBnZXRUYXJlYXNWZW5jaWRhc0FiaWVydGFzOiAoKSA9PiB0aGlzLnRhcmVhc0FQSS5nZXRUYXJlYXNWZW5jaWRhc0FiaWVydGFzKCksXG4gICAgICBtb3N0cmFyVGFyZWFzVmVuY2lkYXM6ICgpID0+IHRoaXMudGFyZWFzQVBJLm1vc3RyYXJUYXJlYXNWZW5jaWRhcygpXG4gICAgfTtcbiAgICAqL1xuICAgIHRoaXMuYXBwbHlDb25maWd1cmF0aW9uKCk7XG4gICAgLy8gQXBsaWNhIGxhIGNvbmZpZ3VyYWNpXHUwMEYzbiBpbmljaWFsIGJhc2FkYSBlbiBsb3MgYWp1c3RlcyBjYXJnYWRvcyBvIHByZWRldGVybWluYWRvcy5cbiAgICBjb25zb2xlLmxvZyhcIkluaWNpYW5kbyBjYXJnYSBkZSBwbHVnaW4gZGUgR2VzdGlcdTAwRjNuIFBlcnNvbmFsXCIpO1xuXG4gICAgdGhpcy5yZWdpc3RlckdQVGhvcmEoKTtcbiAgICAvLyBBY3RpdmFjaVx1MDBGM24gZGUgbW9kdWxvVGFnVGl0bGVcbiAgICBpZiAodGhpcy5zZXR0aW5ncy5tb2R1bG9UYWJUaXRsZSkge1xuICAgICAgdGhpcy5tb2R1bG9UYWJUaXRsZT8uYWN0aXZhdGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5tb2R1bG9UYWJUaXRsZT8uZGVhY3RpdmF0ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubW9kdWxvVGFza01hbmFnZXIpIHtcbiAgICAgICAgdGhpcy5tb2R1bG9UYXNrTWFuYWdlci5hY3RpdmF0ZSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zZXR0aW5ncy5tb2R1bG9EYXRhdmlld1F1ZXJpZXMpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdNYW5hZ2VtZW50UGx1Z2luOiBBcGxpY2FuZG8gY29uZmlndXJhY2lcdTAwRjNuIERhdGF2aWV3UXVlcmllcy4uLicpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIXRoaXMubW9kdWxvRGF0YXZpZXdRdWVyaWVzLmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgdGhpcy5tb2R1bG9EYXRhdmlld1F1ZXJpZXMuYWN0aXZhdGUoKTtcbiAgICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGVuIGFwcGx5Q29uZmlndXJhdGlvbjonLCBlcnJvcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubW9kdWxvRGF0YXZpZXdRdWVyaWVzPy5kZWFjdGl2YXRlKCk7XG4gICAgfVxuICAgICAgICAvLyBBY3RpdmFyIGVsIG1cdTAwRjNkdWxvIHNpIGVzdFx1MDBFMSBjb25maWd1cmFkbyBlbiBzZXR0aW5ncyAob3BjaW9uYWwpXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnRhc2tFeGVjdXRpb25OYXZpZ2F0b3JNb2R1bGUpIHtcbiAgICAgICAgICB0aGlzLnRhc2tFeGVjdXRpb25OYXZpZ2F0b3JNb2R1bGU/LmFjdGl2YXRlKCk7XG4gICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MudGFza05hdmlnYXRvck1vZHVsZSkge1xuICAgICAgICAgIHRoaXMudGFza05hdmlnYXRvck1vZHVsZT8uYWN0aXZhdGUoKTtcbiAgICAgIH1cblxuICAgIFxuICBcbiAgfVxuXG4gIHJlZ2lzdGVyR1BUaG9yYSgpIHtcbiAgICBjb25zdCBncHRIb3JhID0gbmV3IEdQVGhvcmEodGhpcy5hcHApOyAvLyBDcmVhciB1bmEgaW5zdGFuY2lhIGRlIEdQVGhvcmFcbiAgICBncHRIb3JhLm9ubG9hZCgpO1xuICB9XG5cbiAgYXBwbHlDb25maWd1cmF0aW9uKCkge1xuICAgIC8vIE1vZHVsbyBCYXNlIGVzIGVsIG1cdTAwRjNkdWxvIHNvYnJlIGVsIHF1ZSBlc3RveSBoYWNpZW5kbyBwcnVlYmFzIGRlIGRlc2Fycm9sbG8uXG4gICAgaWYgKHRoaXMuc2V0dGluZ3MubW9kdWxvQmFzZSkge1xuICAgICAgdGhpcy5tb2R1bG9CYXNlPy5hY3RpdmF0ZSh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tb2R1bG9CYXNlPy5kZWFjdGl2YXRlKHRoaXMpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zZXR0aW5ncy5tb2R1bG9SZWdpc3Ryb1RpZW1wbykge1xuICAgICAgdGhpcy5tb2R1bG9SZWdpc3Ryb1RpZW1wbz8uYWN0aXZhdGUodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubW9kdWxvUmVnaXN0cm9UaWVtcG8/LmRlYWN0aXZhdGUodGhpcyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnNldHRpbmdzLm1vZHVsb0FsaWFzU3RhdHVzQmFyKSB7XG4gICAgICB0aGlzLnN0YXR1c0JhckV4dGVuc2lvbj8uYWN0aXZhdGUoKTtcbiAgICAgIC8vIFNpIGxhIGNvbmZpZ3VyYWNpXHUwMEYzbiBwYXJhIGBtb2R1bG9BbGlhc1N0YXR1c0JhcmAgZXMgdmVyZGFkZXJhLCBhY3RpdmEgZWwgbVx1MDBGM2R1bG8uXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhdHVzQmFyRXh0ZW5zaW9uPy5kZWFjdGl2YXRlKCk7XG4gICAgICAvLyBTaSBlcyBmYWxzYSwgZGVzYWN0aXZhIGVsIG1cdTAwRjNkdWxvLlxuICAgIH1cbiAgICBpZiAodGhpcy5zZXR0aW5ncy5tb2R1bG9HVEQpIHtcbiAgICAgIHRoaXMubW9kdWxvR1REPy5hY3RpdmF0ZSh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tb2R1bG9HVEQ/LmRlYWN0aXZhdGUodGhpcyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnNldHRpbmdzLm1vZHVsb1Rhc2tNYW5hZ2VyKSB7XG4gICAgICB0aGlzLm1vZHVsb1Rhc2tNYW5hZ2VyPy5hY3RpdmF0ZSgpO1xuICB9IGVsc2Uge1xuICAgICAgdGhpcy5tb2R1bG9UYXNrTWFuYWdlcj8uZGVhY3RpdmF0ZSgpO1xuICB9XG4gXG4gIGlmICh0aGlzLnNldHRpbmdzLm1vZHVsb0RhdGF2aWV3UXVlcmllcykge1xuICAgICAgICBjb25zb2xlLmxvZygnQXBsaWNhbmRvIGNvbmZpZ3VyYWNpXHUwMEYzbjogQWN0aXZhbmRvIERhdGF2aWV3UXVlcmllcycpO1xuICAgICAgICB0aGlzLm1vZHVsb0RhdGF2aWV3UXVlcmllcz8uYWN0aXZhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygnQXBsaWNhbmRvIGNvbmZpZ3VyYWNpXHUwMEYzbjogRGVzYWN0aXZhbmRvIERhdGF2aWV3UXVlcmllcycpO1xuICAgICAgICB0aGlzLm1vZHVsb0RhdGF2aWV3UXVlcmllcz8uZGVhY3RpdmF0ZSgpO1xuICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnRhc2tFeGVjdXRpb25OYXZpZ2F0b3JNb2R1bGUpIHtcbiAgICAgICAgICAgIHRoaXMudGFza0V4ZWN1dGlvbk5hdmlnYXRvck1vZHVsZT8uYWN0aXZhdGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudGFza0V4ZWN1dGlvbk5hdmlnYXRvck1vZHVsZT8uZGVhY3RpdmF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgICAvLyBDb25maWd1cmFyIGVsIG1cdTAwRjNkdWxvIFRhc2tOYXZpZ2F0b3JcbiAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy50YXNrTmF2aWdhdG9yTW9kdWxlKSB7XG4gICAgICAgICAgICB0aGlzLnRhc2tOYXZpZ2F0b3JNb2R1bGU/LmFjdGl2YXRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRhc2tOYXZpZ2F0b3JNb2R1bGU/LmRlYWN0aXZhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgLy90aGlzLm1vZHVsb1RlcmNlcm9zPy5hY3RpdmF0ZSh0aGlzKTtcbiAgfVxuXG4gIGFzeW5jIG9udW5sb2FkKCkge1xuICAgIC8vIENcdTAwRjNkaWdvIGRlIGxpbXBpZXphIGFxdVx1MDBFRFxuICAgIGNvbnNvbGUubG9nKFwiRGVzY2FyZ2FuZG8gcGx1Z2luIEdlc3RpXHUwMEYzbiBQZXJzb25hbFwiKTtcbiAgICBpZiAodGhpcy5tb2R1bG9EYXRhdmlld1F1ZXJpZXMpIHtcbiAgICAgIHRoaXMubW9kdWxvRGF0YXZpZXdRdWVyaWVzLmRlYWN0aXZhdGUoKTtcbiAgfVxuXG4gICAgICBpZiAodGhpcy50YXNrRXhlY3V0aW9uTmF2aWdhdG9yTW9kdWxlKSB7XG4gICAgICAgIHRoaXMudGFza0V4ZWN1dGlvbk5hdmlnYXRvck1vZHVsZS5kZWFjdGl2YXRlKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudGFza05hdmlnYXRvck1vZHVsZSkge1xuICAgICAgdGhpcy50YXNrTmF2aWdhdG9yTW9kdWxlLmRlYWN0aXZhdGUoKTtcbiAgfVxuXG4gICAgZGVsZXRlICh0aGlzLmFwcCBhcyBhbnkpLmdwTWFuYWdlbWVudDtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICBhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG4gICAgLy8gTVx1MDBFOXRvZG8gcGFyYSBjYXJnYXIgbGEgY29uZmlndXJhY2lcdTAwRjNuIGRlc2RlIGVsIGFsbWFjZW5hbWllbnRvIGRlIE9ic2lkaWFuLlxuICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuICAgIC8vIEludGVudGEgY2FyZ2FyIGxhIGNvbmZpZ3VyYWNpXHUwMEYzbiB5IG1lemNsYSBsb3MgdmFsb3JlcyBjYXJnYWRvcyBjb24gbG9zIHByZWRldGVybWluYWRvcy5cbiAgfVxuXG4gIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcbiAgICAvLyBNXHUwMEU5dG9kbyBwYXJhIGd1YXJkYXIgbGEgY29uZmlndXJhY2lcdTAwRjNuIGFjdHVhbCBlbiBlbCBhbG1hY2VuYW1pZW50byBkZSBPYnNpZGlhbi5cbiAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuICAgIC8vIEd1YXJkYSBsYSBjb25maWd1cmFjaVx1MDBGM24gYWN0dWFsLlxuXG4gICAgdGhpcy5hcHBseUNvbmZpZ3VyYXRpb24oKTtcbiAgICAvLyBWdWVsdmUgYSBhcGxpY2FyIGxhIGNvbmZpZ3VyYWNpXHUwMEYzbiBwYXJhIGFzZWd1cmFyc2UgZGUgcXVlIGxvcyBjYW1iaW9zIHJlY2llbnRlcyBzZSByZWZsZWplbiBpbm1lZGlhdGFtZW50ZS5cbiAgfVxuXG4gIGdldFRwKCkge1xuICAgIGlmIChcbiAgICAgICF0aGlzLmFwcCB8fFxuICAgICAgIXRoaXMuYXBwLnBsdWdpbnMuZW5hYmxlZFBsdWdpbnMuaGFzKFwidGVtcGxhdGVyLW9ic2lkaWFuXCIpXG4gICAgKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiRWwgcGx1Z2luIFRlbXBsYXRlciBubyBlc3RcdTAwRTEgaGFiaWxpdGFkby5cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vICBGb3JtYSBkZSBhY2NlZGVyIGFsIG9iamV0byB0cCBub3JtYWwgcXVlIGhlIHVzYWRvIGRlc2RlIERWSlMgY3VhbmRvIGN1cnJlbnQgRnVuY3Rpb25zIGVzdGEgY2FyZ2Fkby5cbiAgICAvL2NvbnN0IHRlbXBsYXRlclBsdWdpbiA9IHRoaXMuYXBwLnBsdWdpbnMucGx1Z2luc1sndGVtcGxhdGVyLW9ic2lkaWFuJ107XG4gICAgLy9jb25zdCB0cCA9IHRlbXBsYXRlclBsdWdpbi50ZW1wbGF0ZXIuY3VycmVudF9mdW5jdGlvbnNfb2JqZWN0O1xuICAgIC8vIC0+IHZlcnNpb24gcXVlIGZhbGxhIHNpIG5vIGVzdGEgYXJyaWJhIGVsIHBsdWdpbiBwb3JxdWUgaGFjZSBnZXQgZGVsIHBsdWdpbiBkaXJlY3RvLiBjb25zdCB0ZW1wbGF0ZXJQbHVnaW4gPSB0aGlzLmFwcC5wbHVnaW5zLmdldFBsdWdpbigndGVtcGxhdGVyLW9ic2lkaWFuJyk7XG4gICAgbGV0IHRwR2VuID0gdGhpcy5hcHAucGx1Z2lucy5wbHVnaW5zW1widGVtcGxhdGVyLW9ic2lkaWFuXCJdLnRlbXBsYXRlcjtcbiAgICB0cEdlbiA9IHRwR2VuLmZ1bmN0aW9uc19nZW5lcmF0b3IuaW50ZXJuYWxfZnVuY3Rpb25zLm1vZHVsZXNfYXJyYXk7XG4gICAgbGV0IHRwID0ge307XG4gICAgLy8gZ2V0IGFuIGluc3RhbmNlIG9mIG1vZHVsZXNcbiAgICB0cC5maWxlID0gdHBHZW4uZmluZCgobSkgPT4gbS5uYW1lID09IFwiZmlsZVwiKTtcbiAgICB0cC5zeXN0ZW0gPSB0cEdlbi5maW5kKChtKSA9PiBtLm5hbWUgPT0gXCJzeXN0ZW1cIik7XG5cbiAgICBpZiAoIXRwLnN5c3RlbSkge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgXCJObyBzZSBwdWRvIGFjY2VkZXIgYWwgb2JqZXRvIGRlIGZ1bmNpb25lcyBhY3R1YWxlcyBkZSBUZW1wbGF0ZXIuXCJcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFwiSW5zdGFuY2lhIGRlIHRwIGNhcmdhZGEgc2F0aXNmYWN0b3JpYW1lbnRlIGVuIFBsdWdpblwiKTtcbiAgICByZXR1cm4gdHA7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcgfSBmcm9tICdvYnNpZGlhbic7XG5cbmV4cG9ydCBjbGFzcyBQbHVnaW5NYWluU2V0dGluZ3NUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcbiAgICBwbHVnaW46IFBsdWdpbjtcblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIHN1cGVyKHBsdWdpbi5hcHAsIHBsdWdpbik7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgIH1cblxuICAgIGRpc3BsYXkoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ0NvbmZpZ3VyYWNpXHUwMEYzbiBkZWwgcGx1Z2luIGRlIEdlc3RpXHUwMEYzbiBQZXJzb25hbCcgfSk7XG5cbiAgICAgICAgLy8gQ3JlYXIgY29udGVuZWRvcmVzIHBhcmEgbGFzIHBlc3RhXHUwMEYxYXMgeSBlbCBjb250ZW5pZG8gZGUgbGFzIHBlc3RhXHUwMEYxYXNcbiAgICAgICAgY29uc3QgdGFiQ29udGFpbmVyID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KHsgY2xzOiAndGFiLWNvbnRhaW5lcicgfSk7XG4gICAgICAgIGNvbnN0IHRhYkNvbnRlbnRDb250YWluZXIgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoeyBjbHM6ICd0YWItY29udGVudC1jb250YWluZXInIH0pO1xuXG4gICAgICAgIC8vIERlZmluZSBsb3MgdFx1MDBFRHR1bG9zIGRlIGxhcyBwZXN0YVx1MDBGMWFzXG4gICAgICAgIGNvbnN0IHRhYlRpdGxlcyA9IFsnQWN0aXZhciBNXHUwMEYzZHVsb3MnLCAnRGlyZWN0b3Jpb3MgU3Vic2lzdGVtYXMnLCAnUGVzdGFcdTAwRjFhIDMnXTtcblxuICAgICAgICAvLyBDcmVhciBwZXN0YVx1MDBGMWFzIHkgY29udGVuaWRvIGVzcGVjXHUwMEVEZmljb1xuICAgICAgICB0YWJUaXRsZXMuZm9yRWFjaCgodGl0bGUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAvLyBDcmVhciBib3RvbmVzIGRlIHBlc3RhXHUwMEYxYVxuICAgICAgICAgICAgY29uc3QgdGFiQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICB0YWJCdXR0b24udGV4dENvbnRlbnQgPSB0aXRsZTtcbiAgICAgICAgICAgIHRhYkJ1dHRvbi5jbGFzc0xpc3QuYWRkKCd0YWItbGluaycpO1xuICAgICAgICAgICAgdGFiQnV0dG9uLmRhdGFzZXQudGFiID0gYHRhYiR7aW5kZXh9YDtcbiAgICAgICAgICAgIHRhYkJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gdGhpcy5vcGVuVGFiKGB0YWIke2luZGV4fWApO1xuICAgICAgICAgICAgdGFiQ29udGFpbmVyLmFwcGVuZENoaWxkKHRhYkJ1dHRvbik7XG5cbiAgICAgICAgICAgIC8vIENyZWFyIGNvbnRlbmlkbyBkZSBwZXN0YVx1MDBGMWFcbiAgICAgICAgICAgIGNvbnN0IHRhYkNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIHRhYkNvbnRlbnQuaWQgPSBgdGFiJHtpbmRleH1gO1xuICAgICAgICAgICAgdGFiQ29udGVudC5jbGFzc0xpc3QuYWRkKCd0YWItY29udGVudCcpO1xuICAgICAgICAgICAgdGFiQ29udGVudENvbnRhaW5lci5hcHBlbmRDaGlsZCh0YWJDb250ZW50KTtcblxuICAgICAgICAgICAgLy8gSW5pY2lhbG1lbnRlIG9jdWx0YXIgZWwgY29udGVuaWRvIGRlIGxhIHBlc3RhXHUwMEYxYSwgZXhjZXB0byBlbCBwcmltZXJvXG4gICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB0YWJDb250ZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICAgICAgICAgIC8vIENvbnRlbmlkbyBwYXJhIGxhIHByaW1lcmEgcGVzdGFcdTAwRjFhXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyh0YWJDb250ZW50KVxuICAgICAgICAgICAgICAgIC5zZXROYW1lKCdWZXIgQWxpYXMgZW4gZWwgU3RhdHVzIEJhcicpXG4gICAgICAgICAgICAgICAgLnNldERlc2MoJ0VsaWdlIHNpIGRlc2VhcyB2ZXIgZWwgQWxpYXNlcyBkZSBsYXMgbm90YXMgZW4gZWwgU3RhdHVzIEJhci4nKVxuICAgICAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZTogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRvZ2dsZVxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubW9kdWxvQWxpYXNTdGF0dXNCYXIpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubW9kdWxvQWxpYXNTdGF0dXNCYXIgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgbmV3IFNldHRpbmcodGFiQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ0FjdGl2YXIgTVx1MDBGM2R1bG8gUmVnaXN0cm8gVGllbXBvJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0FjdGl2YSBvIGRlc2FjdGl2YSBlbCBtXHUwMEYzZHVsbyBkZSByZWdpc3RybyBkZSB0aWVtcG8uJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlOiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdG9nZ2xlXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubW9kdWxvUmVnaXN0cm9UaWVtcG8pXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5tb2R1bG9SZWdpc3Ryb1RpZW1wbyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKHRhYkNvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdBY3RpdmFyIE1cdTAwRjNkdWxvIEJhc2UgLSBQcnVlYmFzJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0FjdGl2YSBvIGRlc2FjdGl2YSBlbCBtXHUwMEYzZHVsbyBkZSBwcnVlYmFzLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZTogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRvZ2dsZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm1vZHVsb0Jhc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5tb2R1bG9CYXNlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywge3RleHQ6ICdOYXZlZ2Fkb3IgZGUgVGFyZWFzJ30pO1xuXG4gICAgICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnVGFzayBFeGVjdXRpb24gTmF2aWdhdG9yJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ1Blcm1pdGUgbmF2ZWdhciByXHUwMEUxcGlkYW1lbnRlIGEgdGFyZWFzIGVuIGVqZWN1Y2lcdTAwRjNuJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MudGFza0V4ZWN1dGlvbk5hdmlnYXRvck1vZHVsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy50YXNrRXhlY3V0aW9uTmF2aWdhdG9yTW9kdWxlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnRhc2tFeGVjdXRpb25OYXZpZ2F0b3JNb2R1bGU/LmFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4udGFza0V4ZWN1dGlvbk5hdmlnYXRvck1vZHVsZT8uZGVhY3RpdmF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ29udGVuaWRvIHBhcmEgbGEgc2VndW5kYSBwZXN0YVx1MDBGMWFcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIC8vIEZ1bmNpXHUwMEYzbiBwYXJhIG1hbmVqYXIgZWwgY2xpYyBlbiBlbCB0XHUwMEVEdHVsbyBkZWwgYmxvcXVlIGRlc3BsZWdhYmxlXG4gICAgICAgICAgICAgICAgY29uc3QgdG9nZ2xlQ29sbGFwc2UgPSAoZXZlbnQ6IHsgdGFyZ2V0OiB7IG5leHRFbGVtZW50U2libGluZzogYW55OyBpbm5lckhUTUw6IHN0cmluZzsgZ2V0QXR0cmlidXRlOiAoYXJnMDogc3RyaW5nKSA9PiBzdHJpbmc7IH07IH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dEVsZW1lbnQgPSBldmVudC50YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC5pbm5lckhUTUwgPSAnJiM5NjYwOyAnICsgZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS10aXRsZScpOyAvLyBDYW1iaWEgZWwgaWNvbm8gYSBcImFiYWpvXCJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQuaW5uZXJIVE1MID0gJyYjOTY1NDsgJyArIGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGl0bGUnKTsgLy8gQ2FtYmlhIGVsIGljb25vIGEgXCJkZXJlY2hhXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgIC8vIEJsb3F1ZSBkZXNwbGVnYWJsZSBwYXJhIFwiQW5vdGFjaW9uZXNcIlxuICAgICAgICAgICAgICAgIGNvbnN0IGFub3RhY2lvbmVzVGl0bGUgPSB0YWJDb250ZW50LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnXHUyNUI2IFN1YnNpc3RlbWEgZGUgXCJBbm90YWNpb25lc1wiJyB9KTtcbiAgICAgICAgICAgICAgICBhbm90YWNpb25lc1RpdGxlLnNldEF0dHJpYnV0ZSgnZGF0YS10aXRsZScsICdTdWJzaXN0ZW1hIGRlIFwiQW5vdGFjaW9uZXNcIicpO1xuICAgICAgICAgICAgICAgIGFub3RhY2lvbmVzVGl0bGUuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFub3RhY2lvbmVzQ29udGVudCA9IHRhYkNvbnRlbnQuY3JlYXRlRGl2KCk7XG4gICAgICAgICAgICAgICAgYW5vdGFjaW9uZXNDb250ZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7IC8vIE9jdWx0YSBpbmljaWFsbWVudGUgbG9zIGFqdXN0ZXNcbiAgICAgICAgICAgICAgICBhbm90YWNpb25lc1RpdGxlLm9uY2xpY2sgPSB0b2dnbGVDb2xsYXBzZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKGFub3RhY2lvbmVzQ29udGVudCkgLy8gVXNhbW9zIGBibG9nQ29udGVudGAgZW4gbHVnYXIgZGUgYHRhYkNvbnRlbnRgXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdDYXJwZXRhIGRlIEFub3RhY2lvbmVzJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlIGxhIGNhcnBldGEgZG9uZGUgc2UgZ3VhcmRhclx1MDBFMW4gdG9kYXMgbGFzIEFub3RhY2lvbmVzLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9Bbm90YWNpb25lcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9Bbm90YWNpb25lcyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoYW5vdGFjaW9uZXNDb250ZW50KSAvLyBVc2Ftb3MgYGJsb2dDb250ZW50YCBlbiBsdWdhciBkZSBgdGFiQ29udGVudGBcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ0luZGljZSBkZSBBbm90YWNpb25lcycpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKCdFc3RhYmxlY2UgbGEgcnV0YSBkZWwgXHUwMEVEbmRpY2UgZGUgbGFzIEFub3RhY2lvbmVzLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9Bbm90YWNpb25lcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9Bbm90YWNpb25lcyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgLy8gQVx1MDBGMWFkaXIgdW4gYmxvcXVlIGRlc3BsZWdhYmxlIHBhcmEgXCJDYW1wYVx1MDBGMWFzXCIgZW4gZWwgbVx1MDBFOXRvZG8gZGlzcGxheSgpXG4gICAgICAgICAgICAgICAgLy8gRXN0byBpclx1MDBFRGEgZW4gbGEgc2VjY2lcdTAwRjNuIGRvbmRlIGVzdFx1MDBFMW4gbG9zIGRlbVx1MDBFMXMgc3Vic2lzdGVtYXNcblxuICAgICAgICAgICAgICAgIGNvbnN0IGNhbXBhXHUwMEYxYXNUaXRsZSA9IHRhYkNvbnRlbnQuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdcdTI1QjYgU3Vic2lzdGVtYSBkZSBcIkNhbXBhXHUwMEYxYXNcIicgfSk7XG4gICAgICAgICAgICAgICAgY2FtcGFcdTAwRjFhc1RpdGxlLnNldEF0dHJpYnV0ZSgnZGF0YS10aXRsZScsICdTdWJzaXN0ZW1hIGRlIFwiQ2FtcGFcdTAwRjFhc1wiJyk7XG4gICAgICAgICAgICAgICAgY2FtcGFcdTAwRjFhc1RpdGxlLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICAgICAgICAgICAgICBjb25zdCBjYW1wYVx1MDBGMWFzQ29udGVudCA9IHRhYkNvbnRlbnQuY3JlYXRlRGl2KCk7XG4gICAgICAgICAgICAgICAgY2FtcGFcdTAwRjFhc0NvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJzsgLy8gSW5pY2lhbG1lbnRlIG9jdWx0b1xuICAgICAgICAgICAgICAgIGNhbXBhXHUwMEYxYXNUaXRsZS5vbmNsaWNrID0gdG9nZ2xlQ29sbGFwc2U7XG5cbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhjYW1wYVx1MDBGMWFzQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ0NhcnBldGEgZGUgQ2FtcGFcdTAwRjFhcycpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKCdFc3RhYmxlY2UgbGEgcnV0YSBkZSBsYSBjYXJwZXRhIGRvbmRlIHNlIGd1YXJkYXJcdTAwRTFuIGxhcyBjYW1wYVx1MDBGMWFzLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX0NhbXBhXHUwMEYxYXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX0NhbXBhXHUwMEYxYXMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKGNhbXBhXHUwMEYxYXNDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnXHUwMENEbmRpY2UgZGUgQ2FtcGFcdTAwRjFhcycpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKCdFc3RhYmxlY2UgbGEgcnV0YSBkZWwgXHUwMEVEbmRpY2UgZGUgY2FtcGFcdTAwRjFhcy4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dCkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9DYW1wYVx1MDBGMWFzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9DYW1wYVx1MDBGMWFzID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAvLyBCbG9xdWUgZGVzcGxlZ2FibGUgcGFyYSBcIkFydFx1MDBFRGN1bG9zIGRlIEJsb2dcIlxuICAgICAgICAgICAgICAgIGNvbnN0IGJsb2dUaXRsZSA9IHRhYkNvbnRlbnQuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdcdTI1QjYgU3Vic2lzdGVtYSBkZSBcIkFydFx1MDBFRGN1bG9zIGRlIEJsb2dcIicgfSk7XG4gICAgICAgICAgICAgICAgYmxvZ1RpdGxlLnNldEF0dHJpYnV0ZSgnZGF0YS10aXRsZScsICdTdWJzaXN0ZW1hIGRlIFwiQXJ0XHUwMEVEY3Vsb3MgZGUgQmxvZ1wiJyk7XG4gICAgICAgICAgICAgICAgYmxvZ1RpdGxlLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICAgICAgICAgICAgICBjb25zdCBibG9nQ29udGVudCA9IHRhYkNvbnRlbnQuY3JlYXRlRGl2KCk7XG4gICAgICAgICAgICAgICAgYmxvZ0NvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJzsgLy8gT2N1bHRhIGluaWNpYWxtZW50ZSBsb3MgYWp1c3Rlc1xuICAgICAgICAgICAgICAgIGJsb2dUaXRsZS5vbmNsaWNrID0gdG9nZ2xlQ29sbGFwc2U7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhibG9nQ29udGVudCkgLy8gVXNhbW9zIGBibG9nQ29udGVudGAgZW4gbHVnYXIgZGUgYHRhYkNvbnRlbnRgXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdDYXJwZXRhIGRlIEFydFx1MDBFRGN1bG9zIGRlbCBCbG9nJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlIGxhIGNhcnBldGEgZG9uZGUgc2UgZ3VhcmRhclx1MDBFMW4gbG9zIGFydFx1MDBFRGN1bG9zIGRlbCBibG9nLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9BQmxvZylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9BQmxvZyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoYmxvZ0NvbnRlbnQpIC8vIFVzYW1vcyBgYmxvZ0NvbnRlbnRgIGVuIGx1Z2FyIGRlIGB0YWJDb250ZW50YFxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnSW5kaWNlIGRlIEFydFx1MDBFRGN1bG9zIGRlbCBCbG9nJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlbCBcdTAwRURuZGljZSBkZSBsb3MgYXJ0XHUwMEVEY3Vsb3MgZGVsIGJsb2cuJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQ6IHsgc2V0VmFsdWU6IChhcmcwOiBhbnkpID0+IHsgKCk6IGFueTsgbmV3KCk6IGFueTsgb25DaGFuZ2U6IHsgKGFyZzA6ICh2YWx1ZTogYW55KSA9PiBQcm9taXNlPHZvaWQ+KTogYW55OyBuZXcoKTogYW55OyB9OyB9OyB9KSA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX0FCbG9nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX0FCbG9nID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBCbG9xdWUgZGVzcGxlZ2FibGUgcGFyYSBcIkRlc2Fycm9sbG9zIHkgY1x1MDBGM2RpZ29zXCJcbiAgICAgICAgICAgICAgICBjb25zdCBkZXNhcnJvbGxvc1RpdGxlID0gdGFiQ29udGVudC5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1x1MjVCNiBTdWJzaXN0ZW1hIGRlIFwiRGVzYXJyb2xsb3MgeSBjXHUwMEYzZGlnb3NcIicgfSk7XG4gICAgICAgICAgICAgICAgZGVzYXJyb2xsb3NUaXRsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGl0bGUnLCAnU3Vic2lzdGVtYSBkZSBcIkRlc2Fycm9sbG9zIHkgY1x1MDBGM2RpZ29zXCInKTtcbiAgICAgICAgICAgICAgICBkZXNhcnJvbGxvc1RpdGxlLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICAgICAgICAgICAgICBjb25zdCBkZXNhcnJvbGxvc0NvbnRlbnQgPSB0YWJDb250ZW50LmNyZWF0ZURpdigpO1xuICAgICAgICAgICAgICAgIGRlc2Fycm9sbG9zQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOyAvLyBPY3VsdGEgaW5pY2lhbG1lbnRlIGxvcyBhanVzdGVzXG4gICAgICAgICAgICAgICAgZGVzYXJyb2xsb3NUaXRsZS5vbmNsaWNrID0gdG9nZ2xlQ29sbGFwc2U7XG5cbiAgICAgICAgICAgICAgICAvLyBDb25maWd1cmFjaVx1MDBGM24gcGFyYSBDYXJwZXRhIGRlIERlc2Fycm9sbG9zIHkgQ1x1MDBGM2RpZ29zXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoZGVzYXJyb2xsb3NDb250ZW50KSAvLyBVc2Ftb3MgYGRlc2Fycm9sbG9zQ29udGVudGAgZW4gbHVnYXIgZGUgYHRhYkNvbnRlbnRgXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdDYXJwZXRhIGRlIERlc2Fycm9sbG9zIHkgQ1x1MDBGM2RpZ29zJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlIGxhIGNhcnBldGEgZG9uZGUgc2UgZ3VhcmRhclx1MDBFMW4gbG9zIGRlc2Fycm9sbG9zIHkgY1x1MDBGM2RpZ29zLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9EZXNhcnJvbGxvcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9EZXNhcnJvbGxvcyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ29uZmlndXJhY2lcdTAwRjNuIHBhcmEgXHUwMENEbmRpY2UgZGUgRGVzYXJyb2xsb3MgeSBDXHUwMEYzZGlnb3NcbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhkZXNhcnJvbGxvc0NvbnRlbnQpIC8vIFVzYW1vcyBgZGVzYXJyb2xsb3NDb250ZW50YCBlbiBsdWdhciBkZSBgdGFiQ29udGVudGBcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ1x1MDBDRG5kaWNlIGRlIERlc2Fycm9sbG9zIHkgQ1x1MDBGM2RpZ29zJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlbCBcdTAwRURuZGljZSBkZSBsb3MgZGVzYXJyb2xsb3MgeSBjXHUwMEYzZGlnb3MuJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQ6IHsgc2V0VmFsdWU6IChhcmcwOiBhbnkpID0+IHsgKCk6IGFueTsgbmV3KCk6IGFueTsgb25DaGFuZ2U6IHsgKGFyZzA6ICh2YWx1ZTogYW55KSA9PiBQcm9taXNlPHZvaWQ+KTogYW55OyBuZXcoKTogYW55OyB9OyB9OyB9KSA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX0Rlc2Fycm9sbG9zKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX0Rlc2Fycm9sbG9zID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAvLyBCbG9xdWUgZGVzcGxlZ2FibGUgcGFyYSBcIkVzdHVkaW9cIlxuICAgICAgICAgICAgICAgIGNvbnN0IGVzdHVkaW9UaXRsZSA9IHRhYkNvbnRlbnQuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdcdTI1QjYgU3Vic2lzdGVtYSBkZSBcIkVzdHVkaW9cIicgfSk7XG4gICAgICAgICAgICAgICAgZXN0dWRpb1RpdGxlLnNldEF0dHJpYnV0ZSgnZGF0YS10aXRsZScsICdTdWJzaXN0ZW1hIGRlIFwiRXN0dWRpb1wiJyk7XG4gICAgICAgICAgICAgICAgZXN0dWRpb1RpdGxlLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICAgICAgICAgICAgICBjb25zdCBlc3R1ZGlvQ29udGVudCA9IHRhYkNvbnRlbnQuY3JlYXRlRGl2KCk7XG4gICAgICAgICAgICAgICAgZXN0dWRpb0NvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICBlc3R1ZGlvVGl0bGUub25jbGljayA9IHRvZ2dsZUNvbGxhcHNlO1xuXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoZXN0dWRpb0NvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdDYXJwZXRhIGRlIFRlbWFzIGRlIEVzdHVkaW8nKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGUgbGEgY2FycGV0YSBkb25kZSBzZSBndWFyZGFyXHUwMEUxbiBsb3MgdGVtYXMgZGUgZXN0dWRpby4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfRXN0dWRpbylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9Fc3R1ZGlvID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhlc3R1ZGlvQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ1x1MDBDRG5kaWNlIGRlIEVzdHVkaW8nKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGVsIFx1MDBFRG5kaWNlIGRlIGxvcyB0ZW1hcyBkZSBlc3R1ZGlvLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9Fc3R1ZGlvKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX0VzdHVkaW8gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgIC8vIEJsb3F1ZSBkZXNwbGVnYWJsZSBwYXJhIFwiR1REXCJcbiAgICAgICAgICAgICAgICBjb25zdCBndGRUaXRsZSA9IHRhYkNvbnRlbnQuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdcdTI1QjYgU3Vic2lzdGVtYSBkZSBcIkdURFwiJyB9KTtcbiAgICAgICAgICAgICAgICBndGRUaXRsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGl0bGUnLCAnU3Vic2lzdGVtYSBkZSBcIkdURFwiJyk7XG4gICAgICAgICAgICAgICAgZ3RkVGl0bGUuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuICAgICAgICAgICAgICAgIGNvbnN0IGd0ZENvbnRlbnQgPSB0YWJDb250ZW50LmNyZWF0ZURpdigpO1xuICAgICAgICAgICAgICAgIGd0ZENvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICBndGRUaXRsZS5vbmNsaWNrID0gdG9nZ2xlQ29sbGFwc2U7XG5cbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhndGRDb250ZW50KVxuICAgICAgICAgICAgICAgIC5zZXROYW1lKCdBcmNoaXZvIGRlIEJhbmRlamEgZGUgRW50cmFkYS4nKVxuICAgICAgICAgICAgICAgIC5zZXREZXNjKCdFc3RhYmxlY2UgbGEgcnV0YSBkZSBsYSBCYW5kZWphIGRlIGVudHJhZGEgR1RELicpXG4gICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQ6IHsgc2V0VmFsdWU6IChhcmcwOiBhbnkpID0+IHsgKCk6IGFueTsgbmV3KCk6IGFueTsgb25DaGFuZ2U6IHsgKGFyZzA6ICh2YWx1ZTogYW55KSA9PiBQcm9taXNlPHZvaWQ+KTogYW55OyBuZXcoKTogYW55OyB9OyB9OyB9KSA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5maWxlX0luYm94KVxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmZpbGVfSW5ib3ggPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG5cblxuICAgICAgICAgICAgICAgIC8vIFByb3llY3RvcyBHVERcbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhndGRDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnQ2FycGV0YSBkZSBQcm95ZWN0b3MgR1REJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlIGxhIGNhcnBldGEgcGFyYSBwcm95ZWN0b3MgR1RELicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9Qcm95ZWN0b3NHVEQpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfUHJveWVjdG9zR1REID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhndGRDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnXHUwMENEbmRpY2UgZGUgUHJveWVjdG9zIEdURCcpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKCdFc3RhYmxlY2UgbGEgcnV0YSBkZWwgXHUwMEVEbmRpY2UgcGFyYSBwcm95ZWN0b3MgR1RELicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9Qcm95ZWN0b3NHVEQpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfUHJveWVjdG9zR1REID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAvLyBSZXZpc2lcdTAwRjNuIFNlbWFuYWxcbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhndGRDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnQ2FycGV0YSBkZSBSZXZpc2lvbmVzIFNlbWFuYWxlcyBHVEQnKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGUgbGEgY2FycGV0YSBwYXJhIGxhcyByZXZpc2lvbmVzIHNlbWFuYWxlcyBHVEQuJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQ6IHsgc2V0VmFsdWU6IChhcmcwOiBhbnkpID0+IHsgKCk6IGFueTsgbmV3KCk6IGFueTsgb25DaGFuZ2U6IHsgKGFyZzA6ICh2YWx1ZTogYW55KSA9PiBQcm9taXNlPHZvaWQ+KTogYW55OyBuZXcoKTogYW55OyB9OyB9OyB9KSA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX1JTR1REKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX1JTR1REID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhndGRDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnXHUwMENEbmRpY2UgZGUgUmV2aXNpb25lcyBTZW1hbmFsZXMgR1REJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlbCBcdTAwRURuZGljZSBwYXJhIGxhcyByZXZpc2lvbmVzIHNlbWFuYWxlcyBHVEQuJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQ6IHsgc2V0VmFsdWU6IChhcmcwOiBhbnkpID0+IHsgKCk6IGFueTsgbmV3KCk6IGFueTsgb25DaGFuZ2U6IHsgKGFyZzA6ICh2YWx1ZTogYW55KSA9PiBQcm9taXNlPHZvaWQ+KTogYW55OyBuZXcoKTogYW55OyB9OyB9OyB9KSA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX1JTR1REKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX1JTR1REID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAvLyBCbG9xdWUgZGVzcGxlZ2FibGUgcGFyYSBcIkxlY3R1cmFcIlxuICAgICAgICAgICAgICAgIGNvbnN0IGxlY3R1cmFUaXRsZSA9IHRhYkNvbnRlbnQuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdcdTI1QjYgU3Vic2lzdGVtYSBkZSBcIkxlY3R1cmFcIicgfSk7XG4gICAgICAgICAgICAgICAgbGVjdHVyYVRpdGxlLnNldEF0dHJpYnV0ZSgnZGF0YS10aXRsZScsICdTdWJzaXN0ZW1hIGRlIFwiTGVjdHVyYVwiJyk7XG4gICAgICAgICAgICAgICAgbGVjdHVyYVRpdGxlLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICAgICAgICAgICAgICBjb25zdCBsZWN0dXJhQ29udGVudCA9IHRhYkNvbnRlbnQuY3JlYXRlRGl2KCk7XG4gICAgICAgICAgICAgICAgbGVjdHVyYUNvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICBsZWN0dXJhVGl0bGUub25jbGljayA9IHRvZ2dsZUNvbGxhcHNlO1xuXG4gICAgICAgICAgICAgICAgLy8gU2VzaW9uZXMgZGUgTGVjdHVyYVxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKGxlY3R1cmFDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnQ2FycGV0YSBkZSBTZXNpb25lcyBkZSBMZWN0dXJhJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlIGxhIGNhcnBldGEgcGFyYSBsYXMgc2VzaW9uZXMgZGUgbGVjdHVyYS4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfTGVjdHVyYVNlc2lvbmVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX0xlY3R1cmFTZXNpb25lcyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcobGVjdHVyYUNvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdcdTAwQ0RuZGljZSBkZSBTZXNpb25lcyBkZSBMZWN0dXJhJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlbCBcdTAwRURuZGljZSBwYXJhIGxhcyBzZXNpb25lcyBkZSBsZWN0dXJhLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9MZWN0dXJhU2VzaW9uZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfTGVjdHVyYVNlc2lvbmVzID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAvLyBMaWJyb3MgeSBSZXNcdTAwRkFtZW5lc1xuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKGxlY3R1cmFDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnQ2FycGV0YSBkZSBSZXNcdTAwRkFtZW5lcyBkZSBMaWJyb3MnKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGUgbGEgY2FycGV0YSBwYXJhIGxvcyByZXNcdTAwRkFtZW5lcyBkZSBsaWJyb3MuJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQ6IHsgc2V0VmFsdWU6IChhcmcwOiBhbnkpID0+IHsgKCk6IGFueTsgbmV3KCk6IGFueTsgb25DaGFuZ2U6IHsgKGFyZzA6ICh2YWx1ZTogYW55KSA9PiBQcm9taXNlPHZvaWQ+KTogYW55OyBuZXcoKTogYW55OyB9OyB9OyB9KSA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX0xlY3R1cmFSZXN1bWVuZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfTGVjdHVyYVJlc3VtZW5lcyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcobGVjdHVyYUNvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdcdTAwQ0RuZGljZSBkZSBSZXNcdTAwRkFtZW5lcyBkZSBMaWJyb3MnKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGVsIFx1MDBFRG5kaWNlIHBhcmEgbG9zIHJlc1x1MDBGQW1lbmVzIGRlIGxpYnJvcy4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfTGVjdHVyYVJlc3VtZW5lcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9MZWN0dXJhUmVzdW1lbmVzID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFzdW1pZW5kbyBxdWUgZXN0YW1vcyBkZW50cm8gZGUgaWYgKGluZGV4ID09PSAxKSB7IC4uLiB9XG5cbiAgICAgICAgICAgICAgICAvLyBCbG9xdWUgZGVzcGxlZ2FibGUgcGFyYSBcIk1lbnRvclx1MDBFRGFzXCJcbiAgICAgICAgICAgICAgICBjb25zdCBtZW50b3JpYXNUaXRsZSA9IHRhYkNvbnRlbnQuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdcdTI1QjYgU3Vic2lzdGVtYSBkZSBcIk1lbnRvclx1MDBFRGFzXCInIH0pO1xuICAgICAgICAgICAgICAgIG1lbnRvcmlhc1RpdGxlLnNldEF0dHJpYnV0ZSgnZGF0YS10aXRsZScsICdTdWJzaXN0ZW1hIGRlIFwiTWVudG9yXHUwMEVEYXNcIicpO1xuICAgICAgICAgICAgICAgIG1lbnRvcmlhc1RpdGxlLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICAgICAgICAgICAgICBjb25zdCBtZW50b3JpYXNDb250ZW50ID0gdGFiQ29udGVudC5jcmVhdGVEaXYoKTtcbiAgICAgICAgICAgICAgICBtZW50b3JpYXNDb250ZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgbWVudG9yaWFzVGl0bGUub25jbGljayA9IHRvZ2dsZUNvbGxhcHNlO1xuXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcobWVudG9yaWFzQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ0NhcnBldGEgZGUgU2VzaW9uZXMgZGUgTWVudG9yXHUwMEVEYScpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKCdFc3RhYmxlY2UgbGEgcnV0YSBkZSBsYSBjYXJwZXRhIGRvbmRlIHNlIGd1YXJkYXJcdTAwRTFuIGxhcyBzZXNpb25lcyBkZSBtZW50b3JcdTAwRURhLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9NZW50b3JpYXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfTWVudG9yaWFzID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhtZW50b3JpYXNDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnXHUwMENEbmRpY2UgZGUgTWVudG9yXHUwMEVEYXMnKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGVsIFx1MDBFRG5kaWNlIGRlIGxhcyBzZXNpb25lcyBkZSBtZW50b3JcdTAwRURhLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9NZW50b3JpYXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfTWVudG9yaWFzID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAvLyBSZXBpdGUgZWwgcGF0clx1MDBGM24gcGFyYSBcIk1lcmNhZG9cIiwgXCJNXHUwMEYzZHVsb3MgU2lzdGVtYSBHZXN0aVx1MDBGM25cIiwgeSBcIlBhZ29zXCJcblxuICAgICAgICAgICAgICAgIC8vIEJsb3F1ZSBkZXNwbGVnYWJsZSBwYXJhIFwiTWVyY2Fkb1wiXG4gICAgICAgICAgICAgICAgY29uc3QgbWVyY2Fkb1RpdGxlID0gdGFiQ29udGVudC5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1x1MjVCNiBTdWJzaXN0ZW1hIGRlIFwiTWVyY2Fkb1wiJyB9KTtcbiAgICAgICAgICAgICAgICBtZXJjYWRvVGl0bGUuc2V0QXR0cmlidXRlKCdkYXRhLXRpdGxlJywgJ1N1YnNpc3RlbWEgZGUgXCJNZXJjYWRvXCInKTtcbiAgICAgICAgICAgICAgICBtZXJjYWRvVGl0bGUuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lcmNhZG9Db250ZW50ID0gdGFiQ29udGVudC5jcmVhdGVEaXYoKTtcbiAgICAgICAgICAgICAgICBtZXJjYWRvQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIG1lcmNhZG9UaXRsZS5vbmNsaWNrID0gdG9nZ2xlQ29sbGFwc2U7XG5cbiAgICAgICAgICAgICAgICAvLyBBZ3JlZ2EgYXF1XHUwMEVEIGxhcyBjb25maWd1cmFjaW9uZXMgZXNwZWNcdTAwRURmaWNhcyBwYXJhIFwiTWVyY2Fkb1wiLCBzaWd1aWVuZG8gZWwgcGF0clx1MDBGM24gZGUgbGFzIG1lbnRvclx1MDBFRGFzXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcobWVyY2Fkb0NvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdDYXJwZXRhIGRlIExpc3RhZG9zIGRlIE1lcmNhZG8nKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGUgbGEgY2FycGV0YSBkb25kZSBzZSBndWFyZGFyXHUwMEUxbiBsYXMgbGlzdGFzIGRlIG1lcmNhZG8uJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQ6IHsgc2V0VmFsdWU6IChhcmcwOiBhbnkpID0+IHsgKCk6IGFueTsgbmV3KCk6IGFueTsgb25DaGFuZ2U6IHsgKGFyZzA6ICh2YWx1ZTogYW55KSA9PiBQcm9taXNlPHZvaWQ+KTogYW55OyBuZXcoKTogYW55OyB9OyB9OyB9KSA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX01lcmNhZG8pXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfTWVyY2FkbyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcobWVyY2Fkb0NvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdcdTAwQ0RuZGljZSBkZSBsaXN0YWRvcyBkZSBtZXJjYWRvJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlbCBcdTAwRURuZGljZSBkZSBsb3MgbGlzdGFkb3MgZGUgbWVyY2Fkby4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfTWVyY2FkbylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9NZXJjYWRvID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQmxvcXVlIGRlc3BsZWdhYmxlIHBhcmEgXCJNXHUwMEYzZHVsb3MgU2lzdGVtYSBHZXN0aVx1MDBGM25cIlxuICAgICAgICAgICAgICAgIGNvbnN0IG1vZHVsb3NUaXRsZSA9IHRhYkNvbnRlbnQuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdcdTI1QjYgU3Vic2lzdGVtYSBkZSBcIk1cdTAwRjNkdWxvcyBTaXN0ZW1hIEdlc3RpXHUwMEYzblwiJyB9KTtcbiAgICAgICAgICAgICAgICBtb2R1bG9zVGl0bGUuc2V0QXR0cmlidXRlKCdkYXRhLXRpdGxlJywgJ1N1YnNpc3RlbWEgZGUgXCJNXHUwMEYzZHVsb3MgU2lzdGVtYSBHZXN0aVx1MDBGM25cIicpO1xuICAgICAgICAgICAgICAgIG1vZHVsb3NUaXRsZS5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kdWxvc0NvbnRlbnQgPSB0YWJDb250ZW50LmNyZWF0ZURpdigpO1xuICAgICAgICAgICAgICAgIG1vZHVsb3NDb250ZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgbW9kdWxvc1RpdGxlLm9uY2xpY2sgPSB0b2dnbGVDb2xsYXBzZTtcblxuICAgICAgICAgICAgICAgIC8vIEFncmVnYSBhcXVcdTAwRUQgbGFzIGNvbmZpZ3VyYWNpb25lcyBlc3BlY1x1MDBFRGZpY2FzIHBhcmEgXCJNXHUwMEYzZHVsb3MgU2lzdGVtYSBHZXN0aVx1MDBGM25cIlxuXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcobW9kdWxvc0NvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdDYXJwZXRhIGRlIE1vZHVsb3MgZGVsIFNpc3RlbWEgZGUgR2VzdGlvbicpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKCdFc3RhYmxlY2UgbGEgcnV0YSBkZSBsYSBjYXJwZXRhIGRvbmRlIHNlIGd1YXJkYXJcdTAwRTFuIGxvcyBtXHUwMEYzZHVsb3MgZGVsIFNpc3RlbWEgZGUgR2VzdGlcdTAwRjNuLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9Nb2R1bG9zU2lzdGVtYSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9Nb2R1bG9zU2lzdGVtYSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcobW9kdWxvc0NvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdcdTAwQ0RuZGljZSBkZSBsb3MgTW9kdWxvcyBkZWwgc2lzdGVtYSBkZSBHZXN0aW9uJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlbCBcdTAwRURuZGljZSBkZSBsb3MgTVx1MDBGM2R1bG9zIGRlbCBzaXN0ZW1hIGRlIEdlc3RpXHUwMEYzbi4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfTW9kdWxvc1Npc3RlbWEpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfTW9kdWxvc1Npc3RlbWEgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAvLyBCbG9xdWUgZGVzcGxlZ2FibGUgcGFyYSBcIlRyYW5zYWNjaW9uZXMgeSBQYWdvc1wiXG4gICAgICAgICAgICAgICAgY29uc3QgdHJhbnNhY2Npb25lc1RpdGxlID0gdGFiQ29udGVudC5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1x1MjVCNiBTdWJzaXN0ZW1hIGRlIFwiVHJhbnNhY2Npb25lc1wiJyB9KTtcbiAgICAgICAgICAgICAgICB0cmFuc2FjY2lvbmVzVGl0bGUuc2V0QXR0cmlidXRlKCdkYXRhLXRpdGxlJywgJ1N1YnNpc3RlbWEgZGUgXCJ0cmFuc2FjY2lvbmVzXCInKTtcbiAgICAgICAgICAgICAgICB0cmFuc2FjY2lvbmVzVGl0bGUuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zYWNjaW9uZXNDb250ZW50ID0gdGFiQ29udGVudC5jcmVhdGVEaXYoKTtcbiAgICAgICAgICAgICAgICB0cmFuc2FjY2lvbmVzQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIHRyYW5zYWNjaW9uZXNUaXRsZS5vbmNsaWNrID0gdG9nZ2xlQ29sbGFwc2U7XG5cbiAgICAgICAgICAgICAgICAvLyBBZ3JlZ2EgYXF1XHUwMEVEIGxhcyBjb25maWd1cmFjaW9uZXMgZXNwZWNcdTAwRURmaWNhcyBwYXJhIFwiUGFnb3NcIlxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKHRyYW5zYWNjaW9uZXNDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnQ2FycGV0YSBkZSBNb2R1bG9zIGRlbCBTaXN0ZW1hIGRlIFRyYW5zYWNjaW9uZXMnKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGUgbGEgY2FycGV0YSBkb25kZSBzZSBndWFyZGFyXHUwMEUxbiBsb3MgY29tcHJvYmFudGVzIGRlIGxhcyB0cmFuc2FjY2lvbmVzLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9UcmFuc2FjY2lvbmVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX1RyYW5zYWNjaW9uZXMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKHRyYW5zYWNjaW9uZXNDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnXHUwMENEbmRpY2UgZGUgVHJhbnNhY2Npb25lcycpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKCdFc3RhYmxlY2UgbGEgcnV0YSBkZWwgXHUwMEVEbmRpY2UgZGUgVHJhbnNhY2Npb25lcy4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfVHJhbnNhY2Npb25lcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9UcmFuc2FjY2lvbmVzID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQmxvcXVlIGRlc3BsZWdhYmxlIHBhcmEgXCJQcmVzZW50YWNpb25lc1wiXG4gICAgICAgICAgICAgICAgY29uc3QgcHJlc2VudGFjaW9uZXNUaXRsZSA9IHRhYkNvbnRlbnQuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdcdTI1QjYgU3Vic2lzdGVtYSBkZSBcIlByZXNlbnRhY2lvbmVzXCInIH0pO1xuICAgICAgICAgICAgICAgIHByZXNlbnRhY2lvbmVzVGl0bGUuc2V0QXR0cmlidXRlKCdkYXRhLXRpdGxlJywgJ1N1YnNpc3RlbWEgZGUgXCJQcmVzZW50YWNpb25lc1wiJyk7XG4gICAgICAgICAgICAgICAgcHJlc2VudGFjaW9uZXNUaXRsZS5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJlc2VudGFjaW9uZXNDb250ZW50ID0gdGFiQ29udGVudC5jcmVhdGVEaXYoKTtcbiAgICAgICAgICAgICAgICBwcmVzZW50YWNpb25lc0NvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJzsgLy8gSW5pY2lhbG1lbnRlIG9jdWx0b1xuICAgICAgICAgICAgICAgIHByZXNlbnRhY2lvbmVzVGl0bGUub25jbGljayA9IHRvZ2dsZUNvbGxhcHNlO1xuXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcocHJlc2VudGFjaW9uZXNDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnQ2FycGV0YSBkZSBOb3RhcyBkZSBQcmVzZW50YWNpb25lcycpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKCdFc3RhYmxlY2UgbGEgcnV0YSBkZSBsYSBjYXJwZXRhIGRvbmRlIHNlIGd1YXJkYXJcdTAwRTFuIGxhcyBub3RhcyBkZSBwcmVzZW50YWNpb25lcy4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfUHJlc2VudGFjaW9uZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfUHJlc2VudGFjaW9uZXMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKHByZXNlbnRhY2lvbmVzQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ1x1MDBDRG5kaWNlIGRlIFByZXNlbnRhY2lvbmVzJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlbCBcdTAwRURuZGljZSBkZSBwcmVzZW50YWNpb25lcy4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfUHJlc2VudGFjaW9uZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfUHJlc2VudGFjaW9uZXMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgIC8vIEJsb3F1ZSBkZXNwbGVnYWJsZSBwYXJhIFwiUHJveWVjdG9zIGRlIFFcIlxuICAgICAgICAgICAgICAgIGNvbnN0IHByb3llY3Rvc1FUaXRsZSA9IHRhYkNvbnRlbnQuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdcdTI1QjYgU3Vic2lzdGVtYSBkZSBcIlByb3llY3RvcyBkZSBRXCInIH0pO1xuICAgICAgICAgICAgICAgIHByb3llY3Rvc1FUaXRsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGl0bGUnLCAnU3Vic2lzdGVtYSBkZSBcIlByb3llY3RvcyBkZSBRXCInKTtcbiAgICAgICAgICAgICAgICBwcm95ZWN0b3NRVGl0bGUuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3llY3Rvc1FDb250ZW50ID0gdGFiQ29udGVudC5jcmVhdGVEaXYoKTtcbiAgICAgICAgICAgICAgICBwcm95ZWN0b3NRQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOyAvLyBJbmljaWFsbWVudGUgb2N1bHRvXG4gICAgICAgICAgICAgICAgcHJveWVjdG9zUVRpdGxlLm9uY2xpY2sgPSB0b2dnbGVDb2xsYXBzZTtcblxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKHByb3llY3Rvc1FDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnQ2FycGV0YSBkZSBQcm95ZWN0b3MgZGUgUScpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKCdFc3RhYmxlY2UgbGEgcnV0YSBkZSBsYSBjYXJwZXRhIGRvbmRlIHNlIGd1YXJkYXJcdTAwRTFuIGxvcyBwcm95ZWN0b3MgZGUgUS4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfUHJveWVjdG9zUSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9Qcm95ZWN0b3NRID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhwcm95ZWN0b3NRQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ1x1MDBDRG5kaWNlIGRlIFByb3llY3RvcyBkZSBRJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlbCBcdTAwRURuZGljZSBkZSBwcm95ZWN0b3MgZGUgUS4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfUHJveWVjdG9zUSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9Qcm95ZWN0b3NRID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAvLyBBc2VnXHUwMEZBcmF0ZSBkZSBxdWUgbGEgZnVuY2lcdTAwRjNuIHRvZ2dsZUNvbGxhcHNlIGVzdFx1MDBFMSBkZWZpbmlkYSBjb21vIHNlIGluZGljXHUwMEYzIGFudGVyaW9ybWVudGUuXG5cbiAgICAgICAgICAgICAgICAvLyBCbG9xdWUgZGVzcGxlZ2FibGUgcGFyYSBcIlB1YmxpY2FjaW9uZXNcIlxuICAgICAgICAgICAgICAgIGNvbnN0IHB1YmxpY2FjaW9uZXNUaXRsZSA9IHRhYkNvbnRlbnQuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdcdTI1QjYgU3Vic2lzdGVtYSBkZSBcIlB1YmxpY2FjaW9uZXNcIicgfSk7XG4gICAgICAgICAgICAgICAgcHVibGljYWNpb25lc1RpdGxlLnNldEF0dHJpYnV0ZSgnZGF0YS10aXRsZScsICdTdWJzaXN0ZW1hIGRlIFwiUHVibGljYWNpb25lc1wiJyk7XG4gICAgICAgICAgICAgICAgcHVibGljYWNpb25lc1RpdGxlLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICAgICAgICAgICAgICBjb25zdCBwdWJsaWNhY2lvbmVzQ29udGVudCA9IHRhYkNvbnRlbnQuY3JlYXRlRGl2KCk7XG4gICAgICAgICAgICAgICAgcHVibGljYWNpb25lc0NvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJzsgLy8gSW5pY2lhbG1lbnRlIG9jdWx0b1xuICAgICAgICAgICAgICAgIHB1YmxpY2FjaW9uZXNUaXRsZS5vbmNsaWNrID0gdG9nZ2xlQ29sbGFwc2U7XG5cbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhwdWJsaWNhY2lvbmVzQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ0NhcnBldGEgZGUgUGllemFzIGRlIFB1YmxpY2FjaW9uZXMnKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGUgbGEgY2FycGV0YSBkb25kZSBzZSBndWFyZGFyXHUwMEUxbiBsYXMgcGllemFzIGRlIHB1YmxpY2FjaW9uZXMuJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQ6IHsgc2V0VmFsdWU6IChhcmcwOiBhbnkpID0+IHsgKCk6IGFueTsgbmV3KCk6IGFueTsgb25DaGFuZ2U6IHsgKGFyZzA6ICh2YWx1ZTogYW55KSA9PiBQcm9taXNlPHZvaWQ+KTogYW55OyBuZXcoKTogYW55OyB9OyB9OyB9KSA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX1B1YmxpY2FjaW9uZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfUHVibGljYWNpb25lcyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcocHVibGljYWNpb25lc0NvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdcdTAwQ0RuZGljZSBkZSBQdWJsaWNhY2lvbmVzJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlbCBcdTAwRURuZGljZSBkZSBwdWJsaWNhY2lvbmVzLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9QdWJsaWNhY2lvbmVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX1B1YmxpY2FjaW9uZXMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgIC8vIEJsb3F1ZSBkZXNwbGVnYWJsZSBwYXJhIFwiUmVjZXRhc1wiXG4gICAgICAgICAgICAgICAgY29uc3QgcmVjZXRhc1RpdGxlID0gdGFiQ29udGVudC5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1x1MjVCNiBTdWJzaXN0ZW1hIGRlIFwiUmVjZXRhc1wiJyB9KTtcbiAgICAgICAgICAgICAgICByZWNldGFzVGl0bGUuc2V0QXR0cmlidXRlKCdkYXRhLXRpdGxlJywgJ1N1YnNpc3RlbWEgZGUgXCJSZWNldGFzXCInKTtcbiAgICAgICAgICAgICAgICByZWNldGFzVGl0bGUuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlY2V0YXNDb250ZW50ID0gdGFiQ29udGVudC5jcmVhdGVEaXYoKTtcbiAgICAgICAgICAgICAgICByZWNldGFzQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOyAvLyBJbmljaWFsbWVudGUgb2N1bHRvXG4gICAgICAgICAgICAgICAgcmVjZXRhc1RpdGxlLm9uY2xpY2sgPSB0b2dnbGVDb2xsYXBzZTtcblxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKHJlY2V0YXNDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnQ2FycGV0YSBkZSBSZWNldGFzJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlIGxhIGNhcnBldGEgZG9uZGUgc2UgZ3VhcmRhclx1MDBFMW4gbGFzIHJlY2V0YXMuJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQ6IHsgc2V0VmFsdWU6IChhcmcwOiBhbnkpID0+IHsgKCk6IGFueTsgbmV3KCk6IGFueTsgb25DaGFuZ2U6IHsgKGFyZzA6ICh2YWx1ZTogYW55KSA9PiBQcm9taXNlPHZvaWQ+KTogYW55OyBuZXcoKTogYW55OyB9OyB9OyB9KSA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX1JlY2V0YXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfUmVjZXRhcyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcocmVjZXRhc0NvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdcdTAwQ0RuZGljZSBkZSBSZWNldGFzJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlbCBcdTAwRURuZGljZSBkZSByZWNldGFzLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9SZWNldGFzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX1JlY2V0YXMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgIC8vIEJsb3F1ZSBkZXNwbGVnYWJsZSBwYXJhIFwiUmVjdXJzb3MgUmVjdXJyZW50ZXNcIlxuICAgICAgICAgICAgICAgIGNvbnN0IHJlY3Vyc29zUmVjdXJyZW50ZXNUaXRsZSA9IHRhYkNvbnRlbnQuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdcdTI1QjYgU3Vic2lzdGVtYSBkZSBcIlJlY3Vyc29zIFJlY3VycmVudGVzXCInIH0pO1xuICAgICAgICAgICAgICAgIHJlY3Vyc29zUmVjdXJyZW50ZXNUaXRsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGl0bGUnLCAnU3Vic2lzdGVtYSBkZSBcIlJlY3Vyc29zIFJlY3VycmVudGVzXCInKTtcbiAgICAgICAgICAgICAgICByZWN1cnNvc1JlY3VycmVudGVzVGl0bGUuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlY3Vyc29zUmVjdXJyZW50ZXNDb250ZW50ID0gdGFiQ29udGVudC5jcmVhdGVEaXYoKTtcbiAgICAgICAgICAgICAgICByZWN1cnNvc1JlY3VycmVudGVzQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOyAvLyBJbmljaWFsbWVudGUgb2N1bHRvXG4gICAgICAgICAgICAgICAgcmVjdXJzb3NSZWN1cnJlbnRlc1RpdGxlLm9uY2xpY2sgPSB0b2dnbGVDb2xsYXBzZTtcblxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKHJlY3Vyc29zUmVjdXJyZW50ZXNDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnQ2FycGV0YSBkZSBSZWN1cnNvcyBSZWN1cnJlbnRlcycpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKCdFc3RhYmxlY2UgbGEgcnV0YSBkZSBsYSBjYXJwZXRhIGRvbmRlIHNlIGd1YXJkYXJcdTAwRTFuIGxvcyByZWN1cnNvcyByZWN1cnJlbnRlcy4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfUmVjdXJzb3NSZWN1cnJlbnRlcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9SZWN1cnNvc1JlY3VycmVudGVzID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhyZWN1cnNvc1JlY3VycmVudGVzQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ1x1MDBDRG5kaWNlIGRlIFJlY3Vyc29zIFJlY3VycmVudGVzJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlbCBcdTAwRURuZGljZSBkZSByZWN1cnNvcyByZWN1cnJlbnRlcy4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfUmVjdXJzb3NSZWN1cnJlbnRlcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9SZWN1cnNvc1JlY3VycmVudGVzID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAvLyBCbG9xdWUgZGVzcGxlZ2FibGUgcGFyYSBcIlJlZ2lzdHJvIFRpZW1wb1wiXG4gICAgICAgICAgICAgICAgY29uc3QgcmVnaXN0cm9UaWVtcG9UaXRsZSA9IHRhYkNvbnRlbnQuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdcdTI1QjYgU3Vic2lzdGVtYSBkZSBcIlJlZ2lzdHJvIFRpZW1wb1wiJyB9KTtcbiAgICAgICAgICAgICAgICByZWdpc3Ryb1RpZW1wb1RpdGxlLnNldEF0dHJpYnV0ZSgnZGF0YS10aXRsZScsICdTdWJzaXN0ZW1hIGRlIFwiUmVnaXN0cm8gVGllbXBvXCInKTtcbiAgICAgICAgICAgICAgICByZWdpc3Ryb1RpZW1wb1RpdGxlLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICAgICAgICAgICAgICBjb25zdCByZWdpc3Ryb1RpZW1wb0NvbnRlbnQgPSB0YWJDb250ZW50LmNyZWF0ZURpdigpO1xuICAgICAgICAgICAgICAgIHJlZ2lzdHJvVGllbXBvQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOyAvLyBJbmljaWFsbWVudGUgb2N1bHRvXG4gICAgICAgICAgICAgICAgcmVnaXN0cm9UaWVtcG9UaXRsZS5vbmNsaWNrID0gdG9nZ2xlQ29sbGFwc2U7XG5cbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhyZWdpc3Ryb1RpZW1wb0NvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdDYXJwZXRhIGRlIFJlZ2lzdHJvcyBkZSBUaWVtcG8nKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGUgbGEgY2FycGV0YSBkb25kZSBzZSBndWFyZGFyXHUwMEUxbiBsb3MgcmVnaXN0cm9zIGRlIHRpZW1wby4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfUmVnaXN0cm9UaWVtcG8pXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfUmVnaXN0cm9UaWVtcG8gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKHJlZ2lzdHJvVGllbXBvQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ1x1MDBDRG5kaWNlIGRlIFJlZ2lzdHJvIGRlIFRpZW1wbycpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKCdFc3RhYmxlY2UgbGEgcnV0YSBkZWwgXHUwMEVEbmRpY2UgZGUgcmVnaXN0cm9zIGRlIHRpZW1wby4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfUmVnaXN0cm9UaWVtcG8pXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfUmVnaXN0cm9UaWVtcG8gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcblxuXG5cbiAgICAgICAgICAgIC8vIENvbnRlbmlkbyBwYXJhIGxhIHRlcmNlcmEgcGVzdGFcdTAwRjFhXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRlTGFiZWwgPSB0YWJDb250ZW50LmNyZWF0ZUVsKCdsYWJlbCcpO1xuICAgICAgICAgICAgICAgIGRhdGVMYWJlbC50ZXh0Q29udGVudCA9ICdGZWNoYSc7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0ZUlucHV0ID0gdGFiQ29udGVudC5jcmVhdGVFbCgnaW5wdXQnKTtcbiAgICAgICAgICAgICAgICBkYXRlSW5wdXQudHlwZSA9ICdkYXRldGltZS1sb2NhbCc7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEFcdTAwRjFhZGlyIGVzdGlsb3MgQ1NTIHBhcmEgZXNwYWNpYWRvIHkgb3JnYW5pemFjaVx1MDBGM25cbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ3N0eWxlJywge1xuICAgICAgICAgICAgdGV4dDogYFxuICAgICAgICAgICAgICAgIC50YWItY29udGVudCB7IGRpc3BsYXk6IG5vbmU7IHBhZGRpbmctdG9wOiAyMHB4OyB9IC8vIEFcdTAwRjFhZGlkbyBwYWRkaW5nLXRvcCBwYXJhIGVsIGVzcGFjaW9cbiAgICAgICAgICAgICAgICAudGFiLWNvbnRlbnQuYWN0aXZlIHsgZGlzcGxheTogYmxvY2s7IH1cbiAgICAgICAgICAgICAgICAudGFiLWxpbmsgeyBjdXJzb3I6IHBvaW50ZXI7IHBhZGRpbmc6IDVweCAxMHB4OyBtYXJnaW4tcmlnaHQ6IDVweDsgYmFja2dyb3VuZDogI2YwZjBmMDsgYm9yZGVyOiAxcHggc29saWQgI2RkZDsgYm9yZGVyLXJhZGl1czogNXB4OyB9XG4gICAgICAgICAgICAgICAgLnRhYi1saW5rLmFjdGl2ZSB7IGJhY2tncm91bmQ6ICNlMGUwZTA7IH1cbiAgICAgICAgICAgICAgICAuc2V0dGluZy1pdGVtIHsgbWFyZ2luLWJvdHRvbTogMTBweDsgfVxuICAgICAgICAgICAgYFxuICAgICAgICB9KTtcbiAgICAgICAgXG5cbiAgICAgICAgLy8gRnVuY2lcdTAwRjNuIHBhcmEgY2FtYmlhciBsYSBwZXN0YVx1MDBGMWEgYWN0aXZhXG4gICAgICAgIHRoaXMub3BlblRhYiA9ICh0YWJOYW1lKSA9PiB7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGFiLWNvbnRlbnQnKS5mb3JFYWNoKGNvbnRlbnQgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICBjb250ZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGFiLWxpbmsnKS5mb3JFYWNoKGxpbmsgPT4ge1xuICAgICAgICAgICAgICAgIGxpbmsuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVRhYkNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YWJOYW1lKTtcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVRhYkxpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS10YWI9XCIke3RhYk5hbWV9XCJdYCk7XG4gICAgICAgICAgICBpZiAoYWN0aXZlVGFiQ29udGVudCkgYWN0aXZlVGFiQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgIGlmIChhY3RpdmVUYWJMaW5rKSBhY3RpdmVUYWJMaW5rLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWJyaXIgbGEgcHJpbWVyYSBwZXN0YVx1MDBGMWEgcG9yIGRlZmVjdG9cbiAgICAgICAgdGhpcy5vcGVuVGFiKCd0YWIwJyk7XG4gICAgfVxuICAgIG9wZW5UYWIoYXJnMDogc3RyaW5nKTogYW55IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBQbHVnaW4sIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgcmVnaXN0ZXJDb21tYW5kcywgZGVhY3RpdmF0ZUNvbW1hbmRzIH0gZnJvbSBcIi4vY29tbWFuZHNcIjtcblxuZXhwb3J0IGNsYXNzIE1vZHVsb0Jhc2Uge1xuICAgIHBsdWdpbjogUGx1Z2luO1xuICAgIG1vZHVsb0Jhc2U6IE1vZHVsb0Jhc2UgfCBudWxsID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgIH1cblxuICAgIGFjdGl2YXRlKCkge1xuICAgICAgICBpZiAodGhpcy5tb2R1bG9CYXNlKSByZXR1cm47IC8vIFNpIHlhIGVzdFx1MDBFMSBhY3Rpdm8sIG5vIGhhY2VyIG5hZGFcblxuICAgICAgICByZWdpc3RlckNvbW1hbmRzKHRoaXMucGx1Z2luKTtcbiAgICB9XG5cbiAgICBkZWFjdGl2YXRlKCkge1xuICAgICAgICBpZiAoIXRoaXMuc3RhdHVzQmFyKSByZXR1cm47IC8vIFNpIHlhIGVzdFx1MDBFMSBkZXNhY3RpdmFkbywgbm8gaGFjZXIgbmFkYVxuICAgICAgICBkZWFjdGl2YXRlQ29tbWFuZHModGhpcy5wbHVnaW4pO1xuICAgICAgIFxuICAgIH1cblxuXG59IiwgIlxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWFyQ2FycGV0YShydXRhQ2FycGV0YTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBWZXJpZmljYSBzaSBsYSBjYXJwZXRhIHlhIGV4aXN0ZVxuICAgICAgICAgICAgZGVidWdnZXJcbiAgICAgICAgICAgIGNvbnN0IGNhcnBldGFFeGlzdGVudGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHJ1dGFDYXJwZXRhKTtcbiAgICAgICAgICAgIGlmIChjYXJwZXRhRXhpc3RlbnRlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYExhIGNhcnBldGEgJyR7cnV0YUNhcnBldGF9JyB5YSBleGlzdGUuYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVidWdnZXJcbiAgICAgICAgICAgIC8vIENyZWEgbGEgY2FycGV0YVxuICAgICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LmNyZWF0ZUZvbGRlcihydXRhQ2FycGV0YSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgQ2FycGV0YSAnJHtydXRhQ2FycGV0YX0nIGNyZWFkYSBleGl0b3NhbWVudGUuYCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBhbCBjcmVhciBsYSBjYXJwZXRhICcke3J1dGFDYXJwZXRhfSc6YCwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4iLCAiaW1wb3J0IHsgVEZpbGUgfSBmcm9tICdvYnNpZGlhbic7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhclBsYW50aWxsYShjb250ZW5pZG86IHN0cmluZyk6IFByb21pc2U8VEZpbGU+IHtcbiAgICAvLyBEZWZpbmUgbGEgcnV0YSB5IGVsIG5vbWJyZSBkZWwgYXJjaGl2byB0ZW1wb3JhbFxuICAgIGNvbnN0IGZvbGRlciA9ICdQbGFudGlsbGFzJztcbiAgICBsZXQgZmlsZW5hbWUgPSBcIkFyY2hpdm8gRGUgUGxhbnRpbGxhXCJcbiAgICBsZXQgcGF0aFRlbXBvcmFsID0gZm9sZGVyICsgXCIvXCIgKyBmaWxlbmFtZSArIFwiLm1kXCI7XG5cbiAgICAvLyBDcmVhIGVsIGFyY2hpdm8gZW4gbGEgYlx1MDBGM3ZlZGEgeSBndWFyZGEgZWwgYXJjaGl2byBjcmVhZG8gZW4gdW5hIHZhcmlhYmxlXG4gICAgY29uc3QgYXJjaGl2b0NyZWFkbzogVEZpbGUgPSBhd2FpdCBhcHAudmF1bHQuY3JlYXRlKHBhdGhUZW1wb3JhbCwgY29udGVuaWRvKTtcblxuICAgIC8vIEFxdVx1MDBFRCBuZWNlc2l0YXJcdTAwRURhcyBwcm9jZXNhciBlbCBhcmNoaXZvIGNvbiBUZW1wbGF0ZXIgc2kgZXMgbmVjZXNhcmlvXG4gICAgLy8gRXN0byBkZXBlbmRlIGRlIGNcdTAwRjNtbyBUZW1wbGF0ZXIgZXhwb25nYSBzdSBmdW5jaW9uYWxpZGFkIGEgb3Ryb3MgcGx1Z2luc1xuICAgIC8vIFBvciBlamVtcGxvLCBzaSBUZW1wbGF0ZXIgdGllbmUgdW4gbVx1MDBFOXRvZG8gcGFyYSBwcm9jZXNhciBhcmNoaXZvcywgbG8gdXNhclx1MDBFRGFzIGFxdVx1MDBFRFxuXG4gICAgLy8gKE9wY2lvbmFsKSBFbGltaW5hIGVsIGFyY2hpdm8gZGVzcHVcdTAwRTlzIGRlIHByb2Nlc2FybG8gc2kgbm8gZGVzZWFzIGNvbnNlcnZhcmxvXG4gICAgLy8gYXdhaXQgYXBwLnZhdWx0LmRlbGV0ZShhcmNoaXZvQ3JlYWRvKTtcblxuICAgIC8vIFJldG9ybmEgZWwgYXJjaGl2byBjcmVhZG9cbiAgICByZXR1cm4gYXJjaGl2b0NyZWFkbztcbn1cbiIsICJpbXBvcnQge01vZGFsfSBmcm9tICdvYnNpZGlhbic7XG5cbmNsYXNzIEZpbGVMaW5rTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgY29uc3RydWN0b3IoYXBwKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgfVxuXG4gICAgb25PcGVuKCkge1xuICAgICAgICBsZXQgeyBjb250ZW50RWwgfSA9IHRoaXM7XG4gICAgICAgIFxuICAgICAgICAvLyBBcGxpY2FyIGVzdGlsb3MgZmxleGJveCBwYXJhIGNlbnRyYXIgY29udGVuaWRvXG4gICAgICAgIGNvbnRlbnRFbC5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgICAgICBjb250ZW50RWwuc3R5bGUuZmxleERpcmVjdGlvbiA9ICdjb2x1bW4nO1xuICAgICAgICBjb250ZW50RWwuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSAnY2VudGVyJztcbiAgICAgICAgY29udGVudEVsLnN0eWxlLmFsaWduSXRlbXMgPSAnY2VudGVyJztcbiAgICAgICAgY29udGVudEVsLnN0eWxlLmhlaWdodCA9ICc1MCUnOyAgLy8gQXNlZ1x1MDBGQXJhdGUgZGUgcXVlIGVsIG1vZGFsIG9jdXBlIHRvZG8gZWwgZXNwYWNpbyBkaXNwb25pYmxlXG4gICAgICAgIFxuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2gxJywge1xuICAgICAgICAgICAgdGV4dDogJ0luc2VydGFyIGVsIGxpbmsgZGUgdW4gYXJjaGl2by4nLFxuICAgICAgICAgICAgYXR0cjogeyBzdHlsZTogJ3RleHQtYWxpZ246IGNlbnRlcjsnIH0gIC8vIEFzZWd1cmEgcXVlIGVsIHRleHRvIGRlbCB0XHUwMEVEdHVsbyBlc3RcdTAwRTkgY2VudHJhZG8gc2kgZXMgbVx1MDBFMXMgbGFyZ28gcXVlIHVuYSBsXHUwMEVEbmVhXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQ29udGVuZWRvciBwYXJhIGVsIGlucHV0IHkgZWwgYm90XHUwMEYzblxuICAgICAgICBjb25zdCBpbnB1dENvbnRhaW5lciA9IGNvbnRlbnRFbC5jcmVhdGVEaXYoKTtcbiAgICAgICAgaW5wdXRDb250YWluZXIuc3R5bGUubWFyZ2luID0gJzEwcHgnO1xuICAgICAgICBcbiAgICAgICAgLy8gSW5wdXQgZGUgYXJjaGl2byBvY3VsdG9cbiAgICAgICAgY29uc3QgZmlsZUlucHV0ID0gaW5wdXRDb250YWluZXIuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAnZmlsZScgfSk7XG4gICAgICAgIGZpbGVJbnB1dC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICBcbiAgICAgICAgLy8gQm90XHUwMEYzbiBwYXJhIHNlbGVjY2lvbmFyIGFyY2hpdm9cbiAgICAgICAgY29uc3QgZmlsZUJ1dHRvbiA9IGlucHV0Q29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7XG4gICAgICAgICAgICB0ZXh0OiAnU2VsZWNjaW9uZSBzdSBhcmNoaXZvJyxcbiAgICAgICAgICAgIGNsczogJ21vZC1jdGEnXG4gICAgICAgIH0pO1xuICAgICAgICBmaWxlQnV0dG9uLnN0eWxlLnBhZGRpbmcgPSAnNXB4IDEwcHgnO1xuICAgICAgICBmaWxlQnV0dG9uLnN0eWxlLmZvbnRTaXplID0gJzE2cHgnO1xuICAgICAgICBmaWxlQnV0dG9uLnN0eWxlLm1hcmdpblRvcCA9ICc1cHgnO1xuICAgICAgICBmaWxlQnV0dG9uLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICAgICAgZmlsZUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gZmlsZUlucHV0LmNsaWNrKCk7XG4gICAgICAgIFxuICAgICAgICAvLyBFdmVudG8gcGFyYSBjdWFuZG8gc2Ugc2VsZWNjaW9uYSB1biBhcmNoaXZvXG4gICAgICAgIGZpbGVJbnB1dC5vbmNoYW5nZSA9IChlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmaWxlID0gZS50YXJnZXQuZmlsZXNbMF07XG4gICAgICAgICAgICBpZiAoZmlsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0TGlua0F0Q3Vyc29yKGZpbGUucGF0aCwgZmlsZS5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBvbkNsb3NlKCkge1xuICAgICAgICBsZXQgeyBjb250ZW50RWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xuICAgIH1cblxuICAgIGFzeW5jIGluc2VydExpbmtBdEN1cnNvcihmaWxlUGF0aCwgZmlsZU5hbWUpIHtcbiAgICAgICAgY29uc3QgYWN0aXZlTGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVMZWFmO1xuICAgICAgICBpZiAoYWN0aXZlTGVhZikge1xuICAgICAgICAgICAgY29uc3QgZWRpdG9yID0gYWN0aXZlTGVhZi52aWV3LnNvdXJjZU1vZGUuY21FZGl0b3I7XG4gICAgICAgICAgICBjb25zdCBjdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XG4gICAgICAgICAgICBjb25zdCBsaW5rVGV4dCA9IGBbJHtmaWxlTmFtZX1dKDxmaWxlOi8vJHtmaWxlUGF0aH0+KWA7XG4gICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKGxpbmtUZXh0LCBjdXJzb3IpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cblxuLy8gRnVuY2lcdTAwRjNuIHBhcmEgYWJyaXIgZWwgbW9kYWwgcGVyc29uYWxpemFkb1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluc2VydEZpbGVMaW5rKGFwcCkge1xuICAgIG5ldyBGaWxlTGlua01vZGFsKGFwcCkub3BlbigpO1xufVxuIiwgImltcG9ydCB7Y3JlYXJDYXJwZXRhfSBmcm9tIFwiLi91dGlscy9jcmVhckNhcnBldGFcIlxuaW1wb3J0IHtjcmVhclBsYW50aWxsYX0gZnJvbSBcIi4vdXRpbHMvY3JlYXJQbGFudGlsbGFcIlxuaW1wb3J0IHtpbnNlcnRGaWxlTGlua30gZnJvbSBcIi4vdXRpbHMvZmlsZUxpbmtNb2RhbFwiXG5pbXBvcnQge1RGaWxlLCBURm9sZGVyfSBmcm9tIFwib2JzaWRpYW5cIlxuaW1wb3J0IHtjcmVhdGVOb3RlRnJvbVRlbXBsYXRlfSBmcm9tIFwiLi91dGlscy9jcmVhdGVOb3RlRnJvbVRlbXBsYXRlXCJcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyQ29tbWFuZHMocGx1Z2luOiBQbHVnaW4pOiB2b2lkIHtcblxuXG4gICAgY29uc3QgY29tYW5kbzEgPSBwbHVnaW4uYWRkQ29tbWFuZCh7XG4gICAgICAgIGlkOiBcIkNyZWFjaW9uLUNhcnBldGFcIixcbiAgICAgICAgbmFtZTogXCJDcmVhY2lcdTAwRjNuIGRlIENhcnBldGFcIixcbiAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGRlYnVnZ2VyXG4gICAgICAgICAgICBhd2FpdCBjcmVhckNhcnBldGEoJ01pIENhcnBldGEgZGUgcGx1Z2luJyk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBwbHVnaW4ucmVnaXN0ZXJlZENvbW1hbmRJZHNNQi5wdXNoKGNvbWFuZG8xLmlkKTtcblxuXG4gICAgY29uc3QgY29tYW5kbzMgPSBwbHVnaW4uYWRkQ29tbWFuZCh7XG4gICAgICAgIGlkOiBcImNyZWFyLWFyY2hpdm8tdGVtcGxhdGVcIixcbiAgICAgICAgbmFtZTogXCJDcmVhciBhcmNoaXZvIGRlc2RlIHRlbXBsYXRlXCIsXG4gICAgICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHBsdWdpbklkID0gJ3RlbXBsYXRlci1vYnNpZGlhbic7XG4gICAgICAgICAgICBjb25zdCBpc1BsdWdpbkluc3RhbGxlZCA9IHBsdWdpbi5hcHAucGx1Z2lucy5lbmFibGVkUGx1Z2lucy5oYXMocGx1Z2luSWQpO1xuICAgICAgICAgICAgLy9jb25zdCB0ZW1wbGF0ZXJQbHVnaW4gPSBwbHVnaW4uYXBwLnBsdWdpbnMucGx1Z2luc1twbHVnaW5JZF07XG4gICAgICAgICAgICAvLyBJbnRlbnRhIG9idGVuZXIgbGEgcGxhbnRpbGxhIGNvbW8gVEZpbGVcbiAgICAgICAgICAgIGxldCB0ZW1wbGF0ZSA9IFwiUGxhbnRpbGxhcy9Bbm90YWNpb25lcy9QbHQgLSBBbm90YWNpb25lcy5tZFwiO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBJbnRlbnRhIG9idGVuZXIgbGEgY2FycGV0YSBjb21vIFRGb2xkZXJcbiAgICAgICAgICAgIGxldCBmb2xkZXJPYmogPSBwbHVnaW4uYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChcIkluYm94XCIpO1xuICAgICAgICAgICAgaWYgKCEoZm9sZGVyT2JqIGluc3RhbmNlb2YgVEZvbGRlcikpIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiTGEgY2FycGV0YSBlc3BlY2lmaWNhZGEgbm8gZXhpc3RlIG8gbm8gZXMgdW5hIGNhcnBldGEuXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjsgLy8gU2FsaXIgc2kgbm8gc2UgZW5jdWVudHJhIGxhIGNhcnBldGEgbyBubyBlcyB1bmEgY2FycGV0YVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZmlsZU5hbWUgPSBcInRvRGVmaW5lXCJcbiAgICAgICAgICAgIGxldCBvcGVuTm90ZSA9IHRydWVcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVidWdnZXJcbiAgICAgICAgICAgIGNvbnN0IGFyY2hpdm8gPSBhd2FpdCBjcmVhdGVOb3RlRnJvbVRlbXBsYXRlKHBsdWdpbiwgdGVtcGxhdGUsIGZvbGRlck9iaiwgZmlsZU5hbWUsIG9wZW5Ob3RlKTtcblxuICAgICAgICAgICAgaWYgKCFhcmNoaXZvKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIk5vIHNlIHB1ZG8gY3JlYXIgZWwgYXJjaGl2by5cIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgXG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgLy8gQWxtYWNlbmFyIGVsIElEIGRlbCBjb21hbmRvIGVuIHJlZ2lzdGVyZWRDb21tYW5kSWRzLlxuICAgIHBsdWdpbi5yZWdpc3RlcmVkQ29tbWFuZElkc01CLnB1c2goY29tYW5kbzMuaWQpO1xuXG5cbiAgICBjb25zdCBjb21hbmRvNCA9IHBsdWdpbi5hZGRDb21tYW5kKHtcbiAgICAgICAgaWQ6IFwiY3JlYXItbGluay1BcmNoaXZvXCIsXG4gICAgICAgIG5hbWU6IFwiQ3JlYXIgdW4gbGluayBhIGFyY2hpdm8gZGVsIERpc2NvLlwiLFxuICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGF3YWl0IGluc2VydEZpbGVMaW5rKGFwcCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgLy8gQWxtYWNlbmFyIGVsIElEIGRlbCBjb21hbmRvIGVuIHJlZ2lzdGVyZWRDb21tYW5kSWRzLlxuICAgIHBsdWdpbi5yZWdpc3RlcmVkQ29tbWFuZElkc01CLnB1c2goY29tYW5kbzQuaWQpO1xuXG5cbiAgICAvLyBDcmVhY2lcdTAwRjNuIHkgcmVnaXN0cm8gZGVsIGNvbWFuZG8uXG4gICAgY29uc3QgY29tYW5kbzUgPSBwbHVnaW4uYWRkQ29tbWFuZCh7XG4gICAgICAgIGlkOiBcImFicmlyLW5vdGEtYWN0aXZhXCIsXG4gICAgICAgIG5hbWU6IFwiQWJyaXIgTm90YSBBY3RpdmFcIixcbiAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgXG4gICAgICAgLy8gQXNlZ3VyYSBxdWUgbm8gaGF5YSBkdXBsaWNhZG9zIGRlIGxhIHZpc3RhLlxuICAgICAgIGFwcC53b3Jrc3BhY2UuZGV0YWNoTGVhdmVzT2ZUeXBlKFwidmlzdGEtbm90YS1hY3RpdmFcIik7XG5cbiAgICAgICAvLyBBYnJlIGxhIHZpc3RhIGVuIHVuYSBudWV2YSBob2phLlxuICAgICAgIGF3YWl0IGFwcC53b3Jrc3BhY2UuZ2V0UmlnaHRMZWFmKHRydWUpLnNldFZpZXdTdGF0ZSh7XG4gICAgICAgICAgIHR5cGU6IFwidmlzdGEtbm90YS1hY3RpdmFcIixcbiAgICAgICB9KTtcblxuICAgICAgIC8vIEFjdGl2YSBsYSBudWV2YSBob2phIHBhcmEgZWwgdXN1YXJpby5cbiAgICAgICBhcHAud29ya3NwYWNlLnJldmVhbExlYWYoXG4gICAgICAgICAgIGFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFwidmlzdGEtbm90YS1hY3RpdmFcIilbMF1cbiAgICAgICApO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcGx1Z2luLnJlZ2lzdGVyZWRDb21tYW5kSWRzTUIucHVzaChjb21hbmRvNS5pZCk7XG5cblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVhY3RpdmF0ZUNvbW1hbmRzKHBsdWdpbjogUGx1Z2luKTogdm9pZCB7XG4gICAgXG4gICAgaWYgKCFwbHVnaW4ucmVnaXN0ZXJlZENvbW1hbmRJZHNNQikgcmV0dXJuO1xuICAgIC8vIEVqZW1wbG8gZGUgY1x1MDBGM21vIHBvZHJcdTAwRURhcyBtYW5lamFyIGxhIFwiZGVzYWN0aXZhY2lcdTAwRjNuXCIgZGUgY29tYW5kb3MuXG4gICAgcGx1Z2luLnJlZ2lzdGVyZWRDb21tYW5kSWRzTUIuZm9yRWFjaChjb21tYW5kSWQgPT4ge1xuICAgICAgICBjb25zdCBjb21tYW5kID0gcGx1Z2luLmFwcC5jb21tYW5kcy5jb21tYW5kc1tjb21tYW5kSWRdO1xuICAgICAgICBcbiAgICAgICAgaWYgKGNvbW1hbmQpIHtcbiAgICAgICAgICAgIC8vIFNvYnJlc2NyaWJpciBlbCBjYWxsYmFjayBkZWwgY29tYW5kbyBwYXJhIHF1ZSBubyBoYWdhIG5hZGEuXG4gICAgICAgICAgICBjb21tYW5kLmNhbGxiYWNrID0gKCkgPT4gbmV3IE5vdGljZShcIkVzdGUgY29tYW5kbyBoYSBzaWRvIGRlc2FjdGl2YWRvLlwiKTtcbiAgICAgICAgICAgIC8vIE8gc2ltcGxlbWVudGUgZWxpbWluYXIgZWwgY2FsbGJhY2sgc2kgZXNvIHNlIGFqdXN0YSBhIHR1IGxcdTAwRjNnaWNhIGRlIGFwbGljYWNpXHUwMEYzbi5cbiAgICAgICAgICAgIC8vIGRlbGV0ZSBjb21tYW5kLmNhbGxiYWNrO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4iLCAiaW1wb3J0IHtURmlsZSwgVEZvbGRlcn0gZnJvbSBcIm9ic2lkaWFuXCJcbi8qKlxuICogQ3JlYSB1bmEgbnVldmEgbm90YSBhIHBhcnRpciBkZSB1bmEgcGxhbnRpbGxhIHV0aWxpemFuZG8gZWwgcGx1Z2luIFRlbXBsYXRlci5cbiAqIEBwYXJhbSB0ZW1wbGF0ZXJQbHVnaW4gUmVmZXJlbmNpYSBhbCBwbHVnaW4gVGVtcGxhdGVyLlxuICogQHBhcmFtIHRlbXBsYXRlIExhIHBsYW50aWxsYSBhIHV0aWxpemFyLCBwdWVkZSBzZXIgdW4gVEZpbGUgbyBlbCBwYXRoIGNvbW8gc3RyaW5nLlxuICogQHBhcmFtIGZvbGRlciBFbCBmb2xkZXIgZG9uZGUgc2UgY3JlYXJcdTAwRTEgbGEgbnVldmEgbm90YS4gT3BjaW9uYWwuXG4gKiBAcGFyYW0gZmlsZW5hbWUgRWwgbm9tYnJlIGRlbCBhcmNoaXZvIGRlIGxhIG51ZXZhIG5vdGEuIE9wY2lvbmFsLlxuICogQHBhcmFtIG9wZW5OZXdOb3RlIFNpIHNlIGRlYmUgYWJyaXIgbGEgbnVldmEgbm90YSB0cmFzIGNyZWFybGEuIFBvciBkZWZlY3RvIGVzIHRydWUuXG4gKiBAcmV0dXJucyBQcm9taXNlIHF1ZSByZXN1ZWx2ZSBhIFRGaWxlIHNpIGxhIG5vdGEgZnVlIGNyZWFkYSwgdW5kZWZpbmVkIGVuIGNhc28gY29udHJhcmlvLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlTm90ZUZyb21UZW1wbGF0ZShcbiAgICBwbHVnaW46IFBsdWdpbiwgLy8gRXN0YSBlcyB1bmEgc3Vwb3NpY2lcdTAwRjNuLCBuZWNlc2l0YXJcdTAwRTFzIGFqdXN0YXIgc2VnXHUwMEZBbiBjXHUwMEYzbW8gYWNjZWRhcyBhIFRlbXBsYXRlciBlbiB0dSBwbHVnaW5cbiAgICB0ZW1wbGF0ZTogVEZpbGUgfCBzdHJpbmcsXG4gICAgZm9sZGVyPzogVEZvbGRlcixcbiAgICBmaWxlbmFtZT86IHN0cmluZyxcbiAgICBvcGVuTmV3Tm90ZTogYm9vbGVhbiA9IHRydWVcbik6IFByb21pc2U8VEZpbGUgfCB1bmRlZmluZWQ+IHtcbiAgICAvLyBBc2VndXJhcnNlIGRlIHF1ZSBlbCBwbHVnaW4gVGVtcGxhdGVyIGVzdFx1MDBFMSBpbnN0YWxhZG8geSBoYWJpbGl0YWRvXG4gICAgaWYgKCFwbHVnaW4gfHwgIXBsdWdpbi5hcHAucGx1Z2lucy5lbmFibGVkUGx1Z2lucy5oYXMoJ3RlbXBsYXRlci1vYnNpZGlhbicpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VsIHBsdWdpbiBUZW1wbGF0ZXIgbm8gZXN0XHUwMEUxIGhhYmlsaXRhZG8uJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gRm9ybWEgZGUgYWNjZWRlciBhbCBvYmpldG8gdHAgbm9ybWFsIHF1ZSBoZSB1c2FkbyBkZXNkZSBEVkpTXG4gICAgY29uc3QgdGVtcGxhdGVyUGx1Z2luID0gcGx1Z2luLmFwcC5wbHVnaW5zLnBsdWdpbnNbJ3RlbXBsYXRlci1vYnNpZGlhbiddO1xuICAgIGNvbnN0IHRwID0gdGVtcGxhdGVyUGx1Z2luLnRlbXBsYXRlci5jdXJyZW50X2Z1bmN0aW9uc19vYmplY3Q7XG4gICAgXG5cbiAgICBpZiAoIXRwKSB7XG4gICAgY29uc29sZS5lcnJvcihcIk5vIHNlIHB1ZG8gYWNjZWRlciBhbCBvYmpldG8gZGUgZnVuY2lvbmVzIGFjdHVhbGVzIGRlIFRlbXBsYXRlci5cIik7XG4gICAgcmV0dXJuO1xufVxuICAgIC8vIHRlbXBsYXRlRmlsZSBwdWVkZSBzZXIgdW4gc3RyaW5nIG8gZWwgdGZpbGUgb2J0ZW5pZG8gZGUgZXN0YSBtYW5lcmEgbyBjb24gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aCgpXG4gICAgZGVidWdnZXJcbiAgICBsZXQgdGVtcGxhdGVGaWxlID0gdHAuZmlsZS5maW5kX3RmaWxlKHRlbXBsYXRlKTtcbiAgICBcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBuZXdOb3RlID0gYXdhaXQgdHAuZmlsZS5jcmVhdGVfbmV3KHRlbXBsYXRlRmlsZSwgZmlsZW5hbWUsIG9wZW5OZXdOb3RlLCBmb2xkZXIpO1xuICAgICAgICByZXR1cm4gbmV3Tm90ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBhbCBjcmVhciBsYSBub3RhIGRlc2RlIGxhIHBsYW50aWxsYTonLCBlcnJvcik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG59IiwgImltcG9ydCB7IFBsdWdpbiB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgcmVnaXN0ZXJSaWJib25NZW51IH0gZnJvbSBcIi4vdWkvcmliYm9uQnV0dG9uXCI7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGFjdGl2YXRlTW9kdWxvQnVzcXVlZGFBdmFuemFkYShwbHVnaW46IFBsdWdpbik6IHZvaWQge1xuICAgIHJlZ2lzdGVyUmliYm9uTWVudShwbHVnaW4pO1xufSIsICJpbXBvcnQgeyBBcHAsIE1lbnUsIFBsdWdpbiwgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IFNlYXJjaEFyZWFzRGVWaWRhTW9kYWwgfSBmcm9tIFwiLi9tb2RhbFwiOyAvLyBBc2VnXHUwMEZBcmF0ZSBkZSB0ZW5lciBlbCBpbXBvcnQgY29ycmVjdG8gcGFyYSB0dSBtb2RhbFxuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJSaWJib25NZW51KHBsdWdpbjogUGx1Z2luKTogdm9pZCB7XG4gICAgLy8gRXN0ZSBlcyBlbCBcdTAwRURjb25vIGRlbCBtZW5cdTAwRkEgZW4gZWwgcmliYm9uLCBjYW1iaWEgXCJkaWNlXCIgcG9yIGVsIFx1MDBFRGNvbm8gcXVlIHByZWZpZXJhc1xuICAgIHBsdWdpbi5hZGRSaWJib25JY29uKFwiZm9sZGVyLXNlYXJjaC0yXCIsIFwiQlx1MDBGQXNxdWVkYSBBdmFuemFkYVwiLCBhc3luYyAoZXZlbnQpID0+IHtcbiAgICAgICAgLy8gQ3JlYXIgZWwgbWVuXHUwMEZBIGFsIGhhY2VyIGNsaWMgZW4gZWwgXHUwMEVEY29ub1xuICAgICAgICBjb25zdCBtZW51ID0gbmV3IE1lbnUocGx1Z2luLmFwcCk7XG5cbiAgICAgICAgLy8gQWdyZWdhciBvcGNpb25lcyBhbCBtZW5cdTAwRkFcblxuICAgICAgICAvLyBcdTAwQzFyZWFzIGRlIFZpZGFcbiAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PlxuICAgICAgICAgICAgaXRlbS5zZXRUaXRsZShcIlx1MDBDMXJlYXMgZGUgVmlkYVwiKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ29ycmVjY2lcdTAwRjNuOiBBc2VnXHUwMEZBcmF0ZSBkZSBhYnJpciBlbCBtb2RhbCBjb3JyZWN0YW1lbnRlXG4gICAgICAgICAgICAgICAgICAgIG5ldyBTZWFyY2hBcmVhc0RlVmlkYU1vZGFsKHBsdWdpbi5hcHAsIChlc3RhZG9TZWxlY2Npb25hZG8pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXN0YWRvIHNlbGVjY2lvbmFkbzpcIiwgZXN0YWRvU2VsZWNjaW9uYWRvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFxdVx1MDBFRCBwdWVkZXMgY29udGludWFyIGNvbiBsYSBsXHUwMEYzZ2ljYSBwYXJhIG1hbmVqYXIgZWwgZXN0YWRvIHNlbGVjY2lvbmFkb1xuICAgICAgICAgICAgICAgICAgICB9KS5vcGVuKCk7IC8vIENvcnJlZ2lkbzogQVx1MDBGMWFkaWRvIC5vcGVuKCkgcGFyYSBhYnJpciBlbCBtb2RhbFxuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAvLyBcdTAwQzFyZWFzIGRlIEludGVyXHUwMEU5c1xuICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+XG4gICAgICAgICAgICBpdGVtLnNldFRpdGxlKFwiXHUwMEMxcmVhcyBkZSBJbnRlclx1MDBFOXNcIilcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFxdVx1MDBFRCBsYSBsXHUwMEYzZ2ljYSBwYXJhIGxhIGJcdTAwRkFzcXVlZGEgZGUgXCJcdTAwQzFyZWFzIGRlIEludGVyXHUwMEU5c1wiXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiXHUwMEMxcmVhcyBkZSBJbnRlclx1MDBFOXNcIik7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIC8vIEFub3RhY2lcdTAwRjNuXG4gICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT5cbiAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoXCJBbm90YWNpXHUwMEYzblwiKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXF1XHUwMEVEIGxhIGxcdTAwRjNnaWNhIHBhcmEgbGEgYlx1MDBGQXNxdWVkYSBkZSBcIkFub3RhY2lcdTAwRjNuXCJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBbm90YWNpXHUwMEYzblwiKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgLy8gUmVjdXJzbyBSZWN1cnJlbnRlXG4gICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT5cbiAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoXCJSZWN1cnNvIFJlY3VycmVudGVcIilcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFxdVx1MDBFRCBsYSBsXHUwMEYzZ2ljYSBwYXJhIGxhIGJcdTAwRkFzcXVlZGEgZGUgXCJSZWN1cnNvIFJlY3VycmVudGVcIlxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJlY3Vyc28gUmVjdXJyZW50ZVwiKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgLy8gR2VzdGlcdTAwRjNuIERpYXJpYVxuICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+XG4gICAgICAgICAgICBpdGVtLnNldFRpdGxlKFwiR2VzdGlcdTAwRjNuIERpYXJpYVwiKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXF1XHUwMEVEIGxhIGxcdTAwRjNnaWNhIHBhcmEgbGEgYlx1MDBGQXNxdWVkYSBkZSBcIkdlc3RpXHUwMEYzbiBEaWFyaWFcIlxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkdlc3RpXHUwMEYzbiBEaWFyaWFcIik7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIC8vIFJlZ2lzdHJvIGRlIFRpZW1wb1xuICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+XG4gICAgICAgICAgICBpdGVtLnNldFRpdGxlKFwiUmVnaXN0cm8gZGUgVGllbXBvXCIpXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBBcXVcdTAwRUQgbGEgbFx1MDBGM2dpY2EgcGFyYSBsYSBiXHUwMEZBc3F1ZWRhIGRlIFwiUmVnaXN0cm8gZGUgVGllbXBvXCJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJSZWdpc3RybyBkZSBUaWVtcG9cIik7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIC8vIE1vc3RyYXIgZWwgbWVuXHUwMEZBIGVuIGxhIHBvc2ljaVx1MDBGM24gZGVsIGN1cnNvclxuICAgICAgICBtZW51LnNob3dBdFBvc2l0aW9uKHsgeDogZXZlbnQucGFnZVgsIHk6IGV2ZW50LnBhZ2VZIH0pO1xuICAgIH0pO1xufVxuIiwgImltcG9ydCB7IEFwcCwgTW9kYWwsIFNldHRpbmcsIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBGdXp6eU5vdGVTdWdnZXN0ZXIgfSBmcm9tIFwiLi4vc2VhcmNoL0Z1enp5Tm90ZVN1Z2dlc3RlclwiOyAvLyBBc2VnXHUwMEZBcmF0ZSBkZSBxdWUgbGEgcnV0YSBkZSBpbXBvcnRhY2lcdTAwRjNuIHNlYSBjb3JyZWN0YVxuXG5leHBvcnQgY2xhc3MgU2VhcmNoQXJlYXNEZVZpZGFNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgICBvblNlbGVjdEVzdGFkbzogKGVzdGFkbzogc3RyaW5nKSA9PiB2b2lkO1xuICAgIGVzdGFkb1NlbGVjY2lvbmFkbzogc3RyaW5nID0gXCJcdUQ4M0RcdURGRTJcIjsgLy8gRXN0YWRvIHBvciBkZWZlY3RvIGNvbW8gZW1vamkgZGlyZWN0YW1lbnRlXG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgb25TZWxlY3RFc3RhZG86IChlc3RhZG86IHN0cmluZykgPT4gdm9pZCkge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgICAgICB0aGlzLm9uU2VsZWN0RXN0YWRvID0gb25TZWxlY3RFc3RhZG87XG4gICAgfVxuXG4gICAgb25PcGVuKCkge1xuICAgICAgICBsZXQgeyBjb250ZW50RWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xuXG4gICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbChcImgzXCIsIHsgdGV4dDogXCJCdXNjYXIgXHUwMEMxcmVhcyBkZSBWaWRhXCIgfSk7XG5cbiAgICAgICAgLy8gVXNhbmRvIFNldHRpbmcgcGFyYSBjcmVhciBlbCBEcm9wZG93blxuICAgICAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXG4gICAgICAgICAgICAuc2V0TmFtZShcIkVzdGFkb1wiKVxuICAgICAgICAgICAgLnNldERlc2MoXCJFbGlnZSBlbCBlc3RhZG86XCIpXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oZHJvcGRvd24gPT4ge1xuICAgICAgICAgICAgICAgIGRyb3Bkb3duLmFkZE9wdGlvbnMoeyBcIlx1RDgzRFx1REZFMlwiOiBcIlZlcmRlXCIsIFwiXHVEODNEXHVERDM1XCI6IFwiQXp1bFwiLCBcIlx1RDgzRFx1REZFMVwiOiBcIkFtYXJpbGxvXCIsIFwiXHVEODNEXHVERDM0XCI6IFwiUm9qb1wiIH0pO1xuICAgICAgICAgICAgICAgIGRyb3Bkb3duLnNldFZhbHVlKHRoaXMuZXN0YWRvU2VsZWNjaW9uYWRvKTsgLy8gRXN0YWJsZWNlIGVsIHZhbG9yIHBvciBkZWZlY3RvXG4gICAgICAgICAgICAgICAgZHJvcGRvd24ub25DaGFuZ2UodmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVzdGFkb1NlbGVjY2lvbmFkbyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQm90XHUwMEYzbiBkZSBiXHUwMEZBc3F1ZWRhXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgICAgIC5hZGRCdXR0b24oYnV0dG9uID0+IHtcbiAgICAgICAgICAgICAgICBidXR0b24uc2V0QnV0dG9uVGV4dChcIkJ1c2NhclwiKVxuICAgICAgICAgICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBub3Rhc0ZpbHRyYWRhcyA9IGF3YWl0IHRoaXMuZmlsdHJhck5vdGFzUG9yRXN0YWRvWURpcmVjdG9yaW8oXCJFc3RydWN0dXJhL0FyZWFzIGRlIFZpZGFcIiwgdGhpcy5lc3RhZG9TZWxlY2Npb25hZG8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJOb3RhcyBmaWx0cmFkYXM6XCIsIG5vdGFzRmlsdHJhZGFzLmxlbmd0aCwgbm90YXNGaWx0cmFkYXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEZ1enp5Tm90ZVN1Z2dlc3Rlcih0aGlzLmFwcCwgbm90YXNGaWx0cmFkYXMpLm9wZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBNXHUwMEU5dG9kbyBwYXJhIGZpbHRyYXIgbm90YXMgcG9yIGVzdGFkbyB5IGRpcmVjdG9yaW9cbiAgICBhc3luYyBmaWx0cmFyTm90YXNQb3JFc3RhZG9ZRGlyZWN0b3JpbyhkaXJlY3RvcmlvOiBzdHJpbmcsIGVzdGFkbzogc3RyaW5nKTogUHJvbWlzZTxURmlsZVtdPiB7XG4gICAgICAgIGNvbnN0IGFyY2hpdm9zID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgICAgICBsZXQgbm90YXNGaWx0cmFkYXMgPSBhcmNoaXZvcy5maWx0ZXIoYXJjaGl2byA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXRoID0gYXJjaGl2by5wYXRoO1xuICAgICAgICAgICAgaWYgKCFwYXRoLnN0YXJ0c1dpdGgoZGlyZWN0b3JpbykpIHJldHVybiBmYWxzZTsgLy8gRmlsdHJhIHBvciBkaXJlY3RvcmlvXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGRhdG9zID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoYXJjaGl2byk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFyY2hpdm8gcHJvY2VzYWRvOlwiLCBhcmNoaXZvLnBhdGgpO1xuICAgICAgICAgICAgLy8gQXNlZ1x1MDBGQXJhdGUgZGUgcXVlIGVsIGVzdGFkbyBkZWwgZnJvbnRtYXR0ZXIgY29pbmNpZGUgY29uIGVsIGVzdGFkbyBwcm9wb3JjaW9uYWRvXG4gICAgICAgICAgICBpZiAoZGF0b3MuZnJvbnRtYXR0ZXIgJiYgZGF0b3MuZnJvbnRtYXR0ZXIuZXN0YWRvID09PSBlc3RhZG8pIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFyY2hpdm8gaW5jbHVpZG86XCIsIGFyY2hpdm8ucGF0aCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIFxuICAgICAgICAvLyBPcmRlbmEgbGFzIG5vdGFzIGZpbHRyYWRhcyBwb3IgZmVjaGEgZGUgbW9kaWZpY2FjaVx1MDBGM24sIGRlIGxhIG1cdTAwRTFzIHJlY2llbnRlIGEgbGEgbVx1MDBFMXMgYW50aWd1YVxuICAgICAgICBub3Rhc0ZpbHRyYWRhcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYi5zdGF0Lm10aW1lIC0gYS5zdGF0Lm10aW1lOyAvLyBEZXNjZW5kZW50ZVxuICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgcmV0dXJuIG5vdGFzRmlsdHJhZGFzO1xuICAgIH1cbiAgICBcbn1cbiIsICIvLyBFbiBhbGdcdTAwRkFuIGx1Z2FyIGRlIHR1IG1cdTAwRjNkdWxvLCBjb21vIHNlYXJjaC9GdXp6eU5vdGVTdWdnZXN0ZXIudHNcbmltcG9ydCB7IEFwcCwgRnV6enlTdWdnZXN0TW9kYWwsIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmV4cG9ydCBjbGFzcyBGdXp6eU5vdGVTdWdnZXN0ZXIgZXh0ZW5kcyBGdXp6eVN1Z2dlc3RNb2RhbDxURmlsZT4ge1xuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwcml2YXRlIG5vdGFzOiBURmlsZVtdKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgfVxuXG4gICAgZ2V0SXRlbXMoKTogVEZpbGVbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vdGFzO1xuICAgIH1cblxuICAgIGdldEl0ZW1UZXh0KGl0ZW06IFRGaWxlKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uYmFzZW5hbWU7IC8vIE8gY3VhbHF1aWVyIG90cm8gZm9ybWF0byBxdWUgcHJlZmllcmFzXG4gICAgfVxuXG4gICAgb25DaG9vc2VJdGVtKGl0ZW06IFRGaWxlLCBldnQ6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgICAgIC8vIEFxdVx1MDBFRCBkZWZpbmVzIHF1XHUwMEU5IGhhY2VyIGN1YW5kbyBzZSBzZWxlY2Npb25hIHVuYSBub3RhLiBQb3IgZWplbXBsbywgYWJyaXIgbGEgbm90YTpcbiAgICAgICAgY29uc3QgbGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKHRydWUpO1xuICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2Uuc2V0QWN0aXZlTGVhZihsZWFmLCBmYWxzZSk7XG4gICAgICAgIGxlYWYub3BlbkZpbGUoaXRlbSk7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IFBsdWdpbiwgU3RhdHVzQmFyLCBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcblxuZXhwb3J0IGNsYXNzIFN0YXR1c0JhckV4dGVuc2lvbiB7XG4gICAgcGx1Z2luOiBQbHVnaW47XG4gICAgc3RhdHVzQmFyOiBTdGF0dXNCYXIgfCBudWxsID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgIH1cblxuICAgIGFjdGl2YXRlKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0dXNCYXIpIHJldHVybjsgLy8gU2kgeWEgZXN0XHUwMEUxIGFjdGl2bywgbm8gaGFjZXIgbmFkYVxuXG4gICAgICAgIHRoaXMuc3RhdHVzQmFyID0gdGhpcy5wbHVnaW4uYWRkU3RhdHVzQmFySXRlbSgpO1xuICAgICAgICB0aGlzLnVwZGF0ZVN0YXR1c0JhcigpO1xuICAgICAgICAvLyBSZWdpc3RyYXIgZXZlbnRvIGZpbGUtb3BlblxuICAgICAgICB0aGlzLnBsdWdpbi5yZWdpc3RlckV2ZW50KFxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uYXBwLndvcmtzcGFjZS5vbihcImZpbGUtb3BlblwiLCAoZmlsZTogVEZpbGUpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXR1c0JhcihmaWxlKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZGVhY3RpdmF0ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXR1c0JhcikgcmV0dXJuOyAvLyBTaSB5YSBlc3RcdTAwRTEgZGVzYWN0aXZhZG8sIG5vIGhhY2VyIG5hZGFcblxuICAgICAgICB0aGlzLnN0YXR1c0Jhci5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy5zdGF0dXNCYXIgPSBudWxsO1xuICAgICAgICAvLyBObyBuZWNlc2l0YXMgZGVzdXNjcmliaXIgZWwgZXZlbnRvIGFxdVx1MDBFRCBzaSB1c2FzIHJlZ2lzdGVyRXZlbnQsIE9ic2lkaWFuIGxvIG1hbmVqYSBhdXRvbVx1MDBFMXRpY2FtZW50ZS5cbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZVN0YXR1c0JhcihmaWxlPzogVEZpbGUpIHtcbiAgICAgICAgY29uc3QgY3VycmVudEZpbGUgPSBmaWxlIHx8IHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICBpZiAoIWN1cnJlbnRGaWxlIHx8ICF0aGlzLnN0YXR1c0Jhcikge1xuICAgICAgICAgICAgdGhpcy5zdGF0dXNCYXI/LnNldFRleHQoJycpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmlsZUNhY2hlID0gdGhpcy5wbHVnaW4uYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGN1cnJlbnRGaWxlKTtcbiAgICAgICAgY29uc3QgYWxpYXNlcyA9IGZpbGVDYWNoZS5mcm9udG1hdHRlcj8uYWxpYXNlcyB8fCBbXTtcbiAgICAgICAgdGhpcy5zdGF0dXNCYXIuc2V0VGV4dChhbGlhc2VzLmxlbmd0aCA+IDAgPyBgQWxpYXM6ICR7YWxpYXNlc1swXX1gIDogJ05vIEFsaWFzJyk7XG4gICAgfVxufVxuIiwgIi8qXG4gKiBGaWxlbmFtZTogL3NyYy9tb2R1bGVzL21vZHVsb1JlZ2lzdHJvVGllbXBvL2luZGV4LnRzXG4gKiBQYXRoOiAvc3JjL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG9cbiAqIENyZWF0ZWQgRGF0ZTogMjAyNC0wMy0wNCAxNzo1ODozMFxuICogQXV0aG9yOiBBbmRyXHUwMEU5cyBKdWxpXHUwMEUxbiBCb3JiXHUwMEYzblxuICogLS0tLS1cbiAqIExhc3QgTW9kaWZpZWQ6IDIwMjUtMDItMjMgMTc6NDE6MjhcbiAqIE1vZGlmaWVkIEJ5OiBBbmRyXHUwMEU5cyBKdWxpXHUwMEUxbiBCb3JiXHUwMEYzblxuICogLS0tLS1cbiAqIENvcHlyaWdodCAoYykgMjAyNSAtIEFuZHJcdTAwRTlzIEp1bGlcdTAwRTFuIEJvcmJcdTAwRjNuXG4gKi9cblxuXG5pbXBvcnQgeyBQbHVnaW4gfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IHJlZ2lzdGVyUmliYm9uTWVudSwgZGVhY3RpdmF0ZVJpYmJvbk1lbnUgfSBmcm9tIFwiLi9yaWJib25NZW51XCI7XG5pbXBvcnQgeyByZWdpc3RlckNvbW1hbmRzLCBkZWFjdGl2YXRlQ29tbWFuZHMgfSBmcm9tIFwiLi9jb21tYW5kc1wiO1xuXG5leHBvcnQgY2xhc3MgTW9kdWxvUmVnaXN0cm9UaWVtcG8ge1xuICAgIHBsdWdpbjogUGx1Z2luO1xuXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgfVxuXG4gICAgYWN0aXZhdGUoKSB7XG4gICAgICAgIC8vIEFzZWdcdTAwRkFyYXRlIGRlIHF1ZSBlbCByaWJib24gc29sbyBzZSByZWdpc3RyZSBzaSBhXHUwMEZBbiBubyBoYSBzaWRvIHJlZ2lzdHJhZG9cbiAgICAgICAgaWYgKCF0aGlzLnBsdWdpbi5yaWJib25CdXR0b25SVCkge1xuICAgICAgICAgICAgcmVnaXN0ZXJSaWJib25NZW51KHRoaXMucGx1Z2luKTtcbiAgICAgICAgfVxuICAgICAgICByZWdpc3RlckNvbW1hbmRzKHRoaXMucGx1Z2luKTtcbiAgICB9XG5cbiAgICBkZWFjdGl2YXRlKCkge1xuICAgICAgICBkZWFjdGl2YXRlUmliYm9uTWVudSh0aGlzLnBsdWdpbik7XG4gICAgICAgIGRlYWN0aXZhdGVDb21tYW5kcyh0aGlzLnBsdWdpbik7XG4gICAgfVxufVxuIiwgIi8qXG4gKiBGaWxlbmFtZTogL3NyYy9tb2R1bGVzL21vZHVsb1JlZ2lzdHJvVGllbXBvL3JpYmJvbk1lbnUudHNcbiAqIFBhdGg6IC9zcmMvbW9kdWxlcy9tb2R1bG9SZWdpc3Ryb1RpZW1wb1xuICogQ3JlYXRlZCBEYXRlOiAyMDI0LTAzLTA0IDE3OjU4OjMwXG4gKiBBdXRob3I6IEFuZHJcdTAwRTlzIEp1bGlcdTAwRTFuIEJvcmJcdTAwRjNuXG4gKiAtLS0tLVxuICogTGFzdCBNb2RpZmllZDogMjAyNS0wMi0yMyAxNzo0NzoxN1xuICogTW9kaWZpZWQgQnk6IEFuZHJcdTAwRTlzIEp1bGlcdTAwRTFuIEJvcmJcdTAwRjNuXG4gKiAtLS0tLVxuICogQ29weXJpZ2h0IChjKSAyMDI1IC0gQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqL1xuXG5cbmltcG9ydCB7IEFwcCwgTWVudSwgUGx1Z2luLCBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgY3VtcGxlQ29uZGljaW9uIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyUmliYm9uTWVudShwbHVnaW46IFBsdWdpbik6IHZvaWQge1xuICAgIC8vIEVzdGUgZXMgZWwgXHUwMEVEY29ubyBkZWwgbWVuXHUwMEZBIGVuIGVsIHJpYmJvbiwgY2FtYmlhIFwiZGljZVwiIHBvciBlbCBcdTAwRURjb25vIHF1ZSBwcmVmaWVyYXNcbiAgICBcbiAgICBwbHVnaW4ucmliYm9uQnV0dG9uUlQgPSBwbHVnaW4uYWRkUmliYm9uSWNvbihcImNsb2NrXCIsIFwiUmVnaXN0cm8gZGUgVGllbXBvXCIsIGFzeW5jIChldmVudCkgPT4ge1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXIgZWwgbWVuXHUwMEZBIGFsIGhhY2VyIGNsaWMgZW4gZWwgXHUwMEVEY29ub1xuICAgICAgICBjb25zdCBtZW51ID0gbmV3IE1lbnUocGx1Z2luLmFwcCk7XG5cbiAgICAgICAgLy8gQWdyZWdhciBvcGNpb25lcyBhbCBtZW5cdTAwRkFcbiAgICAgICAgLy8gTGEgb3BjaVx1MDBGM24gYWhvcmEsIHNvbG8gc2UgYWN0aXZhIHNpIGhheSBhbGdcdTAwRkFuIHJlZ2lzdHJvIGRlIHRpZW1wbyBlbiBlamVjdWNpXHUwMEYzbi5cbiAgICAgICAgaWYgKGF3YWl0IGN1bXBsZUNvbmRpY2lvbihwbHVnaW4uYXBwKSkge1xuICAgICAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PlxuICAgICAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoXCJBaG9yYVwiKVxuICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFob3JhXCIpO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT5cbiAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoXCJSZWdpc3RyYXIgVGllbXBvXCIpXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBBcXVcdTAwRUQgbGEgbFx1MDBGM2dpY2EgcGFyYSBcIlJlZ2lzdHJhciBUaWVtcG9cIlxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJlZ2lzdHJhciBUaWVtcG9cIik7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG5cbiAgICAgICAgLy8gTGEgb3BjaVx1MDBGM24gRGV0ZW5lciBSZWdpc3Rybywgc29sbyBzZSBhY3RpdmEgc2kgaGF5IGFsZ1x1MDBGQW4gcmVnaXN0cm8gZGUgdGllbXBvIGVuIGVqZWN1Y2lcdTAwRjNuLlxuICAgICAgICBpZiAoYXdhaXQgY3VtcGxlQ29uZGljaW9uKHBsdWdpbi5hcHApKSB7XG4gICAgICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+XG4gICAgICAgICAgICAgICAgaXRlbS5zZXRUaXRsZShcIkRldGVuZXIgUmVnaXN0cm9cIilcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXF1XHUwMEVEIGxhIGxcdTAwRjNnaWNhIHBhcmEgXCJEZXRlbmVyIFJlZ2lzdHJvXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRGV0ZW5lciBSZWdpc3Ryb1wiKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PlxuICAgICAgICAgICAgaXRlbS5zZXRUaXRsZShcIlRhcmVhcyBlbiBwcm9ncmVzb1wiKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXF1XHUwMEVEIGxhIGxcdTAwRjNnaWNhIHBhcmEgXCJUYXJlYXMgZW4gcHJvZ3Jlc29cIlxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRhcmVhcyBlbiBwcm9ncmVzb1wiKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PlxuICAgICAgICAgICAgaXRlbS5zZXRUaXRsZShcIlJlZ2lzdHJvcyBkZSBob3lcIilcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFxdVx1MDBFRCBsYSBsXHUwMEYzZ2ljYSBwYXJhIFwiUmVnaXN0cm9zIGRlIGhveVwiXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmVnaXN0cm9zIGRlIGhveVwiKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgLy8gTW9zdHJhciBlbCBtZW5cdTAwRkEgZW4gbGEgcG9zaWNpXHUwMEYzbiBkZWwgY3Vyc29yXG4gICAgICAgIG1lbnUuc2hvd0F0UG9zaXRpb24oeyB4OiBldmVudC5wYWdlWCwgeTogZXZlbnQucGFnZVkgfSk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWFjdGl2YXRlUmliYm9uTWVudShwbHVnaW46IFBsdWdpbik6IHZvaWQge1xuICAgIGlmIChwbHVnaW4ucmliYm9uQnV0dG9uUlQpIHtcbiAgICAgICAgcGx1Z2luLnJpYmJvbkJ1dHRvblJULnJlbW92ZSgpO1xuICAgICAgICBwbHVnaW4ucmliYm9uQnV0dG9uUlQgPSBudWxsO1xuICAgIH1cbn1cbiIsICIvKlxuICogRmlsZW5hbWU6IC9zcmMvbW9kdWxlcy9tb2R1bG9SZWdpc3Ryb1RpZW1wby91dGlscy50c1xuICogUGF0aDogL3NyYy9tb2R1bGVzL21vZHVsb1JlZ2lzdHJvVGllbXBvXG4gKiBDcmVhdGVkIERhdGU6IDIwMjQtMDMtMDQgMTg6MDE6MDJcbiAqIEF1dGhvcjogQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqIC0tLS0tXG4gKiBMYXN0IE1vZGlmaWVkOiAyMDI1LTAyLTIzIDE3OjQ3OjI5XG4gKiBNb2RpZmllZCBCeTogQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqIC0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjUgLSBBbmRyXHUwMEU5cyBKdWxpXHUwMEUxbiBCb3JiXHUwMEYzblxuICovXG5cblxuXG4vLyBMXHUwMEQzR0lDQSBQQVJBIEFDQ0VERVIgQSBMQVMgRlVOQ0lPTkVTIERFU0RFIExPUyBCT1RPTkVTIFBST1BJT1MgREUgTEEgSU5URVJGQVogREUgT0JTSURJQU4gLT4gUklCQk9OLCBFVENcbmltcG9ydCB7IEFwcCwgVEZpbGUsIFRGb2xkZXIsIE1vZGFsLCBGdXp6eVN1Z2dlc3RNb2RhbCwgRnV6enlNYXRjaCwgTm90aWNlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQge1NlbGVjY2lvbk1vZGFsfSBmcm9tIFwiLi4vbW9kYWxlcy9zZWxlY2Npb25Nb2RhbFwiXG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGN1bXBsZUNvbmRpY2lvbihhcHA6IEFwcCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IGZpbGVzID0gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcbiAgICBcbiAgICBmb3IgKGxldCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgICAgIGlmIChmaWxlLnBhdGguc3RhcnRzV2l0aChcIkVzdHJ1Y3R1cmEvUmVnaXN0cm8gVGllbXBvXCIpKSB7XG4gICAgICAgICAgICAvLyBPYnRlbmVyIGxvcyBtZXRhZGF0b3MgZGVsIGFyY2hpdm8gZGVzZGUgbWV0YWRhdGFDYWNoZVxuICAgICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFZlcmlmaWNhciBzaSBlbCBmcm9udG1hdHRlciBjb250aWVuZSBlbCBjYW1wbyBcImVzdGFkb1wiIGNvbiBlbCB2YWxvciBcIlx1RDgzRFx1REZFMlwiXG4gICAgICAgICAgICBpZiAobWV0YWRhdGE/LmZyb250bWF0dGVyPy5lc3RhZG8gPT09IFwiXHVEODNEXHVERkUyXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbiBleHBvcnQgYXN5bmMgZnVuY3Rpb24gYnVzY2FyUmVnaXN0cm9zQWN0aXZvcyhhcHA6IEFwcCk6IFByb21pc2U8VEZpbGUgfCBudWxsPiB7XG4gICAgXG4gICAgY29uc3QgZmlsZXMgPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgICBcbiAgICAgZm9yIChsZXQgZmlsZSBvZiBmaWxlcykge1xuICAgICAgICAgaWYgKGZpbGUucGF0aC5zdGFydHNXaXRoKFwiU3Vic2lzdGVtYXMvUmVnaXN0cm8gVGllbXBvL1JlZ2lzdHJvc1wiKSkge1xuICAgICAgICAgICAgIC8vIE9idGVuZXIgbG9zIG1ldGFkYXRvcyBkZWwgYXJjaGl2byBkZXNkZSBtZXRhZGF0YUNhY2hlXG4gICAgICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XG4gICAgICAgICAgICAgXG4gICAgICAgICAgICAgLy8gVmVyaWZpY2FyIHNpIGVsIGZyb250bWF0dGVyIGNvbnRpZW5lIGVsIGNhbXBvIFwiZXN0YWRvXCIgY29uIGVsIHZhbG9yIFwiXHVEODNEXHVERkUyXCJcbiAgICAgICAgICAgICBpZiAobWV0YWRhdGE/LmZyb250bWF0dGVyPy5lc3RhZG8gPT09IFwiXHVEODNEXHVERkUyXCIpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsZTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgIH1cbiAgICAgXG4gICAgIHJldHVybiA7XG4gfVxuXG5cbiAvLyBTdXBvbmVtb3MgcXVlIGVzdGEgZnVuY2lcdTAwRjNuIHNlIHViaWNhclx1MDBFMSBlbiBhbGdcdTAwRkFuIGx1Z2FyIGRvbmRlIHB1ZWRhIGFjY2VkZXIgYSBgYXBwYCBkZSBPYnNpZGlhbi5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhck9iamV0b1JlZ2lzdHJvKHBsdWdpbikge1xuICAgIFxuICAgIGNvbnN0IGFjdGl2byA9IHBsdWdpbi5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcbiAgICBpZiAoIWFjdGl2bykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTm8gaGF5IHVuIGFyY2hpdm8gYWN0aXZvIHBhcmEgbGEgY3JlYWNpXHUwMEYzbiBkZSByZWdpc3RybyBkZSB0aWVtcG8uIFNlIGRlc2NhcnRhIHBhcmEgbGEgY3JlYWNpXHUwMEYzbiBkZSByZWdpc3RybyBkZSB0aWVtcG8uXCIpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgZm9sZGVyID0gcGx1Z2luLnNldHRpbmdzLmZvbGRlcl9SZWdpc3Ryb1RpZW1wb1xuICAgIGNvbnN0IGluZGljZSA9IHBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfUmVnaXN0cm9UaWVtcG9cbiAgICBcbiAgICBsZXQgbWF4SWQgPSAwO1xuXG4gICAgLy8gT2J0XHUwMEU5biB0b2RvcyBsb3MgYXJjaGl2b3MgTWFya2Rvd25cbiAgICBjb25zdCBmaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG5cbiAgICAvLyBGaWx0cmEgcG9yIGxvcyBhcmNoaXZvcyBlbiBsYSBjYXJwZXRhIGRlc2VhZGFcbiAgICBjb25zdCByZWdpc3Ryb3NFeGlzdGVudGVzID0gZmlsZXMuZmlsdGVyKGZpbGUgPT4gZmlsZS5wYXRoLnN0YXJ0c1dpdGgoZm9sZGVyKSk7XG4gICAgIFxuICAgIC8vIFVzYSBtZXRhZGF0YUNhY2hlIHBhcmEgYnVzY2FyIGxvcyBJRHMgZW4gZWwgZnJvbnRtYXR0ZXJcbiAgICAgcmVnaXN0cm9zRXhpc3RlbnRlcy5mb3JFYWNoKGZpbGUgPT4ge1xuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXI7XG4gICAgICAgIGlmIChtZXRhZGF0YSAmJiBtZXRhZGF0YS5pZCAmJiAhaXNOYU4obWV0YWRhdGEuaWQpKSB7XG4gICAgICAgICAgICBjb25zdCBpZCA9IHBhcnNlSW50KG1ldGFkYXRhLmlkKTtcbiAgICAgICAgICAgIGlmIChpZCA+IG1heElkKSBtYXhJZCA9IGlkO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBFbCBwclx1MDBGM3hpbW8gSUQgZGlzcG9uaWJsZVxuICAgIGNvbnN0IG5leHRJZCA9IG1heElkICsgMTtcblxuICAgIC8vIEZvcm1hdGVhciBsYSBmZWNoYSBhY3R1YWxcbiAgICBjb25zdCBmZWNoYUNvbXBsZXRhID0gZm9ybWF0ZWFyRmVjaGEobmV3IERhdGUoKSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBhY3Rpdm8sXG4gICAgICAgIG5vbWJyZTogYWN0aXZvLmJhc2VuYW1lLFxuICAgICAgICBmb2xkZXIsXG4gICAgICAgIGluZGljZSxcbiAgICAgICAgaWQ6IG5leHRJZCxcbiAgICAgICAgZmVjaGE6IGZlY2hhQ29tcGxldGEsXG4gICAgICAgIGluZGljZV9EVkpTOiBgXCIke2luZGljZX1cImAsXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0ZWFyRmVjaGEoZmVjaGE6IERhdGUpOiBzdHJpbmcge1xuICAgIGNvbnN0IG9mZnNldCA9IGZlY2hhLmdldFRpbWV6b25lT2Zmc2V0KCkgKiA2MDAwMDtcbiAgICBjb25zdCBmZWNoYUxvY2FsID0gbmV3IERhdGUoZmVjaGEuZ2V0VGltZSgpIC0gb2Zmc2V0KTtcbiAgICBjb25zdCBmZWNoYUZvcm1hdG8gPSBmZWNoYUxvY2FsLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcbiAgICBjb25zdCBkaWFzID0gWydEb21pbmdvJywgJ0x1bmVzJywgJ01hcnRlcycsICdNaVx1MDBFOXJjb2xlcycsICdKdWV2ZXMnLCAnVmllcm5lcycsICdTXHUwMEUxYmFkbyddO1xuICAgIGNvbnN0IGRpYVNlbWFuYSA9IGRpYXNbZmVjaGEuZ2V0RGF5KCldO1xuICAgIGNvbnN0IGhvcmFGb3JtYXRvID0gZmVjaGEudG9UaW1lU3RyaW5nKCkuc3BsaXQoJyAnKVswXS5zdWJzdHJpbmcoMCwgNSk7XG4gICAgcmV0dXJuIGAke2ZlY2hhRm9ybWF0b30gJHtkaWFTZW1hbmF9ICR7aG9yYUZvcm1hdG99YDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHZlcmlmaWNhclRhcmVhc0FjdGl2YXMocmVnaXN0cm86IGFueSwgYXBwOiBBcHApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBcbiAgICBjb25zdCBmaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG4gICAgY29uc3QgdGFyZWFzQWN0aXZhcyA9IFtdO1xuXG4gICAgZm9yIChsZXQgZmlsZSBvZiBmaWxlcykge1xuICAgICAgICBpZiAoZmlsZS5wYXRoLnN0YXJ0c1dpdGgocmVnaXN0cm8uZm9sZGVyKSkge1xuICAgICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk/LmZyb250bWF0dGVyO1xuICAgICAgICAgICAgaWYgKG1ldGFkYXRhPy5lc3RhZG8gPT09IFwiXHVEODNEXHVERkUyXCIpIHtcbiAgICAgICAgICAgICAgICB0YXJlYXNBY3RpdmFzLnB1c2goeyBmaWxlLCBhbGlhc2VzOiBtZXRhZGF0YS5hbGlhc2VzIHx8IGZpbGUuYmFzZW5hbWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGFyZWFzQWN0aXZhcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgY29uc3QgdGFyZWFBY3RpdmEgPSB0YXJlYXNBY3RpdmFzWzBdO1xuICAgICAgICBkZWJ1Z2dlclxuICAgICAgICBjb25zdCBkZXNlYURldGVuZXIgPSBhd2FpdCBtb3N0cmFyU3VnZXJlbmNpYShgTGEgdGFyZWEgJHt0YXJlYUFjdGl2YS5hbGlhc2VzfSBlc3RcdTAwRTEgY29ycmllbmRvLiBcdTAwQkZEZXNlYSBkZXRlbmVybGE/YCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoZGVzZWFEZXRlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYENyZWFjaVx1MDBGM24gZGUgcmVnaXN0cm8gY2FuY2VsYWRvIHBvciBlbCB1c3VhcmlvLmApO1xuICAgICAgICAgICAgcmVnaXN0cm8uZGV0ZW5lciA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChkZXNlYURldGVuZXIpIHtcbiAgICAgICAgICAgIC8vIEFRVUkgVkEgTEEgSU1QTEVNRU5UQUNJXHUwMEQzTiBBTCBOVUVWTyBDXHUwMEQzRElHTyAtPiBFU1RBIExPR0lDQSBNQU5FSkEgRlVOQ0lPTkVTISAgXG4gICAgICAgICAgICBhd2FpdCBkZXRlbmVyVGFyZWEodGFyZWFBY3RpdmEsIGFwcCk7XG4gICAgICAgICAgICByZWdpc3Ryby5kZXRlbmVyID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGBMYSB0YXJlYSAke3RhcmVhQWN0aXZhLmFsaWFzZXN9IHNlZ3Vpclx1MDBFMSByZWdpc3RyXHUwMEUxbmRvc2UuYCk7XG4gICAgICAgICAgICByZWdpc3Ryby5kZXRlbmVyID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGFyZWFzQWN0aXZhcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIG5ldyBOb3RpY2UoXCJIYXkgdW4gZXJyb3IgY29uIGxhIGNhbnRpZGFkIGRlIHRhcmVhcyBjb3JyaWVuZG8gZW4gZXN0ZSBtb21lbnRvLlwiKTtcbiAgICAgICAgcmVnaXN0cm8uZGV0ZW5lciA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJObyBoYXkgbVx1MDBFMXMgdGFyZWFzIGNvcnJpZW5kby5cIik7XG4gICAgICAgIHJlZ2lzdHJvLmRldGVuZXIgPSBmYWxzZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG1vc3RyYXJTdWdlcmVuY2lhKG1lbnNhamU6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbiB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBsZXQgc2VsZWNjaW9uYWRvID0gZmFsc2U7IC8vIFJhc3RyZWEgc2kgc2UgaGEgaGVjaG8gdW5hIHNlbGVjY2lcdTAwRjNuXG5cbiAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgTW9kYWwoYXBwKTtcbiAgICAgICAgbW9kYWwuY29udGVudEVsLmNyZWF0ZUVsKCdoMScsIHsgdGV4dDogbWVuc2FqZSB9KTtcblxuICAgICAgICAvLyBDcmVhciBjb250ZW5lZG9yIHBhcmEgYm90b25lc1xuICAgICAgICBjb25zdCBidXR0b25zQ29udGFpbmVyID0gbW9kYWwuY29udGVudEVsLmNyZWF0ZUVsKCdkaXYnKTtcblxuICAgICAgICAvLyBCb3RcdTAwRjNuIFNcdTAwRURcbiAgICAgICAgY29uc3QgeWVzQnV0dG9uID0gYnV0dG9uc0NvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywge1xuICAgICAgICAgICAgdGV4dDogJ1NcdTAwRUQnLFxuICAgICAgICB9KTtcbiAgICAgICAgeWVzQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgc2VsZWNjaW9uYWRvID0gdHJ1ZTsgLy8gQWN0dWFsaXphIHF1ZSBzZSBoYSBoZWNobyB1bmEgc2VsZWNjaVx1MDBGM25cbiAgICAgICAgICAgIG1vZGFsLmNsb3NlKCk7XG4gICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBCb3RcdTAwRjNuIE5vXG4gICAgICAgIGNvbnN0IG5vQnV0dG9uID0gYnV0dG9uc0NvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywge1xuICAgICAgICAgICAgdGV4dDogJ05vJyxcbiAgICAgICAgfSk7XG4gICAgICAgIG5vQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgc2VsZWNjaW9uYWRvID0gdHJ1ZTsgLy8gQWN0dWFsaXphIHF1ZSBzZSBoYSBoZWNobyB1bmEgc2VsZWNjaVx1MDBGM25cbiAgICAgICAgICAgIG1vZGFsLmNsb3NlKCk7XG4gICAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbW9kYWwub25DbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghc2VsZWNjaW9uYWRvKSB7XG4gICAgICAgICAgICAgICAgLy8gU2kgc2UgY2llcnJhIGVsIG1vZGFsIHNpbiBoYWNlciB1bmEgc2VsZWNjaVx1MDBGM24sIHJlc3VlbHZlIGNvbiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICByZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgbW9kYWwub3BlbigpO1xuICAgIH0pO1xufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWZpbmlyVGlwb1JlZ2lzdHJvKHJlZ2lzdHJvOiBhbnksIGFwcDogQXBwKSB7XG4gICAgY29uc3QgdG90VGFyZWFzID0gYXdhaXQgZW5jb250cmFyVGFyZWFzUGVuZGllbnRlcyhhcHApOyAvLyBQYXNvIGBhcHBgIGNvbW8gYXJndW1lbnRvXG4gICAgbGV0IG9wY2lvbmVzVGl0dWxvLCB2YWxvcmVzT3BjaW9uO1xuICAgIGlmICh0b3RUYXJlYXMubGVuZ3RoID4gMCkge1xuICAgICAgICBvcGNpb25lc1RpdHVsbyA9IFtyZWdpc3Ryby5ub21icmUsIFwiQWxndW5hIHRhcmVhIGVuIEVqZWN1Y2lcdTAwRjNuXCIsIFwiT3Ryb1wiXTtcbiAgICAgICAgdmFsb3Jlc09wY2lvbiA9IFtcIk5vdGFcIiwgXCJUYXJlYVwiLCBcIk90cm9cIl07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb3BjaW9uZXNUaXR1bG8gPSBbcmVnaXN0cm8ubm9tYnJlLCBcIk90cm9cIl07XG4gICAgICAgIHZhbG9yZXNPcGNpb24gPSBbXCJOb3RhXCIsIFwiT3Ryb1wiXTtcbiAgICB9XG4gICAgY29uc3QgcGxhY2Vob2xkZXIgPSBcIlx1MDBCRlNvYnJlIHF1XHUwMEU5IGVzIGVsIHJlZ2lzdHJvIGRlIHRpZW1wbz9cIjtcbiAgICBcbiAgICBjb25zdCBtb2RhbE1lbnUxID0gbmV3IFNlbGVjY2lvbk1vZGFsKGFwcCwgb3BjaW9uZXNUaXR1bG8sIHZhbG9yZXNPcGNpb24sIHBsYWNlaG9sZGVyKTtcbiAgICBcbiAgICAvLyBFc3BlcmEgYXNpbmNyXHUwMEYzbmljYW1lbnRlIGxhIHNlbGVjY2lcdTAwRjNuIGRlbCB1c3VhcmlvIGFudGVzIGRlIGNvbnRpbnVhci5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSBhd2FpdCBtb2RhbE1lbnUxLm9wZW5BbmRBd2FpdFNlbGVjdGlvbigpO1xuICAgICAgICByZWdpc3Ryby50aXBvUmVnaXN0cm8gPSBzZWxlY3Rpb247XG4gICAgICAgIC8vIFByb2Nlc2FyIGxhIHNlbGVjY2lcdTAwRjNuIGRlbCB1c3VhcmlvIGFxdVx1MDBFRC5cbiAgICAgICAgLy8gRWwgY1x1MDBGM2RpZ28gc3Vic2lndWllbnRlIGRlcGVuZGUgZGVsIHRpcG8gZGUgcmVnaXN0cm8gc2VsZWNjaW9uYWRvLlxuICAgICAgICBzd2l0Y2gocmVnaXN0cm8udGlwb1JlZ2lzdHJvKSB7XG4gICAgICAgICAgICBjYXNlIFwiTm90YVwiOlxuICAgICAgICAgICAgICAgIHJlZ2lzdHJvLnRpdHVsbyA9IHJlZ2lzdHJvLm5vbWJyZTsgLy8gRWwgdFx1MDBFRHR1bG8gZXMgZWwgbm9tYnJlIGRlIGxhIG5vdGEgYWN0dWFsLlxuICAgICAgICAgICAgICAgIHJlZ2lzdHJvLnNpQXN1bnRvID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJUYXJlYVwiOlxuICAgICAgICAgICAgICAgIC8vIExcdTAwRjNnaWNhIHBhcmEgcGVybWl0aXIgYWwgdXN1YXJpbyBlbGVnaXIgdW5hIHRhcmVhIGVzcGVjXHUwMEVEZmljYS5cbiAgICAgICAgICAgICAgICBhd2FpdCBlbGVnaXJUYXJlYVBhcmFSZWdpc3RybyhhcHAsIHJlZ2lzdHJvLCB0b3RUYXJlYXMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvLyBTaSBlbCB1c3VhcmlvIGVsaWdlIFwiT3Ryb1wiIG8gY3VhbHF1aWVyIG90cmEgb3BjaVx1MDBGM24uXG4gICAgICAgICAgICAgICAgcmVnaXN0cm8uc2lBc3VudG8gPSByZWdpc3Ryby50aXR1bG9EZWZpbmlkbyAhPT0gXCJPdHJvXCI7IC8vIEFzdW1lIHF1ZSBzaSBubyBlcyBcIk90cm9cIiwgZXMgdW4gYXN1bnRvIGVzcGVjXHUwMEVEZmljby5cbiAgICAgICAgICAgICAgICAvLyBMXHUwMEYzZ2ljYSBhZGljaW9uYWwgcGFyYSBtYW5lamFyIFwiT3Ryb1wiIG8gY2Fzb3Mgbm8gZXNwZWNpZmljYWRvcy5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBvIG1vZGFsIGNlcnJhZG8gc2luIHNlbGVjY2lcdTAwRjNuOlwiLCBlcnJvcik7XG4gICAgICAgIC8vIE1hbmVqbyBkZSBlcnJvcmVzIG8gY2llcnJlIGRlbCBtb2RhbCBzaW4gc2VsZWNjaVx1MDBGM24uXG4gICAgICAgIC8vIFBvciBlamVtcGxvLCBwb2RyXHUwMEVEYXMgZXN0YWJsZWNlciB1biB2YWxvciBwcmVkZXRlcm1pbmFkbyBwYXJhIHJlZ2lzdHJvLmRldGVuZXIgYXF1XHUwMEVELlxuICAgIH1cbn1cblxuXG4gICAgYXN5bmMgZnVuY3Rpb24gZW5jb250cmFyVGFyZWFzUGVuZGllbnRlcyhhcHA6IEFwcCk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICAgICAgbGV0IHRhcmVhc1BlbmRpZW50ZXM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGNvbnN0IGFyY2hpdm9zID0gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcbiAgICAgICAgY29uc3QgYXJjaGl2b3NSZWxldmFudGVzID0gYXJjaGl2b3MuZmlsdGVyKGFyY2hpdm8gPT4gIWFyY2hpdm8ucGF0aC5pbmNsdWRlcyhcIlBsYW50aWxsYXNcIikpO1xuICAgIFxuICAgICAgICBmb3IgKGNvbnN0IGFyY2hpdm8gb2YgYXJjaGl2b3NSZWxldmFudGVzKSB7XG4gICAgICAgICAgICBjb25zdCBjb250ZW5pZG8gPSBhd2FpdCBhcHAudmF1bHQucmVhZChhcmNoaXZvKTtcbiAgICAgICAgICAgIGNvbnN0IGNvaW5jaWRlbmNpYXMgPSBjb250ZW5pZG8ubWF0Y2goL14gKi0gXFxbXFwvXFxdIC4qL2dtKSB8fCBbXTtcbiAgICBcbiAgICAgICAgICAgIC8vIEVsaW1pbmEgbG9zIGVzcGFjaW9zIGFsIGluaWNpbyBkZSBjYWRhIGNvaW5jaWRlbmNpYSBhbnRlcyBkZSBhZ3JlZ2FybGEgYWwgYXJyZWdsb1xuICAgICAgICAgICAgY29uc3QgdGFyZWFzTGltcGlhcyA9IGNvaW5jaWRlbmNpYXMubWFwKHRhcmVhID0+IHRhcmVhLnRyaW0oKSk7XG4gICAgICAgICAgICB0YXJlYXNQZW5kaWVudGVzID0gdGFyZWFzUGVuZGllbnRlcy5jb25jYXQodGFyZWFzTGltcGlhcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmVhc1BlbmRpZW50ZXM7XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gZWxlZ2lyVGFyZWFQYXJhUmVnaXN0cm8oYXBwOiBBcHAsIHJlZ2lzdHJvOiBhbnksIHRhcmVhc1BlbmRpZW50ZXM6IHN0cmluZ1tdKSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IFwiRWxpZ2UgbGEgdGFyZWEgcXVlIHZhcyBhIHJlZ2lzdHJhci5cIjtcbiAgICAgICAgICAgIFxuICAgICAgICAvLyBDcmVhciB1biBhcnJlZ2xvIGRlIHByb21lc2FzIHVzYW5kbyBtYXAgcGFyYSBwYXNhciBjYWRhIHRhcmVhIHBvciBsaW1waWFyVGV4dG9UYXJlYVxuICAgICAgICBsZXQgcHJvbWVzYXNMaW1waWFzID0gdGFyZWFzUGVuZGllbnRlcy5tYXAodGFyZWEgPT4gbGltcGlhclRleHRvVGFyZWEodGFyZWEpKTtcblxuICAgICAgICAvLyBVc2FyIFByb21pc2UuYWxsIHBhcmEgZXNwZXJhciBhIHF1ZSB0b2RhcyBsYXMgdGFyZWFzIHNlYW4gcHJvY2VzYWRhc1xuICAgICAgICBQcm9taXNlLmFsbChwcm9tZXNhc0xpbXBpYXMpLnRoZW4odGFyZWFzTGltcGlhcyA9PiB7XG4gICAgICAgICAgICAvLyBFbiBlc3RlIHB1bnRvLCB0YXJlYXNMaW1waWFzIGVzIHVuIGFycmVnbG8gY29uIHRvZGFzIGxhcyB0YXJlYXMgZGVzcHVcdTAwRTlzIGRlIHNlciBsaW1waWFkYXNcbiAgICAgICAgICAgIC8vIEFob3JhIHB1ZWRlcyB1c2FyIHRhcmVhc0xpbXBpYXMgZW4gb3RyYSBmdW5jaVx1MDBGM25cbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgbW9kYWxNZW51ID0gbmV3IFNlbGVjY2lvbk1vZGFsKGFwcCwgdGFyZWFzTGltcGlhcywgdGFyZWFzTGltcGlhcywgcGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgbW9kYWxNZW51Lm9wZW5BbmRBd2FpdFNlbGVjdGlvbigpLnRoZW4oc2VsZWN0aW9uID0+IHtcbiAgICAgICAgICAgICAgICBkZWJ1Z2dlclxuICAgICAgICAgICAgICAgIHJlZ2lzdHJvLnRpdHVsbyA9IGxpbXBpYXJUZXh0b1RhcmVhIChzZWxlY3Rpb24pXG4gICAgICAgICAgICAgICAgLy9uZXcgTm90aWNlKHNlbGVjdGlvbik7XG4gICAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgcmVnaXN0cm8uZGV0ZW5lciA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIG8gbW9kYWwgY2VycmFkbyBzaW4gc2VsZWNjaVx1MDBGM246XCIsIGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAvLyBNYW5lamFyIHBvc2libGVzIGVycm9yZXNcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJIdWJvIHVuIGVycm9yIGFsIGxpbXBpYXIgbGFzIHRhcmVhczpcIiwgZXJyb3IpO1xuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbXBpYXJUZXh0b1RhcmVhKHRpdHVsbzogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgLy8gRWxpbWluYSB0b2RvIGRlc3B1XHUwMEU5cyBkZWwgcHJpbWVyIHNhbHRvIGRlIGxcdTAwRURuZWEuXG4gICAgICAgICAgICBsZXQgdGV4dG9MaW1waW8gPSB0aXR1bG8uc3BsaXQoJ1xcbicpWzBdO1xuICAgICAgICBcbiAgICAgICAgICAgIC8vIEVsaW1pbmEgbG9zIHRhZ3MgZGUgZXN0aWxvIE1hcmtkb3duLlxuICAgICAgICAgICAgdGV4dG9MaW1waW8gPSB0ZXh0b0xpbXBpby5yZXBsYWNlKC8jW1xcdy0vXSsvZywgJycpO1xuICAgICAgICBcbiAgICAgICAgICAgIC8vIEVsaW1pbmEgbG9zIGNhbXBvcyBkZSBlc3RpbG8gRGF0YXZpZXcuXG4gICAgICAgICAgICB0ZXh0b0xpbXBpbyA9IHRleHRvTGltcGlvLnJlcGxhY2UoL1xcW1xcdys6OlteXFxdXStcXF0vZywgJycpO1xuICAgICAgICBcbiAgICAgICAgICAgIC8vIEVsaW1pbmEgZWwgcGF0clx1MDBGM24gXCIgLSBbL11cIiBhbCBpbmljaW8gZGUgbGEgY2FkZW5hLCBpbmNsdXllbmRvIHBvc2libGVzIGVzcGFjaW9zIGFudGVzIG8gZGVzcHVcdTAwRTlzLlxuICAgICAgICAgICAgdGV4dG9MaW1waW8gPSB0ZXh0b0xpbXBpby5yZXBsYWNlKC9eXFxzKi1cXHMqXFxbXFwvXFxdXFxzKi8sICcnKTtcblxuICAgICAgICAgICAgLy8gUmVlbXBsYXphIGNhcmFjdGVyZXMgbm8gcGVybWl0aWRvcyBlbiBub21icmVzIGRlIGFyY2hpdm8gY29uIHVuIGd1aW9uIGJham8gbyBhbGdcdTAwRkFuIG90cm8gY2FyYWN0ZXIgc2VndXJvLiAgICBcbiAgICAgICAgICAgIGNvbnN0IGNhcmFjdGVyZXNOb1Blcm1pdGlkb3MgPSAvWzw+OlwiXFwvXFxcXHw/KlxceDAwLVxceDFGXS9nO1xuICAgICAgICAgICAgdGV4dG9MaW1waW8gPSB0ZXh0b0xpbXBpby5yZXBsYWNlKGNhcmFjdGVyZXNOb1Blcm1pdGlkb3MsICdfJyk7XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gUmVlbXBsYXphIGVzcGFjaW9zIG1cdTAwRkFsdGlwbGVzIHBvciB1biBcdTAwRkFuaWNvIGVzcGFjaW8gcGFyYSBldml0YXIgbm9tYnJlcyBkZSBhcmNoaXZvIGV4Y2VzaXZhbWVudGUgbGFyZ29zLlxuICAgICAgICAgICAgdGV4dG9MaW1waW8gPSB0ZXh0b0xpbXBpby5yZXBsYWNlKC9cXHMrL2csICcgJyk7XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gUmV0b3JuYSBlbCB0ZXh0byBsaW1waW8sIGFob3JhIGVudnVlbHRvIGVuIHVuYSBwcm9tZXNhLlxuICAgICAgICAgICAgcmVzb2x2ZSh0ZXh0b0xpbXBpby50cmltKCkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgXG4gICAgICAgIFxuXG5hc3luYyBmdW5jdGlvbiBkZXRlbmVyVGFyZWEodGFyZWFBY3RpdmE6IHsgZmlsZTogVEZpbGU7IHRpdHVsbzogc3RyaW5nIH0sIGFwcDogQXBwKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gQXF1XHUwMEVEIGlyXHUwMEVEYSBsYSBsXHUwMEYzZ2ljYSBwYXJhIG1hcmNhciBsYSB0YXJlYSBjb21vIG5vIGFjdGl2YSwgcHJvYmFibGVtZW50ZSBhY3R1YWxpemFuZG8gc3UgZnJvbnRtYXR0ZXJcbiAgICBjb25zb2xlLmxvZyhgRGV0ZW5pZW5kbyBsYSB0YXJlYTogJHt0YXJlYUFjdGl2YS50aXR1bG99YCk7XG4gICAgLy8gRWplbXBsbyBkZSBjXHUwMEYzbW8gc2UgcG9kclx1MDBFRGEgYWN0dWFsaXphciBlbCBmcm9udG1hdHRlciBwYXJhIGRldGVuZXIgbGEgdGFyZWFcbiAgICAvLyBFc3RhIGVzIHVuYSBzaW1wbGlmaWNhY2lcdTAwRjNuOyBsYSBpbXBsZW1lbnRhY2lcdTAwRjNuIHJlYWwgZGVwZW5kZXJcdTAwRURhIGRlIGNcdTAwRjNtbyBlc3RcdTAwRTlzIG1hbmVqYW5kbyBlbCBjb250ZW5pZG8gZGVsIGFyY2hpdm9cbiAgICBjb25zdCBmaWxlQ29udGVudHMgPSBhd2FpdCBhcHAudmF1bHQucmVhZCh0YXJlYUFjdGl2YS5maWxlKTtcbiAgICBjb25zdCBuZXdDb250ZW50cyA9IGZpbGVDb250ZW50cy5yZXBsYWNlKCdlc3RhZG86IFx1RDgzRFx1REZFMicsICdlc3RhZG86IFx1RDgzRFx1REQzNScpOyAvLyBDYW1iaWFyIGEgZXN0YWRvIG5vIGFjdGl2b1xuICAgIGF3YWl0IGFwcC52YXVsdC5tb2RpZnkodGFyZWFBY3RpdmEuZmlsZSwgbmV3Q29udGVudHMpO1xufVxuXG5cblxuXG5cblxuIFxuIiwgIi8qXG4gKiBGaWxlbmFtZTogL3NyYy9tb2R1bGVzL21vZHVsb1JlZ2lzdHJvVGllbXBvL2NvbW1hbmRzLnRzXG4gKiBQYXRoOiAvc3JjL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG9cbiAqIENyZWF0ZWQgRGF0ZTogMjAyNC0wMy0wNSAxNzowMjozNFxuICogQXV0aG9yOiBBbmRyXHUwMEU5cyBKdWxpXHUwMEUxbiBCb3JiXHUwMEYzblxuICogLS0tLS1cbiAqIExhc3QgTW9kaWZpZWQ6IDIwMjUtMDItMjMgMTc6NDA6MjRcbiAqIE1vZGlmaWVkIEJ5OiBBbmRyXHUwMEU5cyBKdWxpXHUwMEUxbiBCb3JiXHUwMEYzblxuICogLS0tLS1cbiAqIENvcHlyaWdodCAoYykgMjAyNSAtIEFuZHJcdTAwRTlzIEp1bGlcdTAwRTFuIEJvcmJcdTAwRjNuXG4gKi9cblxuaW1wb3J0IHsgUGx1Z2luLCBOb3RpY2UsIE1vZGFsLCBURmlsZSwgVEZvbGRlciB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgYnVzY2FyUmVnaXN0cm9zQWN0aXZvcywgY3JlYXJPYmpldG9SZWdpc3RybywgdmVyaWZpY2FyVGFyZWFzQWN0aXZhcywgZGVmaW5pclRpcG9SZWdpc3RybyB9IGZyb20gXCIuL3V0aWxzXCJcbmltcG9ydCB7bW9kYWxfQWhvcmF9IGZyb20gXCIuL21vZGFscy9tb2RhbF9BaG9yYVwiXG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckNvbW1hbmRzKHBsdWdpbjogUGx1Z2luKTogdm9pZCB7XG4gICAgXG4gICAgY29uc3QgaWQxID0gcGx1Z2luLmFkZENvbW1hbmQoe1xuICAgICAgICBpZDogXCJyZWdpc3Ryb3MtZGUtdGllbXBvLWRlbC1kaWFcIixcbiAgICAgICAgbmFtZTogXCJSZWdpc3Ryb3MgZGUgdGllbXBvIGRlbCBkXHUwMEVEYVwiLFxuICAgICAgICBjaGVja0NhbGxiYWNrOiAoY2hlY2tpbmc6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUxlYWYgPSBwbHVnaW4uYXBwLndvcmtzcGFjZS5hY3RpdmVMZWFmO1xuICAgICAgICAgICAgaWYgKGFjdGl2ZUxlYWYpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlUGF0aCA9IGFjdGl2ZUxlYWYudmlldy5maWxlPy5wYXRoIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgaWYgKGZpbGVQYXRoLnN0YXJ0c1dpdGgoXCJFc3RydWN0dXJhL1BlcmlvZG9zL0RpYXJpby9cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGVja2luZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXF1XHUwMEVEIGlyXHUwMEVEYSBsYSBsXHUwMEYzZ2ljYSBkZWwgY29tYW5kb1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJSZWdpc3Ryb3MgZGUgdGllbXBvIGRlbCBkXHUwMEVEYVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBBbG1hY2VuYXIgZWwgSUQgZGVsIGNvbWFuZG8gZW4gcmVnaXN0ZXJlZENvbW1hbmRJZHMuXG5cbiAgICBwbHVnaW4ucmVnaXN0ZXJlZENvbW1hbmRJZHNSVC5wdXNoKGlkMS5pZCk7XG5cbiAgICBjb25zdCBpZDIgPSBwbHVnaW4uYWRkQ29tbWFuZCh7XG4gICAgICAgIGlkOiBcImFob3JhLVJlZ2lzdHJvVGllbXBvXCIsXG4gICAgICAgIG5hbWU6IFwiVGFyZWEgYWN0aXZhIGVuIHJlZ2lzdHJvIGRlIHRpZW1wb1wiLFxuICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYWN0aXZhID0gYXdhaXQgYnVzY2FyUmVnaXN0cm9zQWN0aXZvcyhwbHVnaW4uYXBwKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFhY3RpdmEpIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiTm8gaGF5IG5vdGFzIGFjdGl2YXNcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIENyZWEgeSBtdWVzdHJhIGVsIG1vZGFsIHBlcnNvbmFsaXphZG8gY29uIGxhIG5vdGEgYWN0aXZhXG4gICAgICAgICAgICAgICAgbGV0IG1vZGFsID0gbmV3IG1vZGFsX0Fob3JhKHBsdWdpbi5hcHAsIGFjdGl2YSk7XG4gICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIC8vIEFsbWFjZW5hciBlbCBJRCBkZWwgY29tYW5kbyBlbiByZWdpc3RlcmVkQ29tbWFuZElkcy5cbiAgICBwbHVnaW4ucmVnaXN0ZXJlZENvbW1hbmRJZHNSVC5wdXNoKGlkMi5pZCk7XG4gICAgXG4gICAgY29uc3QgaWQzID0gcGx1Z2luLmFkZENvbW1hbmQoe1xuICAgICAgICBpZDogXCJjcmVhci1yZWdpc3Ryby10aWVtcG9cIixcbiAgICAgICAgbmFtZTogXCJDcmVhciBSZWdpc3RybyBkZSBUaWVtcG9cIixcbiAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlZ2lzdHJvID0gYXdhaXQgY3JlYXJPYmpldG9SZWdpc3RybyhwbHVnaW4pO1xuICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghcmVnaXN0cm8pIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiTm8gc2UgcHVkbyBjcmVhciBlbCBvYmpldG8gZGUgcmVnaXN0cm8uXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHZlcmlmaWNhclRhcmVhc0FjdGl2YXMocmVnaXN0cm8sIHBsdWdpbi5hcHApXG4gICAgICAgICAgICBhd2FpdCBkZWZpbmlyVGlwb1JlZ2lzdHJvKHJlZ2lzdHJvLHBsdWdpbi5hcHApXG4gICAgICAgICAgICAvLyBBc3VtaWVuZG8gcXVlIHNlIHRpZW5lIHVuYSBmdW5jaVx1MDBGM24gbyBtXHUwMEU5dG9kbyBwYXJhIHByb2Nlc2FyIGVsIG9iamV0byBgcmVnaXN0cm9gXG4gICAgICAgICAgICAvLyBQb3IgZWplbXBsbywgcG9kclx1MDBFRGEgc2VyIGNyZWFyIHVuYSBudWV2YSBub3RhIGNvbiBsYSBpbmZvcm1hY2lcdTAwRjNuIGRlIGByZWdpc3Ryb2BcbiAgICAgICAgICAgIFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIC8vIEFsbWFjZW5hciBlbCBJRCBkZWwgY29tYW5kbyBlbiByZWdpc3RlcmVkQ29tbWFuZElkcy5cbiAgICBwbHVnaW4ucmVnaXN0ZXJlZENvbW1hbmRJZHNSVC5wdXNoKGlkMy5pZCk7XG5cbiAgICBcbmNvbnN0IGlkNCA9IHBsdWdpbi5hZGRDb21tYW5kKHtcbiAgICBpZDogXCJ2aXN0YS1yZWdpc3Ryby10aWVtcG8tYWN0aXZhXCIsXG4gICAgbmFtZTogXCJNb3N0cmFyIFJUIEFjdGl2b1wiLFxuICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XG4gICAgICAgIC8vIEFzZWd1cmEgcXVlIG5vIGhheWEgZHVwbGljYWRvcyBkZSBsYSB2aXN0YS5cbiAgICAgICAgYXBwLndvcmtzcGFjZS5kZXRhY2hMZWF2ZXNPZlR5cGUoXCJ2aXN0YS1yZWdpc3Ryby1hY3Rpdm9cIik7XG5cbiAgICAgICAgLy8gQWJyZSBsYSB2aXN0YSBlbiB1bmEgbnVldmEgaG9qYS5cbiAgICAgICAgYXdhaXQgYXBwLndvcmtzcGFjZS5nZXRSaWdodExlYWYodHJ1ZSkuc2V0Vmlld1N0YXRlKHtcbiAgICAgICAgICAgIHR5cGU6IFwidmlzdGEtcmVnaXN0cm8tYWN0aXZvXCIsXG4gICAgICAgIH0pO1xuIFxuICAgICAgICAvLyBBY3RpdmEgbGEgbnVldmEgaG9qYSBwYXJhIGVsIHVzdWFyaW8uXG4gICAgICAgIGFwcC53b3Jrc3BhY2UucmV2ZWFsTGVhZihcbiAgICAgICAgICAgIGFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFwidmlzdGEtcmVnaXN0cm8tYWN0aXZvXCIpWzBdXG4gICAgICAgICk7XG4gICAgICAgICBcbiAgICAgICAgXG4gICAgfSxcbn0pO1xuLy8gQWxtYWNlbmFyIGVsIElEIGRlbCBjb21hbmRvIGVuIHJlZ2lzdGVyZWRDb21tYW5kSWRzLlxucGx1Z2luLnJlZ2lzdGVyZWRDb21tYW5kSWRzUlQucHVzaChpZDQuaWQpO1xuXG59XG5cblxuLy8gRXN0YSBwYXJ0ZSBkZWwgY1x1MDBGM2RpZ28gc2VyXHUwMEVEYSBoaXBvdFx1MDBFOXRpY2EgeSBkZXBlbmRlIGRlIGNcdTAwRjNtbyBnZXN0aW9uYXMgZWwgZXN0YWRvIHkgZWwgY2ljbG8gZGUgdmlkYSBkZSBsb3MgY29tYW5kb3MgZW4gdHUgcGx1Z2luLlxuZXhwb3J0IGZ1bmN0aW9uIGRlYWN0aXZhdGVDb21tYW5kcyhwbHVnaW46IFBsdWdpbik6IHZvaWQge1xuICAgIFxuICAgIGlmICghcGx1Z2luLnJlZ2lzdGVyZWRDb21tYW5kSWRzUlQpIHJldHVybjtcbiAgICAvLyBFamVtcGxvIGRlIGNcdTAwRjNtbyBwb2RyXHUwMEVEYXMgbWFuZWphciBsYSBcImRlc2FjdGl2YWNpXHUwMEYzblwiIGRlIGNvbWFuZG9zLlxuICAgIHBsdWdpbi5yZWdpc3RlcmVkQ29tbWFuZElkc1JULmZvckVhY2goKGNvbW1hbmRJZDogc3RyaW5nIHwgbnVtYmVyKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBwbHVnaW4uYXBwLmNvbW1hbmRzLmNvbW1hbmRzW2NvbW1hbmRJZF07XG4gICAgICAgIFxuICAgICAgICBpZiAoY29tbWFuZCkge1xuICAgICAgICAgICAgLy8gU29icmVzY3JpYmlyIGVsIGNhbGxiYWNrIGRlbCBjb21hbmRvIHBhcmEgcXVlIG5vIGhhZ2EgbmFkYS5cbiAgICAgICAgICAgIGNvbW1hbmQuY2FsbGJhY2sgPSAoKSA9PiBuZXcgTm90aWNlKFwiRXN0ZSBjb21hbmRvIGhhIHNpZG8gZGVzYWN0aXZhZG8uXCIpO1xuICAgICAgICAgICAgLy8gTyBzaW1wbGVtZW50ZSBlbGltaW5hciBlbCBjYWxsYmFjayBzaSBlc28gc2UgYWp1c3RhIGEgdHUgbFx1MDBGM2dpY2EgZGUgYXBsaWNhY2lcdTAwRjNuLlxuICAgICAgICAgICAgLy8gZGVsZXRlIGNvbW1hbmQuY2FsbGJhY2s7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuIiwgIi8qXG4gKiBGaWxlbmFtZTogL3NyYy9tb2R1bGVzL21vZHVsb1JlZ2lzdHJvVGllbXBvL21vZGFscy9tb2RhbF9BaG9yYS50c1xuICogUGF0aDogL3NyYy9tb2R1bGVzL21vZHVsb1JlZ2lzdHJvVGllbXBvL21vZGFsc1xuICogQ3JlYXRlZCBEYXRlOiAyMDI0LTAzLTA0IDE3OjU4OjMwXG4gKiBBdXRob3I6IEFuZHJcdTAwRTlzIEp1bGlcdTAwRTFuIEJvcmJcdTAwRjNuXG4gKiAtLS0tLVxuICogTGFzdCBNb2RpZmllZDogMjAyNS0wMi0yMyAxNzo0NjozM1xuICogTW9kaWZpZWQgQnk6IEFuZHJcdTAwRTlzIEp1bGlcdTAwRTFuIEJvcmJcdTAwRjNuXG4gKiAtLS0tLVxuICogQ29weXJpZ2h0IChjKSAyMDI1IC0gQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqL1xuXG5cbmltcG9ydCB7IE1vZGFsLCBBcHAsIFRGaWxlLCBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XG5cbmV4cG9ydCBjbGFzcyBtb2RhbF9BaG9yYSBleHRlbmRzIE1vZGFsIHtcbiAgICBmaWxlOiBURmlsZTtcbiAgICBhcHA6IEFwcDtcbiAgICBob3JhSW5pY2lvSW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgZmlsZTogVEZpbGUpIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgICAgIHRoaXMuZmlsZSA9IGZpbGU7XG4gICAgfVxuXG4gICAgYXN5bmMgb25PcGVuKCkge1xuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZSh0aGlzLmZpbGUpO1xuICAgICAgICBjb25zdCBhbGlhc2VzID0gbWV0YWRhdGE/LmZyb250bWF0dGVyPy5hbGlhc2VzIHx8IFwiQWN0aXZpZGFkIHNpbiBhbGlhc1wiO1xuICAgICAgICAvLyBDb252ZXJ0aXIgaG9yYUluaWNpb1N0ciBhIGZvcm1hdG8gXCJZWVlZLU1NLUREVEhIOk1NXCIgcGFyYSBkYXRldGltZS1sb2NhbFxuICAgICAgICBjb25zdCBob3JhSW5pY2lvU3RyID0gbWV0YWRhdGE/LmZyb250bWF0dGVyPy5ob3JhSW5pY2lvID8gd2luZG93Lm1vbWVudChtZXRhZGF0YS5mcm9udG1hdHRlci5ob3JhSW5pY2lvLCBcIllZWVktTU0tREQgZGRkZCBISDptbVwiKS5mb3JtYXQoXCJZWVlZLU1NLUREVEhIOm1tXCIpIDogJyc7XG5cbiAgICAgICAgLy8gQ29uZmlndXJhIGVsIHRcdTAwRUR0dWxvIGRlbCBtb2RhbCB5IG11ZXN0cmEgZWwgYWxpYXMgZGUgbGEgdGFyZWFcbiAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogYFJlZ2lzdHJvIGRlIGFjdGl2aWRhZC5gIH0pO1xuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6IGBUYXJlYTogXCIke2FsaWFzZXN9XCJgIH0pO1xuICAgICAgICBpZiAoaG9yYUluaWNpb1N0cikge1xuICAgICAgICAgICAgLy8gVXNhciBtb21lbnQgcGFyYSBwYXJzZWFyIGxhIGZlY2hhIGRlIGluaWNpbyB5IGNhbGN1bGFyIGxhIGRpZmVyZW5jaWFcbiAgICAgICAgICAgIGNvbnN0IGhvcmFJbmljaW8gPSB3aW5kb3cubW9tZW50KGhvcmFJbmljaW9TdHIsIFwiWVlZWS1NTS1ERCBkZGRkIEhIOm1tXCIpO1xuICAgICAgICAgICAgY29uc3QgYWhvcmEgPSB3aW5kb3cubW9tZW50KCk7XG4gICAgICAgICAgICBjb25zdCBkaWZmID0gYWhvcmEuZGlmZihob3JhSW5pY2lvKTtcbiAgICAgICAgICAgIGNvbnN0IGR1cmFjaW9uID0gd2luZG93Lm1vbWVudC5kdXJhdGlvbihkaWZmKTtcbiAgICAgICAgICAgIGNvbnN0IGRpZmZGb3JtYXR0ZWQgPSBgJHtkdXJhY2lvbi5ob3VycygpfWggJHtkdXJhY2lvbi5taW51dGVzKCl9bWA7XG5cbiAgICAgICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgncCcsIHsgdGV4dDogYEVzdGEgYWN0aXZpZGFkIGxsZXZhICR7ZGlmZkZvcm1hdHRlZH0gZW4gZWplY3VjaVx1MDBGM24uYCB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgncCcsIHsgdGV4dDogXCJObyBzZSBwdWRvIGRldGVybWluYXIgZWwgdGllbXBvIGRlIGluaWNpbyBkZSBsYSBhY3RpdmlkYWQuXCIgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW5wdXQgcGFyYSBsYSBob3JhIGRlIGluaWNpbyBjb24gdGlwbyBkYXRldGltZS1sb2NhbFxuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdIb3JhIGRlIGluaWNpbzonIH0pO1xuICAgICAgICB0aGlzLmhvcmFJbmljaW9JbnB1dCA9IGNvbnRlbnRFbC5jcmVhdGVFbCgnaW5wdXQnLCB7XG4gICAgICAgICAgICB0eXBlOiAnZGF0ZXRpbWUtbG9jYWwnLFxuICAgICAgICAgICAgdmFsdWU6IGhvcmFJbmljaW9TdHJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQm90XHUwMEYzbiBwYXJhIGd1YXJkYXIgY2FtYmlvc1xuICAgICAgICBjb25zdCBzYXZlQnV0dG9uID0gY29udGVudEVsLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdHdWFyZGFyIGNhbWJpb3MnIH0pO1xuICAgICAgICBzYXZlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB0aGlzLmd1YXJkYXJDYW1iaW9zKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ3VhcmRhckNhbWJpb3MoKSB7XG4gICAgICAgIGNvbnN0IG51ZXZhSG9yYUluaWNpb0xvY2FsID0gdGhpcy5ob3JhSW5pY2lvSW5wdXQudmFsdWU7XG4gICAgICAgIC8vIEFzZWd1cmFyIHF1ZSBsYSBudWV2YSBob3JhIHRpZW5lIHZhbG9yIGFudGVzIGRlIGludGVudGFyIGZvcm1hdGVhclxuICAgICAgICBpZiAoIW51ZXZhSG9yYUluaWNpb0xvY2FsKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKFwiUG9yIGZhdm9yLCBzZWxlY2Npb25lIHVuYSBob3JhIGRlIGluaWNpby5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb252ZXJ0aXIgZGUgXCJZWVlZLU1NLUREVEhIOk1NXCIgYSBcIllZWVktTU0tREQgZGRkZCBISDptbVwiXG4gICAgICAgIGNvbnN0IG51ZXZhSG9yYUluaWNpbyA9IHdpbmRvdy5tb21lbnQobnVldmFIb3JhSW5pY2lvTG9jYWwpLmZvcm1hdChcIllZWVktTU0tREQgZGRkZCBISDptbVwiKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gTGVlciBlbCBjb250ZW5pZG8gYWN0dWFsIGRlbCBhcmNoaXZvXG4gICAgICAgICAgICBjb25zdCBjb250ZW5pZG9PcmlnaW5hbCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQodGhpcy5maWxlKTtcbiAgICAgICAgICAgIC8vIFJlZW1wbGF6YXIgbGEgbFx1MDBFRG5lYSBkZSBob3JhSW5pY2lvIGNvbiBlbCBudWV2byB2YWxvciBmb3JtYXRlYWRvXG4gICAgICAgICAgICBjb25zdCBjb250ZW5pZG9BY3R1YWxpemFkbyA9IGNvbnRlbmlkb09yaWdpbmFsLnJlcGxhY2UoLyhob3JhSW5pY2lvOiApLiovLCBgJDEke251ZXZhSG9yYUluaWNpb31gKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gR3VhcmRhciBsb3MgY2FtYmlvcyBlbiBlbCBhcmNoaXZvXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmFwcC52YXVsdC5tb2RpZnkodGhpcy5maWxlLCBjb250ZW5pZG9BY3R1YWxpemFkbyk7XG5cbiAgICAgICAgICAgIC8vIENlcnJhciBlbCBtb2RhbCBkZXNwdVx1MDBFOXMgZGUgZ3VhcmRhciBsb3MgY2FtYmlvc1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgbmV3IE5vdGljZShcIkhvcmEgZGUgaW5pY2lvIGFjdHVhbGl6YWRhIGNvcnJlY3RhbWVudGUuXCIpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIGd1YXJkYXIgY2FtYmlvcyBlbiBsYSBub3RhOlwiLCBlcnJvcik7XG4gICAgICAgICAgICBuZXcgTm90aWNlKFwiRXJyb3IgYWwgZ3VhcmRhciBsb3MgY2FtYmlvcyBlbiBsYSBub3RhLlwiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsICIvLyBzcmMvZGVmYXVsdHMvZGVmYXVsdFNldHRpbmdzLnRzXG5pbXBvcnQgdHlwZSB7IFBsdWdpbk1haW5TZXR0aW5ncyB9IGZyb20gJy4uL2ludGVyZmFjZXMvcGx1Z2luTWFpblNldHRpbmdzJztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFBsdWdpbk1haW5TZXR0aW5ncyA9IHtcbiAgbW9kdWxvUmVnaXN0cm9UaWVtcG86IHRydWUsXG4gIG1vZHVsb0FsaWFzU3RhdHVzQmFyOiB0cnVlLFxuICBtb2R1bG9CYXNlOiB0cnVlLFxuICBtb2R1bG9HVEQ6IHRydWUsXG4gIG1vZHVsb1RhYlRpdGxlOiB0cnVlLCAgLy8gTW9kdWxvIHRpdHVsbyBkZSBwZXN0YVx1MDBGMWFzLlxuICBtb2R1bG9UYXNrTWFuYWdlcjogdHJ1ZSxcbiAgbW9kdWxvRGF0YXZpZXdRdWVyaWVzOiB0cnVlLFxuICB0YXNrRXhlY3V0aW9uTmF2aWdhdG9yTW9kdWxlOiB0cnVlLCAgLy8gQWN0aXZhZG8gcG9yIGRlZmVjdG9cbiAgdGFza05hdmlnYXRvck1vZHVsZTogdHJ1ZSxcbiAgZmlsZV9jYW1wb3NDZW50cmFsIDpcIkVzdHJ1Y3R1cmEvQ2FtcG9zIFNpc3RlbWEgR2VzdGlvbi9DYW1wb3MgU2lzdGVtYSBDZW50cmFsXCIsIFxuICBmb2xkZXJfQW5vdGFjaW9uZXM6IFwiQW5vdGFjaW9uZXMvTm90YXNcIixcbiAgaW5kaWNlX0Fub3RhY2lvbmVzOiBcIkFub3RhY2lvbmVzL0luZGljZSBBbm90YWNpb25lc1wiLFxuICBmb2xkZXJfQUJsb2c6IFwiU3Vic2lzdGVtYXMvQXJ0aWN1bG9zIEJsb2cvQXJ0aWN1bG9zXCIsXG4gIGluZGljZV9BQmxvZzogXCJTdWJzaXN0ZW1hcy9BcnRpY3Vsb3MgQmxvZy9JbmRpY2UgQXJ0aWN1bG9zIEJsb2dcIixcbiAgZm9sZGVyX0Rlc2Fycm9sbG9zOiBcIlN1YnNpc3RlbWFzL0Rlc2Fycm9sbG9zL0NvZGlnb3NcIixcbiAgaW5kaWNlX0Rlc2Fycm9sbG9zOiBcIlN1YnNpc3RlbWFzL0Rlc2Fycm9sbG9zL0luZGljZSBEZXNhcnJvbGxvXCIsXG4gIGZvbGRlcl9Fc3R1ZGlvOiBcIlN1YnNpc3RlbWFzL0VzdHVkaW8vVGVtYXNcIixcbiAgaW5kaWNlX0VzdHVkaW86IFwiU3Vic2lzdGVtYXMvRXN0dWRpby9JbmRpY2UgRXN0dWRpb1wiLFxuICBmb2xkZXJfUmVwb3NpdG9yaW9MaWJyb3M6IFwiU3Vic2lzdGVtYXMvTGlicm9zL1JlcG9zaXRvcmlvXCIsXG4gIGluZGljZV9SZXBvc2l0b3Jpb0xpYnJvczogXCJTdWJzaXN0ZW1hcy9MaWJyb3MvSW5kaWNlIFJlcG9zaXRvcmlvIExpYnJvc1wiLFxuICBmb2xkZXJfQmlibGlvdGVjYTogXCJTdWJzaXN0ZW1hcy9MaWJyb3MvQmlibGlvdGVjYVwiLFxuICBpbmRpY2VfQmlibGlvdGVjYTogXCJTdWJzaXN0ZW1hcy9MaWJyb3MvSW5kaWNlIEJpYmxpb3RlY2FcIixcbiAgZm9sZGVyX0tpbmRsZU5vdGVzOiBcIlN1YnNpc3RlbWFzL0xpYnJvcy9LaW5kbGVcIixcbiAgaW5kaWNlX0tpbmRsZU5vdGVzOiBcIlN1YnNpc3RlbWFzL0xpYnJvcy9LaW5kbGUvSW5kaWNlIEtpbmRsZVwiLFxuICAvL2ZvbGRlcl9MZWN0dXJhU2VzaW9uZXM6IFwiU3Vic2lzdGVtYXMvTGVjdHVyYS9TZXNpb25lcyBkZSBMZWN0dXJhL1Nlc2lvbmVzXCIsXG4gIC8vaW5kaWNlX0xlY3R1cmFTZXNpb25lczogXCJTdWJzaXN0ZW1hcy9MZWN0dXJhL1Nlc2lvbmVzIGRlIExlY3R1cmEvSW5kaWNlIFNlc2lvbmVzIExlY3R1cmFcIixcbiAgZm9sZGVyX0xlY3R1cmFSZXN1bWVuZXM6IFwiU3Vic2lzdGVtYXMvTGVjdHVyYS9MaWJyb3MvUmVzdW1lbmVzXCIsXG4gIGluZGljZV9MZWN0dXJhUmVzdW1lbmVzOiBcIlN1YnNpc3RlbWFzL0xlY3R1cmEvTGlicm9zL0luZGljZSBSZXN1bWVuZXNcIixcbiAgZm9sZGVyX01lbnRvcmlhczogXCJTdWJzaXN0ZW1hcy9NZW50b3JpYXMvU2VzaW9uZXMgTWVudG9yaWFcIixcbiAgaW5kaWNlX01lbnRvcmlhczogXCJTdWJzaXN0ZW1hcy9NZW50b3JpYXMvSW5kaWNlIE1lbnRvcmlhc1wiLFxuICBmb2xkZXJfTWVyY2FkbzogXCJTdWJzaXN0ZW1hcy9NZXJjYWRvL0xpc3Rhc1wiLFxuICBpbmRpY2VfTWVyY2FkbzogXCJTdWJzaXN0ZW1hcy9NZXJjYWRvL0luZGljZSBNZXJjYWRvXCIsXG4gIGZvbGRlcl9Nb2R1bG9zU2lzdGVtYTogXCJTdWJzaXN0ZW1hcy9Nb2R1bG9zIFNpc3RlbWEgR2VzdGlvbi9Nb2R1bG9zXCIsXG4gIGluZGljZV9Nb2R1bG9zU2lzdGVtYTogXCJTdWJzaXN0ZW1hcy9Nb2R1bG9zIFNpc3RlbWEgR2VzdGlvbi9JbmRpY2UgTW9kdWxvc1wiLFxuICBmb2xkZXJfVHJhbnNhY2Npb25lczogXCJTdWJzaXN0ZW1hcy9UcmFuc2FjY2lvbmVzXCIsXG4gIGluZGljZV9UcmFuc2FjY2lvbmVzOiBcIlN1YnNpc3RlbWFzL1RyYW5zYWNjaW9uZXMvSW5kaWNlIFRyYW5zYWNjaW9uZXNcIixcbiAgZm9sZGVyX1ByZXNlbnRhY2lvbmVzOiBcIlN1YnNpc3RlbWFzL1ByZXNlbnRhY2lvbmVzL05vdGFzXCIsXG4gIGluZGljZV9QcmVzZW50YWNpb25lczogXCJTdWJzaXN0ZW1hcy9QcmVzZW50YWNpb25lcy9JbmRpY2UgUHJlc2VudGFjaW9uZXNcIixcbiAgZm9sZGVyX1B1YmxpY2FjaW9uZXM6IFwiU3Vic2lzdGVtYXMvUHVibGljYWNpb25lcy9QaWV6YXNcIixcbiAgaW5kaWNlX1B1YmxpY2FjaW9uZXM6IFwiU3Vic2lzdGVtYXMvUHVibGljYWNpb25lcy9JbmRpY2UgUHVibGljYWNpb25lc1wiLFxuICBmb2xkZXJfUmVjZXRhczogXCJTdWJzaXN0ZW1hcy9SZWNldGFzL1JlY2V0YXNcIixcbiAgaW5kaWNlX1JlY2V0YXM6IFwiU3Vic2lzdGVtYXMvUmVjZXRhcy9JbmRpY2UgUmVjZXRhc1wiLFxuICBmb2xkZXJfUmVnaXN0cm9UaWVtcG86IFwiU3Vic2lzdGVtYXMvUmVnaXN0cm8gVGllbXBvL1JlZ2lzdHJvc1wiLFxuICBpbmRpY2VfUmVnaXN0cm9UaWVtcG86IFwiU3Vic2lzdGVtYXMvUmVnaXN0cm8gVGllbXBvL0luZGljZSBSZWdpc3RybyBUaWVtcG9cIixcbiAgZm9sZGVyX0NvbnRlbmlkb1BhcmFFc3R1ZGlvOiBcIlN1YnNpc3RlbWFzL0NvbnRlbmlkbyBwYXJhIEVzdHVkaW8vQ29udGVuaWRvXCIsXG4gIGluZGljZV9Db250ZW5pZG9QYXJhRXN0dWRpbzogXCJTdWJzaXN0ZW1hcy9Db250ZW5pZG8gcGFyYSBFc3R1ZGlvL0luZGljZSBDb250ZW5pZG8gcGFyYSBFc3R1ZGlvXCIsXG4gIGZvbGRlcl9DYW1wYVx1MDBGMWE6IFwiU3Vic2lzdGVtYXMvTWFya2V0aW5nL1Byb3llY3Rvc1wiLFxuICBpbmRpY2VfQ2FtcGFcdTAwRjFhOiBcIlN1YnNpc3RlbWFzL01hcmtldGluZy9JbmRpY2UgQ2FtcGFcdTAwRjFhc1wiLFxuICBmb2xkZXJfRW50cmVnYWJsZTogXCJTdWJzaXN0ZW1hcy9NYXJrZXRpbmcvRW50cmVnYWJsZXNcIixcbiAgaW5kaWNlX0VudHJlZ2FibGU6IFwiU3Vic2lzdGVtYXMvTWFya2V0aW5nL0luZGljZSBFbnRyZWdhYmxlc1wiLFxuXG4gIC8vIEVzdHJ1Y3R1cmFcbiAgZm9sZGVyX0FyZWFzVmlkYTogXCJFc3RydWN0dXJhL0FyZWFzIGRlIFZpZGFcIixcbiAgaW5kaWNlX0FyZWFzVmlkYTogXCJFc3RydWN0dXJhL0FyZWFzIGRlIFZpZGEvSW5kaWNlIEFyZWFzIGRlIFZpZGFcIixcbiAgZm9sZGVyX0FyZWFzSW50ZXJlczogXCJFc3RydWN0dXJhL0FyZWFzIGRlIEludGVyZXNcIixcbiAgaW5kaWNlX0FyZWFzSW50ZXJlczogXCJFc3RydWN0dXJhL0FyZWFzIGRlIEludGVyZXMvSW5kaWNlIEFyZWFzIGRlIEludGVyZXNcIixcbiAgZm9sZGVyX1RlbWFzSW50ZXJlczogXCJFc3RydWN0dXJhL1RlbWFzIGRlIEludGVyZXNcIixcbiAgaW5kaWNlX1RlbWFzSW50ZXJlczogXCJFc3RydWN0dXJhL1RlbWFzIGRlIEludGVyZXMvSW5kaWNlIFRlbWFzIGRlIEludGVyZXNcIixcbiAgZm9sZGVyX1JlY3Vyc29zUmVjdXJyZW50ZXM6IFwiRXN0cnVjdHVyYS9SZWN1cnNvcyBSZWN1cnJlbnRlcy9SZWN1cnNvc1wiLFxuICBpbmRpY2VfUmVjdXJzb3NSZWN1cnJlbnRlczogXCJFc3RydWN0dXJhL1JlY3Vyc29zIFJlY3VycmVudGVzL0luZGljZSBSZWN1cnNvcyBSZWN1cnJlbnRlc1wiLFxuICBmb2xkZXJfUHJveWVjdG9zUTogXCJFc3RydWN0dXJhL1Byb3llY3RvcyBkZSBRXCIsXG4gIGluZGljZV9Qcm95ZWN0b3NROiBcIkVzdHJ1Y3R1cmEvUHJveWVjdG9zIGRlIFEvSW5kaWNlIFByb3llY3RvcyBkZSBRXCIsXG5cblxuICBmaWxlX0luYm94OiBcIkVzdHJ1Y3R1cmEvR1REL0JhbmRlamEgZGUgRW50cmFkYS9CYW5kZWphIGRlIEVudHJhZGFcIixcbiAgZm9sZGVyX1Byb3llY3Rvc0dURDogXCJFc3RydWN0dXJhL0dURC9Qcm95ZWN0b3MgR1REL1Byb3llY3Rvc1wiLFxuICBpbmRpY2VfUHJveWVjdG9zR1REOiBcIkVzdHJ1Y3R1cmEvR1REL1Byb3llY3RvcyBHVEQvSW5kaWNlIFByb3llY3RvcyBHVERcIixcbiAgZm9sZGVyX1JTR1REOiBcIkVzdHJ1Y3R1cmEvR1REL1JldmlzaW9uIFNlbWFuYWwvUmV2aXNpb25lc1wiLFxuICBpbmRpY2VfUlNHVEQ6IFwiRXN0cnVjdHVyYS9HVEQvUmV2aXNpb24gU2VtYW5hbC9JbmRpY2UgUmV2aXNpb24gU2VtYW5hbFwiLFxuICBmb2xkZXJfU2lzdGVtYUdURDogXCJFc3RydWN0dXJhL0dURC9TaXN0ZW1hIEdURC9TaXN0ZW1hXCIsXG4gIGluZGljZV9TaXN0ZW1hR1REOiBcIkVzdHJ1Y3R1cmEvR1REL1Npc3RlbWEgR1REL0luZGljZSBTaXN0ZW1hIEdURFwiLFxuICBcblxuICAvLyBKb3VybmFsXG4gIGZvbGRlcl9EaWFyaW86IFwiRXN0cnVjdHVyYS9Kb3VybmFsL0RpYXJpby9Ob3Rhc1wiLFxuICBpbmRpY2VfRGlhcmlvOiBcIkVzdHJ1Y3R1cmEvSm91cm5hbC9EaWFyaW8vSW5kaWNlIERpYXJpb1wiLFxuICBmb2xkZXJfU2VtYW5hbDogXCJFc3RydWN0dXJhL0pvdXJuYWwvU2VtYW5hbC9Ob3Rhc1wiLFxuICBpbmRpY2VfU2VtYW5hbDogXCJFc3RydWN0dXJhL0pvdXJuYWwvU2VtYW5hbC9JbmRpY2UgU2VtYW5hbFwiLFxuICBmb2xkZXJfTWVuc3VhbDogXCJFc3RydWN0dXJhL0pvdXJuYWwvTWVuc3VhbC9Ob3Rhc1wiLFxuICBpbmRpY2VfTWVuc3VhbDogXCJFc3RydWN0dXJhL0pvdXJuYWwvTWVuc3VhbC9JbmRpY2UgTWVuc3VhbFwiLFxuICBmb2xkZXJfVHJpbWVzdHJhbDogXCJFc3RydWN0dXJhL0pvdXJuYWwvVHJpbWVzdHJhbC9Ob3Rhc1wiLFxuICBpbmRpY2VfVHJpbWVzdHJhbDogXCJFc3RydWN0dXJhL0pvdXJuYWwvVHJpbWVzdHJhbC9JbmRpY2UgVHJpbWVzdHJhbFwiLFxuICBmb2xkZXJfQW51YWw6IFwiRXN0cnVjdHVyYS9Kb3VybmFsL0FudWFsL05vdGFzXCIsXG4gIGluZGljZV9BbnVhbDogXCJFc3RydWN0dXJhL0pvdXJuYWwvQW51YWwvSW5kaWNlIEFudWFsXCIsXG5cbiAgLy8gQ09NUEFTU1xuICBmb2xkZXJfQ29tcGFzc0FudWFsOiBcIkVzdHJ1Y3R1cmEvQ29tcGFzcy9SZXBvcnRlcy9BbnVhbFwiLFxuICBpbmRpY2VfQ29tcGFzc0FudWFsOiBcIkVzdHJ1Y3R1cmEvQ29tcGFzcy9SZXBvcnRlcy9JbmRpY2UgQ29tcGFzcyBBbnVhbFwiLFxuICBmb2xkZXJfQ29tcGFzc1RyaW1lc3RyYWw6IFwiRXN0cnVjdHVyYS9Db21wYXNzL1JlcG9ydGVzL1RyaW1lc3RyYWxcIixcbiAgaW5kaWNlX0NvbXBhc3NUcmltZXN0cmFsOiBcIkVzdHJ1Y3R1cmEvQ29tcGFzcy9SZXBvcnRlcy9JbmRpY2UgQ29tcGFzcyB0cmltZXN0cmFsXCIsXG4gIGZvbGRlcl9PYmpDb21wYXNzQW51YWw6IFwiRXN0cnVjdHVyYS9Db21wYXNzL09iamV0aXZvcy9BbnVhbFwiLFxuICBpbmRpY2VfT2JqQ29tcGFzc0FudWFsOiBcIkVzdHJ1Y3R1cmEvQ29tcGFzcy9PYmpldGl2b3MvSW5kaWNlIENvbXBhc3MgQW51YWxcIixcbiAgZm9sZGVyX09iakNvbXBhc3NUcmltZXN0cmFsOiBcIkVzdHJ1Y3R1cmEvQ29tcGFzcy9PYmpldGl2b3MvVHJpbWVzdHJhbFwiLFxuICBpbmRpY2VfT2JqQ29tcGFzc1RyaW1lc3RyYWw6IFwiRXN0cnVjdHVyYS9Db21wYXNzL09iamV0aXZvcy9JbmRpY2UgQ29tcGFzcyB0cmltZXN0cmFsXCIsXG5cblxuICAgLy8gUmVnaXN0cm9zIFBlcnNvbmFsZXNcbiAgIGZvbGRlcl9BZ3JhZGVjaW1pZW50b3M6IFwiUmVnaXN0cm9zIFBlcnNvbmFsZXMvQWdyYWRlY2ltaWVudG9zL05vdGFzXCIsXG4gICBpbmRpY2VfQWdyYWRlY2ltaWVudG9zOiBcIlJlZ2lzdHJvcyBQZXJzb25hbGVzL0FncmFkZWNpbWllbnRvcy9JbmRpY2UgQWdyYWRlY2ltaWVudG9zXCIsXG4gICBmb2xkZXJfUmVmbGV4aW9uZXM6IFwiUmVnaXN0cm9zIFBlcnNvbmFsZXMvUmVmbGV4aW9uZXMvTm90YXNcIixcbiAgIGluZGljZV9SZWZsZXhpb25lczogXCJSZWdpc3Ryb3MgUGVyc29uYWxlcy9SZWZsZXhpb25lcy9JbmRpY2UgUmVmbGV4aW9uZXNcIixcbiAgIGZvbGRlcl9SZWdpc3Ryb3NBa2FzaGlrb3M6IFwiUmVnaXN0cm9zIFBlcnNvbmFsZXMvUmVnaXN0cm9zIEFrYXNoaWtvcy9Ob3Rhc1wiLFxuICAgaW5kaWNlX1JlZ2lzdHJvc0FrYXNoaWtvczogXCJSZWdpc3Ryb3MgUGVyc29uYWxlcy9SZWdpc3Ryb3MgQWthc2hpa29zL0luZGljZSBSZWdpc3Ryb3MgQWthc2hpa29zXCIsXG4gICBcbn07XG5cbiIsICIvKlxuICogRmlsZW5hbWU6IC9zcmMvbW9kdWxlcy9ub3RlTGlmZWN5Y2xlTWFuYWdlci9BUEkvc3RhcnRlckFQSS50c1xuICogUGF0aDogL3NyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL0FQSVxuICogQ3JlYXRlZCBEYXRlOiAyMDI1LTAyLTIzIDE1OjU3OjQwXG4gKiBBdXRob3I6IEFuZHJcdTAwRTlzIEp1bGlcdTAwRTFuIEJvcmJcdTAwRjNuXG4gKiAtLS0tLVxuICogTGFzdCBNb2RpZmllZDogMjAyNS0wMi0yNCAwMToxODozOFxuICogTW9kaWZpZWQgQnk6IEFuZHJcdTAwRTlzIEp1bGlcdTAwRTFuIEJvcmJcdTAwRjNuXG4gKiAtLS0tLVxuICogQ29weXJpZ2h0IChjKSAyMDI1IC0gQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqL1xuXG4vKiBzcmMvbW9kdWxlcy9ub3RlTGlmZWN5Y2xlTWFuYWdlci9BUEkvc3RhcnRlckFQSS50cyAqL1xuaW1wb3J0IHsgVEZpbGUsIE5vdGljZSwgVEZvbGRlciB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7RGF0ZVRpbWUgLCBEdXJhdGlvbn0gZnJvbSAnbHV4b24nO1xuLy8gSW50ZXJmYWNlc1xuaW1wb3J0IHsgTm90ZUZpZWxkSGFuZGxlciB9IGZyb20gJy4uL0ludGVyZmFjZXMvTm90ZUZpZWxkSGFuZGxlcic7XG4vLyBGaWxlSGFuZGxlcnNcbmltcG9ydCB7IEFncmFkZWNpbWllbnRvc0ZpZWxkSGFuZGxlciB9IGZyb20gJy4uL2ZpZWxkSGFuZGxlcnMvRkggU3Vic2lzdGVtYXMvQWdyYWRlY2ltaWVudG9zRmllbGRIYW5kbGVyJztcbmltcG9ydCB7IFJlZmxleGlvbmVzRmllbGRIYW5kbGVyIH0gZnJvbSAnLi4vZmllbGRIYW5kbGVycy9GSCBTdWJzaXN0ZW1hcy9SZWZsZXhpb25lc0ZpZWxkSGFuZGxlcnMnO1xuaW1wb3J0IHsgQ29udGVuaWRvUGFyYUVzdHVkaW9GaWVsZEhhbmRsZXIgfSBmcm9tICcuLi9maWVsZEhhbmRsZXJzL0ZIIFN1YnNpc3RlbWFzL0NQRUZpZWxkSGFuZGxlcic7XG5pbXBvcnQgeyBSZWN1cnNvc1JlY3VycmVudGVzRmllbGRIYW5kbGVyIH0gZnJvbSAnLi4vZmllbGRIYW5kbGVycy9SUkZpZWxkSGFuZGxlcic7XG5pbXBvcnQgeyBQR1RERmllbGRIYW5kbGVyIH0gZnJvbSAnLi4vZmllbGRIYW5kbGVycy9GSCBFc3RydWN0dXJhL1BHVERGaWVsZEhhbmRsZXInO1xuaW1wb3J0IHsgUFFGaWVsZEhhbmRsZXIgfSBmcm9tICcuLi9maWVsZEhhbmRsZXJzL0ZIIEVzdHJ1Y3R1cmEvUFFGaWVsZEhhbmRsZXInO1xuaW1wb3J0IHsgQW5vdGFjaW9uZXNGaWVsZEhhbmRsZXIgfSBmcm9tICcuLi9maWVsZEhhbmRsZXJzL0ZIIFN1YnNpc3RlbWFzL0Fub3RhY2lvbmVzRmllbGRIYW5kbGVyJztcbmltcG9ydCB7IFRyYW5zYWNjaW9uZXNGaWVsZEhhbmRsZXIgfSBmcm9tICcuLi9maWVsZEhhbmRsZXJzL0ZIIFN1YnNpc3RlbWFzL1RyYW5zYWNjaW9uZXNGaWVsZEhhbmRsZXInO1xuaW1wb3J0IHsgQXJlYXNJbnRlcmVzRmllbGRIYW5kbGVyIH0gZnJvbSAnLi4vZmllbGRIYW5kbGVycy9GSCBFc3RydWN0dXJhL0FyZWFzSW50ZXJlc0ZpZWxkSGFuZGxlcic7XG5pbXBvcnQgeyBBcmVhVmlkYUZpZWxkSGFuZGxlciB9IGZyb20gJy4uL2ZpZWxkSGFuZGxlcnMvRkggRXN0cnVjdHVyYS9BcmVhVmlkYUZpZWxkSGFuZGxlcic7XG5pbXBvcnQgeyBub2RvQXJlYVZpZGFGaWVsZEhhbmRsZXIgfSBmcm9tICcuLi9maWVsZEhhbmRsZXJzL0ZIIEVzdHJ1Y3R1cmEvbm9kb0FyZWFWaWRhRmllbGRIYW5kbGVyJztcbmltcG9ydCB7IE9iakNvbXBhc3NBbnVhbEZpZWxkSGFuZGxlcn0gZnJvbSAnLi4vZmllbGRIYW5kbGVycy9PYmpDb21wYXNzQW51YWxGaWVsZEhhbmRsZXInO1xuaW1wb3J0IHsgQ29tcGFzc1BsYW5lYWNpb25BbnVhbF9GSCB9IGZyb20gJy4uL2ZpZWxkSGFuZGxlcnMvQ29tcGFzc1BsYW5lYWNpb25BbnVhbF9GSCc7XG5pbXBvcnQgeyBSZXBvc2l0b3Jpb0xpYnJvc19GSCB9IGZyb20gJy4uL2ZpZWxkSGFuZGxlcnMvRkggU3Vic2lzdGVtYXMvUmVwb3NpdG9yaW9MaWJyb3NfRkgnO1xuaW1wb3J0IHsgQmlibGlvdGVjYV9GSCB9IGZyb20gJy4uL2ZpZWxkSGFuZGxlcnMvRkggU3Vic2lzdGVtYXMvQmlibGlvdGVjYV9GSCc7XG5pbXBvcnQgeyBBbnVhbF9GSCB9IGZyb20gJy4uL2ZpZWxkSGFuZGxlcnMvRkggSm91cm5hbHMvQW51YWxfRkgnO1xuaW1wb3J0IHsgVHJpbWVzdHJhbEZpZWxkSGFuZGxlciB9IGZyb20gJy4uL2ZpZWxkSGFuZGxlcnMvRkggSm91cm5hbHMvVHJpbWVzdHJhbEZpZWxkSGFuZGxlcic7XG5pbXBvcnQgeyBDYW1wYVx1MDBGMWFzRmllbGRIYW5kbGVyIH0gZnJvbSAnLi4vZmllbGRIYW5kbGVycy9GSCBTdWJzaXN0ZW1hcy9DYW1wYVx1MDBGMWFzRmllbGRIYW5kbGVyJztcbmltcG9ydCB7IEVudHJlZ2FibGVGaWVsZEhhbmRsZXIgfSBmcm9tICcuLi9maWVsZEhhbmRsZXJzL0ZIIFN1YnNpc3RlbWFzL0VudHJlZ2FibGVGaWVsZEhhbmRsZXInO1xuLy8gb2JzaWRpYW5cblxuZXhwb3J0IGNsYXNzIHN0YXJ0ZXJBUEkge1xuICAgIC8vcHJpdmF0ZSB1dGlsc0FwaTogdXRpbHNBUEk7XG4gICAgcHJpdmF0ZSBwbHVnaW46IFBsdWdpbjtcbiAgICBwcml2YXRlIGluZm9TdWJzaXN0ZW1hOiBvYmplY3Q7IC8vIEFzdW1pZW5kbyBxdWUgZXMgdW4gc3RyaW5nXG4gICAgcHJpdmF0ZSB0cDogb2JqZWN0O1xuICAgIHByaXZhdGUgbm90YTogb2JqZWN0O1xuICAgIHByaXZhdGUgcGF0aENhbXBvczogc3RyaW5nOyBcblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgICAgICAvLyBJbmljaWFsaXphIGZvbGRlciBlIGluZGljZSBnZXRjb24gdmFsb3JlcyBwcmVkZXRlcm1pbmFkb3MgbyBsXHUwMEYzZ2ljYSBlc3BlY1x1MDBFRGZpY2EuXG4gICAgICAgIHRoaXMuaW5mb1N1YnNpc3RlbWEgPSB7fTtcbiAgICAgICAgdGhpcy50cCA9IHRoaXMuZ2V0VHAoKTtcbiAgICAgICAgdGhpcy5wYXRoQ2FtcG9zID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuZmlsZV9jYW1wb3NDZW50cmFsICsgXCIubWRcIjtcbiAgICB9XG4gICAgXG4gICBcblxuXG4gICAgYXN5bmMgZmlsbE5vdGUoaW5mb1N1YnNpc3RlbWE6IHsgZm9sZGVyOiBzdHJpbmc7IGluZGljZTogc3RyaW5nOyB0eXBlOiBzdHJpbmc7IH0sIGNhbXBvczogYW55KSB7XG4gICAgICAgIHRoaXMubm90YSA9IHt9O1xuICAgICAgICBsZXQgbm90YTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmluZm9TdWJzaXN0ZW1hLCBpbmZvU3Vic2lzdGVtYSk7XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5pbmZvU3Vic2lzdGVtYS5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5pbmZvU3Vic2lzdGVtYS5mb2xkZXIgPSB0aGlzLnBsdWdpbi5zZXR0aW5nc1tpbmZvU3Vic2lzdGVtYS5mb2xkZXJdO1xuICAgICAgICAgIHRoaXMuaW5mb1N1YnNpc3RlbWEuaW5kaWNlID0gdGhpcy5wbHVnaW4uc2V0dGluZ3NbaW5mb1N1YnNpc3RlbWEuaW5kaWNlXTtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMubm90YSwgaW5mb1N1YnNpc3RlbWEpO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGxldCBmaWVsZEhhbmRsZXI6IE5vdGVGaWVsZEhhbmRsZXI7XG4gICAgICAgIHN3aXRjaCAodGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlKSB7XG4gICAgICAgICAgY2FzZSBcIkFnclwiOlxuICAgICAgICAgICAgZmllbGRIYW5kbGVyID0gbmV3IEFncmFkZWNpbWllbnRvc0ZpZWxkSGFuZGxlcih0aGlzLnRwLCB0aGlzLmluZm9TdWJzaXN0ZW1hLCB0aGlzLnBsdWdpbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiUEdURFwiOlxuICAgICAgICAgICAgZmllbGRIYW5kbGVyID0gbmV3IFBHVERGaWVsZEhhbmRsZXIodGhpcy50cCwgdGhpcy5pbmZvU3Vic2lzdGVtYSwgdGhpcy5wbHVnaW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIlBRXCI6XG4gICAgICAgICAgICBmaWVsZEhhbmRsZXIgPSBuZXcgUFFGaWVsZEhhbmRsZXIodGhpcy50cCwgdGhpcy5pbmZvU3Vic2lzdGVtYSwgdGhpcy5wbHVnaW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIkF4XCI6XG4gICAgICAgICAgICBmaWVsZEhhbmRsZXIgPSBuZXcgQW5vdGFjaW9uZXNGaWVsZEhhbmRsZXIodGhpcy50cCwgdGhpcy5pbmZvU3Vic2lzdGVtYSwgdGhpcy5wbHVnaW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIkNQRVwiOlxuICAgICAgICAgICAgZmllbGRIYW5kbGVyID0gbmV3IENvbnRlbmlkb1BhcmFFc3R1ZGlvRmllbGRIYW5kbGVyKHRoaXMudHAsIHRoaXMuaW5mb1N1YnNpc3RlbWEsIHRoaXMucGx1Z2luKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJSUlwiOlxuICAgICAgICAgICAgZmllbGRIYW5kbGVyID0gbmV3IFJlY3Vyc29zUmVjdXJyZW50ZXNGaWVsZEhhbmRsZXIodGhpcy50cCwgdGhpcy5pbmZvU3Vic2lzdGVtYSwgdGhpcy5wbHVnaW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIlR4XCI6XG4gICAgICAgICAgICBmaWVsZEhhbmRsZXIgPSBuZXcgVHJhbnNhY2Npb25lc0ZpZWxkSGFuZGxlcih0aGlzLnRwLCB0aGlzLmluZm9TdWJzaXN0ZW1hLCB0aGlzLnBsdWdpbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiQUlcIjpcbiAgICAgICAgICAgIGZpZWxkSGFuZGxlciA9IG5ldyBBcmVhc0ludGVyZXNGaWVsZEhhbmRsZXIodGhpcy50cCwgdGhpcy5pbmZvU3Vic2lzdGVtYSwgdGhpcy5wbHVnaW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIkFWXCI6XG4gICAgICAgICAgICBmaWVsZEhhbmRsZXIgPSBuZXcgQXJlYVZpZGFGaWVsZEhhbmRsZXIodGhpcy50cCwgdGhpcy5pbmZvU3Vic2lzdGVtYSwgdGhpcy5wbHVnaW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIm5BVlwiOlxuICAgICAgICAgICAgZmllbGRIYW5kbGVyID0gbmV3IG5vZG9BcmVhVmlkYUZpZWxkSGFuZGxlcih0aGlzLnRwLCB0aGlzLmluZm9TdWJzaXN0ZW1hLCB0aGlzLnBsdWdpbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiT0NBXCI6XG4gICAgICAgICAgICBmaWVsZEhhbmRsZXIgPSBuZXcgT2JqQ29tcGFzc0FudWFsRmllbGRIYW5kbGVyKHRoaXMudHAsIHRoaXMuaW5mb1N1YnNpc3RlbWEsIHRoaXMucGx1Z2luKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJDQUlcIjpcbiAgICAgICAgICAgIGZpZWxkSGFuZGxlciA9IG5ldyBDb21wYXNzUGxhbmVhY2lvbkFudWFsX0ZIKHRoaXMudHAsIHRoaXMuaW5mb1N1YnNpc3RlbWEsIHRoaXMucGx1Z2luKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJSTFwiOlxuICAgICAgICAgICAgZmllbGRIYW5kbGVyID0gbmV3IFJlcG9zaXRvcmlvTGlicm9zX0ZIKHRoaXMudHAsIHRoaXMuaW5mb1N1YnNpc3RlbWEsIHRoaXMucGx1Z2luKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJMQlwiOlxuICAgICAgICAgICAgICBmaWVsZEhhbmRsZXIgPSBuZXcgQmlibGlvdGVjYV9GSCh0aGlzLnRwLCB0aGlzLmluZm9TdWJzaXN0ZW1hLCB0aGlzLnBsdWdpbik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJSeFwiOlxuICAgICAgICAgICAgZmllbGRIYW5kbGVyID0gbmV3IFJlZmxleGlvbmVzRmllbGRIYW5kbGVyKHRoaXMudHAsIHRoaXMuaW5mb1N1YnNpc3RlbWEsIHRoaXMucGx1Z2luKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJDcFwiOlxuICAgICAgICAgICAgZmllbGRIYW5kbGVyID0gbmV3IENhbXBhXHUwMEYxYXNGaWVsZEhhbmRsZXIodGhpcy50cCwgdGhpcy5pbmZvU3Vic2lzdGVtYSwgdGhpcy5wbHVnaW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIkVNa3RcIjpcbiAgICAgICAgICAgIGZpZWxkSGFuZGxlciA9IG5ldyBFbnRyZWdhYmxlRmllbGRIYW5kbGVyKHRoaXMudHAsIHRoaXMuaW5mb1N1YnNpc3RlbWEsIHRoaXMucGx1Z2luKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJUUVwiOlxuICAgICAgICAgICAgZmllbGRIYW5kbGVyID0gbmV3IFRyaW1lc3RyYWxGaWVsZEhhbmRsZXIodGhpcy50cCwgdGhpcy5pbmZvU3Vic2lzdGVtYSwgdGhpcy5wbHVnaW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIkFZXCI6XG4gICAgICAgICAgICBmaWVsZEhhbmRsZXIgPSBuZXcgQW51YWxfRkgodGhpcy50cCwgdGhpcy5pbmZvU3Vic2lzdGVtYSwgdGhpcy5wbHVnaW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gc2UgaGEgZGVmaW5pZG8gdW4gbWFuZWphZG9yIGRlIGNhbXBvcyBwYXJhIGVsIHRpcG8gJHt0aGlzLmluZm9TdWJzaXN0ZW1hLnR5cGV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yIChsZXQgY2FtcG8gb2YgY2FtcG9zKSB7XG4gICAgICAgICAgICBjb25zdCBmdW5jdGlvbk5hbWUgPSBgZ2V0JHtjYW1wby5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGNhbXBvLnNsaWNlKDEpfWA7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGZpZWxkSGFuZGxlcltmdW5jdGlvbk5hbWVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgLy9kZWJ1Z2dlcjtcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGFbY2FtcG9dID0gYXdhaXQgZmllbGRIYW5kbGVyW2Z1bmN0aW9uTmFtZV0oKTtcbiAgICAgICAgICAgICAgICBub3RhID0gYXdhaXQgZmllbGRIYW5kbGVyLmdldE5vdGEoKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBub3RhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGtleSBpbiB0aGlzLm5vdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhW2tleV0gPSBub3RhW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYExhIGZ1bmNpXHUwMEYzbiAke2Z1bmN0aW9uTmFtZX0gbm8gZXN0XHUwMEUxIGRlZmluaWRhLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTm8gc2UgcHVkbyBjcmVhciBlbCBvYmpldG8gZGUgcmVnaXN0cm8uXCIsIGVycm9yKTtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJObyBzZSBwdWRvIGNyZWFyIGVsIG9iamV0byBkZSByZWdpc3Ryby5cIik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5ub3RhO1xuICAgIH1cbiAgICBcblxuICAgIGdldFRwKCl7XG4gICAgICAgIFxuICAgICAgICBpZiAoIXRoaXMucGx1Z2luIHx8ICF0aGlzLnBsdWdpbi5hcHAucGx1Z2lucy5lbmFibGVkUGx1Z2lucy5oYXMoJ3RlbXBsYXRlci1vYnNpZGlhbicpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFbCBwbHVnaW4gVGVtcGxhdGVyIG5vIGVzdFx1MDBFMSBoYWJpbGl0YWRvLicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vICBGb3JtYSBkZSBhY2NlZGVyIGFsIG9iamV0byB0cCBub3JtYWwgcXVlIGhlIHVzYWRvIGRlc2RlIERWSlMgY3VhbmRvIGN1cnJlbnQgRnVuY3Rpb25zIGVzdGEgY2FyZ2Fkby5cbiAgICAgICAgLy9jb25zdCB0ZW1wbGF0ZXJQbHVnaW4gPSB0aGlzLmFwcC5wbHVnaW5zLnBsdWdpbnNbJ3RlbXBsYXRlci1vYnNpZGlhbiddO1xuICAgICAgICAvL2NvbnN0IHRwID0gdGVtcGxhdGVyUGx1Z2luLnRlbXBsYXRlci5jdXJyZW50X2Z1bmN0aW9uc19vYmplY3Q7XG4gICAgICAgIC8vIC0+IHZlcnNpb24gcXVlIGZhbGxhIHNpIG5vIGVzdGEgYXJyaWJhIGVsIHBsdWdpbiBwb3JxdWUgaGFjZSBnZXQgZGVsIHBsdWdpbiBkaXJlY3RvLiBjb25zdCB0ZW1wbGF0ZXJQbHVnaW4gPSB0aGlzLmFwcC5wbHVnaW5zLmdldFBsdWdpbigndGVtcGxhdGVyLW9ic2lkaWFuJyk7XG4gICAgICAgIFxuICAgICAgICBsZXQgdHBHZW4gPSB0aGlzLnBsdWdpbi5hcHAucGx1Z2lucy5wbHVnaW5zW1widGVtcGxhdGVyLW9ic2lkaWFuXCJdLnRlbXBsYXRlcjtcbiAgICAgICAgdHBHZW4gPSB0cEdlbi5mdW5jdGlvbnNfZ2VuZXJhdG9yLmludGVybmFsX2Z1bmN0aW9ucy5tb2R1bGVzX2FycmF5O1xuICAgICAgICBsZXQgdHAgPSB7fVxuICAgICAgICAvLyBnZXQgYW4gaW5zdGFuY2Ugb2YgbW9kdWxlc1xuICAgICAgICB0cC5maWxlID0gdHBHZW4uZmluZChtID0+IG0ubmFtZSA9PSBcImZpbGVcIik7XG4gICAgICAgIHRwLnN5c3RlbSA9IHRwR2VuLmZpbmQobSA9PiBtLm5hbWUgPT0gXCJzeXN0ZW1cIik7XG5cbiAgICAgICAgaWYgKCF0cC5zeXN0ZW0pIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk5vIHNlIHB1ZG8gYWNjZWRlciBhbCBvYmpldG8gZGUgZnVuY2lvbmVzIGFjdHVhbGVzIGRlIFRlbXBsYXRlci5cIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc29sZS5sb2coJ3RwIGVuIFlBTUxVcGRhdGVyQVBJIHNlIGhhIGNhcmdhZG8gc2F0aXNmYWN0b3JpYW1lbnRlJyk7XG4gICAgcmV0dXJuIHRwO1xuICAgIH1cblxuXG4gICAgIC8vIENyZWFyIE5vdGEgZGVzZGUgdGVtcGxhdGVcbiAgICAgYXN5bmMgY3JlYXRlTm90ZShzdWJzaXN0ZW1hOiBzdHJpbmcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlUGF0aCA9IGBQbGFudGlsbGFzLyR7dGhpcy5wbHVnaW4uc2V0dGluZ3NbYGZvbGRlcl8ke3N1YnNpc3RlbWF9YF19L1BsdCAtICR7c3Vic2lzdGVtYX0ubWRgO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgIC8vIEludGVudGFyIG9idGVuZXIgZWwgYXJjaGl2byBwb3IgcGF0aFxuICAgICAgICAgICAgY29uc3QgdGVtcGxhdGVGaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aCh0ZW1wbGF0ZVBhdGgpO1xuXG4gICAgICAgICAgICAvLyBWZXJpZmljYXIgc2kgZWwgYXJjaGl2byBlcyB1biBURmlsZVxuICAgICAgICAgICAgaWYgKCEodGVtcGxhdGVGaWxlIGluc3RhbmNlb2YgVEZpbGUpKSB7XG4gICAgICAgICAgICAgICAgLy8gU2kgbm8gZXMgdW4gVEZpbGUsIG1hbmVqYXIgZWwgZXJyb3JcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVsIHRlbXBsYXRlIHBhcmEgXCIke3N1YnNpc3RlbWF9XCIgbm8gc2UgZW5jb250clx1MDBGMyBvIG5vIGVzIHVuIGFyY2hpdm8gdlx1MDBFMWxpZG8uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBkdENvbnNlcSA9IERhdGVUaW1lLm5vdygpLnRvRm9ybWF0KCd5eXl5LU1NLWRkIEhIbW1zcycpO1xuICAgICAgICAgICAgY29uc3QgZmlsZW5hbWUgPSBgJHtzdWJzaXN0ZW1hfSAke2R0Q29uc2VxfWA7XG4gICAgICAgICAgICBjb25zdCBmb2xkZXIgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKFwiSW5ib3hcIik7XG4gICAgICAgICAgICBpZiAoIWZvbGRlcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTGEgY2FycGV0YSBcIkluYm94XCIgbm8gc2UgZW5jb250clx1MDBGMy5gKTtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGNvbnN0IHRwID0gdGhpcy5nZXRUcCgpO1xuICAgICAgICAgICAgbGV0IGNyZWFyTm90YSA9IHRwLmZpbGUuc3RhdGljX2Z1bmN0aW9ucy5nZXQoXCJjcmVhdGVfbmV3XCIpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjcmVhck5vdGEgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxhIGZ1bmNpXHUwMEYzbiBwYXJhIGNyZWFyIG5vdGFzIG5vIGVzdFx1MDBFMSBkaXNwb25pYmxlLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IGNyZWFyTm90YSh0ZW1wbGF0ZUZpbGUsIGZpbGVuYW1lLCB0cnVlLCBmb2xkZXIpLmJhc2VuYW1lO1xuICAgICAgICAgICAgXG4gICAgICAgXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIC8vIEFxdVx1MDBFRCBwdWVkZXMgbWFuZWphciBlbCBlcnJvciwgcG9yIGVqZW1wbG8sIG1vc3RyYW5kbyB1biBtZW5zYWplIGFsIHVzdWFyaW9cbiAgICAgICAgICAgIC8vIFB1ZWRlcyByZWVtcGxhemFyIGVzdGUgbWVuc2FqZSBkZSBlcnJvciBwb3IgY3VhbHF1aWVyIGFjY2lcdTAwRjNuIHF1ZSBjb25zaWRlcmVzIGFkZWN1YWRhXG4gICAgICAgICAgICBhbGVydChgRXJyb3IgYWwgY3JlYXIgbGEgbm90YTogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuXG4gICAgYXN5bmMgZ2V0T3Ryb3NBc3VudG9zKHN1YnNpc3RlbWFzKSB7XG4gICAgICAgIGxldCBzdWdnZXN0ZXIgPSB0aGlzLnRwLnN5c3RlbS5zdGF0aWNfZnVuY3Rpb25zLmdldChcInN1Z2dlc3RlclwiKTtcbiAgICAgICAgbGV0IGNhbXBvID0gW107XG4gICAgXG4gICAgICAgIGZvciAobGV0IHN1YnNpc3RlbWEgb2Ygc3Vic2lzdGVtYXMpIHtcbiAgICAgICAgICAgIC8vIFByZWd1bnRhIGluaWNpYWwgcGFyYSBpbmNsdWlyIGFsZ1x1MDBGQW4gc3Vic2lzdGVtYSBjb21vIG9yaWdlblxuICAgICAgICAgICAgbGV0IGluY2x1eWUgPSBhd2FpdCBzdWdnZXN0ZXIoW1wiU2lcIiwgXCJOb1wiXSwgW3RydWUsIGZhbHNlXSwgdHJ1ZSwgYERlc2VhIGFncmVnYXIgYWxndW4gJHtzdWJzaXN0ZW1hfSBhY3Rpdm8gY29tbyBvcmlnZW4/YCk7XG4gICAgICAgICAgICBpZiAoIWluY2x1eWUpIGNvbnRpbnVlOyAvLyBTaSBsYSByZXNwdWVzdGEgZXMgJ05vJywgY29udGluXHUwMEZBYSBjb24gZWwgc2lndWllbnRlIHN1YnNpc3RlbWFcbiAgICAgICAgICAgIGRlYnVnZ2VyXG4gICAgICAgICAgICBsZXQgcmVjdXJzb3NBY3Rpdm9zID0gYXdhaXQgdGhpcy5hY3RpdmVTdHJ1Y3R1cmVSZXNvdXJjZXMoc3Vic2lzdGVtYSk7XG4gICAgICAgICAgICBsZXQgcHJpbWVyQWxpYXMgPSByZWN1cnNvc0FjdGl2b3MubWFwKGZpbGUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpPy5mcm9udG1hdHRlcjtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWV0YWRhdGEgJiYgbWV0YWRhdGEuYWxpYXNlcyAmJiBtZXRhZGF0YS5hbGlhc2VzLmxlbmd0aCA+IDAgPyBtZXRhZGF0YS5hbGlhc2VzWzBdIDogbnVsbDtcbiAgICAgICAgICAgIH0pLmZpbHRlcihhbGlhcyA9PiBhbGlhcyAhPT0gbnVsbCk7XG4gICAgXG4gICAgICAgICAgICB3aGlsZSAocmVjdXJzb3NBY3Rpdm9zLmxlbmd0aCA+IDApIHsgLy8gQ29udGluXHUwMEZBYSBtaWVudHJhcyBoYXlhIHJlY3Vyc29zIGFjdGl2b3MgcGFyYSBlbGVnaXJcbiAgICAgICAgICAgICAgICBsZXQgaW5kaWNlU2VsZWNjaW9uYWRvXG4gICAgICAgICAgICAgICAgaWYgKHN1YnNpc3RlbWEgPT09IFwiQXJlYXNWaWRhXCIgfHwgc3Vic2lzdGVtYSA9PT0gXCJBcmVhc0ludGVyZXNcIil7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzZWxlY2Npb24gPSBhd2FpdCBzdWdnZXN0ZXIocHJpbWVyQWxpYXMsIHJlY3Vyc29zQWN0aXZvcy5tYXAoYiA9PiBiLnBhdGgpLCBmYWxzZSwgYCR7c3Vic2lzdGVtYX0gYWN0aXZvczpgKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxlY2Npb24pIGJyZWFrOyAvLyBTaSBubyBoYXkgc2VsZWNjaVx1MDBGM24sIHNhbGUgZGVsIGNpY2xvXG4gICAgICAgICAgICAgICAgICAgIC8vIEVuY3VlbnRyYSB5IGVsaW1pbmEgbGEgc2VsZWNjaVx1MDBGM24gZGUgbG9zIGFycmVnbG9zIHBhcmEgbm8gdm9sdmVyIGEgbW9zdHJhcmxhXG4gICAgICAgICAgICAgICAgICAgIC8vIEVuY3VlbnRyYSBlbCBcdTAwRURuZGljZSBkZWwgYXJjaGl2byBzZWxlY2Npb25hZG8gZW4gcmVjdXJzb3NBY3Rpdm9zIGJhc1x1MDBFMW5kb25vcyBlbiBlbCBiYXNlbmFtZVxuICAgICAgICAgICAgICAgICAgICBpbmRpY2VTZWxlY2Npb25hZG8gPSByZWN1cnNvc0FjdGl2b3MuZmluZEluZGV4KGIgPT4gYi5wYXRoID09PSBzZWxlY2Npb24pO1xuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGxldCBzZWxlY2Npb24gPSBhd2FpdCBzdWdnZXN0ZXIocHJpbWVyQWxpYXMsIHJlY3Vyc29zQWN0aXZvcy5tYXAoYiA9PiBiLmJhc2VuYW1lKSwgZmFsc2UsIGAke3N1YnNpc3RlbWF9IGFjdGl2b3M6YCk7XG4gICAgICAgICAgICAgICAgaWYgKCFzZWxlY2Npb24pIGJyZWFrOyAvLyBTaSBubyBoYXkgc2VsZWNjaVx1MDBGM24sIHNhbGUgZGVsIGNpY2xvXG4gICAgICAgICAgICAgICAgLy8gRW5jdWVudHJhIHkgZWxpbWluYSBsYSBzZWxlY2NpXHUwMEYzbiBkZSBsb3MgYXJyZWdsb3MgcGFyYSBubyB2b2x2ZXIgYSBtb3N0cmFybGFcbiAgICAgICAgICAgICAgICAvLyBFbmN1ZW50cmEgZWwgXHUwMEVEbmRpY2UgZGVsIGFyY2hpdm8gc2VsZWNjaW9uYWRvIGVuIHJlY3Vyc29zQWN0aXZvcyBiYXNcdTAwRTFuZG9ub3MgZW4gZWwgYmFzZW5hbWVcbiAgICAgICAgICAgICAgICBpbmRpY2VTZWxlY2Npb25hZG8gPSByZWN1cnNvc0FjdGl2b3MuZmluZEluZGV4KGIgPT4gYi5iYXNlbmFtZSA9PT0gc2VsZWNjaW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGluZGljZVNlbGVjY2lvbmFkbyAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnNpc3RlbWEgPT09IFwiQXJlYXNWaWRhXCIgfHwgc3Vic2lzdGVtYSA9PT0gXCJBcmVhc0ludGVyZXNcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FtcG8ucHVzaChyZWN1cnNvc0FjdGl2b3NbaW5kaWNlU2VsZWNjaW9uYWRvXS5wYXRoKTsgLy8gQWdyZWdhIGVsIGJhc2VuYW1lIGRlbCBhcmNoaXZvIHNlbGVjY2lvbmFkbyBhbCBjYW1wbyAgICBcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGNhbXBvLnB1c2gocmVjdXJzb3NBY3Rpdm9zW2luZGljZVNlbGVjY2lvbmFkb10uYmFzZW5hbWUpOyAvLyBBZ3JlZ2EgZWwgYmFzZW5hbWUgZGVsIGFyY2hpdm8gc2VsZWNjaW9uYWRvIGFsIGNhbXBvXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gRWxpbWluYSBlbCBlbGVtZW50byBzZWxlY2Npb25hZG8gZGUgYW1ib3MgYXJyZWdsb3MgcGFyYSBubyB2b2x2ZXIgYSBtb3N0cmFybG9cbiAgICAgICAgICAgICAgICAgICAgcmVjdXJzb3NBY3Rpdm9zLnNwbGljZShpbmRpY2VTZWxlY2Npb25hZG8sIDEpO1xuICAgICAgICAgICAgICAgICAgICBwcmltZXJBbGlhcy5zcGxpY2UoaW5kaWNlU2VsZWNjaW9uYWRvLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gU2kgbm8gcXVlZGFuIG1cdTAwRTFzIHJlY3Vyc29zIGFjdGl2b3MsIG5vIHByZWd1bnRhIHNpIGRlc2VhIGFncmVnYXIgb3Ryb1xuICAgICAgICAgICAgICAgIGlmIChyZWN1cnNvc0FjdGl2b3MubGVuZ3RoID09PSAwKSBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBQcmVndW50YSBzaSBkZXNlYSBhZ3JlZ2FyIG90cm8gcmVnaXN0cm8gZGVsIG1pc21vIHN1YnNpc3RlbWFcbiAgICAgICAgICAgICAgICBsZXQgZGVzZWFBZ3JlZ2FyT3RybyA9IGF3YWl0IHN1Z2dlc3RlcihbXCJTaVwiLCBcIk5vXCJdLCBbdHJ1ZSwgZmFsc2VdLCB0cnVlLCBgRGVzZWEgYWdyZWdhciBvdHJvICR7c3Vic2lzdGVtYX0gY29tbyBvcmlnZW4/YCk7XG4gICAgICAgICAgICAgICAgZGVidWdnZXJcbiAgICAgICAgICAgICAgICBpZiAoIWRlc2VhQWdyZWdhck90cm8pIGJyZWFrOyAvLyBTaSBsYSByZXNwdWVzdGEgZXMgJ05vJywgc2FsZSBkZWwgY2ljbG9cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4gY2FtcG87IC8vIFJldG9ybmEgZWwgYXJyZWdsbyBjYW1wbyBjb24gdG9kYXMgbGFzIHNlbGVjY2lvbmVzIHJlYWxpemFkYXNcbiAgICB9XG4gICAgXG4gICAgXG4gICAgLy8gRlVOQ0lPTiBRVUUgVFJBRSBUT0RBUyBMQVMgTk9UQVMgQUNUSVZBUyBERSBMT1MgU0lTVEVNQVMuIC0gUmV2aXNhciBlbiBxdWUgbGEgdXNvLi4uXG4gICAgYXN5bmMgYWN0aXZlU3RydWN0dXJlUmVzb3VyY2VzKHR5cGVOYW1lKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBPYnRcdTAwRTluIHRvZG9zIGxvcyBhcmNoaXZvcyBNYXJrZG93blxuICAgICAgICAgICAgY29uc3QgZmlsZXMgPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpe1xuXG4gICAgICAgICAgICAgICAgY2FzZSBcIkFyZWFzSW50ZXJlc1wiOlxuICAgICAgICAgICAgICAgICAgICBkZWJ1Z2dlcjtcblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFxuICAgICAgICAgICAgICAgIC8vIERldGVybWluYSBlbCBub21icmUgZGUgbGEgY2FycGV0YSBkZSByZWN1cnNvcyBiYXNhZG8gZW4gZWwgdGlwb1xuICAgICAgICAgICAgICAgIGxldCByZXNvdXJjZUZvbGRlck5hbWUgPSBcImZvbGRlcl9cIiArIHR5cGVOYW1lO1xuICAgICAgICAgICAgICAgIGxldCByZXNvdXJjZUZvbGRlciA9IHRoaXMucGx1Z2luLnNldHRpbmdzW3Jlc291cmNlRm9sZGVyTmFtZV07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gVmVyaWZpY2Egc2kgbGEgY2FycGV0YSBkZSByZWN1cnNvcyBleGlzdGUgcGFyYSBldml0YXIgZXJyb3Jlc1xuICAgICAgICAgICAgICAgIGlmICghcmVzb3VyY2VGb2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgTGEgY2FycGV0YSBcIiR7cmVzb3VyY2VGb2xkZXJOYW1lfVwiIG5vIGV4aXN0ZSBlbiBsYSBjb25maWd1cmFjaVx1MDBGM24gZGVsIHBsdWdpbi5gKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdOyAvLyBSZXRvcm5hIHVuIGFycmVnbG8gdmFjXHUwMEVEbyBzaSBsYSBjYXJwZXRhIG5vIGV4aXN0ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgYWN0aXZlUmVzb3VyY2VzID0gW107XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gRmlsdHJhIGxvcyBhcmNoaXZvcyBxdWUgZXN0XHUwMEUxbiBkZW50cm8gZGVsIGRpcmVjdG9yaW8gZGVzZWFkbyB5IHRpZW5lbiBlc3RhZG8gXHVEODNEXHVERkUyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVnaXN0cm9zRXhpc3RlbnRlcyA9IGZpbGVzLmZpbHRlcihmaWxlID0+IGZpbGUucGF0aC5zdGFydHNXaXRoKHJlc291cmNlRm9sZGVyKSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gVXNhIG1ldGFkYXRhQ2FjaGUgcGFyYSBidXNjYXIgbG9zIGVzdGFkb3MgZW4gZWwgZnJvbnRtYXR0ZXJcbiAgICAgICAgICAgICAgICByZWdpc3Ryb3NFeGlzdGVudGVzLmZvckVhY2goZmlsZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpPy5mcm9udG1hdHRlcjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGFkYXRhICYmIG1ldGFkYXRhLmVzdGFkbyA9PT0gXCJcdUQ4M0RcdURGRTJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlUmVzb3VyY2VzLnB1c2goZmlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSAvLyBGaW4gU3dpdGNoXG4gICAgICAgICAgICByZXR1cm4gYWN0aXZlUmVzb3VyY2VzO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIGJ1c2NhciByZWN1cnNvcyBhY3Rpdm9zOlwiLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gW107IC8vIFJldG9ybmEgdW4gYXJyZWdsbyB2YWNcdTAwRURvIGVuIGNhc28gZGUgZXJyb3JcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbn1cbiAgIiwgImltcG9ydCB7IEFncmFkZWNpbWllbnRvc0ZpZWxkSGFuZGxlciB9IGZyb20gJy4uLy4uL0ludGVyZmFjZXMvQWdyYWRlY2ltaWVudG9zRmllbGRIYW5kbGVyJztcbmltcG9ydCB7IFRGaWxlLCBURm9sZGVyLCBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBGaWVsZEhhbmRsZXJVdGlscyB9IGZyb20gJy4uLy4uL0ZpZWxkSGFuZGxlclV0aWxzJztcbmltcG9ydCB7IE5vdGVGaWVsZEhhbmRsZXJCYXNlIH0gZnJvbSAnLi4vRkggQmFzZS9Ob3RlRmllbGRIYW5kbGVyQmFzZSc7IC8vIEFzZWdcdTAwRkFyYXRlIGRlIGltcG9ydGFyIE5vdGVGaWVsZEhhbmRsZXIgc2kgZXMgbmVjZXNhcmlvXG5cbmV4cG9ydCBjbGFzcyBBZ3JhZGVjaW1pZW50b3NGaWVsZEhhbmRsZXIgZXh0ZW5kcyBOb3RlRmllbGRIYW5kbGVyQmFzZSBpbXBsZW1lbnRzIEFncmFkZWNpbWllbnRvc0ZpZWxkSGFuZGxlciB7XG4gICAgY29uc3RydWN0b3IodHA6IGFueSwgZm9sZGVyOiBzdHJpbmcsIHBsdWdpbjogYW55KSB7XG4gICAgICBzdXBlcih0cCwgZm9sZGVyLCBwbHVnaW4pOyAvLyBMbGFtYSBhbCBjb25zdHJ1Y3RvciBkZSBsYSBjbGFzZSBwYWRyZVxuICAgIH1cblxuICAgIC8vIGdldEZlY2hhIHBhcmEgZGV0ZXJtaW5hciBzaSBsYSBmZWNoYSBkZSBsYSBxdWUgaW5pY2lhIGVzdGEgZW4gZWwgYXJjaGl2byBkZSBvcmlnZW4uXG4gICAgYXN5bmMgZ2V0RmVjaGEoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgYWN0aXZvID0gYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG4gICAgICAgIGxldCBmZWNoYTtcbiAgICAgICAgY29uc3QgdGl0bGUgPSB0aGlzLnRwLmZpbGUuZHluYW1pY19mdW5jdGlvbnMuZ2V0KFwidGl0bGVcIik7XG4gICAgXG4gICAgICAgIGlmICh0aXRsZSAmJiB0aXRsZS5zdGFydHNXaXRoKFwiQWdyYWRlY2ltaWVudG9cIikpIHsgLy9FbiBjYXNvIGRlIHF1ZSB5YSB0cmFpZ2EgbGEgZmVjaGFcbiAgICAgICAgICBmZWNoYSA9IHRpdGxlLnNwbGl0KFwiQWdyYWRlY2ltaWVudG8gXCIpWzFdO1xuICAgICAgICB9IGVsc2UgaWYgKGFjdGl2by5wYXRoICYmIGFjdGl2bz8ucGF0aC5zdGFydHNXaXRoKFwiRXN0cnVjdHVyYS9Kb3VybmFsL0RpYXJpby9Ob3Rhc1wiKSkge1xuICAgICAgICAgIGZlY2hhID0gYWN0aXZvLmJhc2VuYW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGN1cnJlbnREYXRlID0gbW9tZW50KCkuZm9ybWF0KCdZWVlZLU1NLUREIGRkZGQnKTtcbiAgICAgICAgICBmZWNoYSA9IGF3YWl0IHRoaXMucHJvbXB0KFwiXHUwMEJGRGUgcXVcdTAwRTkgZGlhIGVzIGVsIGFncmFkZWNpbWllbnRvPz9cIiwgY3VycmVudERhdGUgLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIHRoaXMubm90YS5mZWNoYSA9IGZlY2hhO1xuICAgICAgICByZXR1cm4gZmVjaGE7XG4gICAgICB9XG5cbiAgYXN5bmMgZ2V0QWdyYWRlY2ltaWVudG9zKCk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICBsZXQgYWdyYWRlY2ltaWVudG9zID0gW107XG4gICAgbGV0IG51bUFncmFkZWNpbWllbnRvcyA9IDA7XG4gICAgbGV0IG90cmE7XG4gICAgZG8ge1xuICAgICAgY29uc3QgYWdyYWRlY2ltaWVudG8gPSBhd2FpdCB0aGlzLnByb21wdChcIlx1MDBCRkRlIHF1XHUwMEU5IGVzdFx1MDBFMXMgYWdyYWRlY2lkbz9cIiwgYEdyYWNpYXMgcG9yICR7bnVtQWdyYWRlY2ltaWVudG9zfWAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIGFncmFkZWNpbWllbnRvcy5wdXNoKGFncmFkZWNpbWllbnRvKTtcbiAgICAgIG51bUFncmFkZWNpbWllbnRvcyArPSAxO1xuICAgICAgb3RyYSA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKFtcIlNcdTAwRURcIiwgXCJOb1wiXSwgW3RydWUsIGZhbHNlXSwgdHJ1ZSwgXCJcdTAwQkZRdWllcmVzIGFncmVnYXIgb3RybyBhZ3JhZGVjaW1pZW50bz9cIik7XG4gICAgfSB3aGlsZSAob3RyYSk7XG4gICAgcmV0dXJuIGFncmFkZWNpbWllbnRvcztcbiAgfVxuXG59IiwgImltcG9ydCB7IFRGb2xkZXIgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gJ2x1eG9uJztcblxuZXhwb3J0IGNsYXNzIEZpZWxkSGFuZGxlclV0aWxzIHtcbiAgc3RhdGljIGFzeW5jIGNyZWFyQ2FycGV0YShmb2xkZXJQYXRoOiBzdHJpbmcpIHtcbiAgICB0cnkge1xuICAgICAgLy8gVmVyaWZpY2Egc2kgbGEgY2FycGV0YSB5YSBleGlzdGVcbiAgICAgIGNvbnN0IGNhcnBldGFFeGlzdGVudGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZvbGRlclBhdGgpO1xuICAgICAgaWYgKGNhcnBldGFFeGlzdGVudGUgaW5zdGFuY2VvZiBURm9sZGVyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBMYSBjYXJwZXRhICcke2ZvbGRlclBhdGh9JyB5YSBleGlzdGUuYCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIENyZWEgbGEgY2FycGV0YVxuICAgICAgYXdhaXQgYXBwLnZhdWx0LmNyZWF0ZUZvbGRlcihmb2xkZXJQYXRoKTtcbiAgICAgIGNvbnNvbGUubG9nKGBDYXJwZXRhICcke2ZvbGRlclBhdGh9JyBjcmVhZGEgZXhpdG9zYW1lbnRlLmApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBhbCBjcmVhciBsYSBjYXJwZXRhICcke2ZvbGRlclBhdGh9JzpgLCBlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgLy8gRXN0YSBmdW5jaVx1MDBGM24gZW5jdWVudHJhIGxvcyBhcmNoaXZvcyBkZSBzdWJzaXN0ZW1hcyB5IGN1eW8gZXN0YWRvIGVzIFx1RDgzRFx1REZFMlxuICAvLyBFc3RhIGZ1bmNpXHUwMEYzbiBzYWxlIGRlIG1lbnVPdHJvLCBkZSByZWdpc3RybyBUaWVtcG8uIFJldmlzYXIgc2kgZGVibyBzaW5jcm9uaXphcmxhcy5cbiAgc3RhdGljIGFzeW5jIGZpbmRNYWluRmlsZXNXaXRoU3RhdGUodGlwbzogc3RyaW5nLCBwYXJhbWV0cm86IGFueSwgcGx1Z2luOiBhbnkpIHtcbiAgICBjb25zdCBwcm9wZXJ0aWVzVGlwbyA9IHtcbiAgICAgIEFWOiB7XG4gICAgICAgIGZvbGRlcjogcGx1Z2luLnNldHRpbmdzLmZvbGRlcl9BcmVhc1ZpZGEsXG4gICAgICB9LFxuICAgICAgQUk6IHtcbiAgICAgICAgZm9sZGVyOiBwbHVnaW4uc2V0dGluZ3MuZm9sZGVyX0FyZWFzSW50ZXJlcyxcbiAgICAgIH0sXG4gICAgICBQUToge1xuICAgICAgICBmb2xkZXI6IHBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfUHJveWVjdG9zUSxcbiAgICAgIH0sXG4gICAgICBQR1REOiB7XG4gICAgICAgIGZvbGRlcjogcGx1Z2luLnNldHRpbmdzLmZvbGRlcl9Qcm95ZWN0b3NHVEQsXG4gICAgICB9LFxuICAgICAgVEk6IHtcbiAgICAgICAgZm9sZGVyOiBwbHVnaW4uc2V0dGluZ3MuZm9sZGVyX1RlbWFzSW50ZXJlcyxcbiAgICAgIH0sXG4gICAgICBSUjoge1xuICAgICAgICBmb2xkZXI6IHBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfUmVjdXJzb3NSZWN1cnJlbnRlcyxcbiAgICAgIH0sXG4gICAgICBUUToge1xuICAgICAgICBmb2xkZXI6IHBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfVHJpbWVzdHJhbCxcbiAgICAgIH0sXG4gICAgICBBWToge1xuICAgICAgICBmb2xkZXI6IHBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfQW51YWwsXG4gICAgICB9LFxuICAgICAgLy8gUHVlZGVzIGNvbnRpbnVhciBhXHUwMEYxYWRpZW5kbyBtXHUwMEUxcyBjYXNvcyBhcXVcdTAwRURcbiAgICB9O1xuXG4gICAgLy8gQXNlZ1x1MDBGQXJhdGUgZGUgcXVlIHRpcG8gZXMgdW5hIHByb3BpZWRhZCB2XHUwMEUxbGlkYSBhbnRlcyBkZSBkZXNlc3RydWN0dXJhclxuICAgIGlmICghcHJvcGVydGllc1RpcG9bdGlwb10pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGlwbyAke3RpcG99IG5vIGVzIHZcdTAwRTFsaWRvLmApO1xuICAgIH1cblxuICAgIGNvbnN0IGFjdGl2ZUZpbGVzV2l0aEZyb250bWF0dGVyID0gW107XG4gICAgbGV0IGZpbGVzLCB0cmltZXN0cmU6IHN0cmluZztcbiAgICBjb25zdCBmb2xkZXIgPSBwcm9wZXJ0aWVzVGlwb1t0aXBvXS5mb2xkZXI7XG4gICAgc3dpdGNoICh0aXBvKSB7XG4gICAgICBjYXNlIFwiQVZcIjpcbiAgICAgICAgaWYgKCFwYXJhbWV0cm8pIHsgLy8gcGFyYW1ldHJvIGVuIGVzdGUgY2FzbyBlcyBlbCB0cmltZXN0cmUuIFNpbiBwYXJhbWV0cm8gc2UgYnVzY2EgZWwgbm9kb0FyZWFWaWRhXG4gICAgICAgICAgdHJpbWVzdHJlID0gRGF0ZVRpbWUubm93KCkudG9Gb3JtYXQoXCJ5eXl5LVFxXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEN1YW5kbyBlbCB0cmltZXN0cmUgc2kgc2UgaW5ncmVzYSBlbiBsYSBmdW5jaVx1MDBGM24sIGVudG9uY2VzIGJ1c2NhIGxhcyBBcmVhc1ZpZGEgZGVsIHRyaW1lc3RyZS5cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdHJpbWVzdHJlID0gcGFyYW1ldHJvO1xuICAgICAgICB9XG5cbiAgICAgICAgZmlsZXMgPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpLmZpbHRlcihmaWxlID0+XG4gICAgICAgICAgZmlsZS5wYXRoLmluY2x1ZGVzKGZvbGRlcikgJiYgIWZpbGUucGF0aC5pbmNsdWRlcyhcIlBsYW50aWxsYXNcIikgJiYgIWZpbGUucGF0aC5pbmNsdWRlcyhcIkFyY2hpdm9cIikgJiYgZmlsZS5uYW1lLnN0YXJ0c1dpdGgodHJpbWVzdHJlKSk7XG5cbiAgICAgICAgZm9yIChsZXQgZmlsZSBvZiBmaWxlcykge1xuICAgICAgICAgIGxldCBtZXRhZGF0YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXI7XG5cbiAgICAgICAgICBpZiAobWV0YWRhdGE/LmVzdGFkbyA9PT0gXCJcdUQ4M0RcdURGRTJcIikge1xuICAgICAgICAgICAgbGV0IGFjdGl2ZUZpbGUgPSBPYmplY3QuYXNzaWduKHt9LCBtZXRhZGF0YSk7XG4gICAgICAgICAgICBhY3RpdmVGaWxlLmZpbGUgPSBmaWxlO1xuICAgICAgICAgICAgYWN0aXZlRmlsZXNXaXRoRnJvbnRtYXR0ZXIucHVzaChhY3RpdmVGaWxlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJBSVwiOlxuICAgICAgY2FzZSBcIlRRXCI6XG4gICAgICBjYXNlIFwiQVlcIjpcbiAgICAgICAgZmlsZXMgPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpLmZpbHRlcihmaWxlID0+XG4gICAgICAgICAgZmlsZS5wYXRoLmluY2x1ZGVzKGZvbGRlcikgJiYgIWZpbGUucGF0aC5pbmNsdWRlcyhcIlBsYW50aWxsYXNcIikgJiYgIWZpbGUucGF0aC5pbmNsdWRlcyhcIkFyY2hpdm9cIikpO1xuICAgICAgICBmb3IgKGxldCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgICAgICAgbGV0IG1ldGFkYXRhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpPy5mcm9udG1hdHRlcjtcbiAgICAgICAgICBpZiAobWV0YWRhdGE/LmVzdGFkbyA9PT0gXCJcdUQ4M0RcdURGRTJcIikge1xuICAgICAgICAgICAgbGV0IGFjdGl2ZUZpbGUgPSBPYmplY3QuYXNzaWduKHt9LCBtZXRhZGF0YSk7XG4gICAgICAgICAgICBhY3RpdmVGaWxlLmZpbGUgPSBmaWxlO1xuICAgICAgICAgICAgYWN0aXZlRmlsZXNXaXRoRnJvbnRtYXR0ZXIucHVzaChhY3RpdmVGaWxlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBmaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCkuZmlsdGVyKGZpbGUgPT5cbiAgICAgICAgICBmaWxlLnBhdGguaW5jbHVkZXMoZm9sZGVyKSAmJiAhZmlsZS5wYXRoLmluY2x1ZGVzKFwiUGxhbnRpbGxhc1wiKSAmJiAhZmlsZS5wYXRoLmluY2x1ZGVzKFwiQXJjaGl2b1wiKSk7XG4gICAgICAgIGZvciAobGV0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgICAgICBsZXQgbWV0YWRhdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk/LmZyb250bWF0dGVyO1xuICAgICAgICAgIGlmIChtZXRhZGF0YT8uZXN0YWRvID09PSBcIlx1RDgzRFx1REZFMlwiKSB7XG4gICAgICAgICAgICBsZXQgYWN0aXZlRmlsZSA9IE9iamVjdC5hc3NpZ24oe30sIG1ldGFkYXRhKTtcbiAgICAgICAgICAgIGFjdGl2ZUZpbGUuZmlsZSA9IGZpbGU7XG4gICAgICAgICAgICBhY3RpdmVGaWxlc1dpdGhGcm9udG1hdHRlci5wdXNoKGFjdGl2ZUZpbGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIGFjdGl2ZUZpbGVzV2l0aEZyb250bWF0dGVyO1xuICB9XG59IiwgImltcG9ydCB7IE5vdGVGaWVsZEhhbmRsZXJCYXNlIH0gZnJvbSAnLi4vLi4vSW50ZXJmYWNlcy9Ob3RlRmllbGRIYW5kbGVyQmFzZSc7XG5pbXBvcnQgeyBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IEZpZWxkSGFuZGxlclV0aWxzIH0gZnJvbSAnLi4vLi4vRmllbGRIYW5kbGVyVXRpbHMnO1xuXG5leHBvcnQgY2xhc3MgTm90ZUZpZWxkSGFuZGxlckJhc2UgaW1wbGVtZW50cyBOb3RlRmllbGRIYW5kbGVyQmFzZXtcbiAgcHJpdmF0ZSB0cDogYW55O1xuICBwcml2YXRlIGluZm9TdWJzaXN0ZW1hOiBhbnk7XG4gIHByaXZhdGUgc3VnZ2VzdGVyOiBhbnk7XG4gIHByaXZhdGUgcHJvbXB0OiBhbnk7XG4gIHByaXZhdGUgZmVjaGFBZ3I6IHN0cmluZztcbiAgcHJpdmF0ZSBwbHVnaW46IGFueTsgXG5cbiAgY29uc3RydWN0b3IodHA6IGFueSwgaW5mb1N1YnNpc3RlbWE6IGFueSwgcGx1Z2luOiBhbnkpIHtcbiAgICB0aGlzLnRwID0gdHA7XG4gICAgdGhpcy5pbmZvU3Vic2lzdGVtYSA9IGluZm9TdWJzaXN0ZW1hO1xuICAgIHRoaXMuc3VnZ2VzdGVyID0gdHAuc3lzdGVtLnN0YXRpY19mdW5jdGlvbnMuZ2V0KFwic3VnZ2VzdGVyXCIpO1xuICAgIHRoaXMucHJvbXB0ID0gdHAuc3lzdGVtLnN0YXRpY19mdW5jdGlvbnMuZ2V0KFwicHJvbXB0XCIpO1xuICAgIHRoaXMucGx1Z2luID0gcGx1Z2luOyAvLyBBbG1hY2VuYXIgbGEgaW5zdGFuY2lhIGRlbCBwbHVnaW4gXG4gICAgdGhpcy5ub3RhID0ge307IC8vIEluaWNpYWxpemFyIGxhIG5vdGFcbiAgfVxuXG4gIGFzeW5jIGdldElkKCk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgbGV0IG1heElkID0gMDtcbiAgICBjb25zdCBmaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG4gICAgY29uc3QgcmVnaXN0cm9zRXhpc3RlbnRlcyA9IGZpbGVzLmZpbHRlcihmaWxlID0+IGZpbGUucGF0aC5zdGFydHNXaXRoKHRoaXMuaW5mb1N1YnNpc3RlbWEuZm9sZGVyKSk7XG4gICAgcmVnaXN0cm9zRXhpc3RlbnRlcy5mb3JFYWNoKChmaWxlOiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IG1ldGFkYXRhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpPy5mcm9udG1hdHRlcjtcbiAgICAgIGlmIChtZXRhZGF0YSAmJiBtZXRhZGF0YS5pZCAmJiAhaXNOYU4obWV0YWRhdGEuaWQpKSB7XG4gICAgICAgIGNvbnN0IGlkID0gcGFyc2VJbnQobWV0YWRhdGEuaWQpO1xuICAgICAgICBpZiAoaWQgPiBtYXhJZCkgbWF4SWQgPSBpZDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbWF4SWQgKyAxO1xuICB9XG5cbiAgYXN5bmMgZ2V0RmVjaGEoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxMCk7XG4gICAgY29uc3QgY3VycmVudERheSA9IG5ldyBEYXRlKCkudG9Mb2NhbGVEYXRlU3RyaW5nKCdlcy1FUycsIHsgd2Vla2RheTogJ2xvbmcnIH0pO1xuICAgIGNvbnN0IGZvcm1hdHRlZERhdGUgPSBgJHtjdXJyZW50RGF0ZX0gJHtjdXJyZW50RGF5fWA7XG4gICAgdGhpcy5ub3RhLmZlY2hhID0gZm9ybWF0dGVkRGF0ZTtcbiAgICByZXR1cm4gZm9ybWF0dGVkRGF0ZTtcbn1cblxuICBhc3luYyBnZXRBbGlhc2VzKCk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICBjb25zdCBpZCA9IGF3YWl0IHRoaXMuZ2V0SWQoKTtcbiAgICByZXR1cm4gW2Ake3RoaXMuaW5mb1N1YnNpc3RlbWEudHlwZU5hbWV9ICR7aWR9YF07XG4gIH1cblxuICBhc3luYyBnZXRSZW5hbWUoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBmZWNoYSA9IHRoaXMubm90YS5mZWNoYTtcbiAgICBjb25zdCBuZXdOYW1lID0gYCR7dGhpcy5pbmZvU3Vic2lzdGVtYS5mb2xkZXJ9LyR7dGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlTmFtZX0gJHtmZWNoYX0ubWRgO1xuICAgIGF3YWl0IEZpZWxkSGFuZGxlclV0aWxzLmNyZWFyQ2FycGV0YSh0aGlzLmluZm9TdWJzaXN0ZW1hLmZvbGRlcik7XG5cbiAgICBjb25zdCBmaWxlID0gdGhpcy50cC5maWxlLmNvbmZpZy50YXJnZXRfZmlsZTtcbiAgICBjb25zdCBleGlzdGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG5ld05hbWUpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGlmIChleGlzdGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICBjb25zdCBub21icmVGaWxlID0gbmV3TmFtZS5zcGxpdChcIi9cIik7XG4gICAgICAgIGNvbnN0IGJvcnJhciA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKFxuICAgICAgICAgIFtcIlNvYnJlZXNjcmliaXIgQXJjaGl2byBBY3R1YWxcIiwgXCJEZXRlbmVyIGNyZWFjaVx1MDBGM24gZGVsIGFyY2hpdm8uXCJdLFxuICAgICAgICAgIFt0cnVlLCBmYWxzZV0sXG4gICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICBgXHUwMEJGJHtub21icmVGaWxlLnBvcCgpfSB5YSBleGlzdGUuIFF1XHUwMEU5IGRlc2VhcyBoYWNlcj9gXG4gICAgICAgICk7XG4gICAgICAgIGlmIChib3JyYXIpIHtcbiAgICAgICAgICBhd2FpdCBhcHAudmF1bHQuZGVsZXRlKGV4aXN0ZSk7XG4gICAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LnJlbmFtZShmaWxlLCBuZXdOYW1lKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQXJjaGl2byByZW5vbWJyYWRvIGNvbiBcdTAwRTl4aXRvLlwiKTtcbiAgICAgICAgICAgIHJldHVybiBuZXdOYW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkNhbmNlbGFuZG8gbGEgY3JlYWNpXHUwMEYzbiBkZWwgYXJjaGl2by5cIik7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvY2VzbyBjYW5jZWxhZG8gcG9yIGVsIHVzdWFyaW8uXCIpOyAvLyBMYW56YW1vcyB1bmEgZXhjZXBjaVx1MDBGM24gcGFyYSBkZXRlbmVyIGxhIGNyZWFjaVx1MDBGM25cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgIGF3YWl0IGFwcC52YXVsdC5yZW5hbWUoZmlsZSwgbmV3TmFtZSk7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJBcmNoaXZvIHJlbm9tYnJhZG8gY29uIFx1MDBFOXhpdG8uXCIpO1xuICAgICAgICAgIHJldHVybiBuZXdOYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhbCBjYW1iaWFyIGVsIG5vbWJyZVwiLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjsgLy8gTGFuemFtb3MgbGEgZXhjZXBjaVx1MDBGM24gcGFyYSBkZXRlbmVyIGxhIGNyZWFjaVx1MDBGM25cbiAgICB9XG4gIH1cblxuXG4gIGFzeW5jIGdldEVzdGFkbygpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiAnXHVEODNEXHVERkUyJztcbiAgfVxuXG4gIGFzeW5jIGdldE5vdGEoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5ub3RhO1xufVxuXG59IiwgImltcG9ydCB7IHJlZmxleGlvbmVzRmllbGRIYW5kbGVyIH0gZnJvbSAnLi4vLi4vSW50ZXJmYWNlcy9SZWZsZXhpb25lc0ZpZWxkSGFuZGxlcic7XG5pbXBvcnQgeyBURmlsZSwgVEZvbGRlciwgTm90aWNlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgRmllbGRIYW5kbGVyVXRpbHMgfSBmcm9tICcuLi8uLi9GaWVsZEhhbmRsZXJVdGlscyc7XG5pbXBvcnQgeyBOb3RlRmllbGRIYW5kbGVyQmFzZSB9IGZyb20gJy4uL0ZIIEJhc2UvTm90ZUZpZWxkSGFuZGxlckJhc2UnOyAvLyBBc2VnXHUwMEZBcmF0ZSBkZSBpbXBvcnRhciBOb3RlRmllbGRIYW5kbGVyIHNpIGVzIG5lY2VzYXJpb1xuXG5leHBvcnQgY2xhc3MgUmVmbGV4aW9uZXNGaWVsZEhhbmRsZXIgZXh0ZW5kcyBOb3RlRmllbGRIYW5kbGVyQmFzZSBpbXBsZW1lbnRzIFJlZmxleGlvbmVzRmllbGRIYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih0cDogYW55LCBmb2xkZXI6IHN0cmluZywgcGx1Z2luOiBhbnkpIHtcbiAgICAgIHN1cGVyKHRwLCBmb2xkZXIsIHBsdWdpbik7IC8vIExsYW1hIGFsIGNvbnN0cnVjdG9yIGRlIGxhIGNsYXNlIHBhZHJlXG4gICAgfVxuXG4gICAgLy8gZ2V0RmVjaGEgcGFyYSBkZXRlcm1pbmFyIHNpIGxhIGZlY2hhIGRlIGxhIHF1ZSBpbmljaWEgZXN0YSBlbiBlbCBhcmNoaXZvIGRlIG9yaWdlbi5cbiAgICBhc3luYyBnZXRGZWNoYSgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCBhY3Rpdm8gPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcbiAgICAgICAgbGV0IGZlY2hhO1xuICAgICAgICBjb25zdCB0aXRsZSA9IHRoaXMudHAuZmlsZS5keW5hbWljX2Z1bmN0aW9ucy5nZXQoXCJ0aXRsZVwiKTtcbiAgICBcbiAgICAgICAgaWYgKHRpdGxlICYmIHRpdGxlLnN0YXJ0c1dpdGgoXCJSZWZsZXhpb25cIikpIHsgLy9FbiBjYXNvIGRlIHF1ZSB5YSB0cmFpZ2EgbGEgZmVjaGFcbiAgICAgICAgICBmZWNoYSA9IHRpdGxlLnNwbGl0KFwiUmVmbGV4aW9uIFwiKVsxXTtcbiAgICAgICAgfSBlbHNlIGlmIChhY3Rpdm8ucGF0aCAmJiBhY3Rpdm8/LnBhdGguc3RhcnRzV2l0aChcIkVzdHJ1Y3R1cmEvSm91cm5hbC9EaWFyaW8vTm90YXNcIikpIHtcbiAgICAgICAgICBmZWNoYSA9IGFjdGl2by5iYXNlbmFtZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBjdXJyZW50RGF0ZSA9IG1vbWVudCgpLmZvcm1hdCgnWVlZWS1NTS1ERCBkZGRkJyk7XG4gICAgICAgICAgZmVjaGEgPSBhd2FpdCB0aGlzLnByb21wdChcIlx1MDBCRkRlIHF1XHUwMEU5IGRpYSBlcyBsYSByZWZsZXhpXHUwMEYzbj8/XCIsIGN1cnJlbnREYXRlICwgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vdGEuZmVjaGEgPSBmZWNoYTtcbiAgICAgICAgcmV0dXJuIGZlY2hhO1xuICAgICAgfVxuXG4gIGFzeW5jIGdldFJlZmxleGlvbigpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgbGV0IHJlZmxleGlvbmVzID0gW107XG4gICAgbGV0IG51bVJlZmxleGlvbmVzID0gMDtcbiAgICBsZXQgb3RyYTtcbiAgICBkbyB7XG4gICAgICBjb25zdCByZWZsZXhpb24gPSBhd2FpdCB0aGlzLnByb21wdChcIlF1ZSBlc3RhcyBwZW5zYW5kbz9cIiwgYFAke251bVJlZmxleGlvbmVzfWAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIHJlZmxleGlvbmVzLnB1c2gocmVmbGV4aW9uKTtcbiAgICAgIG51bVJlZmxleGlvbmVzICs9IDE7XG4gICAgICBvdHJhID0gYXdhaXQgdGhpcy5zdWdnZXN0ZXIoW1wiU1x1MDBFRFwiLCBcIk5vXCJdLCBbdHJ1ZSwgZmFsc2VdLCB0cnVlLCBcIlx1MDBCRlF1aWVyZXMgYWdyZWdhciBvdHJvIHBcdTAwRTFycmFmbz9cIik7XG4gICAgfSB3aGlsZSAob3RyYSk7XG4gICAgcmV0dXJuIHJlZmxleGlvbmVzO1xuICB9XG5cbn0iLCAiaW1wb3J0IHsgTm90ZUZpZWxkSGFuZGxlciB9IGZyb20gJy4uLy4uL0ludGVyZmFjZXMvTm90ZUZpZWxkSGFuZGxlcic7XG5pbXBvcnQgeyBURmlsZSwgVEZvbGRlciwgTm90aWNlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgRmllbGRIYW5kbGVyVXRpbHMgfSBmcm9tICcuLi8uLi9GaWVsZEhhbmRsZXJVdGlscyc7XG5pbXBvcnQge0RhdGVUaW1lfSBmcm9tICdsdXhvbic7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkVzdGEgY2xhc2Ugc2lydmUgcGFyYSBjdWFscXVpZXIgY2xhc2UgcXVlIHNvbGFtZW50ZSBkZWJhIHByb2Nlc2FyIFxubGFzIHNpZ3VpZW50ZXMgcHJvcGllZGFkZXM6XG4gY2FtcG9zID0gW1wiaWRcIixcImZlY2hhXCIsXCJ0aXR1bG9cIixcImRlc2NyaXBjaW9uXCIsXCJlc3RhZG9cIixcImFzdW50b1wiLFxuIFwicHJveWVjdG9HVERcIixcIlByb3llY3RvUVwiLFwiYXJlYUludGVyZXNcIixcImFyZWFWaWRhXCIsXCJhbGlhc2VzXCIsXCJyZW5hbWVcIl1cblBhcmEgaGVyZWRhciB0b2RvIGRlIGVzdGEgY2xhc2Ugc2luIG1vZGlmaWNhY2lvbmVzLCBzZSBkZWJlIGhhY2VyIFxuZXh0ZW5kaWVuZG8gbGEgc3ViY2xhc2UgZGUgZXN0YSB5IGRlZmluaWVuZG8gZWwgY29uc3RydWN0b3I6XG5cbmNsYXNzIHN1YnNpc3RlbWFGaWVsZEhhbmRsZXIgZXh0ZW5kcyBOb3RlRmllbGRIYW5kbGVyIHtcbiAgY29uc3RydWN0b3IodHA6IGFueSwgZm9sZGVyOiBzdHJpbmcsIHBsdWdpbjogYW55KSB7XG4gICAgc3VwZXIodHAsIGZvbGRlciwgcGx1Z2luKTsgLy8gTGxhbWEgYWwgY29uc3RydWN0b3IgZGUgbGEgY2xhc2UgcGFkcmVcbiAgfVxufVxuLi4uIFxuIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cbmV4cG9ydCBjbGFzcyBOb3RlRmllbGRIYW5kbGVyIGltcGxlbWVudHMgTm90ZUZpZWxkSGFuZGxlciB7XG4gICAgcHJpdmF0ZSB0cDogYW55O1xuICAgIHByaXZhdGUgaW5mb1N1YnNpc3RlbWE6IGFueTtcbiAgICBwcml2YXRlIHN1Z2dlc3RlcjogYW55O1xuICAgIHByaXZhdGUgcHJvbXB0OiBhbnk7XG4gICAgcHJpdmF0ZSBwbHVnaW46IGFueTtcblxuXG4gICAgY29uc3RydWN0b3IodHA6IGFueSwgaW5mb1N1YnNpc3RlbWE6IGFueSwgcGx1Z2luOiBhbnkpIHtcbiAgICAgICAgdGhpcy50cCA9IHRwO1xuICAgICAgICB0aGlzLmluZm9TdWJzaXN0ZW1hID0gaW5mb1N1YnNpc3RlbWE7XG4gICAgICAgIHRoaXMuc3VnZ2VzdGVyID0gdHAuc3lzdGVtLnN0YXRpY19mdW5jdGlvbnMuZ2V0KFwic3VnZ2VzdGVyXCIpO1xuICAgICAgICB0aGlzLnByb21wdCA9IHRwLnN5c3RlbS5zdGF0aWNfZnVuY3Rpb25zLmdldChcInByb21wdFwiKTtcbiAgICAgICAgdGhpcy5ub3RhID0ge307IC8vIEluaWNpYWxpemFyIGxhIG5vdGFcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47IC8vIEFsbWFjZW5hciBsYSBpbnN0YW5jaWEgZGVsIHBsdWdpblxuICAgIH1cblxuICAgIGFzeW5jIGdldElkKCk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgICAgIGxldCBtYXhJZCA9IDA7XG4gICAgICAgIGNvbnN0IGZpbGVzID0gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcbiAgICAgICAgY29uc3QgcmVnaXN0cm9zRXhpc3RlbnRlcyA9IGZpbGVzLmZpbHRlcihmaWxlID0+IGZpbGUucGF0aC5zdGFydHNXaXRoKHRoaXMuaW5mb1N1YnNpc3RlbWEuZm9sZGVyKSk7XG4gICAgICAgIHJlZ2lzdHJvc0V4aXN0ZW50ZXMuZm9yRWFjaCgoZmlsZTogYW55KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtZXRhZGF0YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXI7XG4gICAgICAgICAgICBpZiAobWV0YWRhdGEgJiYgbWV0YWRhdGEuaWQgJiYgIWlzTmFOKG1ldGFkYXRhLmlkKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gcGFyc2VJbnQobWV0YWRhdGEuaWQpO1xuICAgICAgICAgICAgICAgIGlmIChpZCA+IG1heElkKSBtYXhJZCA9IGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ub3RhLmlkID0gIG1heElkICsgMTtcbiAgICAgICAgcmV0dXJuIHRoaXMubm90YS5pZDtcbiAgICB9XG5cblxuICAgIGFzeW5jIGdldEZlY2hhKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGxldCBmZWNoYUFjdHVhbCA9IERhdGVUaW1lLm5vdygpO1xuICAgICAgICBmZWNoYUFjdHVhbCA9IGZlY2hhQWN0dWFsLnNldExvY2FsZSgnZXMnKTtcbiAgICAgICAgZmVjaGFBY3R1YWwgPSBmZWNoYUFjdHVhbC50b0Zvcm1hdCgneXl5eS1NTS1kZCBFRUVFIEhIOm1tJyk7XG4gICAgICAgIHRoaXMubm90YS5mZWNoYSA9IGZlY2hhQWN0dWFsO1xuICAgICAgICByZXR1cm4gZmVjaGFBY3R1YWw7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0VGl0dWxvKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gYXdhaXQgdGhpcy5wcm9tcHQoYFRcdTAwRUR0dWxvIGRlICR7dGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlTmFtZX06YCwgXCJcIiwgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5ub3RhLnRpdHVsbyA9IHRpdGxlO1xuICAgICAgICByZXR1cm4gdGl0bGU7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0RGVzY3JpcGNpb24oKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgZGVzY3JpcGNpb24gPSBhd2FpdCB0aGlzLnByb21wdChgRGVzY3JpcGNpXHUwMEYzbiBkZWwgJHt0aGlzLmluZm9TdWJzaXN0ZW1hLnR5cGVOYW1lfTpgLCBcIlwiLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIHRoaXMubm90YS5kZXNjcmlwY2lvbiA9IGRlc2NyaXBjaW9uO1xuICAgICAgICByZXR1cm4gZGVzY3JpcGNpb247XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0RXN0YWRvKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiAnXHVEODNEXHVERkUyJztcbiAgICB9XG5cbiAgICBhc3luYyBnZXROb3RhKCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vdGE7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QXN1bnRvKCk6IFByb21pc2U8eyBzaUFzdW50bzogYm9vbGVhbiwgbm9tYnJlOiBzdHJpbmdbXSB9PiB7IC8vIEZ1bmNpb25hIGNvbiBmcm9udG1hdHRlclxuICAgICAgICBcbiAgICAgICAgbGV0IHBhZHJlcyA9IFtdO1xuICAgICAgICBsZXQgYWN0aXZvID0gYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG4gICAgICAgIGxldCBzaUFzdW50byA9IGZhbHNlO1xuICAgICAgICBsZXQgbm9tYnJlID0gXCJcIjtcbiAgICAgICAgbGV0IG5vdGE7XG4gICAgICAgIGlmIChhY3Rpdm8gIT0gbnVsbCkge1xuICAgICAgICAgICAgbm9tYnJlID0gYWN0aXZvLmJhc2VuYW1lO1xuICAgICAgICAgICAgbm90YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShhY3Rpdm8pO1xuICAgICAgICAgICAgLy8gQXNlZ3VyYXIgcXVlIG5vdGEuZnJvbnRtYXR0ZXIgZXhpc3RlIHkgYXNpZ25hciB1biBvYmpldG8gdmFjXHUwMEVEbyBhIGZpbGVcbiAgICAgICAgICAgIG5vdGEuZnJvbnRtYXR0ZXIgPSBub3RhLmZyb250bWF0dGVyIHx8IHt9O1xuICAgICAgICAgICAgbm90YS5mcm9udG1hdHRlci5maWxlID0ge307XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKG5vdGEuZnJvbnRtYXR0ZXIuZmlsZSwgYWN0aXZvKTtcbiAgICAgICAgICAgIC8vMS4gc2lBc3VudG8gPSBhd2FpdCBzdWdnZXN0ZXIoW1wiU2lcIiwgXCJOb1wiXSwgW3RydWUsIGZhbHNlXSwgdHJ1ZSwgbm9tYnJlICsgXCIgZXMgb3JpZ2VuIGRlIFwiICsgdGhpcy5ub3RhLnRpdHVsbyArIFwiP1wiKTtcbiAgICAgICAgICAgIHBhZHJlcy51bnNoaWZ0KG5vbWJyZSk7IC8vIEFcdTAwRjFhZGUgZWwgbm9tYnJlIGFsIGluaWNpbyBkZWwgYXJyZWdsbywgZGVzcGxhemFuZG8gbG9zIGRlbVx1MDBFMXMgZWxlbWVudG9zXG4gICAgICAgICAgICAgICAgc2lBc3VudG8gPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihbXCJTaVwiLCBcIk5vXCJdLCBbdHJ1ZSwgZmFsc2VdLCB0cnVlLCBub21icmUgKyBcIiBlcyBvcmlnZW4gZGUgXCIgKyB0aGlzLm5vdGEudGl0dWxvICsgXCI/XCIpO1xuICAgICAgICAgICAgICAgIGlmIChzaUFzdW50bykge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFzdW50b0RlZmluaWRvID0gdHJ1ZTsgLy8gUGFyYSBxdWUgbm8gZWplY3V0ZSBsYSBidXNxdWVkYSBkZSBBcmVhIFZpZGEsIEFyZWEgZGUgSW50ZXJcdTAwRTlzLCBwcm95ZWN0byBRIG8gR1REXG4gICAgICAgICAgICAgICAgICAgIGxldCBuaXZlbDtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChub3RhPy5mcm9udG1hdHRlcj8udHlwZSkgeyAvLyBMYSBub3RhIGFjdGl2cyBlcyB1bmE6IFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJQR1REXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiUFFcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWRVJJRklDQUNJT04gREUgUFJPWUVDVE9TIERFIFEgWSBQUk9ZRUNUTyBHVERcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YS5mcm9udG1hdHRlcj8udHlwZSA9PT0gXCJQUVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENVQU5ETyBMQSBOT1RBIEFDVElWQSBFUyBVTiBQUS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvUSA9IG5vbWJyZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIFBST1lFQ1RPU0dURFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbmljaWFsaXphbW9zIHRoaXMubm90YS5wcm95ZWN0b0dURCBjb24gdW4gdmFsb3IgcHJlZGV0ZXJtaW5hZG8gZGUgY2FkZW5hIHZhY1x1MDBFRGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvR1REID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmVyaWZpY2Ftb3Mgc2kgbm90YS5wcm95ZWN0b0dURCBleGlzdGUgeSBlcyB1biBhcnJlZ2xvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBlcyB1biBhcnJlZ2xvLCBpdGVyYW1vcyBzb2JyZSBjYWRhIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1RELm1hcChlbGVtZW50byA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSBwZXJvIG5vIGVzIHVuIGFycmVnbG8sIGFwbGljYW1vcyBlbCByZWdleCBkaXJlY3RhbWVudGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b0dURCA9IG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBub3RhLnByb3llY3RvR1REIG5vIGV4aXN0ZSwgdGhpcy5ub3RhLnByb3llY3RvR1REIHlhIGVzdFx1MDBFMSBlc3RhYmxlY2lkbyBlbiBcIlwiIHBvciBkZWZlY3RvXG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPYnRlbmVyIFByb3llY3RvUSB5IFByb3llY3RvIEdURCBjdWFuZG8gbGEgbm90YSBlcyBQcm95ZWN0b0dURC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vdGEuZnJvbnRtYXR0ZXI/LnR5cGUgPT09IFwiUEdURFwiKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ1VBTkRPIExBIE5PVEEgQUNUSVZBIEVTIFVOIEdURC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIFBST1lFQ1RPU0dURFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBbbm9tYnJlXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1REKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXMgdW4gYXJyZWdsbywgdXRpbGl6YW1vcyBjb25jYXQgcGFyYSBhXHUwMEYxYWRpciBsb3MgZWxlbWVudG9zIHlhIHByb2Nlc2Fkb3MgY29uIGVsIHJlZ2V4IGFsIGFycmVnbG8gdGhpcy5ub3RhLnByb3llY3RvR1REXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSB0aGlzLm5vdGEucHJveWVjdG9HVEQuY29uY2F0KG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQubWFwKGVsZW1lbnRvID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSBwZXJvIG5vIGVzIHVuIGFycmVnbG8sIGFwbGljYW1vcyBlbCByZWdleCBkaXJlY3RhbWVudGUgeSB1c2Ftb3MgcHVzaCBwYXJhIGFncmVnYXJsbyBhIHRoaXMubm90YS5wcm95ZWN0b0dURFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvR1RELnB1c2gobm90YS5mcm9udG1hdHRlci5wcm95ZWN0b0dURC5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5vdGEucHJveWVjdG9HVEQgbm8gZXhpc3RlLCB0aGlzLm5vdGEucHJveWVjdG9HVEQgeWEgZXN0XHUwMEUxIGVzdGFibGVjaWRvIGVuIFwiXCIgcG9yIGRlZmVjdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvUSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9RKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXMgdW4gYXJyZWdsbywgaXRlcmFtb3Mgc29icmUgY2FkYSBlbGVtZW50b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvUSA9IG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9RLm1hcChlbGVtZW50byA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9RKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBleGlzdGUgcGVybyBubyBlcyB1biBhcnJlZ2xvLCBhcGxpY2Ftb3MgZWwgcmVnZXggZGlyZWN0YW1lbnRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9RID0gbm90YS5mcm9udG1hdHRlci5wcm95ZWN0b1EucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT2J0ZW5lciBQcm95ZWN0b1EgeSBQcm95ZWN0byBHVEQgY3VhbmRvIGxhIG5vdGEgZXMgb3RyYSBjb3NhIHF1ZSBubyBlcyBwcm95ZWN0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b1EgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhPy5mcm9udG1hdHRlcj8ucHJveWVjdG9RKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXMgdW4gYXJyZWdsbywgaXRlcmFtb3Mgc29icmUgY2FkYSBlbGVtZW50b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvUSA9IG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9RLm1hcChlbGVtZW50byA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vdGE/LmZyb250bWF0dGVyPy5wcm95ZWN0b1EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSBwZXJvIG5vIGVzIHVuIGFycmVnbG8sIGFwbGljYW1vcyBlbCByZWdleCBkaXJlY3RhbWVudGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b1EgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvUS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvR1REID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmVyaWZpY2Ftb3Mgc2kgbm90YS5wcm95ZWN0b0dURCBleGlzdGUgeSBlcyB1biBhcnJlZ2xvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGE/LmZyb250bWF0dGVyPy5wcm95ZWN0b0dURCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIGl0ZXJhbW9zIHNvYnJlIGNhZGEgZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b0dURCA9IG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQubWFwKGVsZW1lbnRvID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LnByb3llY3RvR1REKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBleGlzdGUgcGVybyBubyBlcyB1biBhcnJlZ2xvLCBhcGxpY2Ftb3MgZWwgcmVnZXggZGlyZWN0YW1lbnRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1RELnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWZXJpZmljYW1vcyBhcmVhSW50ZXJlcyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhPy5mcm9udG1hdHRlcj8uYXJlYUludGVyZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIGl0ZXJhbW9zIHNvYnJlIGNhZGEgZWxlbWVudG8gKGV4Y2x1eWVuZG8gZWwgcHJpbWVyIGVsZW1lbnRvIHlhIGFncmVnYWRvIHF1ZSBlcyBub3RhLnRpdHVsbylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8geSBhcGxpY2Ftb3MgZWwgcmVnZXggYSBjYWRhIGVsZW1lbnRvLiBMdWVnbyBjb25jYXRlbmFtb3MgY29uIGVsIGFycmF5IGV4aXN0ZW50ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gdGhpcy5ub3RhLmFyZWFJbnRlcmVzLmNvbmNhdChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLm1hcChlbGVtZW50byA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5vIGVzIHVuIGFycmVnbG8sIHJldmlzYW1vcyBzaSBub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzIGV4aXN0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LmFyZWFJbnRlcmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBleGlzdGUsIGFwbGljYW1vcyBlbCByZWdleCB5IGxvIGFcdTAwRjFhZGltb3MgY29tbyBzZWd1bmRvIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMucHVzaChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhbW9zIEFyZWFWaWRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LmFyZWFWaWRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFcyB1biBhcnJlZ2xvLCB1c2EgZWwgcHJpbWVyIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhWzBdLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFcyB1biBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIGVzdFx1MDBFMSBkZWZpbmlkbyBvIGVzdFx1MDBFMSB2YWNcdTAwRURvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IFwiTm8gZXMgZGUgbmluZ1x1MDBGQW4gQXJlYSBkZSBWaWRhXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gREVGSU5JUiBOSVZFTFBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb21wcnVlYmEgc2kgbml2ZWxBSSBleGlzdGUgeSBubyBlcyBOYU4gZGVzcHVcdTAwRTlzIGRlIGludGVudGFyIGNvbnZlcnRpcmxvIGEgZW50ZXJvXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHBhcnNlSW50KG5vdGE/LmZyb250bWF0dGVyPy5uaXZlbFApKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaXZlbCA9IHBhcnNlSW50KG5vdGEuZnJvbnRtYXR0ZXIubml2ZWxQKSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgbml2ZWxBSSBubyBleGlzdGUgbyBzdSBjb252ZXJzaVx1MDBGM24gYSBlbnRlcm8gcmVzdWx0YSBlbiBOYU4sIGVzdGFibGVjZSBuaXZlbCBhIDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbml2ZWwgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEubml2ZWxQID0gbml2ZWw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsgLy8gUEdURCB5IFBRXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiQUlcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWRVJJRklDQUNJT04gREUgQVJFQSBERSBJTlRFUkVTXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGE/LmZyb250bWF0dGVyPy50eXBlID09PSBcIkFJXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gW25vdGEuZnJvbnRtYXR0ZXIuZmlsZS5iYXNlbmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluaWNpYWxpemFtb3MgdGhpcy5ub3RhLmFyZWFJbnRlcmVzIGNvbiBub3RhLnRpdHVsbyBjb21vIGVsIHByaW1lciBlbGVtZW50by5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXN0ZSBzb2xvIGFwbGljYSBwYXJhIGN1YW5kbyBlc3RveSBjb25zdHJ1eWVuZG8gZGVzZGUgQXJlYSBkZSBJbnRlcmVzIG90cmEgQXJlYSBkZSBJbnRlcmVzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWZXJpZmljYW1vcyBzaSBub3RhLmFyZWFJbnRlcmVzIGVzIHVuIGFycmVnbG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhLmZyb250bWF0dGVyPy5hcmVhSW50ZXJlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXMgdW4gYXJyZWdsbywgaXRlcmFtb3Mgc29icmUgY2FkYSBlbGVtZW50byAoZXhjbHV5ZW5kbyBlbCBwcmltZXIgZWxlbWVudG8geWEgYWdyZWdhZG8gcXVlIGVzIG5vdGEudGl0dWxvKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB5IGFwbGljYW1vcyBlbCByZWdleCBhIGNhZGEgZWxlbWVudG8uIEx1ZWdvIGNvbmNhdGVuYW1vcyBjb24gZWwgYXJyYXkgZXhpc3RlbnRlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMgPSB0aGlzLm5vdGEuYXJlYUludGVyZXMuY29uY2F0KG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMubWFwKGVsZW1lbnRvID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50by5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgbm8gZXMgdW4gYXJyZWdsbywgcmV2aXNhbW9zIHNpIG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMgZXhpc3RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlci5hcmVhSW50ZXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXhpc3RlLCBhcGxpY2Ftb3MgZWwgcmVnZXggeSBsbyBhXHUwMEYxYWRpbW9zIGNvbW8gc2VndW5kbyBlbGVtZW50b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzLnB1c2gobm90YS5mcm9udG1hdHRlci5hcmVhSW50ZXJlcy5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5vIGVzIGFycmVnbG8gbmkgc3RyaW5nLCBhcmVhSW50ZXJlcyBlcyBlbCBhcmVhIGludGVyZXMgcXVlIGVzdFx1MDBFMSBlbiB0aXR1bG8uICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgbm90YS5mcm9udG1hdHRlci5hcmVhSW50ZXJlcyBubyBleGlzdGUsIHRoaXMubm90YS5hcmVhSW50ZXJlcyB5YSB0ZW5kclx1MDBFMSBub3RhLnRpdHVsbyBjb21vIHN1IFx1MDBGQW5pY28gZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiQVZcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWRVJJRklDQUNJT04gREUgQVJFQSBERSBWSURBXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGE/LmZyb250bWF0dGVyPy5hcmVhVmlkYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXMgdW4gYXJyZWdsbywgdXNhIGVsIHByaW1lciBlbGVtZW50b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gbm90YS5mcm9udG1hdHRlci5hcmVhVmlkYVswXS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXMgdW4gc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBObyBlc3RcdTAwRTEgZGVmaW5pZG8gbyBlc3RcdTAwRTEgdmFjXHUwMEVEb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBcIk5vIGVzIGRlIG5pbmdcdTAwRkFuIEFyZWEgZGUgVmlkYVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwb25pZW5kbyBzaSBBc3VudG8gZW4gZmFsc2UgcGFyYSBsYXMgbm90YXMgZXN0cnVjdHVyYSBBSSB5IEFWLiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LnR5cGUgPT09IFwiQUlcIiB8fCBub3RhPy5mcm9udG1hdHRlcj8udHlwZSA9PT0gXCJBVlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpQXN1bnRvID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gREVGSU5JUiBOSVZFTFBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb21wcnVlYmEgc2kgbml2ZWxBSSBleGlzdGUgeSBubyBlcyBOYU4gZGVzcHVcdTAwRTlzIGRlIGludGVudGFyIGNvbnZlcnRpcmxvIGEgZW50ZXJvXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHBhcnNlSW50KG5vdGEuZnJvbnRtYXR0ZXI/Lm5pdmVsUCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pdmVsID0gcGFyc2VJbnQobm90YS5mcm9udG1hdHRlci5uaXZlbFApICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBuaXZlbEFJIG5vIGV4aXN0ZSBvIHN1IGNvbnZlcnNpXHUwMEYzbiBhIGVudGVybyByZXN1bHRhIGVuIE5hTiwgZXN0YWJsZWNlIG5pdmVsIGEgMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaXZlbCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5uaXZlbFAgPSBuaXZlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIGFjdGl2YSBubyBlcyBvcmlnZW4gZGUgQ3JlYW5kbyBSUiAtIFBHVEQgLSBQUSAgaWYoc2lBc3VudG8pXG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7IC8vIGFjdGl2byA9PSBudWxsXG4gICAgICAgICAgICBzaUFzdW50byA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHNpQXN1bnRvLCBub21icmU6IHBhZHJlcyB9XG4gICAgfVxuICAgIFxuXG4gICAgYXN5bmMgZ2V0UHJveWVjdG9HVEQoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgICAgICBpZiAoIXRoaXMubm90YS5hc3VudG9EZWZpbmlkbykge1xuICAgICAgICAgICAgbGV0IG5vdGFzRiA9IGF3YWl0IEZpZWxkSGFuZGxlclV0aWxzLmZpbmRNYWluRmlsZXNXaXRoU3RhdGUoXCJQR1REXCIsIG51bGwsIHRoaXMucGx1Z2luKTsgLy8gUGFzYXIgbGEgaW5zdGFuY2lhIGRlbCBwbHVnaW4gYXF1XHUwMEVEbGV0IG5vdGFGLCB0aXR1bG87XG4gICAgICAgICAgICBsZXQgdGl0dWxvLCBuaXZlbDtcbiAgICAgICAgICAgIGxldCBwYWRyZVBHVEQgPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihbXCJTaVwiLCBcIk5vXCJdLCBbdHJ1ZSwgZmFsc2VdLCBmYWxzZSwgYCAke3RoaXMubm90YS50aXR1bG99IGVzIGhpam8gZGUgdW4gUHJveWVjdG8gR1REP2ApO1xuICAgICAgICAgICAgaWYgKHBhZHJlUEdURCkge1xuICAgICAgICAgICAgICAgIGxldCBub3RhRiA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKG5vdGFzRi5tYXAoYiA9PiBiLnRpdHVsbyksIG5vdGFzRi5tYXAoYiA9PiBiKSwgZmFsc2UsIGBcdTAwQkZRdVx1MDBFOSBQcm95ZWN0byBHVEQgZXMgcGFkcmUgZGUgJHt0aGlzLm5vdGEudGl0dWxvfT86YCk7XG4gICAgICAgICAgICAgICAgaWYgKG5vdGFGID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJTaW4gcHJveWVjdG8gR1REIGRlZmluaWRvLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGl0dWxvID0gW107XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm90YUY/LmFyZWFJbnRlcmVzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gdGhpcy5ub3RhLmFyZWFJbnRlcmVzLmNvbmNhdChub3RhRi5hcmVhSW50ZXJlcy5tYXAoZWxlbWVudG8gPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50by5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90YUY/LmFyZWFJbnRlcmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMucHVzaChub3RhRi5hcmVhSW50ZXJlcy5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAobm90YUY/LmFyZWFWaWRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhRi5hcmVhVmlkYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBub3RhRi5hcmVhVmlkYVswXS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygbm90YUYuYXJlYVZpZGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gbm90YUYuYXJlYVZpZGEucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IFwiTm8gZXMgZGUgbmluZ1x1MDBGQW4gQXJlYSBkZSBWaWRhXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9RID0gW107XG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGFGPy5wcm95ZWN0b1EpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9RID0gbm90YUYucHJveWVjdG9RLm1hcChlbGVtZW50byA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vdGFGPy5wcm95ZWN0b1EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b1EgPSBbbm90YUYucHJveWVjdG9RLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyldO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGl0dWxvID0gW25vdGFGLnRpdHVsb107XG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGFGPy5wcm95ZWN0b0dURCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdHVsbyA9IHRpdHVsby5jb25jYXQobm90YUYucHJveWVjdG9HVEQubWFwKGVsZW1lbnRvID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vdGFGPy5wcm95ZWN0b0dURCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0dWxvLnB1c2gobm90YUYucHJveWVjdG9HVEQucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFzdW50b0RlZmluaWRvID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRpdHVsbyA9IFtdO1xuICAgICAgICAgICAgICAgIG5pdmVsID0gMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRpdHVsbztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vdGEucHJveWVjdG9HVEQ7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGFzeW5jIGdldFByb3llY3RvUSgpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgICAgIGxldCBub3RhRiwgdGl0dWxvLCBuaXZlbDtcblxuICAgICAgICBpZiAoIXRoaXMubm90YS5hc3VudG9EZWZpbmlkbykge1xuICAgICAgICAgICAgbGV0IG5vdGFzRiA9IGF3YWl0IEZpZWxkSGFuZGxlclV0aWxzLmZpbmRNYWluRmlsZXNXaXRoU3RhdGUoXCJQUVwiLCBudWxsLCB0aGlzLnBsdWdpbik7IC8vIFBhc2FyIGxhIGluc3RhbmNpYSBkZWwgcGx1Z2luIGFxdVx1MDBFRFxuICAgICAgICAgICAgbGV0IHBhZHJlUSA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKFtcIlNpXCIsIFwiTm9cIl0sIFt0cnVlLCBmYWxzZV0sIGZhbHNlLCBgICR7dGhpcy5ub3RhLnRpdHVsb30gZXMgaGlqbyBkZSB1biBQcm95ZWN0byBRP2ApO1xuXG4gICAgICAgICAgICBpZiAocGFkcmVRKSB7XG4gICAgICAgICAgICAgICAgbm90YUYgPSBhd2FpdCB0aGlzLnN1Z2dlc3Rlcihub3Rhc0YubWFwKGIgPT4gYi50aXR1bG8pLCBub3Rhc0YubWFwKGIgPT4gYiksIGZhbHNlLCBgXHUwMEJGUXVcdTAwRTkgUHJveWVjdG8gUSBlcyBwYWRyZSBkZSAke3RoaXMubm90YS50aXR1bG99PzpgKTtcbiAgICAgICAgICAgICAgICBpZiAobm90YUYgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIlNpbiBwcm95ZWN0byBRIGRlZmluaWRvLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGl0dWxvID0gW107XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm90YUY/LmFyZWFJbnRlcmVzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gdGhpcy5ub3RhLmFyZWFJbnRlcmVzLmNvbmNhdChub3RhRi5hcmVhSW50ZXJlcy5tYXAoZWxlbWVudG8gPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50by5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90YUY/LmFyZWFJbnRlcmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMucHVzaChub3RhRi5hcmVhSW50ZXJlcy5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAobm90YUY/LmFyZWFWaWRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhRi5hcmVhVmlkYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBub3RhRi5hcmVhVmlkYVswXS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygbm90YUYuYXJlYVZpZGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gbm90YUYuYXJlYVZpZGEucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IFwiTm8gZXMgZGUgbmluZ1x1MDBGQW4gQXJlYSBkZSBWaWRhXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aXR1bG8gPSBbbm90YUY/LnRpdHVsb107XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvR1REID0gW107XG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGFGPy5wcm95ZWN0b0dURCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b0dURCA9IG5vdGFGLnByb3llY3RvR1RELm1hcChlbGVtZW50byA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vdGFGPy5wcm95ZWN0b0dURCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvR1REID0gW25vdGFGLnByb3llY3RvR1RELnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hc3VudG9EZWZpbmlkbyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aXR1bG8gPSBbXTtcbiAgICAgICAgICAgICAgICBuaXZlbCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGl0dWxvO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm90YS5wcm95ZWN0b1E7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBnZXRBcmVhSW50ZXJlcygpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgICAgIGxldCBhcmVhSW50ZXJlcywgbml2ZWwsIHRpdHVsbywgcGFkcmVBSSwgYXJyYXlBSTtcblxuICAgICAgICBpZiAoIXRoaXMubm90YS5hc3VudG9EZWZpbmlkbykge1xuICAgICAgICAgICAgbGV0IGFyZWFzSW50ZXJlcyA9IGF3YWl0IEZpZWxkSGFuZGxlclV0aWxzLmZpbmRNYWluRmlsZXNXaXRoU3RhdGUoXCJBSVwiLCBudWxsLCB0aGlzLnBsdWdpbik7IC8vIFBhc2FyIGxhIGluc3RhbmNpYSBkZWwgcGx1Z2luIGFxdVx1MDBFRFxuICAgICAgICAgICAgcGFkcmVBSSA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKFtcIlNpXCIsIFwiTm9cIl0sIFt0cnVlLCBmYWxzZV0sIGZhbHNlLCBgICR7dGhpcy5ub3RhLnRpdHVsb30gZXMgaGlqbyBkZSB1biBcdTAwQzFyZWEgZGUgSW50ZXJcdTAwRTlzOmApO1xuICAgICAgICAgICAgaWYgKHBhZHJlQUkpIHtcbiAgICAgICAgICAgICAgICBhcmVhSW50ZXJlcyA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKGFyZWFzSW50ZXJlcy5tYXAoYiA9PiBiLnRpdHVsbyksIGFyZWFzSW50ZXJlcy5tYXAoYiA9PiBiKSwgZmFsc2UsIGBcdTAwQkZRdVx1MDBFOSBcdTAwQzFyZWEgZGUgSW50ZXJcdTAwRTlzIGVzIHBhZHJlIGRlICR7dGhpcy5ub3RhLnRpdHVsb30/OmApO1xuICAgICAgICAgICAgICAgIGlmIChhcmVhSW50ZXJlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiU2luIFx1MDBDMXJlYSBkZSBJbnRlclx1MDBFOXNcIik7XG4gICAgICAgICAgICAgICAgICAgIHRpdHVsbyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBuaXZlbCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aXR1bG8gPSBbYXJlYUludGVyZXMudGl0dWxvXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJlYUludGVyZXM/LmFyZWFJbnRlcmVzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0dWxvID0gdGl0dWxvLmNvbmNhdChhcmVhSW50ZXJlcy5hcmVhSW50ZXJlcy5tYXAoZWxlbWVudG8gPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50by5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJlYUludGVyZXM/LmFyZWFJbnRlcmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXR1bG8ucHVzaChhcmVhSW50ZXJlcy5hcmVhSW50ZXJlcy5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmVhSW50ZXJlcz8uYXJlYVZpZGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZWFJbnRlcmVzLmFyZWFWaWRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IGFyZWFJbnRlcmVzLmFyZWFWaWRhWzBdLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmVhSW50ZXJlcy5hcmVhVmlkYSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBhcmVhSW50ZXJlcy5hcmVhVmlkYS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gXCJObyBlcyBkZSBuaW5nXHUwMEZBbiBBcmVhIGRlIFZpZGFcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXN1bnRvRGVmaW5pZG8gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBuaXZlbCA9IHBhcnNlSW50KGFyZWFJbnRlcmVzLm5pdmVsQUkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGl0dWxvID0gW107XG4gICAgICAgICAgICAgICAgbml2ZWwgPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLm5vdGEubml2ZWxBSSA9IG5pdmVsO1xuICAgICAgICAgICAgcmV0dXJuIHRpdHVsbztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vdGEuYXJlYUludGVyZXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBnZXRBcmVhVmlkYSgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBsZXQgYXJlYXNWaWRhID0ge307XG4gICAgICAgIGxldCBub0FWID0ge1xuICAgICAgICAgICAgZmlsZToge1xuICAgICAgICAgICAgICAgIGJhc2VuYW1lOiBcIk5vIGVzIGRlIG5pbmdcdTAwRkFuIEFyZWEgZGUgVmlkYVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXJlYVZpZGE6IFwiTm8gZXMgZGUgbmluZ1x1MDBGQW4gQXJlYSBkZSBWaWRhXCJcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoIXRoaXMubm90YS5hc3VudG9EZWZpbmlkbykge1xuICAgICAgICAgICAgbGV0IHBhZHJlQVYgPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihbXCJTaVwiLCBcIk5vXCJdLCBbdHJ1ZSwgZmFsc2VdLCBmYWxzZSwgYCAke3RoaXMubm90YS50aXR1bG99IGVzIGhpam8gZGUgdW4gXHUwMEMxcmVhIGRlIFZpZGE/YCk7XG4gICAgICAgICAgICBpZiAocGFkcmVBVikge1xuICAgICAgICAgICAgICAgIGFyZWFzVmlkYSA9IGF3YWl0IEZpZWxkSGFuZGxlclV0aWxzLmZpbmRNYWluRmlsZXNXaXRoU3RhdGUoXCJBVlwiLCBudWxsLCB0aGlzLnBsdWdpbik7IC8vIFBhc2FyIGxhIGluc3RhbmNpYSBkZWwgcGx1Z2luIGFxdVx1MDBFRFxuICAgICAgICAgICAgICAgIGFyZWFzVmlkYS5wdXNoKG5vQVYpO1xuICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKGFyZWFzVmlkYS5tYXAoYiA9PiBiLmZpbGUuYmFzZW5hbWUpLCBhcmVhc1ZpZGEubWFwKGIgPT4gYi5maWxlLmJhc2VuYW1lKSwgZmFsc2UsIGBcdTAwQkZBIHF1XHUwMEU5IFx1MDBDMXJlYSBkZSBWaWRhIHBlcnRlbmVjZSAkJHt0aGlzLm5vdGEudGl0dWxvfT86YCk7XG4gICAgICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gXCJObyBlcyBkZSBuaW5nXHUwMEZBbiBBcmVhIGRlIFZpZGFcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm90YS5hcmVhVmlkYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vdGEuYXJlYVZpZGE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBnZXRBbGlhc2VzKCk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICAgICAgdGhpcy5ub3RhLmFsaWFzZXMgPSBbXTtcbiAgICAgICAgdGhpcy5ub3RhLmFsaWFzZXMucHVzaChgJHt0aGlzLm5vdGEudGl0dWxvfWApXG4gICAgICAgIHRoaXMubm90YS5hbGlhc2VzLnB1c2goYCR7dGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlfS8ke3RoaXMubm90YS50aXR1bG99YClcbiAgICAgICAgcmV0dXJuIHRoaXMubm90YS5hbGlhc2VzO1xuICAgIH1cblxuLy8gQWN0dWFsaXphY2lcdTAwRjNuIGRlbCBtXHUwMEU5dG9kbyBnZXRSZW5hbWUgZW4gTm90ZUZpZWxkSGFuZGxlckJhc2UudHNcbi8vIChFc3RlIGVzIGVsIG1cdTAwRTl0b2RvIHF1ZSBzZSB1dGlsaXphclx1MDBFMSBlbiBsYSBtYXlvclx1MDBFRGEgZGUgbGFzIGNsYXNlcyBkZSBtYW5lam8gZGUgbm90YXMpXG5cbmFzeW5jIGdldFJlbmFtZSgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IG5ld05hbWUgPSBgJHt0aGlzLmluZm9TdWJzaXN0ZW1hLmZvbGRlcn0vJHt0aGlzLmluZm9TdWJzaXN0ZW1hLnR5cGV9IC0gJHt0aGlzLm5vdGEuaWR9Lm1kYDtcbiAgICBhd2FpdCBGaWVsZEhhbmRsZXJVdGlscy5jcmVhckNhcnBldGEodGhpcy5pbmZvU3Vic2lzdGVtYS5mb2xkZXIpO1xuICBcbiAgICBjb25zdCBmaWxlID0gdGhpcy50cC5maWxlLmNvbmZpZy50YXJnZXRfZmlsZTtcbiAgICBjb25zdCBleGlzdGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG5ld05hbWUpO1xuICBcbiAgICB0cnkge1xuICAgICAgaWYgKGV4aXN0ZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgIGNvbnN0IG5vbWJyZUZpbGUgPSBuZXdOYW1lLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgY29uc3QgYm9ycmFyID0gYXdhaXQgdGhpcy5zdWdnZXN0ZXIoXG4gICAgICAgICAgW1wiU29icmVlc2NyaWJpciBBcmNoaXZvIEFjdHVhbFwiLCBcIkRldGVuZXIgY3JlYWNpXHUwMEYzbiBkZWwgYXJjaGl2by5cIl0sXG4gICAgICAgICAgW3RydWUsIGZhbHNlXSxcbiAgICAgICAgICB0cnVlLFxuICAgICAgICAgIGBcdTAwQkYke25vbWJyZUZpbGUucG9wKCl9IHlhIGV4aXN0ZS4gUXVcdTAwRTkgZGVzZWFzIGhhY2VyP2BcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGJvcnJhcikge1xuICAgICAgICAgIGF3YWl0IGFwcC52YXVsdC5kZWxldGUoZXhpc3RlKTtcbiAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICBhd2FpdCBhcHAudmF1bHQucmVuYW1lKGZpbGUsIG5ld05hbWUpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJBcmNoaXZvIHJlbm9tYnJhZG8gY29uIFx1MDBFOXhpdG8uXCIpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBOVUVWQSBGVU5DSU9OQUxJREFEOiBBYnJpciBlbCBhcmNoaXZvIHJlbm9tYnJhZG8gZW4gdW5hIG51ZXZhIHBlc3RhXHUwMEYxYVxuICAgICAgICAgICAgY29uc3QgbnVldm9BcmNoaXZvID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChuZXdOYW1lKTtcbiAgICAgICAgICAgIGlmIChudWV2b0FyY2hpdm8gaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICBhd2FpdCBhcHAud29ya3NwYWNlLmdldExlYWYodHJ1ZSkub3BlbkZpbGUobnVldm9BcmNoaXZvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIG5ld05hbWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ2FuY2VsYW5kbyBsYSBjcmVhY2lcdTAwRjNuIGRlbCBhcmNoaXZvLlwiKTtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcm9jZXNvIGNhbmNlbGFkbyBwb3IgZWwgdXN1YXJpby5cIik7IC8vIExhbnphbW9zIHVuYSBleGNlcGNpXHUwMEYzbiBwYXJhIGRldGVuZXIgbGEgY3JlYWNpXHUwMEYzblxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LnJlbmFtZShmaWxlLCBuZXdOYW1lKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkFyY2hpdm8gcmVub21icmFkbyBjb24gXHUwMEU5eGl0by5cIik7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gTlVFVkEgRlVOQ0lPTkFMSURBRDogQWJyaXIgZWwgYXJjaGl2byByZW5vbWJyYWRvIGVuIHVuYSBudWV2YSBwZXN0YVx1MDBGMWFcbiAgICAgICAgICBjb25zdCBudWV2b0FyY2hpdm8gPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG5ld05hbWUpO1xuICAgICAgICAgIGlmIChudWV2b0FyY2hpdm8gaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgYXdhaXQgYXBwLndvcmtzcGFjZS5nZXRMZWFmKHRydWUpLm9wZW5GaWxlKG51ZXZvQXJjaGl2byk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIHJldHVybiBuZXdOYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhbCBjYW1iaWFyIGVsIG5vbWJyZVwiLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjsgLy8gTGFuemFtb3MgbGEgZXhjZXBjaVx1MDBGM24gcGFyYSBkZXRlbmVyIGxhIGNyZWFjaVx1MDBGM25cbiAgICB9XG4gIH1cbn0iLCAiaW1wb3J0IHsgTm90ZUZpZWxkSGFuZGxlciB9IGZyb20gJy4uL0ZIIEJhc2UvTm90ZUZpZWxkSGFuZGxlcic7IC8vIEFzZWdcdTAwRkFyYXRlIGRlIGltcG9ydGFyIE5vdGVGaWVsZEhhbmRsZXIgc2kgZXMgbmVjZXNhcmlvXG5cbmV4cG9ydCBjbGFzcyBDb250ZW5pZG9QYXJhRXN0dWRpb0ZpZWxkSGFuZGxlciBleHRlbmRzIE5vdGVGaWVsZEhhbmRsZXJ7XG4gICAgY29uc3RydWN0b3IodHA6IGFueSwgZm9sZGVyOiBzdHJpbmcsIHBsdWdpbjogYW55KSB7XG4gICAgICBzdXBlcih0cCwgZm9sZGVyLCBwbHVnaW4pOyAvLyBMbGFtYSBhbCBjb25zdHJ1Y3RvciBkZSBsYSBjbGFzZSBwYWRyZVxuICAgIH1cbiAgfSIsICJpbXBvcnQgeyBOb3RlRmllbGRIYW5kbGVyIH0gZnJvbSAnLi9GSCBCYXNlL05vdGVGaWVsZEhhbmRsZXInOyAvLyBBc2VnXHUwMEZBcmF0ZSBkZSBpbXBvcnRhciBOb3RlRmllbGRIYW5kbGVyIHNpIGVzIG5lY2VzYXJpb1xuXG5leHBvcnQgY2xhc3MgUmVjdXJzb3NSZWN1cnJlbnRlc0ZpZWxkSGFuZGxlciBleHRlbmRzIE5vdGVGaWVsZEhhbmRsZXJ7XG4gICAgY29uc3RydWN0b3IodHA6IGFueSwgZm9sZGVyOiBzdHJpbmcsIHBsdWdpbjogYW55KSB7XG4gICAgICBzdXBlcih0cCwgZm9sZGVyLCBwbHVnaW4pOyAvLyBMbGFtYSBhbCBjb25zdHJ1Y3RvciBkZSBsYSBjbGFzZSBwYWRyZVxuICAgIH1cbiAgfSIsICJpbXBvcnQgeyBOb3RlRmllbGRIYW5kbGVyIH0gZnJvbSAnLi4vRkggQmFzZS9Ob3RlRmllbGRIYW5kbGVyJzsgLy8gQXNlZ1x1MDBGQXJhdGUgZGUgaW1wb3J0YXIgTm90ZUZpZWxkSGFuZGxlciBzaSBlcyBuZWNlc2FyaW9cbmltcG9ydCB7IEZpZWxkSGFuZGxlclV0aWxzIH0gZnJvbSAnLi4vLi4vRmllbGRIYW5kbGVyVXRpbHMnO1xuaW1wb3J0IHsgVEZpbGUsIFRGb2xkZXIsIE5vdGljZSB9IGZyb20gJ29ic2lkaWFuJztcblxuZXhwb3J0IGNsYXNzIFBHVERGaWVsZEhhbmRsZXIgZXh0ZW5kcyBOb3RlRmllbGRIYW5kbGVye1xuICAgIGNvbnN0cnVjdG9yKHRwOiBhbnksIGZvbGRlcjogc3RyaW5nLCBwbHVnaW46IGFueSkge1xuICAgICAgc3VwZXIodHAsIGZvbGRlciwgcGx1Z2luKTsgLy8gTGxhbWEgYWwgY29uc3RydWN0b3IgZGUgbGEgY2xhc2UgcGFkcmVcbiAgICB9XG5cbiAgICBhc3luYyBnZXRBc3VudG8oKXsgLy8gRnVuY2lvbmEgY29uIGZyb250bWF0dGVyXG5cbiAgICAgICAgbGV0IHRpcG9TaXN0ZW1hID0gdGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlO1xuICAgICAgICBsZXQgbm9tYnJlU2lzdGVtYSA9IHRoaXMuaW5mb1N1YnNpc3RlbWEudHlwZU5hbWU7XG4gICAgICAgIGxldCBzdWJzaXN0ZW1hcywgcGFkcmVzID0gW107XG4gICAgICAgIGxldCBhY3Rpdm8gPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcbiAgICAgICAgbGV0IHNpQXN1bnRvID0gZmFsc2U7XG4gICAgICAgIGxldCBub21icmUgPSBcIlwiO1xuICAgICAgICBsZXQgbm90YTtcbiAgICAgICAgaWYgKGFjdGl2byAhPSBudWxsKSB7XG4gICAgICAgICAgICBub21icmUgPSBhY3Rpdm8uYmFzZW5hbWU7XG4gICAgICAgICAgICBub3RhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGFjdGl2byk7XG4gICAgICAgICAgICAvLyBBc2VndXJhciBxdWUgbm90YS5mcm9udG1hdHRlciBleGlzdGUgeSBhc2lnbmFyIHVuIG9iamV0byB2YWNcdTAwRURvIGEgZmlsZVxuICAgICAgICAgICAgbm90YS5mcm9udG1hdHRlciA9IG5vdGEuZnJvbnRtYXR0ZXIgfHwge307XG4gICAgICAgICAgICBub3RhLmZyb250bWF0dGVyLmZpbGUgPSB7fTtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24obm90YS5mcm9udG1hdHRlci5maWxlLCBhY3Rpdm8pO1xuICAgICAgICAgICAgcGFkcmVzLnVuc2hpZnQobm9tYnJlKTsgLy8gQVx1MDBGMWFkZSBlbCBub21icmUgYWwgaW5pY2lvIGRlbCBhcnJlZ2xvLCBkZXNwbGF6YW5kbyBsb3MgZGVtXHUwMEUxcyBlbGVtZW50b3NcbiAgICAgICAgICAgIHN3aXRjaCh0aXBvU2lzdGVtYSkgeyAvLyBFc3RveSBjcmVhbmRvIHVuOiBcbiAgICAgICAgICAgICAgICBjYXNlIFwiUlJcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiUEdURFwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJBeFwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJUeFwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJDUEVcIjogIC8vIENvbnRlbmlkbyBwYXJhIEVzdHVkaW9cbiAgICAgICAgICAgICAgICAgICAgc2lBc3VudG8gPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihbXCJTaVwiLCBcIk5vXCJdLCBbdHJ1ZSwgZmFsc2VdLCB0cnVlLCBub21icmUgKyBcIiBlcyBvcmlnZW4gZGUgXCIgKyB0aGlzLm5vdGEudGl0dWxvICsgXCI/XCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2lBc3VudG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFzdW50b0RlZmluaWRvID0gdHJ1ZTsgLy8gUGFyYSBxdWUgbm8gZWplY3V0ZSBsYSBidXNxdWVkYSBkZSBBcmVhIFZpZGEsIEFyZWEgZGUgSW50ZXJcdTAwRTlzLCBwcm95ZWN0byBRIG8gR1REXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbml2ZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG5vdGE/LmZyb250bWF0dGVyPy50eXBlKXsgLy8gTGEgbm90YSBhY3RpdnMgZXMgdW5hOiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJQR1REXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlBRXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWRVJJRklDQUNJT04gREUgUFJPWUVDVE9TIERFIFEgWSBQUk9ZRUNUTyBHVERcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGEuZnJvbnRtYXR0ZXI/LnR5cGUgPT09IFwiUFFcIil7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDVUFORE8gTEEgTk9UQSBBQ1RJVkEgRVMgVU4gUFEuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b1EgPSBub21icmU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIFBST1lFQ1RPU0dURFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbmljaWFsaXphbW9zIHRoaXMubm90YS5wcm95ZWN0b0dURCBjb24gdW4gdmFsb3IgcHJlZGV0ZXJtaW5hZG8gZGUgY2FkZW5hIHZhY1x1MDBFRGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvR1REID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmVyaWZpY2Ftb3Mgc2kgbm90YS5wcm95ZWN0b0dURCBleGlzdGUgeSBlcyB1biBhcnJlZ2xvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBlcyB1biBhcnJlZ2xvLCBpdGVyYW1vcyBzb2JyZSBjYWRhIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1RELm1hcChlbGVtZW50byA9PiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50by5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1REKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBleGlzdGUgcGVybyBubyBlcyB1biBhcnJlZ2xvLCBhcGxpY2Ftb3MgZWwgcmVnZXggZGlyZWN0YW1lbnRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1RELnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgbm90YS5wcm95ZWN0b0dURCBubyBleGlzdGUsIHRoaXMubm90YS5wcm95ZWN0b0dURCB5YSBlc3RcdTAwRTEgZXN0YWJsZWNpZG8gZW4gXCJcIiBwb3IgZGVmZWN0b1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPYnRlbmVyIFByb3llY3RvUSB5IFByb3llY3RvIEdURCBjdWFuZG8gbGEgbm90YSBlcyBQcm95ZWN0b0dURC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90YS5mcm9udG1hdHRlcj8udHlwZSA9PT0gXCJQR1REXCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDVUFORE8gTEEgTk9UQSBBQ1RJVkEgRVMgVU4gR1RELlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIFBST1lFQ1RPU0dURFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvR1REID0gW25vbWJyZV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXMgdW4gYXJyZWdsbywgdXRpbGl6YW1vcyBjb25jYXQgcGFyYSBhXHUwMEYxYWRpciBsb3MgZWxlbWVudG9zIHlhIHByb2Nlc2Fkb3MgY29uIGVsIHJlZ2V4IGFsIGFycmVnbG8gdGhpcy5ub3RhLnByb3llY3RvR1REXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvR1REID0gdGhpcy5ub3RhLnByb3llY3RvR1RELmNvbmNhdChub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1RELm1hcChlbGVtZW50byA9PiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1REKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXhpc3RlIHBlcm8gbm8gZXMgdW4gYXJyZWdsbywgYXBsaWNhbW9zIGVsIHJlZ2V4IGRpcmVjdGFtZW50ZSB5IHVzYW1vcyBwdXNoIHBhcmEgYWdyZWdhcmxvIGEgdGhpcy5ub3RhLnByb3llY3RvR1REXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvR1RELnB1c2gobm90YS5mcm9udG1hdHRlci5wcm95ZWN0b0dURC5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgbm90YS5wcm95ZWN0b0dURCBubyBleGlzdGUsIHRoaXMubm90YS5wcm95ZWN0b0dURCB5YSBlc3RcdTAwRTEgZXN0YWJsZWNpZG8gZW4gXCJcIiBwb3IgZGVmZWN0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvUSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhLmZyb250bWF0dGVyLnByb3llY3RvUSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIGl0ZXJhbW9zIHNvYnJlIGNhZGEgZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b1EgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvUS5tYXAoZWxlbWVudG8gPT4gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90YS5mcm9udG1hdHRlci5wcm95ZWN0b1EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSBwZXJvIG5vIGVzIHVuIGFycmVnbG8sIGFwbGljYW1vcyBlbCByZWdleCBkaXJlY3RhbWVudGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b1EgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvUS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT2J0ZW5lciBQcm95ZWN0b1EgeSBQcm95ZWN0byBHVEQgY3VhbmRvIGxhIG5vdGEgZXMgb3RyYSBjb3NhIHF1ZSBubyBlcyBwcm95ZWN0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvUSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhPy5mcm9udG1hdHRlcj8ucHJveWVjdG9RKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIGl0ZXJhbW9zIHNvYnJlIGNhZGEgZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9RID0gbm90YS5mcm9udG1hdHRlci5wcm95ZWN0b1EubWFwKGVsZW1lbnRvID0+IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50by5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LnByb3llY3RvUSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSBwZXJvIG5vIGVzIHVuIGFycmVnbG8sIGFwbGljYW1vcyBlbCByZWdleCBkaXJlY3RhbWVudGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9RID0gbm90YS5mcm9udG1hdHRlci5wcm95ZWN0b1EucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvR1REID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhbW9zIHNpIG5vdGEucHJveWVjdG9HVEQgZXhpc3RlIHkgZXMgdW4gYXJyZWdsb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm90YT8uZnJvbnRtYXR0ZXI/LnByb3llY3RvR1REKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIGl0ZXJhbW9zIHNvYnJlIGNhZGEgZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1RELm1hcChlbGVtZW50byA9PiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vdGE/LmZyb250bWF0dGVyPy5wcm95ZWN0b0dURCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSBwZXJvIG5vIGVzIHVuIGFycmVnbG8sIGFwbGljYW1vcyBlbCByZWdleCBkaXJlY3RhbWVudGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1RELnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWZXJpZmljYW1vcyBhcmVhSW50ZXJlcyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGE/LmZyb250bWF0dGVyPy5hcmVhSW50ZXJlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIGl0ZXJhbW9zIHNvYnJlIGNhZGEgZWxlbWVudG8gKGV4Y2x1eWVuZG8gZWwgcHJpbWVyIGVsZW1lbnRvIHlhIGFncmVnYWRvIHF1ZSBlcyBub3RhLnRpdHVsbylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHkgYXBsaWNhbW9zIGVsIHJlZ2V4IGEgY2FkYSBlbGVtZW50by4gTHVlZ28gY29uY2F0ZW5hbW9zIGNvbiBlbCBhcnJheSBleGlzdGVudGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMgPSB0aGlzLm5vdGEuYXJlYUludGVyZXMuY29uY2F0KG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMubWFwKGVsZW1lbnRvID0+IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5vIGVzIHVuIGFycmVnbG8sIHJldmlzYW1vcyBzaSBub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzIGV4aXN0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGE/LmZyb250bWF0dGVyPy5hcmVhSW50ZXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSwgYXBsaWNhbW9zIGVsIHJlZ2V4IHkgbG8gYVx1MDBGMWFkaW1vcyBjb21vIHNlZ3VuZG8gZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMucHVzaChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhbW9zIEFyZWFWaWRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlcj8uYXJlYVZpZGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXMgdW4gYXJyZWdsbywgdXNhIGVsIHByaW1lciBlbGVtZW50b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGFbMF0ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXMgdW4gc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gbm90YS5mcm9udG1hdHRlci5hcmVhVmlkYS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gZXN0XHUwMEUxIGRlZmluaWRvIG8gZXN0XHUwMEUxIHZhY1x1MDBFRG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IFwiTm8gZXMgZGUgbmluZ1x1MDBGQW4gQXJlYSBkZSBWaWRhXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERFRklOSVIgTklWRUxQXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbXBydWViYSBzaSBuaXZlbEFJIGV4aXN0ZSB5IG5vIGVzIE5hTiBkZXNwdVx1MDBFOXMgZGUgaW50ZW50YXIgY29udmVydGlybG8gYSBlbnRlcm9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4ocGFyc2VJbnQobm90YT8uZnJvbnRtYXR0ZXI/Lm5pdmVsUCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaXZlbCA9IHBhcnNlSW50KG5vdGEuZnJvbnRtYXR0ZXIubml2ZWxQKSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBuaXZlbEFJIG5vIGV4aXN0ZSBvIHN1IGNvbnZlcnNpXHUwMEYzbiBhIGVudGVybyByZXN1bHRhIGVuIE5hTiwgZXN0YWJsZWNlIG5pdmVsIGEgMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbml2ZWwgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5uaXZlbFAgPSBuaXZlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7IC8vIFBHVEQgeSBQUVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJBSVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIEFSRUEgREUgSU5URVJFU1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LnR5cGUgPT09IFwiQUlcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMgPSBbbm90YS5mcm9udG1hdHRlci5maWxlLmJhc2VuYW1lXTsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbmljaWFsaXphbW9zIHRoaXMubm90YS5hcmVhSW50ZXJlcyBjb24gbm90YS50aXR1bG8gY29tbyBlbCBwcmltZXIgZWxlbWVudG8uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFc3RlIHNvbG8gYXBsaWNhIHBhcmEgY3VhbmRvIGVzdG95IGNvbnN0cnV5ZW5kbyBkZXNkZSBBcmVhIGRlIEludGVyZXMgb3RyYSBBcmVhIGRlIEludGVyZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhbW9zIHNpIG5vdGEuYXJlYUludGVyZXMgZXMgdW4gYXJyZWdsb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm90YS5mcm9udG1hdHRlcj8uYXJlYUludGVyZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBlcyB1biBhcnJlZ2xvLCBpdGVyYW1vcyBzb2JyZSBjYWRhIGVsZW1lbnRvIChleGNsdXllbmRvIGVsIHByaW1lciBlbGVtZW50byB5YSBhZ3JlZ2FkbyBxdWUgZXMgbm90YS50aXR1bG8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB5IGFwbGljYW1vcyBlbCByZWdleCBhIGNhZGEgZWxlbWVudG8uIEx1ZWdvIGNvbmNhdGVuYW1vcyBjb24gZWwgYXJyYXkgZXhpc3RlbnRlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gdGhpcy5ub3RhLmFyZWFJbnRlcmVzLmNvbmNhdChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLm1hcChlbGVtZW50byA9PiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50by5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBubyBlcyB1biBhcnJlZ2xvLCByZXZpc2Ftb3Mgc2kgbm90YS5mcm9udG1hdHRlci5hcmVhSW50ZXJlcyBleGlzdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlci5hcmVhSW50ZXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSwgYXBsaWNhbW9zIGVsIHJlZ2V4IHkgbG8gYVx1MDBGMWFkaW1vcyBjb21vIHNlZ3VuZG8gZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMucHVzaChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5vIGVzIGFycmVnbG8gbmkgc3RyaW5nLCBhcmVhSW50ZXJlcyBlcyBlbCBhcmVhIGludGVyZXMgcXVlIGVzdFx1MDBFMSBlbiB0aXR1bG8uICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMgbm8gZXhpc3RlLCB0aGlzLm5vdGEuYXJlYUludGVyZXMgeWEgdGVuZHJcdTAwRTEgbm90YS50aXR1bG8gY29tbyBzdSBcdTAwRkFuaWNvIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJBVlwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWRVJJRklDQUNJT04gREUgQVJFQSBERSBWSURBXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlcj8uYXJlYVZpZGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXMgdW4gYXJyZWdsbywgdXNhIGVsIHByaW1lciBlbGVtZW50b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGFbMF0ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXMgdW4gc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gbm90YS5mcm9udG1hdHRlci5hcmVhVmlkYS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gZXN0XHUwMEUxIGRlZmluaWRvIG8gZXN0XHUwMEUxIHZhY1x1MDBFRG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IFwiTm8gZXMgZGUgbmluZ1x1MDBGQW4gQXJlYSBkZSBWaWRhXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcG9uaWVuZG8gc2kgQXN1bnRvIGVuIGZhbHNlIHBhcmEgbGFzIG5vdGFzIGVzdHJ1Y3R1cmEgQUkgeSBBVi4gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlcj8udHlwZSA9PT0gXCJBSVwifHxub3RhPy5mcm9udG1hdHRlcj8udHlwZSA9PT0gXCJBVlwiKXsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaUFzdW50byA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gREVGSU5JUiBOSVZFTFBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29tcHJ1ZWJhIHNpIG5pdmVsQUkgZXhpc3RlIHkgbm8gZXMgTmFOIGRlc3B1XHUwMEU5cyBkZSBpbnRlbnRhciBjb252ZXJ0aXJsbyBhIGVudGVyb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihwYXJzZUludChub3RhLmZyb250bWF0dGVyPy5uaXZlbFApKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbml2ZWwgPSBwYXJzZUludChub3RhLmZyb250bWF0dGVyLm5pdmVsUCkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgbml2ZWxBSSBubyBleGlzdGUgbyBzdSBjb252ZXJzaVx1MDBGM24gYSBlbnRlcm8gcmVzdWx0YSBlbiBOYU4sIGVzdGFibGVjZSBuaXZlbCBhIDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pdmVsID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEubml2ZWxQID0gbml2ZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXsgLy8gYWN0aXZhIG5vIGVzIG9yaWdlbiBkZSBDcmVhbmRvIFJSIC0gUEdURCAtIFBRICBpZihzaUFzdW50bylcblxuICAgICAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgICAgICBicmVhazsgLy8gQ3JlYW5kbyBSUlxuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY2FzZSBcIlBRXCI6ICAvLyBFc3RveSBDcmVhbmRvIHVuIFBRIFxuICAgICAgICAgICAgICAgICAgICBzaUFzdW50byA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKFtcIlNpXCIsIFwiTm9cIl0sIFt0cnVlLCBmYWxzZV0sIHRydWUsIG5vbWJyZSArIFwiIGVzIG9yaWdlbiBkZSBcIiArIHRoaXMubm90YS50aXR1bG8gKyBcIj9cIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaUFzdW50bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQUSByZXF1aWVyZSBvYmxpZ2F0b3JpYW1lbnRlIHRlbmVyIEFyZWEgZGUgVmlkYS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlcj8uYXJlYVZpZGEgIT09IHVuZGVmaW5lZCAmJiBub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ1x1MDBGM2RpZ28gYSBlamVjdXRhciBzaSBhcmVhVmlkYSBleGlzdGUgeSBubyBlcyB1bmEgY2FkZW5hIHZhY1x1MDBFRGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFcyB1biBhcnJlZ2xvLCB1c2EgZWwgcHJpbWVyIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGFbMF0ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFcyB1biBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gbm90YS5mcm9udG1hdHRlci5hcmVhVmlkYS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcG9uaWVuZG8gc2kgQXN1bnRvIGVuIGZhbHNlIHBhcmEgbGFzIG5vdGFzIGVzdHJ1Y3R1cmEgQUkgeSBBVi4gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGE/LmZyb250bWF0dGVyPy50eXBlID09PSBcIkFJXCJ8fG5vdGE/LmZyb250bWF0dGVyPy50eXBlID09PSBcIkFWXCIpeyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lBc3VudG8gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbml2ZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG5vdGE/LmZyb250bWF0dGVyPy50eXBlKXsgLy8gdGlwbyBkZSBub3RhIGFjdGl2YSBjcmVhbmRvIHVuIFBRLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJQR1REXCI6XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIFBST1lFQ1RPU0dURFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBbbm9tYnJlXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1REKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXMgdW4gYXJyZWdsbywgdXRpbGl6YW1vcyBjb25jYXQgcGFyYSBhXHUwMEYxYWRpciBsb3MgZWxlbWVudG9zIHlhIHByb2Nlc2Fkb3MgY29uIGVsIHJlZ2V4IGFsIGFycmVnbG8gdGhpcy5ub3RhLnByb3llY3RvR1REXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSB0aGlzLm5vdGEucHJveWVjdG9HVEQuY29uY2F0KG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQubWFwKGVsZW1lbnRvID0+IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1REKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBleGlzdGUgcGVybyBubyBlcyB1biBhcnJlZ2xvLCBhcGxpY2Ftb3MgZWwgcmVnZXggZGlyZWN0YW1lbnRlIHkgdXNhbW9zIHB1c2ggcGFyYSBhZ3JlZ2FybG8gYSB0aGlzLm5vdGEucHJveWVjdG9HVERcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b0dURC5wdXNoKG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiQUlcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIEFSRUEgREUgSU5URVJFU1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LnR5cGUgPT09IFwiQUlcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMgPSBbbm90YS5mcm9udG1hdHRlci5maWxlLmJhc2VuYW1lXTsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbmljaWFsaXphbW9zIHRoaXMubm90YS5hcmVhSW50ZXJlcyBjb24gbm90YS50aXR1bG8gY29tbyBlbCBwcmltZXIgZWxlbWVudG8uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFc3RlIHNvbG8gYXBsaWNhIHBhcmEgY3VhbmRvIGVzdG95IGNvbnN0cnV5ZW5kbyBkZXNkZSBBcmVhIGRlIEludGVyZXMgb3RyYSBBcmVhIGRlIEludGVyZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhbW9zIHNpIG5vdGEuYXJlYUludGVyZXMgZXMgdW4gYXJyZWdsb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm90YS5mcm9udG1hdHRlcj8uYXJlYUludGVyZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBlcyB1biBhcnJlZ2xvLCBpdGVyYW1vcyBzb2JyZSBjYWRhIGVsZW1lbnRvIChleGNsdXllbmRvIGVsIHByaW1lciBlbGVtZW50byB5YSBhZ3JlZ2FkbyBxdWUgZXMgbm90YS50aXR1bG8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB5IGFwbGljYW1vcyBlbCByZWdleCBhIGNhZGEgZWxlbWVudG8uIEx1ZWdvIGNvbmNhdGVuYW1vcyBjb24gZWwgYXJyYXkgZXhpc3RlbnRlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gdGhpcy5ub3RhLmFyZWFJbnRlcmVzLmNvbmNhdChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLm1hcChlbGVtZW50byA9PiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50by5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBubyBlcyB1biBhcnJlZ2xvLCByZXZpc2Ftb3Mgc2kgbm90YS5mcm9udG1hdHRlci5hcmVhSW50ZXJlcyBleGlzdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlci5hcmVhSW50ZXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSwgYXBsaWNhbW9zIGVsIHJlZ2V4IHkgbG8gYVx1MDBGMWFkaW1vcyBjb21vIHNlZ3VuZG8gZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMucHVzaChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhSW50ZXJlcyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMgbm8gZXhpc3RlLCB0aGlzLm5vdGEuYXJlYUludGVyZXMgeWEgdGVuZHJcdTAwRTEgbm90YS50aXR1bG8gY29tbyBzdSBcdTAwRkFuaWNvIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkFWXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm5BVlwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gREVGSU5JUiBOSVZFTFBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29tcHJ1ZWJhIHNpIG5pdmVsQUkgZXhpc3RlIHkgbm8gZXMgTmFOIGRlc3B1XHUwMEU5cyBkZSBpbnRlbnRhciBjb252ZXJ0aXJsbyBhIGVudGVyb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHBhcnNlSW50KG5vdGEuZnJvbnRtYXR0ZXI/Lm5pdmVsUCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaXZlbCA9IHBhcnNlSW50KG5vdGEuZnJvbnRtYXR0ZXIubml2ZWxQKSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBuaXZlbEFJIG5vIGV4aXN0ZSBvIHN1IGNvbnZlcnNpXHUwMEYzbiBhIGVudGVybyByZXN1bHRhIGVuIE5hTiwgZXN0YWJsZWNlIG5pdmVsIGEgMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbml2ZWwgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5uaXZlbFAgPSBuaXZlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFzdW50b0RlZmluaWRvID0gdHJ1ZTsgLy8gUGFyYSBxdWUgbm8gZWplY3V0ZSBsYSBidXNxdWVkYSBkZSBBcmVhIFZpZGEsIEFyZWEgZGUgSW50ZXJcdTAwRTlzLCBwcm95ZWN0byBRIG8gR1REXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJVbiBQcm95ZWN0byBkZSBRIHNvbG8gcHVlZGUgaW5pY2lhciBkZSB1biBBViwgQUkgbyBQR1RELiBBc3VudG8gbm8gZGVmaW5pZG8uXCIpOyAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgICAgICAvLyBBcmVhIGRlIHZpZGEgZGUgYWN0aXZhLCBjcmVhbmRvIFBRIE5vIGVzdFx1MDBFMSBkZWZpbmlkbyBvIGVzdFx1MDBFMSB2YWNcdTAwRURvXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiVG9kb3MgbG9zIHByb3llY3RvcyBkZSBRIHJlcXVpZXJlbiBBcmVhIGRlIFZpZGEuIEFzdW50byBubyBkZWZpbmlkby5cIik7IFxuICAgICAgICAgICAgICAgICAgICAgICBzaUFzdW50byA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfWVsc2V7IC8vIGFjdGl2YSBubyBlcyBvcmlnZW4gZGUgQ3JlYW5kbyBQUSAgaWYoc2lBc3VudG8pXG5cbiAgICAgICAgICAgICAgICB9ICAgICBcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gQ3JlYW5kbyBQUVxuICAgICAgICAgICAgICAgIGNhc2UgXCJBSVwiOiAvLyBDcmVhbmRvIHVuIEFJXG4gICAgICAgICAgICAgICAgICAgIGxldCBuaXZlbDtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChub3RhPy5mcm9udG1hdHRlcj8udHlwZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiQUlcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJBVlwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm5BVlwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpQXN1bnRvID0gYXdhaXQgdGhpcy5zdWdnZXN0ZXIoW1wiU2lcIiwgXCJOb1wiXSwgW3RydWUsIGZhbHNlXSwgdHJ1ZSwgbm9tYnJlICsgXCIgZXMgb3JpZ2VuIGRlIFwiICsgdGhpcy5ub3RhLnRpdHVsbyArIFwiP1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2lBc3VudG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFzdW50b0RlZmluaWRvID0gdHJ1ZTsgLy8gUGFyYSBxdWUgbm8gZWplY3V0ZSBsYSBidXNxdWVkYSBkZSBBcmVhIFZpZGEsIEFyZWEgZGUgSW50ZXJcdTAwRTlzLCBwcm95ZWN0byBRIG8gR1REXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZFUklGSUNBQ0lPTiBERSBBUkVBIERFIElOVEVSRVNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW5pY2lhbGl6YW1vcyB0aGlzLm5vdGEuYXJlYUludGVyZXMgY29uIG5vdGEudGl0dWxvIGNvbW8gZWwgcHJpbWVyIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LnR5cGUgPT09IFwiQUlcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMgPSBbbm90YS5mcm9udG1hdHRlci5maWxlLmJhc2VuYW1lXTsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWZXJpZmljYW1vcyBzaSBub3RhLmFyZWFJbnRlcmVzIGVzIHVuIGFycmVnbG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXMgdW4gYXJyZWdsbywgaXRlcmFtb3Mgc29icmUgY2FkYSBlbGVtZW50byAoZXhjbHV5ZW5kbyBlbCBwcmltZXIgZWxlbWVudG8geWEgYWdyZWdhZG8gcXVlIGVzIG5vdGEudGl0dWxvKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHkgYXBsaWNhbW9zIGVsIHJlZ2V4IGEgY2FkYSBlbGVtZW50by4gTHVlZ28gY29uY2F0ZW5hbW9zIGNvbiBlbCBhcnJheSBleGlzdGVudGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gdGhpcy5ub3RhLmFyZWFJbnRlcmVzLmNvbmNhdChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLm1hcChlbGVtZW50byA9PiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBubyBlcyB1biBhcnJlZ2xvLCByZXZpc2Ftb3Mgc2kgbm90YS5mcm9udG1hdHRlci5hcmVhSW50ZXJlcyBleGlzdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXhpc3RlLCBhcGxpY2Ftb3MgZWwgcmVnZXggeSBsbyBhXHUwMEYxYWRpbW9zIGNvbW8gc2VndW5kbyBlbGVtZW50b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMucHVzaChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMgbm8gZXhpc3RlLCB0aGlzLm5vdGEuYXJlYUludGVyZXMgeWEgdGVuZHJcdTAwRTEgbm90YS50aXR1bG8gY29tbyBzdSBcdTAwRkFuaWNvIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIEFSRUEgREUgVklEQVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LmFyZWFWaWRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVzIHVuIGFycmVnbG8sIHVzYSBlbCBwcmltZXIgZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhWzBdLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVzIHVuIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIGVzdFx1MDBFMSBkZWZpbmlkbyBvIGVzdFx1MDBFMSB2YWNcdTAwRURvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBcIk5vIGVzIGRlIG5pbmdcdTAwRkFuIEFyZWEgZGUgVmlkYVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBvbmllbmRvIHNpIEFzdW50byBlbiBmYWxzZSBwYXJhIGxhcyBub3RhcyBlc3RydWN0dXJhIEFJIHkgQVYuIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LnR5cGUgPT09IFwiQUlcInx8bm90YT8uZnJvbnRtYXR0ZXI/LnR5cGUgPT09IFwiQVZcIil7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lBc3VudG8gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERFRklOSVIgTklWRUxBSVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb21wcnVlYmEgc2kgbml2ZWxBSSBleGlzdGUgeSBubyBlcyBOYU4gZGVzcHVcdTAwRTlzIGRlIGludGVudGFyIGNvbnZlcnRpcmxvIGEgZW50ZXJvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4ocGFyc2VJbnQobm90YS5mcm9udG1hdHRlcj8ubml2ZWxBSSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaXZlbCA9IHBhcnNlSW50KG5vdGEuZnJvbnRtYXR0ZXIubml2ZWxBSSkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgbml2ZWxBSSBubyBleGlzdGUgbyBzdSBjb252ZXJzaVx1MDBGM24gYSBlbnRlcm8gcmVzdWx0YSBlbiBOYU4sIGVzdGFibGVjZSBuaXZlbCBhIDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pdmVsID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEubml2ZWxBSSA9IG5pdmVsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhazsgIC8vIENhc2UgQUkgLSBBVlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9IC8vIHN3aXRjaCBjYXNlIHNvYnJlIGVsIHRpcG8gZGUgbm90YSBhY3RpdmEuXG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIENyZWFuZG8gdW4gQUlcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAgLy8gQXN1bnRvIERlIGxhIG5vdGEgcXVlIGVzdFx1MDBFOSBjcmVhbmRvIGN1YW5kbyBlcyBjdWFscXVlaXIgY29zYVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkRlcGVuZGllbmRvIGRlIGxhIGVzdHJ1Y3R1cmEsIGdldEFzdW50byBkZWJlcmlhIHRlbmVyIHN1IGNsYXNpZmljYWNpXHUwMEYzbi4gQXF1aSB2YXMgYSB0ZW5lciB1biBlcnJvci5cIikgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH0gLy8gc3dpdGNoIHRpcG8oc2lzdGVtYSkgLT4gU29icmUgbGEgbm90YSBxdWUgZXN0XHUwMEU5IGNyZWFuZG8uXG5cbiAgICAgICAgfSBlbHNlIHsgLy8gYWN0aXZvID09IG51bGxcbiAgICAgICAgICAgIHNpQXN1bnRvID0gZmFsc2U7XG4gICAgICAgIH0gXG4gICAgICAgIHJldHVybiB7c2lBc3VudG8sIG5vbWJyZTogcGFkcmVzfVxuICAgIH1cblxuICAgIGFzeW5jIGdldFByb3llY3RvR1REKCkge1xuICAgICAgICBsZXQgdGlwbyA9IHRoaXMuaW5mb1N1YnNpc3RlbWEudHlwZTtcbiAgICAgICAgbGV0IG5vdGFzRiA9IGF3YWl0IEZpZWxkSGFuZGxlclV0aWxzLmZpbmRNYWluRmlsZXNXaXRoU3RhdGUoXCJQR1REXCIsIG51bGwsIHRoaXMucGx1Z2luKTtcbiAgICAgICAgbGV0IG5vdGFGLCB0aXR1bG8gPSBbXTtcbiAgICAgICAgbGV0IHBhZHJlUEdURDtcbiAgICBcbiAgICAgICAgaWYgKCF0aGlzLm5vdGEuYXN1bnRvRGVmaW5pZG8pIHtcbiAgICAgICAgICAgIHBhZHJlUEdURCA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKFtcIlNpXCIsIFwiTm9cIl0sIFt0cnVlLCBmYWxzZV0sIGZhbHNlLCBgJHt0aGlzLm5vdGEudGl0dWxvfSBlcyBoaWpvIGRlIHVuIFByb3llY3RvIEdURD9gKTtcbiAgICBcbiAgICAgICAgICAgIGlmIChwYWRyZVBHVEQpIHtcbiAgICAgICAgICAgICAgICBub3RhRiA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKG5vdGFzRi5tYXAoYiA9PiBiLnRpdHVsbyksIG5vdGFzRi5tYXAoYiA9PiBiKSwgZmFsc2UsIGBcdTAwQkZRdVx1MDBFOSBQcm95ZWN0byBHVEQgZXMgcGFkcmUgZGUgJHt0aGlzLm5vdGEudGl0dWxvfT86YCk7XG4gICAgICAgICAgICAgICAgaWYgKG5vdGFGID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJTaW4gcHJveWVjdG8gR1REIGRlZmluaWRvLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhSW50ZXJlcyA9IEFycmF5LmlzQXJyYXkobm90YUY/LmFyZWFJbnRlcmVzKSBcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbm90YUYuYXJlYUludGVyZXMubWFwKGVsZW1lbnRvID0+IGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpIFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBub3RhRj8uYXJlYUludGVyZXMgPyBbbm90YUYuYXJlYUludGVyZXMucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKV0gXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBub3RhRj8uYXJlYVZpZGEgXG4gICAgICAgICAgICAgICAgICAgICAgICA/IChBcnJheS5pc0FycmF5KG5vdGFGLmFyZWFWaWRhKSA/IG5vdGFGLmFyZWFWaWRhWzBdLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykgOiBub3RhRi5hcmVhVmlkYS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKSBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogXCJObyBlcyBkZSBuaW5nXHUwMEZBbiBBcmVhIGRlIFZpZGFcIjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvUSA9IEFycmF5LmlzQXJyYXkobm90YUY/LnByb3llY3RvUSkgXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG5vdGFGLnByb3llY3RvUS5tYXAoZWxlbWVudG8gPT4gZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSkgXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG5vdGFGPy5wcm95ZWN0b1EgPyBbbm90YUYucHJveWVjdG9RLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyldIFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdGl0dWxvID0gW25vdGFGLnRpdHVsb107XG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGFGPy5wcm95ZWN0b0dURCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdHVsbyA9IHRpdHVsby5jb25jYXQobm90YUYucHJveWVjdG9HVEQubWFwKGVsZW1lbnRvID0+IGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub3RhRj8ucHJveWVjdG9HVEQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdHVsby5wdXNoKG5vdGFGLnByb3llY3RvR1RELnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hc3VudG9EZWZpbmlkbyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEubml2ZWxQID0gIWlzTmFOKHBhcnNlSW50KG5vdGFGPy5uaXZlbFApKSBcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcGFyc2VJbnQobm90YUYubml2ZWxQKSArIDEgXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aXR1bG8gPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGEubml2ZWxQID0gMDtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiB0aXR1bG87XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ub3RhLnByb3llY3RvR1REO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0UmVuYW1lKCl7XG4gICAgICAgIGxldCBuZXdOYW1lLCBmb2xkZXI7XG4gICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICBpZiAodGhpcy5ub3RhLmFyZWFWaWRhPT09XCJObyBlcyBkZSBuaW5nXHUwMEZBbiBBcmVhIGRlIFZpZGFcIil7XG4gICAgICAgICAgICBuZXdOYW1lID0gYCR7dGhpcy5pbmZvU3Vic2lzdGVtYS5mb2xkZXJ9L090cmFzLyR7dGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlfSAtICR7dGhpcy5ub3RhLmlkfS5tZGBcbiAgICAgICAgICAgIGZvbGRlciA9IGAke3RoaXMuaW5mb1N1YnNpc3RlbWEuZm9sZGVyfS9PdHJhc2BcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBuZXdOYW1lID0gYCR7dGhpcy5pbmZvU3Vic2lzdGVtYS5mb2xkZXJ9LyR7dGhpcy5ub3RhLmFyZWFWaWRhfS8ke3RoaXMuaW5mb1N1YnNpc3RlbWEudHlwZX0gLSAke3RoaXMubm90YS5pZH0ubWRgXG4gICAgICAgICAgICBmb2xkZXIgPSBgJHt0aGlzLmluZm9TdWJzaXN0ZW1hLmZvbGRlcn0vJHt0aGlzLm5vdGEuYXJlYVZpZGF9YFxuICAgICAgICB9XG4gICAgICAgIGF3YWl0IEZpZWxkSGFuZGxlclV0aWxzLmNyZWFyQ2FycGV0YShmb2xkZXIpO1xuICAgICAgICBjb25zdCBmaWxlID0gdGhpcy50cC5maWxlLmNvbmZpZy50YXJnZXRfZmlsZTtcbiAgICAgICAgY29uc3QgZXhpc3RlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChuZXdOYW1lKTtcbiAgICAgICBcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGV4aXN0ZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9tYnJlRmlsZSA9IG5ld05hbWUuc3BsaXQoXCIvXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJvcnJhciA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKFxuICAgICAgICAgICAgICAgICAgICBbXCJTb2JyZWVzY3JpYmlyIEFyY2hpdm8gQWN0dWFsXCIsIFwiRGV0ZW5lciBjcmVhY2lcdTAwRjNuIGRlbCBhcmNoaXZvLlwiXSxcbiAgICAgICAgICAgICAgICAgICAgW3RydWUsIGZhbHNlXSxcbiAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgYFx1MDBCRiR7bm9tYnJlRmlsZS5wb3AoKX0geWEgZXhpc3RlLiBRdVx1MDBFOSBkZXNlYXMgaGFjZXI/YFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKGJvcnJhcikge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBhcHAudmF1bHQuZGVsZXRlKGV4aXN0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGFwcC52YXVsdC5yZW5hbWUoZmlsZSwgbmV3TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFyY2hpdm8gcmVub21icmFkbyBjb24gXHUwMEU5eGl0by5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3TmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ2FuY2VsYW5kbyBsYSBjcmVhY2lcdTAwRjNuIGRlbCBhcmNoaXZvLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvY2VzbyBjYW5jZWxhZG8gcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBhcHAudmF1bHQucmVuYW1lKGZpbGUsIG5ld05hbWUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFyY2hpdm8gcmVub21icmFkbyBjb24gXHUwMEU5eGl0by5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdOYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhbCBjYW1iaWFyIGVsIG5vbWJyZVwiLCBlcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICB9IiwgImltcG9ydCB7IE5vdGVGaWVsZEhhbmRsZXIgfSBmcm9tICcuLi9GSCBCYXNlL05vdGVGaWVsZEhhbmRsZXInOyAvLyBBc2VnXHUwMEZBcmF0ZSBkZSBpbXBvcnRhciBOb3RlRmllbGRIYW5kbGVyIHNpIGVzIG5lY2VzYXJpb1xuaW1wb3J0IHsgRmllbGRIYW5kbGVyVXRpbHMgfSBmcm9tICcuLi8uLi9GaWVsZEhhbmRsZXJVdGlscyc7XG5pbXBvcnQgeyBURmlsZSwgVEZvbGRlciwgTm90aWNlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgUFFGaWVsZEhhbmRsZXIgfSBmcm9tICcuLi8uLi9JbnRlcmZhY2VzL1BRRmllbGRIYW5kbGVyJztcblxuZXhwb3J0IGNsYXNzIFBRRmllbGRIYW5kbGVyIGV4dGVuZHMgTm90ZUZpZWxkSGFuZGxlciBpbXBsZW1lbnRzIFBRRmllbGRIYW5kbGVye1xuICAgIGNvbnN0cnVjdG9yKHRwOiBhbnksIGZvbGRlcjogc3RyaW5nLCBwbHVnaW46IGFueSkge1xuICAgICAgc3VwZXIodHAsIGZvbGRlciwgcGx1Z2luKTsgLy8gTGxhbWEgYWwgY29uc3RydWN0b3IgZGUgbGEgY2xhc2UgcGFkcmVcbiAgICB9XG5cbiAgICBhc3luYyBnZXRBc3VudG8oKXsgLy8gRnVuY2lvbmEgY29uIGZyb250bWF0dGVyXG5cbiAgICAgICAgbGV0IHRpcG9TaXN0ZW1hID0gdGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlO1xuICAgICAgICBsZXQgbm9tYnJlU2lzdGVtYSA9IHRoaXMuaW5mb1N1YnNpc3RlbWEudHlwZU5hbWU7XG4gICAgICAgIGxldCBzdWJzaXN0ZW1hcywgcGFkcmVzID0gW107XG4gICAgICAgIGxldCBhY3Rpdm8gPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcbiAgICAgICAgbGV0IHNpQXN1bnRvID0gZmFsc2U7XG4gICAgICAgIGxldCBub21icmUgPSBcIlwiO1xuICAgICAgICBsZXQgbm90YTtcbiAgICAgICAgaWYgKGFjdGl2byAhPSBudWxsKSB7XG4gICAgICAgICAgICBub21icmUgPSBhY3Rpdm8uYmFzZW5hbWU7XG4gICAgICAgICAgICBub3RhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGFjdGl2byk7XG4gICAgICAgICAgICAvLyBBc2VndXJhciBxdWUgbm90YS5mcm9udG1hdHRlciBleGlzdGUgeSBhc2lnbmFyIHVuIG9iamV0byB2YWNcdTAwRURvIGEgZmlsZVxuICAgICAgICAgICAgbm90YS5mcm9udG1hdHRlciA9IG5vdGEuZnJvbnRtYXR0ZXIgfHwge307XG4gICAgICAgICAgICBub3RhLmZyb250bWF0dGVyLmZpbGUgPSB7fTtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24obm90YS5mcm9udG1hdHRlci5maWxlLCBhY3Rpdm8pO1xuICAgICAgICAgICAgcGFkcmVzLnVuc2hpZnQobm9tYnJlKTsgLy8gQVx1MDBGMWFkZSBlbCBub21icmUgYWwgaW5pY2lvIGRlbCBhcnJlZ2xvLCBkZXNwbGF6YW5kbyBsb3MgZGVtXHUwMEUxcyBlbGVtZW50b3NcbiAgICAgICAgICAgIHN3aXRjaCh0aXBvU2lzdGVtYSkgeyAvLyBFc3RveSBjcmVhbmRvIHVuOiBcbiAgICAgICAgICAgICAgICBjYXNlIFwiUlJcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiUEdURFwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJBeFwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJUeFwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJDUEVcIjogIC8vIENvbnRlbmlkbyBwYXJhIEVzdHVkaW9cbiAgICAgICAgICAgICAgICAgICAgc2lBc3VudG8gPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihbXCJTaVwiLCBcIk5vXCJdLCBbdHJ1ZSwgZmFsc2VdLCB0cnVlLCBub21icmUgKyBcIiBlcyBvcmlnZW4gZGUgXCIgKyB0aGlzLm5vdGEudGl0dWxvICsgXCI/XCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2lBc3VudG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFzdW50b0RlZmluaWRvID0gdHJ1ZTsgLy8gUGFyYSBxdWUgbm8gZWplY3V0ZSBsYSBidXNxdWVkYSBkZSBBcmVhIFZpZGEsIEFyZWEgZGUgSW50ZXJcdTAwRTlzLCBwcm95ZWN0byBRIG8gR1REXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbml2ZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG5vdGE/LmZyb250bWF0dGVyPy50eXBlKXsgLy8gTGEgbm90YSBhY3RpdnMgZXMgdW5hOiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJQR1REXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlBRXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWRVJJRklDQUNJT04gREUgUFJPWUVDVE9TIERFIFEgWSBQUk9ZRUNUTyBHVERcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGEuZnJvbnRtYXR0ZXI/LnR5cGUgPT09IFwiUFFcIil7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDVUFORE8gTEEgTk9UQSBBQ1RJVkEgRVMgVU4gUFEuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b1EgPSBub21icmU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIFBST1lFQ1RPU0dURFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbmljaWFsaXphbW9zIHRoaXMubm90YS5wcm95ZWN0b0dURCBjb24gdW4gdmFsb3IgcHJlZGV0ZXJtaW5hZG8gZGUgY2FkZW5hIHZhY1x1MDBFRGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvR1REID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmVyaWZpY2Ftb3Mgc2kgbm90YS5wcm95ZWN0b0dURCBleGlzdGUgeSBlcyB1biBhcnJlZ2xvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBlcyB1biBhcnJlZ2xvLCBpdGVyYW1vcyBzb2JyZSBjYWRhIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1RELm1hcChlbGVtZW50byA9PiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50by5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1REKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBleGlzdGUgcGVybyBubyBlcyB1biBhcnJlZ2xvLCBhcGxpY2Ftb3MgZWwgcmVnZXggZGlyZWN0YW1lbnRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1RELnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgbm90YS5wcm95ZWN0b0dURCBubyBleGlzdGUsIHRoaXMubm90YS5wcm95ZWN0b0dURCB5YSBlc3RcdTAwRTEgZXN0YWJsZWNpZG8gZW4gXCJcIiBwb3IgZGVmZWN0b1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPYnRlbmVyIFByb3llY3RvUSB5IFByb3llY3RvIEdURCBjdWFuZG8gbGEgbm90YSBlcyBQcm95ZWN0b0dURC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90YS5mcm9udG1hdHRlcj8udHlwZSA9PT0gXCJQR1REXCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDVUFORE8gTEEgTk9UQSBBQ1RJVkEgRVMgVU4gR1RELlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIFBST1lFQ1RPU0dURFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvR1REID0gW25vbWJyZV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXMgdW4gYXJyZWdsbywgdXRpbGl6YW1vcyBjb25jYXQgcGFyYSBhXHUwMEYxYWRpciBsb3MgZWxlbWVudG9zIHlhIHByb2Nlc2Fkb3MgY29uIGVsIHJlZ2V4IGFsIGFycmVnbG8gdGhpcy5ub3RhLnByb3llY3RvR1REXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvR1REID0gdGhpcy5ub3RhLnByb3llY3RvR1RELmNvbmNhdChub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1RELm1hcChlbGVtZW50byA9PiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1REKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXhpc3RlIHBlcm8gbm8gZXMgdW4gYXJyZWdsbywgYXBsaWNhbW9zIGVsIHJlZ2V4IGRpcmVjdGFtZW50ZSB5IHVzYW1vcyBwdXNoIHBhcmEgYWdyZWdhcmxvIGEgdGhpcy5ub3RhLnByb3llY3RvR1REXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvR1RELnB1c2gobm90YS5mcm9udG1hdHRlci5wcm95ZWN0b0dURC5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgbm90YS5wcm95ZWN0b0dURCBubyBleGlzdGUsIHRoaXMubm90YS5wcm95ZWN0b0dURCB5YSBlc3RcdTAwRTEgZXN0YWJsZWNpZG8gZW4gXCJcIiBwb3IgZGVmZWN0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvUSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhLmZyb250bWF0dGVyLnByb3llY3RvUSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIGl0ZXJhbW9zIHNvYnJlIGNhZGEgZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b1EgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvUS5tYXAoZWxlbWVudG8gPT4gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90YS5mcm9udG1hdHRlci5wcm95ZWN0b1EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSBwZXJvIG5vIGVzIHVuIGFycmVnbG8sIGFwbGljYW1vcyBlbCByZWdleCBkaXJlY3RhbWVudGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b1EgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvUS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT2J0ZW5lciBQcm95ZWN0b1EgeSBQcm95ZWN0byBHVEQgY3VhbmRvIGxhIG5vdGEgZXMgb3RyYSBjb3NhIHF1ZSBubyBlcyBwcm95ZWN0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvUSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhPy5mcm9udG1hdHRlcj8ucHJveWVjdG9RKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIGl0ZXJhbW9zIHNvYnJlIGNhZGEgZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9RID0gbm90YS5mcm9udG1hdHRlci5wcm95ZWN0b1EubWFwKGVsZW1lbnRvID0+IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50by5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LnByb3llY3RvUSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSBwZXJvIG5vIGVzIHVuIGFycmVnbG8sIGFwbGljYW1vcyBlbCByZWdleCBkaXJlY3RhbWVudGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9RID0gbm90YS5mcm9udG1hdHRlci5wcm95ZWN0b1EucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvR1REID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhbW9zIHNpIG5vdGEucHJveWVjdG9HVEQgZXhpc3RlIHkgZXMgdW4gYXJyZWdsb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm90YT8uZnJvbnRtYXR0ZXI/LnByb3llY3RvR1REKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIGl0ZXJhbW9zIHNvYnJlIGNhZGEgZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1RELm1hcChlbGVtZW50byA9PiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vdGE/LmZyb250bWF0dGVyPy5wcm95ZWN0b0dURCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSBwZXJvIG5vIGVzIHVuIGFycmVnbG8sIGFwbGljYW1vcyBlbCByZWdleCBkaXJlY3RhbWVudGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1RELnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWZXJpZmljYW1vcyBhcmVhSW50ZXJlcyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGE/LmZyb250bWF0dGVyPy5hcmVhSW50ZXJlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIGl0ZXJhbW9zIHNvYnJlIGNhZGEgZWxlbWVudG8gKGV4Y2x1eWVuZG8gZWwgcHJpbWVyIGVsZW1lbnRvIHlhIGFncmVnYWRvIHF1ZSBlcyBub3RhLnRpdHVsbylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHkgYXBsaWNhbW9zIGVsIHJlZ2V4IGEgY2FkYSBlbGVtZW50by4gTHVlZ28gY29uY2F0ZW5hbW9zIGNvbiBlbCBhcnJheSBleGlzdGVudGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMgPSB0aGlzLm5vdGEuYXJlYUludGVyZXMuY29uY2F0KG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMubWFwKGVsZW1lbnRvID0+IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5vIGVzIHVuIGFycmVnbG8sIHJldmlzYW1vcyBzaSBub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzIGV4aXN0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGE/LmZyb250bWF0dGVyPy5hcmVhSW50ZXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSwgYXBsaWNhbW9zIGVsIHJlZ2V4IHkgbG8gYVx1MDBGMWFkaW1vcyBjb21vIHNlZ3VuZG8gZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMucHVzaChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhbW9zIEFyZWFWaWRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlcj8uYXJlYVZpZGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXMgdW4gYXJyZWdsbywgdXNhIGVsIHByaW1lciBlbGVtZW50b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGFbMF0ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXMgdW4gc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gbm90YS5mcm9udG1hdHRlci5hcmVhVmlkYS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gZXN0XHUwMEUxIGRlZmluaWRvIG8gZXN0XHUwMEUxIHZhY1x1MDBFRG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IFwiTm8gZXMgZGUgbmluZ1x1MDBGQW4gQXJlYSBkZSBWaWRhXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERFRklOSVIgTklWRUxQXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbXBydWViYSBzaSBuaXZlbEFJIGV4aXN0ZSB5IG5vIGVzIE5hTiBkZXNwdVx1MDBFOXMgZGUgaW50ZW50YXIgY29udmVydGlybG8gYSBlbnRlcm9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4ocGFyc2VJbnQobm90YT8uZnJvbnRtYXR0ZXI/Lm5pdmVsUCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaXZlbCA9IHBhcnNlSW50KG5vdGEuZnJvbnRtYXR0ZXIubml2ZWxQKSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBuaXZlbEFJIG5vIGV4aXN0ZSBvIHN1IGNvbnZlcnNpXHUwMEYzbiBhIGVudGVybyByZXN1bHRhIGVuIE5hTiwgZXN0YWJsZWNlIG5pdmVsIGEgMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbml2ZWwgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5uaXZlbFAgPSBuaXZlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7IC8vIFBHVEQgeSBQUVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJBSVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIEFSRUEgREUgSU5URVJFU1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LnR5cGUgPT09IFwiQUlcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMgPSBbbm90YS5mcm9udG1hdHRlci5maWxlLmJhc2VuYW1lXTsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbmljaWFsaXphbW9zIHRoaXMubm90YS5hcmVhSW50ZXJlcyBjb24gbm90YS50aXR1bG8gY29tbyBlbCBwcmltZXIgZWxlbWVudG8uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFc3RlIHNvbG8gYXBsaWNhIHBhcmEgY3VhbmRvIGVzdG95IGNvbnN0cnV5ZW5kbyBkZXNkZSBBcmVhIGRlIEludGVyZXMgb3RyYSBBcmVhIGRlIEludGVyZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhbW9zIHNpIG5vdGEuYXJlYUludGVyZXMgZXMgdW4gYXJyZWdsb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm90YS5mcm9udG1hdHRlcj8uYXJlYUludGVyZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBlcyB1biBhcnJlZ2xvLCBpdGVyYW1vcyBzb2JyZSBjYWRhIGVsZW1lbnRvIChleGNsdXllbmRvIGVsIHByaW1lciBlbGVtZW50byB5YSBhZ3JlZ2FkbyBxdWUgZXMgbm90YS50aXR1bG8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB5IGFwbGljYW1vcyBlbCByZWdleCBhIGNhZGEgZWxlbWVudG8uIEx1ZWdvIGNvbmNhdGVuYW1vcyBjb24gZWwgYXJyYXkgZXhpc3RlbnRlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gdGhpcy5ub3RhLmFyZWFJbnRlcmVzLmNvbmNhdChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLm1hcChlbGVtZW50byA9PiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50by5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBubyBlcyB1biBhcnJlZ2xvLCByZXZpc2Ftb3Mgc2kgbm90YS5mcm9udG1hdHRlci5hcmVhSW50ZXJlcyBleGlzdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlci5hcmVhSW50ZXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSwgYXBsaWNhbW9zIGVsIHJlZ2V4IHkgbG8gYVx1MDBGMWFkaW1vcyBjb21vIHNlZ3VuZG8gZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMucHVzaChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5vIGVzIGFycmVnbG8gbmkgc3RyaW5nLCBhcmVhSW50ZXJlcyBlcyBlbCBhcmVhIGludGVyZXMgcXVlIGVzdFx1MDBFMSBlbiB0aXR1bG8uICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMgbm8gZXhpc3RlLCB0aGlzLm5vdGEuYXJlYUludGVyZXMgeWEgdGVuZHJcdTAwRTEgbm90YS50aXR1bG8gY29tbyBzdSBcdTAwRkFuaWNvIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJBVlwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWRVJJRklDQUNJT04gREUgQVJFQSBERSBWSURBXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlcj8uYXJlYVZpZGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXMgdW4gYXJyZWdsbywgdXNhIGVsIHByaW1lciBlbGVtZW50b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGFbMF0ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXMgdW4gc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gbm90YS5mcm9udG1hdHRlci5hcmVhVmlkYS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gZXN0XHUwMEUxIGRlZmluaWRvIG8gZXN0XHUwMEUxIHZhY1x1MDBFRG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IFwiTm8gZXMgZGUgbmluZ1x1MDBGQW4gQXJlYSBkZSBWaWRhXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcG9uaWVuZG8gc2kgQXN1bnRvIGVuIGZhbHNlIHBhcmEgbGFzIG5vdGFzIGVzdHJ1Y3R1cmEgQUkgeSBBVi4gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlcj8udHlwZSA9PT0gXCJBSVwifHxub3RhPy5mcm9udG1hdHRlcj8udHlwZSA9PT0gXCJBVlwiKXsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaUFzdW50byA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gREVGSU5JUiBOSVZFTFBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29tcHJ1ZWJhIHNpIG5pdmVsQUkgZXhpc3RlIHkgbm8gZXMgTmFOIGRlc3B1XHUwMEU5cyBkZSBpbnRlbnRhciBjb252ZXJ0aXJsbyBhIGVudGVyb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihwYXJzZUludChub3RhLmZyb250bWF0dGVyPy5uaXZlbFApKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbml2ZWwgPSBwYXJzZUludChub3RhLmZyb250bWF0dGVyLm5pdmVsUCkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgbml2ZWxBSSBubyBleGlzdGUgbyBzdSBjb252ZXJzaVx1MDBGM24gYSBlbnRlcm8gcmVzdWx0YSBlbiBOYU4sIGVzdGFibGVjZSBuaXZlbCBhIDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pdmVsID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEubml2ZWxQID0gbml2ZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXsgLy8gYWN0aXZhIG5vIGVzIG9yaWdlbiBkZSBDcmVhbmRvIFJSIC0gUEdURCAtIFBRICBpZihzaUFzdW50bylcblxuICAgICAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgICAgICBicmVhazsgLy8gQ3JlYW5kbyBSUlxuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY2FzZSBcIlBRXCI6ICAvLyBFc3RveSBDcmVhbmRvIHVuIFBRIFxuICAgICAgICAgICAgICAgICAgICBzaUFzdW50byA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKFtcIlNpXCIsIFwiTm9cIl0sIFt0cnVlLCBmYWxzZV0sIHRydWUsIG5vbWJyZSArIFwiIGVzIG9yaWdlbiBkZSBcIiArIHRoaXMubm90YS50aXR1bG8gKyBcIj9cIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaUFzdW50bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQUSByZXF1aWVyZSBvYmxpZ2F0b3JpYW1lbnRlIHRlbmVyIEFyZWEgZGUgVmlkYS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlcj8uYXJlYVZpZGEgIT09IHVuZGVmaW5lZCAmJiBub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ1x1MDBGM2RpZ28gYSBlamVjdXRhciBzaSBhcmVhVmlkYSBleGlzdGUgeSBubyBlcyB1bmEgY2FkZW5hIHZhY1x1MDBFRGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFcyB1biBhcnJlZ2xvLCB1c2EgZWwgcHJpbWVyIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGFbMF0ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFcyB1biBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gbm90YS5mcm9udG1hdHRlci5hcmVhVmlkYS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcG9uaWVuZG8gc2kgQXN1bnRvIGVuIGZhbHNlIHBhcmEgbGFzIG5vdGFzIGVzdHJ1Y3R1cmEgQUkgeSBBVi4gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGE/LmZyb250bWF0dGVyPy50eXBlID09PSBcIkFJXCJ8fG5vdGE/LmZyb250bWF0dGVyPy50eXBlID09PSBcIkFWXCIpeyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lBc3VudG8gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbml2ZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG5vdGE/LmZyb250bWF0dGVyPy50eXBlKXsgLy8gdGlwbyBkZSBub3RhIGFjdGl2YSBjcmVhbmRvIHVuIFBRLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJQR1REXCI6XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIFBST1lFQ1RPU0dURFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBbbm9tYnJlXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1REKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXMgdW4gYXJyZWdsbywgdXRpbGl6YW1vcyBjb25jYXQgcGFyYSBhXHUwMEYxYWRpciBsb3MgZWxlbWVudG9zIHlhIHByb2Nlc2Fkb3MgY29uIGVsIHJlZ2V4IGFsIGFycmVnbG8gdGhpcy5ub3RhLnByb3llY3RvR1REXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSB0aGlzLm5vdGEucHJveWVjdG9HVEQuY29uY2F0KG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQubWFwKGVsZW1lbnRvID0+IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1REKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBleGlzdGUgcGVybyBubyBlcyB1biBhcnJlZ2xvLCBhcGxpY2Ftb3MgZWwgcmVnZXggZGlyZWN0YW1lbnRlIHkgdXNhbW9zIHB1c2ggcGFyYSBhZ3JlZ2FybG8gYSB0aGlzLm5vdGEucHJveWVjdG9HVERcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b0dURC5wdXNoKG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiQUlcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIEFSRUEgREUgSU5URVJFU1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LnR5cGUgPT09IFwiQUlcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMgPSBbbm90YS5mcm9udG1hdHRlci5maWxlLmJhc2VuYW1lXTsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbmljaWFsaXphbW9zIHRoaXMubm90YS5hcmVhSW50ZXJlcyBjb24gbm90YS50aXR1bG8gY29tbyBlbCBwcmltZXIgZWxlbWVudG8uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFc3RlIHNvbG8gYXBsaWNhIHBhcmEgY3VhbmRvIGVzdG95IGNvbnN0cnV5ZW5kbyBkZXNkZSBBcmVhIGRlIEludGVyZXMgb3RyYSBBcmVhIGRlIEludGVyZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhbW9zIHNpIG5vdGEuYXJlYUludGVyZXMgZXMgdW4gYXJyZWdsb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm90YS5mcm9udG1hdHRlcj8uYXJlYUludGVyZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBlcyB1biBhcnJlZ2xvLCBpdGVyYW1vcyBzb2JyZSBjYWRhIGVsZW1lbnRvIChleGNsdXllbmRvIGVsIHByaW1lciBlbGVtZW50byB5YSBhZ3JlZ2FkbyBxdWUgZXMgbm90YS50aXR1bG8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB5IGFwbGljYW1vcyBlbCByZWdleCBhIGNhZGEgZWxlbWVudG8uIEx1ZWdvIGNvbmNhdGVuYW1vcyBjb24gZWwgYXJyYXkgZXhpc3RlbnRlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gdGhpcy5ub3RhLmFyZWFJbnRlcmVzLmNvbmNhdChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLm1hcChlbGVtZW50byA9PiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50by5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBubyBlcyB1biBhcnJlZ2xvLCByZXZpc2Ftb3Mgc2kgbm90YS5mcm9udG1hdHRlci5hcmVhSW50ZXJlcyBleGlzdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlci5hcmVhSW50ZXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSwgYXBsaWNhbW9zIGVsIHJlZ2V4IHkgbG8gYVx1MDBGMWFkaW1vcyBjb21vIHNlZ3VuZG8gZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMucHVzaChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhSW50ZXJlcyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMgbm8gZXhpc3RlLCB0aGlzLm5vdGEuYXJlYUludGVyZXMgeWEgdGVuZHJcdTAwRTEgbm90YS50aXR1bG8gY29tbyBzdSBcdTAwRkFuaWNvIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkFWXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm5BVlwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gREVGSU5JUiBOSVZFTFBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29tcHJ1ZWJhIHNpIG5pdmVsQUkgZXhpc3RlIHkgbm8gZXMgTmFOIGRlc3B1XHUwMEU5cyBkZSBpbnRlbnRhciBjb252ZXJ0aXJsbyBhIGVudGVyb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHBhcnNlSW50KG5vdGEuZnJvbnRtYXR0ZXI/Lm5pdmVsUCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaXZlbCA9IHBhcnNlSW50KG5vdGEuZnJvbnRtYXR0ZXIubml2ZWxQKSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBuaXZlbEFJIG5vIGV4aXN0ZSBvIHN1IGNvbnZlcnNpXHUwMEYzbiBhIGVudGVybyByZXN1bHRhIGVuIE5hTiwgZXN0YWJsZWNlIG5pdmVsIGEgMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbml2ZWwgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5uaXZlbFAgPSBuaXZlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFzdW50b0RlZmluaWRvID0gdHJ1ZTsgLy8gUGFyYSBxdWUgbm8gZWplY3V0ZSBsYSBidXNxdWVkYSBkZSBBcmVhIFZpZGEsIEFyZWEgZGUgSW50ZXJcdTAwRTlzLCBwcm95ZWN0byBRIG8gR1REXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJVbiBQcm95ZWN0byBkZSBRIHNvbG8gcHVlZGUgaW5pY2lhciBkZSB1biBBViwgQUkgbyBQR1RELiBBc3VudG8gbm8gZGVmaW5pZG8uXCIpOyAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgICAgICAvLyBBcmVhIGRlIHZpZGEgZGUgYWN0aXZhLCBjcmVhbmRvIFBRIE5vIGVzdFx1MDBFMSBkZWZpbmlkbyBvIGVzdFx1MDBFMSB2YWNcdTAwRURvXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiVG9kb3MgbG9zIHByb3llY3RvcyBkZSBRIHJlcXVpZXJlbiBBcmVhIGRlIFZpZGEuIEFzdW50byBubyBkZWZpbmlkby5cIik7IFxuICAgICAgICAgICAgICAgICAgICAgICBzaUFzdW50byA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfWVsc2V7IC8vIGFjdGl2YSBubyBlcyBvcmlnZW4gZGUgQ3JlYW5kbyBQUSAgaWYoc2lBc3VudG8pXG5cbiAgICAgICAgICAgICAgICB9ICAgICBcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gQ3JlYW5kbyBQUVxuICAgICAgICAgICAgICAgIGNhc2UgXCJBSVwiOiAvLyBDcmVhbmRvIHVuIEFJXG4gICAgICAgICAgICAgICAgICAgIGxldCBuaXZlbDtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChub3RhPy5mcm9udG1hdHRlcj8udHlwZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiQUlcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJBVlwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm5BVlwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpQXN1bnRvID0gYXdhaXQgdGhpcy5zdWdnZXN0ZXIoW1wiU2lcIiwgXCJOb1wiXSwgW3RydWUsIGZhbHNlXSwgdHJ1ZSwgbm9tYnJlICsgXCIgZXMgb3JpZ2VuIGRlIFwiICsgdGhpcy5ub3RhLnRpdHVsbyArIFwiP1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2lBc3VudG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFzdW50b0RlZmluaWRvID0gdHJ1ZTsgLy8gUGFyYSBxdWUgbm8gZWplY3V0ZSBsYSBidXNxdWVkYSBkZSBBcmVhIFZpZGEsIEFyZWEgZGUgSW50ZXJcdTAwRTlzLCBwcm95ZWN0byBRIG8gR1REXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZFUklGSUNBQ0lPTiBERSBBUkVBIERFIElOVEVSRVNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW5pY2lhbGl6YW1vcyB0aGlzLm5vdGEuYXJlYUludGVyZXMgY29uIG5vdGEudGl0dWxvIGNvbW8gZWwgcHJpbWVyIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LnR5cGUgPT09IFwiQUlcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMgPSBbbm90YS5mcm9udG1hdHRlci5maWxlLmJhc2VuYW1lXTsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWZXJpZmljYW1vcyBzaSBub3RhLmFyZWFJbnRlcmVzIGVzIHVuIGFycmVnbG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXMgdW4gYXJyZWdsbywgaXRlcmFtb3Mgc29icmUgY2FkYSBlbGVtZW50byAoZXhjbHV5ZW5kbyBlbCBwcmltZXIgZWxlbWVudG8geWEgYWdyZWdhZG8gcXVlIGVzIG5vdGEudGl0dWxvKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHkgYXBsaWNhbW9zIGVsIHJlZ2V4IGEgY2FkYSBlbGVtZW50by4gTHVlZ28gY29uY2F0ZW5hbW9zIGNvbiBlbCBhcnJheSBleGlzdGVudGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gdGhpcy5ub3RhLmFyZWFJbnRlcmVzLmNvbmNhdChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLm1hcChlbGVtZW50byA9PiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBubyBlcyB1biBhcnJlZ2xvLCByZXZpc2Ftb3Mgc2kgbm90YS5mcm9udG1hdHRlci5hcmVhSW50ZXJlcyBleGlzdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXhpc3RlLCBhcGxpY2Ftb3MgZWwgcmVnZXggeSBsbyBhXHUwMEYxYWRpbW9zIGNvbW8gc2VndW5kbyBlbGVtZW50b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMucHVzaChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMgbm8gZXhpc3RlLCB0aGlzLm5vdGEuYXJlYUludGVyZXMgeWEgdGVuZHJcdTAwRTEgbm90YS50aXR1bG8gY29tbyBzdSBcdTAwRkFuaWNvIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIEFSRUEgREUgVklEQVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LmFyZWFWaWRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVzIHVuIGFycmVnbG8sIHVzYSBlbCBwcmltZXIgZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhWzBdLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVzIHVuIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIGVzdFx1MDBFMSBkZWZpbmlkbyBvIGVzdFx1MDBFMSB2YWNcdTAwRURvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBcIk5vIGVzIGRlIG5pbmdcdTAwRkFuIEFyZWEgZGUgVmlkYVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBvbmllbmRvIHNpIEFzdW50byBlbiBmYWxzZSBwYXJhIGxhcyBub3RhcyBlc3RydWN0dXJhIEFJIHkgQVYuIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LnR5cGUgPT09IFwiQUlcInx8bm90YT8uZnJvbnRtYXR0ZXI/LnR5cGUgPT09IFwiQVZcIil7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lBc3VudG8gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERFRklOSVIgTklWRUxBSVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb21wcnVlYmEgc2kgbml2ZWxBSSBleGlzdGUgeSBubyBlcyBOYU4gZGVzcHVcdTAwRTlzIGRlIGludGVudGFyIGNvbnZlcnRpcmxvIGEgZW50ZXJvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4ocGFyc2VJbnQobm90YS5mcm9udG1hdHRlcj8ubml2ZWxBSSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaXZlbCA9IHBhcnNlSW50KG5vdGEuZnJvbnRtYXR0ZXIubml2ZWxBSSkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgbml2ZWxBSSBubyBleGlzdGUgbyBzdSBjb252ZXJzaVx1MDBGM24gYSBlbnRlcm8gcmVzdWx0YSBlbiBOYU4sIGVzdGFibGVjZSBuaXZlbCBhIDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pdmVsID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEubml2ZWxBSSA9IG5pdmVsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhazsgIC8vIENhc2UgQUkgLSBBVlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9IC8vIHN3aXRjaCBjYXNlIHNvYnJlIGVsIHRpcG8gZGUgbm90YSBhY3RpdmEuXG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIENyZWFuZG8gdW4gQUlcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAgLy8gQXN1bnRvIERlIGxhIG5vdGEgcXVlIGVzdFx1MDBFOSBjcmVhbmRvIGN1YW5kbyBlcyBjdWFscXVlaXIgY29zYVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkRlcGVuZGllbmRvIGRlIGxhIGVzdHJ1Y3R1cmEsIGdldEFzdW50byBkZWJlcmlhIHRlbmVyIHN1IGNsYXNpZmljYWNpXHUwMEYzbi4gQXF1aSB2YXMgYSB0ZW5lciB1biBlcnJvci5cIikgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH0gLy8gc3dpdGNoIHRpcG8oc2lzdGVtYSkgLT4gU29icmUgbGEgbm90YSBxdWUgZXN0XHUwMEU5IGNyZWFuZG8uXG5cbiAgICAgICAgfSBlbHNlIHsgLy8gYWN0aXZvID09IG51bGxcbiAgICAgICAgICAgIHNpQXN1bnRvID0gZmFsc2U7XG4gICAgICAgIH0gXG4gICAgICAgIHJldHVybiB7c2lBc3VudG8sIG5vbWJyZTogcGFkcmVzfVxuICAgIH1cblxuICAgIGFzeW5jIGdldFByb3llY3RvR1REKCkge1xuICAgICAgICBsZXQgdGlwbyA9IHRoaXMuaW5mb1N1YnNpc3RlbWEudHlwZTtcbiAgICAgICAgbGV0IG5vdGFzRiA9IGF3YWl0IEZpZWxkSGFuZGxlclV0aWxzLmZpbmRNYWluRmlsZXNXaXRoU3RhdGUoXCJQR1REXCIsIG51bGwsIHRoaXMucGx1Z2luKTtcbiAgICAgICAgbGV0IG5vdGFGLCB0aXR1bG8gPSBbXTtcbiAgICAgICAgbGV0IHBhZHJlUEdURDtcbiAgICBcbiAgICAgICAgaWYgKCF0aGlzLm5vdGEuYXN1bnRvRGVmaW5pZG8pIHtcbiAgICAgICAgICAgIHBhZHJlUEdURCA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKFtcIlNpXCIsIFwiTm9cIl0sIFt0cnVlLCBmYWxzZV0sIGZhbHNlLCBgJHt0aGlzLm5vdGEudGl0dWxvfSBlcyBoaWpvIGRlIHVuIFByb3llY3RvIEdURD9gKTtcbiAgICBcbiAgICAgICAgICAgIGlmIChwYWRyZVBHVEQpIHtcbiAgICAgICAgICAgICAgICBub3RhRiA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKG5vdGFzRi5tYXAoYiA9PiBiLnRpdHVsbyksIG5vdGFzRi5tYXAoYiA9PiBiKSwgZmFsc2UsIGBcdTAwQkZRdVx1MDBFOSBQcm95ZWN0byBHVEQgZXMgcGFkcmUgZGUgJHt0aGlzLm5vdGEudGl0dWxvfT86YCk7XG4gICAgICAgICAgICAgICAgaWYgKG5vdGFGID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJTaW4gcHJveWVjdG8gR1REIGRlZmluaWRvLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhSW50ZXJlcyA9IEFycmF5LmlzQXJyYXkobm90YUY/LmFyZWFJbnRlcmVzKSBcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbm90YUYuYXJlYUludGVyZXMubWFwKGVsZW1lbnRvID0+IGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpIFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBub3RhRj8uYXJlYUludGVyZXMgPyBbbm90YUYuYXJlYUludGVyZXMucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKV0gXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBub3RhRj8uYXJlYVZpZGEgXG4gICAgICAgICAgICAgICAgICAgICAgICA/IChBcnJheS5pc0FycmF5KG5vdGFGLmFyZWFWaWRhKSA/IG5vdGFGLmFyZWFWaWRhWzBdLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykgOiBub3RhRi5hcmVhVmlkYS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKSBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogXCJObyBlcyBkZSBuaW5nXHUwMEZBbiBBcmVhIGRlIFZpZGFcIjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvUSA9IEFycmF5LmlzQXJyYXkobm90YUY/LnByb3llY3RvUSkgXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG5vdGFGLnByb3llY3RvUS5tYXAoZWxlbWVudG8gPT4gZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSkgXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG5vdGFGPy5wcm95ZWN0b1EgPyBbbm90YUYucHJveWVjdG9RLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyldIFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdGl0dWxvID0gW25vdGFGLnRpdHVsb107XG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGFGPy5wcm95ZWN0b0dURCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdHVsbyA9IHRpdHVsby5jb25jYXQobm90YUYucHJveWVjdG9HVEQubWFwKGVsZW1lbnRvID0+IGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub3RhRj8ucHJveWVjdG9HVEQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdHVsby5wdXNoKG5vdGFGLnByb3llY3RvR1RELnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hc3VudG9EZWZpbmlkbyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEubml2ZWxQID0gIWlzTmFOKHBhcnNlSW50KG5vdGFGPy5uaXZlbFApKSBcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcGFyc2VJbnQobm90YUYubml2ZWxQKSArIDEgXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aXR1bG8gPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGEubml2ZWxQID0gMDtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiB0aXR1bG87XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ub3RhLnByb3llY3RvR1REO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0UmVuYW1lKCl7XG4gICAgICAgIGxldCBuZXdOYW1lLCBmb2xkZXI7XG4gICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICBsZXQgZm9sZGVyQVYgPSBBcnJheS5pc0FycmF5KHRoaXMubm90YS5hcmVhVmlkYSk/IHRoaXMubm90YS5hcmVhVmlkYVswXSA6IHRoaXMubm90YS5hcmVhVmlkYTsgXG4gICAgICAgIG5ld05hbWUgPSBgJHt0aGlzLmluZm9TdWJzaXN0ZW1hLmZvbGRlcn0vJHt0aGlzLm5vdGEudHJpbWVzdHJlfS8ke2ZvbGRlckFWfS8ke3RoaXMuaW5mb1N1YnNpc3RlbWEudHlwZX0gLSAke3RoaXMubm90YS5pZH0ubWRgXG4gICAgICAgIGZvbGRlciA9IGAke3RoaXMuaW5mb1N1YnNpc3RlbWEuZm9sZGVyfS8ke3RoaXMubm90YS50cmltZXN0cmV9LyR7Zm9sZGVyQVZ9YFxuICAgICAgICBhd2FpdCBGaWVsZEhhbmRsZXJVdGlscy5jcmVhckNhcnBldGEoZm9sZGVyKTtcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMudHAuZmlsZS5jb25maWcudGFyZ2V0X2ZpbGU7XG4gICAgICAgIGNvbnN0IGV4aXN0ZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgobmV3TmFtZSk7XG4gICAgICAgXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChleGlzdGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vbWJyZUZpbGUgPSBuZXdOYW1lLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgICAgICAgICBjb25zdCBib3JyYXIgPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihcbiAgICAgICAgICAgICAgICAgICAgW1wiU29icmVlc2NyaWJpciBBcmNoaXZvIEFjdHVhbFwiLCBcIkRldGVuZXIgY3JlYWNpXHUwMEYzbiBkZWwgYXJjaGl2by5cIl0sXG4gICAgICAgICAgICAgICAgICAgIFt0cnVlLCBmYWxzZV0sXG4gICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGBcdTAwQkYke25vbWJyZUZpbGUucG9wKCl9IHlhIGV4aXN0ZS4gUXVcdTAwRTkgZGVzZWFzIGhhY2VyP2BcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChib3JyYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LmRlbGV0ZShleGlzdGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBhcHAudmF1bHQucmVuYW1lKGZpbGUsIG5ld05hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBcmNoaXZvIHJlbm9tYnJhZG8gY29uIFx1MDBFOXhpdG8uXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld05hbWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNhbmNlbGFuZG8gbGEgY3JlYWNpXHUwMEYzbiBkZWwgYXJjaGl2by5cIik7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlByb2Nlc28gY2FuY2VsYWRvIHBvciBlbCB1c3VhcmlvLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LnJlbmFtZShmaWxlLCBuZXdOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBcmNoaXZvIHJlbm9tYnJhZG8gY29uIFx1MDBFOXhpdG8uXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3TmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWwgY2FtYmlhciBlbCBub21icmVcIiwgZXJyb3IpO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgICBhc3luYyBnZXRUcmltZXN0cmUoKXsgIFxuICAgICAgICBsZXQgdGlwb1Npc3RlbWEgPSB0aGlzLmluZm9TdWJzaXN0ZW1hLnR5cGU7XG4gICAgICAgIGxldCBub21icmVTaXN0ZW1hID0gdGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlTmFtZTtcbiAgICAgICAgbGV0IHRyaW1lc3RyZTtcbiAgICAgICAgLy9sZXQgdHJpbWVzdHJlcyA9IGF3YWl0IHRoaXMuYWN0aXZlU3RydWN0dXJlUmVzb3VyY2VzKFwiVHJpbWVzdHJhbFwiKTsgLy8gRnVuY2lvbmEgZW4gbGEgdmVyc2lcdTAwRjNuIDEuMCBkZSBBcmVhcyBkZSBWaWRhLlxuICAgICAgICBsZXQgdHJpbWVzdHJlcyA9IGF3YWl0IEZpZWxkSGFuZGxlclV0aWxzLmZpbmRNYWluRmlsZXNXaXRoU3RhdGUoXCJUUVwiLG51bGwsIHRoaXMucGx1Z2luKTtcbiAgICAgICAgXG4gICAgICAgIHN3aXRjaCh0aXBvU2lzdGVtYSkge1xuICAgICAgICAgICAgY2FzZSBcIkFWXCI6XG4gICAgICAgICAgICBjYXNlIFwiUFFcIjpcbiAgICAgICAgICAgICAgICAvLyBMXHUwMEYzZ2ljYSBwYXJhIHBlcm1pdGlyIGFsIHVzdWFyaW8gZWxlZ2lyIHVuYSB0YXJlYSBlc3BlY1x1MDBFRGZpY2EuXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdHJpbWVzdHJlID0gYXdhaXQgdGhpcy5zdWdnZXN0ZXIodHJpbWVzdHJlcy5tYXAoYiA9PiBiLmZpbGUuYmFzZW5hbWUpLHRyaW1lc3RyZXMubWFwKGIgPT4gYi5maWxlLmJhc2VuYW1lKSwgZmFsc2UsIGBUcmltZXN0cmUgZGVsICR7bm9tYnJlU2lzdGVtYX06YCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiT0NBXCI6IC8vIE9iamV0aXZvQ29tcGFzc0FudWFsIFxuICAgICAgICAgICAgICAgICAgICB0cmltZXN0cmUgPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcIlExXCIsIFwiUTJcIiwgXCJRM1wiLCBcIlE0XCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBgJHt0aGlzLm5vdGEuYVx1MDBGMW99LVExYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7dGhpcy5ub3RhLmFcdTAwRjFvfS1RMmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGAke3RoaXMubm90YS5hXHUwMEYxb30tUTNgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBgJHt0aGlzLm5vdGEuYVx1MDBGMW99LVE0YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgYFx1MDBCRkVuIHF1XHUwMEU5IHRyaW1lc3RyZSBkZWwgJHt0aGlzLm5vdGEuYVx1MDBGMW99IGNvbnNpZGVyYXMgcXVlIHNlIHB1ZWRlIHJlYWxpemFyIGVzZSBvYmpldGl2bz9gXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJDVElcIjogLy8gQ29tcGFzc1RyaW1lc3RyYWxJbmljaW9cbiAgICAgICAgICAgICAgICAgICAgdHJpbWVzdHJlID0gYXdhaXQgdGhpcy5zdWdnZXN0ZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICBbXCJRMVwiLCBcIlEyXCIsIFwiUTNcIiwgXCJRNFwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7dGhpcy5ub3RhLmFcdTAwRjFvfS1RMWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGAke3RoaXMubm90YS5hXHUwMEYxb30tUTJgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBgJHt0aGlzLm5vdGEuYVx1MDBGMW99LVEzYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7dGhpcy5ub3RhLmFcdTAwRjFvfS1RNGAsXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcdTAwQkZEZSBxdVx1MDBFOSB0cmltZXN0cmUgZGVsICR7dGhpcy5ub3RhLmFcdTAwRjFvfSBlcyBlc3RhIHBsYW5lYWNpXHUwMEYzbj9gXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vIFNpIGVsIHVzdWFyaW8gZWxpZ2UgXCJPdHJvXCIgbyBjdWFscXVpZXIgb3RyYSBvcGNpXHUwMEYzbi5cbiAgICAgICAgICAgICAgICB0cmltZXN0cmUgPSBhd2FpdCB0aGlzLnN1Z2dlc3Rlcih0cmltZXN0cmVzLm1hcChiID0+IGIuZmlsZS5iYXNlbmFtZSksdHJpbWVzdHJlcy5tYXAoYiA9PiBiLmZpbGUucGF0aCksIGZhbHNlLCBgVHJpbWVzdHJlIGRlbCAke25vbWJyZVNpc3RlbWF9OmApO1xuICAgICAgICAgICAgICAgIH1cblx0ICAgIC8vIFZlcmlmaWNhciBzaSBlbCB1c3VhcmlvIHByZXNpb25cdTAwRjMgRXNjLlxuICAgICAgICBpZiAodHJpbWVzdHJlID09PSBudWxsKSB7XG4gICAgICAgIG5ldyBOb3RpY2UoXCJNb2RpZmljYWNpXHUwMEYzbiBkZSBub3RhIGNhbmNlbGFkYSBwb3IgZWwgdXN1YXJpby5cIik7XG4gICAgICAgIHJldHVybjsgLy8gVGVybWluYSBsYSBlamVjdWNpXHUwMEYzbiBkZSBsYSBmdW5jaVx1MDBGM24gYXF1XHUwMEVELlxuXHQgICAgfVxuICAgICAgICB0aGlzLm5vdGEudHJpbWVzdHJlID0gdHJpbWVzdHJlO1xuICAgICAgICByZXR1cm4gdHJpbWVzdHJlO1xuICAgIH1cbiAgfSIsICJpbXBvcnQgeyBOb3RlRmllbGRIYW5kbGVyIH0gZnJvbSAnLi4vRkggQmFzZS9Ob3RlRmllbGRIYW5kbGVyJzsgLy8gQXNlZ1x1MDBGQXJhdGUgZGUgaW1wb3J0YXIgTm90ZUZpZWxkSGFuZGxlciBzaSBlcyBuZWNlc2FyaW9cbmltcG9ydCB7IEZpZWxkSGFuZGxlclV0aWxzIH0gZnJvbSAnLi4vLi4vRmllbGRIYW5kbGVyVXRpbHMnO1xuaW1wb3J0IHsgVEZpbGUsIFRGb2xkZXIsIE5vdGljZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IEFub3RhY2lvbmVzRmllbGRIYW5kbGVyfSBmcm9tICcuLi8uLi9JbnRlcmZhY2VzL0Fub3RhY2lvbmVzRmllbGRIYW5kbGVyJztcblxuZXhwb3J0IGNsYXNzIEFub3RhY2lvbmVzRmllbGRIYW5kbGVyIGV4dGVuZHMgTm90ZUZpZWxkSGFuZGxlciBpbXBsZW1lbnRzIEFub3RhY2lvbmVzRmllbGRIYW5kbGVye1xuICAgIGNvbnN0cnVjdG9yKHRwOiBhbnksIGZvbGRlcjogc3RyaW5nLCBwbHVnaW46IGFueSkge1xuICAgICAgc3VwZXIodHAsIGZvbGRlciwgcGx1Z2luKTsgLy8gTGxhbWEgYWwgY29uc3RydWN0b3IgZGUgbGEgY2xhc2UgcGFkcmVcbiAgICAgIHRoaXMucGF0aENhbXBvcyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmZpbGVfY2FtcG9zQ2VudHJhbCArIFwiLm1kXCI7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0Q2xhc2lmaWNhY2lvbigpOiBQcm9taXNlPHsgY2xhc2U6IHN0cmluZyB8IG51bGwsIHRhZzogc3RyaW5nIHwgbnVsbCB9IHwgdW5kZWZpbmVkPiB7XG4gICAgICAgIGxldCBjbGFzaWZpY2FjaW9uOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgICAgICAgbGV0IHRhZ0NsYXNpZmljYWNpb246IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICAgICAgICBsZXQgY2xhc2lmaWNhY2lvbkFYOiB7IFt4OiBzdHJpbmddOiBhbnk7IH0gPSB7fTtcbiAgICAgICAgbGV0IHRhZ3NDbGFzaWZpY2FjaW9uQVg6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGxldCBudWV2YUNsYXNpZmljYWNpb24gPSBmYWxzZTtcbiAgICBcbiAgICAgICAgY29uc3QgZmlsZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgodGhpcy5wYXRoQ2FtcG9zKTtcbiAgICAgICAgaWYgKCFmaWxlKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKFwiQXJjaGl2byBubyBlbmNvbnRyYWRvLlwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBjb25zdCBmcm9udG1hdHRlciA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXI7XG4gICAgICAgIGlmIChmcm9udG1hdHRlcikge1xuICAgICAgICAgICAgY2xhc2lmaWNhY2lvbkFYID0gZnJvbnRtYXR0ZXIudGl0dWxvQ2xhc2lmaWNhY2lvbkFYIHx8IFtdO1xuICAgICAgICAgICAgdGFnc0NsYXNpZmljYWNpb25BWCA9IGZyb250bWF0dGVyLnRhZ3NDbGFzaWZpY2FjaW9uQVggfHwgW107XG4gICAgXG4gICAgICAgICAgICBjb25zdCBzdWdnZXN0ZXIgPSB0aGlzLnRwLnN5c3RlbS5zdGF0aWNfZnVuY3Rpb25zLmdldChcInN1Z2dlc3RlclwiKTtcbiAgICAgICAgICAgIHRhZ0NsYXNpZmljYWNpb24gPSBhd2FpdCBzdWdnZXN0ZXIoY2xhc2lmaWNhY2lvbkFYLCB0YWdzQ2xhc2lmaWNhY2lvbkFYLCBmYWxzZSwgXCJcdTAwQkZDbGFzaWZpY2FyXHUwMEVEYXMgZXN0YSBub3RhIGJham8gYWxndW5hIGRlIGxhcyBzaWd1aWVudGVzIGNhdGVnb3JcdTAwRURhcz9cIik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICh0YWdDbGFzaWZpY2FjaW9uID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIkNyZWFjaVx1MDBGM24gZGUgbm90YSBjYW5jZWxhZGEgcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGFnQ2xhc2lmaWNhY2lvbiA9PT0gXCJOdWV2b1wiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvbXB0ID0gdGhpcy50cC5zeXN0ZW0uc3RhdGljX2Z1bmN0aW9ucy5nZXQoXCJwcm9tcHRcIik7XG4gICAgICAgICAgICAgICAgY2xhc2lmaWNhY2lvbiA9IGF3YWl0IHByb21wdChcIlx1MDBCRkN1YWwgZXMgZWwgbm9tYnJlIGRlIGxhIG51ZXZhIGNsYXNpZmljYWNpXHUwMEYzbiBxdWUgdmFzIGEgaW5ncmVzYXI/XCIsIFwiTWlDbGFzaWZpY2FjaVx1MDBGM25cIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGNsYXNpZmljYWNpb24gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIkNyZWFjaVx1MDBGM24gZGUgbm90YSBjYW5jZWxhZGEgcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHRhZ0NsYXNpZmljYWNpb24gPSBhd2FpdCBwcm9tcHQoXCJcdTAwQkZDdWFsIGVzIGVsIHRhZyBxdWUgdXRpbGl6YXJhcyBwYXJhIFwiICsgY2xhc2lmaWNhY2lvbiArIFwiPy4gTm8gdXRpbGljZXMgZXNwYWNpb3MgZW4gbGEgZGVmaW5pY2lcdTAwRjNuIGRlbCB0YWcuXCIsIFwibnVldm9UYWdcIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHRhZ0NsYXNpZmljYWNpb24gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIkNyZWFjaVx1MDBGM24gZGUgbm90YSBjYW5jZWxhZGEgcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIG51ZXZhQ2xhc2lmaWNhY2lvbiA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRhZ0NsYXNpZmljYWNpb24gPT09IFwiTmluZ3VuYVwiKSB7XG4gICAgICAgICAgICAgICAgdGFnQ2xhc2lmaWNhY2lvbiA9IFwiXCI7XG4gICAgICAgICAgICAgICAgY2xhc2lmaWNhY2lvbiA9IFwiXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGljZSA9IHRhZ3NDbGFzaWZpY2FjaW9uQVguaW5kZXhPZih0YWdDbGFzaWZpY2FjaW9uKTtcbiAgICAgICAgICAgICAgICBjbGFzaWZpY2FjaW9uID0gY2xhc2lmaWNhY2lvbkFYW2luZGljZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgaWYgKG51ZXZhQ2xhc2lmaWNhY2lvbikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCBhcHAuZmlsZU1hbmFnZXIucHJvY2Vzc0Zyb250TWF0dGVyKGZpbGUsIChmcm9udG1hdHRlcjogeyB0aXR1bG9DbGFzaWZpY2FjaW9uQVg6IGFueVtdLCB0YWdzQ2xhc2lmaWNhY2lvbkFYOiBhbnlbXSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NsYXNpZmljYWNpb24gPSBbLi4uY2xhc2lmaWNhY2lvbkFYLCBjbGFzaWZpY2FjaW9uXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3VGFnQ2xhc2lmaWNhY2lvbiA9IFsuLi50YWdzQ2xhc2lmaWNhY2lvbkFYLCB0YWdDbGFzaWZpY2FjaW9uXTtcbiAgICAgICAgICAgICAgICAgICAgZnJvbnRtYXR0ZXIudGl0dWxvQ2xhc2lmaWNhY2lvbkFYID0gbmV3Q2xhc2lmaWNhY2lvbjtcbiAgICAgICAgICAgICAgICAgICAgZnJvbnRtYXR0ZXIudGFnc0NsYXNpZmljYWNpb25BWCA9IG5ld1RhZ0NsYXNpZmljYWNpb247XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRnJvbnRtYXR0ZXIgYWN0dWFsaXphZG8gY29uIFx1MDBFOXhpdG9cIik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWwgYWN0dWFsaXphciBlbCBmcm9udG1hdHRlclwiLCBlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXG4gICAgICAgIGlmICh0YWdDbGFzaWZpY2FjaW9uICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB0YWdDbGFzaWZpY2FjaW9uID0gXCJjbC9cIiArIHRhZ0NsYXNpZmljYWNpb247XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgdGhpcy5ub3RhLmNsYXNpZmljYWNpb25BWCA9IGNsYXNpZmljYWNpb247XG4gICAgICAgIHRoaXMubm90YS50YWdDbGFzaWZpY2FjaW9uQVggPSB0YWdDbGFzaWZpY2FjaW9uO1xuICAgIFxuICAgICAgICByZXR1cm4geyBjbGFzZTogY2xhc2lmaWNhY2lvbiwgdGFnOiB0YWdDbGFzaWZpY2FjaW9uIH07XG4gICAgfVxufSIsICJpbXBvcnQgeyBOb3RlRmllbGRIYW5kbGVyIH0gZnJvbSAnLi4vRkggQmFzZS9Ob3RlRmllbGRIYW5kbGVyJzsgLy8gQXNlZ1x1MDBGQXJhdGUgZGUgaW1wb3J0YXIgTm90ZUZpZWxkSGFuZGxlciBzaSBlcyBuZWNlc2FyaW9cbmltcG9ydCB7IEZpZWxkSGFuZGxlclV0aWxzIH0gZnJvbSAnLi4vLi4vRmllbGRIYW5kbGVyVXRpbHMnO1xuaW1wb3J0IHsgVEZpbGUgfSBmcm9tICdvYnNpZGlhbic7XG5cbmV4cG9ydCBjbGFzcyBUcmFuc2FjY2lvbmVzRmllbGRIYW5kbGVyIGV4dGVuZHMgTm90ZUZpZWxkSGFuZGxlcntcbiAgICBjb25zdHJ1Y3Rvcih0cDogYW55LCBmb2xkZXI6IHN0cmluZywgcGx1Z2luOiBhbnkpIHtcbiAgICAgIHN1cGVyKHRwLCBmb2xkZXIsIHBsdWdpbik7IC8vIExsYW1hIGFsIGNvbnN0cnVjdG9yIGRlIGxhIGNsYXNlIHBhZHJlXG4gICAgfVxuICAgIGFzeW5jIGdldEZlY2hhKCkgOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBsZXQgZmVjaGE7ICBcbiAgICAgICAgbGV0IGZlY2hhT3JpZ2luYWwgPSBhd2FpdCB0aGlzLnByb21wdChgQ29uZmlybWEgbGEgZmVjaGEgZGUgbGEgdHJhbnNhY2NpXHUwMEYzbjogYCwgYCR7bW9tZW50KCkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tJyl9YCwgdHJ1ZSlcbiAgICAgICAgLy8gUGFyc2VhbmRvIGxhIGZlY2hhIG9yaWdpbmFsIHV0aWxpemFuZG8gbW9tZW50XG4gICAgICAgIGxldCBmZWNoYU1vbWVudCA9IG1vbWVudChmZWNoYU9yaWdpbmFsLCBcIllZWVktTU0tREQgSEg6bW1cIik7XG4gICAgICAgIC8vIEZvcm1hdGVhbmRvIGxhIG51ZXZhIGZlY2hhIGFsIGZvcm1hdG8gZGVzZWFkb1xuICAgICAgICBmZWNoYSA9IGZlY2hhTW9tZW50LmZvcm1hdChcIllZWVktTU0tREQgZGRkZCBISDptbVwiKTtcbiAgICAgICAgdGhpcy5ub3RhLmZlY2hhID0gZmVjaGE7XG4gICAgICAgIHJldHVybiBmZWNoYTtcbiAgICB9XG4gICAgXG4gICAgICAgIGFzeW5jIGdldFJlbmFtZSgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgICBsZXQgZmVjaGEgPSBtb21lbnQodGhpcy5ub3RhLmZlY2hhLCBcIllZWVktTU0tREQgZGRkZCBISDptbVwiKTtcbiAgICAgICAgICAgIGxldCBmZWNoYVkgPSBmZWNoYS5mb3JtYXQoXCJZWVlZXCIpO1xuICAgICAgICAgICAgbGV0IGZlY2hhTWVzID0gZmVjaGEuZm9ybWF0KFwiTU0gLSBNTU1NXCIpO1xuXG4gICAgICAgICAgICBjb25zdCBuZXdOYW1lID0gYCR7dGhpcy5pbmZvU3Vic2lzdGVtYS5mb2xkZXJ9LyR7ZmVjaGFZfS8ke2ZlY2hhTWVzfS8ke3RoaXMuaW5mb1N1YnNpc3RlbWEudHlwZX0gLSAke3RoaXMubm90YS5pZH0ubWRgXG4gICAgICAgICAgICBjb25zdCBmb2xkZXIgPSBgJHt0aGlzLmluZm9TdWJzaXN0ZW1hLmZvbGRlcn0vJHtmZWNoYVl9LyR7ZmVjaGFNZXN9YFxuICAgICAgICAgICAgYXdhaXQgRmllbGRIYW5kbGVyVXRpbHMuY3JlYXJDYXJwZXRhKGZvbGRlcik7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMudHAuZmlsZS5jb25maWcudGFyZ2V0X2ZpbGU7XG4gICAgICAgICAgICBjb25zdCBleGlzdGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG5ld05hbWUpO1xuICAgIFxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm9tYnJlRmlsZSA9IG5ld05hbWUuc3BsaXQoXCIvXCIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBib3JyYXIgPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcIlNvYnJlZXNjcmliaXIgQXJjaGl2byBBY3R1YWxcIiwgXCJEZXRlbmVyIGNyZWFjaVx1MDBGM24gZGVsIGFyY2hpdm8uXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgW3RydWUsIGZhbHNlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBgXHUwMEJGJHtub21icmVGaWxlLnBvcCgpfSB5YSBleGlzdGUuIFF1XHUwMEU5IGRlc2VhcyBoYWNlcj9gXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChib3JyYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGFwcC52YXVsdC5kZWxldGUoZXhpc3RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBhcHAudmF1bHQucmVuYW1lKGZpbGUsIG5ld05hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQXJjaGl2byByZW5vbWJyYWRvIGNvbiBcdTAwRTl4aXRvLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3TmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ2FuY2VsYW5kbyBsYSBjcmVhY2lcdTAwRjNuIGRlbCBhcmNoaXZvLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlByb2Nlc28gY2FuY2VsYWRvIHBvciBlbCB1c3VhcmlvLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGFwcC52YXVsdC5yZW5hbWUoZmlsZSwgbmV3TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFyY2hpdm8gcmVub21icmFkbyBjb24gXHUwMEU5eGl0by5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3TmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIGNhbWJpYXIgZWwgbm9tYnJlXCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICB9IiwgIi8qIHNyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL2ZpZWxkSGFuZGxlcnMvRkggRXN0cnVjdHVyYS9BcmVhc0ludGVyZXNGaWVsZEhhbmRsZXIudHMgKi9cbmltcG9ydCB7IE5vdGVGaWVsZEhhbmRsZXIgfSBmcm9tICcuLi9GSCBCYXNlL05vdGVGaWVsZEhhbmRsZXInOyAvLyBBc2VnXHUwMEZBcmF0ZSBkZSBpbXBvcnRhciBOb3RlRmllbGRIYW5kbGVyIHNpIGVzIG5lY2VzYXJpb1xuaW1wb3J0IHsgRmllbGRIYW5kbGVyVXRpbHMgfSBmcm9tICcuLi8uLi9GaWVsZEhhbmRsZXJVdGlscyc7XG5pbXBvcnQgeyBURmlsZSwgVEZvbGRlciwgTm90aWNlIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5cbmV4cG9ydCBjbGFzcyBBcmVhc0ludGVyZXNGaWVsZEhhbmRsZXIgZXh0ZW5kcyBOb3RlRmllbGRIYW5kbGVye1xuICAgIGNvbnN0cnVjdG9yKHRwOiBhbnksIGZvbGRlcjogc3RyaW5nLCBwbHVnaW46IGFueSkge1xuICAgICAgc3VwZXIodHAsIGZvbGRlciwgcGx1Z2luKTsgLy8gTGxhbWEgYWwgY29uc3RydWN0b3IgZGUgbGEgY2xhc2UgcGFkcmVcbiAgICB9XG5cbiAgICBhc3luYyBnZXRBc3VudG8oKXsgLy8gRnVuY2lvbmEgY29uIGZyb250bWF0dGVyXG5cbiAgICAgICAgbGV0IHRpcG9TaXN0ZW1hID0gdGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlO1xuICAgICAgICBsZXQgcGFkcmVzID0gW107XG4gICAgICAgIGxldCBhY3Rpdm8gPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcbiAgICAgICAgbGV0IHNpQXN1bnRvID0gZmFsc2U7XG4gICAgICAgIGxldCBub21icmUgPSBcIlwiO1xuICAgICAgICBsZXQgbm90YTtcbiAgICAgICAgaWYgKGFjdGl2byAhPSBudWxsKSB7XG4gICAgICAgICAgICBub21icmUgPSBhY3Rpdm8uYmFzZW5hbWU7XG4gICAgICAgICAgICBub3RhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGFjdGl2byk7XG4gICAgICAgICAgICAvLyBBc2VndXJhciBxdWUgbm90YS5mcm9udG1hdHRlciBleGlzdGUgeSBhc2lnbmFyIHVuIG9iamV0byB2YWNcdTAwRURvIGEgZmlsZVxuICAgICAgICAgICAgbm90YS5mcm9udG1hdHRlciA9IG5vdGEuZnJvbnRtYXR0ZXIgfHwge307XG4gICAgICAgICAgICBub3RhLmZyb250bWF0dGVyLmZpbGUgPSB7fTtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24obm90YS5mcm9udG1hdHRlci5maWxlLCBhY3Rpdm8pO1xuICAgICAgICAgICAgLy8xLiBzaUFzdW50byA9IGF3YWl0IHN1Z2dlc3RlcihbXCJTaVwiLCBcIk5vXCJdLCBbdHJ1ZSwgZmFsc2VdLCB0cnVlLCBub21icmUgKyBcIiBlcyBvcmlnZW4gZGUgXCIgKyB0aGlzLm5vdGEudGl0dWxvICsgXCI/XCIpO1xuICAgICAgICAgICAgcGFkcmVzLnVuc2hpZnQobm9tYnJlKTsgLy8gQVx1MDBGMWFkZSBlbCBub21icmUgYWwgaW5pY2lvIGRlbCBhcnJlZ2xvLCBkZXNwbGF6YW5kbyBsb3MgZGVtXHUwMEUxcyBlbGVtZW50b3NcbiAgICAgICAgICAgIGxldCBuaXZlbDtcbiAgICAgICAgICAgICAgICAgICAgc2lBc3VudG8gPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihbXCJTaVwiLCBcIk5vXCJdLCBbdHJ1ZSwgZmFsc2VdLCB0cnVlLCBub21icmUgKyBcIiBlcyBvcmlnZW4gZGUgXCIgKyB0aGlzLm5vdGEudGl0dWxvICsgXCI/XCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2lBc3VudG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hc3VudG9EZWZpbmlkbyA9IHRydWU7IC8vIFBhcmEgcXVlIG5vIGVqZWN1dGUgbGEgYnVzcXVlZGEgZGUgQXJlYSBWaWRhLCBBcmVhIGRlIEludGVyXHUwMEU5cywgcHJveWVjdG8gUSBvIEdURFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIEFSRUEgREUgSU5URVJFU1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW5pY2lhbGl6YW1vcyB0aGlzLm5vdGEuYXJlYUludGVyZXMgY29uIG5vdGEudGl0dWxvIGNvbW8gZWwgcHJpbWVyIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlcj8udHlwZSA9PT0gXCJBSVwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMgPSBbbm90YS5mcm9udG1hdHRlci5maWxlLmJhc2VuYW1lXTsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmVyaWZpY2Ftb3Mgc2kgbm90YS5hcmVhSW50ZXJlcyBlcyB1biBhcnJlZ2xvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm90YS5mcm9udG1hdHRlci5hcmVhSW50ZXJlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXMgdW4gYXJyZWdsbywgaXRlcmFtb3Mgc29icmUgY2FkYSBlbGVtZW50byAoZXhjbHV5ZW5kbyBlbCBwcmltZXIgZWxlbWVudG8geWEgYWdyZWdhZG8gcXVlIGVzIG5vdGEudGl0dWxvKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB5IGFwbGljYW1vcyBlbCByZWdleCBhIGNhZGEgZWxlbWVudG8uIEx1ZWdvIGNvbmNhdGVuYW1vcyBjb24gZWwgYXJyYXkgZXhpc3RlbnRlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMgPSB0aGlzLm5vdGEuYXJlYUludGVyZXMuY29uY2F0KG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMubWFwKGVsZW1lbnRvID0+IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5vIGVzIHVuIGFycmVnbG8sIHJldmlzYW1vcyBzaSBub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzIGV4aXN0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSwgYXBsaWNhbW9zIGVsIHJlZ2V4IHkgbG8gYVx1MDBGMWFkaW1vcyBjb21vIHNlZ3VuZG8gZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhSW50ZXJlcy5wdXNoKG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzIG5vIGV4aXN0ZSwgdGhpcy5ub3RhLmFyZWFJbnRlcmVzIHlhIHRlbmRyXHUwMEUxIG5vdGEudGl0dWxvIGNvbW8gc3UgXHUwMEZBbmljbyBlbGVtZW50b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZFUklGSUNBQ0lPTiBERSBBUkVBIERFIFZJREFcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlcj8uYXJlYVZpZGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFcyB1biBhcnJlZ2xvLCB1c2EgZWwgcHJpbWVyIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGFbMF0ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFcyB1biBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gbm90YS5mcm9udG1hdHRlci5hcmVhVmlkYS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gZXN0XHUwMEUxIGRlZmluaWRvIG8gZXN0XHUwMEUxIHZhY1x1MDBFRG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBcIk5vIGVzIGRlIG5pbmdcdTAwRkFuIEFyZWEgZGUgVmlkYVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcG9uaWVuZG8gc2kgQXN1bnRvIGVuIGZhbHNlIHBhcmEgbGFzIG5vdGFzIGVzdHJ1Y3R1cmEgQUkgeSBBVi4gXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LnR5cGUgPT09IFwiQUlcInx8bm90YT8uZnJvbnRtYXR0ZXI/LnR5cGUgPT09IFwiQVZcIil7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpQXN1bnRvID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERFRklOSVIgTklWRUxBSVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29tcHJ1ZWJhIHNpIG5pdmVsQUkgZXhpc3RlIHkgbm8gZXMgTmFOIGRlc3B1XHUwMEU5cyBkZSBpbnRlbnRhciBjb252ZXJ0aXJsbyBhIGVudGVyb1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihwYXJzZUludChub3RhLmZyb250bWF0dGVyPy5uaXZlbEFJKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaXZlbCA9IHBhcnNlSW50KG5vdGEuZnJvbnRtYXR0ZXIubml2ZWxBSSkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBuaXZlbEFJIG5vIGV4aXN0ZSBvIHN1IGNvbnZlcnNpXHUwMEYzbiBhIGVudGVybyByZXN1bHRhIGVuIE5hTiwgZXN0YWJsZWNlIG5pdmVsIGEgMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pdmVsID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5uaXZlbEFJID0gbml2ZWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgeyAvLyBhY3Rpdm8gPT0gbnVsbFxuICAgICAgICAgICAgc2lBc3VudG8gPSBmYWxzZTtcbiAgICAgICAgfSBcbiAgICAgICAgcmV0dXJuIHtzaUFzdW50bywgbm9tYnJlOiBwYWRyZXN9XG4gICAgfVxuXG5cbiAgICBhc3luYyBnZXRBbGlhc2VzKCl7XG4gICAgICAgIHRoaXMubm90YS5hbGlhc2VzID0gW107ICBcbiAgICAgICAgdGhpcy5ub3RhLmFsaWFzZXMucHVzaChgJHt0aGlzLmluZm9TdWJzaXN0ZW1hLnR5cGV9LyR7dGhpcy5ub3RhLnRpdHVsb31gKVxuICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgaWYgKHRoaXMubm90YS5hcmVhVmlkYSAhPSBcIk5vIGVzIGRlIG5pbmdcdTAwRkFuIEFyZWEgZGUgVmlkYVwiKXtcbiAgICAgICAgdGhpcy5ub3RhLmFsaWFzZXMucHVzaChgJHt0aGlzLmluZm9TdWJzaXN0ZW1hLnR5cGV9LyR7dGhpcy5ub3RhLmFyZWFWaWRhfS8ke3RoaXMubm90YS50aXR1bG99YClcbiAgICAgICAgfSAgICAgICBcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm90YS5hbGlhc2VzO1xuICAgICAgIFxuICAgIH1cbiAgICBhc3luYyBnZXRSZW5hbWUoKXtcbiAgICAgICAgbGV0IG5ld05hbWUsIGZvbGRlcjtcbiAgICAgICAgZGVidWdnZXI7XG4gICAgICAgIGlmICh0aGlzLm5vdGEuYXJlYVZpZGE9PT1cIk5vIGVzIGRlIG5pbmdcdTAwRkFuIEFyZWEgZGUgVmlkYVwiKXtcbiAgICAgICAgICAgIG5ld05hbWUgPSBgJHt0aGlzLmluZm9TdWJzaXN0ZW1hLmZvbGRlcn0vT3RyYXMvJHt0aGlzLmluZm9TdWJzaXN0ZW1hLnR5cGV9IC0gJHt0aGlzLm5vdGEuaWR9Lm1kYFxuICAgICAgICAgICAgZm9sZGVyID0gYCR7dGhpcy5pbmZvU3Vic2lzdGVtYS5mb2xkZXJ9L090cmFzYFxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIG5ld05hbWUgPSBgJHt0aGlzLmluZm9TdWJzaXN0ZW1hLmZvbGRlcn0vJHt0aGlzLm5vdGEuYXJlYVZpZGF9LyR7dGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlfSAtICR7dGhpcy5ub3RhLmlkfS5tZGBcbiAgICAgICAgICAgIGZvbGRlciA9IGAke3RoaXMuaW5mb1N1YnNpc3RlbWEuZm9sZGVyfS8ke3RoaXMubm90YS5hcmVhVmlkYX1gXG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgRmllbGRIYW5kbGVyVXRpbHMuY3JlYXJDYXJwZXRhKGZvbGRlcik7XG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLnRwLmZpbGUuY29uZmlnLnRhcmdldF9maWxlO1xuICAgICAgICBjb25zdCBleGlzdGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG5ld05hbWUpO1xuICAgICAgIFxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZXhpc3RlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBub21icmVGaWxlID0gbmV3TmFtZS5zcGxpdChcIi9cIik7XG4gICAgICAgICAgICAgICAgY29uc3QgYm9ycmFyID0gYXdhaXQgdGhpcy5zdWdnZXN0ZXIoXG4gICAgICAgICAgICAgICAgICAgIFtcIlNvYnJlZXNjcmliaXIgQXJjaGl2byBBY3R1YWxcIiwgXCJEZXRlbmVyIGNyZWFjaVx1MDBGM24gZGVsIGFyY2hpdm8uXCJdLFxuICAgICAgICAgICAgICAgICAgICBbdHJ1ZSwgZmFsc2VdLFxuICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBgXHUwMEJGJHtub21icmVGaWxlLnBvcCgpfSB5YSBleGlzdGUuIFF1XHUwMEU5IGRlc2VhcyBoYWNlcj9gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAoYm9ycmFyKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGFwcC52YXVsdC5kZWxldGUoZXhpc3RlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LnJlbmFtZShmaWxlLCBuZXdOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQXJjaGl2byByZW5vbWJyYWRvIGNvbiBcdTAwRTl4aXRvLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdOYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJDYW5jZWxhbmRvIGxhIGNyZWFjaVx1MDBGM24gZGVsIGFyY2hpdm8uXCIpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcm9jZXNvIGNhbmNlbGFkbyBwb3IgZWwgdXN1YXJpby5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGFwcC52YXVsdC5yZW5hbWUoZmlsZSwgbmV3TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQXJjaGl2byByZW5vbWJyYWRvIGNvbiBcdTAwRTl4aXRvLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld05hbWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIGNhbWJpYXIgZWwgbm9tYnJlXCIsIGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QXJlYUludGVyZXMoKXtcbiAgICAgICAgbGV0IG5vbWJyZVRpcG8gPSB0aGlzLmluZm9TdWJzaXN0ZW1hLnR5cGVOYW1lO1xuICAgICAgICBsZXQgYXJlYXNJbnRlcmVzID0gYXdhaXQgRmllbGRIYW5kbGVyVXRpbHMuZmluZE1haW5GaWxlc1dpdGhTdGF0ZShcIkFJXCIsbnVsbCx0aGlzLnBsdWdpbilcbiAgICAgICAgbGV0IGFyZWFJbnRlcmVzLCBuaXZlbCwgdGl0dWxvLCBwYWRyZUFJLCBhcnJheUFJO1xuICAgICAgICBpZiAoIXRoaXMubm90YS5hc3VudG9EZWZpbmlkbykge1xuICAgICAgICAgICAgcGFkcmVBSSA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKFtcIlNpXCIsIFwiTm9cIl0sIFt0cnVlLGZhbHNlXSwgZmFsc2UsIGAgJHt0aGlzLm5vdGEudGl0dWxvfSBlcyBoaWpvIGRlIG90cmEgJHtub21icmVUaXBvfTpgKTtcbiAgICAgICAgICAgIC8vIExcdTAwRjNnaWNhIHBhcmEgcGVybWl0aXIgYWwgdXN1YXJpbyBlbGVnaXIgdW5hIHRhcmVhIGVzcGVjXHUwMEVEZmljYS5cbiAgICAgICAgICAgIGlmIChwYWRyZUFJKXtcbiAgICAgICAgICAgICAgICBhcmVhSW50ZXJlcyA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKGFyZWFzSW50ZXJlcy5tYXAoYiA9PiBiLnRpdHVsbykgLGFyZWFzSW50ZXJlcy5tYXAoYiA9PiBiKSwgZmFsc2UsIGBRdWUgQXJlYSBkZSBJbnRlclx1MDBFOXMgZXMgcGFkcmUgZGUgJHt0aGlzLm5vdGEudGl0dWxvfT86YCk7XG4gICAgICAgICAgICAgICAgaWYgKGFyZWFJbnRlcmVzID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJTaW4gQXJlYSBkZSBJbnRlcmVzXCIpO1xuICAgICAgICAgICAgICAgICAgICB0aXR1bG8gPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBuaXZlbCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gVGVybWluYSBsYSBlamVjdWNpXHUwMEYzbiBkZSBsYSBmdW5jaVx1MDBGM24gYXF1XHUwMEVELlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNleyAvLyBRVUUgSEFDRSBFU1RFIEVMU0U/P1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXN1bnRvRGVmaW5pZG8gPSB0cnVlOyAvLyBQYXJhIHF1ZSBubyBlamVjdXRlIGxhIGJ1c3F1ZWRhIGRlIEFyZWEgVmlkYSwgQXJlYSBkZSBJbnRlclx1MDBFOXMsIHByb3llY3RvIFEgbyBHVERcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZWFJbnRlcmVzLmFyZWFWaWRhID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBcIk5vIGVzIGRlIG5pbmdcdTAwRkFuIEFyZWEgZGUgVmlkYVwiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBhcmVhSW50ZXJlcy5hcmVhVmlkYS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRpdHVsbyA9IGFyZWFJbnRlcmVzLnRpdHVsbztcbiAgICAgICAgICAgICAgICAgICAgbml2ZWwgPSBwYXJzZUludChhcmVhSW50ZXJlcy5uaXZlbEFJKSArIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgdGl0dWxvID0gXCJcIjtcbiAgICAgICAgICAgICAgICBuaXZlbCA9IDA7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxuXHQgICAgdGhpcy5ub3RhLm5pdmVsQUkgPSBuaXZlbDtcbiAgICAgICAgcmV0dXJuIHRpdHVsbztcbiAgICAgfWVsc2V7XG4gICAgICAgcmV0dXJuIHRoaXMubm90YS5hcmVhSW50ZXJlczsgXG4gICAgICAgfVxuICAgIH1cblxuICB9IiwgImltcG9ydCB7IEFyZWFWaWRhRmllbGRIYW5kbGVyIH0gZnJvbSAnLi4vLi4vSW50ZXJmYWNlcy9BcmVhVmlkYUZpZWxkSGFuZGxlcic7XG5pbXBvcnQgeyBURmlsZSwgVEZvbGRlciwgTm90aWNlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgRmllbGRIYW5kbGVyVXRpbHMgfSBmcm9tICcuLi8uLi9GaWVsZEhhbmRsZXJVdGlscyc7XG5pbXBvcnQgeyBOb3RlRmllbGRIYW5kbGVyQmFzZSB9IGZyb20gJy4uL0ZIIEJhc2UvTm90ZUZpZWxkSGFuZGxlckJhc2UnOyAvLyBBc2VnXHUwMEZBcmF0ZSBkZSBpbXBvcnRhciBOb3RlRmllbGRIYW5kbGVyIHNpIGVzIG5lY2VzYXJpb1xuXG5leHBvcnQgY2xhc3MgQXJlYVZpZGFGaWVsZEhhbmRsZXIgZXh0ZW5kcyBOb3RlRmllbGRIYW5kbGVyQmFzZSBpbXBsZW1lbnRzIEFyZWFWaWRhRmllbGRIYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih0cDogYW55LCBmb2xkZXI6IHN0cmluZywgcGx1Z2luOiBhbnkpIHtcbiAgICAgIHN1cGVyKHRwLCBmb2xkZXIsIHBsdWdpbik7IC8vIExsYW1hIGFsIGNvbnN0cnVjdG9yIGRlIGxhIGNsYXNlIHBhZHJlXG4gICAgICB0aGlzLnBhdGhDYW1wb3MgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5maWxlX2NhbXBvc0NlbnRyYWwgKyBcIi5tZFwiO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEFyZWEoKXtcbiAgICAgICAgbGV0IGFyZWE6IHN0cmluZyB8IG51bGwsIGdydXBvOiBzdHJpbmcgfCBudWxsO1xuICAgICAgICBcbiAgICAgICAgbGV0IHRpcG9BcmVhID0gdGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlTmFtZTtcbiAgICAgICAgbGV0IG51ZXZhQXJlYSA9IGZhbHNlO1xuICAgICAgICBsZXQgYXJlYXNHcnVwb3MgPSAgdGhpcy5nZXREdXBsYXNGaWphcyhhcHAsIHRpcG9BcmVhKVxuICAgICAgICBsZXQgYXJlYUdydXBvID0gYXdhaXQgdGhpcy5zdWdnZXN0ZXIoYXJlYXNHcnVwb3MubWFwKGI9PiBiLnRleHRvKSwgYXJlYXNHcnVwb3MubWFwKGI9PiBiLnRleHRvKSwgZmFsc2UsIGBcdTAwQkZDdVx1MDBFMWwgJHt0aXBvQXJlYX0gZGVzZWFzIGNyZWFyP2ApXG4gICAgICAgICAgICAvLyBWZXJpZmljYXIgc2kgZWwgdXN1YXJpbyBwcmVzaW9uXHUwMEYzIEVzYy4gXG4gICAgICAgICAgICBpZiAoYXJlYUdydXBvID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIkNyZWFjaVx1MDBGM24gZGUgbm90YSBjYW5jZWxhZGEgcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjsgLy8gVGVybWluYSBsYSBlamVjdWNpXHUwMEYzbiBkZSBsYSBmdW5jaVx1MDBGM24gYXF1XHUwMEVELlxuICAgICAgICAgICAgfSBlbHNlIGlmIChhcmVhR3J1cG89PVwiTnVldm9cIil7XG4gICAgICAgICAgICAgICAgY2xhc2lmaWNhY2lvbiA9IGF3YWl0IHRoaXMucHJvbXB0KFwiXHUwMEJGQ3VhbCBlcyBlbCBub21icmUgZGUgbGEgbnVldmEgY2xhc2lmaWNhY2lcdTAwRjNuIHF1ZSB2YXMgYSBpbmdyZXNhcj9cIiwgXCJNaUNsYXNpZmljYWNpXHUwMEYzblwiLCB0cnVlKVxuICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhciBzaSBlbCB1c3VhcmlvIHByZXNpb25cdTAwRjMgRXNjLlxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xhc2lmaWNhY2lvbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIkNyZWFjaVx1MDBGM24gZGUgbm90YSBjYW5jZWxhZGEgcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBUZXJtaW5hIGxhIGVqZWN1Y2lcdTAwRjNuIGRlIGxhIGZ1bmNpXHUwMEYzbiBhcXVcdTAwRUQuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRhZ0NsYXNpZmljYWNpb24gPSBhd2FpdCB0aGlzLnByb21wdChcIlx1MDBCRkN1YWwgZXMgZWwgdGFnIHF1ZSB1dGlsaXphcmFzIHBhcmEgXCIgKyBjbGFzaWZpY2FjaW9uICsgXCI/LiBObyB1dGlsaWNlcyBlc3BhY2lvcyBlbiBsYSBkZWZpbmljaVx1MDBGM24gZGVsIHRhZy5cIiwgXCJudWV2b1RhZ1wiLCB0cnVlKVxuICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhciBzaSBlbCB1c3VhcmlvIHByZXNpb25cdTAwRjMgRXNjLlxuICAgICAgICAgICAgICAgIGlmICh0YWdDbGFzaWZpY2FjaW9uID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJDcmVhY2lcdTAwRjNuIGRlIG5vdGEgY2FuY2VsYWRhIHBvciBlbCB1c3VhcmlvLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBUZXJtaW5hIGxhIGVqZWN1Y2lcdTAwRjNuIGRlIGxhIGZ1bmNpXHUwMEYzbiBhcXVcdTAwRUQuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG51ZXZhQ2xhc2lmaWNhY2lvbiA9IHRydWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgaW5kaWNlID0gYXJlYXNHcnVwb3MuZmluZEluZGV4KG9iamV0byA9PiBvYmpldG8udGV4dG8gPT09IGFyZWFHcnVwbyk7XG4gICAgICAgICAgICAgICAgZ3J1cG8gPSBhcmVhc0dydXBvc1tpbmRpY2VdLmdydXBvO1xuICAgICAgICAgICAgICAgIGFyZWEgPSBhcmVhc0dydXBvc1tpbmRpY2VdLmFyZWE7XG4gICAgICAgICAgICAgICAgdGhpcy5ub3RhLmdydXBvID0gZ3J1cG87XG4gICAgICAgICAgICAgICAgdGhpcy5ub3RhLnRpdHVsbyA9IGFyZWE7XG4gICAgICAgICAgICByZXR1cm4ge2dydXBvOiBncnVwbywgdGl0dWxvOiBhcmVhfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICBnZXREdXBsYXNGaWphcyhhcHA6IEFwcCwgYXJlYTogc3RyaW5nKTogUHJvbWlzZTxHcnVwb0FjdGl2aWRhZFtdPiB7XG4gICAgICAgIC8vIEVuY3VlbnRyYSBlbCBhcmNoaXZvIHBvciBzdSBydXRhXG4gICAgICAgIGNvbnN0IGZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHRoaXMucGF0aENhbXBvcyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgLy8gVXNhIG1ldGFkYXRhQ2FjaGUgcGFyYSBvYnRlbmVyIGxvcyBtZXRhZGF0b3MgZGVsIGFyY2hpdm9cbiAgICAgICAgICAgICAgICBjb25zdCBtZXRhZGF0YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICAgICAgICAgICAgICAvLyBBY2NlZGUgYWwgZnJvbnQgbWF0dGVyIChZQU1MKSBkZWwgYXJjaGl2byB5IG9idGllbmUgZWwgYXJyZWdsbyBiYXNhZG8gZW4gZWwgdGVtYVxuICAgICAgICAgICAgICAgIGNvbnN0IGFycmVnbG9SZXN1bHQgPSBtZXRhZGF0YT8uZnJvbnRtYXR0ZXI/LlthcmVhXSB8fCBbXTtcbiAgICAgICAgICAgICAgICAvLyBDb25zdHJ1eWUgZWwgYXJyZWdsbyBkZSBvYmpldG9zIHJlc3VsdGFkbyBiYXNhZG8gZW4gbGEgZXN0cnVjdHVyYSBkZSBHcnVwb0FjdGl2aWRhZFxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdGFkbyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVsbGVuYSBlbCBhcnJlZ2xvIGNvbiBsb3MgZGF0b3MgZGVsIGFycmVnbG9SZXN1bHRcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcnJlZ2xvUmVzdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICBhcnJlZ2xvUmVzdWx0LmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtKSAmJiBpdGVtLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0YWRvLnB1c2goeyBncnVwbzogaXRlbVswXSwgYXJlYTogaXRlbVsxXSwgdGV4dG86IGl0ZW1bMF0rXCIvXCIraXRlbVsxXX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdGFkbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBvYnRlbmllbmRvIGVsIGFyY2hpdm8gZGUgY2FtcG9zOlwiLCBlcnJvcik7XG4gICAgICAgICAgICAvLyBBcXVcdTAwRUQgbWFuZWphclx1MDBFRGFzIGVsIGVycm9yIGNvbW8gc2VhIGFwcm9waWFkbyBwYXJhIHR1IGFwbGljYWNpXHUwMEYzblxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7IC8vIE8gZGV2b2x2ZXIgdW4gYXJyZWdsbyB2YWNcdTAwRURvIGNvbW8gcmVzdWx0YWRvIGRlIGVycm9yXG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZXZ1ZWx2ZSB1biBhcnJlZ2xvIHZhY1x1MDBFRG8gc2kgbm8gc2UgZW5jdWVudHJhIGVsIGFyY2hpdm8gbyBzaSBvY3VycmUgY3VhbHF1aWVyIG90cm8gcHJvYmxlbWFcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBcblxuICAgIGFzeW5jIGdldEZpbGVuYW1lKCl7XG4gICAgICAgIGxldCBmaWxlTmFtZTtcbiAgICAgICAgaWYgKHRoaXMuaW5mb1N1YnNpc3RlbWEuaGFzT3duUHJvcGVydHkoXCJmaWxlTmFtZVwiKSl7XG4gICAgICAgICAgICBjb25zdCBwYXJ0ZXMgPSB0aGlzLmluZm9TdWJzaXN0ZW1hLmZpbGVOYW1lLnNwbGl0KCcgLS0gJyk7XG4gICAgICAgICAgICB0aGlzLm5vdGEudHJpbWVzdHJlID0gcGFydGVzWzBdO1xuICAgICAgICAgICAgdGhpcy5ub3RhLnRpdHVsbyA9IHBhcnRlc1sxXTtcbiAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IHBhcnRlc1sxXTtcbiAgICAgICAgICAgIHRoaXMubm90YS5ncnVwbyA9IHBhcnRlc1syXTtcbiAgICAgICAgfVxuICAgICAgICBmaWxlTmFtZSA9IGAke3RoaXMubm90YS50cmltZXN0cmV9IC0gJHt0aGlzLm5vdGEudGl0dWxvfWAgICAgXG4gICAgICAgIHRoaXMubm90YS5maWxlbmFtZSA9IGZpbGVOYW1lO1xuICAgICAgICAgICAgXG4gICAgICAgIHJldHVybiBmaWxlTmFtZTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRUcmltZXN0cmUoKXtcbiAgICAgICAgbGV0IHRpcG9TaXN0ZW1hID0gdGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlO1xuICAgICAgICBsZXQgbm9tYnJlU2lzdGVtYSA9IHRoaXMuaW5mb1N1YnNpc3RlbWEudHlwZU5hbWU7XG4gICAgICAgIGxldCB0cmltZXN0cmU7XG4gICAgICAgIC8vbGV0IHRyaW1lc3RyZXMgPSBhd2FpdCB0aGlzLmFjdGl2ZVN0cnVjdHVyZVJlc291cmNlcyhcIlRyaW1lc3RyYWxcIik7IC8vIEZ1bmNpb25hIGVuIGxhIHZlcnNpXHUwMEYzbiAxLjAgZGUgQXJlYXMgZGUgVmlkYS5cbiAgICAgICAgbGV0IHRyaW1lc3RyZXMgPSBhd2FpdCBGaWVsZEhhbmRsZXJVdGlscy5maW5kTWFpbkZpbGVzV2l0aFN0YXRlKFwiVFFcIixudWxsLHRoaXMucGx1Z2luKTtcbiAgICAgICAgdHJpbWVzdHJlID0gYXdhaXQgdGhpcy5zdWdnZXN0ZXIodHJpbWVzdHJlcy5tYXAoYiA9PiBiLmZpbGUuYmFzZW5hbWUpLHRyaW1lc3RyZXMubWFwKGIgPT4gYi5maWxlLmJhc2VuYW1lKSwgZmFsc2UsIGBUcmltZXN0cmUgZGVsICR7bm9tYnJlU2lzdGVtYX06YCk7XG4gICAgICAgIC8vIFZlcmlmaWNhciBzaSBlbCB1c3VhcmlvIHByZXNpb25cdTAwRjMgRXNjLlxuICAgICAgICBpZiAodHJpbWVzdHJlID09PSBudWxsKSB7XG4gICAgICAgIG5ldyBOb3RpY2UoXCJNb2RpZmljYWNpXHUwMEYzbiBkZSBub3RhIGNhbmNlbGFkYSBwb3IgZWwgdXN1YXJpby5cIik7XG4gICAgICAgIHJldHVybjsgLy8gVGVybWluYSBsYSBlamVjdWNpXHUwMEYzbiBkZSBsYSBmdW5jaVx1MDBGM24gYXF1XHUwMEVELlxuICAgICAgICB9XG4gICAgICAgIHRoaXMubm90YS50cmltZXN0cmUgPSB0cmltZXN0cmU7XG4gICAgICAgIHJldHVybiB0cmltZXN0cmU7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0Tm90YSgpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5ub3RhO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFJlbmFtZSgpe1xuICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgbGV0IG5ld05hbWUsIG5hbWUsIGZvbGRlcjsgICAgICBcbiAgICAgICAgbmV3TmFtZSA9IGAke3RoaXMuaW5mb1N1YnNpc3RlbWEuZm9sZGVyfS8ke3RoaXMubm90YS50aXR1bG99LyR7dGhpcy5ub3RhLmZpbGVuYW1lfS5tZGBcbiAgICAgICAgZm9sZGVyID0gYCR7dGhpcy5pbmZvU3Vic2lzdGVtYS5mb2xkZXJ9LyR7dGhpcy5ub3RhLnRpdHVsb30vYFxuICAgICAgICBhd2FpdCBGaWVsZEhhbmRsZXJVdGlscy5jcmVhckNhcnBldGEoZm9sZGVyKTtcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMudHAuZmlsZS5jb25maWcudGFyZ2V0X2ZpbGU7XG5cbiAgICAgICAgY29uc3QgZXhpc3RlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChuZXdOYW1lKTtcbiAgICAgICAgZGVidWdnZXI7XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIGlmIChleGlzdGUgaW5zdGFuY2VvZiBURmlsZSl7XG4gICAgICAgICAgICAgICAgbGV0IG5vbWJyZUZpbGUgPSBuZXdOYW1lPy5zcGxpdChcIi9cIik7XG5cbiAgICAgICAgICAgICAgICBsZXQgYm9ycmFyID0gYXdhaXQgdGhpcy5zdWdnZXN0ZXIoXG4gICAgICAgICAgICAgICAgICAgIFtcIlNvYnJlZXNjcmliaXIgQXJjaGl2byBBY3R1YWxcIiwgXCJEZXRlbmVyIGNyZWFjaVx1MDBGM24gZGVsIGFyY2hpdm8uXCJdLFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICBmYWxzZV0sXG4gICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGBcdTAwQkYke25vbWJyZUZpbGUucG9wKCl9IHlhIGV4aXN0ZS4gUXVlIGRlc2VhcyBoYWNlcj9gXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChib3JyYXIpe1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBhcHAudmF1bHQuZGVsZXRlKGV4aXN0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LnJlbmFtZShmaWxlLCBuZXdOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQXJjaGl2byByZW5vbWJyYWRvIGNvbiBcdTAwRTl4aXRvLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ2FuY2VsYW5kbyBsYSBjcmVhY2lcdTAwRjNuIGRlbCBhcmNoaXZvLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvY2VzbyBjYW5jZWxhZG8gcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgICAgICAgICAgICAgIH0gIFxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKXtcbiAgICAgICAgICAgICAgICBhd2FpdCBhcHAudmF1bHQucmVuYW1lKGZpbGUsIG5ld05hbWUpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQXJjaGl2byByZW5vbWJyYWRvIGNvbiBcdTAwRTl4aXRvLlwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1jYXRjaCAoZXJyb3Ipe1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcilcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0RGVzY3JpcGNpb24oKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgZGVzY3JpcGNpb24gPSBhd2FpdCB0aGlzLnByb21wdChgRGVzY3JpcGNpXHUwMEYzbiBkZWwgJHt0aGlzLmluZm9TdWJzaXN0ZW1hLnR5cGVOYW1lfTpgLCBcIlwiLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIHRoaXMubm90YS5kZXNjcmlwY2lvbiA9IGRlc2NyaXBjaW9uO1xuICAgICAgICByZXR1cm4gZGVzY3JpcGNpb247XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QWxpYXNlcygpe1xuICAgICAgICB0aGlzLm5vdGEuYWxpYXNlcyA9IFtdO1xuICAgICAgICB0aGlzLm5vdGEuYWxpYXNlcy5wdXNoKGAke3RoaXMuaW5mb1N1YnNpc3RlbWEudHlwZX0vJHt0aGlzLm5vdGEudHJpbWVzdHJlfS8ke3RoaXMubm90YS50aXR1bG99YClcbiAgICAgICAgdGhpcy5ub3RhLmFsaWFzZXMucHVzaChgJHt0aGlzLmluZm9TdWJzaXN0ZW1hLnR5cGV9LyR7dGhpcy5ub3RhLmdydXBvfS8ke3RoaXMubm90YS50cmltZXN0cmV9LyR7dGhpcy5ub3RhLnRpdHVsb31gKVxuICAgICAgICByZXR1cm4gdGhpcy5ub3RhLmFsaWFzZXM7XG4gICAgfVxufSIsICJpbXBvcnQgeyBURmlsZSwgVEZvbGRlciwgTm90aWNlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgRmllbGRIYW5kbGVyVXRpbHMgfSBmcm9tICcuLi8uLi9GaWVsZEhhbmRsZXJVdGlscyc7XG5pbXBvcnQgeyBOb3RlRmllbGRIYW5kbGVyQmFzZSB9IGZyb20gJy4uL0ZIIEJhc2UvTm90ZUZpZWxkSGFuZGxlckJhc2UnOyAvLyBBc2VnXHUwMEZBcmF0ZSBkZSBpbXBvcnRhciBOb3RlRmllbGRIYW5kbGVyIHNpIGVzIG5lY2VzYXJpb1xuaW1wb3J0IHsgbm9kb0FyZWFWaWRhRmllbGRIYW5kbGVyIH0gZnJvbSAnLi4vLi4vSW50ZXJmYWNlcy9ub2RvQXJlYVZpZGFGaWVsZEhhbmRsZXInO1xuXG5leHBvcnQgY2xhc3Mgbm9kb0FyZWFWaWRhRmllbGRIYW5kbGVyIGV4dGVuZHMgTm90ZUZpZWxkSGFuZGxlckJhc2UgaW1wbGVtZW50cyBub2RvQXJlYVZpZGFGaWVsZEhhbmRsZXJ7XG4gICAgXG4gICAgY29uc3RydWN0b3IodHA6IGFueSwgZm9sZGVyOiBzdHJpbmcsIHBsdWdpbjogYW55KSB7XG4gICAgICBzdXBlcih0cCwgZm9sZGVyLCBwbHVnaW4pOyAvLyBMbGFtYSBhbCBjb25zdHJ1Y3RvciBkZSBsYSBjbGFzZSBwYWRyZVxuICAgICAgdGhpcy5wYXRoQ2FtcG9zID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuZmlsZV9jYW1wb3NDZW50cmFsICsgXCIubWRcIjtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRJZCgpIHsgXG4gICAgICAgIGxldCBtYXhJZCA9IDA7XG4gICAgICAgIC8vIE9idFx1MDBFOW4gdG9kb3MgbG9zIGFyY2hpdm9zIE1hcmtkb3duXG4gICAgICAgIGNvbnN0IGZpbGVzID0gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcbiAgICAgICAgbGV0IHJlZ2lzdHJvc0V4aXN0ZW50ZXMgPSBmaWxlcy5maWx0ZXIoKGZpbGU6IHsgcGF0aDogc3RyaW5nOyB9KSA9PiBmaWxlLnBhdGguc3RhcnRzV2l0aCh0aGlzLmluZm9TdWJzaXN0ZW1hLmZvbGRlcikpO1xuICAgICAgICAvLyBGaWx0cmEgcG9yIGxvcyBhcmNoaXZvcyBlbiBsYSBjYXJwZXRhIGRlc2VhZGFcbiAgICAgICAgcmVnaXN0cm9zRXhpc3RlbnRlcy5mb3JFYWNoKChmaWxlOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpPy5mcm9udG1hdHRlcjtcbiAgICAgICAgICAgIGlmIChtZXRhZGF0YSAmJiBtZXRhZGF0YS5pZCAmJiAhaXNOYU4obWV0YWRhdGEuaWQpICYmIG1ldGFkYXRhLnR5cGUgJiYgbWV0YWRhdGEudHlwZSA9PT0gdGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBwYXJzZUludChtZXRhZGF0YS5pZCk7XG4gICAgICAgICAgICAgICAgaWYgKGlkID4gbWF4SWQpIG1heElkID0gaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFJlbmFtZSgpe1xuICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMudHAuZmlsZS5jb25maWcudGFyZ2V0X2ZpbGU7XG4gICAgICAgIGNvbnN0IHBhcnRlcyA9IGZpbGUuYmFzZW5hbWUuc3BsaXQoJyAtICcpO1xuICAgICAgICB0aGlzLm5vdGEuZ3J1cG8gPSBwYXJ0ZXNbMF07XG4gICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IHBhcnRlc1sxXTtcblxuICAgICAgICAvLyBPYnRlbmVyIGxhIHJ1dGEgY29tcGxldGEgZGVsIGFyY2hpdm8gYWN0dWFsXG4gICAgICAgIGNvbnN0IGZ1bGxQYXRoID0gZmlsZS5wYXRoO1xuXG4gICAgICAgIC8vIEV4dHJhZXIgbGEgcnV0YSBkZWwgZGlyZWN0b3JpbyBzaW4gZWwgbm9tYnJlIGRlbCBhcmNoaXZvXG4gICAgICAgIGNvbnN0IGRpcmVjdG9yeVBhdGggPSBmdWxsUGF0aC5zdWJzdHJpbmcoMCwgZnVsbFBhdGgubGFzdEluZGV4T2YoJy8nKSArIDEpO1xuXG4gICAgICAgIC8vIENvbmNhdGVuYXIgbGEgcnV0YSBkZWwgZGlyZWN0b3JpbyBjb24gZWwgbm9tYnJlIGRlbCBhcmNoaXZvIHkgbGEgZXh0ZW5zaVx1MDBGM24gLm1kXG4gICAgICAgIGNvbnN0IGZpbGVOYW1lID0gYCR7ZGlyZWN0b3J5UGF0aH0ke3BhcnRlc1sxXX0ubWRgO1xuICAgICAgICBcbiAgICAgICAgZGVidWdnZXI7XG4gICAgICAgIGxldCBuZXdOYW1lLCBmb2xkZXI7ICAgICAgXG4gICAgICAgIFxuICAgICAgICAvLyBuZXdOYW1lID0gYCR7dGhpcy5pbmZvU3Vic2lzdGVtYS5mb2xkZXJ9LyR7dGhpcy5ub3RhLmFyZWFWaWRhfS8ke3RoaXMubm90YS5maWxlbmFtZX0ubWRgXG4gICAgICAgIC8vIGZvbGRlciA9IGAke3RoaXMuaW5mb1N1YnNpc3RlbWEuZm9sZGVyfS8ke3RoaXMubm90YS5hcmVhVmlkYX0vYFxuICAgICAgICAvLyBhd2FpdCBGaWVsZEhhbmRsZXJVdGlscy5jcmVhckNhcnBldGEoZm9sZGVyKTtcblxuICAgICAgICBjb25zdCBleGlzdGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZpbGVOYW1lKTtcbiAgICAgICAgZGVidWdnZXI7XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIGlmIChleGlzdGUgaW5zdGFuY2VvZiBURmlsZSl7XG4gICAgICAgICAgICAgICAgbGV0IG5vbWJyZUZpbGUgPSBuZXdOYW1lPy5zcGxpdChcIi9cIik7XG5cbiAgICAgICAgICAgICAgICBsZXQgYm9ycmFyID0gYXdhaXQgdGhpcy5zdWdnZXN0ZXIoXG4gICAgICAgICAgICAgICAgICAgIFtcIlNvYnJlZXNjcmliaXIgQXJjaGl2byBBY3R1YWxcIiwgXCJEZXRlbmVyIGNyZWFjaVx1MDBGM24gZGVsIGFyY2hpdm8uXCJdLFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICBmYWxzZV0sXG4gICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGBcdTAwQkYke25vbWJyZUZpbGUucG9wKCl9IHlhIGV4aXN0ZS4gUXVlIGRlc2VhcyBoYWNlcj9gXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChib3JyYXIpe1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBhcHAudmF1bHQuZGVsZXRlKGV4aXN0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LnJlbmFtZShmaWxlLCBmaWxlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFyY2hpdm8gcmVub21icmFkbyBjb24gXHUwMEU5eGl0by5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNhbmNlbGFuZG8gbGEgY3JlYWNpXHUwMEYzbiBkZWwgYXJjaGl2by5cIik7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlByb2Nlc28gY2FuY2VsYWRvIHBvciBlbCB1c3VhcmlvLlwiKTtcbiAgICAgICAgICAgICAgICB9ICBcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSl7XG4gICAgICAgICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LnJlbmFtZShmaWxlLCBmaWxlTmFtZSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBcmNoaXZvIHJlbm9tYnJhZG8gY29uIFx1MDBFOXhpdG8uXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfWNhdGNoIChlcnJvcil7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBnZXROb3RhKCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vdGE7XG4gICAgfVxufSIsICIvLyBjYW1wb3MgPSBbXCJpZFwiLFwiZmVjaGFcIixcImFyZWFWaWRhXCIsXCJhXHUwMEYxb1wiLFwidGl0dWxvXCIsXCJkZXNjcmlwY2lvblwiLFwidHJpbWVzdHJlXCIsXCJlc3RhZG9cIixcImFsaWFzZXNcIixcInJlbmFtZVwiXTtcblxuaW1wb3J0IHsgTm90ZUZpZWxkSGFuZGxlciB9IGZyb20gJy4vRkggQmFzZS9Ob3RlRmllbGRIYW5kbGVyJzsgLy8gQXNlZ1x1MDBGQXJhdGUgZGUgaW1wb3J0YXIgTm90ZUZpZWxkSGFuZGxlciBzaSBlcyBuZWNlc2FyaW9cbmltcG9ydCB7IE9iakNvbXBhc3NBbnVhbEZpZWxkSGFuZGxlciB9IGZyb20gJy4uL0ludGVyZmFjZXMvT2JqQ29tcGFzc0FudWFsRmllbGRIYW5kbGVyJztcbmltcG9ydCB7IEZpZWxkSGFuZGxlclV0aWxzIH0gZnJvbSAnLi4vRmllbGRIYW5kbGVyVXRpbHMnO1xuaW1wb3J0IHsgVEZpbGUgfSBmcm9tICdvYnNpZGlhbic7XG5cbmV4cG9ydCBjbGFzcyBPYmpDb21wYXNzQW51YWxGaWVsZEhhbmRsZXIgZXh0ZW5kcyBOb3RlRmllbGRIYW5kbGVyIGltcGxlbWVudHMgT2JqQ29tcGFzc0FudWFsRmllbGRIYW5kbGVye1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKHRwOiBhbnksIGZvbGRlcjogc3RyaW5nLCBwbHVnaW46IGFueSkge1xuICAgICAgc3VwZXIodHAsIGZvbGRlciwgcGx1Z2luKTsgLy8gTGxhbWEgYWwgY29uc3RydWN0b3IgZGUgbGEgY2xhc2UgcGFkcmVcbiAgICB9XG5cbiAgICBhc3luYyBnZXRFc3RhZG8oKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuICdcdUQ4M0RcdURGRTEnO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEFyZWFWaWRhKCl7XG4gICAgICAgIGxldCBhcmVhVmlkYTtcbiAgICAgICAgaWYgKCF0aGlzLm5vdGEuYXN1bnRvRGVmaW5pZG8pIHtcbiAgICAgICAgbGV0IG5vbWJyZUFyY2hpdm8gPSB0aGlzLmluZm9TdWJzaXN0ZW1hLmZpbGVOYW1lO1xuICAgICAgICBjb25zdCByZWdleCA9IC9PYmpldGl2byBwYXJhICguKylcXC5tZCQvO1xuICAgICAgICBjb25zdCByZXN1bHRhZG8gPSBub21icmVBcmNoaXZvLm1hdGNoKHJlZ2V4KTtcbiAgICAgICAgaWYgKHJlc3VsdGFkbyAmJiByZXN1bHRhZG9bMV0pIHtcbiAgICAgICAgICAgIC8vIFJldG9ybmFtb3MgZWwgZ3J1cG8gY2FwdHVyYWRvLCBxdWUgZXMgZWwgdmFsb3IgZGVzZWFkbyBkZSBzdWJzdHJcbiAgICAgICAgICAgIGFyZWFWaWRhID0gcmVzdWx0YWRvWzFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gU2kgbm8gc2UgZW5jdWVudHJhIHVuYSBjb2luY2lkZW5jaWEsIHBvZHJcdTAwRURhbW9zIHJldG9ybmFyIG51bGwgbyBhbGd1bmEgb3RyYSBzZVx1MDBGMWFsIGRlIG5vIGVuY29udHJhZG9cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9ICBcblx0ICAgIC8vIFZlcmlmaWNhciBzaSBlbCB1c3VhcmlvIHByZXNpb25cdTAwRjMgRXNjLlxuICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBhcmVhVmlkYTtcbiAgICAgICAgcmV0dXJuIGFyZWFWaWRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm90YS5hcmVhVmlkYTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgYXN5bmMgZ2V0VGl0dWxvKCl7XG4gICAgICAgIGxldCB0aXR1bG87XG4gICAgICAgIHRpdHVsbyA9IGF3YWl0IHRoaXMucHJvbXB0KGBDdWFsIGVzIHR1IG9iamV0aXZvIGVuICR7dGhpcy5ub3RhLmFcdTAwRjFvfSBwYXJhICR7dGhpcy5ub3RhLmFyZWFWaWRhfT9gLCBgVm95IGEgYCwgdHJ1ZSwgdHJ1ZSkgLy8gNCBwYXJhbWV0cm8gdHJ1ZTogTXVsdGlsaW5lYS5cblx0ICAgIC8vIFZlcmlmaWNhciBzaSBlbCB1c3VhcmlvIHByZXNpb25cdTAwRjMgRXNjLlxuICAgICAgICBpZiAodGl0dWxvID09PSBudWxsKSB7XG4gICAgICAgIG5ldyBOb3RpY2UoXCJDcmVhY2lcdTAwRjNuIGRlIG5vdGEgY2FuY2VsYWRhIHBvciBlbCB1c3VhcmlvLlwiKTtcbiAgICAgICAgcmV0dXJuOyAvLyBUZXJtaW5hIGxhIGVqZWN1Y2lcdTAwRjNuIGRlIGxhIGZ1bmNpXHUwMEYzbiBhcXVcdTAwRUQuXG5cdCAgICB9XG4gICAgICAgIHRoaXMubm90YS50aXR1bG8gPSB0aXR1bG87XG4gICAgICAgIHJldHVybiB0aXR1bG87XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QVx1MDBGMW8oKXtcbiAgICAgICAgIFxuICAgICAgICBsZXQgc3VnZ2VzdGVyID0gdGhpcy50cC5zeXN0ZW0uc3RhdGljX2Z1bmN0aW9ucy5nZXQoXCJzdWdnZXN0ZXJcIik7XG4gICAgICAgIGxldCB0aXBvU2lzdGVtYSA9IHRoaXMuaW5mb1N1YnNpc3RlbWEudHlwZTtcbiAgICAgICAgbGV0IG5vbWJyZVNpc3RlbWEgPSB0aGlzLmluZm9TdWJzaXN0ZW1hLnR5cGVOYW1lO1xuICAgICAgICBsZXQgYVx1MDBGMW87XG4gICAgICAgIC8vbGV0IHRyaW1lc3RyZXMgPSBhd2FpdCB0aGlzLmFjdGl2ZVN0cnVjdHVyZVJlc291cmNlcyhcIlRyaW1lc3RyYWxcIik7IC8vIEZ1bmNpb25hIGVuIGxhIHZlcnNpXHUwMEYzbiAxLjAgZGUgQXJlYXMgZGUgVmlkYS5cbiAgICAgICAgbGV0IGFcdTAwRjFvcyA9IGF3YWl0IEZpZWxkSGFuZGxlclV0aWxzLmZpbmRNYWluRmlsZXNXaXRoU3RhdGUoXCJBWVwiLCBudWxsLCB0aGlzLnBsdWdpbik7XG4gICAgICAgICAgICBsZXQgbm9tYnJlQXJjaGl2byA9IHRoaXMuaW5mb1N1YnNpc3RlbWEuZmlsZU5hbWU7XG4gICAgICAgICAgICBjb25zdCByZWdleCA9IC9cXC8oXFxkezR9KS87XG4gICAgICAgICAgICBjb25zdCByZXN1bHRhZG8gPSBub21icmVBcmNoaXZvLm1hdGNoKHJlZ2V4KTtcbiAgICAgICAgICAgIGlmIChyZXN1bHRhZG8gJiYgcmVzdWx0YWRvWzFdKSB7XG4gICAgICAgICAgICAgICAgLy8gUmV0b3JuYW1vcyBlbCBncnVwbyBjYXB0dXJhZG8sIHF1ZSBlcyBlbCB2YWxvciBkZXNlYWRvIGRlIHN1YnN0clxuICAgICAgICAgICAgICAgIGFcdTAwRjFvID0gcmVzdWx0YWRvWzFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBTaSBubyBzZSBlbmN1ZW50cmEgdW5hIGNvaW5jaWRlbmNpYSwgcG9kclx1MDBFRGFtb3MgcmV0b3JuYXIgbnVsbCBvIGFsZ3VuYSBvdHJhIHNlXHUwMEYxYWwgZGUgbm8gZW5jb250cmFkb1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICBpZiAoYVx1MDBGMW8gPT09IG51bGwpIHtcbiAgICAgICAgbmV3IE5vdGljZShcIkNyZWFjaVx1MDBGM24gY2FuY2VsYWRhIHBvciBlbCB1c3VhcmlvLlwiKTtcbiAgICAgICAgcmV0dXJuOyAvLyBUZXJtaW5hIGxhIGVqZWN1Y2lcdTAwRjNuIGRlIGxhIGZ1bmNpXHUwMEYzbiBhcXVcdTAwRUQuXG5cdCAgICB9XG4gICAgICAgIHRoaXMubm90YS5hXHUwMEYxbyA9IGFcdTAwRjFvO1xuICAgICAgICByZXR1cm4gYVx1MDBGMW87XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0RGVzY3JpcGNpb24oKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgZGVzY3JpcGNpb24gPSBhd2FpdCB0aGlzLnByb21wdChgXHUwMEJGUXVpZXJlcyBhZ3JlZ2FyIGRldGFsbGVzIGRlIHR1IG9iamV0aXZvP2AsIFwiXCIsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgdGhpcy5ub3RhLmRlc2NyaXBjaW9uID0gZGVzY3JpcGNpb247XG4gICAgICAgIHJldHVybiBkZXNjcmlwY2lvbjtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRUcmltZXN0cmUoKXtcbiAgICAgICAgbGV0IHRyaW1lc3RyZTtcbiAgICAgICAgLy9sZXQgdHJpbWVzdHJlcyA9IGF3YWl0IHRoaXMuYWN0aXZlU3RydWN0dXJlUmVzb3VyY2VzKFwiVHJpbWVzdHJhbFwiKTsgLy8gRnVuY2lvbmEgZW4gbGEgdmVyc2lcdTAwRjNuIDEuMCBkZSBBcmVhcyBkZSBWaWRhLlxuICAgICAgICBsZXQgdHJpbWVzdHJlcyA9IGF3YWl0IEZpZWxkSGFuZGxlclV0aWxzLmZpbmRNYWluRmlsZXNXaXRoU3RhdGUoXCJUUVwiLG51bGwsdGhpcy5wbHVnaW4pO1xuICAgICAgICB0cmltZXN0cmUgPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihcbiAgICAgICAgICAgIFtcIlExXCIsIFwiUTJcIiwgXCJRM1wiLCBcIlE0XCJdLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIGAke3RoaXMubm90YS5hXHUwMEYxb30tUTFgLFxuICAgICAgICAgICAgICAgIGAke3RoaXMubm90YS5hXHUwMEYxb30tUTJgLFxuICAgICAgICAgICAgICAgIGAke3RoaXMubm90YS5hXHUwMEYxb30tUTNgLFxuICAgICAgICAgICAgICAgIGAke3RoaXMubm90YS5hXHUwMEYxb30tUTRgLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICBgXHUwMEJGRW4gcXVcdTAwRTkgdHJpbWVzdHJlIGRlbCAke3RoaXMubm90YS5hXHUwMEYxb30gY29uc2lkZXJhcyBxdWUgc2UgcHVlZGUgcmVhbGl6YXIgZXNlIG9iamV0aXZvP2BcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgXG5cdCAgICAvLyBWZXJpZmljYXIgc2kgZWwgdXN1YXJpbyBwcmVzaW9uXHUwMEYzIEVzYy5cbiAgICAgICAgaWYgKHRyaW1lc3RyZSA9PT0gbnVsbCkge1xuICAgICAgICBuZXcgTm90aWNlKFwiTW9kaWZpY2FjaVx1MDBGM24gZGUgbm90YSBjYW5jZWxhZGEgcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgICAgICByZXR1cm47IC8vIFRlcm1pbmEgbGEgZWplY3VjaVx1MDBGM24gZGUgbGEgZnVuY2lcdTAwRjNuIGFxdVx1MDBFRC5cblx0ICAgIH1cbiAgICAgICAgdGhpcy5ub3RhLnRyaW1lc3RyZSA9IHRyaW1lc3RyZTtcbiAgICAgICAgcmV0dXJuIHRyaW1lc3RyZTtcbiAgICB9XG5cbiAgICBcbiAgICBhc3luYyBnZXRBbGlhc2VzKCk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICAgICAgdGhpcy5ub3RhLmFsaWFzZXMgPSBbXTtcbiAgICAgICAgdGhpcy5ub3RhLmFsaWFzZXMucHVzaChgJHt0aGlzLmluZm9TdWJzaXN0ZW1hLnR5cGV9LyR7dGhpcy5ub3RhLmFcdTAwRjFvfS8ke3RoaXMubm90YS5pZH1gKVxuICAgICAgICB0aGlzLm5vdGEuYWxpYXNlcy5wdXNoKGAke3RoaXMuaW5mb1N1YnNpc3RlbWEudHlwZX0vJHt0aGlzLm5vdGEuYVx1MDBGMW99LyR7dGhpcy5ub3RhLmFyZWFWaWRhfS8ke3RoaXMubm90YS5pZH1gKVxuICAgICAgICB0aGlzLm5vdGEuYWxpYXNlcy5wdXNoKGAke3RoaXMuaW5mb1N1YnNpc3RlbWEudHlwZX0vJHt0aGlzLm5vdGEudGl0dWxvfWApXG4gICAgICAgIHJldHVybiB0aGlzLm5vdGEuYWxpYXNlcztcbiAgICB9XG5cbiAgICBhc3luYyBnZXRSZW5hbWUoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICBcbiAgICAgICAgbGV0IGZvbGRlciA9IGAke3RoaXMuaW5mb1N1YnNpc3RlbWEuZm9sZGVyfS8ke3RoaXMubm90YS5hXHUwMEYxb31gXG4gICAgICAgIGNvbnN0IG5ld05hbWUgPSBgJHt0aGlzLmluZm9TdWJzaXN0ZW1hLmZvbGRlcn0vJHt0aGlzLm5vdGEuYVx1MDBGMW99LyR7dGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlfSAtICR7dGhpcy5ub3RhLmlkfS5tZGBcbiAgICAgICAgYXdhaXQgRmllbGRIYW5kbGVyVXRpbHMuY3JlYXJDYXJwZXRhKGZvbGRlcik7XG5cbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMudHAuZmlsZS5jb25maWcudGFyZ2V0X2ZpbGU7XG4gICAgICAgIGNvbnN0IGV4aXN0ZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgobmV3TmFtZSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChleGlzdGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vbWJyZUZpbGUgPSBuZXdOYW1lLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgICAgICAgICBjb25zdCBib3JyYXIgPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihcbiAgICAgICAgICAgICAgICAgICAgW1wiU29icmVlc2NyaWJpciBBcmNoaXZvIEFjdHVhbFwiLCBcIkRldGVuZXIgY3JlYWNpXHUwMEYzbiBkZWwgYXJjaGl2by5cIl0sXG4gICAgICAgICAgICAgICAgICAgIFt0cnVlLCBmYWxzZV0sXG4gICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGBcdTAwQkYke25vbWJyZUZpbGUucG9wKCl9IHlhIGV4aXN0ZS4gUXVcdTAwRTkgZGVzZWFzIGhhY2VyP2BcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChib3JyYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LmRlbGV0ZShleGlzdGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBhcHAudmF1bHQucmVuYW1lKGZpbGUsIG5ld05hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBcmNoaXZvIHJlbm9tYnJhZG8gY29uIFx1MDBFOXhpdG8uXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld05hbWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNhbmNlbGFuZG8gbGEgY3JlYWNpXHUwMEYzbiBkZWwgYXJjaGl2by5cIik7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlByb2Nlc28gY2FuY2VsYWRvIHBvciBlbCB1c3VhcmlvLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LnJlbmFtZShmaWxlLCBuZXdOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBcmNoaXZvIHJlbm9tYnJhZG8gY29uIFx1MDBFOXhpdG8uXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3TmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWwgY2FtYmlhciBlbCBub21icmVcIiwgZXJyb3IpO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gIH0iLCAiLy9jYW1wb3MgPSBbXCJpZFwiLFwiZmVjaGFcIixcImFcdTAwRjFvXCIsXCJlc3RhZG9cIixcImFsaWFzZXNcIixcInJlbmFtZVwiXVxuXG5pbXBvcnQgeyBURmlsZSwgVEZvbGRlciwgTm90aWNlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgRmllbGRIYW5kbGVyVXRpbHMgfSBmcm9tICcuLi9GaWVsZEhhbmRsZXJVdGlscyc7XG5pbXBvcnQgeyBOb3RlRmllbGRIYW5kbGVyQmFzZSB9IGZyb20gJy4vRkggQmFzZS9Ob3RlRmllbGRIYW5kbGVyQmFzZSc7IC8vIEFzZWdcdTAwRkFyYXRlIGRlIGltcG9ydGFyIE5vdGVGaWVsZEhhbmRsZXIgc2kgZXMgbmVjZXNhcmlvXG5pbXBvcnQgeyBDb21wYXNzUGxhbmVhY2lvbkFudWFsX0ZIIH0gZnJvbSAnLi4vSW50ZXJmYWNlcy9Db21wYXNzUGxhbmVhY2lvbkFudWFsX0ZIJztcblxuZXhwb3J0IGNsYXNzIENvbXBhc3NQbGFuZWFjaW9uQW51YWxfRkggZXh0ZW5kcyBOb3RlRmllbGRIYW5kbGVyQmFzZSBpbXBsZW1lbnRzIG5vZG9BcmVhVmlkYUZpZWxkSGFuZGxlcntcbiAgICBcbiAgICBjb25zdHJ1Y3Rvcih0cDogYW55LCBmb2xkZXI6IHN0cmluZywgcGx1Z2luOiBhbnkpIHtcbiAgICAgIHN1cGVyKHRwLCBmb2xkZXIsIHBsdWdpbik7IC8vIExsYW1hIGFsIGNvbnN0cnVjdG9yIGRlIGxhIGNsYXNlIHBhZHJlXG4gICAgfVxuICAgIGFzeW5jIGdldEFcdTAwRjFvKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGxldCBub21icmVTaXN0ZW1hID0gdGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlTmFtZTtcbiAgICAgICAgbGV0IGFcdTAwRjFvO1xuICAgICAgICAvL2xldCB0cmltZXN0cmVzID0gYXdhaXQgdGhpcy5hY3RpdmVTdHJ1Y3R1cmVSZXNvdXJjZXMoXCJUcmltZXN0cmFsXCIpOyAvLyBGdW5jaW9uYSBlbiBsYSB2ZXJzaVx1MDBGM24gMS4wIGRlIEFyZWFzIGRlIFZpZGEuXG4gICAgICAgIGxldCBhXHUwMEYxb3MgPSBhd2FpdCBGaWVsZEhhbmRsZXJVdGlscy5maW5kTWFpbkZpbGVzV2l0aFN0YXRlKFwiQVlcIixudWxsLHRoaXMucGx1Z2luKTtcbiAgICAgICAgYVx1MDBGMW8gPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihhXHUwMEYxb3MubWFwKGIgPT4gYi5maWxlLmJhc2VuYW1lKSxhXHUwMEYxb3MubWFwKGIgPT4gYi5maWxlLmJhc2VuYW1lKSwgZmFsc2UsIGBTZWxlY2Npb25hIGVsIGFcdTAwRjFvIHF1ZSBkZXNlYXMgcGFyYSBlbCAke25vbWJyZVNpc3RlbWF9OmApO1xuXHQgICAgLy8gVmVyaWZpY2FyIHNpIGVsIHVzdWFyaW8gcHJlc2lvblx1MDBGMyBFc2MuXG4gICAgICAgIGlmIChhXHUwMEYxbyA9PT0gbnVsbCkge1xuICAgICAgICBuZXcgTm90aWNlKFwiQ3JlYWNpXHUwMEYzbiBjYW5jZWxhZGEgcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgICAgICByZXR1cm47IC8vIFRlcm1pbmEgbGEgZWplY3VjaVx1MDBGM24gZGUgbGEgZnVuY2lcdTAwRjNuIGFxdVx1MDBFRC5cblx0ICAgIH1cbiAgICAgICAgdGhpcy5ub3RhLmFcdTAwRjFvID0gYVx1MDBGMW87XG4gICAgICAgIHJldHVybiBhXHUwMEYxbztcbiAgICB9XG5cbiAgICBhc3luYyBnZXROb3RhKCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vdGE7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QWxpYXNlcygpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgICAgIHRoaXMubm90YS5hbGlhc2VzID0gW107XG4gICAgICAgIHRoaXMubm90YS5hbGlhc2VzLnB1c2goYCR7dGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlTmFtZX0vJHt0aGlzLm5vdGEuYVx1MDBGMW99YCkgICBcbiAgICAgICAgdGhpcy5ub3RhLmFsaWFzZXMucHVzaChgJHt0aGlzLmluZm9TdWJzaXN0ZW1hLnR5cGVOYW1lfS8ke3RoaXMubm90YS5pZH1gKSAgIFxuICAgICAgICByZXR1cm4gdGhpcy5ub3RhLmFsaWFzZXM7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0UmVuYW1lKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGxldCBmb2xkZXIgPSBgJHt0aGlzLmluZm9TdWJzaXN0ZW1hLmZvbGRlcn0vJHt0aGlzLm5vdGEuYVx1MDBGMW99YFxuICAgICAgICBjb25zdCBuZXdOYW1lID0gYCR7dGhpcy5pbmZvU3Vic2lzdGVtYS5mb2xkZXJ9LyR7dGhpcy5ub3RhLmFcdTAwRjFvfS9QbGFuZWFjaVx1MDBGM24gJHt0aGlzLm5vdGEuYVx1MDBGMW99Lm1kYFxuICAgICAgICBhd2FpdCBGaWVsZEhhbmRsZXJVdGlscy5jcmVhckNhcnBldGEoZm9sZGVyKTtcblxuICAgICAgICBjb25zdCBmaWxlID0gdGhpcy50cC5maWxlLmNvbmZpZy50YXJnZXRfZmlsZTtcbiAgICAgICAgY29uc3QgZXhpc3RlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChuZXdOYW1lKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGV4aXN0ZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9tYnJlRmlsZSA9IG5ld05hbWUuc3BsaXQoXCIvXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJvcnJhciA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKFxuICAgICAgICAgICAgICAgICAgICBbXCJTb2JyZWVzY3JpYmlyIEFyY2hpdm8gQWN0dWFsXCIsIFwiRGV0ZW5lciBjcmVhY2lcdTAwRjNuIGRlbCBhcmNoaXZvLlwiXSxcbiAgICAgICAgICAgICAgICAgICAgW3RydWUsIGZhbHNlXSxcbiAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgYFx1MDBCRiR7bm9tYnJlRmlsZS5wb3AoKX0geWEgZXhpc3RlLiBRdVx1MDBFOSBkZXNlYXMgaGFjZXI/YFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKGJvcnJhcikge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBhcHAudmF1bHQuZGVsZXRlKGV4aXN0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGFwcC52YXVsdC5yZW5hbWUoZmlsZSwgbmV3TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFyY2hpdm8gcmVub21icmFkbyBjb24gXHUwMEU5eGl0by5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3TmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ2FuY2VsYW5kbyBsYSBjcmVhY2lcdTAwRjNuIGRlbCBhcmNoaXZvLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvY2VzbyBjYW5jZWxhZG8gcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBhcHAudmF1bHQucmVuYW1lKGZpbGUsIG5ld05hbWUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFyY2hpdm8gcmVub21icmFkbyBjb24gXHUwMEU5eGl0by5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdOYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhbCBjYW1iaWFyIGVsIG5vbWJyZVwiLCBlcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbn0iLCAiaW1wb3J0IHsgVEZpbGUsIFRGb2xkZXIsIE5vdGljZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IEZpZWxkSGFuZGxlclV0aWxzIH0gZnJvbSAnLi4vLi4vRmllbGRIYW5kbGVyVXRpbHMnO1xuaW1wb3J0IHsgTm90ZUZpZWxkSGFuZGxlciB9IGZyb20gJy4uL0ZIIEJhc2UvTm90ZUZpZWxkSGFuZGxlcic7IC8vIEFzZWdcdTAwRkFyYXRlIGRlIGltcG9ydGFyIE5vdGVGaWVsZEhhbmRsZXIgc2kgZXMgbmVjZXNhcmlvXG5cbmV4cG9ydCBjbGFzcyBSZXBvc2l0b3Jpb0xpYnJvc19GSCBleHRlbmRzIE5vdGVGaWVsZEhhbmRsZXIge1xuICAgIGNvbnN0cnVjdG9yKHRwOiBhbnksIGZvbGRlcjogc3RyaW5nLCBwbHVnaW46IGFueSkge1xuICAgICAgc3VwZXIodHAsIGZvbGRlciwgcGx1Z2luKTsgLy8gTGxhbWEgYWwgY29uc3RydWN0b3IgZGUgbGEgY2xhc2UgcGFkcmVcbiAgICB9XG5cbiAgICBhc3luYyBnZXREZXNjcmlwY2lvbigpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCBkZXNjcmlwY2lvbiA9IGF3YWl0IHRoaXMucHJvbXB0KGBcdTAwQkZQb3JxdWUgZXN0XHUwMEUxcyBhZ3JlZ2FuZG8gZXN0ZSBsaWJybz86YCwgXCJcIiwgZmFsc2UsIHRydWUpO1xuICAgICAgICB0aGlzLm5vdGEuZGVzY3JpcGNpb24gPSBkZXNjcmlwY2lvbjtcbiAgICAgICAgcmV0dXJuIGRlc2NyaXBjaW9uO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEVzdGFkbygpe1xuICAgICAgICBsZXQgZXN0YWRvO1xuICAgICAgICAgICAgICAgIGVzdGFkbyA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKFtcIlx1RDgzRFx1REQzNSAtPiBQYXJhIEFyY2hpdm8gLSBMZWlkb1wiLCBcIlx1RDgzRFx1REZFMiAtPiBFbiBMZWN0dXJhIC0gQ29tcHJhZG9cIixcIlx1RDgzRFx1REZFMSAtPiBQb3IgQWRxdWlyaXJcIiwgXCJcdUQ4M0RcdUREMzQgLT4gQ2FuY2VsYWRvXCJdLFtcIlx1RDgzRFx1REQzNVwiLCBcIlx1RDgzRFx1REZFMlwiLFwiXHVEODNEXHVERkUxXCIsIFwiXHVEODNEXHVERDM0XCJdLCBmYWxzZSwgYEVuIHF1ZSBlc3RhZG8gZXN0XHUwMEUxIGVzdGUgbGlicm8/YCk7XG4gICAgICAgICAvLyBWZXJpZmljYXIgc2kgZWwgdXN1YXJpbyBwcmVzaW9uXHUwMEYzIEVzYy5cbiAgICAgICAgaWYgKGVzdGFkbyA9PT0gbnVsbCkge1xuICAgICAgICBuZXcgTm90aWNlKFwiQ3JlYWNpXHUwMEYzbiBkZSBMaWJybyBjYW5jZWxhZGEgcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgICAgICByZXR1cm47IC8vIFRlcm1pbmEgbGEgZWplY3VjaVx1MDBGM24gZGUgbGEgZnVuY2lcdTAwRjNuIGFxdVx1MDBFRC5cblx0ICAgIH1cbiAgICAgICAgLy90aGlzLm5vdGEuZXN0YWRvID0gY2FtcG87XG4gICAgICAgIHJldHVybiBlc3RhZG87XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0VGl0dWxvKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IHRpdHVsbyA9IHRoaXMuaW5mb1N1YnNpc3RlbWEudGl0dWxvO1xuICAgICAgICB0aGlzLm5vdGEudGl0dWxvID0gdGl0dWxvO1xuICAgICAgICByZXR1cm4gdGl0dWxvO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEFzdW50bygpOiBQcm9taXNlPHsgc2lBc3VudG86IGJvb2xlYW4sIG5vbWJyZTogc3RyaW5nW10gfT4geyAvLyBGdW5jaW9uYSBjb24gZnJvbnRtYXR0ZXJcbiAgICAgICAgbGV0IHBhZHJlcyA9IFtdO1xuICAgICAgICBsZXQgYWN0aXZvID0gdGhpcy5pbmZvU3Vic2lzdGVtYS5hY3Rpdm87XG4gICAgICAgIGxldCBzaUFzdW50byA9IGZhbHNlO1xuICAgICAgICBsZXQgbm9tYnJlID0gXCJcIjtcbiAgICAgICAgbGV0IG5vdGE7XG4gICAgICAgIGlmIChhY3Rpdm8gIT0gbnVsbCkge1xuICAgICAgICAgICAgbm9tYnJlID0gYWN0aXZvLmJhc2VuYW1lO1xuICAgICAgICAgICAgbm90YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShhY3Rpdm8pO1xuICAgICAgICAgICAgLy8gQXNlZ3VyYXIgcXVlIG5vdGEuZnJvbnRtYXR0ZXIgZXhpc3RlIHkgYXNpZ25hciB1biBvYmpldG8gdmFjXHUwMEVEbyBhIGZpbGVcbiAgICAgICAgICAgIG5vdGEuZnJvbnRtYXR0ZXIgPSBub3RhLmZyb250bWF0dGVyIHx8IHt9O1xuICAgICAgICAgICAgbm90YS5mcm9udG1hdHRlci5maWxlID0ge307XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKG5vdGEuZnJvbnRtYXR0ZXIuZmlsZSwgYWN0aXZvKTtcbiAgICAgICAgICAgIC8vMS4gc2lBc3VudG8gPSBhd2FpdCBzdWdnZXN0ZXIoW1wiU2lcIiwgXCJOb1wiXSwgW3RydWUsIGZhbHNlXSwgdHJ1ZSwgbm9tYnJlICsgXCIgZXMgb3JpZ2VuIGRlIFwiICsgdGhpcy5ub3RhLnRpdHVsbyArIFwiP1wiKTtcbiAgICAgICAgICAgIHBhZHJlcy51bnNoaWZ0KG5vbWJyZSk7IC8vIEFcdTAwRjFhZGUgZWwgbm9tYnJlIGFsIGluaWNpbyBkZWwgYXJyZWdsbywgZGVzcGxhemFuZG8gbG9zIGRlbVx1MDBFMXMgZWxlbWVudG9zXG4gICAgICAgICAgICAgICAgc2lBc3VudG8gPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihbXCJTaVwiLCBcIk5vXCJdLCBbdHJ1ZSwgZmFsc2VdLCB0cnVlLCBub21icmUgKyBcIiBlcyBvcmlnZW4gZGUgXCIgKyB0aGlzLm5vdGEudGl0dWxvICsgXCI/XCIpO1xuICAgICAgICAgICAgICAgIGlmIChzaUFzdW50bykge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFzdW50b0RlZmluaWRvID0gdHJ1ZTsgLy8gUGFyYSBxdWUgbm8gZWplY3V0ZSBsYSBidXNxdWVkYSBkZSBBcmVhIFZpZGEsIEFyZWEgZGUgSW50ZXJcdTAwRTlzLCBwcm95ZWN0byBRIG8gR1REXG4gICAgICAgICAgICAgICAgICAgIGxldCBuaXZlbDtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChub3RhPy5mcm9udG1hdHRlcj8udHlwZSkgeyAvLyBMYSBub3RhIGFjdGl2cyBlcyB1bmE6IFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJQR1REXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiUFFcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWRVJJRklDQUNJT04gREUgUFJPWUVDVE9TIERFIFEgWSBQUk9ZRUNUTyBHVERcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YS5mcm9udG1hdHRlcj8udHlwZSA9PT0gXCJQUVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENVQU5ETyBMQSBOT1RBIEFDVElWQSBFUyBVTiBQUS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvUSA9IG5vbWJyZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIFBST1lFQ1RPU0dURFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbmljaWFsaXphbW9zIHRoaXMubm90YS5wcm95ZWN0b0dURCBjb24gdW4gdmFsb3IgcHJlZGV0ZXJtaW5hZG8gZGUgY2FkZW5hIHZhY1x1MDBFRGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvR1REID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmVyaWZpY2Ftb3Mgc2kgbm90YS5wcm95ZWN0b0dURCBleGlzdGUgeSBlcyB1biBhcnJlZ2xvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBlcyB1biBhcnJlZ2xvLCBpdGVyYW1vcyBzb2JyZSBjYWRhIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1RELm1hcChlbGVtZW50byA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSBwZXJvIG5vIGVzIHVuIGFycmVnbG8sIGFwbGljYW1vcyBlbCByZWdleCBkaXJlY3RhbWVudGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b0dURCA9IG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBub3RhLnByb3llY3RvR1REIG5vIGV4aXN0ZSwgdGhpcy5ub3RhLnByb3llY3RvR1REIHlhIGVzdFx1MDBFMSBlc3RhYmxlY2lkbyBlbiBcIlwiIHBvciBkZWZlY3RvXG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPYnRlbmVyIFByb3llY3RvUSB5IFByb3llY3RvIEdURCBjdWFuZG8gbGEgbm90YSBlcyBQcm95ZWN0b0dURC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vdGEuZnJvbnRtYXR0ZXI/LnR5cGUgPT09IFwiUEdURFwiKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ1VBTkRPIExBIE5PVEEgQUNUSVZBIEVTIFVOIEdURC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIFBST1lFQ1RPU0dURFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBbbm9tYnJlXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1REKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXMgdW4gYXJyZWdsbywgdXRpbGl6YW1vcyBjb25jYXQgcGFyYSBhXHUwMEYxYWRpciBsb3MgZWxlbWVudG9zIHlhIHByb2Nlc2Fkb3MgY29uIGVsIHJlZ2V4IGFsIGFycmVnbG8gdGhpcy5ub3RhLnByb3llY3RvR1REXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSB0aGlzLm5vdGEucHJveWVjdG9HVEQuY29uY2F0KG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQubWFwKGVsZW1lbnRvID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSBwZXJvIG5vIGVzIHVuIGFycmVnbG8sIGFwbGljYW1vcyBlbCByZWdleCBkaXJlY3RhbWVudGUgeSB1c2Ftb3MgcHVzaCBwYXJhIGFncmVnYXJsbyBhIHRoaXMubm90YS5wcm95ZWN0b0dURFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvR1RELnB1c2gobm90YS5mcm9udG1hdHRlci5wcm95ZWN0b0dURC5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5vdGEucHJveWVjdG9HVEQgbm8gZXhpc3RlLCB0aGlzLm5vdGEucHJveWVjdG9HVEQgeWEgZXN0XHUwMEUxIGVzdGFibGVjaWRvIGVuIFwiXCIgcG9yIGRlZmVjdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvUSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9RKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXMgdW4gYXJyZWdsbywgaXRlcmFtb3Mgc29icmUgY2FkYSBlbGVtZW50b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvUSA9IG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9RLm1hcChlbGVtZW50byA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9RKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBleGlzdGUgcGVybyBubyBlcyB1biBhcnJlZ2xvLCBhcGxpY2Ftb3MgZWwgcmVnZXggZGlyZWN0YW1lbnRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9RID0gbm90YS5mcm9udG1hdHRlci5wcm95ZWN0b1EucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT2J0ZW5lciBQcm95ZWN0b1EgeSBQcm95ZWN0byBHVEQgY3VhbmRvIGxhIG5vdGEgZXMgb3RyYSBjb3NhIHF1ZSBubyBlcyBwcm95ZWN0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b1EgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhPy5mcm9udG1hdHRlcj8ucHJveWVjdG9RKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXMgdW4gYXJyZWdsbywgaXRlcmFtb3Mgc29icmUgY2FkYSBlbGVtZW50b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvUSA9IG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9RLm1hcChlbGVtZW50byA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vdGE/LmZyb250bWF0dGVyPy5wcm95ZWN0b1EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSBwZXJvIG5vIGVzIHVuIGFycmVnbG8sIGFwbGljYW1vcyBlbCByZWdleCBkaXJlY3RhbWVudGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b1EgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvUS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvR1REID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmVyaWZpY2Ftb3Mgc2kgbm90YS5wcm95ZWN0b0dURCBleGlzdGUgeSBlcyB1biBhcnJlZ2xvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGE/LmZyb250bWF0dGVyPy5wcm95ZWN0b0dURCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIGl0ZXJhbW9zIHNvYnJlIGNhZGEgZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b0dURCA9IG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQubWFwKGVsZW1lbnRvID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LnByb3llY3RvR1REKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBleGlzdGUgcGVybyBubyBlcyB1biBhcnJlZ2xvLCBhcGxpY2Ftb3MgZWwgcmVnZXggZGlyZWN0YW1lbnRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1RELnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWZXJpZmljYW1vcyBhcmVhSW50ZXJlcyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhPy5mcm9udG1hdHRlcj8uYXJlYUludGVyZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIGl0ZXJhbW9zIHNvYnJlIGNhZGEgZWxlbWVudG8gKGV4Y2x1eWVuZG8gZWwgcHJpbWVyIGVsZW1lbnRvIHlhIGFncmVnYWRvIHF1ZSBlcyBub3RhLnRpdHVsbylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8geSBhcGxpY2Ftb3MgZWwgcmVnZXggYSBjYWRhIGVsZW1lbnRvLiBMdWVnbyBjb25jYXRlbmFtb3MgY29uIGVsIGFycmF5IGV4aXN0ZW50ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gdGhpcy5ub3RhLmFyZWFJbnRlcmVzLmNvbmNhdChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLm1hcChlbGVtZW50byA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5vIGVzIHVuIGFycmVnbG8sIHJldmlzYW1vcyBzaSBub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzIGV4aXN0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LmFyZWFJbnRlcmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBleGlzdGUsIGFwbGljYW1vcyBlbCByZWdleCB5IGxvIGFcdTAwRjFhZGltb3MgY29tbyBzZWd1bmRvIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMucHVzaChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhbW9zIEFyZWFWaWRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LmFyZWFWaWRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFcyB1biBhcnJlZ2xvLCB1c2EgZWwgcHJpbWVyIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhWzBdLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFcyB1biBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIGVzdFx1MDBFMSBkZWZpbmlkbyBvIGVzdFx1MDBFMSB2YWNcdTAwRURvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IFwiTm8gZXMgZGUgbmluZ1x1MDBGQW4gQXJlYSBkZSBWaWRhXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gREVGSU5JUiBOSVZFTFBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb21wcnVlYmEgc2kgbml2ZWxBSSBleGlzdGUgeSBubyBlcyBOYU4gZGVzcHVcdTAwRTlzIGRlIGludGVudGFyIGNvbnZlcnRpcmxvIGEgZW50ZXJvXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHBhcnNlSW50KG5vdGE/LmZyb250bWF0dGVyPy5uaXZlbFApKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaXZlbCA9IHBhcnNlSW50KG5vdGEuZnJvbnRtYXR0ZXIubml2ZWxQKSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgbml2ZWxBSSBubyBleGlzdGUgbyBzdSBjb252ZXJzaVx1MDBGM24gYSBlbnRlcm8gcmVzdWx0YSBlbiBOYU4sIGVzdGFibGVjZSBuaXZlbCBhIDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbml2ZWwgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEubml2ZWxQID0gbml2ZWw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsgLy8gUEdURCB5IFBRXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiQUlcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWRVJJRklDQUNJT04gREUgQVJFQSBERSBJTlRFUkVTXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGE/LmZyb250bWF0dGVyPy50eXBlID09PSBcIkFJXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gW25vdGEuZnJvbnRtYXR0ZXIuZmlsZS5iYXNlbmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluaWNpYWxpemFtb3MgdGhpcy5ub3RhLmFyZWFJbnRlcmVzIGNvbiBub3RhLnRpdHVsbyBjb21vIGVsIHByaW1lciBlbGVtZW50by5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXN0ZSBzb2xvIGFwbGljYSBwYXJhIGN1YW5kbyBlc3RveSBjb25zdHJ1eWVuZG8gZGVzZGUgQXJlYSBkZSBJbnRlcmVzIG90cmEgQXJlYSBkZSBJbnRlcmVzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWZXJpZmljYW1vcyBzaSBub3RhLmFyZWFJbnRlcmVzIGVzIHVuIGFycmVnbG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhLmZyb250bWF0dGVyPy5hcmVhSW50ZXJlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXMgdW4gYXJyZWdsbywgaXRlcmFtb3Mgc29icmUgY2FkYSBlbGVtZW50byAoZXhjbHV5ZW5kbyBlbCBwcmltZXIgZWxlbWVudG8geWEgYWdyZWdhZG8gcXVlIGVzIG5vdGEudGl0dWxvKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB5IGFwbGljYW1vcyBlbCByZWdleCBhIGNhZGEgZWxlbWVudG8uIEx1ZWdvIGNvbmNhdGVuYW1vcyBjb24gZWwgYXJyYXkgZXhpc3RlbnRlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMgPSB0aGlzLm5vdGEuYXJlYUludGVyZXMuY29uY2F0KG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMubWFwKGVsZW1lbnRvID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50by5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgbm8gZXMgdW4gYXJyZWdsbywgcmV2aXNhbW9zIHNpIG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMgZXhpc3RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlci5hcmVhSW50ZXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXhpc3RlLCBhcGxpY2Ftb3MgZWwgcmVnZXggeSBsbyBhXHUwMEYxYWRpbW9zIGNvbW8gc2VndW5kbyBlbGVtZW50b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzLnB1c2gobm90YS5mcm9udG1hdHRlci5hcmVhSW50ZXJlcy5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5vIGVzIGFycmVnbG8gbmkgc3RyaW5nLCBhcmVhSW50ZXJlcyBlcyBlbCBhcmVhIGludGVyZXMgcXVlIGVzdFx1MDBFMSBlbiB0aXR1bG8uICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgbm90YS5mcm9udG1hdHRlci5hcmVhSW50ZXJlcyBubyBleGlzdGUsIHRoaXMubm90YS5hcmVhSW50ZXJlcyB5YSB0ZW5kclx1MDBFMSBub3RhLnRpdHVsbyBjb21vIHN1IFx1MDBGQW5pY28gZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiQVZcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWRVJJRklDQUNJT04gREUgQVJFQSBERSBWSURBXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGE/LmZyb250bWF0dGVyPy5hcmVhVmlkYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXMgdW4gYXJyZWdsbywgdXNhIGVsIHByaW1lciBlbGVtZW50b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gbm90YS5mcm9udG1hdHRlci5hcmVhVmlkYVswXS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXMgdW4gc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBObyBlc3RcdTAwRTEgZGVmaW5pZG8gbyBlc3RcdTAwRTEgdmFjXHUwMEVEb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBcIk5vIGVzIGRlIG5pbmdcdTAwRkFuIEFyZWEgZGUgVmlkYVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwb25pZW5kbyBzaSBBc3VudG8gZW4gZmFsc2UgcGFyYSBsYXMgbm90YXMgZXN0cnVjdHVyYSBBSSB5IEFWLiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LnR5cGUgPT09IFwiQUlcIiB8fCBub3RhPy5mcm9udG1hdHRlcj8udHlwZSA9PT0gXCJBVlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpQXN1bnRvID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gREVGSU5JUiBOSVZFTFBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb21wcnVlYmEgc2kgbml2ZWxBSSBleGlzdGUgeSBubyBlcyBOYU4gZGVzcHVcdTAwRTlzIGRlIGludGVudGFyIGNvbnZlcnRpcmxvIGEgZW50ZXJvXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHBhcnNlSW50KG5vdGEuZnJvbnRtYXR0ZXI/Lm5pdmVsUCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pdmVsID0gcGFyc2VJbnQobm90YS5mcm9udG1hdHRlci5uaXZlbFApICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBuaXZlbEFJIG5vIGV4aXN0ZSBvIHN1IGNvbnZlcnNpXHUwMEYzbiBhIGVudGVybyByZXN1bHRhIGVuIE5hTiwgZXN0YWJsZWNlIG5pdmVsIGEgMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaXZlbCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5uaXZlbFAgPSBuaXZlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIGFjdGl2YSBubyBlcyBvcmlnZW4gZGUgQ3JlYW5kbyBSUiAtIFBHVEQgLSBQUSAgaWYoc2lBc3VudG8pXG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7IC8vIGFjdGl2byA9PSBudWxsXG4gICAgICAgICAgICBzaUFzdW50byA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHNpQXN1bnRvLCBub21icmU6IHBhZHJlcyB9XG4gICAgfVxuXG5cblxuICAgIFxuXG59IiwgImltcG9ydCB7IFRGaWxlLCBURm9sZGVyLCBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBGaWVsZEhhbmRsZXJVdGlscyB9IGZyb20gJy4uLy4uL0ZpZWxkSGFuZGxlclV0aWxzJztcbmltcG9ydCB7IE5vdGVGaWVsZEhhbmRsZXIgfSBmcm9tICcuLi9GSCBCYXNlL05vdGVGaWVsZEhhbmRsZXInOyAvLyBBc2VnXHUwMEZBcmF0ZSBkZSBpbXBvcnRhciBOb3RlRmllbGRIYW5kbGVyIHNpIGVzIG5lY2VzYXJpb1xuaW1wb3J0IHsgQmlibGlvdGVjYV9GSCB9IGZyb20gJy4uLy4uL0ludGVyZmFjZXMvQmlibGlvdGVjYV9GSCc7XG5cbmV4cG9ydCBjbGFzcyBCaWJsaW90ZWNhX0ZIIGV4dGVuZHMgTm90ZUZpZWxkSGFuZGxlciBpbXBsZW1lbnRzIEJpYmxpb3RlY2FfRkh7XG4gICAgY29uc3RydWN0b3IodHA6IGFueSwgZm9sZGVyOiBzdHJpbmcsIHBsdWdpbjogYW55KSB7XG4gICAgICBzdXBlcih0cCwgZm9sZGVyLCBwbHVnaW4pOyAvLyBMbGFtYSBhbCBjb25zdHJ1Y3RvciBkZSBsYSBjbGFzZSBwYWRyZVxuICAgIH1cblxuICAgIGFzeW5jIGdldFBhcmFtZXRyb3NMaWJybygpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBsZXQgYXJjaGl2b0FjdGl2byA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgIFxuICAgICAgICBpZiAoIWFyY2hpdm9BY3Rpdm8pIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTm8gc2UgcHVkbyBvYnRlbmVyIGVsIGFyY2hpdm8gYWN0aXZvLlwiKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgY29uc3QgY2FtcG9zID0gW1wiaWRcIiwgXCJ0aXR1bG9cIiwgXCJhdXRvclwiLCBcInB1Ymxpc2hlclwiLCBcInB1YmxpY2Fkb1wiLCBcInBhZ2luYXNcIiwgXCJpc2JuMTBcIiwgXCJpc2JuMTNcIl07XG4gICAgICAgIGxldCBwYXJhbWV0cm9zID0ge307XG4gICAgXG4gICAgICAgIGZvciAobGV0IGNhbXBvIG9mIGNhbXBvcykge1xuICAgICAgICAgIGxldCB2YWxvckNhbXBvID0gYXdhaXQgdGhpcy5nZXRGcm9udG1hdHRlckZpZWxkKGFyY2hpdm9BY3Rpdm8ucGF0aCwgY2FtcG8pO1xuICAgICAgICAgIHRoaXMubm90YVtjYW1wb10gPSB2YWxvckNhbXBvO1xuICAgICAgICAgIHBhcmFtZXRyb3NbY2FtcG9dID0gdmFsb3JDYW1wbztcbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4gcGFyYW1ldHJvcztcbiAgICAgIH1cbiAgICBcbiAgICAgIGFzeW5jIGdldEZyb250bWF0dGVyRmllbGQoZmlsZTogc3RyaW5nLCBmaWVsZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCB0RmlsZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZmlsZSk7XG4gICAgICAgICAgaWYgKHRGaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKHRGaWxlKTtcbiAgICAgICAgICAgIGNvbnN0IGZyb250bWF0dGVyID0gY2FjaGU/LmZyb250bWF0dGVyO1xuICAgIFxuICAgICAgICAgICAgaWYgKGZyb250bWF0dGVyICYmIGZyb250bWF0dGVyLmhhc093blByb3BlcnR5KGZpZWxkKSkge1xuICAgICAgICAgICAgICBjb25zdCBmaWVsZFZhbHVlID0gZnJvbnRtYXR0ZXJbZmllbGRdO1xuICAgICAgICAgICAgICByZXR1cm4gZmllbGRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIGZpZWxkVmFsdWUgIT09IG51bGwgJiYgZmllbGRWYWx1ZSAhPT0gXCJcIiA/IGZpZWxkVmFsdWUgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coYEVsIGNhbXBvICcke2ZpZWxkfScgbm8gZXhpc3RlIGVuIGVsIGZyb250bWF0dGVyLmApO1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVsIGFyY2hpdm8gbm8gZXhpc3RlIG8gbm8gZXMgdW4gYXJjaGl2byBkZSB0ZXh0by5cIik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhbCBjb25zdWx0YXIgZWwgZnJvbnRtYXR0ZXJcIiwgZXJyKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBhc3luYyBnZXRGb3JtYXRvKCl7XG4gICAgICAgIGxldCBjYW1wbztcbiAgICAgICAgICAgICAgICBjYW1wbyA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKFtcIktpbmRsZVwiLCBcIkdvb2dsZSBCb29rc1wiLFwiUERGXCIsIFwiRlx1MDBFRHNpY29cIl0sW1wiS2luZGxlXCIsIFwiR29vZ2xlIEJvb2tzXCIsXCJQREZcIiwgXCJGXHUwMEVEc2ljb1wiXSwgZmFsc2UsIGBcdTAwQkZDb21vIHRpZW5lcyBlc3RlIGxpYnJvP2ApO1xuICAgICAgICAgLy8gVmVyaWZpY2FyIHNpIGVsIHVzdWFyaW8gcHJlc2lvblx1MDBGMyBFc2MuXG4gICAgICAgIGlmIChjYW1wbyA9PT0gbnVsbCkge1xuICAgICAgICBuZXcgTm90aWNlKFwiQ3JlYWNpXHUwMEYzbiBkZSBMaWJybyBjYW5jZWxhZGEgcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgICAgICByZXR1cm47IC8vIFRlcm1pbmEgbGEgZWplY3VjaVx1MDBGM24gZGUgbGEgZnVuY2lcdTAwRjNuIGFxdVx1MDBFRC5cblx0ICAgIH1cbiAgICAgICAgLy90aGlzLm5vdGEuZXN0YWRvID0gY2FtcG87XG4gICAgICAgIHJldHVybiBjYW1wbztcbiAgICB9XG5cbiAgICBhc3luYyBnZXRQYWdpbmFzKCl7XG4gICAgICAgIGxldCBjYW1wbywgcGFnaW5hcztcbiAgICAgICAgICAgICAgICBjYW1wbyA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKFtcIlNpXCIsXCJOb1wiXSxbdHJ1ZSwgZmFsc2VdLCBmYWxzZSwgYFx1MDBCRkVsIGxpYnJvIHRpZW5lICR7dGhpcy5ub3RhLnBhZ2luYXN9IHBcdTAwRTFnaW5hcz9gKTtcbiAgICAgICAgIC8vIFZlcmlmaWNhciBzaSBlbCB1c3VhcmlvIHByZXNpb25cdTAwRjMgRXNjLlxuICAgICAgICBpZiAoY2FtcG8gPT09IG51bGwpIHtcbiAgICAgICAgbmV3IE5vdGljZShcIkNyZWFjaVx1MDBGM24gZGUgTGlicm8gY2FuY2VsYWRhIHBvciBlbCB1c3VhcmlvLlwiKTtcbiAgICAgICAgcmV0dXJuOyAvLyBUZXJtaW5hIGxhIGVqZWN1Y2lcdTAwRjNuIGRlIGxhIGZ1bmNpXHUwMEYzbiBhcXVcdTAwRUQuXG5cdCAgICB9ZWxzZSBpZiAoY2FtcG8gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBwYWdpbmFzID0gYXdhaXQgdGhpcy5wcm9tcHQoYEN1YW50YXMgcFx1MDBFMWdpbmFzIHRpZW5lIGVsIGxpYnJvP2AsIFwiXCIsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLm5vdGEucGFnaW5hcyA9IHBhZ2luYXM7XG4gICAgICAgIHJldHVybiBwYWdpbmFzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm5vdGEucGFnaW5hcztcbiAgICAgICAgfVxuXG5cbiAgICAgICAgYXN5bmMgZ2V0QXN1bnRvKCk6IFByb21pc2U8eyBzaUFzdW50bzogYm9vbGVhbiwgbm9tYnJlOiBzdHJpbmdbXSB9PiB7IC8vIEZ1bmNpb25hIGNvbiBmcm9udG1hdHRlclxuICAgICAgICAgICAgbGV0IHBhZHJlcyA9IFtdO1xuICAgICAgICAgICAgbGV0IGFjdGl2byA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICAgICAgbGV0IHNpQXN1bnRvID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgbm9tYnJlID0gXCJcIjtcbiAgICAgICAgICAgIGxldCBub3RhO1xuICAgICAgICAgICAgaWYgKGFjdGl2byAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbm9tYnJlID0gYWN0aXZvLmJhc2VuYW1lO1xuICAgICAgICAgICAgICAgIG5vdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoYWN0aXZvKTtcbiAgICAgICAgICAgICAgICAvLyBBc2VndXJhciBxdWUgbm90YS5mcm9udG1hdHRlciBleGlzdGUgeSBhc2lnbmFyIHVuIG9iamV0byB2YWNcdTAwRURvIGEgZmlsZVxuICAgICAgICAgICAgICAgIG5vdGEuZnJvbnRtYXR0ZXIgPSBub3RhLmZyb250bWF0dGVyIHx8IHt9O1xuICAgICAgICAgICAgICAgIG5vdGEuZnJvbnRtYXR0ZXIuZmlsZSA9IHt9O1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24obm90YS5mcm9udG1hdHRlci5maWxlLCBhY3Rpdm8pO1xuICAgICAgICAgICAgICAgIC8vMS4gc2lBc3VudG8gPSBhd2FpdCBzdWdnZXN0ZXIoW1wiU2lcIiwgXCJOb1wiXSwgW3RydWUsIGZhbHNlXSwgdHJ1ZSwgbm9tYnJlICsgXCIgZXMgb3JpZ2VuIGRlIFwiICsgdGhpcy5ub3RhLnRpdHVsbyArIFwiP1wiKTtcbiAgICAgICAgICAgICAgICBwYWRyZXMudW5zaGlmdChub21icmUpOyAvLyBBXHUwMEYxYWRlIGVsIG5vbWJyZSBhbCBpbmljaW8gZGVsIGFycmVnbG8sIGRlc3BsYXphbmRvIGxvcyBkZW1cdTAwRTFzIGVsZW1lbnRvc1xuICAgICAgICAgICAgICAgICAgICBzaUFzdW50byA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaUFzdW50bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXN1bnRvRGVmaW5pZG8gPSB0cnVlOyAvLyBQYXJhIHF1ZSBubyBlamVjdXRlIGxhIGJ1c3F1ZWRhIGRlIEFyZWEgVmlkYSwgQXJlYSBkZSBJbnRlclx1MDBFOXMsIHByb3llY3RvIFEgbyBHVERcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuaXZlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobm90YT8uZnJvbnRtYXR0ZXI/LnR5cGUpIHsgLy8gTGEgbm90YSBhY3RpdnMgZXMgdW5hOiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJQR1REXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlBRXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZFUklGSUNBQ0lPTiBERSBQUk9ZRUNUT1MgREUgUSBZIFBST1lFQ1RPIEdURFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YS5mcm9udG1hdHRlcj8udHlwZSA9PT0gXCJQUVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDVUFORE8gTEEgTk9UQSBBQ1RJVkEgRVMgVU4gUFEuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9RID0gbm9tYnJlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIFBST1lFQ1RPU0dURFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW5pY2lhbGl6YW1vcyB0aGlzLm5vdGEucHJveWVjdG9HVEQgY29uIHVuIHZhbG9yIHByZWRldGVybWluYWRvIGRlIGNhZGVuYSB2YWNcdTAwRURhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmVyaWZpY2Ftb3Mgc2kgbm90YS5wcm95ZWN0b0dURCBleGlzdGUgeSBlcyB1biBhcnJlZ2xvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1REKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIGl0ZXJhbW9zIHNvYnJlIGNhZGEgZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1RELm1hcChlbGVtZW50byA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50by5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90YS5mcm9udG1hdHRlci5wcm95ZWN0b0dURCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSBwZXJvIG5vIGVzIHVuIGFycmVnbG8sIGFwbGljYW1vcyBlbCByZWdleCBkaXJlY3RhbWVudGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1RELnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBub3RhLnByb3llY3RvR1REIG5vIGV4aXN0ZSwgdGhpcy5ub3RhLnByb3llY3RvR1REIHlhIGVzdFx1MDBFMSBlc3RhYmxlY2lkbyBlbiBcIlwiIHBvciBkZWZlY3RvXG4gICAgXG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPYnRlbmVyIFByb3llY3RvUSB5IFByb3llY3RvIEdURCBjdWFuZG8gbGEgbm90YSBlcyBQcm95ZWN0b0dURC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub3RhLmZyb250bWF0dGVyPy50eXBlID09PSBcIlBHVERcIikge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ1VBTkRPIExBIE5PVEEgQUNUSVZBIEVTIFVOIEdURC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZFUklGSUNBQ0lPTiBERSBQUk9ZRUNUT1NHVERcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b0dURCA9IFtub21icmVdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm90YS5mcm9udG1hdHRlci5wcm95ZWN0b0dURCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBlcyB1biBhcnJlZ2xvLCB1dGlsaXphbW9zIGNvbmNhdCBwYXJhIGFcdTAwRjFhZGlyIGxvcyBlbGVtZW50b3MgeWEgcHJvY2VzYWRvcyBjb24gZWwgcmVnZXggYWwgYXJyZWdsbyB0aGlzLm5vdGEucHJveWVjdG9HVERcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSB0aGlzLm5vdGEucHJveWVjdG9HVEQuY29uY2F0KG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQubWFwKGVsZW1lbnRvID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90YS5mcm9udG1hdHRlci5wcm95ZWN0b0dURCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSBwZXJvIG5vIGVzIHVuIGFycmVnbG8sIGFwbGljYW1vcyBlbCByZWdleCBkaXJlY3RhbWVudGUgeSB1c2Ftb3MgcHVzaCBwYXJhIGFncmVnYXJsbyBhIHRoaXMubm90YS5wcm95ZWN0b0dURFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b0dURC5wdXNoKG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBub3RhLnByb3llY3RvR1REIG5vIGV4aXN0ZSwgdGhpcy5ub3RhLnByb3llY3RvR1REIHlhIGVzdFx1MDBFMSBlc3RhYmxlY2lkbyBlbiBcIlwiIHBvciBkZWZlY3RvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9RID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9RKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIGl0ZXJhbW9zIHNvYnJlIGNhZGEgZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9RID0gbm90YS5mcm9udG1hdHRlci5wcm95ZWN0b1EubWFwKGVsZW1lbnRvID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub3RhLmZyb250bWF0dGVyLnByb3llY3RvUSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSBwZXJvIG5vIGVzIHVuIGFycmVnbG8sIGFwbGljYW1vcyBlbCByZWdleCBkaXJlY3RhbWVudGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9RID0gbm90YS5mcm9udG1hdHRlci5wcm95ZWN0b1EucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPYnRlbmVyIFByb3llY3RvUSB5IFByb3llY3RvIEdURCBjdWFuZG8gbGEgbm90YSBlcyBvdHJhIGNvc2EgcXVlIG5vIGVzIHByb3llY3RvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvUSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhPy5mcm9udG1hdHRlcj8ucHJveWVjdG9RKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIGl0ZXJhbW9zIHNvYnJlIGNhZGEgZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9RID0gbm90YS5mcm9udG1hdHRlci5wcm95ZWN0b1EubWFwKGVsZW1lbnRvID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub3RhPy5mcm9udG1hdHRlcj8ucHJveWVjdG9RKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXhpc3RlIHBlcm8gbm8gZXMgdW4gYXJyZWdsbywgYXBsaWNhbW9zIGVsIHJlZ2V4IGRpcmVjdGFtZW50ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b1EgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvUS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvR1REID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhbW9zIHNpIG5vdGEucHJveWVjdG9HVEQgZXhpc3RlIHkgZXMgdW4gYXJyZWdsb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm90YT8uZnJvbnRtYXR0ZXI/LnByb3llY3RvR1REKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIGl0ZXJhbW9zIHNvYnJlIGNhZGEgZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvR1RELm1hcChlbGVtZW50byA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50by5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LnByb3llY3RvR1REKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXhpc3RlIHBlcm8gbm8gZXMgdW4gYXJyZWdsbywgYXBsaWNhbW9zIGVsIHJlZ2V4IGRpcmVjdGFtZW50ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b0dURCA9IG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWZXJpZmljYW1vcyBhcmVhSW50ZXJlcyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGE/LmZyb250bWF0dGVyPy5hcmVhSW50ZXJlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIGl0ZXJhbW9zIHNvYnJlIGNhZGEgZWxlbWVudG8gKGV4Y2x1eWVuZG8gZWwgcHJpbWVyIGVsZW1lbnRvIHlhIGFncmVnYWRvIHF1ZSBlcyBub3RhLnRpdHVsbylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHkgYXBsaWNhbW9zIGVsIHJlZ2V4IGEgY2FkYSBlbGVtZW50by4gTHVlZ28gY29uY2F0ZW5hbW9zIGNvbiBlbCBhcnJheSBleGlzdGVudGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMgPSB0aGlzLm5vdGEuYXJlYUludGVyZXMuY29uY2F0KG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMubWFwKGVsZW1lbnRvID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudG8ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgbm8gZXMgdW4gYXJyZWdsbywgcmV2aXNhbW9zIHNpIG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMgZXhpc3RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LmFyZWFJbnRlcmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXhpc3RlLCBhcGxpY2Ftb3MgZWwgcmVnZXggeSBsbyBhXHUwMEYxYWRpbW9zIGNvbW8gc2VndW5kbyBlbGVtZW50b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhSW50ZXJlcy5wdXNoKG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmVyaWZpY2Ftb3MgQXJlYVZpZGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGE/LmZyb250bWF0dGVyPy5hcmVhVmlkYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm90YS5mcm9udG1hdHRlci5hcmVhVmlkYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFcyB1biBhcnJlZ2xvLCB1c2EgZWwgcHJpbWVyIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gbm90YS5mcm9udG1hdHRlci5hcmVhVmlkYVswXS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygbm90YS5mcm9udG1hdHRlci5hcmVhVmlkYSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFcyB1biBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBObyBlc3RcdTAwRTEgZGVmaW5pZG8gbyBlc3RcdTAwRTEgdmFjXHUwMEVEb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gXCJObyBlcyBkZSBuaW5nXHUwMEZBbiBBcmVhIGRlIFZpZGFcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBERUZJTklSIE5JVkVMUFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb21wcnVlYmEgc2kgbml2ZWxBSSBleGlzdGUgeSBubyBlcyBOYU4gZGVzcHVcdTAwRTlzIGRlIGludGVudGFyIGNvbnZlcnRpcmxvIGEgZW50ZXJvXG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4ocGFyc2VJbnQobm90YT8uZnJvbnRtYXR0ZXI/Lm5pdmVsUCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaXZlbCA9IHBhcnNlSW50KG5vdGEuZnJvbnRtYXR0ZXIubml2ZWxQKSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBuaXZlbEFJIG5vIGV4aXN0ZSBvIHN1IGNvbnZlcnNpXHUwMEYzbiBhIGVudGVybyByZXN1bHRhIGVuIE5hTiwgZXN0YWJsZWNlIG5pdmVsIGEgMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbml2ZWwgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5uaXZlbFAgPSBuaXZlbDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7IC8vIFBHVEQgeSBQUVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJBSVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIEFSRUEgREUgSU5URVJFU1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LnR5cGUgPT09IFwiQUlcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gW25vdGEuZnJvbnRtYXR0ZXIuZmlsZS5iYXNlbmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbmljaWFsaXphbW9zIHRoaXMubm90YS5hcmVhSW50ZXJlcyBjb24gbm90YS50aXR1bG8gY29tbyBlbCBwcmltZXIgZWxlbWVudG8uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFc3RlIHNvbG8gYXBsaWNhIHBhcmEgY3VhbmRvIGVzdG95IGNvbnN0cnV5ZW5kbyBkZXNkZSBBcmVhIGRlIEludGVyZXMgb3RyYSBBcmVhIGRlIEludGVyZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmVyaWZpY2Ftb3Mgc2kgbm90YS5hcmVhSW50ZXJlcyBlcyB1biBhcnJlZ2xvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXI/LmFyZWFJbnRlcmVzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXMgdW4gYXJyZWdsbywgaXRlcmFtb3Mgc29icmUgY2FkYSBlbGVtZW50byAoZXhjbHV5ZW5kbyBlbCBwcmltZXIgZWxlbWVudG8geWEgYWdyZWdhZG8gcXVlIGVzIG5vdGEudGl0dWxvKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8geSBhcGxpY2Ftb3MgZWwgcmVnZXggYSBjYWRhIGVsZW1lbnRvLiBMdWVnbyBjb25jYXRlbmFtb3MgY29uIGVsIGFycmF5IGV4aXN0ZW50ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhSW50ZXJlcyA9IHRoaXMubm90YS5hcmVhSW50ZXJlcy5jb25jYXQobm90YS5mcm9udG1hdHRlci5hcmVhSW50ZXJlcy5tYXAoZWxlbWVudG8gPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50by5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBubyBlcyB1biBhcnJlZ2xvLCByZXZpc2Ftb3Mgc2kgbm90YS5mcm9udG1hdHRlci5hcmVhSW50ZXJlcyBleGlzdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlci5hcmVhSW50ZXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSwgYXBsaWNhbW9zIGVsIHJlZ2V4IHkgbG8gYVx1MDBGMWFkaW1vcyBjb21vIHNlZ3VuZG8gZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMucHVzaChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBubyBlcyBhcnJlZ2xvIG5pIHN0cmluZywgYXJlYUludGVyZXMgZXMgZWwgYXJlYSBpbnRlcmVzIHF1ZSBlc3RcdTAwRTEgZW4gdGl0dWxvLiAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgbm90YS5mcm9udG1hdHRlci5hcmVhSW50ZXJlcyBubyBleGlzdGUsIHRoaXMubm90YS5hcmVhSW50ZXJlcyB5YSB0ZW5kclx1MDBFMSBub3RhLnRpdHVsbyBjb21vIHN1IFx1MDBGQW5pY28gZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJBVlwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWRVJJRklDQUNJT04gREUgQVJFQSBERSBWSURBXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlcj8uYXJlYVZpZGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXMgdW4gYXJyZWdsbywgdXNhIGVsIHByaW1lciBlbGVtZW50b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGFbMF0ucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXMgdW4gc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gbm90YS5mcm9udG1hdHRlci5hcmVhVmlkYS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gZXN0XHUwMEUxIGRlZmluaWRvIG8gZXN0XHUwMEUxIHZhY1x1MDBFRG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IFwiTm8gZXMgZGUgbmluZ1x1MDBGQW4gQXJlYSBkZSBWaWRhXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcG9uaWVuZG8gc2kgQXN1bnRvIGVuIGZhbHNlIHBhcmEgbGFzIG5vdGFzIGVzdHJ1Y3R1cmEgQUkgeSBBVi4gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlcj8udHlwZSA9PT0gXCJBSVwiIHx8IG5vdGE/LmZyb250bWF0dGVyPy50eXBlID09PSBcIkFWXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpQXN1bnRvID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gREVGSU5JUiBOSVZFTFBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29tcHJ1ZWJhIHNpIG5pdmVsQUkgZXhpc3RlIHkgbm8gZXMgTmFOIGRlc3B1XHUwMEU5cyBkZSBpbnRlbnRhciBjb252ZXJ0aXJsbyBhIGVudGVyb1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHBhcnNlSW50KG5vdGEuZnJvbnRtYXR0ZXI/Lm5pdmVsUCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaXZlbCA9IHBhcnNlSW50KG5vdGEuZnJvbnRtYXR0ZXIubml2ZWxQKSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBuaXZlbEFJIG5vIGV4aXN0ZSBvIHN1IGNvbnZlcnNpXHUwMEYzbiBhIGVudGVybyByZXN1bHRhIGVuIE5hTiwgZXN0YWJsZWNlIG5pdmVsIGEgMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbml2ZWwgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5uaXZlbFAgPSBuaXZlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIGFjdGl2YSBubyBlcyBvcmlnZW4gZGUgQ3JlYW5kbyBSUiAtIFBHVEQgLSBQUSAgaWYoc2lBc3VudG8pXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGFjdGl2byA9PSBudWxsXG4gICAgICAgICAgICAgICAgc2lBc3VudG8gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHNpQXN1bnRvLCBub21icmU6IHBhZHJlcyB9XG4gICAgICAgIH1cblxuXG59IiwgImltcG9ydCB7IFRGaWxlLCBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gJ2x1eG9uJztcbmltcG9ydCB7IE5vdGVGaWVsZEhhbmRsZXJCYXNlIH0gZnJvbSAnLi4vRkggQmFzZS9Ob3RlRmllbGRIYW5kbGVyQmFzZSc7XG5cbmV4cG9ydCBjbGFzcyBBbnVhbF9GSCBleHRlbmRzIE5vdGVGaWVsZEhhbmRsZXJCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0cDogYW55LCBpbmZvU3Vic2lzdGVtYTogYW55LCBwbHVnaW46IGFueSkge1xuICAgICAgICBzdXBlcih0cCwgaW5mb1N1YnNpc3RlbWEsIHBsdWdpbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhIHVuIFVVSUQgcGFyYSBlbCBJRCBkZSBsYSBub3RhXG4gICAgICovXG4gICAgYXN5bmMgZ2V0SWQoKSB7XG4gICAgICAgIC8vIFVzYXIgVVVJRCBwYXJhIG5vdGFzIGRlIHRpcG8gSm91cm5hbFxuICAgICAgICB0aGlzLm5vdGEuaWQgPSB0aGlzLmdlbmVyYXRlVVVJRCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5ub3RhLmlkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9idGllbmUgbGEgZmVjaGEgYWN0dWFsIGVuIGZvcm1hdG8gSVNPXG4gICAgICovXG4gICAgYXN5bmMgZ2V0RmVjaGEoKSB7XG4gICAgICAgIHRoaXMubm90YS5mZWNoYSA9IERhdGVUaW1lLm5vdygpLnRvSVNPRGF0ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcy5ub3RhLmZlY2hhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcm1pdGUgc2VsZWNjaW9uYXIgZWwgYVx1MDBGMW8gcGFyYSBsYSBub3RhIGFudWFsXG4gICAgICogTXVlc3RyYSBhXHUwMEYxb3MgZGlzcG9uaWJsZXMgKG5vIG9jdXBhZG9zKSBlbiB1biByYW5nbyBkZSAtMyBhICszIGRlbCBhXHUwMEYxbyBhY3R1YWxcbiAgICAgKi9cbiAgICBhc3luYyBnZXRBXHUwMEYxbygpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFllYXIgPSBEYXRlVGltZS5ub3coKS55ZWFyO1xuICAgICAgICBjb25zdCB5ZWFycyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDcgfSwgKF8sIGkpID0+IGN1cnJlbnRZZWFyIC0gMyArIGkpO1xuICAgICAgICBjb25zdCBleGlzdGluZ1llYXJzID0gYXdhaXQgdGhpcy5nZXRFeGlzdGluZ1llYXJzKCk7XG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZVllYXJzID0geWVhcnMuZmlsdGVyKHllYXIgPT4gIWV4aXN0aW5nWWVhcnMuaW5jbHVkZXMoeWVhci50b1N0cmluZygpKSk7XG5cbiAgICAgICAgLy8gU2kgbm8gaGF5IGFcdTAwRjFvcyBkaXNwb25pYmxlcywgbW9zdHJhciBtZW5zYWplXG4gICAgICAgIGlmIChhdmFpbGFibGVZZWFycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJObyBoYXkgYVx1MDBGMW9zIGRpc3BvbmlibGVzIGVuIGVsIHJhbmdvIHNlbGVjY2lvbmFkby5cIik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBoYXkgYVx1MDBGMW9zIGRpc3BvbmlibGVzXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeWVhciA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKFxuICAgICAgICAgICAgYXZhaWxhYmxlWWVhcnMubWFwKFN0cmluZyksIFxuICAgICAgICAgICAgYXZhaWxhYmxlWWVhcnMubWFwKFN0cmluZyksIFxuICAgICAgICAgICAgZmFsc2UsIFxuICAgICAgICAgICAgXCJTZWxlY2Npb25hIGVsIGFcdTAwRjFvOlwiXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHllYXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJTZWxlY2NpXHUwMEYzbiBkZSBhXHUwMEYxbyBjYW5jZWxhZGEgcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2VsZWNjaVx1MDBGM24gY2FuY2VsYWRhXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ub3RhLmFcdTAwRjFvID0geWVhcjtcbiAgICAgICAgcmV0dXJuIHllYXI7XG4gICAgfVxuICAgICBcbiAgICAvKipcbiAgICAgKiBFc3RhYmxlY2UgZWwgZXN0YWRvIGluaWNpYWwgY29tbyBhY3Rpdm9cbiAgICAgKi9cbiAgICBhc3luYyBnZXRFc3RhZG8oKSB7XG4gICAgICAgIHRoaXMubm90YS5lc3RhZG8gPSBcIlx1RDgzRFx1REZFMlwiO1xuICAgICAgICByZXR1cm4gdGhpcy5ub3RhLmVzdGFkbztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW5vbWJyYSBlbCBhcmNoaXZvIHNlZ1x1MDBGQW4gZWwgYVx1MDBGMW8gc2VsZWNjaW9uYWRvXG4gICAgICovXG4gICAgYXN5bmMgZ2V0UmVuYW1lKCkge1xuICAgICAgICAvLyBBc2VndXJhcnNlIGRlIHF1ZSBsYSBjYXJwZXRhIGV4aXN0ZVxuICAgICAgICBhd2FpdCB0aGlzLmNyZWFyQ2FycGV0YSh0aGlzLmluZm9TdWJzaXN0ZW1hLmZvbGRlcik7XG5cbiAgICAgICAgLy8gQ29uc3RydWlyIGVsIG51ZXZvIG5vbWJyZSBkZSBhcmNoaXZvIGNvbiBlbCBhXHUwMEYxb1xuICAgICAgICBjb25zdCBuZXdOYW1lID0gYCR7dGhpcy5pbmZvU3Vic2lzdGVtYS5mb2xkZXJ9LyR7dGhpcy5ub3RhLmFcdTAwRjFvfS5tZGA7XG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLnRwLmZpbGUuY29uZmlnLnRhcmdldF9maWxlO1xuXG4gICAgICAgIC8vIFZlcmlmaWNhciBzaSBlbCBhcmNoaXZvIHlhIGV4aXN0ZVxuICAgICAgICBjb25zdCBleGlzdHMgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG5ld05hbWUpO1xuICAgICAgICBpZiAoZXhpc3RzIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG92ZXJ3cml0ZSA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKFxuICAgICAgICAgICAgICAgIFtcIlNvYnJlZXNjcmliaXIgQXJjaGl2byBBY3R1YWxcIiwgXCJEZXRlbmVyIGNyZWFjaVx1MDBGM24gZGVsIGFyY2hpdm8uXCJdLFxuICAgICAgICAgICAgICAgIFt0cnVlLCBmYWxzZV0sXG4gICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICBgRWwgYXJjaGl2byAke25ld05hbWV9IHlhIGV4aXN0ZS4gXHUwMEJGUXVcdTAwRTkgZGVzZWFzIGhhY2VyP2BcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChvdmVyd3JpdGUpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBhcHAudmF1bHQuZGVsZXRlKGV4aXN0cyk7XG4gICAgICAgICAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBhcHAudmF1bHQucmVuYW1lKGZpbGUsIG5ld05hbWUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFyY2hpdm8gcmVub21icmFkbyBjb24gXHUwMEU5eGl0by5cIik7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBBYnJpciBlbCBhcmNoaXZvIHJlY2lcdTAwRTluIGNyZWFkb1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBudWV2b0FyY2hpdm8gPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG5ld05hbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobnVldm9BcmNoaXZvIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGFwcC53b3Jrc3BhY2UuZ2V0TGVhZih0cnVlKS5vcGVuRmlsZShudWV2b0FyY2hpdm8pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ2FuY2VsYW5kbyBsYSBjcmVhY2lcdTAwRjNuIGRlbCBhcmNoaXZvLlwiKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcm9jZXNvIGNhbmNlbGFkbyBwb3IgZWwgdXN1YXJpby5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LnJlbmFtZShmaWxlLCBuZXdOYW1lKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFyY2hpdm8gcmVub21icmFkbyBjb24gXHUwMEU5eGl0by5cIik7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQWJyaXIgZWwgYXJjaGl2byByZWNpXHUwMEU5biBjcmVhZG9cbiAgICAgICAgICAgICAgICBjb25zdCBudWV2b0FyY2hpdm8gPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG5ld05hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChudWV2b0FyY2hpdm8gaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBhcHAud29ya3NwYWNlLmdldExlYWYodHJ1ZSkub3BlbkZpbGUobnVldm9BcmNoaXZvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRvcm5hIGVsIG9iamV0byBub3RhIGNvbXBsZXRvXG4gICAgICovXG4gICAgYXN5bmMgZ2V0Tm90YSgpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5ub3RhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYSB1biBVVUlEIFx1MDBGQW5pY28gcGFyYSBsYSBub3RhXG4gICAgICovXG4gICAgZ2VuZXJhdGVVVUlEKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwO1xuICAgICAgICAgICAgY29uc3QgdiA9IGMgPT09ICd4JyA/IHIgOiAociAmIDB4MyB8IDB4OCk7XG4gICAgICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9idGllbmUgbG9zIGFcdTAwRjFvcyBxdWUgeWEgdGllbmVuIG5vdGFzIGFudWFsZXNcbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIGdldEV4aXN0aW5nWWVhcnMoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgICAgICBjb25zdCBmaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG4gICAgICAgIGNvbnN0IHllYXJGaWxlcyA9IGZpbGVzLmZpbHRlcihmaWxlID0+IGZpbGUucGF0aC5zdGFydHNXaXRoKHRoaXMuaW5mb1N1YnNpc3RlbWEuZm9sZGVyKSk7XG4gICAgICAgIGNvbnN0IHllYXJzID0geWVhckZpbGVzLm1hcChmaWxlID0+IGZpbGUuYmFzZW5hbWUpO1xuICAgICAgICByZXR1cm4geWVhcnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYSBsYSBjYXJwZXRhIHNpIG5vIGV4aXN0ZVxuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgY3JlYXJDYXJwZXRhKGZvbGRlclBhdGg6IHN0cmluZykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gVmVyaWZpY2FyIHNpIGxhIGNhcnBldGEgeWEgZXhpc3RlXG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ0ZvbGRlciA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZm9sZGVyUGF0aCk7XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdGb2xkZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgTGEgY2FycGV0YSAnJHtmb2xkZXJQYXRofScgeWEgZXhpc3RlLmApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ3JlYXIgbGEgY2FycGV0YVxuICAgICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LmNyZWF0ZUZvbGRlcihmb2xkZXJQYXRoKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBDYXJwZXRhICcke2ZvbGRlclBhdGh9JyBjcmVhZGEgZXhpdG9zYW1lbnRlLmApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgYWwgY3JlYXIgbGEgY2FycGV0YSAnJHtmb2xkZXJQYXRofSc6YCwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxufSIsICJpbXBvcnQgeyBURmlsZSwgTm90aWNlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICdsdXhvbic7XG5pbXBvcnQgeyBOb3RlRmllbGRIYW5kbGVyQmFzZSB9IGZyb20gJy4uL0ZIIEJhc2UvTm90ZUZpZWxkSGFuZGxlckJhc2UnO1xuXG5leHBvcnQgY2xhc3MgVHJpbWVzdHJhbEZpZWxkSGFuZGxlciBleHRlbmRzIE5vdGVGaWVsZEhhbmRsZXJCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0cDogYW55LCBpbmZvU3Vic2lzdGVtYTogYW55LCBwbHVnaW46IGFueSkge1xuICAgICAgICBzdXBlcih0cCwgaW5mb1N1YnNpc3RlbWEsIHBsdWdpbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhIHVuIFVVSUQgcGFyYSBlbCBJRCBkZSBsYSBub3RhXG4gICAgICovXG4gICAgYXN5bmMgZ2V0SWQoKSB7XG4gICAgICAgIHRoaXMubm90YS5pZCA9IHRoaXMuZ2VuZXJhdGVVVUlEKCk7XG4gICAgICAgIHJldHVybiB0aGlzLm5vdGEuaWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT2J0aWVuZSBsYSBmZWNoYSBhY3R1YWwgZW4gZm9ybWF0byBJU09cbiAgICAgKi9cbiAgICBhc3luYyBnZXRGZWNoYSgpIHtcbiAgICAgICAgdGhpcy5ub3RhLmZlY2hhID0gRGF0ZVRpbWUubm93KCkudG9JU09EYXRlKCk7XG4gICAgICAgIHJldHVybiB0aGlzLm5vdGEuZmVjaGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVybWl0ZSBzZWxlY2Npb25hciBlbCB0cmltZXN0cmUgcGFyYSBsYSBub3RhXG4gICAgICogTXVlc3RyYSBzb2xvIGxvcyB0cmltZXN0cmVzIGRpc3BvbmlibGVzIChubyB1dGlsaXphZG9zKVxuICAgICAqL1xuICAgIGFzeW5jIGdldFRyaW1lc3RyZSgpIHtcbiAgICAgICAgLy8gT3BjaW9uZXMgcHJlZGVmaW5pZGFzIHBhcmEgdHJpbWVzdHJlc1xuICAgICAgICBjb25zdCB0cmltZXN0cmVzID0gW1wiUTFcIiwgXCJRMlwiLCBcIlEzXCIsIFwiUTRcIl07XG4gICAgICAgIFxuICAgICAgICAvLyBPYnRpZW5lIGxvcyB0cmltZXN0cmVzIHlhIGV4aXN0ZW50ZXMgZW4gbGEgY2FycGV0YSBkZWZpbmlkYVxuICAgICAgICBjb25zdCBleGlzdGluZ1RyaW1lc3RyZXMgPSBhd2FpdCB0aGlzLmdldEV4aXN0aW5nVHJpbWVzdHJlcygpO1xuICAgICAgICBcbiAgICAgICAgLy8gRmlsdHJhIHBhcmEgZGVqYXIgc29sbyBsYXMgb3BjaW9uZXMgcXVlIG5vIHNlIGhhbiB1c2Fkb1xuICAgICAgICBjb25zdCBhdmFpbGFibGVUcmltZXN0cmVzID0gdHJpbWVzdHJlcy5maWx0ZXIocSA9PiAhZXhpc3RpbmdUcmltZXN0cmVzLmluY2x1ZGVzKHEpKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChhdmFpbGFibGVUcmltZXN0cmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgbmV3IE5vdGljZShcIlRvZG9zIGxvcyB0cmltZXN0cmVzIHlhIGhhbiBzaWRvIGNyZWFkb3MgZW4gZXN0YSBjYXJwZXRhLlwiKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGhheSB0cmltZXN0cmVzIGRpc3BvbmlibGVzXCIpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCB0cmltZXN0cmUgPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihcbiAgICAgICAgICAgIGF2YWlsYWJsZVRyaW1lc3RyZXMsXG4gICAgICAgICAgICBhdmFpbGFibGVUcmltZXN0cmVzLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBcIlNlbGVjY2lvbmEgZWwgdHJpbWVzdHJlOlwiXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICBpZiAodHJpbWVzdHJlID09PSBudWxsKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKFwiU2VsZWNjaVx1MDBGM24gZGUgdHJpbWVzdHJlIGNhbmNlbGFkYSBwb3IgZWwgdXN1YXJpby5cIik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTZWxlY2NpXHUwMEYzbiBjYW5jZWxhZGFcIik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMubm90YS50cmltZXN0cmUgPSB0cmltZXN0cmU7XG4gICAgICAgIHJldHVybiB0cmltZXN0cmU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXN0YWJsZWNlIGVsIGVzdGFkbyBpbmljaWFsIGNvbW8gYWN0aXZvXG4gICAgICovXG4gICAgYXN5bmMgZ2V0RXN0YWRvKCkge1xuICAgICAgICB0aGlzLm5vdGEuZXN0YWRvID0gXCJcdUQ4M0RcdURGRTJcIjtcbiAgICAgICAgcmV0dXJuIHRoaXMubm90YS5lc3RhZG87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVub21icmEgZWwgYXJjaGl2byBzZWdcdTAwRkFuIGVsIHRyaW1lc3RyZSBzZWxlY2Npb25hZG9cbiAgICAgKi9cbiAgICBhc3luYyBnZXRSZW5hbWUoKSB7XG4gICAgICAgIC8vIEFzZWd1cmFyc2UgZGUgcXVlIGxhIGNhcnBldGEgZXhpc3RlXG4gICAgICAgIGF3YWl0IHRoaXMuY3JlYXJDYXJwZXRhKHRoaXMuaW5mb1N1YnNpc3RlbWEuZm9sZGVyKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENvbnN0cnV5ZSBlbCBudWV2byBub21icmUgdXNhbmRvIGVsIGZvbGRlciB5IGVsIHRyaW1lc3RyZSBzZWxlY2Npb25hZG9cbiAgICAgICAgY29uc3QgbmV3TmFtZSA9IGAke3RoaXMuaW5mb1N1YnNpc3RlbWEuZm9sZGVyfS8ke3RoaXMubm90YS50cmltZXN0cmV9Lm1kYDtcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMudHAuZmlsZS5jb25maWcudGFyZ2V0X2ZpbGU7XG4gICAgICAgIFxuICAgICAgICAvLyBWZXJpZmljYSBzaSBlbCBhcmNoaXZvIHlhIGV4aXN0ZVxuICAgICAgICBjb25zdCBleGlzdHMgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG5ld05hbWUpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGV4aXN0cyBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBvdmVyd3JpdGUgPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihcbiAgICAgICAgICAgICAgICBbXCJTb2JyZWVzY3JpYmlyIEFyY2hpdm8gQWN0dWFsXCIsIFwiRGV0ZW5lciBjcmVhY2lcdTAwRjNuIGRlbCBhcmNoaXZvLlwiXSxcbiAgICAgICAgICAgICAgICBbdHJ1ZSwgZmFsc2VdLFxuICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgYEVsIGFyY2hpdm8gJHtuZXdOYW1lfSB5YSBleGlzdGUuIFx1MDBCRlF1XHUwMEU5IGRlc2VhcyBoYWNlcj9gXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAob3ZlcndyaXRlKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LmRlbGV0ZShleGlzdHMpO1xuICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LnJlbmFtZShmaWxlLCBuZXdOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBcmNoaXZvIHJlbm9tYnJhZG8gY29uIFx1MDBFOXhpdG8uXCIpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gQWJyaXIgZWwgYXJjaGl2byByZWNpXHUwMEU5biBjcmVhZG9cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbnVldm9BcmNoaXZvID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChuZXdOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51ZXZvQXJjaGl2byBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBhcHAud29ya3NwYWNlLmdldExlYWYodHJ1ZSkub3BlbkZpbGUobnVldm9BcmNoaXZvKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNhbmNlbGFuZG8gbGEgY3JlYWNpXHUwMEYzbiBkZWwgYXJjaGl2by5cIik7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvY2VzbyBjYW5jZWxhZG8gcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGFwcC52YXVsdC5yZW5hbWUoZmlsZSwgbmV3TmFtZSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBcmNoaXZvIHJlbm9tYnJhZG8gY29uIFx1MDBFOXhpdG8uXCIpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEFicmlyIGVsIGFyY2hpdm8gcmVjaVx1MDBFOW4gY3JlYWRvXG4gICAgICAgICAgICAgICAgY29uc3QgbnVldm9BcmNoaXZvID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChuZXdOYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAobnVldm9BcmNoaXZvIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgYXBwLndvcmtzcGFjZS5nZXRMZWFmKHRydWUpLm9wZW5GaWxlKG51ZXZvQXJjaGl2byk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0b3JuYSBlbCBvYmpldG8gbm90YSBjb21wbGV0b1xuICAgICAqL1xuICAgIGFzeW5jIGdldE5vdGEoKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm90YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmEgdW4gVVVJRCBcdTAwRkFuaWNvIHBhcmEgbGEgbm90YVxuICAgICAqL1xuICAgIGdlbmVyYXRlVVVJRCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICBjb25zdCByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMDtcbiAgICAgICAgICAgIGNvbnN0IHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMgfCAweDgpO1xuICAgICAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPYnRpZW5lIGxvcyB0cmltZXN0cmVzIHF1ZSB5YSB0aWVuZW4gbm90YXMgdHJpbWVzdHJhbGVzXG4gICAgICovXG4gICAgcHJpdmF0ZSBhc3luYyBnZXRFeGlzdGluZ1RyaW1lc3RyZXMoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgICAgICBjb25zdCBmaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG4gICAgICAgIC8vIFNlIGZpbHRyYW4gbG9zIGFyY2hpdm9zIHF1ZSBzZSBlbmN1ZW50cmFuIGVuIGxhIGNhcnBldGEgZGVmaW5pZGEgcGFyYSBub3RhcyB0cmltZXN0cmFsZXNcbiAgICAgICAgY29uc3QgdHJpbWVzdHJlRmlsZXMgPSBmaWxlcy5maWx0ZXIoZmlsZSA9PiBmaWxlLnBhdGguc3RhcnRzV2l0aCh0aGlzLmluZm9TdWJzaXN0ZW1hLmZvbGRlcikpO1xuICAgICAgICBjb25zdCB0cmltZXN0cmVzID0gdHJpbWVzdHJlRmlsZXMubWFwKGZpbGUgPT4gZmlsZS5iYXNlbmFtZSk7XG4gICAgICAgIHJldHVybiB0cmltZXN0cmVzO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBDcmVhIGxhIGNhcnBldGEgc2kgbm8gZXhpc3RlXG4gICAgICovXG4gICAgcHJpdmF0ZSBhc3luYyBjcmVhckNhcnBldGEoZm9sZGVyUGF0aDogc3RyaW5nKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBWZXJpZmljYXIgc2kgbGEgY2FycGV0YSB5YSBleGlzdGVcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nRm9sZGVyID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmb2xkZXJQYXRoKTtcbiAgICAgICAgICAgIGlmIChleGlzdGluZ0ZvbGRlcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBMYSBjYXJwZXRhICcke2ZvbGRlclBhdGh9JyB5YSBleGlzdGUuYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDcmVhciBsYSBjYXJwZXRhXG4gICAgICAgICAgICBhd2FpdCBhcHAudmF1bHQuY3JlYXRlRm9sZGVyKGZvbGRlclBhdGgpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYENhcnBldGEgJyR7Zm9sZGVyUGF0aH0nIGNyZWFkYSBleGl0b3NhbWVudGUuYCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBhbCBjcmVhciBsYSBjYXJwZXRhICcke2ZvbGRlclBhdGh9JzpgLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG59IiwgIi8vIHNyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL2ZpZWxkSGFuZGxlcnMvRkggU3Vic2lzdGVtYXMvQ2FtcGFcdTAwRjFhc0ZpZWxkSGFuZGxlci50c1xuaW1wb3J0IHsgTm90ZUZpZWxkSGFuZGxlciB9IGZyb20gJy4uL0ZIIEJhc2UvTm90ZUZpZWxkSGFuZGxlcic7XG5pbXBvcnQgeyBGaWVsZEhhbmRsZXJVdGlscyB9IGZyb20gJy4uLy4uL0ZpZWxkSGFuZGxlclV0aWxzJztcbmltcG9ydCB7IFRGaWxlLCBURm9sZGVyLCBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gJ2x1eG9uJztcblxuZXhwb3J0IGNsYXNzIENhbXBhXHUwMEYxYXNGaWVsZEhhbmRsZXIgZXh0ZW5kcyBOb3RlRmllbGRIYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih0cDogYW55LCBmb2xkZXI6IHN0cmluZywgcGx1Z2luOiBhbnkpIHtcbiAgICAgICAgc3VwZXIodHAsIGZvbGRlciwgcGx1Z2luKTtcbiAgICB9XG5cbiAgICAvLyBPYnRpZW5lIGVsIHRyaW1lc3RyZSBkZSBsYSBjYW1wYVx1MDBGMWEgZGVzZGUgbGFzIG5vdGFzIGRlIHRyaW1lc3RyZXMgZXhpc3RlbnRlc1xuICAgIGFzeW5jIGdldFRyaW1lc3RyZSgpIHtcbiAgICAgICAgbGV0IHRyaW1lc3RyZXMgPSBhd2FpdCBGaWVsZEhhbmRsZXJVdGlscy5maW5kTWFpbkZpbGVzV2l0aFN0YXRlKFwiVFFcIiwgbnVsbCwgdGhpcy5wbHVnaW4pO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgdHJpbWVzdHJlID0gYXdhaXQgdGhpcy5zdWdnZXN0ZXIoXG4gICAgICAgICAgICB0cmltZXN0cmVzLm1hcChiID0+IGIuZmlsZS5iYXNlbmFtZSksXG4gICAgICAgICAgICB0cmltZXN0cmVzLm1hcChiID0+IGIuZmlsZS5iYXNlbmFtZSksXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIFwiVHJpbWVzdHJlIGFsIHF1ZSBwZXJ0ZW5lY2UgZXN0YSBjYW1wYVx1MDBGMWE6XCJcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGlmICh0cmltZXN0cmUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJTZWxlY2NpXHUwMEYzbiBkZSB0cmltZXN0cmUgY2FuY2VsYWRhLlwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5ub3RhLnRyaW1lc3RyZSA9IGBbWyR7dHJpbWVzdHJlfV1dYDtcbiAgICAgICAgcmV0dXJuIHRoaXMubm90YS50cmltZXN0cmU7XG4gICAgfVxuXG4gICAgLy8gT2J0aWVuZSBlbCBlc3RhZG8gZGUgbGEgY2FtcGFcdTAwRjFhIChzdGF0dXMpXG4gICAgYXN5bmMgZ2V0U3RhdHVzKCkge1xuICAgICAgICBjb25zdCBlc3RhZG9zID0gW1xuICAgICAgICAgICAgXCJQZW5kaWVudGVcIixcbiAgICAgICAgICAgIFwiUGxhbmlmaWNhbmRvXCIsXG4gICAgICAgICAgICBcIkRpc2VcdTAwRjFvXCIsXG4gICAgICAgICAgICBcIlJldmlzaVx1MDBGM24gSW50ZXJuYVwiLFxuICAgICAgICAgICAgXCJSZXZpc2lcdTAwRjNuIENsaWVudGVcIixcbiAgICAgICAgICAgIFwiUHVibGljYW5kb1wiLFxuICAgICAgICAgICAgXCJSZWNvZ2VyIEluZGljYWRvcmVzXCIsXG4gICAgICAgICAgICBcIkVuIHBhdXNhXCIsXG4gICAgICAgICAgICBcIlRlcm1pbmFkb1wiLFxuICAgICAgICAgICAgXCJDYW5jZWxhZG9cIlxuICAgICAgICBdO1xuICAgICAgICBcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gYXdhaXQgdGhpcy5zdWdnZXN0ZXIoXG4gICAgICAgICAgICBlc3RhZG9zLFxuICAgICAgICAgICAgZXN0YWRvcyxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgXCJFc3RhZG8gYWN0dWFsIGRlIGxhIGNhbXBhXHUwMEYxYTpcIlxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgbmV3IE5vdGljZShcIlNlbGVjY2lcdTAwRjNuIGRlIGVzdGFkbyBjYW5jZWxhZGEuXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLm5vdGEuc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICByZXR1cm4gc3RhdHVzO1xuICAgIH1cblxuICAgIC8vIE9idGllbmUgbGEgZmVjaGEgZGUgaW5pY2lvIGRlIGxhIGNhbXBhXHUwMEYxYVxuICAgIGFzeW5jIGdldEZlY2hhSW5pY2lvKCkge1xuICAgICAgICAvLyBVc2Ftb3MgZWwgcHJvbXB0IGVzdFx1MDBFMXRpY29cbiAgICAgICAgY29uc3QgZmVjaGFBY3R1YWwgPSBEYXRlVGltZS5ub3coKS50b0Zvcm1hdCgneXl5eS1NTS1kZCcpO1xuICAgICAgICBcbiAgICAgICAgLy8gVXNhbW9zIGxhIGZ1bmNpXHUwMEYzbiBwcm9tcHQgY29ycmVjdGFtZW50ZSBkZXNkZSBzdGF0aWNfZnVuY3Rpb25zXG4gICAgICAgIGNvbnN0IHByb21wdCA9IHRoaXMudHAuc3lzdGVtLnN0YXRpY19mdW5jdGlvbnMuZ2V0KFwicHJvbXB0XCIpO1xuICAgICAgICBjb25zdCBmZWNoYUluaWNpbyA9IGF3YWl0IHByb21wdChcbiAgICAgICAgICAgIFwiRmVjaGEgZGUgaW5pY2lvIGRlIGxhIGNhbXBhXHUwMEYxYSAoWVlZWS1NTS1ERCk6XCIsXG4gICAgICAgICAgICBmZWNoYUFjdHVhbCxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChmZWNoYUluaWNpbyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgbmV3IE5vdGljZShcIlNlbGVjY2lcdTAwRjNuIGRlIGZlY2hhIGRlIGluaWNpbyBjYW5jZWxhZGEuXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLm5vdGEuZmVjaGFJbmljaW8gPSBmZWNoYUluaWNpbztcbiAgICAgICAgcmV0dXJuIGZlY2hhSW5pY2lvO1xuICAgIH1cblxuICAgIC8vIE9idGllbmUgbGEgZmVjaGEgZGUgZmluIGRlIGxhIGNhbXBhXHUwMEYxYVxuICAgIGFzeW5jIGdldEZlY2hhRmluKCkge1xuICAgICAgICAvLyBGZWNoYSBzdWdlcmlkYTogMzAgZFx1MDBFRGFzIGRlc3B1XHUwMEU5cyBkZSBsYSBmZWNoYSBkZSBpbmljaW8sIG8gbGEgZmVjaGEgYWN0dWFsIHNpIG5vIGhheSBmZWNoYSBkZSBpbmljaW9cbiAgICAgICAgY29uc3QgZmVjaGFJbmljaW9PYmogPSB0aGlzLm5vdGEuZmVjaGFJbmljaW8gXG4gICAgICAgICAgICA/IERhdGVUaW1lLmZyb21Gb3JtYXQodGhpcy5ub3RhLmZlY2hhSW5pY2lvLCAneXl5eS1NTS1kZCcpXG4gICAgICAgICAgICA6IERhdGVUaW1lLm5vdygpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZmVjaGFTdWdlcmlkYSA9IGZlY2hhSW5pY2lvT2JqLnBsdXMoeyBkYXlzOiAzMCB9KS50b0Zvcm1hdCgneXl5eS1NTS1kZCcpO1xuICAgICAgICBcbiAgICAgICAgLy8gVXNhbW9zIGxhIGZ1bmNpXHUwMEYzbiBwcm9tcHQgY29ycmVjdGFtZW50ZSBkZXNkZSBzdGF0aWNfZnVuY3Rpb25zXG4gICAgICAgIGNvbnN0IHByb21wdCA9IHRoaXMudHAuc3lzdGVtLnN0YXRpY19mdW5jdGlvbnMuZ2V0KFwicHJvbXB0XCIpO1xuICAgICAgICBjb25zdCBmZWNoYUZpbiA9IGF3YWl0IHByb21wdChcbiAgICAgICAgICAgIFwiRmVjaGEgZGUgZmluIGRlIGxhIGNhbXBhXHUwMEYxYSAoWVlZWS1NTS1ERCk6XCIsXG4gICAgICAgICAgICBmZWNoYVN1Z2VyaWRhLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgaWYgKGZlY2hhRmluID09PSBudWxsKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKFwiU2VsZWNjaVx1MDBGM24gZGUgZmVjaGEgZGUgZmluIGNhbmNlbGFkYS5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMubm90YS5mZWNoYUZpbiA9IGZlY2hhRmluO1xuICAgICAgICByZXR1cm4gZmVjaGFGaW47XG4gICAgfVxuXG4gICAgLy8gT2J0aWVuZSBsYSBwcmlvcmlkYWQgZGUgbGEgY2FtcGFcdTAwRjFhXG4gICAgYXN5bmMgZ2V0UHJpb3JpZGFkKCkge1xuICAgICAgICBjb25zdCBwcmlvcmlkYWRlcyA9IFtcIkJhamFcIiwgXCJNZWRpYVwiLCBcIkFsdGFcIl07XG4gICAgICAgIFxuICAgICAgICBjb25zdCBwcmlvcmlkYWQgPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihcbiAgICAgICAgICAgIHByaW9yaWRhZGVzLFxuICAgICAgICAgICAgcHJpb3JpZGFkZXMsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIFwiUHJpb3JpZGFkIGRlIGxhIGNhbXBhXHUwMEYxYTpcIlxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgaWYgKHByaW9yaWRhZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgbmV3IE5vdGljZShcIlNlbGVjY2lcdTAwRjNuIGRlIHByaW9yaWRhZCBjYW5jZWxhZGEuXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLm5vdGEucHJpb3JpZGFkID0gcHJpb3JpZGFkO1xuICAgICAgICByZXR1cm4gcHJpb3JpZGFkO1xuICAgIH1cblxuICAgIC8vIE9idGllbmUgbGEgVVJMIGRlIGxvcyBpbmRpY2Fkb3Jlc1xuICAgIGFzeW5jIGdldEluZGljYWRvcmVzKCkge1xuICAgICAgICAvLyBVc2Ftb3MgbGEgZnVuY2lcdTAwRjNuIHByb21wdCBjb3JyZWN0YW1lbnRlIGRlc2RlIHN0YXRpY19mdW5jdGlvbnNcbiAgICAgICAgY29uc3QgcHJvbXB0ID0gdGhpcy50cC5zeXN0ZW0uc3RhdGljX2Z1bmN0aW9ucy5nZXQoXCJwcm9tcHRcIik7XG4gICAgICAgIGNvbnN0IGluZGljYWRvcmVzID0gYXdhaXQgcHJvbXB0KFxuICAgICAgICAgICAgXCJVUkwgZGUgbG9zIGluZGljYWRvcmVzIGRlIGxhIGNhbXBhXHUwMEYxYTpcIixcbiAgICAgICAgICAgIFwiaHR0cHM6Ly9cIixcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChpbmRpY2Fkb3JlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgbmV3IE5vdGljZShcIkluZ3Jlc28gZGUgVVJMIGRlIGluZGljYWRvcmVzIGNhbmNlbGFkby5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMubm90YS5pbmRpY2Fkb3JlcyA9IGluZGljYWRvcmVzO1xuICAgICAgICByZXR1cm4gaW5kaWNhZG9yZXM7XG4gICAgfVxuXG4gICAgLy8gU29icmVzY3JpYmUgbGEgZnVuY2lcdTAwRjNuIGdldEFsaWFzZXMgcGFyYSBhanVzdGFybGEgYSBsb3MgcmVxdWVyaW1pZW50b3MgZXNwZWNcdTAwRURmaWNvc1xuICAgIGFzeW5jIGdldEFsaWFzZXMoKSB7XG4gICAgICAgIHRoaXMubm90YS5hbGlhc2VzID0gW107XG4gICAgICAgIHRoaXMubm90YS5hbGlhc2VzLnB1c2godGhpcy5ub3RhLnRpdHVsbyk7XG4gICAgICAgIHRoaXMubm90YS5hbGlhc2VzLnB1c2goYENQLSR7dGhpcy5ub3RhLnRpdHVsb31gKTtcbiAgICAgICAgLy8gRm9ybWF0bzogQ1AtaWRcbiAgICAgICAgdGhpcy5ub3RhLmFsaWFzZXMucHVzaChgQ1AtJHt0aGlzLm5vdGEuaWR9YCk7XG4gICAgICAgIHJldHVybiB0aGlzLm5vdGEuYWxpYXNlcztcbiAgICB9XG5cbiAgICAvLyBJbXBsZW1lbnRhY2lcdTAwRjNuIGRlIGdldFJlbmFtZSBwYXJhIGxhIGVzdHJ1Y3R1cmEgZGUgY2FycGV0YXMgYmFzYWRhIGVuIHRyaW1lc3RyZXNcbi8vIEltcGxlbWVudGFjaVx1MDBGM24gZGUgZ2V0UmVuYW1lIHBhcmEgbGEgZXN0cnVjdHVyYSBkZSBjYXJwZXRhcyBiYXNhZGEgZW4gdHJpbWVzdHJlc1xuYXN5bmMgZ2V0UmVuYW1lKCkge1xuICAgIC8vIEVsIHRyaW1lc3RyZSB2aWVuZSBjb24gZm9ybWF0byBbW3RyaW1lc3RyZV1dLCBhc1x1MDBFRCBxdWUgZXh0cmFlbW9zIGVsIHZhbG9yXG4gICAgY29uc3QgdHJpbWVzdHJlTWF0Y2ggPSB0aGlzLm5vdGEudHJpbWVzdHJlLm1hdGNoKC9cXFtcXFsoLio/KVxcXVxcXS8pO1xuICAgIGNvbnN0IHRyaW1lc3RyZSA9IHRyaW1lc3RyZU1hdGNoID8gdHJpbWVzdHJlTWF0Y2hbMV0gOiBcIlNpbi1UcmltZXN0cmVcIjtcbiAgICBcbiAgICAvLyBDb25zdHJ1aW1vcyBsYSBydXRhIGNvbiBsYSBlc3RydWN0dXJhIHNvbGljaXRhZGFcbiAgICBjb25zdCBiYXNlUGF0aCA9IFwiU3Vic2lzdGVtYXMvTWFya2V0aW5nL1Byb3llY3Rvc1wiO1xuICAgIGNvbnN0IGZvbGRlclBhdGggPSBgJHtiYXNlUGF0aH0vJHt0cmltZXN0cmV9YDtcbiAgICBcbiAgICAvLyBDcmVhbW9zIGxhIGNhcnBldGEgZGVsIHRyaW1lc3RyZSBzaSBubyBleGlzdGVcbiAgICBhd2FpdCBGaWVsZEhhbmRsZXJVdGlscy5jcmVhckNhcnBldGEoZm9sZGVyUGF0aCk7XG4gICAgXG4gICAgLy8gQ29uc3RydWltb3MgZWwgbm9tYnJlIGNvbXBsZXRvIGRlbCBhcmNoaXZvXG4gICAgY29uc3QgbmV3TmFtZSA9IGAke2ZvbGRlclBhdGh9LyR7dGhpcy5ub3RhLnRpdHVsb30ubWRgO1xuICAgIFxuICAgIGNvbnN0IGZpbGUgPSB0aGlzLnRwLmZpbGUuY29uZmlnLnRhcmdldF9maWxlO1xuICAgIGNvbnN0IGV4aXN0ZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgobmV3TmFtZSk7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKGV4aXN0ZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBub21icmVGaWxlID0gbmV3TmFtZS5zcGxpdChcIi9cIik7XG4gICAgICAgICAgICBjb25zdCBib3JyYXIgPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihcbiAgICAgICAgICAgICAgICBbXCJTb2JyZWVzY3JpYmlyIEFyY2hpdm8gQWN0dWFsXCIsIFwiRGV0ZW5lciBjcmVhY2lcdTAwRjNuIGRlbCBhcmNoaXZvLlwiXSxcbiAgICAgICAgICAgICAgICBbdHJ1ZSwgZmFsc2VdLFxuICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgYFx1MDBCRiR7bm9tYnJlRmlsZS5wb3AoKX0geWEgZXhpc3RlLiBRdVx1MDBFOSBkZXNlYXMgaGFjZXI/YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGJvcnJhcikge1xuICAgICAgICAgICAgICAgIGF3YWl0IGFwcC52YXVsdC5kZWxldGUoZXhpc3RlKTtcbiAgICAgICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGFwcC52YXVsdC5yZW5hbWUoZmlsZSwgbmV3TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQXJjaGl2byByZW5vbWJyYWRvIGNvbiBcdTAwRTl4aXRvLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIEFicmlyIGxhIG5vdGEgZW4gdW5hIG51ZXZhIHBlc3RhXHUwMEYxYVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBudWV2b0FyY2hpdm8gPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG5ld05hbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobnVldm9BcmNoaXZvIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGFwcC53b3Jrc3BhY2UuZ2V0TGVhZih0cnVlKS5vcGVuRmlsZShudWV2b0FyY2hpdm8pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3TmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ2FuY2VsYW5kbyBsYSBjcmVhY2lcdTAwRjNuIGRlbCBhcmNoaXZvLlwiKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcm9jZXNvIGNhbmNlbGFkbyBwb3IgZWwgdXN1YXJpby5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LnJlbmFtZShmaWxlLCBuZXdOYW1lKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFyY2hpdm8gcmVub21icmFkbyBjb24gXHUwMEU5eGl0by5cIik7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQWJyaXIgbGEgbm90YSBlbiB1bmEgbnVldmEgcGVzdGFcdTAwRjFhXG4gICAgICAgICAgICAgICAgY29uc3QgbnVldm9BcmNoaXZvID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChuZXdOYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAobnVldm9BcmNoaXZvIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgYXBwLndvcmtzcGFjZS5nZXRMZWFmKHRydWUpLm9wZW5GaWxlKG51ZXZvQXJjaGl2byk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBuZXdOYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIGNhbWJpYXIgZWwgbm9tYnJlXCIsIGVycm9yKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxufVxufSIsICIvLyBzcmMvbW9kdWxlcy9ub3RlTGlmZWN5Y2xlTWFuYWdlci9maWVsZEhhbmRsZXJzL0ZIIFN1YnNpc3RlbWFzL0VudHJlZ2FibGVGaWVsZEhhbmRsZXIudHNcbmltcG9ydCB7IE5vdGVGaWVsZEhhbmRsZXIgfSBmcm9tICcuLi9GSCBCYXNlL05vdGVGaWVsZEhhbmRsZXInO1xuaW1wb3J0IHsgRW50cmVnYWJsZUZpZWxkSGFuZGxlciB9IGZyb20gJy4uLy4uL0ludGVyZmFjZXMvRW50cmVnYWJsZUZpZWxkSGFuZGxlcic7XG5pbXBvcnQgeyBURmlsZSwgVEZvbGRlciwgTm90aWNlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgRmllbGRIYW5kbGVyVXRpbHMgfSBmcm9tICcuLi8uLi9GaWVsZEhhbmRsZXJVdGlscyc7XG5pbXBvcnQgeyBTZWxlY2Npb25Nb2RhbCB9IGZyb20gJy4uLy4uLy4uL21vZGFsZXMvc2VsZWNjaW9uTW9kYWwnO1xuaW1wb3J0IHsgU2VsZWNjaW9uTW9kYWxUYXJlYXMgfSBmcm9tICcuLi8uLi8uLi9tb2RhbGVzL3NlbGVjY2lvbk1vZGFsVGFyZWFzJztcbmltcG9ydCB7IGZ1enp5U2VsZWN0T3JDcmVhdGUgfSBmcm9tICcuLi8uLi8uLi9tb2RhbGVzL2Z1enp5U2VsZWN0T3JDcmVhdGUnO1xuaW1wb3J0IHsgU2VsZWNjaW9uTXVsdGlwbGVNb2RhbH0gZnJvbSAnLi4vLi4vLi4vbW9kYWxlcy9zZWxlY2Npb25NdWx0aXBsZU1vZGFsJztcbmltcG9ydCB7IFNwaW5uZXJNb2RhbCB9IGZyb20gJy4uLy4uLy4uL21vZGFsZXMvc3Bpbm5lck1vZGFsJztcbmltcG9ydCB7IERhdGVQaWNrZXJNb2RhbCB9IGZyb20gJy4uLy4uLy4uL21vZGFsZXMvZGF0ZVBpY2tlck1vZGFsJztcbmltcG9ydCB7IFBlZGlkb3NDbGllbnRlTW9kYWwgfSBmcm9tICcuLi8uLi8uLi9tb2RhbGVzL3BlZGlkb3NDbGllbnRlTW9kYWwnO1xuXG5leHBvcnQgY2xhc3MgRW50cmVnYWJsZUZpZWxkSGFuZGxlciBleHRlbmRzIE5vdGVGaWVsZEhhbmRsZXIgaW1wbGVtZW50cyBFbnRyZWdhYmxlRmllbGRIYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih0cDogYW55LCBpbmZvU3Vic2lzdGVtYTogYW55LCBwbHVnaW46IGFueSkge1xuICAgICAgICBzdXBlcih0cCwgaW5mb1N1YnNpc3RlbWEsIHBsdWdpbik7XG4gICAgfVxuICAgIFxuICAgICAgLy8gU29icmVzY3JpYmltb3MgZWwgbVx1MDBFOXRvZG8gZ2V0QXN1bnRvIHBhcmEgbWFuZWphciBOb3Rpb25JRFxuICAgICAgYXN5bmMgZ2V0QXN1bnRvKCk6IFByb21pc2U8eyBzaUFzdW50bzogYm9vbGVhbiwgbm9tYnJlOiBzdHJpbmdbXSB9PiB7IFxuICAgICAgICBsZXQgcGFkcmVzID0gW107XG4gICAgICAgIGxldCBhY3Rpdm8gPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcbiAgICAgICAgbGV0IHNpQXN1bnRvID0gZmFsc2U7XG4gICAgICAgIGxldCBub21icmUgPSBcIlwiO1xuICAgICAgICBsZXQgbm90YTtcbiAgICAgICAgXG4gICAgICAgIGlmIChhY3Rpdm8gIT0gbnVsbCkge1xuICAgICAgICAgICAgbm9tYnJlID0gYWN0aXZvLmJhc2VuYW1lO1xuICAgICAgICAgICAgbm90YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShhY3Rpdm8pO1xuICAgICAgICAgICAgLy8gQXNlZ3VyYXIgcXVlIG5vdGEuZnJvbnRtYXR0ZXIgZXhpc3RlIHkgYXNpZ25hciB1biBvYmpldG8gdmFjXHUwMEVEbyBhIGZpbGVcbiAgICAgICAgICAgIG5vdGEuZnJvbnRtYXR0ZXIgPSBub3RhLmZyb250bWF0dGVyIHx8IHt9O1xuICAgICAgICAgICAgbm90YS5mcm9udG1hdHRlci5maWxlID0ge307XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKG5vdGEuZnJvbnRtYXR0ZXIuZmlsZSwgYWN0aXZvKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcGFkcmVzLnVuc2hpZnQobm9tYnJlKTsgLy8gQVx1MDBGMWFkZSBlbCBub21icmUgYWwgaW5pY2lvIGRlbCBhcnJlZ2xvLCBkZXNwbGF6YW5kbyBsb3MgZGVtXHUwMEUxcyBlbGVtZW50b3NcbiAgICAgICAgICAgIHNpQXN1bnRvID0gYXdhaXQgdGhpcy5zdWdnZXN0ZXIoW1wiU2lcIiwgXCJOb1wiXSwgW3RydWUsIGZhbHNlXSwgdHJ1ZSwgbm9tYnJlICsgXCIgZXMgb3JpZ2VuIGRlIFwiICsgdGhpcy5ub3RhLnRpdHVsbyArIFwiP1wiKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHNpQXN1bnRvKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFzdW50b0RlZmluaWRvID0gdHJ1ZTsgLy8gUGFyYSBxdWUgbm8gZWplY3V0ZSBsYSBidXNxdWVkYSBkZSBBcmVhIFZpZGEsIEFyZWEgZGUgSW50ZXJcdTAwRTlzLCBwcm95ZWN0byBRIG8gR1REXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gVmVyaWZpY2Ftb3Mgc2kgZXhpc3RlIHVuIGNhbXBvIHF1ZSBjb21pZW5jZSBjb24gXCJOb3Rpb25JRC1cIiBlbiBlbCBmcm9udG1hdHRlclxuICAgICAgICAgICAgICAgIGxldCBub3Rpb25JRCA9IG51bGw7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbm90YS5mcm9udG1hdHRlcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJOb3Rpb25JRC1cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGlvbklEID0gbm90YS5mcm9udG1hdHRlcltrZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEVuY29udHJhZG8gTm90aW9uSUQ6ICR7bm90aW9uSUR9IGNvbiBjbGF2ZTogJHtrZXl9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBTaSBlbmNvbnRyYW1vcyB1biBOb3Rpb25JRCwgbG8gZ3VhcmRhbW9zIGVuIGVsIGNhbXBvIHByb3llY3RvXG4gICAgICAgICAgICAgICAgaWYgKG5vdGlvbklEKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0byA9IFtub3Rpb25JRF07XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBBc2lnbmFkbyBOb3Rpb25JRCBhbCBwcm95ZWN0bzogJHtub3Rpb25JRH1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IG5pdmVsO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAobm90YT8uZnJvbnRtYXR0ZXI/LnR5cGUpIHsgLy8gTGEgbm90YSBhY3RpdmEgZXMgdW5hOlxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiUEdURFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiUFFcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZFUklGSUNBQ0lPTiBERSBQUk9ZRUNUT1MgREUgUSBZIFBST1lFQ1RPIEdURFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGEuZnJvbnRtYXR0ZXI/LnR5cGUgPT09IFwiUFFcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENVQU5ETyBMQSBOT1RBIEFDVElWQSBFUyBVTiBQUS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9RID0gbm9tYnJlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZFUklGSUNBQ0lPTiBERSBQUk9ZRUNUT1NHVERcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbmljaWFsaXphbW9zIHRoaXMubm90YS5wcm95ZWN0b0dURCBjb24gdW4gdmFsb3IgcHJlZGV0ZXJtaW5hZG8gZGUgY2FkZW5hIHZhY1x1MDBFRGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9HVEQgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhbW9zIHNpIG5vdGEucHJveWVjdG9HVEQgZXhpc3RlIHkgZXMgdW4gYXJyZWdsb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmVnbG8sIGl0ZXJhbW9zIHNvYnJlIGNhZGEgZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnByb3llY3RvR1REID0gbm90YS5mcm9udG1hdHRlci5wcm95ZWN0b0dURC5tYXAoZWxlbWVudG8gPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90YS5mcm9udG1hdHRlci5wcm95ZWN0b0dURCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBleGlzdGUgcGVybyBubyBlcyB1biBhcnJlZ2xvLCBhcGxpY2Ftb3MgZWwgcmVnZXggZGlyZWN0YW1lbnRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b0dURCA9IG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgbm90YS5wcm95ZWN0b0dURCBubyBleGlzdGUsIHRoaXMubm90YS5wcm95ZWN0b0dURCB5YSBlc3RcdTAwRTEgZXN0YWJsZWNpZG8gZW4gXCJcIiBwb3IgZGVmZWN0b1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPYnRlbmVyIFByb3llY3RvUSB5IFByb3llY3RvIEdURCBjdWFuZG8gbGEgbm90YSBlcyBQcm95ZWN0b0dURC5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90YS5mcm9udG1hdHRlcj8udHlwZSA9PT0gXCJQR1REXCIpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENVQU5ETyBMQSBOT1RBIEFDVElWQSBFUyBVTiBHVEQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVkVSSUZJQ0FDSU9OIERFIFBST1lFQ1RPU0dURFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b0dURCA9IFtub21icmVdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm90YS5mcm9udG1hdHRlci5wcm95ZWN0b0dURCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXMgdW4gYXJyZWdsbywgdXRpbGl6YW1vcyBjb25jYXQgcGFyYSBhXHUwMEYxYWRpciBsb3MgZWxlbWVudG9zIHlhIHByb2Nlc2Fkb3MgY29uIGVsIHJlZ2V4IGFsIGFycmVnbG8gdGhpcy5ub3RhLnByb3llY3RvR1REXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b0dURCA9IHRoaXMubm90YS5wcm95ZWN0b0dURC5jb25jYXQobm90YS5mcm9udG1hdHRlci5wcm95ZWN0b0dURC5tYXAoZWxlbWVudG8gPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXhpc3RlIHBlcm8gbm8gZXMgdW4gYXJyZWdsbywgYXBsaWNhbW9zIGVsIHJlZ2V4IGRpcmVjdGFtZW50ZSB5IHVzYW1vcyBwdXNoIHBhcmEgYWdyZWdhcmxvIGEgdGhpcy5ub3RhLnByb3llY3RvR1REXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b0dURC5wdXNoKG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgbm90YS5wcm95ZWN0b0dURCBubyBleGlzdGUsIHRoaXMubm90YS5wcm95ZWN0b0dURCB5YSBlc3RcdTAwRTEgZXN0YWJsZWNpZG8gZW4gXCJcIiBwb3IgZGVmZWN0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b1EgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9RKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBlcyB1biBhcnJlZ2xvLCBpdGVyYW1vcyBzb2JyZSBjYWRhIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b1EgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvUS5tYXAoZWxlbWVudG8gPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90YS5mcm9udG1hdHRlci5wcm95ZWN0b1EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXhpc3RlIHBlcm8gbm8gZXMgdW4gYXJyZWdsbywgYXBsaWNhbW9zIGVsIHJlZ2V4IGRpcmVjdGFtZW50ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9RID0gbm90YS5mcm9udG1hdHRlci5wcm95ZWN0b1EucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT2J0ZW5lciBQcm95ZWN0b1EgeSBQcm95ZWN0byBHVEQgY3VhbmRvIGxhIG5vdGEgZXMgb3RyYSBjb3NhIHF1ZSBubyBlcyBwcm95ZWN0b1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEucHJveWVjdG9RID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhPy5mcm9udG1hdHRlcj8ucHJveWVjdG9RKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBlcyB1biBhcnJlZ2xvLCBpdGVyYW1vcyBzb2JyZSBjYWRhIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b1EgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvUS5tYXAoZWxlbWVudG8gPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRvLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LnByb3llY3RvUSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBleGlzdGUgcGVybyBubyBlcyB1biBhcnJlZ2xvLCBhcGxpY2Ftb3MgZWwgcmVnZXggZGlyZWN0YW1lbnRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b1EgPSBub3RhLmZyb250bWF0dGVyLnByb3llY3RvUS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b0dURCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmVyaWZpY2Ftb3Mgc2kgbm90YS5wcm95ZWN0b0dURCBleGlzdGUgeSBlcyB1biBhcnJlZ2xvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm90YT8uZnJvbnRtYXR0ZXI/LnByb3llY3RvR1REKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBlcyB1biBhcnJlZ2xvLCBpdGVyYW1vcyBzb2JyZSBjYWRhIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b0dURCA9IG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQubWFwKGVsZW1lbnRvID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50by5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vdGE/LmZyb250bWF0dGVyPy5wcm95ZWN0b0dURCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBleGlzdGUgcGVybyBubyBlcyB1biBhcnJlZ2xvLCBhcGxpY2Ftb3MgZWwgcmVnZXggZGlyZWN0YW1lbnRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5wcm95ZWN0b0dURCA9IG5vdGEuZnJvbnRtYXR0ZXIucHJveWVjdG9HVEQucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhbW9zIGFyZWFJbnRlcmVzIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub3RhPy5mcm9udG1hdHRlcj8uYXJlYUludGVyZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXMgdW4gYXJyZWdsbywgaXRlcmFtb3Mgc29icmUgY2FkYSBlbGVtZW50byAoZXhjbHV5ZW5kbyBlbCBwcmltZXIgZWxlbWVudG8geWEgYWdyZWdhZG8gcXVlIGVzIG5vdGEudGl0dWxvKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHkgYXBsaWNhbW9zIGVsIHJlZ2V4IGEgY2FkYSBlbGVtZW50by4gTHVlZ28gY29uY2F0ZW5hbW9zIGNvbiBlbCBhcnJheSBleGlzdGVudGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gdGhpcy5ub3RhLmFyZWFJbnRlcmVzLmNvbmNhdChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLm1hcChlbGVtZW50byA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50by5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5vIGVzIHVuIGFycmVnbG8sIHJldmlzYW1vcyBzaSBub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzIGV4aXN0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlcj8uYXJlYUludGVyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXhpc3RlLCBhcGxpY2Ftb3MgZWwgcmVnZXggeSBsbyBhXHUwMEYxYWRpbW9zIGNvbW8gc2VndW5kbyBlbGVtZW50b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYUludGVyZXMucHVzaChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhbW9zIEFyZWFWaWRhXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGE/LmZyb250bWF0dGVyPy5hcmVhVmlkYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVzIHVuIGFycmVnbG8sIHVzYSBlbCBwcmltZXIgZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gbm90YS5mcm9udG1hdHRlci5hcmVhVmlkYVswXS5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVzIHVuIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBObyBlc3RcdTAwRTEgZGVmaW5pZG8gbyBlc3RcdTAwRTEgdmFjXHUwMEVEb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IFwiTm8gZXMgZGUgbmluZ1x1MDBGQW4gQXJlYSBkZSBWaWRhXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERFRklOSVIgTklWRUxQXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDb21wcnVlYmEgc2kgbml2ZWxBSSBleGlzdGUgeSBubyBlcyBOYU4gZGVzcHVcdTAwRTlzIGRlIGludGVudGFyIGNvbnZlcnRpcmxvIGEgZW50ZXJvXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4ocGFyc2VJbnQobm90YT8uZnJvbnRtYXR0ZXI/Lm5pdmVsUCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbml2ZWwgPSBwYXJzZUludChub3RhLmZyb250bWF0dGVyLm5pdmVsUCkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBuaXZlbEFJIG5vIGV4aXN0ZSBvIHN1IGNvbnZlcnNpXHUwMEYzbiBhIGVudGVybyByZXN1bHRhIGVuIE5hTiwgZXN0YWJsZWNlIG5pdmVsIGEgMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pdmVsID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5uaXZlbFAgPSBuaXZlbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7IC8vIFBHVEQgeSBQUVxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiQUlcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZFUklGSUNBQ0lPTiBERSBBUkVBIERFIElOVEVSRVNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlcj8udHlwZSA9PT0gXCJBSVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gW25vdGEuZnJvbnRtYXR0ZXIuZmlsZS5iYXNlbmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW5pY2lhbGl6YW1vcyB0aGlzLm5vdGEuYXJlYUludGVyZXMgY29uIG5vdGEudGl0dWxvIGNvbW8gZWwgcHJpbWVyIGVsZW1lbnRvLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVzdGUgc29sbyBhcGxpY2EgcGFyYSBjdWFuZG8gZXN0b3kgY29uc3RydXllbmRvIGRlc2RlIEFyZWEgZGUgSW50ZXJlcyBvdHJhIEFyZWEgZGUgSW50ZXJlcy5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhbW9zIHNpIG5vdGEuYXJlYUludGVyZXMgZXMgdW4gYXJyZWdsb1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm90YS5mcm9udG1hdHRlcj8uYXJlYUludGVyZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZXMgdW4gYXJyZWdsbywgaXRlcmFtb3Mgc29icmUgY2FkYSBlbGVtZW50byAoZXhjbHV5ZW5kbyBlbCBwcmltZXIgZWxlbWVudG8geWEgYWdyZWdhZG8gcXVlIGVzIG5vdGEudGl0dWxvKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHkgYXBsaWNhbW9zIGVsIHJlZ2V4IGEgY2FkYSBlbGVtZW50by4gTHVlZ28gY29uY2F0ZW5hbW9zIGNvbiBlbCBhcnJheSBleGlzdGVudGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFJbnRlcmVzID0gdGhpcy5ub3RhLmFyZWFJbnRlcmVzLmNvbmNhdChub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzLm1hcChlbGVtZW50byA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50by5yZXBsYWNlKC9cXFtcXFtcXHMqfFxccypcXF1cXF0vZywgJycpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5vIGVzIHVuIGFycmVnbG8sIHJldmlzYW1vcyBzaSBub3RhLmZyb250bWF0dGVyLmFyZWFJbnRlcmVzIGV4aXN0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RhPy5mcm9udG1hdHRlci5hcmVhSW50ZXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBleGlzdGUsIGFwbGljYW1vcyBlbCByZWdleCB5IGxvIGFcdTAwRjFhZGltb3MgY29tbyBzZWd1bmRvIGVsZW1lbnRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhSW50ZXJlcy5wdXNoKG5vdGEuZnJvbnRtYXR0ZXIuYXJlYUludGVyZXMucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgbm8gZXMgYXJyZWdsbyBuaSBzdHJpbmcsIGFyZWFJbnRlcmVzIGVzIGVsIGFyZWEgaW50ZXJlcyBxdWUgZXN0XHUwMEUxIGVuIHRpdHVsby4gICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgbm90YS5mcm9udG1hdHRlci5hcmVhSW50ZXJlcyBubyBleGlzdGUsIHRoaXMubm90YS5hcmVhSW50ZXJlcyB5YSB0ZW5kclx1MDBFMSBub3RhLnRpdHVsbyBjb21vIHN1IFx1MDBGQW5pY28gZWxlbWVudG9cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkFWXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBWRVJJRklDQUNJT04gREUgQVJFQSBERSBWSURBXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90YT8uZnJvbnRtYXR0ZXI/LmFyZWFWaWRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm90YS5mcm9udG1hdHRlci5hcmVhVmlkYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXMgdW4gYXJyZWdsbywgdXNhIGVsIHByaW1lciBlbGVtZW50b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYXJlYVZpZGEgPSBub3RhLmZyb250bWF0dGVyLmFyZWFWaWRhWzBdLnJlcGxhY2UoL1xcW1xcW1xccyp8XFxzKlxcXVxcXS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygbm90YS5mcm9udG1hdHRlci5hcmVhVmlkYSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXMgdW4gc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90YS5hcmVhVmlkYSA9IG5vdGEuZnJvbnRtYXR0ZXIuYXJlYVZpZGEucmVwbGFjZSgvXFxbXFxbXFxzKnxcXHMqXFxdXFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIGVzdFx1MDBFMSBkZWZpbmlkbyBvIGVzdFx1MDBFMSB2YWNcdTAwRURvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFyZWFWaWRhID0gXCJObyBlcyBkZSBuaW5nXHUwMEZBbiBBcmVhIGRlIFZpZGFcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBvbmllbmRvIHNpIEFzdW50byBlbiBmYWxzZSBwYXJhIGxhcyBub3RhcyBlc3RydWN0dXJhIEFJIHkgQVYuIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGE/LmZyb250bWF0dGVyPy50eXBlID09PSBcIkFJXCIgfHwgbm90YT8uZnJvbnRtYXR0ZXI/LnR5cGUgPT09IFwiQVZcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpQXN1bnRvID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERFRklOSVIgTklWRUxQXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDb21wcnVlYmEgc2kgbml2ZWxBSSBleGlzdGUgeSBubyBlcyBOYU4gZGVzcHVcdTAwRTlzIGRlIGludGVudGFyIGNvbnZlcnRpcmxvIGEgZW50ZXJvXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4ocGFyc2VJbnQobm90YS5mcm9udG1hdHRlcj8ubml2ZWxQKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaXZlbCA9IHBhcnNlSW50KG5vdGEuZnJvbnRtYXR0ZXIubml2ZWxQKSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5pdmVsQUkgbm8gZXhpc3RlIG8gc3UgY29udmVyc2lcdTAwRjNuIGEgZW50ZXJvIHJlc3VsdGEgZW4gTmFOLCBlc3RhYmxlY2Ugbml2ZWwgYSAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbml2ZWwgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLm5pdmVsUCA9IG5pdmVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHsgLy8gYWN0aXZhIG5vIGVzIG9yaWdlbiBkZSBDcmVhbmRvIFJSIC0gUEdURCAtIFBRICBpZihzaUFzdW50bylcblxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgeyAvLyBhY3Rpdm8gPT0gbnVsbFxuICAgICAgICAgICAgc2lBc3VudG8gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzaUFzdW50bywgbm9tYnJlOiBwYWRyZXMgfVxuICAgIH1cbiAgICBcbiAgICBhc3luYyBnZXRUcmltZXN0cmUoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgLy8gVmVyaWZpY2FyIHNpIGVzIHVuYSBjb250aW51YWNpXHUwMEYzbiBkZXNkZSB1bmEgQ2FtcGFcdTAwRjFhXG4gICAgICAgIGNvbnN0IGFjdGl2byA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgaWYgKGFjdGl2bykge1xuICAgICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoYWN0aXZvKT8uZnJvbnRtYXR0ZXI7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChtZXRhZGF0YSAmJiBtZXRhZGF0YS50eXBlID09PSAnQ3AnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXNDb250aW51YWNpb24gPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihcbiAgICAgICAgICAgICAgICAgICAgW1wiU1x1MDBFRFwiLCBcIk5vXCJdLFxuICAgICAgICAgICAgICAgICAgICBbdHJ1ZSwgZmFsc2VdLFxuICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYFx1MDBCRkVzdGUgZW50cmVnYWJsZSBlcyBwYXJ0ZSBkZSBsYSBjYW1wYVx1MDBGMWEgJHthY3Rpdm8uYmFzZW5hbWV9P2BcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICAgICAgICAgIGlmIChlc0NvbnRpbnVhY2lvbiAmJiBtZXRhZGF0YS50cmltZXN0cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhLnRyaW1lc3RyZSA9IG1ldGFkYXRhLnRyaW1lc3RyZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1ldGFkYXRhLnRyaW1lc3RyZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFNpIG5vIGVzIGNvbnRpbnVhY2lcdTAwRjNuLCBidXNjYXIgdHJpbWVzdHJlcyBkaXNwb25pYmxlc1xuICAgICAgICBjb25zdCB0cmltZXN0cmVzID0gYXdhaXQgRmllbGRIYW5kbGVyVXRpbHMuZmluZE1haW5GaWxlc1dpdGhTdGF0ZShcIlRRXCIsIG51bGwsIHRoaXMucGx1Z2luKTtcbiAgICAgICAgY29uc3QgdHJpbWVzdHJlID0gYXdhaXQgdGhpcy5zdWdnZXN0ZXIoXG4gICAgICAgICAgICB0cmltZXN0cmVzLm1hcCh0ID0+IHQuZmlsZS5iYXNlbmFtZSksXG4gICAgICAgICAgICB0cmltZXN0cmVzLm1hcCh0ID0+IHQuZmlsZS5iYXNlbmFtZSksXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIFwiU2VsZWNjaW9uYSBlbCB0cmltZXN0cmUgcGFyYSBlc3RlIGVudHJlZ2FibGU6XCJcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGlmICghdHJpbWVzdHJlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEZWJlIHNlbGVjY2lvbmFyIHVuIHRyaW1lc3RyZSBwYXJhIGNvbnRpbnVhclwiKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5ub3RhLnRyaW1lc3RyZSA9IGBbWyR7dHJpbWVzdHJlfV1dYDtcbiAgICAgICAgcmV0dXJuIGBbWyR7dHJpbWVzdHJlfV1dYDtcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgZ2V0VGlwbygpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCB0aXBvc0VudHJlZ2FibGUgPSBbXG4gICAgICAgICAgICBcIkJsb2dcIiwgXG4gICAgICAgICAgICBcIkNvcnJlbyBFbGVjdHJcdTAwRjNuaWNvXCIsIFxuICAgICAgICAgICAgXCJEaXNlXHUwMEYxbyBQZXJzb25hbGl6YWRvXCIsXG4gICAgICAgICAgICBcIkVudHJlbmFtaWVudG9cIixcbiAgICAgICAgICAgIFwiRXN0dWRpbyBkZSBjYXNvXCIsXG4gICAgICAgICAgICBcIkhpc3RvcmlhXCIsXG4gICAgICAgICAgICBcIkluZm9ncmFmXHUwMEVEYVwiLFxuICAgICAgICAgICAgXCJQYXV0YVwiLFxuICAgICAgICAgICAgXCJQb2RjYXN0XCIsXG4gICAgICAgICAgICBcIlBvc3RcIixcbiAgICAgICAgICAgIFwiUmVlbFwiLFxuICAgICAgICAgICAgXCJUYXJlYSBBdmFuemFkYVwiLFxuICAgICAgICAgICAgXCJWaWRlb1wiLFxuICAgICAgICAgICAgXCJXZWJpbmFyXCJcbiAgICAgICAgXTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRpcG8gPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihcbiAgICAgICAgICAgIHRpcG9zRW50cmVnYWJsZSxcbiAgICAgICAgICAgIHRpcG9zRW50cmVnYWJsZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgXCJTZWxlY2Npb25hIGVsIHRpcG8gZGUgZW50cmVnYWJsZTpcIlxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgaWYgKCF0aXBvKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEZWJlIHNlbGVjY2lvbmFyIHVuIHRpcG8gZGUgZW50cmVnYWJsZSBwYXJhIGNvbnRpbnVhclwiKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5ub3RhLnRpcG8gPSB0aXBvO1xuICAgICAgICByZXR1cm4gdGlwbztcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgZ2V0Q2FuYWxlcygpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgICAgIGNvbnN0IHRvZG9zTG9zQ2FuYWxlcyA9IFtcbiAgICAgICAgICAgIFwiV2hhdHNhcHBcIixcbiAgICAgICAgICAgIFwiSW5zdGFncmFtXCIsXG4gICAgICAgICAgICBcIkZhY2Vib29rXCIsXG4gICAgICAgICAgICBcIlRpayBUb2tcIixcbiAgICAgICAgICAgIFwiU2l0aW8gV2ViXCIsXG4gICAgICAgICAgICBcIkVtYWlsIG1hcmtldGluZ1wiLFxuICAgICAgICAgICAgXCJZb3V0dWJlXCIsXG4gICAgICAgICAgICBcIlR3aXR0ZXJcIixcbiAgICAgICAgICAgIFwiTGlua2VkSW5cIixcbiAgICAgICAgICAgIFwiT3Ryb1wiXG4gICAgICAgIF07XG4gICAgICAgIFxuICAgICAgICAvLyBQcmVzZWxlY2Npb25hciBjYW5hbGVzIHNlZ1x1MDBGQW4gZWwgdGlwb1xuICAgICAgICBsZXQgY2FuYWxlc1ByZXNlbGVjY2lvbmFkb3M6IHN0cmluZ1tdID0gW107XG4gICAgICAgIFxuICAgICAgICBzd2l0Y2ggKHRoaXMubm90YS50aXBvKSB7XG4gICAgICAgICAgICBjYXNlIFwiSGlzdG9yaWFcIjpcbiAgICAgICAgICAgICAgICBjYW5hbGVzUHJlc2VsZWNjaW9uYWRvcyA9IFtcIldoYXRzYXBwXCIsIFwiSW5zdGFncmFtXCIsIFwiRmFjZWJvb2tcIl07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiUG9zdFwiOlxuICAgICAgICAgICAgICAgIGNhbmFsZXNQcmVzZWxlY2Npb25hZG9zID0gW1wiSW5zdGFncmFtXCIsIFwiRmFjZWJvb2tcIl07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiUmVlbFwiOlxuICAgICAgICAgICAgICAgIGNhbmFsZXNQcmVzZWxlY2Npb25hZG9zID0gW1wiSW5zdGFncmFtXCIsIFwiVGlrIFRva1wiLCBcIllvdXR1YmVcIl07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiVmlkZW9cIjpcbiAgICAgICAgICAgICAgICBjYW5hbGVzUHJlc2VsZWNjaW9uYWRvcyA9IFtcIllvdXR1YmVcIl07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiQmxvZ1wiOlxuICAgICAgICAgICAgICAgIGNhbmFsZXNQcmVzZWxlY2Npb25hZG9zID0gW1wiU2l0aW8gV2ViXCIsIFwiTGlua2VkSW5cIl07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiUGF1dGFcIjpcbiAgICAgICAgICAgICAgICBjYW5hbGVzUHJlc2VsZWNjaW9uYWRvcyA9IFtcIkluc3RhZ3JhbVwiLCBcIkZhY2Vib29rXCJdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIkNvcnJlbyBFbGVjdHJcdTAwRjNuaWNvXCI6XG4gICAgICAgICAgICAgICAgY2FuYWxlc1ByZXNlbGVjY2lvbmFkb3MgPSBbXCJFbWFpbCBtYXJrZXRpbmdcIl07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiSW5mb2dyYWZcdTAwRURhXCI6XG4gICAgICAgICAgICAgICAgY2FuYWxlc1ByZXNlbGVjY2lvbmFkb3MgPSBbXCJJbnN0YWdyYW1cIiwgXCJGYWNlYm9va1wiXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJFc3R1ZGlvIGRlIGNhc29cIjpcbiAgICAgICAgICAgICAgICBjYW5hbGVzUHJlc2VsZWNjaW9uYWRvcyA9IFtcIkxpbmtlZEluXCJdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvLyBQYXJhIGxvcyBvdHJvcyB0aXBvcyBubyBoYXkgcHJlc2VsZWNjaW9uYWRvcyBlc3BlY1x1MDBFRGZpY29zXG4gICAgICAgICAgICAgICAgY2FuYWxlc1ByZXNlbGVjY2lvbmFkb3MgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXIgb3BjaW9uZXMgcGFyYSBlbCBzZWxlY3RvciBtXHUwMEZBbHRpcGxlXG4gICAgICAgIGNvbnN0IG9wY2lvbmVzID0gdG9kb3NMb3NDYW5hbGVzLm1hcChjYW5hbCA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5vbWJyZTogY2FuYWwsXG4gICAgICAgICAgICAgICAgc2VsZWNjaW9uYWRvOiBjYW5hbGVzUHJlc2VsZWNjaW9uYWRvcy5pbmNsdWRlcyhjYW5hbClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gTW9zdHJhciBzZWxlY2NpXHUwMEYzbiBtXHUwMEZBbHRpcGxlIHBlcnNvbmFsaXphZGFcbiAgICAgICAgY29uc3QgbXVsdGlTZWxlY3RNb2RhbCA9IG5ldyBTZWxlY2Npb25NdWx0aXBsZU1vZGFsKHRoaXMucGx1Z2luLmFwcCwgb3BjaW9uZXMsIFwiU2VsZWNjaW9uYSBsb3MgY2FuYWxlcyBwYXJhIGVzdGUgZW50cmVnYWJsZVwiKTtcbiAgICAgICAgY29uc3QgY2FuYWxlc1NlbGVjY2lvbmFkb3MgPSBhd2FpdCBtdWx0aVNlbGVjdE1vZGFsLm9wZW5BbmRBd2FpdFNlbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFjYW5hbGVzU2VsZWNjaW9uYWRvcyB8fCBjYW5hbGVzU2VsZWNjaW9uYWRvcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIC8vIFByb3BvcmNpb25hIGFsIG1lbm9zIGxvcyBjYW5hbGVzIHByZXNlbGVjY2lvbmFkb3Mgc2kgZWwgdXN1YXJpbyBubyBzZWxlY2Npb25hIG5pbmd1bm9cbiAgICAgICAgICAgIHRoaXMubm90YS5jYW5hbGVzID0gY2FuYWxlc1ByZXNlbGVjY2lvbmFkb3M7XG4gICAgICAgICAgICByZXR1cm4gY2FuYWxlc1ByZXNlbGVjY2lvbmFkb3M7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMubm90YS5jYW5hbGVzID0gY2FuYWxlc1NlbGVjY2lvbmFkb3M7XG4gICAgICAgIHJldHVybiBjYW5hbGVzU2VsZWNjaW9uYWRvcztcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgZ2V0U3RhdHVzKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IGVzdGFkb3MgPSBbXG4gICAgICAgICAgICBcIlNpbiBlbXBlemFyXCIsXG4gICAgICAgICAgICBcIkRpc2VcdTAwRjFhbmRvIC0gRW4gRGVzYXJyb2xsb1wiLFxuICAgICAgICAgICAgXCJSZXZpc2lcdTAwRjNuIEludGVybmFcIixcbiAgICAgICAgICAgIFwiUmV2aXNpXHUwMEYzbiBDbGllbnRlXCIsXG4gICAgICAgICAgICBcIlByb2dyYW1hY2lcdTAwRjNuIFBhcnJpbGxhXCIsXG4gICAgICAgICAgICBcIlB1YmxpY2Fkb1wiLFxuICAgICAgICAgICAgXCJDb21wbGV0YWRvXCIsXG4gICAgICAgICAgICBcIkFyY2hpdmFkb1wiXG4gICAgICAgIF07XG4gICAgICAgIFxuICAgICAgICBjb25zdCBzdGF0dXMgPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihcbiAgICAgICAgICAgIGVzdGFkb3MsXG4gICAgICAgICAgICBlc3RhZG9zLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBcIlNlbGVjY2lvbmEgZWwgZXN0YWRvIGFjdHVhbCBkZWwgZW50cmVnYWJsZTpcIlxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFzdGF0dXMpIHtcbiAgICAgICAgICAgIC8vIFZhbG9yIHBvciBkZWZlY3RvXG4gICAgICAgICAgICB0aGlzLm5vdGEuc3RhdHVzID0gXCJTaW4gZW1wZXphclwiO1xuICAgICAgICAgICAgcmV0dXJuIFwiU2luIGVtcGV6YXJcIjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5ub3RhLnN0YXR1cyA9IHN0YXR1cztcbiAgICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgZ2V0UHJpb3JpZGFkKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IHByaW9yaWRhZGVzID0gW1wiQmFqYVwiLCBcIk1lZGlhXCIsIFwiQWx0YVwiXTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHByaW9yaWRhZCA9IGF3YWl0IHRoaXMuc3VnZ2VzdGVyKFxuICAgICAgICAgICAgcHJpb3JpZGFkZXMsXG4gICAgICAgICAgICBwcmlvcmlkYWRlcyxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgXCJTZWxlY2Npb25hIGxhIHByaW9yaWRhZCBkZWwgZW50cmVnYWJsZTpcIlxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFwcmlvcmlkYWQpIHtcbiAgICAgICAgICAgIC8vIFZhbG9yIHBvciBkZWZlY3RvXG4gICAgICAgICAgICB0aGlzLm5vdGEucHJpb3JpZGFkID0gXCJNZWRpYVwiO1xuICAgICAgICAgICAgcmV0dXJuIFwiTWVkaWFcIjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5ub3RhLnByaW9yaWRhZCA9IHByaW9yaWRhZDtcbiAgICAgICAgcmV0dXJuIHByaW9yaWRhZDtcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgZ2V0UHVibGljYWNpb24oKSB7XG4gICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IERhdGVQaWNrZXJNb2RhbCh0aGlzLnBsdWdpbi5hcHApO1xuICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBzZWxlY3RlZERhdGUgPSBhd2FpdCBtb2RhbC53YWl0Rm9ySW5wdXQoKTtcbiAgICAgICAgaWYgKHNlbGVjdGVkRGF0ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7IC8vIFNpIHNlIGNhbmNlbGEsIGRldm9sdmVyIHN0cmluZyB2YWNcdTAwRURvXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMubm90YS5wdWJsaWNhY2lvbiA9IHNlbGVjdGVkRGF0ZTtcbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkRGF0ZTtcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgZ2V0UGllemFOdWJlKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IHVybCA9IGF3YWl0IHRoaXMucHJvbXB0KFxuICAgICAgICAgICAgXCJVUkwgZGUgbGEgcGllemEgZW4gbGEgbnViZSAoR29vZ2xlIERyaXZlLCBEcm9wYm94LCBldGMuKTpcIixcbiAgICAgICAgICAgIFwiaHR0cHM6Ly9cIixcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMubm90YS5waWV6YU51YmUgPSB1cmwgfHwgXCJcIjtcbiAgICAgICAgcmV0dXJuIHVybCB8fCBcIlwiO1xuICAgIH1cbiAgICBcbiAgICBhc3luYyBnZXRVcmxDYW52YSgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCB1cmwgPSBhd2FpdCB0aGlzLnByb21wdChcbiAgICAgICAgICAgIFwiVVJMIGRlbCBkaXNlXHUwMEYxbyBlbiBDYW52YTpcIixcbiAgICAgICAgICAgIFwiaHR0cHM6Ly9cIixcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMubm90YS51cmxDYW52YSA9IHVybCB8fCBcIlwiO1xuICAgICAgICByZXR1cm4gdXJsIHx8IFwiXCI7XG4gICAgfVxuICAgIFxuICAgIGFzeW5jIGdldEhpdHMoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICAgICAgLy8gSW1wbGVtZW50YW1vcyB1biBzZWxlY3RvciBudW1cdTAwRTlyaWNvIHRpcG8gc3Bpbm5lclxuICAgICAgICBjb25zdCBzcGlubmVyTW9kYWwgPSBuZXcgU3Bpbm5lck1vZGFsKHRoaXMucGx1Z2luLmFwcCwgMSwgMSwgMTAwMCk7XG4gICAgICAgIGNvbnN0IGhpdHMgPSBhd2FpdCBzcGlubmVyTW9kYWwub3BlbkFuZEF3YWl0U2VsZWN0aW9uKCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoaGl0cyA9PT0gbnVsbCB8fCBoaXRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIFZhbG9yIHBvciBkZWZlY3RvXG4gICAgICAgICAgICB0aGlzLm5vdGEuaGl0cyA9IDE7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5ub3RhLmhpdHMgPSBoaXRzO1xuICAgICAgICByZXR1cm4gaGl0cztcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgZ2V0UGVkaWRvc0FsQ2xpZW50ZSgpOiBQcm9taXNlPHsgcGVkaWRvczogc3RyaW5nLCBwZW5kaWVudGVzOiBib29sZWFuIH0+IHtcbiAgICAgICAgLy8gSW1wbGVtZW50YW1vcyB1biBtb2RhbCBwZXJzb25hbGl6YWRvIGNvbiB0ZXh0YXJlYSB5IGNoZWNrYm94XG4gICAgICAgIGNvbnN0IHBlZGlkb3NNb2RhbCA9IG5ldyBQZWRpZG9zQ2xpZW50ZU1vZGFsKHRoaXMucGx1Z2luLmFwcCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdGFkbyA9IGF3YWl0IHBlZGlkb3NNb2RhbC5vcGVuQW5kQXdhaXRTZWxlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGlmICghcmVzdWx0YWRvKSB7XG4gICAgICAgICAgICB0aGlzLm5vdGEucGVkaWRvc0FsQ2xpZW50ZSA9IFwiXCI7XG4gICAgICAgICAgICB0aGlzLm5vdGEucGVuZGllbnRlc0NsaWVudGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiB7IHBlZGlkb3M6IFwiXCIsIHBlbmRpZW50ZXM6IGZhbHNlIH07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMubm90YS5wZWRpZG9zQWxDbGllbnRlID0gcmVzdWx0YWRvLnBlZGlkb3M7XG4gICAgICAgIHRoaXMubm90YS5wZW5kaWVudGVzQ2xpZW50ZSA9IHJlc3VsdGFkby5wZW5kaWVudGVzO1xuICAgICAgICByZXR1cm4gcmVzdWx0YWRvO1xuICAgIH1cbiAgICBcbiAgICAvLyBNXHUwMEU5dG9kbyBwYXJhIGRldGVybWluYXIgc2kgZWwgZW50cmVnYWJsZSBlcyBmYWN0dXJhYmxlIGJhc2FkbyBlbiBxdWlcdTAwRTluIGxvIHJlYWxpemFyXHUwMEUxXG4gICAgYXN5bmMgZ2V0RmFjdHVyYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgLy8gT3BjaW9uZXMgZGlzcG9uaWJsZXNcbiAgICAgICAgY29uc3Qgb3BjaW9uZXMgPSBbXCJVbiB0ZXJjZXJvXCIsIFwiQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cIl07XG4gICAgICAgIGNvbnN0IHZhbG9yZXMgPSBbZmFsc2UsIHRydWVdO1xuICAgICAgICBcbiAgICAgICAgLy8gVXNhbW9zIGVsIG1cdTAwRTl0b2RvIHN1Z2dlc3RlciBuYXRpdm8sIHF1ZSB5YSBtYW5lamEgbGEgbmF2ZWdhY2lcdTAwRjNuIHBvciB0ZWNsYWRvXG4gICAgICAgIGNvbnN0IHJlYWxpemFkb3IgPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihcbiAgICAgICAgICAgIG9wY2lvbmVzLFxuICAgICAgICAgICAgdmFsb3JlcyxcbiAgICAgICAgICAgIGZhbHNlLCAvLyBObyBlcyBtdWx0aXNlbGVjY2lcdTAwRjNuXG4gICAgICAgICAgICBcIlx1MDBCRlF1aVx1MDBFOW4gcmVhbGl6YXJcdTAwRTEgZXN0ZSBlbnRyZWdhYmxlP1wiXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICAvLyBTaSBlbCB1c3VhcmlvIGNhbmNlbGEsIGFzdW1pbW9zIFwiVW4gdGVyY2Vyb1wiIChubyBmYWN0dXJhYmxlKVxuICAgICAgICBpZiAocmVhbGl6YWRvciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5ub3RhLmZhY3R1cmFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5ub3RhLmZhY3R1cmFibGUgPSByZWFsaXphZG9yO1xuICAgICAgICByZXR1cm4gcmVhbGl6YWRvcjtcbiAgICB9XG4gICAgYXN5bmMgZ2V0QWxpYXNlcygpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgICAgIGNvbnN0IGFsaWFzZXMgPSBbXTtcbiAgICAgICAgXG4gICAgICAgICAgXG4gICAgICAgIC8vIEZvcm1hdG86IE5vbWJyZVxuICAgICAgICBhbGlhc2VzLnB1c2goYCR7dGhpcy5ub3RhLnRpdHVsb31gKTtcbiAgICAgICBcbiAgICAgICAgLy8gRm9ybWF0bzogRU1rdC1Ob21icmVcbiAgICAgICAgYWxpYXNlcy5wdXNoKGBFTWt0LSR7dGhpcy5ub3RhLnRpdHVsb31gKTtcbiAgICAgICBcbiAgICAgICAgIC8vIEZvcm1hdG86IEVNa3QtaWRcbiAgICAgICAgIGFsaWFzZXMucHVzaChgRU1rdC0ke3RoaXMubm90YS5pZH1gKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMubm90YS5hbGlhc2VzID0gYWxpYXNlcztcbiAgICAgICAgcmV0dXJuIGFsaWFzZXM7XG4gICAgfVxuICAgIFxuLy8gSW1wbGVtZW50YWNpXHUwMEYzbiBkZSBnZXRSZW5hbWUgcGFyYSBsYSBlc3RydWN0dXJhIGRlIGNhcnBldGFzIGJhc2FkYSBlbiB0cmltZXN0cmVzXG5cbmFzeW5jIGdldFJlbmFtZSgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIC8vIENyZWFyIGxhIGVzdHJ1Y3R1cmEgZGUgY2FycGV0YXMgcG9yIHRyaW1lc3RyZVxuICAgIGNvbnN0IGZvbGRlckJhc2UgPSBgJHt0aGlzLmluZm9TdWJzaXN0ZW1hLmZvbGRlcn1gO1xuICAgIC8vIEFwbGljYXIgZmlsdHJvIHBhcmEgZWxpbWluYXIgW1sgeSBdXVxuICAgIGNvbnN0IHRyaW1lc3RyZUxpbXBpbyA9IHRoaXMubm90YS50cmltZXN0cmUucmVwbGFjZSgvXFxbXFxbfFxcXVxcXS9nLCAnJykudHJpbSgpOyAgICAgICAgIFxuICAgIGNvbnN0IGZvbGRlclRyaW1lc3RyZSA9IGAke2ZvbGRlckJhc2V9LyR7dHJpbWVzdHJlTGltcGlvfWA7XG5cbiAgICAvLyBBc2VndXJhciBxdWUgbGFzIGNhcnBldGFzIGV4aXN0YW5cbiAgICBhd2FpdCBGaWVsZEhhbmRsZXJVdGlscy5jcmVhckNhcnBldGEoZm9sZGVyQmFzZSk7XG4gICAgYXdhaXQgRmllbGRIYW5kbGVyVXRpbHMuY3JlYXJDYXJwZXRhKGZvbGRlclRyaW1lc3RyZSk7XG5cbiAgICAvLyBSdXRhIGNvbXBsZXRhIGRlbCBhcmNoaXZvXG4gICAgY29uc3QgbmV3TmFtZSA9IGAke2ZvbGRlclRyaW1lc3RyZX0vJHt0aGlzLm5vdGEudGl0dWxvfS5tZGA7XG5cbiAgICBjb25zdCBmaWxlID0gdGhpcy50cC5maWxlLmNvbmZpZy50YXJnZXRfZmlsZTtcbiAgICBjb25zdCBleGlzdGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG5ld05hbWUpO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKGV4aXN0ZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBub21icmVGaWxlID0gbmV3TmFtZS5zcGxpdChcIi9cIik7XG4gICAgICAgICAgICBjb25zdCBib3JyYXIgPSBhd2FpdCB0aGlzLnN1Z2dlc3RlcihcbiAgICAgICAgICAgICAgICBbXCJTb2JyZWVzY3JpYmlyIGFyY2hpdm8gYWN0dWFsXCIsIFwiRGV0ZW5lciBjcmVhY2lcdTAwRjNuIGRlbCBhcmNoaXZvXCJdLFxuICAgICAgICAgICAgICAgIFt0cnVlLCBmYWxzZV0sXG4gICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICBgXHUwMEJGJHtub21icmVGaWxlLnBvcCgpfSB5YSBleGlzdGUuIFx1MDBCRlF1XHUwMEU5IGRlc2VhcyBoYWNlcj9gXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAoYm9ycmFyKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LmRlbGV0ZShleGlzdGUpO1xuICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgYXBwLnZhdWx0LnJlbmFtZShmaWxlLCBuZXdOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBcmNoaXZvIHJlbm9tYnJhZG8gY29uIFx1MDBFOXhpdG8uXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFicmlyIGVsIGFyY2hpdm8gZW4gdW5hIG51ZXZhIHBlc3RhXHUwMEYxYVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdGaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChuZXdOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0ZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVhZiA9IGFwcC53b3Jrc3BhY2UuZ2V0TGVhZih0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGxlYWYub3BlbkZpbGUobmV3RmlsZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld05hbWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNhbmNlbGFuZG8gbGEgY3JlYWNpXHUwMEYzbiBkZWwgYXJjaGl2by5cIik7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvY2VzbyBjYW5jZWxhZG8gcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGFwcC52YXVsdC5yZW5hbWUoZmlsZSwgbmV3TmFtZSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBcmNoaXZvIHJlbm9tYnJhZG8gY29uIFx1MDBFOXhpdG8uXCIpO1xuXG4gICAgICAgICAgICAgICAgLy8gQWJyaXIgZWwgYXJjaGl2byBlbiB1bmEgbnVldmEgcGVzdGFcdTAwRjFhXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3RmlsZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgobmV3TmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKG5ld0ZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsZWFmID0gYXBwLndvcmtzcGFjZS5nZXRMZWFmKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBsZWFmLm9wZW5GaWxlKG5ld0ZpbGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3TmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhbCBjYW1iaWFyIGVsIG5vbWJyZVwiLCBlcnJvcik7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbn1cblxufSIsICIvLyBzcmMvbW9kdWxlcy9tb2RhbGVzL3NlbGVjY2lvbk11bHRpcGxlTW9kYWwudHNcbmltcG9ydCB7IEFwcCwgTW9kYWwsIE5vdGljZSB9IGZyb20gJ29ic2lkaWFuJztcblxuaW50ZXJmYWNlIE9wY2lvbkNhbmFsIHtcbiAgICBub21icmU6IHN0cmluZztcbiAgICBzZWxlY2Npb25hZG86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBTZWxlY2Npb25NdWx0aXBsZU1vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIHByaXZhdGUgb3BjaW9uZXM6IE9wY2lvbkNhbmFsW107XG4gICAgcHJpdmF0ZSByZXNvbHZlcjogKHZhbHVlOiBzdHJpbmdbXSB8IG51bGwpID0+IHZvaWQ7XG4gICAgcHJpdmF0ZSBjaGVja2JveGVzOiBIVE1MSW5wdXRFbGVtZW50W10gPSBbXTtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgb3BjaW9uZXM6IE9wY2lvbkNhbmFsW10sIHRpdHVsbzogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgICAgIHRoaXMub3BjaW9uZXMgPSBvcGNpb25lcztcbiAgICAgICAgdGhpcy50aXRsZUVsLnNldFRleHQodGl0dWxvKTtcbiAgICB9XG4gICAgXG4gICAgb25PcGVuKCkge1xuICAgICAgICBjb25zdCB7Y29udGVudEVsfSA9IHRoaXM7XG4gICAgICAgIFxuICAgICAgICAvLyBDcmVhciB1biBjb250ZW5lZG9yIHBhcmEgbG9zIGNoZWNrYm94ZXNcbiAgICAgICAgY29uc3QgY29udGVuZWRvciA9IGNvbnRlbnRFbC5jcmVhdGVFbCgnZGl2Jywge2NsczogJ3NlbGVjY2lvbi1tdWx0aXBsZS1jb250YWluZXInfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBDcmVhciB1biBjaGVja2JveCBwYXJhIGNhZGEgb3BjaVx1MDBGM25cbiAgICAgICAgdGhpcy5vcGNpb25lcy5mb3JFYWNoKG9wY2lvbiA9PiB7XG4gICAgICAgICAgICBjb25zdCB3cmFwcGVyID0gY29udGVuZWRvci5jcmVhdGVFbCgnZGl2Jywge2NsczogJ2NoZWNrYm94LXdyYXBwZXInfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrYm94ID0gd3JhcHBlci5jcmVhdGVFbCgnaW5wdXQnLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2NoZWNrYm94JyxcbiAgICAgICAgICAgICAgICBhdHRyOiB7IGlkOiBgb3BjaW9uLSR7b3BjaW9uLm5vbWJyZX1gIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2hlY2tib3guY2hlY2tlZCA9IG9wY2lvbi5zZWxlY2Npb25hZG87XG4gICAgICAgICAgICB0aGlzLmNoZWNrYm94ZXMucHVzaChjaGVja2JveCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdyYXBwZXIuY3JlYXRlRWwoJ2xhYmVsJywge1xuICAgICAgICAgICAgICAgIHRleHQ6IG9wY2lvbi5ub21icmUsXG4gICAgICAgICAgICAgICAgYXR0cjogeyBmb3I6IGBvcGNpb24tJHtvcGNpb24ubm9tYnJlfWAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQm90b25lcyBkZSBhY2NpXHUwMEYzblxuICAgICAgICBjb25zdCBib3RvbmVzQ29udGFpbmVyID0gY29udGVudEVsLmNyZWF0ZUVsKCdkaXYnLCB7Y2xzOiAnbW9kYWwtYnV0dG9uLWNvbnRhaW5lcid9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHNlbGVjY2lvbmFyVG9kb3NCdG4gPSBib3RvbmVzQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7dGV4dDogJ1NlbGVjY2lvbmFyIHRvZG9zJ30pO1xuICAgICAgICBzZWxlY2Npb25hclRvZG9zQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jaGVja2JveGVzLmZvckVhY2goY2IgPT4gY2IuY2hlY2tlZCA9IHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGRlc2VsZWNjaW9uYXJUb2Rvc0J0biA9IGJvdG9uZXNDb250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHt0ZXh0OiAnRGVzZWxlY2Npb25hciB0b2Rvcyd9KTtcbiAgICAgICAgZGVzZWxlY2Npb25hclRvZG9zQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jaGVja2JveGVzLmZvckVhY2goY2IgPT4gY2IuY2hlY2tlZCA9IGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBjb25maXJtYXJCdG4gPSBjb250ZW50RWwuY3JlYXRlRWwoJ2J1dHRvbicsIHtcbiAgICAgICAgICAgIHRleHQ6ICdDb25maXJtYXInLFxuICAgICAgICAgICAgY2xzOiAnbW9kLWN0YSdcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbmZpcm1hckJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlybWFyU2VsZWNjaW9uKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQVx1MDBGMWFkaXIgZXN0aWxvc1xuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ3N0eWxlJywge1xuICAgICAgICAgICAgdGV4dDogYFxuICAgICAgICAgICAgICAgIC5zZWxlY2Npb24tbXVsdGlwbGUtY29udGFpbmVyIHtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcbiAgICAgICAgICAgICAgICAgICAgbWF4LWhlaWdodDogMzAwcHg7XG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC5jaGVja2JveC13cmFwcGVyIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogOHB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAuY2hlY2tib3gtd3JhcHBlciBsYWJlbCB7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiA4cHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC5tb2RhbC1idXR0b24tY29udGFpbmVyIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBidXR0b24ubW9kLWN0YSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMXJlbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBjb25maXJtYXJTZWxlY2Npb24oKSB7XG4gICAgICAgIGNvbnN0IHNlbGVjY2lvbmFkb3M6IHN0cmluZ1tdID0gW107XG4gICAgICAgIFxuICAgICAgICB0aGlzLmNoZWNrYm94ZXMuZm9yRWFjaCgoY2hlY2tib3gsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoY2hlY2tib3guY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIHNlbGVjY2lvbmFkb3MucHVzaCh0aGlzLm9wY2lvbmVzW2luZGV4XS5ub21icmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGlmIChzZWxlY2Npb25hZG9zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgbmV3IE5vdGljZShcIkRlYmVzIHNlbGVjY2lvbmFyIGFsIG1lbm9zIHVuIGNhbmFsXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIHRoaXMucmVzb2x2ZXIoc2VsZWNjaW9uYWRvcyk7XG4gICAgfVxuICAgIFxuICAgIG9uQ2xvc2UoKSB7XG4gICAgICAgIGNvbnN0IHtjb250ZW50RWx9ID0gdGhpcztcbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XG4gICAgfVxuICAgIFxuICAgIG9wZW5BbmRBd2FpdFNlbGVjdGlvbigpOiBQcm9taXNlPHN0cmluZ1tdIHwgbnVsbD4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZXIgPSByZXNvbHZlO1xuICAgICAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuIiwgImltcG9ydCB7IE1vZGFsLCBBcHAgfSBmcm9tICdvYnNpZGlhbic7XG5cbmV4cG9ydCBjbGFzcyBTcGlubmVyTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgcHJpdmF0ZSBpbml0aWFsVmFsdWU6IG51bWJlcjtcbiAgICBwcml2YXRlIGN1cnJlbnRWYWx1ZTogbnVtYmVyO1xuICAgIHByaXZhdGUgcmVzb2x2ZXI6ICgodmFsdWU6IG51bWJlciB8IG51bGwpID0+IHZvaWQpIHwgbnVsbCA9IG51bGw7XG4gICAgcHJpdmF0ZSBudW1iZXJEaXNwbGF5OiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIGluaXRpYWxWYWx1ZTogbnVtYmVyID0gMSwgbWF4OiBudW1iZXIgPSAxMDApIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICAgICAgY29uc3QgbWluID0gMTtcbiAgICAgICAgdGhpcy5pbml0aWFsVmFsdWUgPSBNYXRoLm1heChtaW4sIE1hdGgubWluKG1heCwgaW5pdGlhbFZhbHVlKSk7XG4gICAgICAgIHRoaXMuY3VycmVudFZhbHVlID0gdGhpcy5pbml0aWFsVmFsdWU7XG4gICAgfVxuXG4gICAgb25PcGVuKCkge1xuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGVudEVsLmFkZENsYXNzKCdudW1iZXItc2VsZWN0b3ItbW9kYWwnKTtcblxuICAgICAgICAvLyBDb250ZW5lZG9yIHByaW5jaXBhbFxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBjb250ZW50RWwuY3JlYXRlRGl2KHsgY2xzOiAnbnVtYmVyLXNlbGVjdG9yLWNvbnRhaW5lcicgfSk7XG5cbiAgICAgICAgLy8gVFx1MDBFRHR1bG9cbiAgICAgICAgY29udGFpbmVyLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ1x1MDBCRkN1XHUwMEUxbnRvcyBIaXRzIHJlcHJlc2VudGEgZXN0ZSBlbnRyZWdhYmxlPycgfSk7XG5cbiAgICAgICAgLy8gQ29udGVuZWRvciBkZSBjb250cm9sZXNcbiAgICAgICAgY29uc3QgY29udHJvbHNDb250YWluZXIgPSBjb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiAnY29udHJvbHMtY29udGFpbmVyJyB9KTtcblxuICAgICAgICAvLyBCb3RcdTAwRjNuIGRlIGRlY3JlbWVudG9cbiAgICAgICAgY29uc3QgZGVjcmVtZW50QnRuID0gY29udHJvbHNDb250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgXG4gICAgICAgICAgICB0ZXh0OiAnXHUyNUIyJywgXG4gICAgICAgICAgICBjbHM6ICdpbmNyZW1lbnQtYnRuJyBcbiAgICAgICAgfSk7XG4gICAgICAgIGRlY3JlbWVudEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuY2hhbmdlVmFsdWUoMSkpO1xuXG4gICAgICAgIC8vIERpc3BsYXkgZGUgblx1MDBGQW1lcm9cbiAgICAgICAgdGhpcy5udW1iZXJEaXNwbGF5ID0gY29udHJvbHNDb250YWluZXIuY3JlYXRlRWwoJ2RpdicsIHsgXG4gICAgICAgICAgICB0ZXh0OiB0aGlzLmN1cnJlbnRWYWx1ZS50b1N0cmluZygpLCBcbiAgICAgICAgICAgIGNsczogJ251bWJlci1kaXNwbGF5JyBcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQm90XHUwMEYzbiBkZSBpbmNyZW1lbnRvXG4gICAgICAgIGNvbnN0IGluY3JlbWVudEJ0biA9IGNvbnRyb2xzQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IFxuICAgICAgICAgICAgdGV4dDogJ1x1MjVCQycsIFxuICAgICAgICAgICAgY2xzOiAnZGVjcmVtZW50LWJ0bicgXG4gICAgICAgIH0pO1xuICAgICAgICBpbmNyZW1lbnRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLmNoYW5nZVZhbHVlKC0xKSk7XG5cbiAgICAgICAgLy8gQm90XHUwMEYzbiBkZSBjb25maXJtYWNpXHUwMEYzblxuICAgICAgICBjb25zdCBjb25maXJtQnRuID0gY29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IFxuICAgICAgICAgICAgdGV4dDogJ0NvbmZpcm1hcicsIFxuICAgICAgICAgICAgY2xzOiAnY29uZmlybS1idG4nIFxuICAgICAgICB9KTtcbiAgICAgICAgY29uZmlybUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuY29uZmlybSgpKTtcblxuICAgICAgICAvLyBCb3RcdTAwRjNuIGRlIGNhbmNlbGFyXG4gICAgICAgIGNvbnN0IGNhbmNlbEJ0biA9IGNvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywgeyBcbiAgICAgICAgICAgIHRleHQ6ICdDYW5jZWxhcicsIFxuICAgICAgICAgICAgY2xzOiAnY2FuY2VsLWJ0bicgXG4gICAgICAgIH0pO1xuICAgICAgICBjYW5jZWxCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLmNhbmNlbCgpKTtcblxuICAgICAgICAvLyBBXHUwMEYxYWRpciBlc3RpbG9zIENTU1xuICAgICAgICBjb25zdCBzdHlsZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgc3R5bGVFbC5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgICAubnVtYmVyLXNlbGVjdG9yLW1vZGFsIHtcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogMjBweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5udW1iZXItc2VsZWN0b3ItY29udGFpbmVyIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBnYXA6IDE1cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuY29udHJvbHMtY29udGFpbmVyIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgZ2FwOiAxNXB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLm51bWJlci1kaXNwbGF5IHtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDI0cHg7XG4gICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDUwcHg7XG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmluY3JlbWVudC1idG4sIC5kZWNyZW1lbnQtYnRuIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lO1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XG4gICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmNvbmZpcm0tYnRuLCAuY2FuY2VsLWJ0biB7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwIDEwcHg7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogMTBweCAxNXB4O1xuICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsKTtcbiAgICB9XG5cbiAgICBvbkNsb3NlKCkge1xuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XG4gICAgICAgIGlmICh0aGlzLnJlc29sdmVyICYmIHRoaXMuY3VycmVudFZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmVyKG51bGwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjaGFuZ2VWYWx1ZShkaXJlY3Rpb246IG51bWJlcikge1xuICAgICAgICBpZiAoIXRoaXMubnVtYmVyRGlzcGxheSkgcmV0dXJuO1xuICAgIFxuICAgICAgICBsZXQgbmV3VmFsdWUgPSB0aGlzLmN1cnJlbnRWYWx1ZTtcbiAgICBcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA+IDApIHsgLy8gSW5jcmVtZW50YXJcbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSA8IDEpIHtcbiAgICAgICAgICAgICAgICAvLyBEZSAwLjMzIGEgMC41IHkgZGUgMC41IGEgMVxuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gMC4zMykge1xuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IDAuNTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5ld1ZhbHVlID09PSAwLjUpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gU2kgeWEgZXMgMSBvIG1heW9yLCBpbmNyZW1lbnRhIGRlIDEgZW4gMVxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gbmV3VmFsdWUgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA8IDApIHsgLy8gRGVjcmVtZW50YXJcbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSA+IDEpIHtcbiAgICAgICAgICAgICAgICAvLyBTaSBlcyBtYXlvciBhIDEsIGRlY3JlbWVudGEgZGUgMSBlbiAxXG4gICAgICAgICAgICAgICAgbmV3VmFsdWUgPSBuZXdWYWx1ZSAtIDE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5ld1ZhbHVlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gRGUgMSBwYXNhIGEgMC41XG4gICAgICAgICAgICAgICAgbmV3VmFsdWUgPSAwLjU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5ld1ZhbHVlID09PSAwLjUpIHtcbiAgICAgICAgICAgICAgICAvLyBEZSAwLjUgcGFzYSBhIDAuMzNcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IDAuMzM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE5vIHNlIHBlcm1pdGUgYmFqYXIgZGUgMC4zM1xuICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gMC4zMztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIFxuICAgICAgICB0aGlzLmN1cnJlbnRWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICB0aGlzLm51bWJlckRpc3BsYXkudGV4dENvbnRlbnQgPSBuZXdWYWx1ZS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY29uZmlybSgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVzb2x2ZXIpIHtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZXIodGhpcy5jdXJyZW50VmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVzb2x2ZXIpIHtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZXIobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cblxuICAgIG9wZW5BbmRBd2FpdFNlbGVjdGlvbigpOiBQcm9taXNlPG51bWJlciB8IG51bGw+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmVyID0gcmVzb2x2ZTtcbiAgICAgICAgICAgIHRoaXMub3BlbigpO1xuICAgICAgICB9KTtcbiAgICB9XG59IiwgIi8vIHNyYy9tb2R1bGVzL21vZGFsZXMvZGF0ZVBpY2tlck1vZGFsLnRzXG5pbXBvcnQgeyBNb2RhbCwgQXBwIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICdsdXhvbic7XG5cbmV4cG9ydCBjbGFzcyBEYXRlUGlja2VyTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgcHJpdmF0ZSByZXNvbHZlcjogKHZhbHVlOiBzdHJpbmcgfCBudWxsKSA9PiB2b2lkO1xuICAgIHByaXZhdGUgZGF0ZUlucHV0OiBIVE1MSW5wdXRFbGVtZW50O1xuICAgIHByaXZhdGUgZm9ybWF0OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgaW5pdGlhbERhdGU/OiBzdHJpbmcsIGZvcm1hdDogc3RyaW5nID0gJ3l5eXktTU0tZGQnKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgICAgIHRoaXMuZm9ybWF0ID0gZm9ybWF0O1xuICAgIH1cblxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG4gICAgICAgIFxuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnUXVlIGRcdTAwRURhIHNlIHZhIGEgcHVibGljYXIgbGEgcGllemE/JyB9KTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZGF0ZUlucHV0ID0gY29udGVudEVsLmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ2RhdGUnIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gU2kgaGF5IHVuYSBmZWNoYSBpbmljaWFsLCBlc3RhYmxlY2VybGFcbiAgICAgICAgaWYgKHRoaXMuaW5pdGlhbERhdGUpIHtcbiAgICAgICAgICAgIC8vIENvbnZlcnRpciBkZXNkZSBlbCBmb3JtYXRvIGVzcGVjaWZpY2FkbyBhIGZvcm1hdG8gSVNPIHBhcmEgaW5wdXQgZGF0ZVxuICAgICAgICAgICAgY29uc3QgZGF0ZSA9IERhdGVUaW1lLmZyb21Gb3JtYXQodGhpcy5pbml0aWFsRGF0ZSwgdGhpcy5mb3JtYXQpO1xuICAgICAgICAgICAgdGhpcy5kYXRlSW5wdXQudmFsdWUgPSBkYXRlLnRvSVNPRGF0ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVXNhciBsYSBmZWNoYSBhY3R1YWxcbiAgICAgICAgICAgIHRoaXMuZGF0ZUlucHV0LnZhbHVlID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGJ1dHRvbkNvbnRhaW5lciA9IGNvbnRlbnRFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdidXR0b24tY29udGFpbmVyJyB9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGNhbmNlbEJ1dHRvbiA9IGJ1dHRvbkNvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnQ2FuY2VsYXInIH0pO1xuICAgICAgICBjYW5jZWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmVyKG51bGwpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGNvbmZpcm1CdXR0b24gPSBidXR0b25Db250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ0NvbmZpcm1hcicgfSk7XG4gICAgICAgIGNvbmZpcm1CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZERhdGUgPSB0aGlzLmRhdGVJbnB1dC52YWx1ZTtcbiAgICAgICAgICAgIC8vIENvbnZlcnRpciBkZSBmb3JtYXRvIElTTyBhIGZvcm1hdG8gcHJlZmVyaWRvXG4gICAgICAgICAgICBjb25zdCBmb3JtYXR0ZWREYXRlID0gRGF0ZVRpbWUuZnJvbUlTTyhzZWxlY3RlZERhdGUpLnRvRm9ybWF0KHRoaXMuZm9ybWF0KTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZXIoZm9ybWF0dGVkRGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gRXN0aWxvcyBiXHUwMEUxc2ljb3NcbiAgICAgICAgYnV0dG9uQ29udGFpbmVyLnN0eWxlLm1hcmdpblRvcCA9ICcyMHB4JztcbiAgICAgICAgYnV0dG9uQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgICAgIGJ1dHRvbkNvbnRhaW5lci5zdHlsZS5qdXN0aWZ5Q29udGVudCA9ICdmbGV4LWVuZCc7XG4gICAgICAgIGJ1dHRvbkNvbnRhaW5lci5zdHlsZS5nYXAgPSAnMTBweCc7XG4gICAgfVxuXG4gICAgb25DbG9zZSgpIHtcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xuICAgIH1cblxuICAgIHdhaXRGb3JJbnB1dCgpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmVyID0gcmVzb2x2ZTtcbiAgICAgICAgfSk7XG4gICAgfVxufSIsICJpbXBvcnQgeyBBcHAsIE1vZGFsIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5leHBvcnQgY2xhc3MgUGVkaWRvc0NsaWVudGVNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgICBwcml2YXRlIHJlc29sdmVyOiAodmFsdWU6IHsgcGVkaWRvczogc3RyaW5nLCBwZW5kaWVudGVzOiBib29sZWFuIH0gfCBudWxsKSA9PiB2b2lkO1xuICAgIHByaXZhdGUgdGV4dGFyZWE6IEhUTUxUZXh0QXJlYUVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBjaGVja2JveDogSFRNTElucHV0RWxlbWVudDtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCkge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgIH1cbiAgICBcbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgICAgICBjb250ZW50RWwuZW1wdHkoKTtcbiAgICAgICAgY29udGVudEVsLmFkZENsYXNzKCdwZWRpZG9zLWNsaWVudGUtbW9kYWwnKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFRcdTAwRUR0dWxvXG4gICAgICAgIHRoaXMudGl0bGVFbC5zZXRUZXh0KFwiUGVkaWRvcyBhbCBjbGllbnRlXCIpO1xuICAgICAgICBcbiAgICAgICAgLy8gQ29udGVuZWRvciBwcmluY2lwYWxcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gY29udGVudEVsLmNyZWF0ZURpdih7IGNsczogJ3BlZGlkb3MtY2xpZW50ZS1jb250YWluZXInIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gVFx1MDBFRHR1bG8gZGVzY3JpcHRpdm9cbiAgICAgICAgY29udGFpbmVyLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ1x1MDBCRkhheSBhbGdvIHF1ZSBzZSBkZWJhIHBlZGlyIGFsIGNsaWVudGU/JyB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFx1MDBDMXJlYSBkZSB0ZXh0byBwYXJhIGxvcyBwZWRpZG9zXG4gICAgICAgIHRoaXMudGV4dGFyZWEgPSBjb250YWluZXIuY3JlYXRlRWwoJ3RleHRhcmVhJywge1xuICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgIHJvd3M6ICc2JyxcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ0VzY3JpYmUgYXF1XHUwMEVEIHR1cyBwZWRpZG9zIGFsIGNsaWVudGUuLi4nXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQ29udGVuZWRvciBkZWwgY2hlY2tib3ggcGVyc29uYWxpemFkb1xuICAgICAgICBjb25zdCBjaGVja2JveENvbnRhaW5lciA9IGNvbnRhaW5lci5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdjdXN0b20tY2hlY2tib3gtY29udGFpbmVyJyB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIENoZWNrYm94IG9jdWx0byAocGFyYSBmdW5jaW9uYWxpZGFkKVxuICAgICAgICB0aGlzLmNoZWNrYm94ID0gY2hlY2tib3hDb250YWluZXIuY3JlYXRlRWwoJ2lucHV0Jywge1xuICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdjaGVja2JveCcsXG4gICAgICAgICAgICAgICAgaWQ6ICdwZW5kaWVudGVzLWNoZWNrYm94JyxcbiAgICAgICAgICAgICAgICBjbGFzczogJ2hpZGRlbi1jaGVja2JveCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBDaGVja2JveCB2aXN1YWwgcGVyc29uYWxpemFkb1xuICAgICAgICBjb25zdCBjdXN0b21DaGVja2JveCA9IGNoZWNrYm94Q29udGFpbmVyLmNyZWF0ZUVsKCdkaXYnLCB7IFxuICAgICAgICAgICAgY2xzOiAnY3VzdG9tLWNoZWNrYm94J1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIExhYmVsIHBhcmEgZWwgY2hlY2tib3hcbiAgICAgICAgY29uc3QgY2hlY2tib3hMYWJlbCA9IGNoZWNrYm94Q29udGFpbmVyLmNyZWF0ZUVsKCdsYWJlbCcsIHtcbiAgICAgICAgICAgIHRleHQ6ICdNYXJjYXIgY29tbyBwZW5kaWVudGUgZGVsIGNsaWVudGUnLFxuICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgIGZvcjogJ3BlbmRpZW50ZXMtY2hlY2tib3gnLFxuICAgICAgICAgICAgICAgIGNsYXNzOiAnY2hlY2tib3gtbGFiZWwnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQXV0by1hY3RpdmFyIGVsIGNoZWNrYm94IGN1YW5kbyBzZSBlc2NyaWJlIGVuIGVsIHRleHRhcmVhXG4gICAgICAgIHRoaXMudGV4dGFyZWEuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy50ZXh0YXJlYS52YWx1ZS50cmltKCkgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja2JveC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjdXN0b21DaGVja2JveC5jbGFzc0xpc3QuYWRkKCdjaGVja2VkJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGN1c3RvbUNoZWNrYm94LmNsYXNzTGlzdC5yZW1vdmUoJ2NoZWNrZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBIYWNlciBxdWUgZWwgY2hlY2tib3ggcGVyc29uYWxpemFkbyByZXNwb25kYSBhIGxvcyBjbGljc1xuICAgICAgICBjdXN0b21DaGVja2JveC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tib3guY2hlY2tlZCA9ICF0aGlzLmNoZWNrYm94LmNoZWNrZWQ7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGVja2JveC5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgY3VzdG9tQ2hlY2tib3guY2xhc3NMaXN0LmFkZCgnY2hlY2tlZCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjdXN0b21DaGVja2JveC5jbGFzc0xpc3QucmVtb3ZlKCdjaGVja2VkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gVGFtYmlcdTAwRTluIGhhY2VyIHF1ZSBlbCBsYWJlbCBhY3RpdmUvZGVzYWN0aXZlIGVsIGNoZWNrYm94XG4gICAgICAgIGNoZWNrYm94TGFiZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrYm94LmNoZWNrZWQgPSAhdGhpcy5jaGVja2JveC5jaGVja2VkO1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tib3guY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIGN1c3RvbUNoZWNrYm94LmNsYXNzTGlzdC5hZGQoJ2NoZWNrZWQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3VzdG9tQ2hlY2tib3guY2xhc3NMaXN0LnJlbW92ZSgnY2hlY2tlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIENvbnRlbmVkb3IgZGUgYm90b25lc1xuICAgICAgICBjb25zdCBidXR0b25Db250YWluZXIgPSBjb250YWluZXIuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAnYnV0dG9uLWNvbnRhaW5lcicgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBCb3RcdTAwRjNuIGRlIGNhbmNlbGFyXG4gICAgICAgIGNvbnN0IGNhbmNlbGFyQnRuID0gYnV0dG9uQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7XG4gICAgICAgICAgICB0ZXh0OiAnQ2FuY2VsYXInLFxuICAgICAgICAgICAgY2xzOiAnbW9kLXNlY29uZGFyeSdcbiAgICAgICAgfSk7XG4gICAgICAgIGNhbmNlbGFyQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5jYW5jZWwoKSk7XG4gICAgICAgIFxuICAgICAgICAvLyBCb3RcdTAwRjNuIGRlIGNvbmZpcm1hY2lcdTAwRjNuXG4gICAgICAgIGNvbnN0IGNvbmZpcm1hckJ0biA9IGJ1dHRvbkNvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywge1xuICAgICAgICAgICAgdGV4dDogJ0NvbmZpcm1hcicsXG4gICAgICAgICAgICBjbHM6ICdtb2QtY3RhJ1xuICAgICAgICB9KTtcbiAgICAgICAgY29uZmlybWFyQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5jb25maXJtKCkpO1xuICAgICAgICBcbiAgICAgICAgLy8gQXBsaWNhbW9zIGVzdGlsb3MgZW4gbFx1MDBFRG5lYSBwYXJhIGdhcmFudGl6YXIgcXVlIGZ1bmNpb25lblxuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ3N0eWxlJywge1xuICAgICAgICAgICAgdGV4dDogYFxuICAgICAgICAgICAgICAgIC5wZWRpZG9zLWNsaWVudGUtbW9kYWwgLnBlZGlkb3MtY2xpZW50ZS1jb250YWluZXIge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgICAgICAgICAgICBnYXA6IDEycHg7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDE2cHg7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAucGVkaWRvcy1jbGllbnRlLW1vZGFsIGgzIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDAgMCA4cHggMDtcbiAgICAgICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLnBlZGlkb3MtY2xpZW50ZS1tb2RhbCB0ZXh0YXJlYSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICBtaW4taGVpZ2h0OiAxMjBweDtcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiB2ZXJ0aWNhbDtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogOHB4O1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxLjQ7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogOHB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvKiBFc3RpbG8gcGFyYSBlbCBjb250ZW5lZG9yIGRlbCBjaGVja2JveCBwZXJzb25hbGl6YWRvICovXG4gICAgICAgICAgICAgICAgLnBlZGlkb3MtY2xpZW50ZS1tb2RhbCAuY3VzdG9tLWNoZWNrYm94LWNvbnRhaW5lciB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDRweCAwO1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA4cHg7XG4gICAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLyogT2N1bHRhciBlbCBjaGVja2JveCByZWFsICovXG4gICAgICAgICAgICAgICAgLnBlZGlkb3MtY2xpZW50ZS1tb2RhbCAuaGlkZGVuLWNoZWNrYm94IHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMDtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8qIENyZWFyIHVuIGNoZWNrYm94IHBlcnNvbmFsaXphZG8gKi9cbiAgICAgICAgICAgICAgICAucGVkaWRvcy1jbGllbnRlLW1vZGFsIC5jdXN0b20tY2hlY2tib3gge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMThweDtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxOHB4O1xuICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjODg4O1xuICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZC1wcmltYXJ5LCAjZmZmKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLyogRXN0aWxvIHBhcmEgY3VhbmRvIGVzdFx1MDBFMSBtYXJjYWRvIC0gY3JlYXIgdW5hIFggKi9cbiAgICAgICAgICAgICAgICAucGVkaWRvcy1jbGllbnRlLW1vZGFsIC5jdXN0b20tY2hlY2tib3guY2hlY2tlZDo6YmVmb3JlLFxuICAgICAgICAgICAgICAgIC5wZWRpZG9zLWNsaWVudGUtbW9kYWwgLmN1c3RvbS1jaGVja2JveC5jaGVja2VkOjphZnRlciB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAzcHg7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTJweDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tdGV4dC1ub3JtYWwsICMzMzMpO1xuICAgICAgICAgICAgICAgICAgICB0b3A6IDJweDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLnBlZGlkb3MtY2xpZW50ZS1tb2RhbCAuY3VzdG9tLWNoZWNrYm94LmNoZWNrZWQ6OmJlZm9yZSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IDlweDtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAucGVkaWRvcy1jbGllbnRlLW1vZGFsIC5jdXN0b20tY2hlY2tib3guY2hlY2tlZDo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiA5cHg7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8qIEVzdGlsbyBwYXJhIGxhIGV0aXF1ZXRhIGRlbCBjaGVja2JveCAqL1xuICAgICAgICAgICAgICAgIC5wZWRpZG9zLWNsaWVudGUtbW9kYWwgLmNoZWNrYm94LWxhYmVsIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAucGVkaWRvcy1jbGllbnRlLW1vZGFsIC5idXR0b24tY29udGFpbmVyIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICAgICAgZ2FwOiAxMnB4O1xuICAgICAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiA4cHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC5wZWRpZG9zLWNsaWVudGUtbW9kYWwgLmJ1dHRvbi1jb250YWluZXIgYnV0dG9uIHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogNnB4IDEycHg7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGBcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgY29uZmlybSgpIHtcbiAgICAgICAgLy8gT2J0ZW5lbW9zIGxvcyB2YWxvcmVzIGFjdHVhbGVzXG4gICAgICAgIGNvbnN0IHBlZGlkb3MgPSB0aGlzLnRleHRhcmVhLnZhbHVlLnRyaW0oKTtcbiAgICAgICAgY29uc3QgcGVuZGllbnRlcyA9IHRoaXMuY2hlY2tib3guY2hlY2tlZDtcbiAgICAgICAgXG4gICAgICAgIC8vIEd1YXJkYW1vcyB5IFwibGltcGlhbW9zXCIgZWwgcmVzb2x2ZXIgcGFyYSBxdWUgb25DbG9zZSBubyBsbyBpbnZvcXVlXG4gICAgICAgIGNvbnN0IHJlc29sdmVyID0gdGhpcy5yZXNvbHZlcjtcbiAgICAgICAgdGhpcy5yZXNvbHZlciA9IG51bGw7XG4gICAgICAgIFxuICAgICAgICAvLyBDZXJyYW1vcyBlbCBtb2RhbCB5IHJlc29sdmVtb3MgbGEgcHJvbWVzYSBjb24gbG9zIGRhdG9zXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgcmVzb2x2ZXIoe1xuICAgICAgICAgICAgcGVkaWRvczogcGVkaWRvcyxcbiAgICAgICAgICAgIHBlbmRpZW50ZXM6IHBlbmRpZW50ZXNcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgY2FuY2VsKCkge1xuICAgICAgICBjb25zdCByZXNvbHZlciA9IHRoaXMucmVzb2x2ZXI7XG4gICAgICAgIHRoaXMucmVzb2x2ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIHJlc29sdmVyKG51bGwpO1xuICAgIH1cbiAgICBcbiAgICBvbkNsb3NlKCkge1xuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XG4gICAgICAgIFxuICAgICAgICAvLyBTaSBlbCByZXNvbHZlciBzaWd1ZSBhY3Rpdm8gKHBvciBlamVtcGxvLCBzaSBzZSBjaWVycmEgZWwgbW9kYWwgZGUgZm9ybWEgaW5lc3BlcmFkYSksIGxvIHJlc29sdmVtb3MgY29uIG51bGxcbiAgICAgICAgaWYgKHRoaXMucmVzb2x2ZXIpIHtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZXIobnVsbCk7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBvcGVuQW5kQXdhaXRTZWxlY3Rpb24oKTogUHJvbWlzZTx7IHBlZGlkb3M6IHN0cmluZywgcGVuZGllbnRlczogYm9vbGVhbiB9IHwgbnVsbD4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZXIgPSByZXNvbHZlO1xuICAgICAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCAiLy8gc3JjL21vZHVsZXMvbm90ZUxpZmVjeWNsZU1hbmFnZXIvQVBJL3V0aWxzL0RPTVV0aWxzLnRzXG5cbi8qKlxuICogVXRpbGlkYWRlcyBwYXJhIGNyZWFyIHkgbWFuaXB1bGFyIGVsZW1lbnRvcyBET00gZGUgbWFuZXJhIHJldXRpbGl6YWJsZVxuICovXG5leHBvcnQgY2xhc3MgRE9NVXRpbHMge1xuICAgIC8qKlxuICAgICAqIENyZWEgdW4gZWxlbWVudG8gY29uIGF0cmlidXRvcywgY2xhc2VzIHkgZXZlbnRvcyBvcGNpb25hbGVzXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZUVsZW1lbnQ8SyBleHRlbmRzIGtleW9mIEhUTUxFbGVtZW50VGFnTmFtZU1hcD4oXG4gICAgICB0YWc6IEssXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGNsYXNzTmFtZT86IHN0cmluZztcbiAgICAgICAgdGV4dENvbnRlbnQ/OiBzdHJpbmc7XG4gICAgICAgIGF0dHJpYnV0ZXM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICAgICAgICBzdHlsZXM/OiBQYXJ0aWFsPENTU1N0eWxlRGVjbGFyYXRpb24+O1xuICAgICAgICBjaGlsZHJlbj86IEhUTUxFbGVtZW50W107XG4gICAgICAgIGV2ZW50cz86IFJlY29yZDxzdHJpbmcsIEV2ZW50TGlzdGVuZXI+O1xuICAgICAgfSA9IHt9XG4gICAgKTogSFRNTEVsZW1lbnRUYWdOYW1lTWFwW0tdIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gICAgICBcbiAgICAgIGlmIChvcHRpb25zLmNsYXNzTmFtZSkge1xuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IG9wdGlvbnMuY2xhc3NOYW1lO1xuICAgICAgfVxuICAgICAgXG4gICAgICBpZiAob3B0aW9ucy50ZXh0Q29udGVudCkge1xuICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gb3B0aW9ucy50ZXh0Q29udGVudDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKG9wdGlvbnMuYXR0cmlidXRlcykge1xuICAgICAgICBPYmplY3QuZW50cmllcyhvcHRpb25zLmF0dHJpYnV0ZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKG9wdGlvbnMuc3R5bGVzKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgb3B0aW9ucy5zdHlsZXMpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBpZiAob3B0aW9ucy5jaGlsZHJlbikge1xuICAgICAgICBvcHRpb25zLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4gZWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZCkpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBpZiAob3B0aW9ucy5ldmVudHMpIHtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMob3B0aW9ucy5ldmVudHMpLmZvckVhY2goKFtldmVudCwgbGlzdGVuZXJdKSA9PiB7XG4gICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgXG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQ3JlYSB1biBib3RcdTAwRjNuIGNvbiBvcGNpb25lcyBjb211bmVzXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZUJ1dHRvbihcbiAgICAgIHRleHQ6IHN0cmluZywgXG4gICAgICBvbkNsaWNrOiBFdmVudExpc3RlbmVyLCBcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgICAgICBpY29uPzogc3RyaW5nO1xuICAgICAgICBzdHlsZXM/OiBQYXJ0aWFsPENTU1N0eWxlRGVjbGFyYXRpb24+O1xuICAgICAgfSA9IHt9XG4gICAgKTogSFRNTEJ1dHRvbkVsZW1lbnQge1xuICAgICAgY29uc3QgYnV0dG9uVGV4dCA9IG9wdGlvbnMuaWNvbiBcbiAgICAgICAgPyBgJHtvcHRpb25zLmljb259ICR7dGV4dH1gXG4gICAgICAgIDogdGV4dDtcbiAgICAgICAgXG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XG4gICAgICAgIGNsYXNzTmFtZTogb3B0aW9ucy5jbGFzc05hbWUgfHwgJ2RlZmF1bHQtYnV0dG9uJyxcbiAgICAgICAgdGV4dENvbnRlbnQ6IGJ1dHRvblRleHQsXG4gICAgICAgIHN0eWxlczogb3B0aW9ucy5zdHlsZXMsXG4gICAgICAgIGV2ZW50czogeyBjbGljazogb25DbGljayB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQ3JlYSB1bmEgc2VjY2lcdTAwRjNuIGNvbGFwc2FibGVcbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlQ29sbGFwc2libGVTZWN0aW9uKFxuICAgICAgaGVhZGVyQ29udGVudDogc3RyaW5nIHwgSFRNTEVsZW1lbnQsXG4gICAgICBib2R5Q29udGVudDogSFRNTEVsZW1lbnQsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGlzRXhwYW5kZWQ/OiBib29sZWFuO1xuICAgICAgICBoZWFkZXJDbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgICAgIGJvZHlDbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgICAgIGNvbnRhaW5lckNsYXNzTmFtZT86IHN0cmluZztcbiAgICAgICAgdG9nZ2xlSWNvbkV4cGFuZGVkPzogc3RyaW5nO1xuICAgICAgICB0b2dnbGVJY29uQ29sbGFwc2VkPzogc3RyaW5nO1xuICAgICAgfSA9IHt9XG4gICAgKTogSFRNTEVsZW1lbnQge1xuICAgICAgY29uc3QgaXNFeHBhbmRlZCA9IG9wdGlvbnMuaXNFeHBhbmRlZCB8fCBmYWxzZTtcbiAgICAgIGNvbnN0IHRvZ2dsZUljb25FeHBhbmRlZCA9IG9wdGlvbnMudG9nZ2xlSWNvbkV4cGFuZGVkIHx8IFwiXHUyNUJDXCI7XG4gICAgICBjb25zdCB0b2dnbGVJY29uQ29sbGFwc2VkID0gb3B0aW9ucy50b2dnbGVJY29uQ29sbGFwc2VkIHx8IFwiXHUyNUI2XCI7XG4gICAgICBcbiAgICAgIC8vIENyZWFyIGVsIHRvZ2dsZVxuICAgICAgY29uc3QgdG9nZ2xlU3BhbiA9IHRoaXMuY3JlYXRlRWxlbWVudCgnc3BhbicsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBgdG9nZ2xlLWljb24gJHtpc0V4cGFuZGVkID8gJ29wZW4nIDogJyd9YCxcbiAgICAgICAgdGV4dENvbnRlbnQ6IGlzRXhwYW5kZWQgPyB0b2dnbGVJY29uRXhwYW5kZWQgOiB0b2dnbGVJY29uQ29sbGFwc2VkXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gQ3JlYXIgZWwgaGVhZGVyXG4gICAgICBjb25zdCBoZWFkZXIgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBvcHRpb25zLmhlYWRlckNsYXNzTmFtZSB8fCAnY29sbGFwc2libGUtaGVhZGVyJ1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGlmICh0eXBlb2YgaGVhZGVyQ29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3QgaGVhZGVyVGV4dFNwYW4gPSB0aGlzLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7XG4gICAgICAgICAgdGV4dENvbnRlbnQ6IGhlYWRlckNvbnRlbnRcbiAgICAgICAgfSk7XG4gICAgICAgIGhlYWRlci5hcHBlbmRDaGlsZCh0b2dnbGVTcGFuKTtcbiAgICAgICAgaGVhZGVyLmFwcGVuZENoaWxkKGhlYWRlclRleHRTcGFuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhlYWRlci5hcHBlbmRDaGlsZCh0b2dnbGVTcGFuKTtcbiAgICAgICAgaGVhZGVyLmFwcGVuZENoaWxkKGhlYWRlckNvbnRlbnQpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBDcmVhciBlbCBjb250ZW5lZG9yIGRlbCBib2R5XG4gICAgICBjb25zdCBib2R5ID0gdGhpcy5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgIGNsYXNzTmFtZTogb3B0aW9ucy5ib2R5Q2xhc3NOYW1lIHx8ICdjb2xsYXBzaWJsZS1ib2R5JyxcbiAgICAgICAgc3R5bGVzOiB7XG4gICAgICAgICAgZGlzcGxheTogaXNFeHBhbmRlZCA/ICdibG9jaycgOiAnbm9uZSdcbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRyZW46IFtib2R5Q29udGVudF1cbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBDcmVhciBlbCBjb250ZW5lZG9yIHByaW5jaXBhbFxuICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgIGNsYXNzTmFtZTogb3B0aW9ucy5jb250YWluZXJDbGFzc05hbWUgfHwgJ2NvbGxhcHNpYmxlLWNvbnRhaW5lcicsXG4gICAgICAgIGNoaWxkcmVuOiBbaGVhZGVyLCBib2R5XVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIEFcdTAwRjFhZGlyIGZ1bmNpb25hbGlkYWQgZGUgdG9nZ2xlXG4gICAgICBoZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgLy8gTm8gY29sYXBzYXIgc2kgc2UgaGl6byBjbGljIGVuIHVuIGVubGFjZSB1IG90cm8gZWxlbWVudG8gaW50ZXJhY3Rpdm9cbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCBpbnN0YW5jZW9mIEhUTUxBbmNob3JFbGVtZW50IHx8IFxuICAgICAgICAgICAgZXZlbnQudGFyZ2V0IGluc3RhbmNlb2YgSFRNTEJ1dHRvbkVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGlzQ3VycmVudGx5RXhwYW5kZWQgPSB0b2dnbGVTcGFuLmNsYXNzTGlzdC5jb250YWlucygnb3BlbicpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGlzQ3VycmVudGx5RXhwYW5kZWQpIHtcbiAgICAgICAgICB0b2dnbGVTcGFuLmNsYXNzTGlzdC5yZW1vdmUoJ29wZW4nKTtcbiAgICAgICAgICB0b2dnbGVTcGFuLnRleHRDb250ZW50ID0gdG9nZ2xlSWNvbkNvbGxhcHNlZDtcbiAgICAgICAgICBib2R5LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdG9nZ2xlU3Bhbi5jbGFzc0xpc3QuYWRkKCdvcGVuJyk7XG4gICAgICAgICAgdG9nZ2xlU3Bhbi50ZXh0Q29udGVudCA9IHRvZ2dsZUljb25FeHBhbmRlZDtcbiAgICAgICAgICBib2R5LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQ3JlYSB1biBlbGVtZW50byBkZSBjYXJnYSAoc3Bpbm5lcilcbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlTG9hZGluZ0luZGljYXRvcihtZXNzYWdlOiBzdHJpbmcgPSBcIkNhcmdhbmRvLi4uXCIpOiBIVE1MRWxlbWVudCB7XG4gICAgICBjb25zdCBzcGlubmVyID0gdGhpcy5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgIGNsYXNzTmFtZTogJ3NwaW5uZXInXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgY29uc3QgbG9hZGluZ1RleHQgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgdGV4dENvbnRlbnQ6IG1lc3NhZ2VcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgIGNsYXNzTmFtZTogJ2xvYWRpbmctaW5kaWNhdG9yJyxcbiAgICAgICAgY2hpbGRyZW46IFtzcGlubmVyLCBsb2FkaW5nVGV4dF1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBDcmVhIHVuIG1lbnNhamUgZGUgZXJyb3JcbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlRXJyb3JNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZywgZGV0YWlscz86IHN0cmluZyk6IEhUTUxFbGVtZW50IHtcbiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICBjbGFzc05hbWU6ICdlcnJvci1tZXNzYWdlJyxcbiAgICAgICAgdGV4dENvbnRlbnQ6IG1lc3NhZ2VcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBpZiAoZGV0YWlscykge1xuICAgICAgICBjb25zdCBkZXRhaWxzRWxlbWVudCA9IHRoaXMuY3JlYXRlRWxlbWVudCgnc21hbGwnLCB7XG4gICAgICAgICAgdGV4dENvbnRlbnQ6IGRldGFpbHMsXG4gICAgICAgICAgc3R5bGVzOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiAnOHB4J1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkZXRhaWxzRWxlbWVudCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgfVxuICB9IiwgIi8vIHNyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL0FQSS91dGlscy9OYXZpZ2F0aW9uVXRpbHMudHNcblxuLyoqXG4gKiBVdGlsaWRhZGVzIHBhcmEgbmF2ZWdhY2lcdTAwRjNuIGVuIE9ic2lkaWFuXG4gKi9cbmV4cG9ydCBjbGFzcyBOYXZpZ2F0aW9uVXRpbHMge1xuICAgIC8qKlxuICAgICAqIE5hdmVnYSBhIHVuYSB0YXJlYSBlc3BlY1x1MDBFRGZpY2EgZW4gdW5hIG5vdGEgY29uIHJlc2FsdGFkbyBkZSBsXHUwMEVEbmVhXG4gICAgICovXG4gICAgc3RhdGljIG5hdmVnYXJBVGFyZWFDb25SZXNhbHRhZG8oXG4gICAgICBwYXRoOiBzdHJpbmcsXG4gICAgICBsaW5lTnVtYmVyOiBudW1iZXIsXG4gICAgICB0ZXh0b1RhcmVhPzogc3RyaW5nLFxuICAgICAgbnVldmFQZXN0YVx1MDBGMWE6IGJvb2xlYW4gPSB0cnVlXG4gICAgKTogdm9pZCB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBWZXJpZmljYXIgcXVlIGxhIHJ1dGEgZXMgdlx1MDBFMWxpZGFcbiAgICAgICAgY29uc3QgZmlsZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgocGF0aCk7XG4gICAgICAgIGlmICghZmlsZSkge1xuICAgICAgICAgIG5ldyBhcHAuTm90aWNlKGBBcmNoaXZvIG5vIGVuY29udHJhZG86ICR7cGF0aH1gKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEludGVudGFyIGFicmlyIGVsIGFyY2hpdm8sIG9wY2lvbmFsbWVudGUgZW4gdW5hIG51ZXZhIHBlc3RhXHUwMEYxYVxuICAgICAgICBjb25zdCBsZWFmID0gYXBwLndvcmtzcGFjZS5nZXRMZWFmKG51ZXZhUGVzdGFcdTAwRjFhKTtcbiAgICAgICAgbGVhZi5vcGVuRmlsZShmaWxlKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAvLyBBcGxpY2FyIHJlc2FsdGFkbyBkZXNwdVx1MDBFOXMgZGUgcXVlIGVsIGFyY2hpdm8gc2UgaGF5YSBhYmllcnRvIGNvbXBsZXRhbWVudGVcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVkaXRvciA9IGxlYWYudmlldy5lZGl0b3I7XG4gICAgICAgICAgICBpZiAoIWVkaXRvcikgcmV0dXJuO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAobGluZU51bWJlciA+IDApIHtcbiAgICAgICAgICAgICAgLy8gTW92ZXIgY3Vyc29yIHkgcGFudGFsbGEgYSBsYSBsXHUwMEVEbmVhXG4gICAgICAgICAgICAgIGVkaXRvci5zZXRDdXJzb3IoeyBsaW5lOiBsaW5lTnVtYmVyIC0gMSwgY2g6IDAgfSk7XG4gICAgICAgICAgICAgIGVkaXRvci5zY3JvbGxJbnRvVmlldyhcbiAgICAgICAgICAgICAgICB7IGZyb206IHsgbGluZTogbGluZU51bWJlciAtIDEsIGNoOiAwIH0sIHRvOiB7IGxpbmU6IGxpbmVOdW1iZXIgLSAxLCBjaDogMCB9IH0sXG4gICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8gQXBsaWNhciByZXNhbHRhZG8gdmlzdWFsIFxuICAgICAgICAgICAgICB0aGlzLnJlc2FsdGFyTGluZWFUZW1wb3JhbG1lbnRlKGVkaXRvciwgbGluZU51bWJlciAtIDEpO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIC8vIFNpIG5vIHRlbmVtb3Mgblx1MDBGQW1lcm8gZGUgbFx1MDBFRG5lYSBwZXJvIHRlbmVtb3MgdGV4dG8sIGJ1c2NhbW9zIGVsIHRleHRvXG4gICAgICAgICAgICBlbHNlIGlmICh0ZXh0b1RhcmVhKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbnRlbmlkbyA9IGVkaXRvci5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgICBjb25zdCBsaW5lYXMgPSBjb250ZW5pZG8uc3BsaXQoJ1xcbicpO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lYXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAvLyBCdXNjYXIgdGV4dG8gbGltcGlvIG8gY29uIG1hcmNhZG9yZXMgZGUgdGFyZWFcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0b0xpbXBpbyA9IHRleHRvVGFyZWEucmVwbGFjZSgvXi1cXHMqXFxbW15cXF1dK1xcXVxccyovLCAnJykudHJpbSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVhTGltcGlhID0gbGluZWFzW2ldLnJlcGxhY2UoL14tXFxzKlxcW1teXFxdXStcXF1cXHMqLywgJycpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAobGluZWFzW2ldLmluY2x1ZGVzKHRleHRvVGFyZWEpIHx8IGxpbmVhTGltcGlhLmluY2x1ZGVzKHRleHRvTGltcGlvKSkge1xuICAgICAgICAgICAgICAgICAgLy8gTW92ZXIgY3Vyc29yIHkgcGFudGFsbGEgYSBsYSBsXHUwMEVEbmVhIGVuY29udHJhZGFcbiAgICAgICAgICAgICAgICAgIGVkaXRvci5zZXRDdXJzb3IoeyBsaW5lOiBpLCBjaDogMCB9KTtcbiAgICAgICAgICAgICAgICAgIGVkaXRvci5zY3JvbGxJbnRvVmlldyhcbiAgICAgICAgICAgICAgICAgICAgeyBmcm9tOiB7IGxpbmU6IGksIGNoOiAwIH0sIHRvOiB7IGxpbmU6IGksIGNoOiBsaW5lYXNbaV0ubGVuZ3RoIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgLy8gQXBsaWNhciByZXNhbHRhZG8gdmlzdWFsXG4gICAgICAgICAgICAgICAgICB0aGlzLnJlc2FsdGFyTGluZWFUZW1wb3JhbG1lbnRlKGVkaXRvciwgaSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCAzMDApO1xuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGVuIG5hdmVnYXJBVGFyZWFDb25SZXNhbHRhZG86JywgZXJyb3IpO1xuICAgICAgICBuZXcgYXBwLk5vdGljZShgRXJyb3IgYWwgbmF2ZWdhcjogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBSZXNhbHRhIHRlbXBvcmFsbWVudGUgdW5hIGxcdTAwRURuZWEgZW4gZWwgZWRpdG9yXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVzYWx0YXJMaW5lYVRlbXBvcmFsbWVudGUoZWRpdG9yOiBhbnksIGxpbmVJbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBVc2FyIENNNiBvIENNNSBkZXBlbmRpZW5kbyBkZWwgZWRpdG9yXG4gICAgICAgIGlmIChlZGl0b3IuY20gJiYgZWRpdG9yLmNtLnN0YXRlKSB7XG4gICAgICAgICAgLy8gRWRpdG9yIG1vZGVybm8gKENNNilcbiAgICAgICAgICBjb25zdCBsaW5lRGl2ID0gZWRpdG9yLmNtLmRvbS5xdWVyeVNlbGVjdG9yKCcuY20tY29udGVudCcpO1xuICAgICAgICAgIGlmIChsaW5lRGl2KSB7XG4gICAgICAgICAgICBjb25zdCBsaW5lRWxlbWVudHMgPSBsaW5lRGl2LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jbS1saW5lJyk7XG4gICAgICAgICAgICBpZiAobGluZUVsZW1lbnRzICYmIGxpbmVFbGVtZW50cy5sZW5ndGggPiBsaW5lSW5kZXgpIHtcbiAgICAgICAgICAgICAgbGluZUVsZW1lbnRzW2xpbmVJbmRleF0uY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0ZWQtbGluZScpO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGluZUVsZW1lbnRzW2xpbmVJbmRleF0uY2xhc3NMaXN0LnJlbW92ZSgnaGlnaGxpZ2h0ZWQtbGluZScpO1xuICAgICAgICAgICAgICB9LCAyMDAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gRWRpdG9yIGNsXHUwMEUxc2ljbyAoQ001KVxuICAgICAgICAgIGNvbnN0IGxpbmVEaXYgPSBlZGl0b3IubGluZURpdiB8fCBlZGl0b3IuZ2V0U2Nyb2xsZXJFbGVtZW50KCk7XG4gICAgICAgICAgaWYgKGxpbmVEaXYpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVFbGVtZW50cyA9IGxpbmVEaXYucXVlcnlTZWxlY3RvckFsbCgnLkNvZGVNaXJyb3ItbGluZScpO1xuICAgICAgICAgICAgaWYgKGxpbmVFbGVtZW50cyAmJiBsaW5lRWxlbWVudHMubGVuZ3RoID4gbGluZUluZGV4KSB7XG4gICAgICAgICAgICAgIGxpbmVFbGVtZW50c1tsaW5lSW5kZXhdLmNsYXNzTGlzdC5hZGQoJ2hpZ2hsaWdodGVkLWxpbmUnKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxpbmVFbGVtZW50c1tsaW5lSW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2hsaWdodGVkLWxpbmUnKTtcbiAgICAgICAgICAgICAgfSwgMjAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBhbCByZXNhbHRhciBsXHUwMEVEbmVhOicsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH0iLCAiLy8gc3JjL21vZHVsZXMvbm90ZUxpZmVjeWNsZU1hbmFnZXIvQVBJL2NvbXBvbmVudHMvVGFyZWFzSW5ib3hDb21wb25lbnQudHNcblxuaW1wb3J0IHsgRE9NVXRpbHMgfSBmcm9tICcuLi91dGlscy9ET01VdGlscyc7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uVXRpbHMgfSBmcm9tICcuLi91dGlscy9OYXZpZ2F0aW9uVXRpbHMnO1xuXG5pbnRlcmZhY2UgVGFyZWFJbmJveCB7XG4gIHJ1dGFBcmNoaXZvOiBzdHJpbmc7XG4gIHRleHRvOiBzdHJpbmc7XG4gIHRleHRvT3JpZ2luYWw/OiBzdHJpbmc7XG4gIGxpbmVJbmZvPzoge1xuICAgIG51bWVybz86IG51bWJlcjtcbiAgfTtcbiAgZmVjaGFWZW5jaW1pZW50bz86IHN0cmluZztcbiAgZmVjaGFTY2hlZHVsZWQ/OiBzdHJpbmc7XG4gIGZlY2hhU3RhcnQ/OiBzdHJpbmc7XG4gIGV0aXF1ZXRhczoge1xuICAgIGNvbnRleHRvcz86IHN0cmluZ1tdO1xuICAgIHBlcnNvbmFzPzogc3RyaW5nW107XG4gICAgb3RyYXM6IHN0cmluZ1tdO1xuICB9O1xufVxuXG5pbnRlcmZhY2UgTm90YUNvblRhcmVhcyB7XG4gIHRpdHVsbzogc3RyaW5nO1xuICBydXRhOiBzdHJpbmc7XG4gIHRhcmVhczogVGFyZWFJbmJveFtdO1xufVxuXG4vKipcbiAqIENvbXBvbmVudGUgcGFyYSBnZXN0aW9uYXIgeSBtb3N0cmFyIHRhcmVhcyBlbiBsYSBiYW5kZWphIGRlIGVudHJhZGFcbiAqL1xuZXhwb3J0IGNsYXNzIFRhcmVhc0luYm94Q29tcG9uZW50IHtcbiAgcHJpdmF0ZSBwbHVnaW46IGFueTtcbiAgXG4gIGNvbnN0cnVjdG9yKHBsdWdpbjogYW55KSB7XG4gICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBHZW5lcmEgdW4gY29tcG9uZW50ZSB2aXN1YWwgcGFyYSBtb3N0cmFyIHRhcmVhcyBjb24gZXRpcXVldGEgI2luYm94XG4gICAqL1xuICBhc3luYyBnZW5lcmFyKGR2OiBhbnkpOiBQcm9taXNlPEhUTUxFbGVtZW50PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIENyZWFyIGVsIGNvbnRlbmVkb3IgcHJpbmNpcGFsXG4gICAgICBjb25zdCBjb250YWluZXIgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgIGNsYXNzTmFtZTogJ3RhcmVhcy1pbmJveC1jb250YWluZXInXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gQVx1MDBGMWFkaXIgZXN0aWxvcyBpbmxpbmUgY29tbyBzb2x1Y2lcdTAwRjNuIHRlbXBvcmFsXG4gICAgICAvLyBFbiB1bmEgcmVmYWN0b3JpemFjaVx1MDBGM24gbVx1MDBFMXMgcHJvZnVuZGEsIGRlYmVyXHUwMEVEYW4gbW92ZXJzZSBhIHVuIGFyY2hpdm8gQ1NTXG4gICAgICB0aGlzLmFcdTAwRjFhZGlyRXN0aWxvcyhjb250YWluZXIpO1xuICAgICAgXG4gICAgICAvLyBBXHUwMEYxYWRpciBlbmNhYmV6YWRvIHByaW5jaXBhbFxuICAgICAgY29uc3QgaGVhZGluZyA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2gzJywge1xuICAgICAgICBjbGFzc05hbWU6ICdpbmJveC1oZWFkaW5nJyxcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICBET01VdGlscy5jcmVhdGVFbGVtZW50KCdzcGFuJywge1xuICAgICAgICAgICAgdGV4dENvbnRlbnQ6ICdcdUQ4M0RcdURDRTUgVGFyZWFzIGVuIEJhbmRlamEgZGUgRW50cmFkYSdcbiAgICAgICAgICB9KVxuICAgICAgICBdXG4gICAgICB9KTtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChoZWFkaW5nKTtcbiAgICAgIFxuICAgICAgLy8gQWdyZWdhciBjb250cm9sZXNcbiAgICAgIGNvbnN0IGNvbnRyb2xzRGl2ID0gdGhpcy5jcmVhckNvbnRyb2xlcyhjb250YWluZXIpO1xuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNvbnRyb2xzRGl2KTtcbiAgICAgIFxuICAgICAgLy8gQVx1MDBGMWFkaXIgaW5kaWNhZG9yIGRlIGNhcmdhXG4gICAgICBjb25zdCBsb2FkaW5nRGl2ID0gRE9NVXRpbHMuY3JlYXRlTG9hZGluZ0luZGljYXRvcihcIkJ1c2NhbmRvIHRhcmVhcyBlbiBiYW5kZWphIGRlIGVudHJhZGEuLi5cIik7XG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobG9hZGluZ0Rpdik7XG4gICAgICBcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIE9idGVuZXIgZGF0b3MgZGUgdGFyZWFzIGluYm94IGEgdHJhdlx1MDBFOXMgZGUgbGEgQVBJXG4gICAgICAgIGNvbnN0IHsgdGFyZWFzUG9yTm90YSwgdG90YWxUYXJlYXMsIHRvdGFsTm90YXMgfSA9IGF3YWl0IHRoaXMucGx1Z2luLnRhcmVhc0FQSS5nZXRUYXJlYXNJbmJveCgpO1xuICAgICAgICBcbiAgICAgICAgLy8gRWxpbWluYXIgZWwgaW5kaWNhZG9yIGRlIGNhcmdhXG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChsb2FkaW5nRGl2KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFNpIG5vIGhheSB0YXJlYXMgZW4gYmFuZGVqYSBkZSBlbnRyYWRhXG4gICAgICAgIGlmICh0b3RhbFRhcmVhcyA9PT0gMCkge1xuICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChcbiAgICAgICAgICAgIERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnZW1wdHktbWVzc2FnZScsXG4gICAgICAgICAgICAgIHRleHRDb250ZW50OiBcIlx1MDBBMUJhbmRlamEgZGUgZW50cmFkYSB2YWNcdTAwRURhISBObyBzZSBlbmNvbnRyYXJvbiB0YXJlYXMgY29uIGV0aXF1ZXRhICNpbmJveC5cIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEFjdHVhbGl6YXIgZWwgZW5jYWJlemFkbyBjb24gZWwgY29udGFkb3JcbiAgICAgICAgaGVhZGluZy5hcHBlbmRDaGlsZChcbiAgICAgICAgICBET01VdGlscy5jcmVhdGVFbGVtZW50KCdzcGFuJywge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnc3RhdHMtYmFkZ2UnLFxuICAgICAgICAgICAgdGV4dENvbnRlbnQ6IGAke3RvdGFsVGFyZWFzfSB0YXJlYXMgZW4gJHt0b3RhbE5vdGFzfSBub3Rhc2BcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXIgY29udGVuZWRvciBkZSBlc3RhZFx1MDBFRHN0aWNhc1xuICAgICAgICBjb25zdCBzdGF0c0NvbnRhaW5lciA9IHRoaXMuY3JlYXJDb250ZW5lZG9yRXN0YWRpc3RpY2FzKHRvdGFsVGFyZWFzLCB0b3RhbE5vdGFzKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHN0YXRzQ29udGFpbmVyKTtcbiAgICAgICAgXG4gICAgICAgIC8vIE9yZGVuYXIgbm90YXMgcG9yIGNhbnRpZGFkIGRlIHRhcmVhcyAoZGVzY2VuZGVudGUpXG4gICAgICAgIGNvbnN0IG5vdGFzT3JkZW5hZGFzID0gQXJyYXkuZnJvbSh0YXJlYXNQb3JOb3RhLnZhbHVlcygpKVxuICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBiLnRhcmVhcy5sZW5ndGggLSBhLnRhcmVhcy5sZW5ndGgpO1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXIgZ3J1cG9zIGRlIHRhcmVhcyBwb3Igbm90YVxuICAgICAgICBmb3IgKGNvbnN0IG5vdGFJbmZvIG9mIG5vdGFzT3JkZW5hZGFzKSB7XG4gICAgICAgICAgY29uc3QgZ3J1cG9UYXJlYXMgPSB0aGlzLmNyZWFyR3J1cG9UYXJlYXMobm90YUluZm8sIGR2KTtcbiAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZ3J1cG9UYXJlYXMpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBFeHBhbmRpciBlbCBwcmltZXIgZ3J1cG8gYXV0b21cdTAwRTF0aWNhbWVudGVcbiAgICAgICAgaWYgKG5vdGFzT3JkZW5hZGFzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zdCBwcmltZXJHcnVwbyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcudGFyZWEtZ3JvdXAnKTtcbiAgICAgICAgICBpZiAocHJpbWVyR3J1cG8pIHtcbiAgICAgICAgICAgIGNvbnN0IHRvZ2dsZSA9IHByaW1lckdydXBvLnF1ZXJ5U2VsZWN0b3IoJy50YXJlYS1ncm91cC10b2dnbGUnKTtcbiAgICAgICAgICAgIGNvbnN0IGxpc3QgPSBwcmltZXJHcnVwby5xdWVyeVNlbGVjdG9yKCcudGFyZWEtbGlzdCcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodG9nZ2xlICYmIGxpc3QpIHtcbiAgICAgICAgICAgICAgdG9nZ2xlLmNsYXNzTGlzdC5hZGQoJ29wZW4nKTtcbiAgICAgICAgICAgICAgKHRvZ2dsZSBhcyBIVE1MRWxlbWVudCkudGV4dENvbnRlbnQgPSBcIlx1MjVCQ1wiO1xuICAgICAgICAgICAgICAobGlzdCBhcyBIVE1MRWxlbWVudCkuY2xhc3NMaXN0LmFkZCgnb3BlbicpO1xuICAgICAgICAgICAgICAobGlzdCBhcyBIVE1MRWxlbWVudCkuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gRWxpbWluYXIgZWwgaW5kaWNhZG9yIGRlIGNhcmdhXG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChsb2FkaW5nRGl2KTtcbiAgICAgICAgXG4gICAgICAgIC8vIE1vc3RyYXIgbWVuc2FqZSBkZSBlcnJvclxuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoXG4gICAgICAgICAgRE9NVXRpbHMuY3JlYXRlRXJyb3JNZXNzYWdlKFxuICAgICAgICAgICAgYEVycm9yIGFsIGNhcmdhciB0YXJlYXMgZGUgYmFuZGVqYSBkZSBlbnRyYWRhOiAke2Vycm9yLm1lc3NhZ2V9YCxcbiAgICAgICAgICAgIFwiUmV2aXNhIGxhIGNvbnNvbGEgcGFyYSBtXHUwMEUxcyBkZXRhbGxlcy5cIlxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBlbiBtb3N0cmFyVGFyZWFzSW5ib3g6XCIsIGVycm9yKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdlbmVyYWwgZW4gbW9zdHJhclRhcmVhc0luYm94OlwiLCBlcnJvcik7XG4gICAgICBcbiAgICAgIC8vIERldm9sdmVyIHVuIG1lbnNhamUgZGUgZXJyb3JcbiAgICAgIHJldHVybiBET01VdGlscy5jcmVhdGVFcnJvck1lc3NhZ2UoXG4gICAgICAgIGBFcnJvciBhbCBjYXJnYXIgdGFyZWFzIGRlIGJhbmRlamEgZGUgZW50cmFkYTogJHtlcnJvci5tZXNzYWdlfWAsXG4gICAgICAgIFwiUmV2aXNhIGxhIGNvbnNvbGEgcGFyYSBtXHUwMEUxcyBkZXRhbGxlcy5cIlxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBDcmVhIGxvcyBjb250cm9sZXMgcGFyYSBsYSBnZXN0aVx1MDBGM24gZGUgdGFyZWFzIGluYm94XG4gICAqL1xuICBwcml2YXRlIGNyZWFyQ29udHJvbGVzKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpOiBIVE1MRWxlbWVudCB7XG4gICAgY29uc3QgY29udHJvbHNEaXYgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd0YXJlYXMtY29udHJvbHMnXG4gICAgfSk7XG4gICAgXG4gICAgLy8gQm90XHUwMEYzbiBwYXJhIGV4cGFuZGlyIHRvZG9cbiAgICBjb25zdCBleHBhbmRCdG4gPSBET01VdGlscy5jcmVhdGVCdXR0b24oXCJFeHBhbmRpciBUb2RvXCIsIFxuICAgICAgKCkgPT4gdGhpcy5leHBhbmRpclRvZGFzKGNvbnRhaW5lciksXG4gICAgICB7IGNsYXNzTmFtZTogJ3RhcmVhcy1idG4gZXhwYW5kLWJ0bicsIGljb246ICdcdUQ4M0RcdURDQzInIH1cbiAgICApO1xuICAgIFxuICAgIC8vIEJvdFx1MDBGM24gcGFyYSBjb2xhcHNhciB0b2RvXG4gICAgY29uc3QgY29sbGFwc2VCdG4gPSBET01VdGlscy5jcmVhdGVCdXR0b24oXCJDb2xhcHNhciBUb2RvXCIsIFxuICAgICAgKCkgPT4gdGhpcy5jb2xhcHNhclRvZGFzKGNvbnRhaW5lciksXG4gICAgICB7IGNsYXNzTmFtZTogJ3RhcmVhcy1idG4gY29sbGFwc2UtYnRuJywgaWNvbjogJ1x1RDgzRFx1RENDMScgfVxuICAgICk7XG4gICAgXG4gICAgLy8gQm90XHUwMEYzbiBwYXJhIHJlZnJlc2NhclxuICAgIGNvbnN0IHJlZnJlc2hCdG4gPSBET01VdGlscy5jcmVhdGVCdXR0b24oXCJBY3R1YWxpemFyXCIsXG4gICAgICBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG51ZXZvQ29udGFpbmVyID0gYXdhaXQgdGhpcy5nZW5lcmFyKGR2KTtcbiAgICAgICAgY29udGFpbmVyLnBhcmVudE5vZGU/LnJlcGxhY2VDaGlsZChudWV2b0NvbnRhaW5lciwgY29udGFpbmVyKTtcbiAgICAgIH0sXG4gICAgICB7IGNsYXNzTmFtZTogJ3RhcmVhcy1idG4gcmVmcmVzaC1idG4nLCBpY29uOiAnXHVEODNEXHVERDA0JyB9XG4gICAgKTtcbiAgICBcbiAgICAvLyBCb3RcdTAwRjNuIHBhcmEgcHJvY2VzYXIgaW5ib3hcbiAgICBjb25zdCBwcm9jZXNhckJ0biA9IERPTVV0aWxzLmNyZWF0ZUJ1dHRvbihcIlByb2Nlc2FyIEluYm94XCIsIFxuICAgICAgKCkgPT4ge1xuICAgICAgICAvLyBNb3N0cmFyIGluZGljYWNpXHUwMEYzbiBwYXJhIHByb2Nlc2FyIGxhcyB0YXJlYXNcbiAgICAgICAgbmV3IHRoaXMucGx1Z2luLmFwcC5Ob3RpY2UoXCJQYXJhIHByb2Nlc2FyIHVuYSB0YXJlYSwgaGF6IGNsaWMgZW4gZWxsYSBwYXJhIGFicmlybGEgeSBjbGFzaWZpY2FybGFcIiwgNTAwMCk7XG4gICAgICB9LFxuICAgICAgeyBcbiAgICAgICAgY2xhc3NOYW1lOiAndGFyZWFzLWJ0biBwcm9jZXNzLWJ0bicsIFxuICAgICAgICBpY29uOiAnXHVEODNEXHVERDBEJyxcbiAgICAgICAgc3R5bGVzOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0taW50ZXJhY3RpdmUtYWNjZW50KScsXG4gICAgICAgICAgY29sb3I6ICd3aGl0ZSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gICAgXG4gICAgY29udHJvbHNEaXYuYXBwZW5kQ2hpbGQoZXhwYW5kQnRuKTtcbiAgICBjb250cm9sc0Rpdi5hcHBlbmRDaGlsZChjb2xsYXBzZUJ0bik7XG4gICAgY29udHJvbHNEaXYuYXBwZW5kQ2hpbGQocmVmcmVzaEJ0bik7XG4gICAgY29udHJvbHNEaXYuYXBwZW5kQ2hpbGQocHJvY2VzYXJCdG4pO1xuICAgIFxuICAgIHJldHVybiBjb250cm9sc0RpdjtcbiAgfVxuICBcbiAgLyoqXG4gICAqIENyZWEgdW4gY29udGVuZWRvciBjb24gdGFyamV0YXMgZGUgZXN0YWRcdTAwRURzdGljYXNcbiAgICovXG4gIHByaXZhdGUgY3JlYXJDb250ZW5lZG9yRXN0YWRpc3RpY2FzKHRvdGFsVGFyZWFzOiBudW1iZXIsIHRvdGFsTm90YXM6IG51bWJlcik6IEhUTUxFbGVtZW50IHtcbiAgICBjb25zdCBzdGF0c0NvbnRhaW5lciA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ2luYm94LXN0YXRzLWNvbnRhaW5lcicsXG4gICAgICBzdHlsZXM6IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgICAgICBnYXA6ICcxMHB4JyxcbiAgICAgICAgbWFyZ2luOiAnMTBweCAwIDIwcHgnXG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgLy8gQWdyZWdhciB0YXJqZXRhcyBkZSBlc3RhZFx1MDBFRHN0aWNhc1xuICAgIHRoaXMuY3JlYXJUYXJqZXRhRXN0YWRpc3RpY2Eoc3RhdHNDb250YWluZXIsIFwiXHVEODNEXHVEQ0U1XCIsIFwiVGFyZWFzIHRvdGFsZXNcIiwgdG90YWxUYXJlYXMpO1xuICAgIHRoaXMuY3JlYXJUYXJqZXRhRXN0YWRpc3RpY2Eoc3RhdHNDb250YWluZXIsIFwiXHVEODNEXHVEQ0REXCIsIFwiTm90YXMgY29uIHRhcmVhc1wiLCB0b3RhbE5vdGFzKTtcbiAgICBcbiAgICByZXR1cm4gc3RhdHNDb250YWluZXI7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBDcmVhIHVuYSB0YXJqZXRhIGRlIGVzdGFkXHUwMEVEc3RpY2FcbiAgICovXG4gIHByaXZhdGUgY3JlYXJUYXJqZXRhRXN0YWRpc3RpY2EoXG4gICAgY29udGFpbmVyOiBIVE1MRWxlbWVudCwgXG4gICAgaWNvbm86IHN0cmluZywgXG4gICAgdGl0dWxvOiBzdHJpbmcsIFxuICAgIHZhbG9yOiBudW1iZXIgfCBzdHJpbmdcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgdGFyamV0YSA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3N0YXRzLWNhcmQnLFxuICAgICAgc3R5bGVzOiB7XG4gICAgICAgIGZsZXg6ICcxJyxcbiAgICAgICAgbWluV2lkdGg6ICcxNTBweCcsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5KScsXG4gICAgICAgIHBhZGRpbmc6ICcxNXB4JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnOHB4JyxcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJ1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIGNvbnN0IGljb25vRWwgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICB0ZXh0Q29udGVudDogaWNvbm8sXG4gICAgICBzdHlsZXM6IHtcbiAgICAgICAgZm9udFNpemU6ICcyNHB4JyxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAnNXB4J1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIGNvbnN0IHRpdHVsb0VsID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgdGV4dENvbnRlbnQ6IHRpdHVsbyxcbiAgICAgIHN0eWxlczoge1xuICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICBjb2xvcjogJ3ZhcigtLXRleHQtbXV0ZWQpJyxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAnNXB4J1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIGNvbnN0IHZhbG9yRWwgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICB0ZXh0Q29udGVudDogdmFsb3IudG9TdHJpbmcoKSxcbiAgICAgIHN0eWxlczoge1xuICAgICAgICBmb250V2VpZ2h0OiAnYm9sZCcsXG4gICAgICAgIGZvbnRTaXplOiAnMThweCdcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICB0YXJqZXRhLmFwcGVuZENoaWxkKGljb25vRWwpO1xuICAgIHRhcmpldGEuYXBwZW5kQ2hpbGQodGl0dWxvRWwpO1xuICAgIHRhcmpldGEuYXBwZW5kQ2hpbGQodmFsb3JFbCk7XG4gICAgXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRhcmpldGEpO1xuICB9XG4gIFxuICAvKipcbiAgICogQ3JlYSB1biBncnVwbyBkZSB0YXJlYXMgcGFyYSB1bmEgbm90YSBlc3BlY1x1MDBFRGZpY2FcbiAgICovXG4gIHByaXZhdGUgY3JlYXJHcnVwb1RhcmVhcyhub3RhSW5mbzogTm90YUNvblRhcmVhcywgZHY6IGFueSk6IEhUTUxFbGVtZW50IHtcbiAgICBjb25zdCB7IHRpdHVsbywgcnV0YSwgdGFyZWFzIH0gPSBub3RhSW5mbztcbiAgICBcbiAgICAvLyBDb250ZW5lZG9yIHBhcmEgbGEgbGlzdGEgZGUgdGFyZWFzIChpbmljaWFsbWVudGUgb2N1bHRvKVxuICAgIGNvbnN0IHRhcmVhc0xpc3QgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd0YXJlYS1saXN0JyxcbiAgICAgIHN0eWxlczoge1xuICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICAvLyBBXHUwMEYxYWRpciBjYWRhIHRhcmVhXG4gICAgZm9yIChjb25zdCB0YXJlYSBvZiB0YXJlYXMpIHtcbiAgICAgIGNvbnN0IHRhcmVhRWxlbWVudCA9IHRoaXMuY3JlYXJUYXJlYUVsZW1lbnQodGFyZWEsIGR2KTtcbiAgICAgIHRhcmVhc0xpc3QuYXBwZW5kQ2hpbGQodGFyZWFFbGVtZW50KTtcbiAgICB9XG4gICAgXG4gICAgLy8gQ3JlYXIgZWwgdFx1MDBFRHR1bG8gY29uIGVubGFjZVxuICAgIGxldCB0aXRsZUVsZW1lbnQ7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGVubGFjZU5vdGEgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdhJywge1xuICAgICAgICBjbGFzc05hbWU6ICdpbnRlcm5hbC1saW5rJyxcbiAgICAgICAgdGV4dENvbnRlbnQ6IHRpdHVsbyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICdkYXRhLWhyZWYnOiBydXRhXG4gICAgICAgIH0sXG4gICAgICAgIGV2ZW50czoge1xuICAgICAgICAgIGNsaWNrOiAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2Uub3BlbkxpbmtUZXh0KHJ1dGEsIFwiXCIsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIHRpdGxlRWxlbWVudCA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgY2xhc3NOYW1lOiAndGFyZWEtZ3JvdXAtdGl0bGUnLFxuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgIERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICd0YXJlYS1ncm91cC10b2dnbGUnLFxuICAgICAgICAgICAgdGV4dENvbnRlbnQ6ICdcdTI1QjYnXG4gICAgICAgICAgfSksXG4gICAgICAgICAgZW5sYWNlTm90YVxuICAgICAgICBdXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBTaSBmYWxsYSBsYSBjcmVhY2lcdTAwRjNuIGRlbCBlbmxhY2UsIG1vc3RyYXIgc29sbyB0ZXh0b1xuICAgICAgdGl0bGVFbGVtZW50ID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICBjbGFzc05hbWU6ICd0YXJlYS1ncm91cC10aXRsZScsXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnc3BhbicsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ3RhcmVhLWdyb3VwLXRvZ2dsZScsXG4gICAgICAgICAgICB0ZXh0Q29udGVudDogJ1x1MjVCNidcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBET01VdGlscy5jcmVhdGVFbGVtZW50KCdzcGFuJywge1xuICAgICAgICAgICAgdGV4dENvbnRlbnQ6IHRpdHVsb1xuICAgICAgICAgIH0pXG4gICAgICAgIF1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICAvLyBDcmVhciBlbCBoZWFkZXIgY29uIGNvbnRhZG9yXG4gICAgY29uc3QgaGVhZGVyRGl2ID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndGFyZWEtZ3JvdXAtaGVhZGVyJyxcbiAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgIHRpdGxlRWxlbWVudCxcbiAgICAgICAgRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnc3BhbicsIHtcbiAgICAgICAgICBjbGFzc05hbWU6ICd0YXJlYS1ncm91cC1jb3VudCcsXG4gICAgICAgICAgdGV4dENvbnRlbnQ6IHRhcmVhcy5sZW5ndGgudG9TdHJpbmcoKVxuICAgICAgICB9KVxuICAgICAgXVxuICAgIH0pO1xuICAgIFxuICAgIC8vIENyZWFyIGNvbnRlbmVkb3IgZGVsIGdydXBvXG4gICAgY29uc3QgZ3J1cG9EaXYgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd0YXJlYS1ncm91cCcsXG4gICAgICBjaGlsZHJlbjogW2hlYWRlckRpdiwgdGFyZWFzTGlzdF1cbiAgICB9KTtcbiAgICBcbiAgICAvLyBBZ3JlZ2FyIGV2ZW50byBwYXJhIG1vc3RyYXIvb2N1bHRhciBsaXN0YSBkZSB0YXJlYXNcbiAgICBoZWFkZXJEaXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgIC8vIE5vIGNvbGFwc2FyIHNpIHNlIGhpem8gY2xpYyBlbiB1biBlbmxhY2VcbiAgICAgIGlmIChldmVudC50YXJnZXQgaW5zdGFuY2VvZiBIVE1MQW5jaG9yRWxlbWVudCkgcmV0dXJuO1xuICAgICAgXG4gICAgICBjb25zdCB0b2dnbGVTcGFuID0gdGl0bGVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YXJlYS1ncm91cC10b2dnbGUnKSBhcyBIVE1MRWxlbWVudDtcbiAgICAgIGlmICghdG9nZ2xlU3BhbikgcmV0dXJuO1xuICAgICAgXG4gICAgICB0b2dnbGVTcGFuLmNsYXNzTGlzdC50b2dnbGUoJ29wZW4nKTtcbiAgICAgIHRhcmVhc0xpc3QuY2xhc3NMaXN0LnRvZ2dsZSgnb3BlbicpO1xuICAgICAgXG4gICAgICBpZiAodG9nZ2xlU3Bhbi5jbGFzc0xpc3QuY29udGFpbnMoJ29wZW4nKSkge1xuICAgICAgICB0b2dnbGVTcGFuLnRleHRDb250ZW50ID0gXCJcdTI1QkNcIjtcbiAgICAgICAgdGFyZWFzTGlzdC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9nZ2xlU3Bhbi50ZXh0Q29udGVudCA9IFwiXHUyNUI2XCI7XG4gICAgICAgIHRhcmVhc0xpc3Quc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiBncnVwb0RpdjtcbiAgfVxuICBcbiAgLyoqXG4gICAqIENyZWEgdW4gZWxlbWVudG8gRE9NIHBhcmEgdW5hIHRhcmVhIGRlIGJhbmRlamEgZGUgZW50cmFkYVxuICAgKi9cbiAgcHJpdmF0ZSBjcmVhclRhcmVhRWxlbWVudCh0YXJlYTogVGFyZWFJbmJveCwgZHY6IGFueSk6IEhUTUxFbGVtZW50IHtcbiAgICAvLyBFbGVtZW50byBwcmluY2lwYWxcbiAgICBjb25zdCB0YXJlYURpdiA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3RhcmVhLWl0ZW0nLFxuICAgICAgc3R5bGVzOiB7XG4gICAgICAgIGJvcmRlckxlZnQ6ICc0cHggc29saWQgI0U2N0UyMicgLy8gQ29sb3IgbmFyYW5qYSBwYXJhIG1vc3RyYXIgcXVlIGVzdFx1MDBFMSBlbiBpbmJveFxuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIC8vIFRleHRvIGRlIGxhIHRhcmVhXG4gICAgY29uc3QgdGV4dG9EaXYgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd0YXJlYS10ZXh0bydcbiAgICB9KTtcbiAgICBcbiAgICAvLyBDaGVja2JveCAodmlzdWFsLCBubyBmdW5jaW9uYWwpXG4gICAgY29uc3QgY2hlY2tib3hTcGFuID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnc3BhbicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3RhcmVhLWNoZWNrYm94JyxcbiAgICAgIHRleHRDb250ZW50OiAnXHUyNjEwJyxcbiAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgJ2RhdGEtcGF0aCc6IHRhcmVhLnJ1dGFBcmNoaXZvLFxuICAgICAgICAnZGF0YS1saW5lJzogU3RyaW5nKHRhcmVhLmxpbmVJbmZvPy5udW1lcm8gfHwgMClcbiAgICAgIH0sXG4gICAgICBldmVudHM6IHtcbiAgICAgICAgY2xpY2s6ICgpID0+IHtcbiAgICAgICAgICBOYXZpZ2F0aW9uVXRpbHMubmF2ZWdhckFUYXJlYUNvblJlc2FsdGFkbyhcbiAgICAgICAgICAgIHRhcmVhLnJ1dGFBcmNoaXZvLFxuICAgICAgICAgICAgdGFyZWEubGluZUluZm8/Lm51bWVybyB8fCAwLFxuICAgICAgICAgICAgdGFyZWEudGV4dG9PcmlnaW5hbCB8fCB0YXJlYS50ZXh0byxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGV4dG9EaXYuYXBwZW5kQ2hpbGQoY2hlY2tib3hTcGFuKTtcbiAgICBcbiAgICAvLyBDb250ZW5pZG8gZGUgbGEgdGFyZWFcbiAgICBjb25zdCBjb250ZW5pZG9TcGFuID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnc3BhbicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3RhcmVhLWNvbnRlbmlkbycsXG4gICAgICB0ZXh0Q29udGVudDogdGFyZWEudGV4dG8sXG4gICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICdkYXRhLXBhdGgnOiB0YXJlYS5ydXRhQXJjaGl2byxcbiAgICAgICAgJ2RhdGEtbGluZSc6IFN0cmluZyh0YXJlYS5saW5lSW5mbz8ubnVtZXJvIHx8IDApXG4gICAgICB9LFxuICAgICAgc3R5bGVzOiB7XG4gICAgICAgIGN1cnNvcjogJ3BvaW50ZXInXG4gICAgICB9LFxuICAgICAgZXZlbnRzOiB7XG4gICAgICAgIGNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgTmF2aWdhdGlvblV0aWxzLm5hdmVnYXJBVGFyZWFDb25SZXNhbHRhZG8oXG4gICAgICAgICAgICB0YXJlYS5ydXRhQXJjaGl2byxcbiAgICAgICAgICAgIHRhcmVhLmxpbmVJbmZvPy5udW1lcm8gfHwgMCxcbiAgICAgICAgICAgIHRhcmVhLnRleHRvT3JpZ2luYWwgfHwgdGFyZWEudGV4dG8sXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHRleHRvRGl2LmFwcGVuZENoaWxkKGNvbnRlbmlkb1NwYW4pO1xuICAgIHRhcmVhRGl2LmFwcGVuZENoaWxkKHRleHRvRGl2KTtcbiAgICBcbiAgICAvLyBNZXRhZGF0b3NcbiAgICBjb25zdCBtZXRhZGF0b3NEaXYgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd0YXJlYS1tZXRhZGF0b3MnXG4gICAgfSk7XG4gICAgXG4gICAgLy8gQVx1MDBGMWFkaXIgbWV0YWRhdG9zXG4gICAgdGhpcy5hXHUwMEYxYWRpck1ldGFkYXRvc1ViaWNhY2lvbih0YXJlYSwgbWV0YWRhdG9zRGl2KTtcbiAgICB0aGlzLmFcdTAwRjFhZGlyTWV0YWRhdG9zRmVjaGFzKHRhcmVhLCBtZXRhZGF0b3NEaXYpO1xuICAgIHRoaXMuYVx1MDBGMWFkaXJNZXRhZGF0b3NQZXJzb25hcyh0YXJlYSwgbWV0YWRhdG9zRGl2KTtcbiAgICB0aGlzLmFcdTAwRjFhZGlyTWV0YWRhdG9zQ29udGV4dG9zKHRhcmVhLCBtZXRhZGF0b3NEaXYpO1xuICAgIHRoaXMuYVx1MDBGMWFkaXJNZXRhZGF0b3NFdGlxdWV0YXModGFyZWEsIG1ldGFkYXRvc0Rpdik7XG4gICAgXG4gICAgLy8gQVx1MDBGMWFkaXIgYm90b25lcyBkZSBhY2NpXHUwMEYzbiBwYXJhIGNsYXNpZmljYXIgbGEgdGFyZWFcbiAgICB0aGlzLmFcdTAwRjFhZGlyQm90b25lc0FjY2lvbih0YXJlYSwgbWV0YWRhdG9zRGl2KTtcbiAgICBcbiAgICB0YXJlYURpdi5hcHBlbmRDaGlsZChtZXRhZGF0b3NEaXYpO1xuICAgIFxuICAgIHJldHVybiB0YXJlYURpdjtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEFcdTAwRjFhZGUgbWV0YWRhdG9zIGRlIHViaWNhY2lcdTAwRjNuIGEgdW5hIHRhcmVhXG4gICAqL1xuICBwcml2YXRlIGFcdTAwRjFhZGlyTWV0YWRhdG9zVWJpY2FjaW9uKHRhcmVhOiBUYXJlYUluYm94LCBjb250YWluZXI6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgY29uc3QgdWJpY2FjaW9uRGl2ID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndGFyZWEtbWV0YS1pdGVtJ1xuICAgIH0pO1xuICAgIFxuICAgIGNvbnN0IGljb25vVWJpY2FjaW9uID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnc3BhbicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ21ldGFkYXRvLWljb25vJyxcbiAgICAgIHRleHRDb250ZW50OiAnXHVEODNEXHVEQ0NEJ1xuICAgIH0pO1xuICAgIHViaWNhY2lvbkRpdi5hcHBlbmRDaGlsZChpY29ub1ViaWNhY2lvbik7XG4gICAgXG4gICAgY29uc3QgdmFsb3JVYmljYWNpb24gPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdzcGFuJywge1xuICAgICAgY2xhc3NOYW1lOiAndWJpY2FjaW9uLXZhbG9yJyxcbiAgICAgIHRleHRDb250ZW50OiB0YXJlYS5saW5lSW5mbz8ubnVtZXJvIFxuICAgICAgICA/IGBMXHUwMEVEbmVhICR7dGFyZWEubGluZUluZm8ubnVtZXJvfWAgXG4gICAgICAgIDogXCJQb3NpY2lcdTAwRjNuIGRlc2Nvbm9jaWRhXCJcbiAgICB9KTtcbiAgICBcbiAgICB1YmljYWNpb25EaXYuYXBwZW5kQ2hpbGQodmFsb3JVYmljYWNpb24pO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh1YmljYWNpb25EaXYpO1xuICB9XG4gIFxuICAvKipcbiAgICogQVx1MDBGMWFkZSBtZXRhZGF0b3MgZGUgZmVjaGFzIGEgdW5hIHRhcmVhXG4gICAqL1xuICBwcml2YXRlIGFcdTAwRjFhZGlyTWV0YWRhdG9zRmVjaGFzKHRhcmVhOiBUYXJlYUluYm94LCBjb250YWluZXI6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgaWYgKCF0YXJlYS5mZWNoYVZlbmNpbWllbnRvICYmICF0YXJlYS5mZWNoYVNjaGVkdWxlZCAmJiAhdGFyZWEuZmVjaGFTdGFydCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBmZWNoYXNEaXYgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd0YXJlYS1tZXRhLWl0ZW0nXG4gICAgfSk7XG4gICAgXG4gICAgY29uc3QgaWNvbm9GZWNoYSA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7XG4gICAgICBjbGFzc05hbWU6ICdtZXRhZGF0by1pY29ubycsXG4gICAgICB0ZXh0Q29udGVudDogJ1x1RDgzRFx1RENDNSdcbiAgICB9KTtcbiAgICBmZWNoYXNEaXYuYXBwZW5kQ2hpbGQoaWNvbm9GZWNoYSk7XG4gICAgXG4gICAgY29uc3QgdmFsb3JGZWNoYXMgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgXG4gICAgbGV0IHRleHRvZmVjaGFzID0gW107XG4gICAgaWYgKHRhcmVhLmZlY2hhVmVuY2ltaWVudG8pIHtcbiAgICAgIHRleHRvZmVjaGFzLnB1c2goYFZlbmNlOiAke3RhcmVhLmZlY2hhVmVuY2ltaWVudG99YCk7XG4gICAgfVxuICAgIGlmICh0YXJlYS5mZWNoYVNjaGVkdWxlZCkge1xuICAgICAgdGV4dG9mZWNoYXMucHVzaChgUHJvZ3JhbWFkYTogJHt0YXJlYS5mZWNoYVNjaGVkdWxlZH1gKTtcbiAgICB9XG4gICAgaWYgKHRhcmVhLmZlY2hhU3RhcnQpIHtcbiAgICAgIHRleHRvZmVjaGFzLnB1c2goYEluaWNpYTogJHt0YXJlYS5mZWNoYVN0YXJ0fWApO1xuICAgIH1cbiAgICBcbiAgICB2YWxvckZlY2hhcy50ZXh0Q29udGVudCA9IHRleHRvZmVjaGFzLmpvaW4oJyB8ICcpO1xuICAgIGZlY2hhc0Rpdi5hcHBlbmRDaGlsZCh2YWxvckZlY2hhcyk7XG4gICAgXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGZlY2hhc0Rpdik7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBBXHUwMEYxYWRlIG1ldGFkYXRvcyBkZSBwZXJzb25hcyBhc2lnbmFkYXMgYSB1bmEgdGFyZWFcbiAgICovXG4gIHByaXZhdGUgYVx1MDBGMWFkaXJNZXRhZGF0b3NQZXJzb25hcyh0YXJlYTogVGFyZWFJbmJveCwgY29udGFpbmVyOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgIGlmICghdGFyZWEuZXRpcXVldGFzLnBlcnNvbmFzPy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgcGVyc29uYXNEaXYgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd0YXJlYS1tZXRhLWl0ZW0nXG4gICAgfSk7XG4gICAgXG4gICAgY29uc3QgaWNvbm9QZXJzb25hcyA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7XG4gICAgICBjbGFzc05hbWU6ICdtZXRhZGF0by1pY29ubycsXG4gICAgICB0ZXh0Q29udGVudDogJ1x1RDgzRFx1REM2NCdcbiAgICB9KTtcbiAgICBwZXJzb25hc0Rpdi5hcHBlbmRDaGlsZChpY29ub1BlcnNvbmFzKTtcbiAgICBcbiAgICBjb25zdCB2YWxvclBlcnNvbmFzID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnc3BhbicsIHtcbiAgICAgIHRleHRDb250ZW50OiB0YXJlYS5ldGlxdWV0YXMucGVyc29uYXMuam9pbignIHwgJylcbiAgICB9KTtcbiAgICBwZXJzb25hc0Rpdi5hcHBlbmRDaGlsZCh2YWxvclBlcnNvbmFzKTtcbiAgICBcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQocGVyc29uYXNEaXYpO1xuICB9XG4gIFxuICAvKipcbiAgICogQVx1MDBGMWFkZSBtZXRhZGF0b3MgZGUgY29udGV4dG9zIGEgdW5hIHRhcmVhXG4gICAqL1xuICBwcml2YXRlIGFcdTAwRjFhZGlyTWV0YWRhdG9zQ29udGV4dG9zKHRhcmVhOiBUYXJlYUluYm94LCBjb250YWluZXI6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgaWYgKCF0YXJlYS5ldGlxdWV0YXMuY29udGV4dG9zPy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgY29udGV4dG9zRGl2ID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndGFyZWEtbWV0YS1pdGVtJ1xuICAgIH0pO1xuICAgIFxuICAgIGNvbnN0IGljb25vQ29udGV4dG9zID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnc3BhbicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ21ldGFkYXRvLWljb25vJyxcbiAgICAgIHRleHRDb250ZW50OiAnXHVEODNEXHVEREMyXHVGRTBGJ1xuICAgIH0pO1xuICAgIGNvbnRleHRvc0Rpdi5hcHBlbmRDaGlsZChpY29ub0NvbnRleHRvcyk7XG4gICAgXG4gICAgY29uc3QgdmFsb3JDb250ZXh0b3MgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdzcGFuJywge1xuICAgICAgdGV4dENvbnRlbnQ6IHRhcmVhLmV0aXF1ZXRhcy5jb250ZXh0b3Muam9pbignIHwgJylcbiAgICB9KTtcbiAgICBjb250ZXh0b3NEaXYuYXBwZW5kQ2hpbGQodmFsb3JDb250ZXh0b3MpO1xuICAgIFxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjb250ZXh0b3NEaXYpO1xuICB9XG4gIFxuICAvKipcbiAgICogQVx1MDBGMWFkZSBtZXRhZGF0b3MgZGUgZXRpcXVldGFzIChleGNsdXllbmRvICNpbmJveCkgYSB1bmEgdGFyZWFcbiAgICovXG4gIHByaXZhdGUgYVx1MDBGMWFkaXJNZXRhZGF0b3NFdGlxdWV0YXModGFyZWE6IFRhcmVhSW5ib3gsIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICAvLyBPdHJhcyBldGlxdWV0YXMgKGV4Y2x1eWVuZG8gI2luYm94KVxuICAgIGNvbnN0IG90cmFzRXRpcXVldGFzID0gdGFyZWEuZXRpcXVldGFzLm90cmFzLmZpbHRlcih0YWcgPT4gdGFnLnRvTG93ZXJDYXNlKCkgIT09ICcjaW5ib3gnKTtcbiAgICBpZiAoIW90cmFzRXRpcXVldGFzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBldGlxdWV0YXNEaXYgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd0YXJlYS1tZXRhLWl0ZW0nXG4gICAgfSk7XG4gICAgXG4gICAgY29uc3QgaWNvbm9FdGlxdWV0YXMgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdzcGFuJywge1xuICAgICAgY2xhc3NOYW1lOiAnbWV0YWRhdG8taWNvbm8nLFxuICAgICAgdGV4dENvbnRlbnQ6ICdcdUQ4M0NcdURGRjdcdUZFMEYnXG4gICAgfSk7XG4gICAgZXRpcXVldGFzRGl2LmFwcGVuZENoaWxkKGljb25vRXRpcXVldGFzKTtcbiAgICBcbiAgICBjb25zdCB2YWxvckV0aXF1ZXRhcyA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7XG4gICAgICB0ZXh0Q29udGVudDogb3RyYXNFdGlxdWV0YXMuam9pbignICcpXG4gICAgfSk7XG4gICAgZXRpcXVldGFzRGl2LmFwcGVuZENoaWxkKHZhbG9yRXRpcXVldGFzKTtcbiAgICBcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZXRpcXVldGFzRGl2KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEFcdTAwRjFhZGUgYm90b25lcyBkZSBhY2NpXHUwMEYzbiByXHUwMEUxcGlkYSBwYXJhIGNsYXNpZmljYXIgbGEgdGFyZWFcbiAgICovXG4gIHByaXZhdGUgYVx1MDBGMWFkaXJCb3RvbmVzQWNjaW9uKHRhcmVhOiBUYXJlYUluYm94LCBjb250YWluZXI6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgY29uc3QgYWNjaW9uZXNEaXYgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd0YXJlYS1hY2Npb25lcycsXG4gICAgICBzdHlsZXM6IHtcbiAgICAgICAgbWFyZ2luVG9wOiAnOHB4JyxcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBnYXA6ICc4cHgnLFxuICAgICAgICBmbGV4V3JhcDogJ3dyYXAnXG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgLy8gRXN0aWxvcyBjb211bmVzIHBhcmEgYm90b25lc1xuICAgIGNvbnN0IGVzdGlsb3NCb3RvbmVzID0ge1xuICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgIHBhZGRpbmc6ICczcHggOHB4JyxcbiAgICAgIGJvcmRlclJhZGl1czogJzRweCcsXG4gICAgICBib3JkZXI6ICcxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5KScsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJ1xuICAgIH07XG4gICAgXG4gICAgLy8gQm90XHUwMEYzbiBwYXJhIGVkaXRhci9hYnJpciBsYSB0YXJlYVxuICAgIGNvbnN0IGJ0bkVkaXRhciA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3RhcmVhLWFjY2lvbi1idG4nLFxuICAgICAgdGV4dENvbnRlbnQ6ICdcdTI3MEZcdUZFMEYgRWRpdGFyJyxcbiAgICAgIHN0eWxlczogZXN0aWxvc0JvdG9uZXMsXG4gICAgICBldmVudHM6IHtcbiAgICAgICAgY2xpY2s6ICgpID0+IHtcbiAgICAgICAgICBOYXZpZ2F0aW9uVXRpbHMubmF2ZWdhckFUYXJlYUNvblJlc2FsdGFkbyhcbiAgICAgICAgICAgIHRhcmVhLnJ1dGFBcmNoaXZvLFxuICAgICAgICAgICAgdGFyZWEubGluZUluZm8/Lm51bWVybyB8fCAwLFxuICAgICAgICAgICAgdGFyZWEudGV4dG9PcmlnaW5hbCB8fCB0YXJlYS50ZXh0byxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgYWNjaW9uZXNEaXYuYXBwZW5kQ2hpbGQoYnRuRWRpdGFyKTtcbiAgICBcbiAgICAvLyBBXHUwMEYxYWRpciBib3RvbmVzIGRlIGFjY2lcdTAwRjNuIHJcdTAwRTFwaWRhIHBhcmEgY2xhc2lmaWNhciBwb3IgY29udGV4dG9zIGNvbXVuZXNcbiAgICBjb25zdCBjb250ZXh0b3NDb211bmVzID0gW1wiI2N4L3RyYWJham9cIiwgXCIjY3gvcGVyc29uYWxcIiwgXCIjY3gvaG9nYXJcIl07XG4gICAgXG4gICAgZm9yIChjb25zdCBjb250ZXh0byBvZiBjb250ZXh0b3NDb211bmVzKSB7XG4gICAgICBjb25zdCBidG5Db250ZXh0byA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHtcbiAgICAgICAgY2xhc3NOYW1lOiAndGFyZWEtYWNjaW9uLWJ0biBjb250ZXh0by1idG4nLFxuICAgICAgICB0ZXh0Q29udGVudDogY29udGV4dG8sXG4gICAgICAgIHN0eWxlczogZXN0aWxvc0JvdG9uZXMsXG4gICAgICAgIGV2ZW50czoge1xuICAgICAgICAgIGNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAvLyBEZSBtb21lbnRvLCBzaW1wbGVtZW50ZSBhYnJpciBsYSB0YXJlYSAtIHVuYSBpbXBsZW1lbnRhY2lcdTAwRjNuIG1cdTAwRTFzIGNvbXBsZXRhIHBvZHJcdTAwRURhIGFcdTAwRjFhZGlyXG4gICAgICAgICAgICAvLyBlbCBjb250ZXh0byBkaXJlY3RhbWVudGUgYSBsYSB0YXJlYSwgcGVybyByZXF1ZXJpclx1MDBFRGEgbVx1MDBFMXMgaW50ZWdyYWNpXHUwMEYzbiBjb24gZWwgcGx1Z2luXG4gICAgICAgICAgICBOYXZpZ2F0aW9uVXRpbHMubmF2ZWdhckFUYXJlYUNvblJlc2FsdGFkbyhcbiAgICAgICAgICAgICAgdGFyZWEucnV0YUFyY2hpdm8sXG4gICAgICAgICAgICAgIHRhcmVhLmxpbmVJbmZvPy5udW1lcm8gfHwgMCxcbiAgICAgICAgICAgICAgdGFyZWEudGV4dG9PcmlnaW5hbCB8fCB0YXJlYS50ZXh0byxcbiAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbmV3IHRoaXMucGx1Z2luLmFwcC5Ob3RpY2UoXG4gICAgICAgICAgICAgIGBQYXJhIGFcdTAwRjFhZGlyIFwiJHtjb250ZXh0b31cIiBhIGVzdGEgdGFyZWEsIGVkXHUwMEVEdGFsYSBlbiBlbCBhcmNoaXZvIGFiaWVydG8uYCwgXG4gICAgICAgICAgICAgIDUwMDBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgYWNjaW9uZXNEaXYuYXBwZW5kQ2hpbGQoYnRuQ29udGV4dG8pO1xuICAgIH1cbiAgICBcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoYWNjaW9uZXNEaXYpO1xuICB9XG4gIFxuICAvKipcbiAgICogRXhwYW5kZSB0b2RvcyBsb3MgZ3J1cG9zIGRlIHRhcmVhcyBlbiBlbCBjb250ZW5lZG9yXG4gICAqL1xuICBwcml2YXRlIGV4cGFuZGlyVG9kYXMoY29udGFpbmVyOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgIC8vIE9idGVuZXIgdG9kb3MgbG9zIHRvZ2dsZXMgZGUgZ3J1cG9zIGRlIHRhcmVhc1xuICAgIGNvbnN0IHRvZ2dsZXMgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLnRhcmVhLWdyb3VwLXRvZ2dsZScpO1xuICAgIGNvbnN0IGxpc3RhcyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcudGFyZWEtbGlzdCcpO1xuICAgIFxuICAgIC8vIEV4cGFuZGlyIGNhZGEgdW5vXG4gICAgdG9nZ2xlcy5mb3JFYWNoKCh0b2dnbGUsIGluZGV4KSA9PiB7XG4gICAgICB0b2dnbGUuY2xhc3NMaXN0LmFkZCgnb3BlbicpO1xuICAgICAgKHRvZ2dsZSBhcyBIVE1MRWxlbWVudCkudGV4dENvbnRlbnQgPSBcIlx1MjVCQ1wiO1xuICAgICAgXG4gICAgICAvLyBBc2VndXJhcnNlIGRlIHF1ZSBsYSBsaXN0YSBjb3JyZXNwb25kaWVudGUgZXN0XHUwMEU5IHZpc2libGVcbiAgICAgIGlmIChsaXN0YXNbaW5kZXhdKSB7XG4gICAgICAgIGxpc3Rhc1tpbmRleF0uY2xhc3NMaXN0LmFkZCgnb3BlbicpO1xuICAgICAgICAobGlzdGFzW2luZGV4XSBhcyBIVE1MRWxlbWVudCkuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjsgLy8gQXNlZ3VyYXIgdmlzaWJpbGlkYWQgZGlyZWN0YW1lbnRlXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBDb2xhcHNhIHRvZG9zIGxvcyBncnVwb3MgZGUgdGFyZWFzIGVuIGVsIGNvbnRlbmVkb3JcbiAgICovXG4gIHByaXZhdGUgY29sYXBzYXJUb2Rhcyhjb250YWluZXI6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgLy8gT2J0ZW5lciB0b2RvcyBsb3MgdG9nZ2xlcyBkZSBncnVwb3MgZGUgdGFyZWFzXG4gICAgY29uc3QgdG9nZ2xlcyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcudGFyZWEtZ3JvdXAtdG9nZ2xlJyk7XG4gICAgY29uc3QgbGlzdGFzID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy50YXJlYS1saXN0Jyk7XG4gICAgXG4gICAgLy8gQ29sYXBzYXIgY2FkYSB1bm9cbiAgICB0b2dnbGVzLmZvckVhY2goKHRvZ2dsZSwgaW5kZXgpID0+IHtcbiAgICAgIHRvZ2dsZS5jbGFzc0xpc3QucmVtb3ZlKCdvcGVuJyk7XG4gICAgICAodG9nZ2xlIGFzIEhUTUxFbGVtZW50KS50ZXh0Q29udGVudCA9IFwiXHUyNUI2XCI7XG4gICAgICBcbiAgICAgIC8vIEFzZWd1cmFyc2UgZGUgcXVlIGxhIGxpc3RhIGNvcnJlc3BvbmRpZW50ZSBlc3RcdTAwRTkgb2N1bHRhXG4gICAgICBpZiAobGlzdGFzW2luZGV4XSkge1xuICAgICAgICBsaXN0YXNbaW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoJ29wZW4nKTtcbiAgICAgICAgKGxpc3Rhc1tpbmRleF0gYXMgSFRNTEVsZW1lbnQpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjsgLy8gT2N1bHRhciBkaXJlY3RhbWVudGVcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEFcdTAwRjFhZGUgZXN0aWxvcyBpbmxpbmUgYWwgY29udGVuZWRvciAoc29sdWNpXHUwMEYzbiB0ZW1wb3JhbClcbiAgICogRW4gdW5hIHJlZmFjdG9yaXphY2lcdTAwRjNuIGNvbXBsZXRhLCBlc3RvcyBlc3RpbG9zIGRlYmVyXHUwMEVEYW4gbW92ZXJzZSBhIHVuIGFyY2hpdm8gQ1NTXG4gICAqL1xuICBwcml2YXRlIGFcdTAwRjFhZGlyRXN0aWxvcyhjb250YWluZXI6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgY29uc3Qgc3R5bGVFbCA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJywge1xuICAgICAgdGV4dENvbnRlbnQ6IGBcbiAgICAgIC50YXJlYXMtaW5ib3gtY29udGFpbmVyIHtcbiAgICAgICAgICBmb250LXNpemU6IDAuOTVlbTtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC5pbmJveC1oZWFkaW5nIHtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAxcmVtO1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcbiAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xuICAgICAgICAgIHBhZGRpbmctYm90dG9tOiA2cHg7XG4gICAgICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICAgICAgICBmb250LXNpemU6IDEuM2VtO1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICB9XG4gICAgICBcbiAgICAgIC5zdGF0cy1iYWRnZSB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taW50ZXJhY3RpdmUtYWNjZW50KTtcbiAgICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogMTJweDtcbiAgICAgICAgICBwYWRkaW5nOiAycHggMTBweDtcbiAgICAgICAgICBmb250LXNpemU6IDAuOGVtO1xuICAgICAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC50YXJlYXMtY29udHJvbHMge1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgZ2FwOiAxMHB4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC50YXJlYXMtYnRuIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLXNlY29uZGFyeS1hbHQpO1xuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA2cHg7XG4gICAgICAgICAgcGFkZGluZzogNnB4IDEycHg7XG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2U7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC50YXJlYXMtYnRuOmhvdmVyIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWhvdmVyKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLmV4cGFuZC1idG46aG92ZXIge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWludGVyYWN0aXZlLWFjY2VudCk7XG4gICAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgfVxuICAgICAgXG4gICAgICAudGFyZWEtZ3JvdXAge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5KTtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcbiAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgfVxuICAgICAgXG4gICAgICAudGFyZWEtZ3JvdXAtaGVhZGVyIHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIHBhZGRpbmc6IDhweCAxMnB4O1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5LWFsdCk7XG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xuICAgICAgfVxuICAgICAgXG4gICAgICAudGFyZWEtZ3JvdXAtaGVhZGVyOmhvdmVyIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWhvdmVyKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLnRhcmVhLWdyb3VwLXRpdGxlIHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgZ2FwOiA4cHg7XG4gICAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLnRhcmVhLWdyb3VwLXRvZ2dsZSB7XG4gICAgICAgICAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcbiAgICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4ycyBlYXNlO1xuICAgICAgfVxuICAgICAgXG4gICAgICAudGFyZWEtZ3JvdXAtdG9nZ2xlLm9wZW4ge1xuICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLnRhcmVhLWdyb3VwLWNvdW50IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1pbnRlcmFjdGl2ZS1hY2NlbnQpO1xuICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICAgICAgICAgIHBhZGRpbmc6IDFweCA4cHg7XG4gICAgICAgICAgZm9udC1zaXplOiAwLjg1ZW07XG4gICAgICB9XG4gICAgICBcbiAgICAgIC50YXJlYS1saXN0IHtcbiAgICAgICAgICBwYWRkaW5nOiAwIDEycHggMTJweDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLnRhcmVhLWl0ZW0ge1xuICAgICAgICAgIG1hcmdpbjogOHB4IDA7XG4gICAgICAgICAgcGFkZGluZzogOHB4O1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLXByaW1hcnkpO1xuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcbiAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlO1xuICAgICAgfVxuICAgICAgXG4gICAgICAudGFyZWEtaXRlbTpob3ZlciB7XG4gICAgICAgICAgYm94LXNoYWRvdzogMCAycHggOHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTJweCk7XG4gICAgICAgICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1pbnRlcmFjdGl2ZS1hY2NlbnQpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAudGFyZWEtdGV4dG8ge1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDZweDtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGdhcDogOHB4O1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICAgICAgfVxuICAgICAgXG4gICAgICAudGFyZWEtY2hlY2tib3gge1xuICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LWZhaW50KTtcbiAgICAgICAgICBmb250LXNpemU6IDEuMWVtO1xuICAgICAgICAgIGZsZXgtc2hyaW5rOiAwO1xuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLnRhcmVhLWNvbnRlbmlkbyB7XG4gICAgICAgICAgZmxleC1ncm93OiAxO1xuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxLjQ7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC50YXJlYS1tZXRhZGF0b3Mge1xuICAgICAgICAgIG1hcmdpbi1sZWZ0OiAyOHB4O1xuICAgICAgICAgIGZvbnQtc2l6ZTogMC45ZW07XG4gICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtbXV0ZWQpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAudGFyZWEtbWV0YS1pdGVtIHtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzcHg7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogYmFzZWxpbmU7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC5tZXRhZGF0by1pY29ubyB7XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiA2cHg7XG4gICAgICAgICAgd2lkdGg6IDE2cHg7XG4gICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgfVxuICAgICAgXG4gICAgICAubG9hZGluZy1pbmRpY2F0b3Ige1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIHBhZGRpbmc6IDJyZW07XG4gICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtbXV0ZWQpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAuc3Bpbm5lciB7XG4gICAgICAgICAgYm9yZGVyOiAzcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjEpO1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgICAgICBib3JkZXItdG9wOiAzcHggc29saWQgdmFyKC0taW50ZXJhY3RpdmUtYWNjZW50KTtcbiAgICAgICAgICB3aWR0aDogMzBweDtcbiAgICAgICAgICBoZWlnaHQ6IDMwcHg7XG4gICAgICAgICAgYW5pbWF0aW9uOiBzcGluIDFzIGxpbmVhciBpbmZpbml0ZTtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xuICAgICAgfVxuICAgICAgXG4gICAgICBAa2V5ZnJhbWVzIHNwaW4ge1xuICAgICAgICAgIDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7IH1cbiAgICAgICAgICAxMDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTsgfVxuICAgICAgfVxuICAgICAgXG4gICAgICAuZXJyb3ItbWVzc2FnZSB7XG4gICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtZXJyb3IpO1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEodmFyKC0tdGV4dC1lcnJvci1yZ2IpLCAwLjEpO1xuICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICBtYXJnaW46IDEwcHggMDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLmVtcHR5LW1lc3NhZ2Uge1xuICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW11dGVkKTtcbiAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgcGFkZGluZzogMnJlbTtcbiAgICAgICAgICBmb250LXN0eWxlOiBpdGFsaWM7XG4gICAgICB9XG4gICAgICBgXG4gICAgfSk7XG4gICAgXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHN0eWxlRWwpO1xuICB9XG59IiwgIi8vIHNyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL0FQSS9jb21wb25lbnRzL1Byb3llY3RvQ2FtcGFuYXNDb21wb25lbnQudHNcblxuaW1wb3J0IHsgRE9NVXRpbHMgfSBmcm9tICcuLi91dGlscy9ET01VdGlscyc7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uVXRpbHMgfSBmcm9tICcuLi91dGlscy9OYXZpZ2F0aW9uVXRpbHMnO1xuXG4vKipcbiAqIEludGVyZmF6IHBhcmEgbGEgaW5mb3JtYWNpXHUwMEYzbiBkZSB1biBlbnRyZWdhYmxlXG4gKi9cbmludGVyZmFjZSBFbnRyZWdhYmxlIHtcbiAgaWQ6IHN0cmluZztcbiAgdGl0dWxvOiBzdHJpbmc7XG4gIHBhdGg6IHN0cmluZztcbiAgaGl0czogbnVtYmVyO1xuICBlc3RhZG86IHN0cmluZztcbiAgZmVjaGFQdWJsaWNhY2lvbj86IHN0cmluZztcbiAgZGlmZXJlbmNpYURpYXM/OiBudW1iZXI7XG4gIGFsaWFzPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEludGVyZmF6IHBhcmEgbGEgaW5mb3JtYWNpXHUwMEYzbiBkZSB1bmEgY2FtcGFcdTAwRjFhXG4gKi9cbmludGVyZmFjZSBDYW1wYW5hIHtcbiAgaWQ6IHN0cmluZztcbiAgdGl0dWxvOiBzdHJpbmc7XG4gIHBhdGg6IHN0cmluZztcbiAgZW50cmVnYWJsZXM6IEVudHJlZ2FibGVbXTtcbiAgaGl0czogbnVtYmVyO1xuICBlc3RhZG86IHN0cmluZztcbiAgZmVjaGFJbmljaW8/OiBzdHJpbmc7XG4gIGZlY2hhRmluPzogc3RyaW5nO1xuICBhbGlhcz86IHN0cmluZztcbiAgZGlmZXJlbmNpYURpYXNQcm94aW1vPzogbnVtYmVyO1xufVxuXG4vKipcbiAqIEludGVyZmF6IHBhcmEgbGEgaW5mb3JtYWNpXHUwMEYzbiBkZSB1biBwcm95ZWN0byBHVERcbiAqL1xuaW50ZXJmYWNlIFByb3llY3RvR1REIHtcbiAgaWQ6IHN0cmluZztcbiAgdGl0dWxvOiBzdHJpbmc7XG4gIHBhdGg6IHN0cmluZztcbiAgY2FtcGFuYXM6IENhbXBhbmFbXTtcbiAgaGl0czogbnVtYmVyO1xuICBlc3RhZG86IHN0cmluZztcbiAgYWxpYXM/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQ29tcG9uZW50ZSBwYXJhIGdlc3Rpb25hciB5IG1vc3RyYXIgbGEgamVyYXJxdVx1MDBFRGEgZGUgUHJveWVjdG9zIEdURCB5IHN1cyBDYW1wYVx1MDBGMWFzXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm95ZWN0b0NhbXBhbmFzQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSBwbHVnaW46IGFueTtcbiAgXG4gIGNvbnN0cnVjdG9yKHBsdWdpbjogYW55KSB7XG4gICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgY29uc29sZS5sb2coXCJcdUQ4M0RcdUREMEQgUHJveWVjdG9DYW1wYW5hc0NvbXBvbmVudCBpbmljaWFkb1wiKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEdlbmVyYSB1biBjb21wb25lbnRlIHZpc3VhbCBwYXJhIG1vc3RyYXIgbGEgcmVsYWNpXHUwMEYzbiBlbnRyZSBQcm95ZWN0b3MgR1REIHkgQ2FtcGFcdTAwRjFhc1xuICAgKi9cbiAgYXN5bmMgZ2VuZXJhcihkdjogYW55LCBvcHRpb25zOiB7XG4gICAgbW9kbz86ICdoaXRzJyB8ICdmZWNoYXMnLFxuICAgIHByb3llY3RvQWN0dWFsUGF0aD86IHN0cmluZ1xuICB9ID0ge30pOiBQcm9taXNlPEhUTUxFbGVtZW50PiB7XG4gICAgY29uc29sZS5sb2coXCJcdUQ4M0RcdUREMEQgTVx1MDBFOXRvZG8gZ2VuZXJhciBpbmljaWFkbyBjb24gb3BjaW9uZXM6XCIsIG9wdGlvbnMpO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICAvLyBSZXNvbHZlciBvcGNpb25lcyBjb24gdmFsb3JlcyBwcmVkZXRlcm1pbmFkb3NcbiAgICAgIGNvbnN0IGNvbmZpZ3VyYWNpb24gPSB7XG4gICAgICAgIG1vZG86IG9wdGlvbnMubW9kbyB8fCAnaGl0cycsXG4gICAgICAgIHByb3llY3RvQWN0dWFsUGF0aDogb3B0aW9ucy5wcm95ZWN0b0FjdHVhbFBhdGggfHwgZHYuY3VycmVudCgpPy5maWxlPy5wYXRoXG4gICAgICB9O1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZyhcIlx1RDgzRFx1REQwRCBDb25maWd1cmFjaVx1MDBGM24gZmluYWw6XCIsIGNvbmZpZ3VyYWNpb24pO1xuXG4gICAgICAvLyBDcmVhciBlbCBjb250ZW5lZG9yIHByaW5jaXBhbFxuICAgICAgY29uc3QgY29udGFpbmVyID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICBjbGFzc05hbWU6ICdwcm95ZWN0by1jYW1wYW5hcy1jb250YWluZXInXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gQVx1MDBGMWFkaXIgZW5jYWJlemFkbyBwcmluY2lwYWxcbiAgICAgIGNvbnN0IGhlYWRpbmcgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdoMycsIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnZGFzaGJvYXJkLWhlYWRpbmcnLFxuICAgICAgICB0ZXh0Q29udGVudDogJ0Rhc2hib2FyZCBkZSBQcm95ZWN0b3MgeSBDYW1wYVx1MDBGMWFzJ1xuICAgICAgfSk7XG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaGVhZGluZyk7XG4gICAgICBcbiAgICAgIC8vIEFncmVnYXIgY29udHJvbGVzXG4gICAgICBjb25zdCBjb250cm9sc0RpdiA9IHRoaXMuY3JlYXJDb250cm9sZXMoY29udGFpbmVyLCBjb25maWd1cmFjaW9uLCBhc3luYyAobnVldm9Nb2RvKSA9PiB7XG4gICAgICAgIGNvbnN0IG51ZXZvQ29udGFpbmVyID0gYXdhaXQgdGhpcy5nZW5lcmFyKGR2LCB7IFxuICAgICAgICAgIC4uLmNvbmZpZ3VyYWNpb24sXG4gICAgICAgICAgbW9kbzogbnVldm9Nb2RvIGFzICdoaXRzJyB8ICdmZWNoYXMnXG4gICAgICAgIH0pO1xuICAgICAgICBjb250YWluZXIucGFyZW50Tm9kZT8ucmVwbGFjZUNoaWxkKG51ZXZvQ29udGFpbmVyLCBjb250YWluZXIpO1xuICAgICAgfSk7XG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY29udHJvbHNEaXYpO1xuICAgICAgXG4gICAgICAvLyBBXHUwMEYxYWRpciBpbmRpY2Fkb3IgZGUgY2FyZ2FcbiAgICAgIGNvbnN0IGxvYWRpbmdEaXYgPSBET01VdGlscy5jcmVhdGVMb2FkaW5nSW5kaWNhdG9yKFwiQ2FyZ2FuZG8gZGF0b3MgZGUgcHJveWVjdG9zIHkgY2FtcGFcdTAwRjFhcy4uLlwiKTtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChsb2FkaW5nRGl2KTtcbiAgICAgIFxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJcdUQ4M0RcdUREMEQgSW5pY2lhbmRvIGNhcmdhIGRlIGRhdG9zXCIpO1xuICAgICAgICAvLyBTaSBlc3RhbW9zIHZpZW5kbyB1biBwcm95ZWN0byBlc3BlY1x1MDBFRGZpY28sIHNvbG8gbW9zdHJhciBlc2VcbiAgICAgICAgbGV0IHByb3llY3RvczogUHJveWVjdG9HVERbXSA9IFtdO1xuICAgICAgICBsZXQgZXN0YUVuUHJveWVjdG8gPSBmYWxzZTtcbiAgICAgICAgXG4gICAgICAgIGlmIChjb25maWd1cmFjaW9uLnByb3llY3RvQWN0dWFsUGF0aCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiXHVEODNEXHVERDBEIEJ1c2NhbmRvIHByb3llY3RvIGFjdHVhbDpcIiwgY29uZmlndXJhY2lvbi5wcm95ZWN0b0FjdHVhbFBhdGgpO1xuICAgICAgICAgIGNvbnN0IGFyY2hpdm9BY3R1YWwgPSB0aGlzLnBsdWdpbi5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGNvbmZpZ3VyYWNpb24ucHJveWVjdG9BY3R1YWxQYXRoKTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoYXJjaGl2b0FjdHVhbCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJcdUQ4M0RcdUREMEQgQXJjaGl2byBlbmNvbnRyYWRvOlwiLCBhcmNoaXZvQWN0dWFsLnBhdGgpO1xuICAgICAgICAgICAgY29uc3QgbWV0YWRhdGFBY3R1YWwgPSB0aGlzLnBsdWdpbi5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoYXJjaGl2b0FjdHVhbCk/LmZyb250bWF0dGVyO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJcdUQ4M0RcdUREMEQgRnJvbnRtYXR0ZXIgZGVsIGFyY2hpdm86XCIsIG1ldGFkYXRhQWN0dWFsKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVmVyaWZpY2FyIHNpIGxhIG5vdGEgYWN0dWFsIGVzIHVuIFByb3llY3RvIEdURFxuICAgICAgICAgICAgaWYgKG1ldGFkYXRhQWN0dWFsICYmIG1ldGFkYXRhQWN0dWFsLnR5cGUgPT09IFwiUEdURFwiKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiXHVEODNEXHVERDBEIExhIG5vdGEgYWN0dWFsIGVzIHVuIFBHVERcIik7XG4gICAgICAgICAgICAgIGVzdGFFblByb3llY3RvID0gdHJ1ZTtcbiAgICAgICAgICAgICAgLy8gT2J0ZW5lciBzb2xvIGVzdGUgcHJveWVjdG9cbiAgICAgICAgICAgICAgY29uc3QgcHJveWVjdG9JbmZvID0gYXdhaXQgdGhpcy5vYnRlbmVyRGF0b3NQcm95ZWN0byhkdiwgYXJjaGl2b0FjdHVhbCwgY29uZmlndXJhY2lvbi5tb2RvKTtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJcdUQ4M0RcdUREMEQgUHJveWVjdG8gaW5mbzpcIiwgcHJveWVjdG9JbmZvKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIGlmIChwcm95ZWN0b0luZm8pIHtcbiAgICAgICAgICAgICAgICBwcm95ZWN0b3MgPSBbcHJveWVjdG9JbmZvXTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlx1RDgzRFx1REQwRCBQcm95ZWN0byBhXHUwMEYxYWRpZG8gYSBsaXN0YS4gTlx1MDBGQW1lcm8gZGUgY2FtcGFcdTAwRjFhczpcIiwgcHJveWVjdG9JbmZvLmNhbXBhbmFzLmxlbmd0aCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJcdUQ4M0RcdUREMEQgTm8gc2UgZW5jb250clx1MDBGMyBpbmZvcm1hY2lcdTAwRjNuIGRlbCBwcm95ZWN0b1wiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJcdUQ4M0RcdUREMEQgTGEgbm90YSBhY3R1YWwgTk8gZXMgdW4gUEdURCwgZXM6XCIsIG1ldGFkYXRhQWN0dWFsPy50eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJcdUQ4M0RcdUREMEQgQXJjaGl2byBhY3R1YWwgbm8gZW5jb250cmFkb1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFNpIG5vIGVzdGFtb3MgZW4gdW4gcHJveWVjdG8gbyBubyBzZSBwdWRvIG9idGVuZXIgbGEgaW5mb3JtYWNpXHUwMEYzbiwgb2J0ZW5lciB0b2Rvc1xuICAgICAgICBpZiAoIWVzdGFFblByb3llY3RvIHx8IHByb3llY3Rvcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlx1RDgzRFx1REQwRCBPYnRlbmllbmRvIHRvZG9zIGxvcyBwcm95ZWN0b3NcIik7XG4gICAgICAgICAgcHJveWVjdG9zID0gYXdhaXQgdGhpcy5vYnRlbmVyVG9kb3NMb3NQcm95ZWN0b3MoZHYsIGNvbmZpZ3VyYWNpb24ubW9kbyk7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJcdUQ4M0RcdUREMEQgUHJveWVjdG9zIG9idGVuaWRvczpcIiwgcHJveWVjdG9zLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEVsaW1pbmFyIGVsIGluZGljYWRvciBkZSBjYXJnYVxuICAgICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQobG9hZGluZ0Rpdik7XG4gICAgICAgIFxuICAgICAgICAvLyBTaSBubyBoYXkgcHJveWVjdG9zXG4gICAgICAgIGlmIChwcm95ZWN0b3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJcdUQ4M0RcdUREMEQgTm8gc2UgZW5jb250cmFyb24gcHJveWVjdG9zIGNvbiBjYW1wYVx1MDBGMWFzXCIpO1xuICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChcbiAgICAgICAgICAgIERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnZW1wdHktbWVzc2FnZScsXG4gICAgICAgICAgICAgIHRleHRDb250ZW50OiBcIk5vIHNlIGVuY29udHJhcm9uIHByb3llY3RvcyBjb24gY2FtcGFcdTAwRjFhcyBhc29jaWFkYXMuXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhcIlx1RDgzRFx1REQwRCBQcm95ZWN0b3MgcGFyYSByZW5kZXJpemFyOlwiLCBwcm95ZWN0b3MubGVuZ3RoKTtcbiAgICAgICAgLy8gUmVzdW1lbiBkZSBwcm95ZWN0b3MgeSBjYW1wYVx1MDBGMWFzXG4gICAgICAgIHByb3llY3Rvcy5mb3JFYWNoKChwcm95LCBpZHgpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgXHVEODNEXHVERDBEIFByb3llY3RvICR7aWR4ICsgMX06YCwge1xuICAgICAgICAgICAgdGl0dWxvOiBwcm95LnRpdHVsbyxcbiAgICAgICAgICAgIHBhdGg6IHByb3kucGF0aCxcbiAgICAgICAgICAgIG51bUNhbXBhbmFzOiBwcm95LmNhbXBhbmFzLmxlbmd0aFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWFyIGNvbnRlbmVkb3IgZGUgZXN0YWRcdTAwRURzdGljYXMgZ2xvYmFsZXNcbiAgICAgICAgY29uc3Qgc3RhdHNDb250YWluZXIgPSB0aGlzLmNyZWFyRXN0YWRpc3RpY2FzR2xvYmFsZXMocHJveWVjdG9zKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHN0YXRzQ29udGFpbmVyKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWFyIHkgbW9zdHJhciBcdTAwRTFyYm9sIGplclx1MDBFMXJxdWljbyBkZSBwcm95ZWN0b3MgeSBjYW1wYVx1MDBGMWFzXG4gICAgICAgIGNvbnN0IGplcmFycXVpYUNvbnRhaW5lciA9IHRoaXMuY3JlYXJWaXN0YUplcmFycXVpY2EocHJveWVjdG9zLCBjb25maWd1cmFjaW9uLm1vZG8pO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoamVyYXJxdWlhQ29udGFpbmVyKTtcbiAgICAgICAgXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBFbGltaW5hciBlbCBpbmRpY2Fkb3IgZGUgY2FyZ2FcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGxvYWRpbmdEaXYpO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlx1RDgzRFx1REQwRCBFcnJvciBhbCBjYXJnYXIgZGF0b3M6XCIsIGVycm9yKTtcbiAgICAgICAgXG4gICAgICAgIC8vIE1vc3RyYXIgbWVuc2FqZSBkZSBlcnJvclxuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoXG4gICAgICAgICAgRE9NVXRpbHMuY3JlYXRlRXJyb3JNZXNzYWdlKFxuICAgICAgICAgICAgYEVycm9yIGFsIGNhcmdhciBkYXRvcyBkZSBwcm95ZWN0b3MgeSBjYW1wYVx1MDBGMWFzOiAke2Vycm9yLm1lc3NhZ2V9YCxcbiAgICAgICAgICAgIFwiUmV2aXNhIGxhIGNvbnNvbGEgcGFyYSBtXHUwMEUxcyBkZXRhbGxlcy5cIlxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIlx1RDgzRFx1REQwRCBFcnJvciBnZW5lcmFsIGVuIGdlbmVyYXI6XCIsIGVycm9yKTtcbiAgICAgIFxuICAgICAgLy8gRGV2b2x2ZXIgdW4gbWVuc2FqZSBkZSBlcnJvclxuICAgICAgcmV0dXJuIERPTVV0aWxzLmNyZWF0ZUVycm9yTWVzc2FnZShcbiAgICAgICAgYEVycm9yIGFsIGdlbmVyYXIgdmlzdGEgZGUgcHJveWVjdG9zIHkgY2FtcGFcdTAwRjFhczogJHtlcnJvci5tZXNzYWdlfWAsXG4gICAgICAgIFwiUmV2aXNhIGxhIGNvbnNvbGEgcGFyYSBtXHUwMEUxcyBkZXRhbGxlcy5cIlxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYSBsb3MgY29udHJvbGVzIHBhcmEgY2FtYmlhciBlbCBtb2RvIGRlIHZpc3VhbGl6YWNpXHUwMEYzblxuICAgKi9cbiAgcHJpdmF0ZSBjcmVhckNvbnRyb2xlcyhjb250YWluZXI6IEhUTUxFbGVtZW50LCBjb25maWc6IGFueSwgb25DYW1iaW9Nb2RvOiAobW9kbzogc3RyaW5nKSA9PiB2b2lkKTogSFRNTEVsZW1lbnQge1xuICAgIGNvbnN0IGNvbnRyb2xzRGl2ID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAnZGFzaGJvYXJkLWNvbnRyb2xzJ1xuICAgIH0pO1xuICAgIFxuICAgIC8vIEJvdFx1MDBGM24gZGUgbW9kbyBIaXRzXG4gICAgY29uc3QgYnRuSGl0cyA9IERPTVV0aWxzLmNyZWF0ZUJ1dHRvbihcIlZlciBwb3IgSGl0c1wiLCBcbiAgICAgICgpID0+IG9uQ2FtYmlvTW9kbygnaGl0cycpLFxuICAgICAgeyBcbiAgICAgICAgY2xhc3NOYW1lOiBgZGFzaGJvYXJkLWJ0biBtb2RlLWJ0biAke2NvbmZpZy5tb2RvID09PSAnaGl0cycgPyAnYWN0aXZlJyA6ICcnfWAsXG4gICAgICAgIGljb246ICdcdUQ4M0RcdURDQ0EnXG4gICAgICB9XG4gICAgKTtcbiAgICBcbiAgICAvLyBCb3RcdTAwRjNuIGRlIG1vZG8gRmVjaGFzXG4gICAgY29uc3QgYnRuRmVjaGFzID0gRE9NVXRpbHMuY3JlYXRlQnV0dG9uKFwiVmVyIHBvciBGZWNoYXNcIiwgXG4gICAgICAoKSA9PiBvbkNhbWJpb01vZG8oJ2ZlY2hhcycpLFxuICAgICAgeyBcbiAgICAgICAgY2xhc3NOYW1lOiBgZGFzaGJvYXJkLWJ0biBtb2RlLWJ0biAke2NvbmZpZy5tb2RvID09PSAnZmVjaGFzJyA/ICdhY3RpdmUnIDogJyd9YCxcbiAgICAgICAgaWNvbjogJ1x1RDgzRFx1RENDNSdcbiAgICAgIH1cbiAgICApO1xuICAgIFxuICAgIC8vIEJvdFx1MDBGM24gcGFyYSByZWZyZXNjYXJcbiAgICBjb25zdCByZWZyZXNoQnRuID0gRE9NVXRpbHMuY3JlYXRlQnV0dG9uKFwiQWN0dWFsaXphclwiLFxuICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBkdiA9IHdpbmRvdy5EYXRhdmlld0FQSTsgLy8gQWNjZWRlciBhIGxhIEFQSSBkZSBkYXRhdmlldyBzaSBlc3RcdTAwRTEgZGlzcG9uaWJsZVxuICAgICAgICBpZiAoZHYpIHtcbiAgICAgICAgICBjb25zdCBudWV2b0NvbnRhaW5lciA9IGF3YWl0IHRoaXMuZ2VuZXJhcihkdiwgY29uZmlnKTtcbiAgICAgICAgICBjb250YWluZXIucGFyZW50Tm9kZT8ucmVwbGFjZUNoaWxkKG51ZXZvQ29udGFpbmVyLCBjb250YWluZXIpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgeyBjbGFzc05hbWU6ICdkYXNoYm9hcmQtYnRuIHJlZnJlc2gtYnRuJywgaWNvbjogJ1x1RDgzRFx1REQwNCcgfVxuICAgICk7XG4gICAgXG4gICAgY29udHJvbHNEaXYuYXBwZW5kQ2hpbGQoYnRuSGl0cyk7XG4gICAgY29udHJvbHNEaXYuYXBwZW5kQ2hpbGQoYnRuRmVjaGFzKTtcbiAgICBjb250cm9sc0Rpdi5hcHBlbmRDaGlsZChyZWZyZXNoQnRuKTtcbiAgICBcbiAgICByZXR1cm4gY29udHJvbHNEaXY7XG4gIH1cblxuLyoqXG4gKiBDcmVhIHVuIGNvbnRlbmVkb3IgY29uIGVzdGFkXHUwMEVEc3RpY2FzIGdsb2JhbGVzXG4gKi9cbnByaXZhdGUgY3JlYXJFc3RhZGlzdGljYXNHbG9iYWxlcyhwcm95ZWN0b3M6IFByb3llY3RvR1REW10pOiBIVE1MRWxlbWVudCB7XG4gIGNvbnN0IHN0YXRzQ29udGFpbmVyID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgIGNsYXNzTmFtZTogJ2Rhc2hib2FyZC1zdGF0cy1jb250YWluZXInXG4gIH0pO1xuICBcbiAgLy8gQ2FsY3VsYXIgZXN0YWRcdTAwRURzdGljYXMgZ2xvYmFsZXNcbiAgY29uc3QgdG90YWxQcm95ZWN0b3MgPSBwcm95ZWN0b3MubGVuZ3RoO1xuICBcbiAgLy8gQ29udGFyIGVsZW1lbnRvcyBwb3IgZXN0YWRvXG4gIGxldCB0b3RhbFByb3llY3Rvc0FjdGl2b3MgPSAwO1xuICBsZXQgdG90YWxQcm95ZWN0b3NTdXNwZW5kaWRvcyA9IDA7XG4gIGxldCB0b3RhbFByb3llY3Rvc0FyY2hpdmFkb3MgPSAwO1xuICBsZXQgdG90YWxQcm95ZWN0b3NDYW5jZWxhZG9zID0gMDtcbiAgXG4gIGxldCB0b3RhbENhbXBhbmFzID0gMDtcbiAgbGV0IHRvdGFsQ2FtcGFuYXNBY3RpdmFzID0gMDtcbiAgbGV0IHRvdGFsQ2FtcGFuYXNTdXNwZW5kaWRhcyA9IDA7XG4gIGxldCB0b3RhbENhbXBhbmFzQXJjaGl2YWRhcyA9IDA7XG4gIGxldCB0b3RhbENhbXBhbmFzQ2FuY2VsYWRhcyA9IDA7XG4gIFxuICBsZXQgdG90YWxFbnRyZWdhYmxlcyA9IDA7XG4gIGxldCB0b3RhbEVudHJlZ2FibGVzQWN0aXZvcyA9IDA7XG4gIGxldCB0b3RhbEVudHJlZ2FibGVzU3VzcGVuZGlkb3MgPSAwO1xuICBsZXQgdG90YWxFbnRyZWdhYmxlc0FyY2hpdmFkb3MgPSAwO1xuICBsZXQgdG90YWxFbnRyZWdhYmxlc0NhbmNlbGFkb3MgPSAwO1xuICBcbiAgbGV0IHRvdGFsSGl0cyA9IDA7XG4gIGxldCB0b3RhbEhpdHNBY3Rpdm9zID0gMDtcbiAgbGV0IHRvdGFsSGl0c0FyY2hpdmFkb3MgPSAwO1xuICBcbiAgbGV0IGVudHJlZ2FibGVzVmVuY2lkb3MgPSAwO1xuICBsZXQgZW50cmVnYWJsZXNQb3JWZW5jZXIgPSAwOyAvLyBQclx1MDBGM3hpbW9zIGEgdmVuY2VyICgzIGRcdTAwRURhcyBvIG1lbm9zKVxuICBcbiAgcHJveWVjdG9zLmZvckVhY2gocHJveWVjdG8gPT4ge1xuICAgIC8vIENvbnRhYmlsaXphciBwcm95ZWN0b3MgcG9yIGVzdGFkb1xuICAgIHN3aXRjaChwcm95ZWN0by5lc3RhZG8pIHtcbiAgICAgIGNhc2UgXCJcdUQ4M0RcdURGRTJcIjogdG90YWxQcm95ZWN0b3NBY3Rpdm9zKys7IGJyZWFrO1xuICAgICAgY2FzZSBcIlx1RDgzRFx1REZFMVwiOiB0b3RhbFByb3llY3Rvc1N1c3BlbmRpZG9zKys7IGJyZWFrO1xuICAgICAgY2FzZSBcIlx1RDgzRFx1REQzNVwiOiB0b3RhbFByb3llY3Rvc0FyY2hpdmFkb3MrKzsgYnJlYWs7XG4gICAgICBjYXNlIFwiXHVEODNEXHVERDM0XCI6IHRvdGFsUHJveWVjdG9zQ2FuY2VsYWRvcysrOyBicmVhaztcbiAgICB9XG4gICAgXG4gICAgdG90YWxDYW1wYW5hcyArPSBwcm95ZWN0by5jYW1wYW5hcy5sZW5ndGg7XG4gICAgXG4gICAgLy8gQ29udGFiaWxpemFyIGhpdHMgZGUgcHJveWVjdG9zIGFjdGl2b3MgeSBhcmNoaXZhZG9zXG4gICAgaWYgKHByb3llY3RvLmVzdGFkbyA9PT0gXCJcdUQ4M0RcdURGRTJcIikge1xuICAgICAgdG90YWxIaXRzQWN0aXZvcyArPSBwcm95ZWN0by5oaXRzO1xuICAgIH0gZWxzZSBpZiAocHJveWVjdG8uZXN0YWRvID09PSBcIlx1RDgzRFx1REQzNVwiKSB7XG4gICAgICB0b3RhbEhpdHNBcmNoaXZhZG9zICs9IHByb3llY3RvLmhpdHM7XG4gICAgfVxuICAgIFxuICAgIHRvdGFsSGl0cyArPSBwcm95ZWN0by5oaXRzO1xuICAgIFxuICAgIHByb3llY3RvLmNhbXBhbmFzLmZvckVhY2goY2FtcGFuYSA9PiB7XG4gICAgICAvLyBDb250YWJpbGl6YXIgY2FtcGFcdTAwRjFhcyBwb3IgZXN0YWRvXG4gICAgICBzd2l0Y2goY2FtcGFuYS5lc3RhZG8pIHtcbiAgICAgICAgY2FzZSBcIlx1RDgzRFx1REZFMlwiOiB0b3RhbENhbXBhbmFzQWN0aXZhcysrOyBicmVhaztcbiAgICAgICAgY2FzZSBcIlx1RDgzRFx1REZFMVwiOiB0b3RhbENhbXBhbmFzU3VzcGVuZGlkYXMrKzsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJcdUQ4M0RcdUREMzVcIjogdG90YWxDYW1wYW5hc0FyY2hpdmFkYXMrKzsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJcdUQ4M0RcdUREMzRcIjogdG90YWxDYW1wYW5hc0NhbmNlbGFkYXMrKzsgYnJlYWs7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHRvdGFsRW50cmVnYWJsZXMgKz0gY2FtcGFuYS5lbnRyZWdhYmxlcy5sZW5ndGg7XG4gICAgICBcbiAgICAgIGNhbXBhbmEuZW50cmVnYWJsZXMuZm9yRWFjaChlbnRyZWdhYmxlID0+IHtcbiAgICAgICAgLy8gQ29udGFiaWxpemFyIGVudHJlZ2FibGVzIHBvciBlc3RhZG9cbiAgICAgICAgc3dpdGNoKGVudHJlZ2FibGUuZXN0YWRvKSB7XG4gICAgICAgICAgY2FzZSBcIlx1RDgzRFx1REZFMlwiOiB0b3RhbEVudHJlZ2FibGVzQWN0aXZvcysrOyBicmVhaztcbiAgICAgICAgICBjYXNlIFwiXHVEODNEXHVERkUxXCI6IHRvdGFsRW50cmVnYWJsZXNTdXNwZW5kaWRvcysrOyBicmVhaztcbiAgICAgICAgICBjYXNlIFwiXHVEODNEXHVERDM1XCI6IHRvdGFsRW50cmVnYWJsZXNBcmNoaXZhZG9zKys7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJcdUQ4M0RcdUREMzRcIjogdG90YWxFbnRyZWdhYmxlc0NhbmNlbGFkb3MrKzsgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgLy8gQ29udGFiaWxpemFyIGVudHJlZ2FibGVzIHZlbmNpZG9zIG8gcG9yIHZlbmNlciBzZWdcdTAwRkFuIGVzdGFkb1xuICAgICAgaWYgKGVudHJlZ2FibGUuZGlmZXJlbmNpYURpYXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBTb2xvIGxvcyBlbnRyZWdhYmxlcyBhY3Rpdm9zIChcdUQ4M0RcdURGRTIpIG8gcGF1c2Fkb3MgKFx1RDgzRFx1REZFMSkgcHVlZGVuIGVzdGFyIHZlbmNpZG9zXG4gICAgICAgIGlmIChlbnRyZWdhYmxlLmVzdGFkbyA9PT0gXCJcdUQ4M0RcdURGRTJcIiB8fCBlbnRyZWdhYmxlLmVzdGFkbyA9PT0gXCJcdUQ4M0RcdURGRTFcIikge1xuICAgICAgICAgIGlmIChlbnRyZWdhYmxlLmRpZmVyZW5jaWFEaWFzIDwgMCkge1xuICAgICAgICAgICAgZW50cmVnYWJsZXNWZW5jaWRvcysrO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZW50cmVnYWJsZS5kaWZlcmVuY2lhRGlhcyA8PSAzKSB7XG4gICAgICAgICAgICBlbnRyZWdhYmxlc1BvclZlbmNlcisrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBMb3MgZW50cmVnYWJsZXMgYXJjaGl2YWRvcyAoXHVEODNEXHVERDM1KSBvIGNhbmNlbGFkb3MgKFx1RDgzRFx1REQzNCkgbnVuY2EgY3VlbnRhbiBjb21vIHZlbmNpZG9zXG4gICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG4gIFxuICBjb25zb2xlLmxvZyhcIlx1RDgzRFx1REQwRCBFc3RhZFx1MDBFRHN0aWNhcyBnbG9iYWxlczpcIiwge1xuICAgIHRvdGFsUHJveWVjdG9zLFxuICAgIHRvdGFsQ2FtcGFuYXMsXG4gICAgdG90YWxFbnRyZWdhYmxlcyxcbiAgICB0b3RhbEhpdHMsXG4gICAgZW50cmVnYWJsZXNWZW5jaWRvcyxcbiAgICBlbnRyZWdhYmxlc1BvclZlbmNlcixcbiAgICBkZXNnbG9zZToge1xuICAgICAgcHJveWVjdG9zOiB7IGFjdGl2b3M6IHRvdGFsUHJveWVjdG9zQWN0aXZvcywgc3VzcGVuZGlkb3M6IHRvdGFsUHJveWVjdG9zU3VzcGVuZGlkb3MsIGFyY2hpdmFkb3M6IHRvdGFsUHJveWVjdG9zQXJjaGl2YWRvcywgY2FuY2VsYWRvczogdG90YWxQcm95ZWN0b3NDYW5jZWxhZG9zIH0sXG4gICAgICBjYW1wYW5hczogeyBhY3RpdmFzOiB0b3RhbENhbXBhbmFzQWN0aXZhcywgc3VzcGVuZGlkYXM6IHRvdGFsQ2FtcGFuYXNTdXNwZW5kaWRhcywgYXJjaGl2YWRhczogdG90YWxDYW1wYW5hc0FyY2hpdmFkYXMsIGNhbmNlbGFkYXM6IHRvdGFsQ2FtcGFuYXNDYW5jZWxhZGFzIH0sXG4gICAgICBlbnRyZWdhYmxlczogeyBhY3Rpdm9zOiB0b3RhbEVudHJlZ2FibGVzQWN0aXZvcywgc3VzcGVuZGlkb3M6IHRvdGFsRW50cmVnYWJsZXNTdXNwZW5kaWRvcywgYXJjaGl2YWRvczogdG90YWxFbnRyZWdhYmxlc0FyY2hpdmFkb3MsIGNhbmNlbGFkb3M6IHRvdGFsRW50cmVnYWJsZXNDYW5jZWxhZG9zIH0sXG4gICAgICBoaXRzOiB7IGFjdGl2b3M6IHRvdGFsSGl0c0FjdGl2b3MsIGFyY2hpdmFkb3M6IHRvdGFsSGl0c0FyY2hpdmFkb3MgfVxuICAgIH1cbiAgfSk7XG4gIFxuICAvLyBDcmVhciB0YXJqZXRhcyBkZSBlc3RhZFx1MDBFRHN0aWNhcyBwcmluY2lwYWxlc1xuICB0aGlzLmNyZWFyVGFyamV0YUVzdGFkaXN0aWNhKHN0YXRzQ29udGFpbmVyLCBcIlx1RDgzRFx1RENDMlwiLCBcIlByb3llY3Rvc1wiLCB0b3RhbFByb3llY3Rvcyk7XG4gIHRoaXMuY3JlYXJUYXJqZXRhRXN0YWRpc3RpY2Eoc3RhdHNDb250YWluZXIsIFwiXHVEODNEXHVEQ0NBXCIsIFwiQ2FtcGFcdTAwRjFhc1wiLCB0b3RhbENhbXBhbmFzKTtcbiAgdGhpcy5jcmVhclRhcmpldGFFc3RhZGlzdGljYShzdGF0c0NvbnRhaW5lciwgXCJcdUQ4M0RcdURDQzRcIiwgXCJFbnRyZWdhYmxlc1wiLCB0b3RhbEVudHJlZ2FibGVzKTtcbiAgXG4gIC8vIENBTUJJTzogTW9zdHJhciB0b3RhbCBkZSBoaXRzIGRlIGFjdGl2b3MgeSBhcmNoaXZhZG9zXG4gIGNvbnN0IGV0aXF1ZXRhSGl0cyA9IGBUb3RhbCBIaXRzJHt0b3RhbEhpdHNBcmNoaXZhZG9zID4gMCA/ICcqJyA6ICcnfWA7XG4gIHRoaXMuY3JlYXJUYXJqZXRhRXN0YWRpc3RpY2Eoc3RhdHNDb250YWluZXIsIFwiXHVEODNEXHVEQzQxXHVGRTBGXCIsIGV0aXF1ZXRhSGl0cywgdG90YWxIaXRzKTtcbiAgXG4gIGlmIChlbnRyZWdhYmxlc1ZlbmNpZG9zID4gMCkge1xuICAgIHRoaXMuY3JlYXJUYXJqZXRhRXN0YWRpc3RpY2Eoc3RhdHNDb250YWluZXIsIFwiXHUyNkEwXHVGRTBGXCIsIFwiVmVuY2lkb3NcIiwgZW50cmVnYWJsZXNWZW5jaWRvcywgXCIjZTc0YzNjXCIpO1xuICB9XG4gIFxuICBpZiAoZW50cmVnYWJsZXNQb3JWZW5jZXIgPiAwKSB7XG4gICAgdGhpcy5jcmVhclRhcmpldGFFc3RhZGlzdGljYShzdGF0c0NvbnRhaW5lciwgXCJcdTIzRjBcIiwgXCJQb3IgdmVuY2VyXCIsIGVudHJlZ2FibGVzUG9yVmVuY2VyLCBcIiNmMzljMTJcIik7XG4gIH1cbiAgXG4gIC8vIENBTUJJTzogQWdyZWdhciBub3RhIHNvYnJlIGVsIGNcdTAwRTFsY3VsbyBkZSBoaXRzIHNpIGFwbGljYVxuICBpZiAodG90YWxIaXRzQXJjaGl2YWRvcyA+IDApIHtcbiAgICBjb25zdCBub3RhSGl0cyA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ2hpdHMtbm90ZScsXG4gICAgICB0ZXh0Q29udGVudDogXCIqIEVsIHRvdGFsIGluY2x1eWUgaGl0cyBkZSBlbGVtZW50b3MgYWN0aXZvcyB5IGFyY2hpdmFkb3NcIixcbiAgICAgIHN0eWxlczoge1xuICAgICAgICBmb250U2l6ZTogJzAuOGVtJyxcbiAgICAgICAgY29sb3I6ICd2YXIoLS10ZXh0LW11dGVkKScsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIG1hcmdpblRvcDogJzhweCdcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzdGF0c0NvbnRhaW5lci5hcHBlbmRDaGlsZChub3RhSGl0cyk7XG4gIH1cbiAgXG4gIHJldHVybiBzdGF0c0NvbnRhaW5lcjtcbn1cbiAgXG4gIC8qKlxuICAgKiBDcmVhIHVuYSB0YXJqZXRhIGRlIGVzdGFkXHUwMEVEc3RpY2FcbiAgICovXG4gIHByaXZhdGUgY3JlYXJUYXJqZXRhRXN0YWRpc3RpY2EoXG4gICAgY29udGFpbmVyOiBIVE1MRWxlbWVudCwgXG4gICAgaWNvbm86IHN0cmluZywgXG4gICAgdGl0dWxvOiBzdHJpbmcsIFxuICAgIHZhbG9yOiBudW1iZXIgfCBzdHJpbmcsXG4gICAgY29sb3JEZXN0YWNhZG8/OiBzdHJpbmdcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgdGFyamV0YSA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3N0YXRzLWNhcmQnXG4gICAgfSk7XG4gICAgXG4gICAgLy8gU2kgaGF5IGNvbG9yIGRlc3RhY2FkbywgYXBsaWNhcmxvXG4gICAgaWYgKGNvbG9yRGVzdGFjYWRvKSB7XG4gICAgICB0YXJqZXRhLnN0eWxlLmJvcmRlckxlZnQgPSBgNHB4IHNvbGlkICR7Y29sb3JEZXN0YWNhZG99YDtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgaWNvbm9FbCA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3N0YXRzLWNhcmQtaWNvbicsXG4gICAgICB0ZXh0Q29udGVudDogaWNvbm9cbiAgICB9KTtcbiAgICBcbiAgICBjb25zdCBpbmZvQ29udGFpbmVyID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAnc3RhdHMtY2FyZC1pbmZvJ1xuICAgIH0pO1xuICAgIFxuICAgIGNvbnN0IHRpdHVsb0VsID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAnc3RhdHMtY2FyZC10aXRsZScsXG4gICAgICB0ZXh0Q29udGVudDogdGl0dWxvXG4gICAgfSk7XG4gICAgXG4gICAgY29uc3QgdmFsb3JFbCA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3N0YXRzLWNhcmQtdmFsdWUnLFxuICAgICAgdGV4dENvbnRlbnQ6IHZhbG9yLnRvU3RyaW5nKClcbiAgICB9KTtcbiAgICBcbiAgICAvLyBTaSBoYXkgY29sb3IgZGVzdGFjYWRvLCBhcGxpY2FybG8gdGFtYmlcdTAwRTluIGFsIHZhbG9yXG4gICAgaWYgKGNvbG9yRGVzdGFjYWRvKSB7XG4gICAgICB2YWxvckVsLnN0eWxlLmNvbG9yID0gY29sb3JEZXN0YWNhZG87XG4gICAgfVxuICAgIFxuICAgIGluZm9Db250YWluZXIuYXBwZW5kQ2hpbGQodGl0dWxvRWwpO1xuICAgIGluZm9Db250YWluZXIuYXBwZW5kQ2hpbGQodmFsb3JFbCk7XG4gICAgXG4gICAgdGFyamV0YS5hcHBlbmRDaGlsZChpY29ub0VsKTtcbiAgICB0YXJqZXRhLmFwcGVuZENoaWxkKGluZm9Db250YWluZXIpO1xuICAgIFxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0YXJqZXRhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhIGxhIHZpc3RhIGplclx1MDBFMXJxdWljYSBkZSBwcm95ZWN0b3MgeSBjYW1wYVx1MDBGMWFzXG4gICAqL1xuICBwcml2YXRlIGNyZWFyVmlzdGFKZXJhcnF1aWNhKHByb3llY3RvczogUHJveWVjdG9HVERbXSwgbW9kbzogJ2hpdHMnIHwgJ2ZlY2hhcycpOiBIVE1MRWxlbWVudCB7XG4gICAgY29uc3QgY29udGFpbmVyID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAnamVyYXJxdWlhLWNvbnRhaW5lcidcbiAgICB9KTtcbiAgICBcbiAgICAvLyBPcmRlbmFyIHByb3llY3RvcyBzZWdcdTAwRkFuIGVsIG1vZG9cbiAgICBjb25zdCBwcm95ZWN0b3NPcmRlbmFkb3MgPSB0aGlzLm9yZGVuYXJQcm95ZWN0b3MocHJveWVjdG9zLCBtb2RvKTtcbiAgICBcbiAgICAvLyBDcmVhciBzZWNjaVx1MDBGM24gcGFyYSBjYWRhIHByb3llY3RvXG4gICAgcHJveWVjdG9zT3JkZW5hZG9zLmZvckVhY2goKHByb3llY3RvLCBpZHgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGBcdUQ4M0RcdUREMEQgUmVuZGVyaXphbmRvIHByb3llY3RvICR7aWR4ICsgMX06ICR7cHJveWVjdG8udGl0dWxvfSBjb24gJHtwcm95ZWN0by5jYW1wYW5hcy5sZW5ndGh9IGNhbXBhXHUwMEYxYXNgKTtcbiAgICAgIGNvbnN0IHByb3llY3RvU2VjdGlvbiA9IHRoaXMuY3JlYXJTZWNjaW9uUHJveWVjdG8ocHJveWVjdG8sIG1vZG8pO1xuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHByb3llY3RvU2VjdGlvbik7XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgfVxuICBcblxuICAvKipcbiAgICogQ3JlYSB1bmEgc2VjY2lcdTAwRjNuIHBhcmEgdW4gcHJveWVjdG9cbiAgICovXG4gIHByaXZhdGUgY3JlYXJTZWNjaW9uUHJveWVjdG8ocHJveWVjdG86IFByb3llY3RvR1RELCBtb2RvOiAnaGl0cycgfCAnZmVjaGFzJyk6IEhUTUxFbGVtZW50IHtcbiAgICBjb25zb2xlLmxvZyhgXHVEODNEXHVERDBEIENyZWFuZG8gc2VjY2lcdTAwRjNuIHBhcmEgcHJveWVjdG86ICR7cHJveWVjdG8udGl0dWxvfS4gQ2FtcGFcdTAwRjFhczogJHtwcm95ZWN0by5jYW1wYW5hcy5sZW5ndGh9YCk7XG4gICAgXG4gICAgY29uc3QgcHJveWVjdG9TZWN0aW9uID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnZGV0YWlscycsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Byb3llY3RvLXNlY3Rpb24nLFxuICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAnb3Blbic6ICd0cnVlJyAvLyBBYmllcnRvIHBvciBkZWZlY3RvXG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgLy8gQ3JlYXIgZW5jYWJlemFkbyBkZWwgcHJveWVjdG8gKHN1bW1hcnkpXG4gICAgY29uc3QgcHJveWVjdG9IZWFkZXIgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdzdW1tYXJ5Jywge1xuICAgICAgY2xhc3NOYW1lOiAncHJveWVjdG8taGVhZGVyJ1xuICAgIH0pO1xuICAgIFxuICAgIC8vIEFcdTAwRjFhZGlyIGVzdGFkb1xuICAgIGlmIChwcm95ZWN0by5lc3RhZG8pIHtcbiAgICAgIGNvbnN0IGVzdGFkb1NwYW4gPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdzcGFuJywge1xuICAgICAgICBjbGFzc05hbWU6ICdlc3RhZG8tYmFkZ2UnLFxuICAgICAgICB0ZXh0Q29udGVudDogcHJveWVjdG8uZXN0YWRvXG4gICAgICB9KTtcbiAgICAgIHByb3llY3RvSGVhZGVyLmFwcGVuZENoaWxkKGVzdGFkb1NwYW4pO1xuICAgIH1cbiAgICBcbiAgICAvLyBUXHUwMEVEdHVsbyBjb24gZW5sYWNlXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHRpdHVsb0NvbnRhaW5lciA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgY2xhc3NOYW1lOiAncHJveWVjdG8tdGl0dWxvLWNvbnRhaW5lcidcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBjb25zdCBpY29ub1Byb3llY3RvID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnc3BhbicsIHtcbiAgICAgICAgY2xhc3NOYW1lOiAncHJveWVjdG8taWNvbm8nLFxuICAgICAgICB0ZXh0Q29udGVudDogJ1x1RDgzRFx1RENDMidcbiAgICAgIH0pO1xuICAgICAgdGl0dWxvQ29udGFpbmVyLmFwcGVuZENoaWxkKGljb25vUHJveWVjdG8pO1xuICAgICAgXG4gICAgICBjb25zdCBlbmxhY2VQcm95ZWN0byA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2EnLCB7XG4gICAgICAgIGNsYXNzTmFtZTogJ3Byb3llY3RvLWxpbmsnLFxuICAgICAgICB0ZXh0Q29udGVudDogcHJveWVjdG8udGl0dWxvIHx8IHByb3llY3RvLmFsaWFzIHx8ICdQcm95ZWN0byBzaW4gdFx1MDBFRHR1bG8nLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgJ2RhdGEtaHJlZic6IHByb3llY3RvLnBhdGhcbiAgICAgICAgfSxcbiAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgY2xpY2s6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5wbHVnaW4uYXBwLndvcmtzcGFjZS5vcGVuTGlua1RleHQocHJveWVjdG8ucGF0aCwgXCJcIiwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRpdHVsb0NvbnRhaW5lci5hcHBlbmRDaGlsZChlbmxhY2VQcm95ZWN0byk7XG4gICAgICBcbiAgICAgIHByb3llY3RvSGVhZGVyLmFwcGVuZENoaWxkKHRpdHVsb0NvbnRhaW5lcik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihgXHVEODNEXHVERDBEIEVycm9yIGFsIGNyZWFyIGVubGFjZSBkZWwgcHJveWVjdG86ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgY29uc3QgdGV4dG9Qcm95ZWN0byA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7XG4gICAgICAgIGNsYXNzTmFtZTogJ3Byb3llY3RvLXRpdHVsbycsXG4gICAgICAgIHRleHRDb250ZW50OiBwcm95ZWN0by50aXR1bG8gfHwgcHJveWVjdG8uYWxpYXMgfHwgJ1Byb3llY3RvIHNpbiB0XHUwMEVEdHVsbydcbiAgICAgIH0pO1xuICAgICAgcHJveWVjdG9IZWFkZXIuYXBwZW5kQ2hpbGQodGV4dG9Qcm95ZWN0byk7XG4gICAgfVxuICAgIFxuICAgIC8vIE1cdTAwRTl0cmljYXMgZGVsIHByb3llY3RvXG4gICAgY29uc3QgbWV0cmljYXNDb250YWluZXIgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICdwcm95ZWN0by1tZXRyaWNhcydcbiAgICB9KTtcbiAgICBcbiAgICAvLyBDb250YWRvciBkZSBjYW1wYVx1MDBGMWFzXG4gICAgY29uc3QgY2FtcGFuYXNDb3VudCA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7XG4gICAgICBjbGFzc05hbWU6ICdjYW1wYW5hcy1jb3VudCcsXG4gICAgICB0ZXh0Q29udGVudDogYCR7cHJveWVjdG8uY2FtcGFuYXMubGVuZ3RofSAke3Byb3llY3RvLmNhbXBhbmFzLmxlbmd0aCA9PT0gMSA/ICdjYW1wYVx1MDBGMWEnIDogJ2NhbXBhXHUwMEYxYXMnfWBcbiAgICB9KTtcbiAgICBtZXRyaWNhc0NvbnRhaW5lci5hcHBlbmRDaGlsZChjYW1wYW5hc0NvdW50KTtcbiAgICBcbiAgICAvLyBNb3N0cmFyIGhpdHMgbyBmZWNoYXMgc2VnXHUwMEZBbiBlbCBtb2RvXG4gICAgaWYgKG1vZG8gPT09ICdoaXRzJykge1xuICAgICAgY29uc3QgaGl0c0NvdW50ID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnc3BhbicsIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnaGl0cy1jb3VudCcsXG4gICAgICAgIHRleHRDb250ZW50OiBgJHtwcm95ZWN0by5oaXRzfSBoaXRzYFxuICAgICAgfSk7XG4gICAgICBtZXRyaWNhc0NvbnRhaW5lci5hcHBlbmRDaGlsZChoaXRzQ291bnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBNb3N0cmFyIGVsIHByXHUwMEYzeGltbyB2ZW5jaW1pZW50byBzaSBleGlzdGVcbiAgICAgIGNvbnN0IHByb3hpbW9WZW5jaW1pZW50byA9IHRoaXMub2J0ZW5lckRpYXNQcm94aW1vVmVuY2ltaWVudG8ocHJveWVjdG8pO1xuICAgICAgaWYgKHByb3hpbW9WZW5jaW1pZW50byAhPT0gbnVsbCkge1xuICAgICAgICAvLyBDQU1CSUFETzogVXNhciBlbCBlc3RhZG8gZGVsIHByb3llY3RvIHBhcmEgZGV0ZXJtaW5hciBsYSBjbGFzZSB2aXN1YWxcbiAgICAgICAgY29uc3QgdmVuY2ltaWVudG9TcGFuID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnc3BhbicsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGB2ZW5jaW1pZW50by1iYWRnZSAke3RoaXMub2J0ZW5lckNsYXNlVmVuY2ltaWVudG8ocHJveGltb1ZlbmNpbWllbnRvLCBwcm95ZWN0by5lc3RhZG8pfWAsXG4gICAgICAgICAgdGV4dENvbnRlbnQ6IHRoaXMuZm9ybWF0ZWFyRGlhc1ZlbmNpbWllbnRvKHByb3hpbW9WZW5jaW1pZW50bywgcHJveWVjdG8uZXN0YWRvKVxuICAgICAgICB9KTtcbiAgICAgICAgbWV0cmljYXNDb250YWluZXIuYXBwZW5kQ2hpbGQodmVuY2ltaWVudG9TcGFuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFNpIG5vIGhheSBmZWNoYXMgcmVsZXZhbnRlcywgbW9zdHJhciB1biBpbmRpY2Fkb3IgbmV1dHJvXG4gICAgICAgIGNvbnN0IHZlbmNpbWllbnRvU3BhbiA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiAndmVuY2ltaWVudG8tYmFkZ2UnLFxuICAgICAgICAgIHRleHRDb250ZW50OiAnU2luIGZlY2hhcydcbiAgICAgICAgfSk7XG4gICAgICAgIG1ldHJpY2FzQ29udGFpbmVyLmFwcGVuZENoaWxkKHZlbmNpbWllbnRvU3Bhbik7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHByb3llY3RvSGVhZGVyLmFwcGVuZENoaWxkKG1ldHJpY2FzQ29udGFpbmVyKTtcbiAgICBwcm95ZWN0b1NlY3Rpb24uYXBwZW5kQ2hpbGQocHJveWVjdG9IZWFkZXIpO1xuICAgIFxuICAgIC8vIENvbnRlbmlkbyBkZWwgcHJveWVjdG8gKGNhbXBhXHUwMEYxYXMpXG4gICAgY29uc3QgcHJveWVjdG9Db250ZW50ID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAncHJveWVjdG8tY29udGVudCdcbiAgICB9KTtcbiAgICBcbiAgICAvLyBPcmRlbmFyIGNhbXBhXHUwMEYxYXMgc2VnXHUwMEZBbiBlbCBtb2RvXG4gICAgY29uc3QgY2FtcGFuYXNPcmRlbmFkYXMgPSB0aGlzLm9yZGVuYXJDYW1wYW5hcyhwcm95ZWN0by5jYW1wYW5hcywgbW9kbyk7XG4gICAgXG4gICAgaWYgKGNhbXBhbmFzT3JkZW5hZGFzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc29sZS5sb2coYFx1RDgzRFx1REQwRCBcdTI2QTBcdUZFMEYgRWwgcHJveWVjdG8gJHtwcm95ZWN0by50aXR1bG99IG5vIHRpZW5lIGNhbXBhXHUwMEYxYXMgYXNvY2lhZGFzYCk7XG4gICAgICBjb25zdCBpbmZvTm9EYXRhID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICBjbGFzc05hbWU6ICdlbXB0eS1tZXNzYWdlJyxcbiAgICAgICAgdGV4dENvbnRlbnQ6IFwiRXN0ZSBwcm95ZWN0byBubyB0aWVuZSBjYW1wYVx1MDBGMWFzIGFzb2NpYWRhcy5cIlxuICAgICAgfSk7XG4gICAgICBwcm95ZWN0b0NvbnRlbnQuYXBwZW5kQ2hpbGQoaW5mb05vRGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKGBcdUQ4M0RcdUREMEQgUmVuZGVyaXphbmRvICR7Y2FtcGFuYXNPcmRlbmFkYXMubGVuZ3RofSBjYW1wYVx1MDBGMWFzIHBhcmEgZWwgcHJveWVjdG8gJHtwcm95ZWN0by50aXR1bG99YCk7XG4gICAgXG4gICAgICAvLyBDcmVhciBzZWNjaVx1MDBGM24gcGFyYSBjYWRhIGNhbXBhXHUwMEYxYVxuICAgICAgY2FtcGFuYXNPcmRlbmFkYXMuZm9yRWFjaCgoY2FtcGFuYSwgaWR4KSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBcdUQ4M0RcdUREMEQgQ3JlYW5kbyBlbGVtZW50byBwYXJhIGNhbXBhXHUwMEYxYSAke2lkeCArIDF9OiAke2NhbXBhbmEudGl0dWxvfWApO1xuICAgICAgICBjb25zdCBjYW1wYW5hRWxlbWVudCA9IHRoaXMuY3JlYXJFbGVtZW50b0NhbXBhbmEoY2FtcGFuYSwgbW9kbyk7XG4gICAgICAgIHByb3llY3RvQ29udGVudC5hcHBlbmRDaGlsZChjYW1wYW5hRWxlbWVudCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgcHJveWVjdG9TZWN0aW9uLmFwcGVuZENoaWxkKHByb3llY3RvQ29udGVudCk7XG4gICAgXG4gICAgcmV0dXJuIHByb3llY3RvU2VjdGlvbjtcbiAgfVxuICBcblxuICAvKipcbiAgICogQ3JlYSB1biBlbGVtZW50byBwYXJhIG1vc3RyYXIgdW5hIGNhbXBhXHUwMEYxYVxuICAgKi9cbiAgcHJpdmF0ZSBjcmVhckVsZW1lbnRvQ2FtcGFuYShjYW1wYW5hOiBDYW1wYW5hLCBtb2RvOiAnaGl0cycgfCAnZmVjaGFzJyk6IEhUTUxFbGVtZW50IHtcbiAgICBjb25zdCBjYW1wYW5hRWxlbWVudCA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2RldGFpbHMnLCB7XG4gICAgICBjbGFzc05hbWU6ICdjYW1wYW5hLWVsZW1lbnQnLFxuICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAnb3Blbic6ICd0cnVlJyAvLyBBYmllcnRvIHBvciBkZWZlY3RvXG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgLy8gQ3JlYXIgZW5jYWJlemFkbyBkZSBsYSBjYW1wYVx1MDBGMWEgKHN1bW1hcnkpXG4gICAgY29uc3QgY2FtcGFuYUhlYWRlciA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3N1bW1hcnknLCB7XG4gICAgICBjbGFzc05hbWU6ICdjYW1wYW5hLWhlYWRlcidcbiAgICB9KTtcbiAgICBcbiAgICAvLyBBXHUwMEYxYWRpciBlc3RhZG9cbiAgICBpZiAoY2FtcGFuYS5lc3RhZG8pIHtcbiAgICAgIGNvbnN0IGVzdGFkb1NwYW4gPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdzcGFuJywge1xuICAgICAgICBjbGFzc05hbWU6ICdlc3RhZG8tYmFkZ2UnLFxuICAgICAgICB0ZXh0Q29udGVudDogY2FtcGFuYS5lc3RhZG9cbiAgICAgIH0pO1xuICAgICAgY2FtcGFuYUhlYWRlci5hcHBlbmRDaGlsZChlc3RhZG9TcGFuKTtcbiAgICB9XG4gICAgXG4gICAgLy8gVFx1MDBFRHR1bG8gY29uIGVubGFjZVxuICAgIHRyeSB7XG4gICAgICBjb25zdCB0aXR1bG9Db250YWluZXIgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgIGNsYXNzTmFtZTogJ2NhbXBhbmEtdGl0dWxvLWNvbnRhaW5lcidcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBjb25zdCBpY29ub0NhbXBhbmEgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdzcGFuJywge1xuICAgICAgICBjbGFzc05hbWU6ICdjYW1wYW5hLWljb25vJyxcbiAgICAgICAgdGV4dENvbnRlbnQ6ICdcdUQ4M0RcdURDQ0EnXG4gICAgICB9KTtcbiAgICAgIHRpdHVsb0NvbnRhaW5lci5hcHBlbmRDaGlsZChpY29ub0NhbXBhbmEpO1xuICAgICAgXG4gICAgICBjb25zdCBlbmxhY2VDYW1wYW5hID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnYScsIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnY2FtcGFuYS1saW5rJyxcbiAgICAgICAgdGV4dENvbnRlbnQ6IGNhbXBhbmEudGl0dWxvIHx8IGNhbXBhbmEuYWxpYXMgfHwgJ0NhbXBhXHUwMEYxYSBzaW4gdFx1MDBFRHR1bG8nLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgJ2RhdGEtaHJlZic6IGNhbXBhbmEucGF0aFxuICAgICAgICB9LFxuICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICBjbGljazogKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5hcHAud29ya3NwYWNlLm9wZW5MaW5rVGV4dChjYW1wYW5hLnBhdGgsIFwiXCIsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aXR1bG9Db250YWluZXIuYXBwZW5kQ2hpbGQoZW5sYWNlQ2FtcGFuYSk7XG4gICAgICBcbiAgICAgIGNhbXBhbmFIZWFkZXIuYXBwZW5kQ2hpbGQodGl0dWxvQ29udGFpbmVyKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBcdUQ4M0RcdUREMEQgRXJyb3IgYWwgY3JlYXIgZW5sYWNlIGRlIGNhbXBhXHUwMEYxYTogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICBjb25zdCB0ZXh0b0NhbXBhbmEgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdzcGFuJywge1xuICAgICAgICBjbGFzc05hbWU6ICdjYW1wYW5hLXRpdHVsbycsXG4gICAgICAgIHRleHRDb250ZW50OiBjYW1wYW5hLnRpdHVsbyB8fCBjYW1wYW5hLmFsaWFzIHx8ICdDYW1wYVx1MDBGMWEgc2luIHRcdTAwRUR0dWxvJ1xuICAgICAgfSk7XG4gICAgICBjYW1wYW5hSGVhZGVyLmFwcGVuZENoaWxkKHRleHRvQ2FtcGFuYSk7XG4gICAgfVxuICAgIFxuICAgIC8vIE1cdTAwRTl0cmljYXMgZGUgbGEgY2FtcGFcdTAwRjFhXG4gICAgY29uc3QgbWV0cmljYXNDb250YWluZXIgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICdjYW1wYW5hLW1ldHJpY2FzJ1xuICAgIH0pO1xuICAgIFxuICAgIC8vIENvbnRhZG9yIGRlIGVudHJlZ2FibGVzXG4gICAgY29uc3QgZW50cmVnYWJsZXNDb3VudCA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7XG4gICAgICBjbGFzc05hbWU6ICdlbnRyZWdhYmxlcy1jb3VudCcsXG4gICAgICB0ZXh0Q29udGVudDogYCR7Y2FtcGFuYS5lbnRyZWdhYmxlcy5sZW5ndGh9ICR7Y2FtcGFuYS5lbnRyZWdhYmxlcy5sZW5ndGggPT09IDEgPyAnZW50cmVnYWJsZScgOiAnZW50cmVnYWJsZXMnfWBcbiAgICB9KTtcbiAgICBtZXRyaWNhc0NvbnRhaW5lci5hcHBlbmRDaGlsZChlbnRyZWdhYmxlc0NvdW50KTtcbiAgICBcbiAgICAvLyBNb3N0cmFyIGhpdHMgbyBmZWNoYXMgc2VnXHUwMEZBbiBlbCBtb2RvXG4gICAgaWYgKG1vZG8gPT09ICdoaXRzJykge1xuICAgICAgY29uc3QgaGl0c0NvdW50ID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnc3BhbicsIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnaGl0cy1jb3VudCcsXG4gICAgICAgIHRleHRDb250ZW50OiBgJHtjYW1wYW5hLmhpdHN9IGhpdHNgXG4gICAgICB9KTtcbiAgICAgIG1ldHJpY2FzQ29udGFpbmVyLmFwcGVuZENoaWxkKGhpdHNDb3VudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE1vc3RyYXIgZWwgcHJcdTAwRjN4aW1vIHZlbmNpbWllbnRvIHNpIGV4aXN0ZVxuICAgICAgaWYgKGNhbXBhbmEuZGlmZXJlbmNpYURpYXNQcm94aW1vICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gQ0FNQklBRE86IFBhc2FyIGVsIGVzdGFkbyBkZSBsYSBjYW1wYVx1MDBGMWEgcGFyYSBkZXRlcm1pbmFyIGNvcnJlY3RhbWVudGUgbGEgY2xhc2UgdmlzdWFsXG4gICAgICAgIGNvbnN0IHZlbmNpbWllbnRvU3BhbiA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBgdmVuY2ltaWVudG8tYmFkZ2UgJHt0aGlzLm9idGVuZXJDbGFzZVZlbmNpbWllbnRvKGNhbXBhbmEuZGlmZXJlbmNpYURpYXNQcm94aW1vLCBjYW1wYW5hLmVzdGFkbyl9YCxcbiAgICAgICAgICB0ZXh0Q29udGVudDogdGhpcy5mb3JtYXRlYXJEaWFzVmVuY2ltaWVudG8oY2FtcGFuYS5kaWZlcmVuY2lhRGlhc1Byb3hpbW8sIGNhbXBhbmEuZXN0YWRvKVxuICAgICAgICB9KTtcbiAgICAgICAgbWV0cmljYXNDb250YWluZXIuYXBwZW5kQ2hpbGQodmVuY2ltaWVudG9TcGFuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFNpIG5vIGhheSBmZWNoYXMgZGUgZW50cmVnYWJsZXMsIG1vc3RyYXIgdW4gaW5kaWNhZG9yIG5ldXRyb1xuICAgICAgICBjb25zdCB2ZW5jaW1pZW50b1NwYW4gPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdzcGFuJywge1xuICAgICAgICAgIGNsYXNzTmFtZTogJ3ZlbmNpbWllbnRvLWJhZGdlJyxcbiAgICAgICAgICB0ZXh0Q29udGVudDogJ1NpbiBmZWNoYXMnXG4gICAgICAgIH0pO1xuICAgICAgICBtZXRyaWNhc0NvbnRhaW5lci5hcHBlbmRDaGlsZCh2ZW5jaW1pZW50b1NwYW4pO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBjYW1wYW5hSGVhZGVyLmFwcGVuZENoaWxkKG1ldHJpY2FzQ29udGFpbmVyKTtcbiAgICBjYW1wYW5hRWxlbWVudC5hcHBlbmRDaGlsZChjYW1wYW5hSGVhZGVyKTtcbiAgICBcbiAgICAvLyBDb250ZW5pZG8gZGUgbGEgY2FtcGFcdTAwRjFhIChlbnRyZWdhYmxlcylcbiAgICBjb25zdCBjYW1wYW5hQ29udGVudCA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ2NhbXBhbmEtY29udGVudCdcbiAgICB9KTtcbiAgICBcbiAgICBpZiAoY2FtcGFuYS5lbnRyZWdhYmxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnNvbGUubG9nKGBcdUQ4M0RcdUREMEQgXHUyNkEwXHVGRTBGIExhIGNhbXBhXHUwMEYxYSAke2NhbXBhbmEudGl0dWxvfSBubyB0aWVuZSBlbnRyZWdhYmxlcyBhc29jaWFkb3NgKTtcbiAgICAgIGNvbnN0IGluZm9Ob0RhdGEgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgIGNsYXNzTmFtZTogJ2VtcHR5LW1lc3NhZ2UnLFxuICAgICAgICB0ZXh0Q29udGVudDogXCJFc3RhIGNhbXBhXHUwMEYxYSBubyB0aWVuZSBlbnRyZWdhYmxlcyBhc29jaWFkb3MuXCJcbiAgICAgIH0pO1xuICAgICAgY2FtcGFuYUNvbnRlbnQuYXBwZW5kQ2hpbGQoaW5mb05vRGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKGBcdUQ4M0RcdUREMEQgUmVuZGVyaXphbmRvICR7Y2FtcGFuYS5lbnRyZWdhYmxlcy5sZW5ndGh9IGVudHJlZ2FibGVzIHBhcmEgbGEgY2FtcGFcdTAwRjFhICR7Y2FtcGFuYS50aXR1bG99YCk7XG4gICAgICBcbiAgICAgIC8vIE9yZGVuYXIgZW50cmVnYWJsZXMgc2VnXHUwMEZBbiBlbCBtb2RvXG4gICAgICBjb25zdCBlbnRyZWdhYmxlc09yZGVuYWRvcyA9IHRoaXMub3JkZW5hckVudHJlZ2FibGVzKGNhbXBhbmEuZW50cmVnYWJsZXMsIG1vZG8pO1xuICAgICAgXG4gICAgICAvLyBDcmVhciB0YWJsYSBkZSBlbnRyZWdhYmxlc1xuICAgICAgY29uc3QgdGFibGFFbnRyZWdhYmxlcyA9IHRoaXMuY3JlYXJUYWJsYUVudHJlZ2FibGVzKGVudHJlZ2FibGVzT3JkZW5hZG9zLCBtb2RvKTtcbiAgICAgIGNhbXBhbmFDb250ZW50LmFwcGVuZENoaWxkKHRhYmxhRW50cmVnYWJsZXMpO1xuICAgIH1cbiAgICBcbiAgICBjYW1wYW5hRWxlbWVudC5hcHBlbmRDaGlsZChjYW1wYW5hQ29udGVudCk7XG4gICAgXG4gICAgcmV0dXJuIGNhbXBhbmFFbGVtZW50O1xuICB9XG4gIFxuIFxuXG4gIC8qKlxuICAgKiBDcmVhIHVuYSB0YWJsYSBwYXJhIG1vc3RyYXIgbG9zIGVudHJlZ2FibGVzXG4gICAqL1xuICBwcml2YXRlIGNyZWFyVGFibGFFbnRyZWdhYmxlcyhlbnRyZWdhYmxlczogRW50cmVnYWJsZVtdLCBtb2RvOiAnaGl0cycgfCAnZmVjaGFzJyk6IEhUTUxFbGVtZW50IHtcbiAgICBjb25zdCB0YWJsYSA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJywge1xuICAgICAgY2xhc3NOYW1lOiAnZW50cmVnYWJsZXMtdGFibGEnXG4gICAgfSk7XG4gICAgXG4gICAgLy8gQ3JlYXIgZW5jYWJlemFkbyBkZSBsYSB0YWJsYVxuICAgIGNvbnN0IHRoZWFkID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgndGhlYWQnKTtcbiAgICBjb25zdCBoZWFkZXJSb3cgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgIFxuICAgIC8vIENvbHVtbmFzIGNvbXVuZXNcbiAgICBjb25zdCBjb2x1bW5hcyA9IFtcbiAgICAgIHsgaWQ6ICdlc3RhZG8nLCB0ZXh0bzogJ0VzdGFkbycsIGNsYXNzTmFtZTogJ2NvbC1lc3RhZG8nLCB3aWR0aDogJzQwcHgnIH0sXG4gICAgICB7IGlkOiAndGl0dWxvJywgdGV4dG86ICdFbnRyZWdhYmxlJywgY2xhc3NOYW1lOiAnY29sLXRpdHVsbycsIHdpZHRoOiAnNTAlJyB9XG4gICAgXTtcbiAgICBcbiAgICAvLyBDb2x1bW5hcyBlc3BlY1x1MDBFRGZpY2FzIHNlZ1x1MDBGQW4gZWwgbW9kb1xuICAgIGlmIChtb2RvID09PSAnaGl0cycpIHtcbiAgICAgIGNvbHVtbmFzLnB1c2goeyBpZDogJ2hpdHMnLCB0ZXh0bzogJ0hpdHMnLCBjbGFzc05hbWU6ICdjb2wtaGl0cycsIHdpZHRoOiAnODBweCcgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbHVtbmFzLnB1c2goeyBpZDogJ2ZlY2hhJywgdGV4dG86ICdQdWJsaWNhY2lcdTAwRjNuJywgY2xhc3NOYW1lOiAnY29sLWZlY2hhJywgd2lkdGg6ICcxMjBweCcgfSk7XG4gICAgICBjb2x1bW5hcy5wdXNoKHsgaWQ6ICdkaWFzJywgdGV4dG86ICdEXHUwMEVEYXMnLCBjbGFzc05hbWU6ICdjb2wtZGlhcycsIHdpZHRoOiAnODBweCcgfSk7XG4gICAgfVxuICAgIFxuICAgIC8vIENyZWFyIGNlbGRhcyBkZSBlbmNhYmV6YWRvXG4gICAgY29sdW1uYXMuZm9yRWFjaChjb2x1bW5hID0+IHtcbiAgICAgIGNvbnN0IHRoID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgndGgnLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY29sdW1uYS5jbGFzc05hbWUsXG4gICAgICAgIHRleHRDb250ZW50OiBjb2x1bW5hLnRleHRvLFxuICAgICAgICBzdHlsZXM6IHtcbiAgICAgICAgICB3aWR0aDogY29sdW1uYS53aWR0aFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGhlYWRlclJvdy5hcHBlbmRDaGlsZCh0aCk7XG4gICAgfSk7XG4gICAgXG4gICAgdGhlYWQuYXBwZW5kQ2hpbGQoaGVhZGVyUm93KTtcbiAgICB0YWJsYS5hcHBlbmRDaGlsZCh0aGVhZCk7XG4gICAgXG4gICAgLy8gQ3JlYXIgY3VlcnBvIGRlIGxhIHRhYmxhXG4gICAgY29uc3QgdGJvZHkgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCd0Ym9keScpO1xuICAgIFxuICAgIC8vIENyZWFyIGZpbGFzIHBhcmEgY2FkYSBlbnRyZWdhYmxlXG4gICAgZW50cmVnYWJsZXMuZm9yRWFjaChlbnRyZWdhYmxlID0+IHtcbiAgICAgIGNvbnN0IHJvdyA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3RyJywge1xuICAgICAgICBjbGFzc05hbWU6IGBlbnRyZWdhYmxlLXJvdyAke3RoaXMub2J0ZW5lckNsYXNlUGFyYUVzdGFkbyhlbnRyZWdhYmxlLmVzdGFkbyl9YFxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIENvbHVtbmFzIGNvbXVuZXNcbiAgICAgIFxuICAgICAgLy8gRXN0YWRvXG4gICAgICBjb25zdCBlc3RhZG9DZWxsID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgndGQnLCB7XG4gICAgICAgIGNsYXNzTmFtZTogJ2NvbC1lc3RhZG8nXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGVzdGFkb0JhZGdlID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgnc3BhbicsIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnZXN0YWRvLWJhZGdlLXNtYWxsJyxcbiAgICAgICAgdGV4dENvbnRlbnQ6IGVudHJlZ2FibGUuZXN0YWRvXG4gICAgICB9KTtcbiAgICAgIGVzdGFkb0NlbGwuYXBwZW5kQ2hpbGQoZXN0YWRvQmFkZ2UpO1xuICAgICAgcm93LmFwcGVuZENoaWxkKGVzdGFkb0NlbGwpO1xuICAgICAgXG4gICAgICAvLyBUXHUwMEVEdHVsbyBjb24gZW5sYWNlXG4gICAgICBjb25zdCB0aXR1bG9DZWxsID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgndGQnLCB7XG4gICAgICAgIGNsYXNzTmFtZTogJ2NvbC10aXR1bG8nXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZW5sYWNlRW50cmVnYWJsZSA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2EnLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiAnZW50cmVnYWJsZS1saW5rJyxcbiAgICAgICAgICB0ZXh0Q29udGVudDogZW50cmVnYWJsZS50aXR1bG8gfHwgZW50cmVnYWJsZS5hbGlhcyB8fCAnRW50cmVnYWJsZSBzaW4gdFx1MDBFRHR1bG8nLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICdkYXRhLWhyZWYnOiBlbnRyZWdhYmxlLnBhdGhcbiAgICAgICAgICB9LFxuICAgICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgY2xpY2s6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5hcHAud29ya3NwYWNlLm9wZW5MaW5rVGV4dChlbnRyZWdhYmxlLnBhdGgsIFwiXCIsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRpdHVsb0NlbGwuYXBwZW5kQ2hpbGQoZW5sYWNlRW50cmVnYWJsZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFx1RDgzRFx1REQwRCBFcnJvciBhbCBjcmVhciBlbmxhY2UgZGVsIGVudHJlZ2FibGU6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgICBjb25zdCB0ZXh0b0VudHJlZ2FibGUgPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdzcGFuJywge1xuICAgICAgICAgIHRleHRDb250ZW50OiBlbnRyZWdhYmxlLnRpdHVsbyB8fCBlbnRyZWdhYmxlLmFsaWFzIHx8ICdFbnRyZWdhYmxlIHNpbiB0XHUwMEVEdHVsbydcbiAgICAgICAgfSk7XG4gICAgICAgIHRpdHVsb0NlbGwuYXBwZW5kQ2hpbGQodGV4dG9FbnRyZWdhYmxlKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgcm93LmFwcGVuZENoaWxkKHRpdHVsb0NlbGwpO1xuICAgICAgXG4gICAgICAvLyBDb2x1bW5hcyBlc3BlY1x1MDBFRGZpY2FzIHNlZ1x1MDBGQW4gZWwgbW9kb1xuICAgICAgaWYgKG1vZG8gPT09ICdoaXRzJykge1xuICAgICAgICBjb25zdCBoaXRzQ2VsbCA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3RkJywge1xuICAgICAgICAgIGNsYXNzTmFtZTogJ2NvbC1oaXRzJyxcbiAgICAgICAgICB0ZXh0Q29udGVudDogU3RyaW5nKGVudHJlZ2FibGUuaGl0cyB8fCAwKVxuICAgICAgICB9KTtcbiAgICAgICAgcm93LmFwcGVuZENoaWxkKGhpdHNDZWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZlY2hhIGRlIHB1YmxpY2FjaVx1MDBGM25cbiAgICAgICAgLy8gRmVjaGEgZGUgcHVibGljYWNpXHUwMEYzbiBmb3JtYXRlYWRhXG4gICAgICAgIGNvbnN0IGZlY2hhQ2VsbCA9IERPTVV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3RkJywge1xuICAgICAgICAgIGNsYXNzTmFtZTogJ2NvbC1mZWNoYScsXG4gICAgICAgICAgdGV4dENvbnRlbnQ6IHRoaXMuZm9ybWF0ZWFyRmVjaGFQdWJsaWNhY2lvbihlbnRyZWdhYmxlLmZlY2hhUHVibGljYWNpb24pXG4gICAgICAgIH0pO1xuICAgICAgICByb3cuYXBwZW5kQ2hpbGQoZmVjaGFDZWxsKTtcbiAgICAgICAgXG4gICAgICAvLyBEXHUwMEVEYXMgaGFzdGEvZGVzZGUgbGEgZmVjaGFcbiAgICAgIGNvbnN0IGRpYXNDZWxsID0gRE9NVXRpbHMuY3JlYXRlRWxlbWVudCgndGQnLCB7XG4gICAgICAgIGNsYXNzTmFtZTogJ2NvbC1kaWFzJ1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChlbnRyZWdhYmxlLmRpZmVyZW5jaWFEaWFzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgZGlhc1NwYW4gPSBET01VdGlscy5jcmVhdGVFbGVtZW50KCdzcGFuJywge1xuICAgICAgICAgIC8vIFBhc2FyIGVsIGVzdGFkbyBjb21vIHNlZ3VuZG8gcGFyXHUwMEUxbWV0cm8gcGFyYSBkZXRlcm1pbmFyIGxhIGNsYXNlIGFkZWN1YWRhXG4gICAgICAgICAgY2xhc3NOYW1lOiBgZGlhcy1iYWRnZSAke3RoaXMub2J0ZW5lckNsYXNlVmVuY2ltaWVudG8oZW50cmVnYWJsZS5kaWZlcmVuY2lhRGlhcywgZW50cmVnYWJsZS5lc3RhZG8pfWAsXG4gICAgICAgICAgLy8gUGFzYXIgZWwgZXN0YWRvIHBhcmEgZm9ybWF0ZWFyIGVsIHRleHRvIGFkZWN1YWRhbWVudGVcbiAgICAgICAgICB0ZXh0Q29udGVudDogdGhpcy5mb3JtYXRlYXJEaWFzVmVuY2ltaWVudG8oZW50cmVnYWJsZS5kaWZlcmVuY2lhRGlhcywgZW50cmVnYWJsZS5lc3RhZG8pXG4gICAgICAgIH0pO1xuICAgICAgICBkaWFzQ2VsbC5hcHBlbmRDaGlsZChkaWFzU3Bhbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaWFzQ2VsbC50ZXh0Q29udGVudCA9IFwiXHUyMDE0XCI7XG4gICAgICB9XG5cbiAgICAgIHJvdy5hcHBlbmRDaGlsZChkaWFzQ2VsbCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHRib2R5LmFwcGVuZENoaWxkKHJvdyk7XG4gICAgfSk7XG4gICAgXG4gICAgdGFibGEuYXBwZW5kQ2hpbGQodGJvZHkpO1xuICAgIHJldHVybiB0YWJsYTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPYnRpZW5lIGxhIGNsYXNlIENTUyBjb3JyZXNwb25kaWVudGUgYWwgZXN0YWRvIGRlIHVuIGVudHJlZ2FibGVcbiAgICovXG4gIHByaXZhdGUgb2J0ZW5lckNsYXNlUGFyYUVzdGFkbyhlc3RhZG86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgc3dpdGNoIChlc3RhZG8pIHtcbiAgICAgIGNhc2UgXCJcdUQ4M0RcdURGRTJcIjogcmV0dXJuIFwiZXN0YWRvLWFjdGl2b1wiO1xuICAgICAgY2FzZSBcIlx1RDgzRFx1REZFMVwiOiByZXR1cm4gXCJlc3RhZG8tZXNwZXJhXCI7XG4gICAgICBjYXNlIFwiXHVEODNEXHVERDM0XCI6IHJldHVybiBcImVzdGFkby1kZXRlbmlkb1wiO1xuICAgICAgY2FzZSBcIlx1RDgzRFx1REQzNVwiOiByZXR1cm4gXCJlc3RhZG8tYXJjaGl2YWRvXCI7XG4gICAgICBkZWZhdWx0OiByZXR1cm4gXCJcIjtcbiAgICB9XG4gIH1cblxuXG5cbiAgXG5cbiAgLyoqXG4gKiBPYnRpZW5lIHRvZG9zIGxvcyBwcm95ZWN0b3MgR1REIGNvbiBzdXMgY2FtcGFcdTAwRjFhcyB5IGVudHJlZ2FibGVzIGFzb2NpYWRvcyAtIFZlcnNpXHUwMEYzbiBvcHRpbWl6YWRhXG4gKiBJbmNsdXllIHRvZG9zIGxvcyBlc3RhZG9zIGNvbiBwcmlvcmlkYWQgZXNwZWNcdTAwRURmaWNhXG4gKi9cbnByaXZhdGUgYXN5bmMgb2J0ZW5lclRvZG9zTG9zUHJveWVjdG9zKGR2OiBhbnksIG1vZG86ICdoaXRzJyB8ICdmZWNoYXMnKTogUHJvbWlzZTxQcm95ZWN0b0dURFtdPiB7XG4gIHRyeSB7XG4gICAgY29uc29sZS5sb2coXCJcdUQ4M0RcdUREMEQgTVx1MDBFOXRvZG8gb2J0ZW5lclRvZG9zTG9zUHJveWVjdG9zIGluaWNpYWRvXCIpO1xuICAgIFxuICAgIC8vIE9idGVuZXIgZmVjaGEgYWN0dWFsIHBhcmEgY2FsY3VsYXIgZGlmZXJlbmNpYXNcbiAgICBjb25zdCBob3kgPSB3aW5kb3cubW9tZW50KCkuc3RhcnRPZignZGF5Jyk7XG4gICAgXG4gICAgLy8gMS4gT2J0ZW5lciB0b2RvcyBsb3MgcHJveWVjdG9zIEdURCBjb24gY3VhbHF1aWVyIGVzdGFkb1xuICAgIGNvbnNvbGUubG9nKFwiXHVEODNEXHVERDBEIENvbnN1bHRhbmRvIHByb3llY3RvcyBQR1REXCIpO1xuICAgIGNvbnN0IHByb3llY3Rvc0dURCA9IGR2LnBhZ2VzKClcbiAgICAgIC53aGVyZShwID0+IHAudHlwZSA9PT0gXCJQR1REXCIpXG4gICAgICAuYXJyYXkoKTtcbiAgICBjb25zb2xlLmxvZyhgXHVEODNEXHVERDBEIEVuY29udHJhZG9zICR7cHJveWVjdG9zR1RELmxlbmd0aH0gcHJveWVjdG9zIFBHVEQgZW4gdG90YWxgKTtcbiAgICBcbiAgICAvLyBNb3N0cmFyIHJlc3VtZW4gZGUgcHJveWVjdG9zIGVuY29udHJhZG9zIHBhcmEgZGlhZ25cdTAwRjNzdGljb1xuICAgIHByb3llY3Rvc0dURC5mb3JFYWNoKChwcm95LCBpZHgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGBcdUQ4M0RcdUREMEQgUHJveWVjdG8gUEdURCAke2lkeCArIDF9OiAke3Byb3kudGl0dWxvIHx8IHByb3kuZmlsZS5iYXNlbmFtZX0gKEVzdGFkbzogJHtwcm95LmVzdGFkbyB8fCBcIlNpbiBlc3RhZG9cIn0pYCk7XG4gICAgICBjb25zb2xlLmxvZyhgICAgIC0gUGF0aDogJHtwcm95LmZpbGUucGF0aH1gKTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyAyLiBPYnRlbmVyIHRvZGFzIGxhcyBjYW1wYVx1MDBGMWFzIGNvbiBjdWFscXVpZXIgZXN0YWRvIFxuICAgIGNvbnNvbGUubG9nKFwiXHVEODNEXHVERDBEIENvbnN1bHRhbmRvIHRvZGFzIGxhcyBjYW1wYVx1MDBGMWFzXCIpO1xuICAgIGNvbnN0IHRvZGFzTGFzQ2FtcGFuYXMgPSBkdi5wYWdlcygpXG4gICAgICAud2hlcmUocCA9PiBwLnR5cGUgPT09IFwiQ3BcIilcbiAgICAgIC5hcnJheSgpO1xuICAgIGNvbnNvbGUubG9nKGBcdUQ4M0RcdUREMEQgRW5jb250cmFkYXMgJHt0b2Rhc0xhc0NhbXBhbmFzLmxlbmd0aH0gY2FtcGFcdTAwRjFhcyBlbiB0b3RhbGApO1xuICAgIFxuICAgIC8vIERpYWduXHUwMEYzc3RpY286IG1vc3RyYXIgdG9kYXMgbGFzIGNhbXBhXHUwMEYxYXMgZW5jb250cmFkYXNcbiAgICB0b2Rhc0xhc0NhbXBhbmFzLmZvckVhY2goKGNhbXBhbmEsIGlkeCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coYFx1RDgzRFx1REQwRCBDYW1wYVx1MDBGMWEgJHtpZHggKyAxfTogJHtjYW1wYW5hLnRpdHVsbyB8fCBjYW1wYW5hLmZpbGUuYmFzZW5hbWV9IChFc3RhZG86ICR7Y2FtcGFuYS5lc3RhZG8gfHwgXCJTaW4gZXN0YWRvXCJ9KWApO1xuICAgICAgY29uc29sZS5sb2coYCAgICAtIFBhdGg6ICR7Y2FtcGFuYS5maWxlLnBhdGh9YCk7XG4gICAgICBjb25zb2xlLmxvZyhgICAgIC0gUHJveWVjdG9HVEQ6ICR7SlNPTi5zdHJpbmdpZnkoY2FtcGFuYS5wcm95ZWN0b0dURCl9YCk7XG4gICAgfSk7XG4gICAgXG4gICAgLy8gMy4gT2J0ZW5lciB0b2RvcyBsb3MgZW50cmVnYWJsZXMgY29uIGN1YWxxdWllciBlc3RhZG9cbiAgICBjb25zb2xlLmxvZyhcIlx1RDgzRFx1REQwRCBDb25zdWx0YW5kbyB0b2RvcyBsb3MgZW50cmVnYWJsZXNcIik7XG4gICAgY29uc3QgdG9kb3NMb3NFbnRyZWdhYmxlcyA9IGR2LnBhZ2VzKClcbiAgICAgIC53aGVyZShwID0+IHAudHlwZSA9PT0gXCJFTWt0XCIpXG4gICAgICAuYXJyYXkoKTtcbiAgICBjb25zb2xlLmxvZyhgXHVEODNEXHVERDBEIEVuY29udHJhZG9zICR7dG9kb3NMb3NFbnRyZWdhYmxlcy5sZW5ndGh9IGVudHJlZ2FibGVzIGVuIHRvdGFsYCk7XG4gICAgXG4gICAgLy8gNC4gTWFwZWFyIGxvcyBkYXRvcyBhIG51ZXN0cmFzIGludGVyZmFjZXNcbiAgICBjb25zdCBwcm95ZWN0b3M6IFByb3llY3RvR1REW10gPSBbXTtcbiAgICBcbiAgICAvLyBGdW5jaVx1MDBGM24gbWVqb3JhZGEgcGFyYSB2ZXJpZmljYXIgc2kgdW5hIHJlZmVyZW5jaWEgYXB1bnRhIGEgdW4gcHJveWVjdG9cbiAgICBjb25zdCByZWZlcmVuY2lhQXB1bnRhQSA9IChyZWY6IGFueSwgdGFyZ2V0UGF0aDogc3RyaW5nLCB0YXJnZXRCYXNlbmFtZTogc3RyaW5nLCB0YXJnZXRUaXR1bG8/OiBzdHJpbmcpOiBib29sZWFuID0+IHtcbiAgICAgIC8vIENhc28gMTogcmVmZXJlbmNpYSBlcyB1biBvYmpldG8gY29uIHBhdGhcbiAgICAgIGlmIChyZWYgJiYgdHlwZW9mIHJlZiA9PT0gJ29iamVjdCcgJiYgcmVmLnBhdGgpIHtcbiAgICAgICAgY29uc3QgY29pbmNpZGUgPSByZWYucGF0aCA9PT0gdGFyZ2V0UGF0aDtcbiAgICAgICAgaWYgKGNvaW5jaWRlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYFx1RDgzRFx1REQwRCBDb2luY2lkZW5jaWEgcG9yIG9iamV0by5wYXRoOiAke3JlZi5wYXRofSA9PT0gJHt0YXJnZXRQYXRofWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2luY2lkZTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gQ2FzbyAyOiByZWZlcmVuY2lhIGVzIHVuYSBjYWRlbmFcbiAgICAgIGlmIChyZWYgJiYgdHlwZW9mIHJlZiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gQ2FzbyAyLjE6IEVzIHVuIHdpa2lsaW5rIFtbcnV0YXxhbGlhc11dXG4gICAgICAgIGNvbnN0IHdpa2lMaW5rTWF0Y2ggPSByZWYubWF0Y2goL1xcW1xcWyguKj8pKD86XFx8KC4qPykpP1xcXVxcXS8pO1xuICAgICAgICBpZiAod2lraUxpbmtNYXRjaCkge1xuICAgICAgICAgIGNvbnN0IHBhdGggPSB3aWtpTGlua01hdGNoWzFdO1xuICAgICAgICAgIC8vIEludGVudGEgY29pbmNpZGlyIGNvbiBsYSBydXRhLCBlbCBub21icmUgZGVsIGFyY2hpdm8gbyBlbCB0XHUwMEVEdHVsb1xuICAgICAgICAgIGNvbnN0IGNvaW5jaWRlUG9yUGF0aCA9IHBhdGggPT09IHRhcmdldFBhdGg7XG4gICAgICAgICAgY29uc3QgY29pbmNpZGVQb3JOb21icmUgPSBwYXRoID09PSB0YXJnZXRCYXNlbmFtZTtcbiAgICAgICAgICBjb25zdCBjb2luY2lkZVBvclRpdHVsbyA9IHRhcmdldFRpdHVsbyAmJiBwYXRoID09PSB0YXJnZXRUaXR1bG87XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKGNvaW5jaWRlUG9yUGF0aCB8fCBjb2luY2lkZVBvck5vbWJyZSB8fCBjb2luY2lkZVBvclRpdHVsbykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYFx1RDgzRFx1REQwRCBDb2luY2lkZW5jaWEgcG9yIHdpa2lsaW5rOiAke3BhdGh9IGNvaW5jaWRlIGNvbiAke3RhcmdldFBhdGh9LCAke3RhcmdldEJhc2VuYW1lfSBvICR7dGFyZ2V0VGl0dWxvfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICByZXR1cm4gY29pbmNpZGVQb3JQYXRoIHx8IGNvaW5jaWRlUG9yTm9tYnJlIHx8IGNvaW5jaWRlUG9yVGl0dWxvO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBDYXNvIDIuMjogRXMgc29sbyBlbCBub21icmUgZGVsIGFyY2hpdm8gbyB0XHUwMEVEdHVsbyBzaW4gZm9ybWF0byB3aWtpbGlua1xuICAgICAgICBjb25zdCBjb2luY2lkZVBvclBhdGggPSByZWYgPT09IHRhcmdldFBhdGg7XG4gICAgICAgIGNvbnN0IGNvaW5jaWRlUG9yTm9tYnJlID0gcmVmID09PSB0YXJnZXRCYXNlbmFtZTtcbiAgICAgICAgY29uc3QgY29pbmNpZGVQb3JUaXR1bG8gPSB0YXJnZXRUaXR1bG8gJiYgcmVmID09PSB0YXJnZXRUaXR1bG87XG4gICAgICAgIFxuICAgICAgICBpZiAoY29pbmNpZGVQb3JQYXRoIHx8IGNvaW5jaWRlUG9yTm9tYnJlIHx8IGNvaW5jaWRlUG9yVGl0dWxvKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYFx1RDgzRFx1REQwRCBDb2luY2lkZW5jaWEgZGlyZWN0YTogJHtyZWZ9IGNvaW5jaWRlIGNvbiAke3RhcmdldFBhdGh9LCAke3RhcmdldEJhc2VuYW1lfSBvICR7dGFyZ2V0VGl0dWxvfWApO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gY29pbmNpZGVQb3JQYXRoIHx8IGNvaW5jaWRlUG9yTm9tYnJlIHx8IGNvaW5jaWRlUG9yVGl0dWxvO1xuICAgICAgfVxuICAgICAgXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBcbiAgICAvLyBQYXJhIGNhZGEgcHJveWVjdG8sIGVuY29udHJhciBzdXMgY2FtcGFcdTAwRjFhcyB5IGVudHJlZ2FibGVzXG4gICAgZm9yIChjb25zdCBwcm95IG9mIHByb3llY3Rvc0dURCkge1xuICAgICAgY29uc29sZS5sb2coYFx1RDgzRFx1REQwRCBQcm9jZXNhbmRvIHByb3llY3RvOiAke3Byb3kudGl0dWxvIHx8IHByb3kuZmlsZS5iYXNlbmFtZX1gKTtcbiAgICAgIFxuICAgICAgLy8gRW5jb250cmFyIGNhbXBhXHUwMEYxYXMgYXNvY2lhZGFzIGEgZXN0ZSBwcm95ZWN0b1xuICAgICAgY29uc3QgY2FtcGFuYXNEZWxQcm95ZWN0byA9IHRvZGFzTGFzQ2FtcGFuYXMuZmlsdGVyKGNhbXAgPT4ge1xuICAgICAgICBpZiAoIWNhbXAucHJveWVjdG9HVEQpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIE5vIHRpZW5lIHJlZmVyZW5jaWEgYSBwcm95ZWN0b1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBOb3JtYWxpemFyIGEgYXJyYXkgKHBvZHJcdTAwRURhIHNlciBzdHJpbmcgdSBvYmpldG8pXG4gICAgICAgIGNvbnN0IHJlZmVyZW5jaWFzID0gQXJyYXkuaXNBcnJheShjYW1wLnByb3llY3RvR1REKSA/IGNhbXAucHJveWVjdG9HVEQgOiBbY2FtcC5wcm95ZWN0b0dURF07XG4gICAgICAgIFxuICAgICAgICAvLyBWZXJpZmljYXIgc2kgYWxndW5hIHJlZmVyZW5jaWEgYXB1bnRhIGEgZXN0ZSBwcm95ZWN0b1xuICAgICAgICBmb3IgKGNvbnN0IHJlZiBvZiByZWZlcmVuY2lhcykge1xuICAgICAgICAgIGlmIChyZWZlcmVuY2lhQXB1bnRhQShyZWYsIHByb3kuZmlsZS5wYXRoLCBwcm95LmZpbGUuYmFzZW5hbWUsIHByb3kudGl0dWxvKSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYFx1RDgzRFx1REQwRCBcdTI3MDUgTGEgY2FtcGFcdTAwRjFhICR7Y2FtcC50aXR1bG8gfHwgY2FtcC5maWxlLmJhc2VuYW1lfSBlc3RcdTAwRTEgYXNvY2lhZGEgYWwgcHJveWVjdG8gJHtwcm95LnRpdHVsbyB8fCBwcm95LmZpbGUuYmFzZW5hbWV9YCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZyhgXHVEODNEXHVERDBEIEVuY29udHJhZGFzICR7Y2FtcGFuYXNEZWxQcm95ZWN0by5sZW5ndGh9IGNhbXBhXHUwMEYxYXMgcGFyYSBlbCBwcm95ZWN0byAke3Byb3kudGl0dWxvIHx8IHByb3kuZmlsZS5iYXNlbmFtZX1gKTtcbiAgICAgIFxuICAgICAgLy8gU2kgbm8gdGllbmUgY2FtcGFcdTAwRjFhcyBhc29jaWFkYXMsIHBhc2FyIGFsIHNpZ3VpZW50ZSBwcm95ZWN0b1xuICAgICAgaWYgKGNhbXBhbmFzRGVsUHJveWVjdG8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBcdUQ4M0RcdUREMEQgXHUyNkEwXHVGRTBGIEVsIHByb3llY3RvICR7cHJveS50aXR1bG8gfHwgcHJveS5maWxlLmJhc2VuYW1lfSBubyB0aWVuZSBjYW1wYVx1MDBGMWFzIGFzb2NpYWRhcywgc2Ugb21pdGlyXHUwMEUxYCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBQcm9jZXNhciBjYW1wYVx1MDBGMWFzIHkgZW50cmVnYWJsZXNcbiAgICAgIGNvbnN0IGNhbXBhbmFzUHJvY2Vzc2VkOiBDYW1wYW5hW10gPSBbXTtcbiAgICAgIGxldCB0b3RhbEhpdHNQcm95ZWN0byA9IDA7XG4gICAgICBcbiAgICAgIGZvciAoY29uc3QgY2FtcCBvZiBjYW1wYW5hc0RlbFByb3llY3RvKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBcdUQ4M0RcdUREMEQgUHJvY2VzYW5kbyBjYW1wYVx1MDBGMWE6ICR7Y2FtcC50aXR1bG8gfHwgY2FtcC5maWxlLmJhc2VuYW1lfWApO1xuICAgICAgICBcbiAgICAgICAgLy8gRW5jb250cmFyIGVudHJlZ2FibGVzIGFzb2NpYWRvcyBhIGVzdGEgY2FtcGFcdTAwRjFhIHVzYW5kbyBlbCBjYW1wbyBhc3VudG9cbiAgICAgICAgY29uc3QgZW50cmVnYWJsZXNEZUNhbXBhbmEgPSB0b2Rvc0xvc0VudHJlZ2FibGVzLmZpbHRlcihlbnQgPT4ge1xuICAgICAgICAgIGlmICghZW50LmFzdW50bykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBObyB0aWVuZSByZWZlcmVuY2lhIGEgY2FtcGFcdTAwRjFhXG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIE5vcm1hbGl6YXIgYSBhcnJheVxuICAgICAgICAgIGNvbnN0IHJlZmVyZW5jaWFzID0gQXJyYXkuaXNBcnJheShlbnQuYXN1bnRvKSA/IGVudC5hc3VudG8gOiBbZW50LmFzdW50b107XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gVmVyaWZpY2FyIHNpIGFsZ3VuYSByZWZlcmVuY2lhIGFwdW50YSBhIGVzdGEgY2FtcGFcdTAwRjFhXG4gICAgICAgICAgZm9yIChjb25zdCByZWYgb2YgcmVmZXJlbmNpYXMpIHtcbiAgICAgICAgICAgIGlmIChyZWZlcmVuY2lhQXB1bnRhQShyZWYsIGNhbXAuZmlsZS5wYXRoLCBjYW1wLmZpbGUuYmFzZW5hbWUsIGNhbXAudGl0dWxvKSkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHVEODNEXHVERDBEIFx1MjcwNSBFbCBlbnRyZWdhYmxlICR7ZW50LnRpdHVsbyB8fCBlbnQuZmlsZS5iYXNlbmFtZX0gZXN0XHUwMEUxIGFzb2NpYWRvIGEgbGEgY2FtcGFcdTAwRjFhICR7Y2FtcC50aXR1bG8gfHwgY2FtcC5maWxlLmJhc2VuYW1lfWApO1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKGBcdUQ4M0RcdUREMEQgRW5jb250cmFkb3MgJHtlbnRyZWdhYmxlc0RlQ2FtcGFuYS5sZW5ndGh9IGVudHJlZ2FibGVzIHBhcmEgbGEgY2FtcGFcdTAwRjFhICR7Y2FtcC50aXR1bG8gfHwgY2FtcC5maWxlLmJhc2VuYW1lfWApO1xuICAgICAgICBcbiAgICAgICAgLy8gUHJvY2VzYXIgZW50cmVnYWJsZXNcbiAgICAgICAgY29uc3QgZW50cmVnYWJsZXNQcm9jZXNzZWQ6IEVudHJlZ2FibGVbXSA9IFtdO1xuICAgICAgICBsZXQgdG90YWxIaXRzQ2FtcGFuYSA9IDA7XG4gICAgICAgXG4gICAgICAgIGxldCBtaW5EaWFzQ2FtcGFuYTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXG4gICAgICAgIGZvciAoY29uc3QgZW50IG9mIGVudHJlZ2FibGVzRGVDYW1wYW5hKSB7XG4gICAgICAgICAgLy8gQ2FsY3VsYXIgZFx1MDBFRGFzIGhhc3RhIHB1YmxpY2FjaVx1MDBGM25cbiAgICAgICAgICBsZXQgZGlmZXJlbmNpYURpYXM6IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoZW50LnB1YmxpY2FjaW9uKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBjb25zdCBmZWNoYVB1YmxpY2FjaW9uID0gd2luZG93Lm1vbWVudChlbnQucHVibGljYWNpb24udG9TdHJpbmcoKSwgXCJZWVlZLU1NLUREXCIpO1xuICAgICAgICAgICAgICBpZiAoZmVjaGFQdWJsaWNhY2lvbi5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICBkaWZlcmVuY2lhRGlhcyA9IGZlY2hhUHVibGljYWNpb24uZGlmZihob3ksICdkYXlzJyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1RDgzRFx1REQwRCBFbnRyZWdhYmxlICR7ZW50LnRpdHVsbyB8fCBlbnQuZmlsZS5iYXNlbmFtZX06IHB1YmxpY2FjaVx1MDBGM24gJHtlbnQucHVibGljYWNpb259ICgke2RpZmVyZW5jaWFEaWFzfSBkXHUwMEVEYXMpLCBlc3RhZG86ICR7ZW50LmVzdGFkbyB8fCBcIlNpbiBlc3RhZG9cIn1gKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFx1RDgzRFx1REQwRCBFcnJvciBwcm9jZXNhbmRvIGZlY2hhIHBhcmEgJHtlbnQuZmlsZS5wYXRofTogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIENBTUJJQURPOiBBY3R1YWxpemFyIG1cdTAwRURuaW1vIHBhcmEgbGEgY2FtcGFcdTAwRjFhIFNPTE8gc2kgZWwgZW50cmVnYWJsZSBlc3RcdTAwRTEgYWN0aXZvIChcdUQ4M0RcdURGRTIpXG4gICAgICAgICAgaWYgKGRpZmVyZW5jaWFEaWFzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGVzdGFkbyA9IGVudC5lc3RhZG8gfHwgXCJcdUQ4M0RcdURGRTFcIjsgLy8gUG9yIGRlZmVjdG8sIHNpIG5vIHRpZW5lIGVzdGFkbywgc2UgY29uc2lkZXJhIGVuIHBhdXNhXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFNvbG8gY29uc2lkZXJhciBlbnRyZWdhYmxlcyBhY3Rpdm9zIHBhcmEgZWwgY1x1MDBFMWxjdWxvIGRlIHZlbmNpbWllbnRvc1xuICAgICAgICAgICAgaWYgKHRoaXMuZW50cmVnYWJsZUFDb25zaWRlcmFyUGFyYVZlbmNpbWllbnRvKGVzdGFkbykpIHtcbiAgICAgICAgICAgICAgaWYgKG1pbkRpYXNDYW1wYW5hID09PSB1bmRlZmluZWQgfHwgZGlmZXJlbmNpYURpYXMgPCBtaW5EaWFzQ2FtcGFuYSkge1xuICAgICAgICAgICAgICAgIG1pbkRpYXNDYW1wYW5hID0gZGlmZXJlbmNpYURpYXM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gUHJvY2VzYXIgaGl0c1xuICAgICAgICAgIGxldCBoaXRzID0gMDtcbiAgICAgICAgICBpZiAoZW50LmhpdHMgIT09IHVuZGVmaW5lZCAmJiBlbnQuaGl0cyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gSW50ZW50YXIgY29udmVydGlyIGEgblx1MDBGQW1lcm9cbiAgICAgICAgICAgIGhpdHMgPSB0eXBlb2YgZW50LmhpdHMgPT09ICdudW1iZXInXG4gICAgICAgICAgICAgID8gZW50LmhpdHNcbiAgICAgICAgICAgICAgOiBwYXJzZUZsb2F0KGVudC5oaXRzKSB8fCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBDcmVhciBvYmpldG8gZW50cmVnYWJsZVxuICAgICAgICAgIGNvbnN0IGVudHJlZ2FibGVJbmZvOiBFbnRyZWdhYmxlID0ge1xuICAgICAgICAgICAgaWQ6IGVudC5pZCB8fCBgZW50LSR7ZW50cmVnYWJsZXNQcm9jZXNzZWQubGVuZ3RofWAsXG4gICAgICAgICAgICB0aXR1bG86IGVudC50aXR1bG8gfHwgZW50LmZpbGUuYmFzZW5hbWUsXG4gICAgICAgICAgICBwYXRoOiBlbnQuZmlsZS5wYXRoLFxuICAgICAgICAgICAgaGl0czogaGl0cyxcbiAgICAgICAgICAgIGVzdGFkbzogZW50LmVzdGFkbyB8fCBcIlx1RDgzRFx1REZFMVwiLCAvLyBQb3IgZGVmZWN0byBhbWFyaWxsbyBzaSBubyBoYXkgZXN0YWRvXG4gICAgICAgICAgICBmZWNoYVB1YmxpY2FjaW9uOiBlbnQucHVibGljYWNpb24sXG4gICAgICAgICAgICBkaWZlcmVuY2lhRGlhcyxcbiAgICAgICAgICAgIGFsaWFzOiBlbnQuYWxpYXNlcz8uWzBdXG4gICAgICAgICAgfTtcbiAgICAgICAgICBcbiAgICAgICAgICBlbnRyZWdhYmxlc1Byb2Nlc3NlZC5wdXNoKGVudHJlZ2FibGVJbmZvKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBDQU1CSU86IFNvbG8gc3VtYXIgaGl0cyBkZSBlc3RhZG9zIGFjdGl2b3MgeSBhcmNoaXZhZG9zXG4gICAgICAgICAgaWYgKGVudC5lc3RhZG8gPT09IFwiXHVEODNEXHVERkUyXCIgfHwgZW50LmVzdGFkbyA9PT0gXCJcdUQ4M0RcdUREMzVcIikge1xuICAgICAgICAgICAgdG90YWxIaXRzQ2FtcGFuYSArPSBoaXRzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXIgb2JqZXRvIGNhbXBhXHUwMEYxYVxuICAgICAgICBjb25zdCBjYW1wYW5hSW5mbzogQ2FtcGFuYSA9IHtcbiAgICAgICAgICBpZDogY2FtcC5pZCB8fCBgY2FtcC0ke2NhbXBhbmFzUHJvY2Vzc2VkLmxlbmd0aH1gLFxuICAgICAgICAgIHRpdHVsbzogY2FtcC50aXR1bG8gfHwgY2FtcC5maWxlLmJhc2VuYW1lLFxuICAgICAgICAgIHBhdGg6IGNhbXAuZmlsZS5wYXRoLFxuICAgICAgICAgIGVudHJlZ2FibGVzOiBlbnRyZWdhYmxlc1Byb2Nlc3NlZCxcbiAgICAgICAgICBoaXRzOiB0b3RhbEhpdHNDYW1wYW5hLFxuICAgICAgICAgIGVzdGFkbzogY2FtcC5lc3RhZG8gfHwgXCJcdUQ4M0RcdURGRTFcIiwgLy8gUG9yIGRlZmVjdG8gYW1hcmlsbG8gc2kgbm8gaGF5IGVzdGFkb1xuICAgICAgICAgIGZlY2hhSW5pY2lvOiBjYW1wLmZlY2hhSW5pY2lvLFxuICAgICAgICAgIGZlY2hhRmluOiBjYW1wLmZlY2hhRmluLFxuICAgICAgICAgIGFsaWFzOiBjYW1wLmFsaWFzZXM/LlswXSxcbiAgICAgICAgICBkaWZlcmVuY2lhRGlhc1Byb3hpbW86IG1pbkRpYXNDYW1wYW5hXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBjYW1wYW5hc1Byb2Nlc3NlZC5wdXNoKGNhbXBhbmFJbmZvKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENBTUJJTzogU29sbyBzdW1hciBoaXRzIGRlIGNhbXBhXHUwMEYxYXMgYWN0aXZhcyB5IGFyY2hpdmFkYXNcbiAgICAgICAgaWYgKGNhbXAuZXN0YWRvID09PSBcIlx1RDgzRFx1REZFMlwiIHx8IGNhbXAuZXN0YWRvID09PSBcIlx1RDgzRFx1REQzNVwiKSB7XG4gICAgICAgICAgdG90YWxIaXRzUHJveWVjdG8gKz0gdG90YWxIaXRzQ2FtcGFuYTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coYFx1RDgzRFx1REQwRCBDYW1wYVx1MDBGMWEgJHtjYW1wYW5hSW5mby50aXR1bG99IGFcdTAwRjFhZGlkYSBjb24gJHtlbnRyZWdhYmxlc1Byb2Nlc3NlZC5sZW5ndGh9IGVudHJlZ2FibGVzIHkgJHt0b3RhbEhpdHNDYW1wYW5hfSBoaXRzYCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIENyZWFyIG9iamV0byBwcm95ZWN0b1xuICAgICAgY29uc3QgcHJveWVjdG9JbmZvOiBQcm95ZWN0b0dURCA9IHtcbiAgICAgICAgaWQ6IHByb3kuaWQgfHwgYHByb3ktJHtwcm95ZWN0b3MubGVuZ3RofWAsXG4gICAgICAgIHRpdHVsbzogcHJveS50aXR1bG8gfHwgcHJveS5maWxlLmJhc2VuYW1lLFxuICAgICAgICBwYXRoOiBwcm95LmZpbGUucGF0aCxcbiAgICAgICAgY2FtcGFuYXM6IGNhbXBhbmFzUHJvY2Vzc2VkLFxuICAgICAgICBoaXRzOiB0b3RhbEhpdHNQcm95ZWN0byxcbiAgICAgICAgZXN0YWRvOiBwcm95LmVzdGFkbyB8fCBcIlx1RDgzRFx1REZFMVwiLCAvLyBQb3IgZGVmZWN0byBhbWFyaWxsbyBzaSBubyBoYXkgZXN0YWRvXG4gICAgICAgIGFsaWFzOiBwcm95LmFsaWFzZXM/LlswXVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgcHJveWVjdG9zLnB1c2gocHJveWVjdG9JbmZvKTtcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coYFx1RDgzRFx1REQwRCBQcm95ZWN0byAke3Byb3llY3RvSW5mby50aXR1bG99IGFcdTAwRjFhZGlkbyBjb24gJHtjYW1wYW5hc1Byb2Nlc3NlZC5sZW5ndGh9IGNhbXBhXHUwMEYxYXMgeSAke3RvdGFsSGl0c1Byb3llY3RvfSBoaXRzYCk7XG4gICAgfVxuICAgIFxuICAgIGNvbnNvbGUubG9nKGBcdUQ4M0RcdUREMEQgVG90YWwgZGUgcHJveWVjdG9zIHByb2Nlc2Fkb3MgY29uIGNhbXBhXHUwMEYxYXM6ICR7cHJveWVjdG9zLmxlbmd0aH1gKTtcbiAgICBcbiAgICByZXR1cm4gcHJveWVjdG9zO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJcdUQ4M0RcdUREMEQgRXJyb3IgYWwgb2J0ZW5lciBkYXRvcyBkZSBwcm95ZWN0b3MgeSBjYW1wYVx1MDBGMWFzOlwiLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuXG4gIC8qKlxuICAgKiBPYnRpZW5lIGxvcyBkYXRvcyBkZSB1biBwcm95ZWN0byBlc3BlY1x1MDBFRGZpY29cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgb2J0ZW5lckRhdG9zUHJveWVjdG8oZHY6IGFueSwgYXJjaGl2b1Byb3llY3RvOiBhbnksIG1vZG86ICdoaXRzJyB8ICdmZWNoYXMnKTogUHJvbWlzZTxQcm95ZWN0b0dURCB8IG51bGw+IHtcbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coYFx1RDgzRFx1REQwRCBPYnRlbmllbmRvIGRhdG9zIGVzcGVjXHUwMEVEZmljb3MgcGFyYSBlbCBwcm95ZWN0bzogJHthcmNoaXZvUHJveWVjdG8ucGF0aH1gKTtcbiAgICAgIFxuICAgICAgY29uc3QgcHJveWVjdG9zID0gYXdhaXQgdGhpcy5vYnRlbmVyVG9kb3NMb3NQcm95ZWN0b3MoZHYsIG1vZG8pO1xuICAgICAgXG4gICAgICAvLyBCdXNjYXIgZWwgcHJveWVjdG8gZXNwZWNcdTAwRURmaWNvXG4gICAgICBjb25zdCBwcm95ZWN0b0VuY29udHJhZG8gPSBwcm95ZWN0b3MuZmluZChwID0+IHAucGF0aCA9PT0gYXJjaGl2b1Byb3llY3RvLnBhdGgpO1xuICAgICAgXG4gICAgICBpZiAocHJveWVjdG9FbmNvbnRyYWRvKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBcdUQ4M0RcdUREMEQgUHJveWVjdG8gZW5jb250cmFkbzogJHtwcm95ZWN0b0VuY29udHJhZG8udGl0dWxvfSBjb24gJHtwcm95ZWN0b0VuY29udHJhZG8uY2FtcGFuYXMubGVuZ3RofSBjYW1wYVx1MDBGMWFzYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhgXHVEODNEXHVERDBEIFx1MjZBMFx1RkUwRiBObyBzZSBlbmNvbnRyXHUwMEYzIGVsIHByb3llY3RvIGVuIGxhIGxpc3RhIGRlIHByb3llY3RvcyBwcm9jZXNhZG9zYCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiBwcm95ZWN0b0VuY29udHJhZG8gfHwgbnVsbDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihgXHVEODNEXHVERDBEIEVycm9yIGFsIG9idGVuZXIgZGF0b3MgZGVsIHByb3llY3RvICR7YXJjaGl2b1Byb3llY3RvLnBhdGh9OmAsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gKiBGb3JtYXRlYSB1bmEgZmVjaGEgZW4gZm9ybWF0byBJU08gYSB1biBmb3JtYXRvIG1cdTAwRTFzIGxlZ2libGVcbiAqIEBwYXJhbSBmZWNoYVN0ciBTdHJpbmcgZGUgZmVjaGEgZW4gZm9ybWF0byBJU08gbyBzaW1pbGFyXG4gKiBAcmV0dXJucyBGZWNoYSBmb3JtYXRlYWRhIGNvbW8gXCJkZGRkLCBkZCBkZSBtbSBkZWwgeXl5eVwiXG4gKi9cbnByaXZhdGUgZm9ybWF0ZWFyRmVjaGFQdWJsaWNhY2lvbihmZWNoYVN0cjogc3RyaW5nIHwgdW5kZWZpbmVkKTogc3RyaW5nIHtcbiAgaWYgKCFmZWNoYVN0cikgcmV0dXJuICdObyBkZWZpbmlkYSc7XG4gIFxuICB0cnkge1xuICAgIC8vIEludGVudGFyIHBhcnNlYXIgbGEgZmVjaGEgY29uIG1vbWVudFxuICAgIGNvbnN0IGZlY2hhID0gd2luZG93Lm1vbWVudChmZWNoYVN0ci50b1N0cmluZygpKTtcbiAgICBcbiAgICBpZiAoIWZlY2hhLmlzVmFsaWQoKSkge1xuICAgICAgY29uc29sZS5sb2coYFx1RDgzRFx1REQwRCBFcnJvcjogRmVjaGEgaW52XHUwMEUxbGlkYSAke2ZlY2hhU3RyfWApO1xuICAgICAgcmV0dXJuIGZlY2hhU3RyOyAvLyBEZXZvbHZlciBvcmlnaW5hbCBzaSBubyBlcyB2XHUwMEUxbGlkYVxuICAgIH1cbiAgICBcbiAgICAvLyBDb25maWd1cmFyIG1vbWVudCBwYXJhIHVzYXIgZXNwYVx1MDBGMW9sXG4gICAgY29uc3QgbG9jYWxlID0gd2luZG93Lm1vbWVudC5sb2NhbGUoKTtcbiAgICBpZiAobG9jYWxlICE9PSAnZXMnKSB7XG4gICAgICB3aW5kb3cubW9tZW50LmxvY2FsZSgnZXMnKTtcbiAgICB9XG4gICAgXG4gICAgLy8gRm9ybWF0ZWFyIGxhIGZlY2hhIGFsIGVzdGlsbyBcInNcdTAwRTFiYWRvLCAyMiBkZSBtYXJ6byBkZWwgMjAyNVwiXG4gICAgLy8gRWwgZm9ybWF0byBlbiBtb21lbnQuanMgdXNhOlxuICAgIC8vIGRkZGQgPSBub21icmUgZFx1MDBFRGEgc2VtYW5hLCBERCA9IGRcdTAwRURhIChuXHUwMEZBbWVybyksIE1NTU0gPSBtZXMgKG5vbWJyZSksIFlZWVkgPSBhXHUwMEYxbyBjb21wbGV0b1xuICAgIGNvbnN0IGZlY2hhRm9ybWF0ZWFkYSA9IGZlY2hhLmZvcm1hdCgnZGRkZCwgREQgW2RlXSBNTU1NIFtkZWxdIFlZWVknKTtcbiAgICBcbiAgICAvLyBSZXN0YXVyYXIgZWwgbG9jYWxlIG9yaWdpbmFsIHNpIGZ1ZSBjYW1iaWFkb1xuICAgIGlmIChsb2NhbGUgIT09ICdlcycpIHtcbiAgICAgIHdpbmRvdy5tb21lbnQubG9jYWxlKGxvY2FsZSk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBmZWNoYUZvcm1hdGVhZGE7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLndhcm4oYFx1RDgzRFx1REQwRCBFcnJvciBhbCBmb3JtYXRlYXIgZmVjaGE6ICR7ZS5tZXNzYWdlfWApO1xuICAgIHJldHVybiBmZWNoYVN0ciB8fCAnTm8gZGVmaW5pZGEnO1xuICB9XG59XG5cbi8qKlxuICogRGV0ZXJtaW5hIGxhIHByaW9yaWRhZCBkZSB1biBlc3RhZG8gcGFyYSBvcmRlbmFtaWVudG9cbiAqIEBwYXJhbSBlc3RhZG8gRW1vamkgZGUgZXN0YWRvXG4gKiBAcmV0dXJucyBWYWxvciBudW1cdTAwRTlyaWNvIGRlIHByaW9yaWRhZCAobWVub3IgPSBtYXlvciBwcmlvcmlkYWQpXG4gKi9cbnByaXZhdGUgZ2V0UHJpb3JpZGFkRXN0YWRvKGVzdGFkbzogc3RyaW5nKTogbnVtYmVyIHtcbiAgc3dpdGNoIChlc3RhZG8pIHtcbiAgICBjYXNlIFwiXHVEODNEXHVERkUyXCI6IHJldHVybiAxOyAvLyBBY3Rpdm8gKG1heW9yIHByaW9yaWRhZClcbiAgICBjYXNlIFwiXHVEODNEXHVERkUxXCI6IHJldHVybiAyOyAvLyBTdXNwZW5kaWRvXG4gICAgY2FzZSBcIlx1RDgzRFx1REQzNVwiOiByZXR1cm4gMzsgLy8gQXJjaGl2YWRvXG4gICAgY2FzZSBcIlx1RDgzRFx1REQzNFwiOiByZXR1cm4gNDsgLy8gQ2FuY2VsYWRvIChtZW5vciBwcmlvcmlkYWQpXG4gICAgZGVmYXVsdDogcmV0dXJuIDU7ICAgLy8gRXN0YWRvcyBubyByZWNvbm9jaWRvcyBhbCBmaW5hbFxuICB9XG59XG5cbi8qKlxuICogT3JkZW5hIGxvcyBwcm95ZWN0b3Mgc2VnXHUwMEZBbiBlbCBtb2RvIHNlbGVjY2lvbmFkbyB5IHJlc3BldGFuZG8gbGEgcHJpb3JpZGFkIGRlIGVzdGFkb3NcbiAqL1xucHJpdmF0ZSBvcmRlbmFyUHJveWVjdG9zKHByb3llY3RvczogUHJveWVjdG9HVERbXSwgbW9kbzogJ2hpdHMnIHwgJ2ZlY2hhcycpOiBQcm95ZWN0b0dURFtdIHtcbiAgaWYgKG1vZG8gPT09ICdoaXRzJykge1xuICAgIC8vIE9yZGVuYXIgcHJpbWVybyBwb3IgZXN0YWRvIHkgbHVlZ28gcG9yIGhpdHMgKG1heW9yIGEgbWVub3IpXG4gICAgcmV0dXJuIFsuLi5wcm95ZWN0b3NdLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIGNvbnN0IHByaW9yaWRhZEEgPSB0aGlzLmdldFByaW9yaWRhZEVzdGFkbyhhLmVzdGFkbyk7XG4gICAgICBjb25zdCBwcmlvcmlkYWRCID0gdGhpcy5nZXRQcmlvcmlkYWRFc3RhZG8oYi5lc3RhZG8pO1xuICAgICAgXG4gICAgICBpZiAocHJpb3JpZGFkQSAhPT0gcHJpb3JpZGFkQikge1xuICAgICAgICByZXR1cm4gcHJpb3JpZGFkQSAtIHByaW9yaWRhZEI7IC8vIE9yZGVuYXIgcHJpbWVybyBwb3IgcHJpb3JpZGFkIGRlIGVzdGFkb1xuICAgICAgfVxuICAgICAgXG4gICAgICByZXR1cm4gYi5oaXRzIC0gYS5oaXRzOyAvLyBMdWVnbyBwb3IgaGl0cyBkZXNjZW5kZW50ZXNcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPcmRlbmFyIHBvciBmZWNoYSBkZWwgZW50cmVnYWJsZSBtXHUwMEUxcyBwclx1MDBGM3hpbW8gYSB2ZW5jZXIgeSByZXNwZXRhbmRvIHByaW9yaWRhZCBkZSBlc3RhZG9cbiAgICByZXR1cm4gWy4uLnByb3llY3Rvc10uc29ydCgoYSwgYikgPT4ge1xuICAgICAgY29uc3QgcHJpb3JpZGFkQSA9IHRoaXMuZ2V0UHJpb3JpZGFkRXN0YWRvKGEuZXN0YWRvKTtcbiAgICAgIGNvbnN0IHByaW9yaWRhZEIgPSB0aGlzLmdldFByaW9yaWRhZEVzdGFkbyhiLmVzdGFkbyk7XG4gICAgICBcbiAgICAgIGlmIChwcmlvcmlkYWRBICE9PSBwcmlvcmlkYWRCKSB7XG4gICAgICAgIHJldHVybiBwcmlvcmlkYWRBIC0gcHJpb3JpZGFkQjsgLy8gT3JkZW5hciBwcmltZXJvIHBvciBwcmlvcmlkYWQgZGUgZXN0YWRvXG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IHByb3hpbW9BID0gdGhpcy5vYnRlbmVyRGlhc1Byb3hpbW9WZW5jaW1pZW50byhhKTtcbiAgICAgIGNvbnN0IHByb3hpbW9CID0gdGhpcy5vYnRlbmVyRGlhc1Byb3hpbW9WZW5jaW1pZW50byhiKTtcbiAgICAgIFxuICAgICAgLy8gU2kgYWxndW5vIG5vIHRpZW5lIGZlY2hhcywgcG9uZXJsbyBhbCBmaW5hbCBkZW50cm8gZGUgc3UgY2F0ZWdvclx1MDBFRGEgZGUgZXN0YWRvXG4gICAgICBpZiAocHJveGltb0EgPT09IG51bGwgJiYgcHJveGltb0IgPT09IG51bGwpIHJldHVybiAwO1xuICAgICAgaWYgKHByb3hpbW9BID09PSBudWxsKSByZXR1cm4gMTtcbiAgICAgIGlmIChwcm94aW1vQiA9PT0gbnVsbCkgcmV0dXJuIC0xO1xuICAgICAgXG4gICAgICAvLyBPcmRlbmFyIHBvciBwcm94aW1pZGFkIChtZW5vciBuXHUwMEZBbWVybyBkZSBkXHUwMEVEYXMgcHJpbWVybylcbiAgICAgIHJldHVybiBwcm94aW1vQSAtIHByb3hpbW9CO1xuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogT3JkZW5hIGxhcyBjYW1wYVx1MDBGMWFzIHNlZ1x1MDBGQW4gZWwgbW9kbyBzZWxlY2Npb25hZG8geSByZXNwZXRhbmRvIGxhIHByaW9yaWRhZCBkZSBlc3RhZG9zXG4gKi9cbnByaXZhdGUgb3JkZW5hckNhbXBhbmFzKGNhbXBhbmFzOiBDYW1wYW5hW10sIG1vZG86ICdoaXRzJyB8ICdmZWNoYXMnKTogQ2FtcGFuYVtdIHtcbiAgaWYgKGNhbXBhbmFzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBbXTsgLy8gTm8gaGF5IGNhbXBhXHUwMEYxYXMgcGFyYSBvcmRlbmFyXG4gIH1cbiAgXG4gIGlmIChtb2RvID09PSAnaGl0cycpIHtcbiAgICAvLyBPcmRlbmFyIHByaW1lcm8gcG9yIGVzdGFkbyB5IGx1ZWdvIHBvciBoaXRzIChtYXlvciBhIG1lbm9yKVxuICAgIHJldHVybiBbLi4uY2FtcGFuYXNdLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIGNvbnN0IHByaW9yaWRhZEEgPSB0aGlzLmdldFByaW9yaWRhZEVzdGFkbyhhLmVzdGFkbyk7XG4gICAgICBjb25zdCBwcmlvcmlkYWRCID0gdGhpcy5nZXRQcmlvcmlkYWRFc3RhZG8oYi5lc3RhZG8pO1xuICAgICAgXG4gICAgICBpZiAocHJpb3JpZGFkQSAhPT0gcHJpb3JpZGFkQikge1xuICAgICAgICByZXR1cm4gcHJpb3JpZGFkQSAtIHByaW9yaWRhZEI7IC8vIE9yZGVuYXIgcHJpbWVybyBwb3IgcHJpb3JpZGFkIGRlIGVzdGFkb1xuICAgICAgfVxuICAgICAgXG4gICAgICByZXR1cm4gYi5oaXRzIC0gYS5oaXRzOyAvLyBMdWVnbyBwb3IgaGl0cyBkZXNjZW5kZW50ZXNcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPcmRlbmFyIHBvciBmZWNoYSBkZWwgZW50cmVnYWJsZSBtXHUwMEUxcyBwclx1MDBGM3hpbW8geSByZXNwZXRhbmRvIHByaW9yaWRhZCBkZSBlc3RhZG9cbiAgICByZXR1cm4gWy4uLmNhbXBhbmFzXS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICBjb25zdCBwcmlvcmlkYWRBID0gdGhpcy5nZXRQcmlvcmlkYWRFc3RhZG8oYS5lc3RhZG8pO1xuICAgICAgY29uc3QgcHJpb3JpZGFkQiA9IHRoaXMuZ2V0UHJpb3JpZGFkRXN0YWRvKGIuZXN0YWRvKTtcbiAgICAgIFxuICAgICAgaWYgKHByaW9yaWRhZEEgIT09IHByaW9yaWRhZEIpIHtcbiAgICAgICAgcmV0dXJuIHByaW9yaWRhZEEgLSBwcmlvcmlkYWRCOyAvLyBPcmRlbmFyIHByaW1lcm8gcG9yIHByaW9yaWRhZCBkZSBlc3RhZG9cbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKGEuZGlmZXJlbmNpYURpYXNQcm94aW1vID09PSB1bmRlZmluZWQgJiYgYi5kaWZlcmVuY2lhRGlhc1Byb3hpbW8gPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gICAgICBpZiAoYS5kaWZlcmVuY2lhRGlhc1Byb3hpbW8gPT09IHVuZGVmaW5lZCkgcmV0dXJuIDE7XG4gICAgICBpZiAoYi5kaWZlcmVuY2lhRGlhc1Byb3hpbW8gPT09IHVuZGVmaW5lZCkgcmV0dXJuIC0xO1xuICAgICAgXG4gICAgICAvLyBPcmRlbmFyIHBvciBwcm94aW1pZGFkIChtZW5vciBuXHUwMEZBbWVybyBkZSBkXHUwMEVEYXMgcHJpbWVybylcbiAgICAgIHJldHVybiBhLmRpZmVyZW5jaWFEaWFzUHJveGltbyAtIGIuZGlmZXJlbmNpYURpYXNQcm94aW1vO1xuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogT3JkZW5hIGxvcyBlbnRyZWdhYmxlcyBzZWdcdTAwRkFuIGVsIG1vZG8gc2VsZWNjaW9uYWRvIHkgcmVzcGV0YW5kbyBsYSBwcmlvcmlkYWQgZGUgZXN0YWRvc1xuICovXG5wcml2YXRlIG9yZGVuYXJFbnRyZWdhYmxlcyhlbnRyZWdhYmxlczogRW50cmVnYWJsZVtdLCBtb2RvOiAnaGl0cycgfCAnZmVjaGFzJyk6IEVudHJlZ2FibGVbXSB7XG4gIGlmIChlbnRyZWdhYmxlcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gW107IC8vIE5vIGhheSBlbnRyZWdhYmxlcyBwYXJhIG9yZGVuYXJcbiAgfVxuICBcbiAgaWYgKG1vZG8gPT09ICdoaXRzJykge1xuICAgIC8vIE9yZGVuYXIgcHJpbWVybyBwb3IgZXN0YWRvIHkgbHVlZ28gcG9yIGhpdHMgKG1heW9yIGEgbWVub3IpXG4gICAgcmV0dXJuIFsuLi5lbnRyZWdhYmxlc10uc29ydCgoYSwgYikgPT4ge1xuICAgICAgY29uc3QgcHJpb3JpZGFkQSA9IHRoaXMuZ2V0UHJpb3JpZGFkRXN0YWRvKGEuZXN0YWRvKTtcbiAgICAgIGNvbnN0IHByaW9yaWRhZEIgPSB0aGlzLmdldFByaW9yaWRhZEVzdGFkbyhiLmVzdGFkbyk7XG4gICAgICBcbiAgICAgIGlmIChwcmlvcmlkYWRBICE9PSBwcmlvcmlkYWRCKSB7XG4gICAgICAgIHJldHVybiBwcmlvcmlkYWRBIC0gcHJpb3JpZGFkQjsgLy8gT3JkZW5hciBwcmltZXJvIHBvciBwcmlvcmlkYWQgZGUgZXN0YWRvXG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiBiLmhpdHMgLSBhLmhpdHM7IC8vIEx1ZWdvIHBvciBoaXRzIGRlc2NlbmRlbnRlc1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIE9yZGVuYXIgcG9yIGZlY2hhIGRlIHB1YmxpY2FjaVx1MDBGM24geSByZXNwZXRhbmRvIHByaW9yaWRhZCBkZSBlc3RhZG9cbiAgICByZXR1cm4gWy4uLmVudHJlZ2FibGVzXS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICBjb25zdCBwcmlvcmlkYWRBID0gdGhpcy5nZXRQcmlvcmlkYWRFc3RhZG8oYS5lc3RhZG8pO1xuICAgICAgY29uc3QgcHJpb3JpZGFkQiA9IHRoaXMuZ2V0UHJpb3JpZGFkRXN0YWRvKGIuZXN0YWRvKTtcbiAgICAgIFxuICAgICAgaWYgKHByaW9yaWRhZEEgIT09IHByaW9yaWRhZEIpIHtcbiAgICAgICAgcmV0dXJuIHByaW9yaWRhZEEgLSBwcmlvcmlkYWRCOyAvLyBPcmRlbmFyIHByaW1lcm8gcG9yIHByaW9yaWRhZCBkZSBlc3RhZG9cbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKGEuZGlmZXJlbmNpYURpYXMgPT09IHVuZGVmaW5lZCAmJiBiLmRpZmVyZW5jaWFEaWFzID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICAgICAgaWYgKGEuZGlmZXJlbmNpYURpYXMgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDE7XG4gICAgICBpZiAoYi5kaWZlcmVuY2lhRGlhcyA9PT0gdW5kZWZpbmVkKSByZXR1cm4gLTE7XG4gICAgICBcbiAgICAgIC8vIE9yZGVuYXIgcG9yIHByb3hpbWlkYWQgKG1lbm9yIG5cdTAwRkFtZXJvIGRlIGRcdTAwRURhcyBwcmltZXJvKVxuICAgICAgcmV0dXJuIGEuZGlmZXJlbmNpYURpYXMgLSBiLmRpZmVyZW5jaWFEaWFzO1xuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogTW9kaWZpY2FjaW9uZXMgY2xhdmUgYWwgUHJveWVjdG9DYW1wYW5hc0NvbXBvbmVudCBwYXJhIGNvcnJlZ2lyIGVsIG1hbmVqbyBkZSBmZWNoYXMgc2VnXHUwMEZBbiBlc3RhZG9cbiAqL1xuXG4vKipcbiAqIERldGVybWluYSBzaSB1biBlbnRyZWdhYmxlIGRlYmUgY29uc2lkZXJhcnNlIHBhcmEgZWwgY1x1MDBFMWxjdWxvIGRlIGZlY2hhcyBkZSB2ZW5jaW1pZW50b1xuICogQHBhcmFtIGVzdGFkbyBFc3RhZG8gZGVsIGVudHJlZ2FibGUgKGVtb2ppKVxuICogQHJldHVybnMgdHJ1ZSBzaSBlbCBlbnRyZWdhYmxlIGRlYmUgY29uc2lkZXJhcnNlIHBhcmEgdmVuY2ltaWVudG9zXG4gKi9cbnByaXZhdGUgZW50cmVnYWJsZUFDb25zaWRlcmFyUGFyYVZlbmNpbWllbnRvKGVzdGFkbzogc3RyaW5nKTogYm9vbGVhbiB7XG4gIC8vIFNvbG8gbG9zIGVudHJlZ2FibGVzIGFjdGl2b3MgKFx1RDgzRFx1REZFMikgZGViZW4gYWZlY3RhciBlbCBjXHUwMEUxbGN1bG8gZGUgdmVuY2ltaWVudG9zXG4gIC8vIExvcyBlbnRyZWdhYmxlcyBlbiBwYXVzYSAoXHVEODNEXHVERkUxKSwgYXJjaGl2YWRvcyAoXHVEODNEXHVERDM1KSBvIGNhbmNlbGFkb3MgKFx1RDgzRFx1REQzNCkgbm8gZGViZW4gYWZlY3RhclxuICByZXR1cm4gZXN0YWRvID09PSBcIlx1RDgzRFx1REZFMlwiO1xufVxuXG4vKipcbiAqIE9idGllbmUgbG9zIGRcdTAwRURhcyBoYXN0YSBlbCBwclx1MDBGM3hpbW8gdmVuY2ltaWVudG8gZW4gdW4gcHJveWVjdG8sIGNvbnNpZGVyYW5kbyBzb2xvIGVudHJlZ2FibGVzIGFjdGl2b3NcbiAqL1xucHJpdmF0ZSBvYnRlbmVyRGlhc1Byb3hpbW9WZW5jaW1pZW50byhwcm95ZWN0bzogUHJveWVjdG9HVEQpOiBudW1iZXIgfCBudWxsIHtcbiAgbGV0IG1pbkRpYXM6IG51bWJlciB8IG51bGwgPSBudWxsO1xuICBcbiAgcHJveWVjdG8uY2FtcGFuYXMuZm9yRWFjaChjYW1wYW5hID0+IHtcbiAgICAvLyBTb2xvIGNvbnNpZGVyYXIgY2FtcGFcdTAwRjFhcyBhY3RpdmFzIChcdUQ4M0RcdURGRTIpIHBhcmEgbG9zIHZlbmNpbWllbnRvcyBkZWwgcHJveWVjdG9cbiAgICBpZiAoY2FtcGFuYS5lc3RhZG8gPT09IFwiXHVEODNEXHVERkUyXCIpIHtcbiAgICAgIC8vIFNpIGxhIGNhbXBhXHUwMEYxYSB0aWVuZSB1biB2YWxvciBkaWZlcmVuY2lhRGlhc1Byb3hpbW8gZGVmaW5pZG8uLi5cbiAgICAgIGlmIChjYW1wYW5hLmRpZmVyZW5jaWFEaWFzUHJveGltbyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChtaW5EaWFzID09PSBudWxsIHx8IGNhbXBhbmEuZGlmZXJlbmNpYURpYXNQcm94aW1vIDwgbWluRGlhcykge1xuICAgICAgICAgIG1pbkRpYXMgPSBjYW1wYW5hLmRpZmVyZW5jaWFEaWFzUHJveGltbztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIFxuICByZXR1cm4gbWluRGlhcztcbn1cblxuLyoqXG4gKiBPYnRpZW5lIGxhIGNsYXNlIENTUyBwYXJhIGxhIGNlbGRhIGRlIGRcdTAwRURhcyBzZWdcdTAwRkFuIGVsIGVzdGFkbyBkZWwgZW50cmVnYWJsZSB5IHN1IGZlY2hhXG4gKiBAcGFyYW0gZGlmZXJlbmNpYURpYXMgRFx1MDBFRGFzIGhhc3RhIGxhIGZlY2hhIGRlIHB1YmxpY2FjaVx1MDBGM24gKG5lZ2F0aXZvIHNpIHlhIHBhc1x1MDBGMylcbiAqIEBwYXJhbSBlc3RhZG8gRXN0YWRvIGRlbCBlbnRyZWdhYmxlXG4gKiBAcmV0dXJucyBDbGFzZSBDU1MgcGFyYSBhcGxpY2FyXG4gKi9cbnByaXZhdGUgb2J0ZW5lckNsYXNlVmVuY2ltaWVudG8oZGlmZXJlbmNpYURpYXM6IG51bWJlciwgZXN0YWRvOiBzdHJpbmcgPSBcIlx1RDgzRFx1REZFMlwiKTogc3RyaW5nIHtcbiAgLy8gUGFyYSBlbnRyZWdhYmxlcyBhcmNoaXZhZG9zIChcdUQ4M0RcdUREMzUpIHNpZW1wcmUgbW9zdHJhciBjb21vIGNvbXBsZXRhZG9zXG4gIGlmIChlc3RhZG8gPT09IFwiXHVEODNEXHVERDM1XCIpIHtcbiAgICByZXR1cm4gXCJjb21wbGV0YWRvXCI7XG4gIH1cbiAgXG4gIC8vIFBhcmEgZW50cmVnYWJsZXMgY2FuY2VsYWRvcyAoXHVEODNEXHVERDM0KSBzaWVtcHJlIG1vc3RyYXIgY29tbyBjYW5jZWxhZG9zXG4gIGlmIChlc3RhZG8gPT09IFwiXHVEODNEXHVERDM0XCIpIHtcbiAgICByZXR1cm4gXCJjYW5jZWxhZG9cIjtcbiAgfVxuICBcbiAgLy8gUGFyYSBlbnRyZWdhYmxlcyBlbiBwYXVzYSAoXHVEODNEXHVERkUxKSBtb3N0cmFyIHVuIGVzdGFkbyBlc3BlY2lhbFxuICBpZiAoZXN0YWRvID09PSBcIlx1RDgzRFx1REZFMVwiKSB7XG4gICAgcmV0dXJuIGRpZmVyZW5jaWFEaWFzIDwgMCA/IFwicGF1c2Fkby12ZW5jaWRvXCIgOiBcInBhdXNhZG9cIjtcbiAgfVxuICBcbiAgLy8gUGFyYSBlbnRyZWdhYmxlcyBhY3Rpdm9zIChcdUQ4M0RcdURGRTIpLCB1c2FyIGxhIGxcdTAwRjNnaWNhIG5vcm1hbCBkZSBmZWNoYXNcbiAgaWYgKGRpZmVyZW5jaWFEaWFzIDwgMCkgcmV0dXJuIFwidmVuY2lkb1wiOyAvLyBZYSB2ZW5jaWRvXG4gIGlmIChkaWZlcmVuY2lhRGlhcyA8PSAxKSByZXR1cm4gXCJob3lcIjsgLy8gSG95IG8gbWFcdTAwRjFhbmFcbiAgaWYgKGRpZmVyZW5jaWFEaWFzIDw9IDMpIHJldHVybiBcInByb3hpbW9cIjsgLy8gUHJcdTAwRjN4aW1vcyAzIGRcdTAwRURhc1xuICBpZiAoZGlmZXJlbmNpYURpYXMgPD0gNykgcmV0dXJuIFwiY2VyY2Fub1wiOyAvLyBQclx1MDBGM3hpbWEgc2VtYW5hXG4gIHJldHVybiBcImZ1dHVyb1wiOyAvLyBNXHUwMEUxcyBkZSB1bmEgc2VtYW5hXG59XG5cbi8qKlxuICogRm9ybWF0ZWEgbG9zIGRcdTAwRURhcyBwYXJhIG1vc3RyYXIgZGUgZm9ybWEgbGVnaWJsZSBzZWdcdTAwRkFuIGVsIGVzdGFkbyBkZWwgZW50cmVnYWJsZVxuICogQHBhcmFtIGRpZmVyZW5jaWFEaWFzIERcdTAwRURhcyBoYXN0YSBsYSBmZWNoYSBkZSBwdWJsaWNhY2lcdTAwRjNuXG4gKiBAcGFyYW0gZXN0YWRvIEVzdGFkbyBkZWwgZW50cmVnYWJsZVxuICogQHJldHVybnMgVGV4dG8gZm9ybWF0ZWFkbyBwYXJhIG1vc3RyYXJcbiAqL1xucHJpdmF0ZSBmb3JtYXRlYXJEaWFzVmVuY2ltaWVudG8oZGlmZXJlbmNpYURpYXM6IG51bWJlciwgZXN0YWRvOiBzdHJpbmcgPSBcIlx1RDgzRFx1REZFMlwiKTogc3RyaW5nIHtcbiAgLy8gTWVuc2FqZSBlc3BlY1x1MDBFRGZpY28gc2VnXHUwMEZBbiBlbCBlc3RhZG9cbiAgaWYgKGVzdGFkbyA9PT0gXCJcdUQ4M0RcdUREMzVcIikge1xuICAgIHJldHVybiBcIkNvbXBsZXRhZG9cIjtcbiAgfVxuICBcbiAgaWYgKGVzdGFkbyA9PT0gXCJcdUQ4M0RcdUREMzRcIikge1xuICAgIHJldHVybiBcIkNhbmNlbGFkb1wiO1xuICB9XG4gIFxuICBpZiAoZXN0YWRvID09PSBcIlx1RDgzRFx1REZFMVwiKSB7XG4gICAgaWYgKGRpZmVyZW5jaWFEaWFzIDwgMCkge1xuICAgICAgY29uc3QgZGlhc0FicyA9IE1hdGguYWJzKGRpZmVyZW5jaWFEaWFzKTtcbiAgICAgIHJldHVybiBgRW4gcGF1c2EgKCR7ZGlhc0Fic30gJHtkaWFzQWJzID09PSAxID8gJ2RcdTAwRURhJyA6ICdkXHUwMEVEYXMnfSlgO1xuICAgIH1cbiAgICByZXR1cm4gYEVuIHBhdXNhICgke2RpZmVyZW5jaWFEaWFzfSBkXHUwMEVEYXMpYDtcbiAgfVxuICBcbiAgLy8gTFx1MDBGM2dpY2Egbm9ybWFsIHBhcmEgZXN0YWRvcyBhY3Rpdm9zXG4gIGlmIChkaWZlcmVuY2lhRGlhcyA9PT0gMCkgcmV0dXJuIFwiSG95XCI7XG4gIGlmIChkaWZlcmVuY2lhRGlhcyA9PT0gMSkgcmV0dXJuIFwiTWFcdTAwRjFhbmFcIjtcbiAgaWYgKGRpZmVyZW5jaWFEaWFzIDwgMCkge1xuICAgIGNvbnN0IGRpYXNBYnMgPSBNYXRoLmFicyhkaWZlcmVuY2lhRGlhcyk7XG4gICAgcmV0dXJuIGBWZW5jaWRvICgke2RpYXNBYnN9ICR7ZGlhc0FicyA9PT0gMSA/ICdkXHUwMEVEYScgOiAnZFx1MDBFRGFzJ30pYDtcbiAgfVxuICByZXR1cm4gYCR7ZGlmZXJlbmNpYURpYXN9IGRcdTAwRURhc2A7XG59XG5cblxufSIsICIvKlxuICogRmlsZW5hbWU6IC9zcmMvbW9kdWxlcy9ub3RlTGlmZWN5Y2xlTWFuYWdlci9BUEkvYWRkT25zQVBJLnRzXG4gKiBQYXRoOiAvc3JjL21vZHVsZXMvbm90ZUxpZmVjeWNsZU1hbmFnZXIvQVBJXG4gKiBDcmVhdGVkIERhdGU6IDIwMjQtMDMtMTkgMDk6MzI6MDNcbiAqIEF1dGhvcjogQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqIC0tLS0tXG4gKiBMYXN0IE1vZGlmaWVkOiAyMDI1LTAyLTIzIDE3OjQ4OjM1XG4gKiBNb2RpZmllZCBCeTogQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqIC0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjUgLSBBbmRyXHUwMEU5cyBKdWxpXHUwMEUxbiBCb3JiXHUwMEYzblxuICovXG5cbmltcG9ydCB7IFRhcmVhc0luYm94Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL1RhcmVhc0luYm94Q29tcG9uZW50JztcbmltcG9ydCB7IFByb3llY3RvQ2FtcGFuYXNDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvUHJveWVjdG9DYW1wYW5hc0NvbXBvbmVudCc7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uVXRpbHMgfSBmcm9tICcuL3V0aWxzL05hdmlnYXRpb25VdGlscyc7XG5cbmV4cG9ydCBjbGFzcyBhZGRPbnNBUEkge1xuICAgIHByaXZhdGUgcGx1Z2luOiBhbnk7XG4gICAgcHJpdmF0ZSB0YXJlYXNJbmJveENvbXBvbmVudDogVGFyZWFzSW5ib3hDb21wb25lbnQ7XG4gICAgLy8gTnVldm8gY29tcG9uZW50ZSAtIGFzZWdcdTAwRkFyYXRlIGRlIHF1ZSBzZSBkZWNsYXJlIGFxdVx1MDBFRFxuICAgIHByaXZhdGUgcHJveWVjdG9DYW1wYW5hc0NvbXBvbmVudDogUHJveWVjdG9DYW1wYW5hc0NvbXBvbmVudDtcbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IGFueSkge1xuICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgICB0aGlzLnRhcmVhc0luYm94Q29tcG9uZW50ID0gbmV3IFRhcmVhc0luYm94Q29tcG9uZW50KHBsdWdpbik7XG4gICAgICAgLy8gSW5pY2lhbGl6YWNpXHUwMEYzbiBkZWwgY29tcG9uZW50ZSAtIGFzZWdcdTAwRkFyYXRlIGRlIHF1ZSBlc3RhIGxcdTAwRURuZWEgZXhpc3RlXG4gICAgICAgdGhpcy5wcm95ZWN0b0NhbXBhbmFzQ29tcG9uZW50ID0gbmV3IFByb3llY3RvQ2FtcGFuYXNDb21wb25lbnQocGx1Z2luKTsgLy9cbiAgICB9XG4gIFxuICAgIGNyZWFyUHJldk5leHQocGFnaW5hcywgcGFnSW5kaWNlLCBkdikge1xuICAgICAgICBsZXQgcGFnaW5hID0gZHYuY3VycmVudCgpO1xuICAgICAgICBsZXQgaW5kaWNlO1xuICAgICAgICBmb3IgKGxldCBhID0gMDsgYSA8IHBhZ2luYXMubGVuZ3RoOyBhKyspIHtcbiAgICAgICAgICAgIGlmIChwYWdpbmFzW2FdLmZpbGUubmFtZSA9PSBwYWdpbmEuZmlsZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgaW5kaWNlID0gYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIFxuICAgICAgICBsZXQgbGlua3MgPSBbXTtcbiAgICAgICAgaWYgKGluZGljZSA9PSAwICYmIHBhZ2luYXMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIGxpbmtzWzBdID0gXCJcIjtcbiAgICAgICAgICAgIGxpbmtzWzFdID0gXCJcIjtcbiAgICAgICAgfSBlbHNlIGlmIChpbmRpY2UgPT0gMCkge1xuICAgICAgICAgICAgbGlua3NbMF0gPSBcIlwiO1xuICAgICAgICAgICAgbGlua3NbMV0gPSBcIlx1MjdBMVx1RkUwRiBcIiArIGR2LmZ1bmMubGluayhwYWdpbmFzW2luZGljZSArIDFdLmZpbGUucGF0aCwgdGhpcy5kZXRlcm1pbmFyVGV4dG9FbmxhY2UocGFnaW5hc1tpbmRpY2UgKyAxXSkpO1xuICAgICAgICB9IGVsc2UgaWYgKGluZGljZSA9PSAocGFnaW5hcy5sZW5ndGggLSAxKSkge1xuICAgICAgICAgICAgbGlua3NbMF0gPSBkdi5mdW5jLmxpbmsocGFnaW5hc1tpbmRpY2UgLSAxXS5maWxlLnBhdGgsIHRoaXMuZGV0ZXJtaW5hclRleHRvRW5sYWNlKHBhZ2luYXNbaW5kaWNlIC0gMV0pKSArIFwiIFx1MkIwNVx1RkUwRlwiO1xuICAgICAgICAgICAgbGlua3NbMV0gPSBcIlwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGlua3NbMF0gPSBkdi5mdW5jLmxpbmsocGFnaW5hc1tpbmRpY2UgLSAxXS5maWxlLnBhdGgsIHRoaXMuZGV0ZXJtaW5hclRleHRvRW5sYWNlKHBhZ2luYXNbaW5kaWNlIC0gMV0pKSArIFwiIFx1MkIwNVx1RkUwRlwiO1xuICAgICAgICAgICAgbGlua3NbMV0gPSBcIlx1MjdBMVx1RkUwRiBcIiArIGR2LmZ1bmMubGluayhwYWdpbmFzW2luZGljZSArIDFdLmZpbGUucGF0aCwgdGhpcy5kZXRlcm1pbmFyVGV4dG9FbmxhY2UocGFnaW5hc1tpbmRpY2UgKyAxXSkpO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGR2LnBhcmFncmFwaChsaW5rc1swXSArIFwiID09XCIgKyBkdi5mdW5jLmxpbmsocGFnSW5kaWNlLmZpbGUucGF0aCwgcGFnSW5kaWNlLnRpdHVsbyB8fCBwYWdJbmRpY2UuZmlsZS5uYW1lKSArIFwiPT0gXCIgKyBsaW5rc1sxXSk7XG4gICAgfVxuXG4gICAgZGV0ZXJtaW5hclRleHRvRW5sYWNlKHBhZ2luYSkge1xuICAgICAgICBpZiAocGFnaW5hLnRpdHVsbykge1xuICAgICAgICAgICAgcmV0dXJuIHBhZ2luYS50aXR1bG87XG4gICAgICAgIH0gZWxzZSBpZiAocGFnaW5hLmFsaWFzZXMgJiYgcGFnaW5hLmFsaWFzZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhZ2luYS5hbGlhc2VzWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHBhZ2luYS5maWxlLm5hbWU7XG4gICAgICAgIH1cbiAgICB9XG4gIFxuXG5cbi8qKlxuICogR2VuZXJhIHRleHRvIGRlIHJlbGFjaW9uZXMgY29uIGVubGFjZXMgZnVuY2lvbmFsZXMgeSBmb3JtYXRlYWRvIGNvbiBDU1NcbiAqIEBwYXJhbSBwYWdpbmEgTGEgcFx1MDBFMWdpbmEgYWN0dWFsIG9idGVuaWRhIGEgdHJhdlx1MDBFOXMgZGUgZHYuY3VycmVudCgpXG4gKiBAcGFyYW0gZHYgRWwgb2JqZXRvIGRhdGF2aWV3IHBhcmEgYWNjZWRlciBhIHN1cyBmdW5jaW9uZXNcbiAqIEByZXR1cm5zIE9iamV0byBIVE1MIHBhcmEgc2VyIHVzYWRvIGNvbiBkdi5wYXJhZ3JhcGgoKVxuICovXG5nZW5lcmFyVGV4dG9SZWxhY2lvbmVzKHBhZ2luYSwgZHYpIHtcbiAgICAvLyBQcmltZXJvIGdlbmVyYW1vcyBlbCB0ZXh0byBjb24gZW5sYWNlcyBmdW5jaW9uYWxlc1xuICAgIGxldCB0ZXh0byA9IGAke3BhZ2luYS50eXBlTmFtZSB8fCBcIkVudHJlZ2FibGVcIn0gcmVsYWNpb25hZG8gYSBgO1xuICAgIGNvbnN0IHJlbGFjaW9uZXMgPSBbXTtcbiAgICBcbiAgICAvLyBBc3VudG9cbiAgICBpZiAocGFnaW5hLmFzdW50byAmJiBBcnJheS5pc0FycmF5KHBhZ2luYS5hc3VudG8pKSB7XG4gICAgICAgIGNvbnN0IGFzdW50b0xpbmtzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgZW50cnlPYmogb2YgcGFnaW5hLmFzdW50bykge1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IGVudHJ5T2JqLnBhdGggfHwgZW50cnlPYmo7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnICYmIHBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFzdW50b1BhZ2UgPSBkdi5wYWdlKHBhdGgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXN1bnRvUGFnZSAmJiBhc3VudG9QYWdlLmZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsaWFzID0gYXN1bnRvUGFnZS5maWxlLmFsaWFzZXM/LlswXSB8fCBhc3VudG9QYWdlLnRpdHVsbyB8fCBhc3VudG9QYWdlLmZpbGUubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzdW50b0xpbmtzLnB1c2goZHYuZmlsZUxpbmsoYXN1bnRvUGFnZS5maWxlLnBhdGgsIGZhbHNlLCBhbGlhcykpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXN1bnRvTGlua3MucHVzaChcImFzdW50byBubyBlbmNvbnRyYWRvXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBhc3VudG9MaW5rcy5wdXNoKFwiYXN1bnRvIG5vIGVuY29udHJhZG9cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoYXN1bnRvTGlua3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmVsYWNpb25lcy5wdXNoKGBhc3VudG86ICR7YXN1bnRvTGlua3Muam9pbihcIiwgXCIpfWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVsYWNpb25lcy5wdXNoKFwiYXN1bnRvOiBhc3VudG8gbm8gZW5jb250cmFkb1wiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFByb3llY3RvcyBHVERcbiAgICBpZiAocGFnaW5hLnByb3llY3RvR1REICYmIChBcnJheS5pc0FycmF5KHBhZ2luYS5wcm95ZWN0b0dURCkgfHwgdHlwZW9mIHBhZ2luYS5wcm95ZWN0b0dURCA9PT0gJ3N0cmluZycpKSB7XG4gICAgICAgIGNvbnN0IHByb3llY3RvTGlua3MgPSBbXTtcbiAgICAgICAgY29uc3QgcHJveWVjdG9BcnJheSA9IEFycmF5LmlzQXJyYXkocGFnaW5hLnByb3llY3RvR1REKSBcbiAgICAgICAgICAgID8gcGFnaW5hLnByb3llY3RvR1REIFxuICAgICAgICAgICAgOiBbcGFnaW5hLnByb3llY3RvR1REXTtcbiAgICAgICAgXG4gICAgICAgIGZvciAoY29uc3QgZW50cnlPYmogb2YgcHJveWVjdG9BcnJheSkge1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IGVudHJ5T2JqLnBhdGggfHwgZW50cnlPYmo7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnICYmIHBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb3llY3RvUGFnZSA9IGR2LnBhZ2UocGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm95ZWN0b1BhZ2UgJiYgcHJveWVjdG9QYWdlLmZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsaWFzID0gcHJveWVjdG9QYWdlLmZpbGUuYWxpYXNlcz8uWzBdIHx8IHByb3llY3RvUGFnZS50aXR1bG8gfHwgcHJveWVjdG9QYWdlLmZpbGUubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3llY3RvTGlua3MucHVzaChkdi5maWxlTGluayhwcm95ZWN0b1BhZ2UuZmlsZS5wYXRoLCBmYWxzZSwgYWxpYXMpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2kgbGEgcFx1MDBFMWdpbmEgbm8gc2UgZW5jdWVudHJhLCBwb2RlbW9zIGV4dHJhZXIgZWwgdFx1MDBFRHR1bG8gZGVsIHBhdGggbyBsYSBlbnRyYWRhIG9yaWdpbmFsXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZW50cnlPYmogPT09ICdzdHJpbmcnICYmIGVudHJ5T2JqLmluY2x1ZGVzKCd8JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnRlcyA9IGVudHJ5T2JqLnNwbGl0KCd8Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm95ZWN0b0xpbmtzLnB1c2gocGFydGVzW3BhcnRlcy5sZW5ndGggLSAxXS5yZXBsYWNlKCddXScsICcnKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbnRlbnRhbW9zIGVuY29udHJhciBlbCBub21icmUgZGVzZGUgZWwgcGF0aFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF0aFBhcnRzID0gcGF0aC5zcGxpdCgnLycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZU5hbWUgPSBwYXRoUGFydHNbcGF0aFBhcnRzLmxlbmd0aCAtIDFdLnJlcGxhY2UoJy5tZCcsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3llY3RvTGlua3MucHVzaChmaWxlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChwcm95ZWN0b0xpbmtzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJlbGFjaW9uZXMucHVzaChgUEdURDogJHtwcm95ZWN0b0xpbmtzLmpvaW4oXCIsIFwiKX1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFx1MDBDMXJlYXMgZGUgaW50ZXJcdTAwRTlzXG4gICAgaWYgKHBhZ2luYS5hcmVhSW50ZXJlcyAmJiAoQXJyYXkuaXNBcnJheShwYWdpbmEuYXJlYUludGVyZXMpIHx8IHR5cGVvZiBwYWdpbmEuYXJlYUludGVyZXMgPT09ICdzdHJpbmcnKSkge1xuICAgICAgICBjb25zdCBhcmVhTGlua3MgPSBbXTtcbiAgICAgICAgY29uc3QgYXJlYUFycmF5ID0gQXJyYXkuaXNBcnJheShwYWdpbmEuYXJlYUludGVyZXMpIFxuICAgICAgICAgICAgPyBwYWdpbmEuYXJlYUludGVyZXMgXG4gICAgICAgICAgICA6IFtwYWdpbmEuYXJlYUludGVyZXNdO1xuICAgICAgICBcbiAgICAgICAgZm9yIChjb25zdCBlbnRyeU9iaiBvZiBhcmVhQXJyYXkpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBlbnRyeU9iai5wYXRoIHx8IGVudHJ5T2JqO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJyAmJiBwYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhcmVhUGFnZSA9IGR2LnBhZ2UocGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmVhUGFnZSAmJiBhcmVhUGFnZS5maWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGlhcyA9IGFyZWFQYWdlLmZpbGUuYWxpYXNlcz8uWzBdIHx8IGFyZWFQYWdlLnRpdHVsbyB8fCBhcmVhUGFnZS5maWxlLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmVhTGlua3MucHVzaChkdi5maWxlTGluayhhcmVhUGFnZS5maWxlLnBhdGgsIGZhbHNlLCBhbGlhcykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTaSBsYSBwXHUwMEUxZ2luYSBubyBzZSBlbmN1ZW50cmEsIHBvZGVtb3MgZXh0cmFlciBlbCB0XHUwMEVEdHVsbyBkZWwgcGF0aCBvIGxhIGVudHJhZGEgb3JpZ2luYWxcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlbnRyeU9iaiA9PT0gJ3N0cmluZycgJiYgZW50cnlPYmouaW5jbHVkZXMoJ3wnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFydGVzID0gZW50cnlPYmouc3BsaXQoJ3wnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZWFMaW5rcy5wdXNoKHBhcnRlc1twYXJ0ZXMubGVuZ3RoIC0gMV0ucmVwbGFjZSgnXV0nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW50ZW50YW1vcyBlbmNvbnRyYXIgZWwgbm9tYnJlIGRlc2RlIGVsIHBhdGhcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJ0cyA9IHBhdGguc3BsaXQoJy8nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVOYW1lID0gcGF0aFBhcnRzW3BhdGhQYXJ0cy5sZW5ndGggLSAxXS5yZXBsYWNlKCcubWQnLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmVhTGlua3MucHVzaChmaWxlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChhcmVhTGlua3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmVsYWNpb25lcy5wdXNoKGBBSTogJHthcmVhTGlua3Muam9pbihcIiwgXCIpfWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gXHUwMEMxcmVhIGRlIHZpZGFcbiAgICBpZiAocGFnaW5hLmFyZWFWaWRhKSB7XG4gICAgICAgIGxldCBhcmVhVmlkYVRleHQgPSBwYWdpbmEuYXJlYVZpZGE7XG4gICAgICAgIFxuICAgICAgICAvLyBTaSBlbCBcdTAwRTFyZWEgZGUgdmlkYSBlcyB1bmEgcmVmZXJlbmNpYSwgcHJvY2VzYXIgZGUgbWFuZXJhIHNpbWlsYXJcbiAgICAgICAgaWYgKHR5cGVvZiBwYWdpbmEuYXJlYVZpZGEgPT09ICdzdHJpbmcnICYmIHBhZ2luYS5hcmVhVmlkYS5pbmNsdWRlcygnW1snKSkge1xuICAgICAgICAgICAgLy8gRXMgdW5hIHJlZmVyZW5jaWEgd2lraSwgb2J0ZW5lciBlbCBub21icmUgYW1pZ2FibGVcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gcGFnaW5hLmFyZWFWaWRhLm1hdGNoKC9cXFtcXFsoLio/KVxcfCguKj8pXFxdXFxdLyk7XG4gICAgICAgICAgICBpZiAobWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID49IDMpIHtcbiAgICAgICAgICAgICAgICBhcmVhVmlkYVRleHQgPSBtYXRjaFsyXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXJlYVZpZGFUZXh0ID0gcGFnaW5hLmFyZWFWaWRhLnJlcGxhY2UoL1xcW1xcW3xcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZWxhY2lvbmVzLnB1c2goYEFWOiAke2FyZWFWaWRhVGV4dH1gKTtcbiAgICB9XG5cbiAgICAvLyBVbmlyIHRvZGFzIGxhcyByZWxhY2lvbmVzXG4gICAgdGV4dG8gKz0gcmVsYWNpb25lcy5qb2luKFwiLCBcIik7XG4gICAgXG4gICAgLy8gQVx1MDBGMWFkaXIgZWwgZXN0YWRvIGFsIGZpbmFsXG4gICAgaWYgKHBhZ2luYS5lc3RhZG8pIHtcbiAgICAgICAgdGV4dG8gKz0gYCBlbiBlc3RhZG8gJHtwYWdpbmEuZXN0YWRvfWA7XG4gICAgfVxuICAgIFxuICAgIC8vIEVudm9sdmVyIGVsIGNvbnRlbmlkbyBlbiB1biBzcGFuIGNvbiBjbGFzZSBwYXJhIGVzdGlsb3MgQ1NTXG4gICAgLy8gQ3JlYW1vcyB1biBlbGVtZW50byBIVE1MIHV0aWxpemFuZG8gbGFzIGZ1bmNpb25lcyBkZSBEYXRhdmlld1xuICAgIHJldHVybiBkdi5lbChcInNwYW5cIiwgdGV4dG8sIHsgY2xzOiBcIm5vdGEtcmVsYWNpb25lc1wiIH0pO1xufVxuXG5cbi8qKlxuICogR2VuZXJhIHVuIFx1MDBFMXJib2wgZGUgcmVmZXJlbmNpYXMgYSBsYSBub3RhIGFjdHVhbCBkZSBmb3JtYSByZWN1cnNpdmEgY29uIGVsZW1lbnRvcyB0b2dnbGVcbiAqIEBwYXJhbSBwYWdpbmFBY3R1YWwgTGEgcFx1MDBFMWdpbmEgYWN0dWFsXG4gKiBAcGFyYW0gZHYgT2JqZXRvIGRhdGF2aWV3IHBhcmEgYWNjZWRlciBhIHN1cyBmdW5jaW9uZXNcbiAqIEBwYXJhbSBwcm9mdW5kaWRhZE1heGltYSBQcm9mdW5kaWRhZCBtXHUwMEUxeGltYSBkZSByZWN1cnNpXHUwMEYzbiAoZGVmZWN0bzogMylcbiAqIEBwYXJhbSB2aXNpdGFkYXMgU2V0IGRlIElEcyBkZSBwXHUwMEUxZ2luYXMgeWEgdmlzaXRhZGFzIHBhcmEgZXZpdGFyIGNpY2xvc1xuICogQHBhcmFtIHByb2Z1bmRpZGFkQWN0dWFsIFByb2Z1bmRpZGFkIGFjdHVhbCBkZSByZWN1cnNpXHUwMEYzblxuICogQHJldHVybnMgRWxlbWVudG8gSFRNTCBjb24gbGEgZXN0cnVjdHVyYSBkZSBcdTAwRTFyYm9sXG4gKi9cblxuZ2VuZXJhckFyYm9sUmVmZXJlbmNpYXMocGFnaW5hQWN0dWFsLCBkdiwgcHJvZnVuZGlkYWRNYXhpbWEgPSAzLCB2aXNpdGFkYXMgPSBuZXcgU2V0KCksIHByb2Z1bmRpZGFkQWN0dWFsID0gMCkge1xuICAgIC8vIFZhbGlkYXIgcXVlIHBhZ2luYUFjdHVhbCB0ZW5nYSBsYXMgcHJvcGllZGFkZXMgbmVjZXNhcmlhc1xuICAgIGlmICghcGFnaW5hQWN0dWFsIHx8ICFwYWdpbmFBY3R1YWwuZmlsZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3I6IHBhZ2luYUFjdHVhbCBubyB0aWVuZSBsYXMgcHJvcGllZGFkZXMgbmVjZXNhcmlhc1wiLCBwYWdpbmFBY3R1YWwpO1xuICAgICAgICByZXR1cm4gZHYuZWwoXCJkaXZcIiwgXCJFcnJvcjogTm8gc2UgcHVlZGUgZ2VuZXJhciBlbCBcdTAwRTFyYm9sIGRlIHJlZmVyZW5jaWFzLlwiLCB7IGNsczogXCJiYWNrbGlua3MtdHJlZS1lcnJvclwiIH0pO1xuICAgIH1cbiAgICBcbiAgICAvLyBDcmVhciBlbCBjb250ZW5lZG9yIHByaW5jaXBhbFxuICAgIGNvbnN0IGNvbnRlbmVkb3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGNvbnRlbmVkb3IuY2xhc3NOYW1lID0gXCJiYWNrbGlua3MtdHJlZVwiO1xuICAgIFxuICAgIGlmIChwcm9mdW5kaWRhZEFjdHVhbCA9PT0gMCkge1xuICAgICAgICAvLyBBXHUwMEYxYWRpciB0XHUwMEVEdHVsbyBwZXJzb25hbGl6YWRvIHNvbG8gZW4gbGEgcmFcdTAwRUR6XG4gICAgICAgIGNvbnN0IHRpcG9Ob3RhID0gcGFnaW5hQWN0dWFsLnR5cGVOYW1lIHx8IFwiTm90YVwiO1xuICAgICAgICBjb25zdCBhbGlhcyA9IHBhZ2luYUFjdHVhbC5maWxlLmFsaWFzZXMgJiYgcGFnaW5hQWN0dWFsLmZpbGUuYWxpYXNlcy5sZW5ndGggPiAwIFxuICAgICAgICAgICAgPyBwYWdpbmFBY3R1YWwuZmlsZS5hbGlhc2VzWzBdIFxuICAgICAgICAgICAgOiAocGFnaW5hQWN0dWFsLnRpdHVsbyB8fCBwYWdpbmFBY3R1YWwuZmlsZS5uYW1lKTtcbiAgICAgICAgICAgIFxuICAgICAgICBjb25zdCB0aXR1bG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDNcIik7XG4gICAgICAgIHRpdHVsby5jbGFzc05hbWUgPSBcImJhY2tsaW5rcy10cmVlLXRpdGxlXCI7XG4gICAgICAgIHRpdHVsby50ZXh0Q29udGVudCA9IGBSZWZlcmVuY2lhcyBhICR7dGlwb05vdGF9IFwiJHthbGlhc31cImA7XG4gICAgICAgIGNvbnRlbmVkb3IuYXBwZW5kQ2hpbGQodGl0dWxvKTtcbiAgICB9XG4gICAgXG4gICAgLy8gU2kgaGVtb3MgbGxlZ2FkbyBhIGxhIHByb2Z1bmRpZGFkIG1cdTAwRTF4aW1hLCBubyBzZWd1aW1vcyBleHBsb3JhbmRvXG4gICAgaWYgKHByb2Z1bmRpZGFkQWN0dWFsID49IHByb2Z1bmRpZGFkTWF4aW1hKSB7XG4gICAgICAgIHJldHVybiBjb250ZW5lZG9yO1xuICAgIH1cbiAgICBcbiAgICAvLyBNYXJjYXIgZXN0YSBwXHUwMEUxZ2luYSBjb21vIHZpc2l0YWRhIHBhcmEgZXZpdGFyIGNpY2xvc1xuICAgIHZpc2l0YWRhcy5hZGQocGFnaW5hQWN0dWFsLmZpbGUucGF0aCk7XG4gICAgXG4gICAgLy8gT2J0ZW5lciB0b2RhcyBsYXMgcFx1MDBFMWdpbmFzIHF1ZSBoYWNlbiByZWZlcmVuY2lhIGRpcmVjdGEgYSBsYSBwXHUwMEUxZ2luYSBhY3R1YWxcbiAgICBsZXQgdG9kYXNMYXNQYWdpbmFzO1xuICAgIHRyeSB7XG4gICAgICAgIHRvZGFzTGFzUGFnaW5hcyA9IGR2LnBhZ2VzKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWwgb2J0ZW5lciBwXHUwMEUxZ2luYXM6XCIsIGUpO1xuICAgICAgICBjb25zdCBlcnJvck1zZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICBlcnJvck1zZy5jbGFzc05hbWUgPSBcImJhY2tsaW5rcy10cmVlLWVycm9yXCI7XG4gICAgICAgIGVycm9yTXNnLnRleHRDb250ZW50ID0gXCJFcnJvciBhbCBvYnRlbmVyIHBcdTAwRTFnaW5hcyBkZSBEYXRhdmlld1wiO1xuICAgICAgICBjb250ZW5lZG9yLmFwcGVuZENoaWxkKGVycm9yTXNnKTtcbiAgICAgICAgcmV0dXJuIGNvbnRlbmVkb3I7XG4gICAgfVxuICAgIFxuICAgIC8vIEZpbHRyYXIgbGFzIHBcdTAwRTFnaW5hcyBxdWUgcmVmZXJlbmNpYW4gYSBsYSBhY3R1YWwgYSB0cmF2XHUwMEU5cyBkZSAnYXN1bnRvJ1xuICAgIGxldCByZWZlcmVuY2lhc0RpcmVjdGFzID0gW107XG4gICAgdHJ5IHtcbiAgICAgICAgcmVmZXJlbmNpYXNEaXJlY3RhcyA9IHRvZGFzTGFzUGFnaW5hcy5maWx0ZXIocCA9PiB7XG4gICAgICAgICAgICBpZiAoIXAuYXN1bnRvKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIE5vcm1hbGl6YXIgYXN1bnRvIGEgYXJyYXlcbiAgICAgICAgICAgIGNvbnN0IGFzdW50b3MgPSBBcnJheS5pc0FycmF5KHAuYXN1bnRvKSA/IHAuYXN1bnRvIDogW3AuYXN1bnRvXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yIChjb25zdCBhc3VudG8gb2YgYXN1bnRvcykge1xuICAgICAgICAgICAgICAgIC8vIFNpIGFzdW50byBlcyB1biBvYmpldG8gY29uIHBhdGggeSBjb2luY2lkZSBjb24gbGEgcFx1MDBFMWdpbmEgYWN0dWFsXG4gICAgICAgICAgICAgICAgaWYgKGFzdW50byAmJiB0eXBlb2YgYXN1bnRvID09PSAnb2JqZWN0JyAmJiBhc3VudG8ucGF0aCA9PT0gcGFnaW5hQWN0dWFsLmZpbGUucGF0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gU2kgYXN1bnRvIGVzIHVuYSBjYWRlbmEgY29uIGVsIGZvcm1hdG8gW1tydXRhfGFsaWFzXV1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFzdW50byA9PT0gJ3N0cmluZycgJiYgYXN1bnRvLmluY2x1ZGVzKHBhZ2luYUFjdHVhbC5maWxlLnBhdGgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBTaSBhc3VudG8gZXMgdW5hIGNhZGVuYSB5IGNvaW5jaWRlIGNvbiBlbCBhbGlhcyBvIG5vbWJyZSBkZSBsYSBwXHUwMEUxZ2luYSBhY3R1YWxcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFzdW50byA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVmVyaWZpY2FyIGNvaW5jaWRlbmNpYSBjb24gYWxpYXNlc1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGlhc2VzID0gcGFnaW5hQWN0dWFsLmZpbGUuYWxpYXNlcyB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhbGlhcyBvZiBhbGlhc2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXN1bnRvLmluY2x1ZGVzKGFsaWFzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBWZXJpZmljYXIgY29pbmNpZGVuY2lhIGNvbiBlbCBub21icmUgZGVsIGFyY2hpdm9cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFzdW50by5pbmNsdWRlcyhwYWdpbmFBY3R1YWwuZmlsZS5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWwgZmlsdHJhciByZWZlcmVuY2lhczpcIiwgZSk7XG4gICAgICAgIGNvbnN0IGVycm9yTXNnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgIGVycm9yTXNnLmNsYXNzTmFtZSA9IFwiYmFja2xpbmtzLXRyZWUtZXJyb3JcIjtcbiAgICAgICAgZXJyb3JNc2cudGV4dENvbnRlbnQgPSBcIkVycm9yIGFsIHByb2Nlc2FyIHJlZmVyZW5jaWFzXCI7XG4gICAgICAgIGNvbnRlbmVkb3IuYXBwZW5kQ2hpbGQoZXJyb3JNc2cpO1xuICAgICAgICByZXR1cm4gY29udGVuZWRvcjtcbiAgICB9XG4gICAgXG4gICAgLy8gU2kgbm8gaGF5IHJlZmVyZW5jaWFzLCBtb3N0cmFyIG1lbnNhamVcbiAgICBpZiAocmVmZXJlbmNpYXNEaXJlY3Rhcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKHByb2Z1bmRpZGFkQWN0dWFsID09PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBtZW5zYWplID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgICAgICBtZW5zYWplLmNsYXNzTmFtZSA9IFwiYmFja2xpbmtzLXRyZWUtZW1wdHlcIjtcbiAgICAgICAgICAgIG1lbnNhamUudGV4dENvbnRlbnQgPSBcIk5vIHNlIGVuY29udHJhcm9uIHJlZmVyZW5jaWFzIGEgZXN0YSBub3RhXCI7XG4gICAgICAgICAgICBjb250ZW5lZG9yLmFwcGVuZENoaWxkKG1lbnNhamUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250ZW5lZG9yO1xuICAgIH1cbiAgICBcbiAgICAvLyBOVUVWTzogT3JkZW5hciBsYXMgcmVmZXJlbmNpYXMgc2VnXHUwMEZBbiBsb3MgY3JpdGVyaW9zIGVzcGVjaWZpY2Fkb3NcbiAgICByZWZlcmVuY2lhc0RpcmVjdGFzID0gdGhpcy5vcmRlbmFyUmVmZXJlbmNpYXMocmVmZXJlbmNpYXNEaXJlY3Rhcyk7XG4gICAgXG4gICAgLy8gQ3JlYXIgbGlzdGEgcGFyYSBtb3N0cmFyIHJlZmVyZW5jaWFzXG4gICAgY29uc3QgbGlzdGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XG4gICAgbGlzdGEuY2xhc3NOYW1lID0gYGJhY2tsaW5rcy10cmVlLWxldmVsLSR7cHJvZnVuZGlkYWRBY3R1YWx9YDtcbiAgICBcbiAgICAvLyBBXHUwMEYxYWRpciBjYWRhIHJlZmVyZW5jaWEgYSBsYSBsaXN0YVxuICAgIGZvciAoY29uc3QgcmVmZXJlbmNpYSBvZiByZWZlcmVuY2lhc0RpcmVjdGFzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBFdml0YXIgY2ljbG9zXG4gICAgICAgICAgICBpZiAodmlzaXRhZGFzLmhhcyhyZWZlcmVuY2lhLmZpbGUucGF0aCkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ3JlYXIgZWxlbWVudG8gZGUgbGlzdGFcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICAgICAgICBpdGVtLmNsYXNzTmFtZSA9IFwiYmFja2xpbmtzLXRyZWUtaXRlbVwiO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDcmVhciBjb250ZW5lZG9yIHBhcmEgZWwgZWxlbWVudG8gdG9nZ2xlIHkgc3UgY29udGVuaWRvXG4gICAgICAgICAgICBjb25zdCBpdGVtQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIGl0ZW1Db250YWluZXIuY2xhc3NOYW1lID0gXCJiYWNrbGlua3MtdHJlZS1pdGVtLWNvbnRhaW5lclwiO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBBXHUwMEYxYWRpciB0aXBvIHkgZW5sYWNlIGFsIGNvbnRlbmVkb3IgcHJpbmNpcGFsXG4gICAgICAgICAgICBjb25zdCB0aXBvID0gcmVmZXJlbmNpYS50eXBlTmFtZSB8fCBcIk5vdGFcIjtcbiAgICAgICAgICAgIGNvbnN0IHRpcG9FbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICAgICAgdGlwb0VsLmNsYXNzTmFtZSA9IFwiYmFja2xpbmtzLXRyZWUtdHlwZVwiO1xuICAgICAgICAgICAgdGlwb0VsLnRleHRDb250ZW50ID0gYFske3RpcG99XSBgO1xuICAgICAgICAgICAgaXRlbUNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aXBvRWwpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBBXHUwMEYxYWRpciBlbCBlc3RhZG8gZW50cmUgZWwgdGlwbyB5IGVsIGVubGFjZVxuICAgICAgICAgICAgY29uc3QgZXN0YWRvID0gcmVmZXJlbmNpYS5lc3RhZG8gfHwgXCJcIjtcbiAgICAgICAgICAgIGlmIChlc3RhZG8pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlc3RhZG9FbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICAgICAgICAgIGVzdGFkb0VsLmNsYXNzTmFtZSA9IFwiYmFja2xpbmtzLXRyZWUtZXN0YWRvXCI7XG4gICAgICAgICAgICAgICAgZXN0YWRvRWwudGV4dENvbnRlbnQgPSBgJHtlc3RhZG99IGA7XG4gICAgICAgICAgICAgICAgZXN0YWRvRWwuc3R5bGUubWFyZ2luUmlnaHQgPSBcIjRweFwiO1xuICAgICAgICAgICAgICAgIGl0ZW1Db250YWluZXIuYXBwZW5kQ2hpbGQoZXN0YWRvRWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBEZXRlcm1pbmFyIGVsIHRleHRvIHBhcmEgbW9zdHJhciBlbiBlbCBlbmxhY2VcbiAgICAgICAgICAgIGxldCBub21icmVNb3N0cmFkbyA9IFwiXCI7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG5vbWJyZU1vc3RyYWRvID0gcmVmZXJlbmNpYS5maWxlLmFsaWFzZXMgJiYgcmVmZXJlbmNpYS5maWxlLmFsaWFzZXMubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgICA/IHJlZmVyZW5jaWEuZmlsZS5hbGlhc2VzWzBdIFxuICAgICAgICAgICAgICAgICAgICA6IChyZWZlcmVuY2lhLnRpdHVsbyB8fCByZWZlcmVuY2lhLmZpbGUubmFtZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgbm9tYnJlTW9zdHJhZG8gPSByZWZlcmVuY2lhLmZpbGUubmFtZSB8fCBcIlNpbiBub21icmVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAvLyBNYW5lam8gZGUgZW5sYWNlcyBwYXJhIGFicmlyIGVuIG51ZXZhIHBlc3RhXHUwMEYxYVxuICAgICAgICAgICAgY29uc3QgZW5sYWNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgICAgICAgICBlbmxhY2UudGV4dENvbnRlbnQgPSBub21icmVNb3N0cmFkbztcbiAgICAgICAgICAgIGVubGFjZS5jbGFzc05hbWUgPSBcImludGVybmFsLWxpbmtcIjtcblxuICAgICAgICAgICAgLy8gRW4gbHVnYXIgZGUgY29uc3RydWlyIHVuYSBVUkwgb2JzaWRpYW46Ly8sIHVzYW1vcyBkYXRhLWhyZWYgcGFyYSBhbG1hY2VuYXIgbGEgcnV0YSBkZWwgYXJjaGl2b1xuICAgICAgICAgICAgZW5sYWNlLnNldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiLCByZWZlcmVuY2lhLmZpbGUucGF0aCk7XG5cbiAgICAgICAgICAgIC8vIFVzYW1vcyBsYSBBUEkgZGUgT2JzaWRpYW4gcGFyYSBtYW5lamFyIGVsIGNsaWMgeSBsYSBhcGVydHVyYSBkZWwgYXJjaGl2byBlbiBudWV2YSBwZXN0YVx1MDBGMWFcbiAgICAgICAgICAgIGVubGFjZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKTtcbiAgICAgICAgICAgICAgICBpZiAocGF0aCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBFbCB0ZXJjZXIgcGFyXHUwMEUxbWV0cm8gZW4gJ3RydWUnIGxlIGluZGljYSBhIE9ic2lkaWFuIHF1ZSBhYnJhIGVuIHVuYSBudWV2YSBob2phXG4gICAgICAgICAgICAgICAgICAgIGFwcC53b3Jrc3BhY2Uub3BlbkxpbmtUZXh0KHBhdGgsIFwiXCIsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdGVtQ29udGFpbmVyLmFwcGVuZENoaWxkKGVubGFjZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEludGVudGFyIG9idGVuZXIgcmVjdXJzaXZhbWVudGUgcmVmZXJlbmNpYXMgYSBlc3RhIHJlZmVyZW5jaWFcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gTnVldm8gY29uanVudG8gZGUgdmlzaXRhZGFzIHBhcmEgbm8gYWZlY3RhciBvdHJvcyBuaXZlbGVzXG4gICAgICAgICAgICAgICAgY29uc3QgbnVldm9WaXNpdGFkYXMgPSBuZXcgU2V0KFsuLi52aXNpdGFkYXNdKTtcbiAgICAgICAgICAgICAgICBudWV2b1Zpc2l0YWRhcy5hZGQocmVmZXJlbmNpYS5maWxlLnBhdGgpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhciBzaSBoYXkgc3VicmVmZXJlbmNpYXMgYW50ZXMgZGUgY3JlYXIgZWwgdG9nZ2xlXG4gICAgICAgICAgICAgICAgY29uc3Qgc3ViUmVmZXJlbmNpYXMgPSB0aGlzLmdlbmVyYXJBcmJvbFJlZmVyZW5jaWFzKFxuICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2lhLCBkdiwgcHJvZnVuZGlkYWRNYXhpbWEsIFxuICAgICAgICAgICAgICAgICAgICBudWV2b1Zpc2l0YWRhcywgcHJvZnVuZGlkYWRBY3R1YWwgKyAxXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBTaSBoYXkgY29udGVuaWRvIFx1MDBGQXRpbCBlbiBsYXMgc3VicmVmZXJlbmNpYXNcbiAgICAgICAgICAgICAgICBpZiAoc3ViUmVmZXJlbmNpYXMuY2hpbGRyZW4gJiYgc3ViUmVmZXJlbmNpYXMuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBWZXJpZmljYXIgc2kgaGF5IG1cdTAwRTFzIHF1ZSBzb2xvIGVsIHRcdTAwRUR0dWxvXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpZW5lQ29udGVuaWRvVXRpbCA9IHN1YlJlZmVyZW5jaWFzLmNoaWxkcmVuLmxlbmd0aCA+IDEgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICAoc3ViUmVmZXJlbmNpYXMuY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIFxuICAgICAgICAgICAgICAgICAgICAgICAgICFzdWJSZWZlcmVuY2lhcy5jaGlsZHJlblswXS5jbGFzc0xpc3QuY29udGFpbnMoXCJiYWNrbGlua3MtdHJlZS10aXRsZVwiKSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAodGllbmVDb250ZW5pZG9VdGlsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhciBlbCBlbGVtZW50byB0b2dnbGUgKGJvdFx1MDBGM24gcXVlIGluZGljYSBzaSBoYXkgc3VicmVmZXJlbmNpYXMpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2dnbGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUJ1dHRvbi5jbGFzc05hbWUgPSBcImJhY2tsaW5rcy10cmVlLXRvZ2dsZVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQnV0dG9uLnRleHRDb250ZW50ID0gXCJcdTI1QkFcIjsgLy8gVHJpXHUwMEUxbmd1bG8gYSBsYSBkZXJlY2hhIChjZXJyYWRvKVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbnNlcnRhciBlbCB0b2dnbGUgYWwgaW5pY2lvIGRlbCBpdGVtQ29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtQ29udGFpbmVyLmluc2VydEJlZm9yZSh0b2dnbGVCdXR0b24sIGl0ZW1Db250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFcdTAwRjFhZGlyIGNvbnRlbmVkb3IgcGFyYSBzdWJyZWZlcmVuY2lhcyBxdWUgc2VyXHUwMEUxIHRvZ2dsZWFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1YkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJDb250YWluZXIuY2xhc3NOYW1lID0gXCJiYWNrbGlua3MtdHJlZS1zdWJjb250YWluZXJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YkNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7IC8vIE9jdWx0byBwb3IgZGVmZWN0b1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViQ29udGFpbmVyLmFwcGVuZENoaWxkKHN1YlJlZmVyZW5jaWFzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQVx1MDBGMWFkaXIgZXZlbnRvIGFsIHRvZ2dsZVxuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1YkNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQnV0dG9uLnRleHRDb250ZW50ID0gXCJcdTI1QkNcIjsgLy8gVHJpXHUwMEUxbmd1bG8gaGFjaWEgYWJham8gKGFiaWVydG8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwib3BlblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVCdXR0b24udGV4dENvbnRlbnQgPSBcIlx1MjVCQVwiOyAvLyBUcmlcdTAwRTFuZ3VsbyBhIGxhIGRlcmVjaGEgKGNlcnJhZG8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwib3BlblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQVx1MDBGMWFkaXIgZWwgc3ViY29udGFpbmVyIGRlc3B1XHUwMEU5cyBkZWwgaXRlbUNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5hcHBlbmRDaGlsZChpdGVtQ29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uYXBwZW5kQ2hpbGQoc3ViQ29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5vIGhheSBzdWJyZWZlcmVuY2lhcyBcdTAwRkF0aWxlcywgc29sbyBhXHUwMEYxYWRpciBlbCBpdGVtQ29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmFwcGVuZENoaWxkKGl0ZW1Db250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2kgbm8gaGF5IG5pbmd1bmEgc3VicmVmZXJlbmNpYSwgc29sbyBhXHUwMEYxYWRpciBlbCBpdGVtQ29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uYXBwZW5kQ2hpbGQoaXRlbUNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBlbiBsYSByZWN1cnNpXHUwMEYzbiBwYXJhIFwiICsgcmVmZXJlbmNpYS5maWxlLnBhdGgsIGUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yTXNnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgICAgICAgICAgZXJyb3JNc2cuY2xhc3NOYW1lID0gXCJiYWNrbGlua3MtdHJlZS1lcnJvclwiO1xuICAgICAgICAgICAgICAgIGVycm9yTXNnLnRleHRDb250ZW50ID0gXCIgKEVycm9yIGFsIG9idGVuZXIgc3VicmVmZXJlbmNpYXMpXCI7XG4gICAgICAgICAgICAgICAgaXRlbUNvbnRhaW5lci5hcHBlbmRDaGlsZChlcnJvck1zZyk7XG4gICAgICAgICAgICAgICAgaXRlbS5hcHBlbmRDaGlsZChpdGVtQ29udGFpbmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQVx1MDBGMWFkaXIgZWwgaXRlbSBjb21wbGV0byBhIGxhIGxpc3RhXG4gICAgICAgICAgICBsaXN0YS5hcHBlbmRDaGlsZChpdGVtKTtcbiAgICAgICAgICAgIFxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWwgcHJvY2VzYXIgcmVmZXJlbmNpYTpcIiwgZSk7XG4gICAgICAgICAgICAvLyBDb250aW51YXIgY29uIGxhIHNpZ3VpZW50ZSByZWZlcmVuY2lhXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBBXHUwMEYxYWRpciBsYSBsaXN0YSBhbCBjb250ZW5lZG9yXG4gICAgdHJ5IHtcbiAgICAgICAgY29udGVuZWRvci5hcHBlbmRDaGlsZChsaXN0YSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWwgYVx1MDBGMWFkaXIgbGlzdGEgYWwgY29udGVuZWRvcjpcIiwgZSk7XG4gICAgICAgIGNvbnN0IGVycm9yTXNnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgIGVycm9yTXNnLmNsYXNzTmFtZSA9IFwiYmFja2xpbmtzLXRyZWUtZXJyb3JcIjtcbiAgICAgICAgZXJyb3JNc2cudGV4dENvbnRlbnQgPSBcIkVycm9yIGFsIGdlbmVyYXIgZXN0cnVjdHVyYSBkZSBcdTAwRTFyYm9sXCI7XG4gICAgICAgIGNvbnRlbmVkb3IuYXBwZW5kQ2hpbGQoZXJyb3JNc2cpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gY29udGVuZWRvcjtcbn1cblxuLyoqXG4gKiBPcmRlbmEgdW4gYXJyYXkgZGUgcmVmZXJlbmNpYXMgc2VnXHUwMEZBbiB0cmVzIGNyaXRlcmlvcyBqZXJcdTAwRTFycXVpY29zOlxuICogMS4gUG9yIHRpcG8gZGUgbm90YSAodHlwZU5hbWUpXG4gKiAyLiBQb3IgZXN0YWRvIChzaW4gZXN0YWRvIFx1MjE5MiBcdUQ4M0RcdURGRTIgXHUyMTkyIFx1RDgzRFx1REZFMSBcdTIxOTIgXHVEODNEXHVERDM0IFx1MjE5MiBcdUQ4M0RcdUREMzUpXG4gKiAzLiBQb3IgZmVjaGEgZGUgY3JlYWNpXHUwMEYzbiAobVx1MDBFMXMgcmVjaWVudGUgcHJpbWVybylcbiAqIFxuICogQHBhcmFtIHtBcnJheX0gcmVmZXJlbmNpYXMgLSBBcnJheSBkZSByZWZlcmVuY2lhcyBhIG9yZGVuYXJcbiAqIEByZXR1cm5zIHtBcnJheX0gLSBBcnJheSBvcmRlbmFkbyBkZSByZWZlcmVuY2lhc1xuICovXG5vcmRlbmFyUmVmZXJlbmNpYXMocmVmZXJlbmNpYXMpIHtcbiAgICAvLyBGdW5jaVx1MDBGM24gcGFyYSBvYnRlbmVyIGVsIHBlc28gZGVsIGVzdGFkbyBwYXJhIG9yZGVuYW1pZW50b1xuICAgIGNvbnN0IHBlc29Fc3RhZG8gPSAoZXN0YWRvKSA9PiB7XG4gICAgICAgIGlmICghZXN0YWRvKSByZXR1cm4gMDsgLy8gU2luIGVzdGFkbyAocHJpbWVybylcbiAgICAgICAgc3dpdGNoIChlc3RhZG8pIHtcbiAgICAgICAgICAgIGNhc2UgJ1x1RDgzRFx1REZFMic6IHJldHVybiAxO1xuICAgICAgICAgICAgY2FzZSAnXHVEODNEXHVERkUxJzogcmV0dXJuIDI7XG4gICAgICAgICAgICBjYXNlICdcdUQ4M0RcdUREMzQnOiByZXR1cm4gMztcbiAgICAgICAgICAgIGNhc2UgJ1x1RDgzRFx1REQzNSc6IHJldHVybiA0O1xuICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIDU7IC8vIEN1YWxxdWllciBvdHJvIGVzdGFkb1xuICAgICAgICB9XG4gICAgfTtcbiAgICBcbiAgICAvLyBPcmRlbmFyIHJlZmVyZW5jaWFzIHBvciBsb3MgdHJlcyBjcml0ZXJpb3NcbiAgICByZXR1cm4gWy4uLnJlZmVyZW5jaWFzXS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIC8vIDEuIE9yZGVuYXIgcG9yIHR5cGVOYW1lICh0aXBvIGRlIG5vdGEpXG4gICAgICAgIGNvbnN0IHRpcG9BID0gYS50eXBlTmFtZSB8fCAnJztcbiAgICAgICAgY29uc3QgdGlwb0IgPSBiLnR5cGVOYW1lIHx8ICcnO1xuICAgICAgICBpZiAodGlwb0EgIT09IHRpcG9CKSB7XG4gICAgICAgICAgICByZXR1cm4gdGlwb0EubG9jYWxlQ29tcGFyZSh0aXBvQik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIDIuIE9yZGVuYXIgcG9yIGVzdGFkb1xuICAgICAgICBjb25zdCBlc3RhZG9BID0gcGVzb0VzdGFkbyhhLmVzdGFkbyk7XG4gICAgICAgIGNvbnN0IGVzdGFkb0IgPSBwZXNvRXN0YWRvKGIuZXN0YWRvKTtcbiAgICAgICAgaWYgKGVzdGFkb0EgIT09IGVzdGFkb0IpIHtcbiAgICAgICAgICAgIHJldHVybiBlc3RhZG9BIC0gZXN0YWRvQjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gMy4gT3JkZW5hciBwb3IgZmVjaGEgZGUgY3JlYWNpXHUwMEYzbiAobVx1MDBFMXMgcmVjaWVudGUgcHJpbWVybylcbiAgICAgICAgLy8gSW50ZW50YXIgb2J0ZW5lciBmZWNoYSBkZSBjcmVhY2lcdTAwRjNuIGRlbCBmaWxlLmN0aW1lICh0aW1lc3RhbXAgZGUgY3JlYWNpXHUwMEYzbilcbiAgICAgICAgbGV0IGZlY2hhQSA9IGEuZmlsZSAmJiBhLmZpbGUuY3RpbWUgPyBhLmZpbGUuY3RpbWUgOiAwO1xuICAgICAgICBsZXQgZmVjaGFCID0gYi5maWxlICYmIGIuZmlsZS5jdGltZSA/IGIuZmlsZS5jdGltZSA6IDA7XG4gICAgICAgIFxuICAgICAgICAvLyBTaSBubyBoYXkgY3RpbWUsIGludGVudGEgb2J0ZW5lciBsYSBmZWNoYSBkZWwgZnJvbnRtYXR0ZXJcbiAgICAgICAgaWYgKCFmZWNoYUEgJiYgYS5mZWNoYSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmZWNoYUEgPSBuZXcgRGF0ZShhLmZlY2hhKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgZmVjaGFBID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKCFmZWNoYUIgJiYgYi5mZWNoYSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmZWNoYUIgPSBuZXcgRGF0ZShiLmZlY2hhKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgZmVjaGFCID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gT3JkZW5hciBkZXNjZW5kZW50ZSAobVx1MDBFMXMgcmVjaWVudGUgcHJpbWVybylcbiAgICAgICAgcmV0dXJuIGZlY2hhQiAtIGZlY2hhQTtcbiAgICB9KTtcbn1cblxuXG4vKipcbiAqIE11ZXN0cmEgZW5sYWNlcyBzaW5jcm9uaXphZG9zIGVuIE5vdGlvbiBkZXNkZSBlbCBmcm9udG1hdHRlciBcbiAqIHF1ZSBjb21pZW56YW4gY29uIGVsIHByZWZpam8gXCJsaW5rLVwiXG4gKiBAcGFyYW0gZHYgRWwgb2JqZXRvIGRhdGF2aWV3IHBhcmEgYWNjZWRlciBhIHN1cyBmdW5jaW9uZXNcbiAqIEBwYXJhbSBwYWdpbmEgTGEgcFx1MDBFMWdpbmEgYWN0dWFsIChub3JtYWxtZW50ZSBkdi5jdXJyZW50KCkpXG4gKiBAcmV0dXJucyBFbCBjb250ZW5lZG9yIGNvbiBsb3MgcmVzdWx0YWRvc1xuICovXG5tb3N0cmFyRW5sYWNlc1NpbmNyb25pemFkb3MoZHYsIHBhZ2luYSkge1xuICAgIC8vIENyZWFyIGNvbnRlbmVkb3IgcGFyYSBsb3MgcmVzdWx0YWRvc1xuICAgIGNvbnN0IGNvbnRlbmVkb3IgPSBkdi5lbChcImRpdlwiLCBcIlwiLCB7IGNsczogXCJub3Rpb24tbGlua3MtY29udGFpbmVyXCIgfSk7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgICAgLy8gT2J0ZW5lciBlbCBmcm9udG1hdHRlclxuICAgICAgICBjb25zdCBtZXRhID0gcGFnaW5hLmZpbGUuZnJvbnRtYXR0ZXI7XG4gICAgICAgIGlmICghbWV0YSkge1xuICAgICAgICAgICAgLy8gU2kgbm8gaGF5IGZyb250bWF0dGVyLCBubyBtb3N0cmFtb3MgbmFkYSBwYXJhIGFob3JyYXIgZXNwYWNpb1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbmVkb3I7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIE9idGVuZXIgZWwgdmFsb3IgZGUgdHlwZU5hbWUgc2kgZXhpc3RlXG4gICAgICAgIGNvbnN0IHR5cGVOYW1lID0gbWV0YS50eXBlTmFtZSB8fCBcIkVsZW1lbnRvXCI7XG4gICAgICAgIFxuICAgICAgICAvLyBGdW5jaVx1MDBGM24gcGFyYSB2ZXJpZmljYXIgc2kgdW5hIFVSTCBlcyB2XHUwMEUxbGlkYSAobVx1MDBFMXMgcXVlIHNvbG8gaHR0cHM6Ly8pXG4gICAgICAgIGNvbnN0IGlzVmFsaWRVcmwgPSAodXJsKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHVybCA9PT0gJ3N0cmluZycgJiYgXG4gICAgICAgICAgICAgICAgICAgdXJsLnN0YXJ0c1dpdGgoJ2h0dHAnKSAmJiBcbiAgICAgICAgICAgICAgICAgICB1cmwubGVuZ3RoID4gODsgLy8gTVx1MDBFMXMgbGFyZ28gcXVlIHNvbG8gXCJodHRwczovL1wiXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAvLyBSZWNvcGlsYW1vcyB0b2RvcyBsb3MgZW5sYWNlcyByZWxldmFudGVzXG4gICAgICAgIGNvbnN0IGVubGFjZXMgPSBbXTtcbiAgICAgICAgXG4gICAgICAgIC8vIDEuIEVubGFjZXMgcXVlIGNvbWllbnphbiBjb24gXCJsaW5rLVwiIChOb3Rpb24pXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1ldGEpXG4gICAgICAgICAgICAuZmlsdGVyKChba2V5LCB2YWx1ZV0pID0+IGtleS5zdGFydHNXaXRoKFwibGluay1cIikgJiYgaXNWYWxpZFVybCh2YWx1ZSkpXG4gICAgICAgICAgICAuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiBlbmxhY2VzLnB1c2goe1xuICAgICAgICAgICAgICAgIGxhYmVsOiBcIk5vdGlvblwiLFxuICAgICAgICAgICAgICAgIHVybDogdmFsdWVcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgXG4gICAgICAgIC8vIDIuIEVubGFjZXMgZXNwZWNcdTAwRURmaWNvcyBzZWdcdTAwRkFuIGVsIHRpcG8gZGUgZWxlbWVudG9cbiAgICAgICAgaWYgKHR5cGVOYW1lID09PSBcIkNhbXBhXHUwMEYxYVwiICYmIGlzVmFsaWRVcmwobWV0YS5pbmRpY2Fkb3JlcykpIHtcbiAgICAgICAgICAgIGVubGFjZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiSW5kaWNhZG9yZXMgZGUgY2FtcGFcdTAwRjFhXCIsXG4gICAgICAgICAgICAgICAgdXJsOiBtZXRhLmluZGljYWRvcmVzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHR5cGVOYW1lID09PSBcIkVudHJlZ2FibGVcIikge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWRVcmwobWV0YS5waWV6YU51YmUpKSB7XG4gICAgICAgICAgICAgICAgZW5sYWNlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiUGllemEgZW4gbGEgbnViZVwiLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IG1ldGEucGllemFOdWJlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkVXJsKG1ldGEudXJsQ2FudmEpKSB7XG4gICAgICAgICAgICAgICAgZW5sYWNlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiRGlzZVx1MDBGMW8gZW4gQ2FudmFcIixcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBtZXRhLnVybENhbnZhXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFNpIG5vIGhheSBlbmxhY2VzLCBubyBtb3N0cmFtb3MgbmFkYVxuICAgICAgICBpZiAoZW5sYWNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZW5lZG9yO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBNb3N0cmFyIGNhZGEgZW5sYWNlXG4gICAgICAgIGVubGFjZXMuZm9yRWFjaChlbmxhY2UgPT4ge1xuICAgICAgICAgICAgLy8gQ3JlYXIgdW4gcFx1MDBFMXJyYWZvIHBhcmEgY2FkYSBlbmxhY2VcbiAgICAgICAgICAgIGNvbnN0IHBhcnJhZm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgICAgIHBhcnJhZm8uY2xhc3NMaXN0LmFkZChcIm5vdGlvbi1saW5rLWl0ZW1cIik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENyZWFyIHRleHRvIGNvbiBsYSBldGlxdWV0YSBlc3BlY1x1MDBFRGZpY2FcbiAgICAgICAgICAgIHBhcnJhZm8udGV4dENvbnRlbnQgPSBgJHt0eXBlTmFtZX0gLSAke2VubGFjZS5sYWJlbH0gZW4gYDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ3JlYXIgZW5sYWNlXG4gICAgICAgICAgICBjb25zdCBsaW5rRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgICAgICAgICAgbGlua0VsZW1lbnQuaHJlZiA9IGVubGFjZS51cmw7XG4gICAgICAgICAgICBsaW5rRWxlbWVudC50ZXh0Q29udGVudCA9IGVubGFjZS51cmw7XG4gICAgICAgICAgICBsaW5rRWxlbWVudC50YXJnZXQgPSBcIl9ibGFua1wiOyAvLyBBYnJpciBlbiBudWV2YSBwZXN0YVx1MDBGMWFcbiAgICAgICAgICAgIGxpbmtFbGVtZW50LnJlbCA9IFwibm9vcGVuZXIgbm9yZWZlcnJlclwiOyAvLyBTZWd1cmlkYWQgcGFyYSBlbmxhY2VzIGV4dGVybm9zXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFcdTAwRjFhZGlyIGVsIGVubGFjZSBhbCBwXHUwMEUxcnJhZm9cbiAgICAgICAgICAgIHBhcnJhZm8uYXBwZW5kQ2hpbGQobGlua0VsZW1lbnQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBBXHUwMEYxYWRpciBlbCBwXHUwMEUxcnJhZm8gYWwgY29udGVuZWRvclxuICAgICAgICAgICAgY29udGVuZWRvci5hcHBlbmRDaGlsZChwYXJyYWZvKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhbCBwcm9jZXNhciBlbmxhY2VzIHNpbmNyb25pemFkb3M6XCIsIGVycm9yKTtcbiAgICAgICAgLy8gTm8gbW9zdHJhbW9zIG1lbnNhamUgZGUgZXJyb3IgcGFyYSBhaG9ycmFyIGVzcGFjaW9cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGNvbnRlbmVkb3I7XG59XG4vLyAtLS0tLS0tXG5cbi8qKlxuICogUHJvY2VzYSB5IHByZXBhcmEgbGFzIGVzdGFkXHUwMEVEc3RpY2FzIGRlIHRpZW1wbyBwYXJhIHVuIHByb3llY3RvXG4gKiBAcGFyYW0gcHJveWVjdG9QYXRoIFJ1dGEgY29tcGxldGEgZGVsIGFyY2hpdm8gZGVsIHByb3llY3RvXG4gKiBAcmV0dXJucyBPYmpldG8gY29uIHRvZGFzIGxhcyBlc3RhZFx1MDBFRHN0aWNhcyB5IHJlZ2lzdHJvcyBwcm9jZXNhZG9zXG4gKi9cbmFzeW5jIG9idGVuZXJFc3RhZGlzdGljYXNUaWVtcG8ocHJveWVjdG9QYXRoKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIE9idGVuZXIgY2FycGV0YSBkZSByZWdpc3Ryb3MgZGUgdGllbXBvIGRlc2RlIGxhIGNvbmZpZ3VyYWNpXHUwMEYzblxuICAgICAgY29uc3QgZm9sZGVyUlQgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfUmVnaXN0cm9UaWVtcG87XG4gICAgICBcbiAgICAgIC8vIEZ1bmNpXHUwMEYzbiBwYXJhIGZvcm1hdGVhciBkdXJhY2lcdTAwRjNuIGVuIG1pbGlzZWd1bmRvcyBhIGZvcm1hdG8gbGVnaWJsZVxuICAgICAgY29uc3QgZm9ybWF0RHVyYXRpb24gPSAobXMpID0+IHtcbiAgICAgICAgaWYgKG1zID09PSBudWxsIHx8IG1zID09PSB1bmRlZmluZWQgfHwgaXNOYU4obXMpKSB7XG4gICAgICAgICAgcmV0dXJuIFwiTm8gZGVmaW5pZG9cIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBDb252ZXJ0aXIgbWlsaXNlZ3VuZG9zIGEgbWludXRvcywgaG9yYXMgeSBkXHUwMEVEYXNcbiAgICAgICAgICBsZXQgbWludXRvcyA9IE1hdGguZmxvb3IobXMgLyAoMTAwMCAqIDYwKSk7XG4gICAgICAgICAgbGV0IGhvcmFzID0gTWF0aC5mbG9vcihtaW51dG9zIC8gNjApO1xuICAgICAgICAgIG1pbnV0b3MgPSBtaW51dG9zICUgNjA7XG4gICAgICAgICAgbGV0IGRpYXMgPSBNYXRoLmZsb29yKGhvcmFzIC8gMjQpO1xuICAgICAgICAgIGhvcmFzID0gaG9yYXMgJSAyNDtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBGb3JtYXRlYXIgZWwgc3RyaW5nIGRlIHNhbGlkYVxuICAgICAgICAgIGlmIChkaWFzID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGAke2RpYXN9IGQgJHtob3Jhc30gaCAke21pbnV0b3N9IG1pbmA7XG4gICAgICAgICAgfSBlbHNlIGlmIChob3JhcyA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBgJHtob3Jhc30gaCAke21pbnV0b3N9IG1pbmA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBgJHttaW51dG9zfSBtaW5gO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgLy8gRnVuY2lcdTAwRjNuIHBhcmEgY2FsY3VsYXIgdGllbXBvIHRyYW5zY3VycmlkbyBkZXNkZSB1bmEgZmVjaGFcbiAgICAgIGNvbnN0IHRpZW1wb0Rlc2RlID0gKGZlY2hhU3RyaW5nKSA9PiB7XG4gICAgICAgIGlmICghZmVjaGFTdHJpbmcpIHJldHVybiBcIkRlc2Nvbm9jaWRvXCI7XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEV4dHJhZXIgZmVjaGEgeSBob3JhIGRlIGZvcm1hdG9zIGNvbXVuZXNcbiAgICAgICAgICBsZXQgZmVjaGE7XG4gICAgICAgICAgaWYgKGZlY2hhU3RyaW5nLmluY2x1ZGVzKCcgJykpIHtcbiAgICAgICAgICAgIC8vIEZvcm1hdG8gXCJZWVlZLU1NLUREIGRcdTAwRURhIEhIOm1tXCJcbiAgICAgICAgICAgIGNvbnN0IHBhcnRlcyA9IGZlY2hhU3RyaW5nLnNwbGl0KCcgJyk7XG4gICAgICAgICAgICBjb25zdCBmZWNoYVNvbG8gPSBwYXJ0ZXNbMF07IC8vIFlZWVktTU0tRERcbiAgICAgICAgICAgIGNvbnN0IGhvcmFTb2xvID0gcGFydGVzW3BhcnRlcy5sZW5ndGggLSAxXTsgLy8gSEg6bW1cbiAgICAgICAgICAgIGZlY2hhID0gbmV3IERhdGUoYCR7ZmVjaGFTb2xvfVQke2hvcmFTb2xvfWApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmZWNoYSA9IG5ldyBEYXRlKGZlY2hhU3RyaW5nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKGlzTmFOKGZlY2hhLmdldFRpbWUoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBcIkZlY2hhIGludlx1MDBFMWxpZGFcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgY29uc3QgYWhvcmEgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgIGNvbnN0IGRpZmVyZW5jaWEgPSBhaG9yYS5nZXRUaW1lKCkgLSBmZWNoYS5nZXRUaW1lKCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQ29udmVydGlyIGEgZFx1MDBFRGFzL2hvcmFzL21pbnV0b3NcbiAgICAgICAgICBjb25zdCBkaWFzID0gTWF0aC5mbG9vcihkaWZlcmVuY2lhIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpKTtcbiAgICAgICAgICBjb25zdCBob3JhcyA9IE1hdGguZmxvb3IoKGRpZmVyZW5jaWEgJSAoMTAwMCAqIDYwICogNjAgKiAyNCkpIC8gKDEwMDAgKiA2MCAqIDYwKSk7XG4gICAgICAgICAgY29uc3QgbWludXRvcyA9IE1hdGguZmxvb3IoKGRpZmVyZW5jaWEgJSAoMTAwMCAqIDYwICogNjApKSAvICgxMDAwICogNjApKTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoZGlhcyA+IDMwKSB7XG4gICAgICAgICAgICByZXR1cm4gYGhhY2UgJHtNYXRoLmZsb29yKGRpYXMgLyAzMCl9IG1lc2VzYDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGRpYXMgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gYGhhY2UgJHtkaWFzfSBkXHUwMEVEYXNgO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaG9yYXMgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gYGhhY2UgJHtob3Jhc30gaG9yYXNgO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYGhhY2UgJHttaW51dG9zfSBtaW51dG9zYDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWwgcHJvY2VzYXIgZmVjaGE6XCIsIGUpO1xuICAgICAgICAgIHJldHVybiBcIkVycm9yIGVuIGZlY2hhXCI7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBcbiAgICAgIC8vIE9idGVuZXIgZWwgcHJveWVjdG8geSBzdSBhbGlhcy90XHUwMEVEdHVsb1xuICAgICAgY29uc3QgcHJveWVjdG9GaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChwcm95ZWN0b1BhdGgpO1xuICAgICAgaWYgKCFwcm95ZWN0b0ZpbGUpIHtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiUHJveWVjdG8gbm8gZW5jb250cmFkb1wiIH07XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IG1ldGFkYXRhUHJveWVjdG8gPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUocHJveWVjdG9GaWxlKT8uZnJvbnRtYXR0ZXI7XG4gICAgICBjb25zdCBwcm95ZWN0b0FsaWFzID0gbWV0YWRhdGFQcm95ZWN0bz8uYWxpYXNlcz8uWzBdIHx8IG1ldGFkYXRhUHJveWVjdG8/LnRpdHVsbyB8fCBwcm95ZWN0b0ZpbGUuYmFzZW5hbWU7XG4gICAgICBcbiAgICAgIC8vIEZlY2hhIGFjdHVhbCB5IGxcdTAwRURtaXRlcyBwYXJhIGxvcyBwZXJcdTAwRURvZG9zXG4gICAgICBjb25zdCBhaG9yYSA9IG5ldyBEYXRlKCk7XG4gICAgICBjb25zdCBsaW1pdGU3RGlhcyA9IG5ldyBEYXRlKGFob3JhKTtcbiAgICAgIGxpbWl0ZTdEaWFzLnNldERhdGUoYWhvcmEuZ2V0RGF0ZSgpIC0gNyk7XG4gICAgICBjb25zdCBsaW1pdGUzMERpYXMgPSBuZXcgRGF0ZShhaG9yYSk7XG4gICAgICBsaW1pdGUzMERpYXMuc2V0RGF0ZShhaG9yYS5nZXREYXRlKCkgLSAzMCk7XG4gICAgICBcbiAgICAgIC8vIEJ1c2NhciB0b2RvcyBsb3MgcmVnaXN0cm9zIGRlIHRpZW1wbyByZWxhY2lvbmFkb3MgY29uIGVzdGUgcHJveWVjdG9cbiAgICAgIC8vIEVzdG8gZXMgbG8gbVx1MDBFMXMgcGVzYWRvIHkgbG8gaGFjZW1vcyB1bmEgc29sYSB2ZXogZW4gZWwgcGx1Z2luXG4gICAgICBsZXQgcmVnaXN0cm9zID0gW107XG4gICAgICBjb25zdCBhbGxGaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKClcbiAgICAgICAgLmZpbHRlcihmaWxlID0+IGZpbGUucGF0aC5zdGFydHNXaXRoKGZvbGRlclJUICsgXCIvXCIpKTtcbiAgICAgIFxuICAgICAgLy8gUHJvY2VzYXIgY2FkYSBhcmNoaXZvIGRlIHJlZ2lzdHJvIGRlIHRpZW1wb1xuICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGFsbEZpbGVzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk/LmZyb250bWF0dGVyO1xuICAgICAgICAgIGlmICghbWV0YWRhdGEpIGNvbnRpbnVlO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIFZlcmlmaWNhciBzaSBlc3RlIHJlZ2lzdHJvIGVzdFx1MDBFMSByZWxhY2lvbmFkbyBjb24gZWwgcHJveWVjdG8gYWN0dWFsXG4gICAgICAgICAgbGV0IGVzdGFSZWxhY2lvbmFkbyA9IGZhbHNlO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIENvbXByb2JhciBwcm95ZWN0b0dURFxuICAgICAgICAgIGlmIChtZXRhZGF0YS5wcm95ZWN0b0dURCkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWV0YWRhdGEucHJveWVjdG9HVEQpKSB7XG4gICAgICAgICAgICAgIC8vIFBhcmEgY2FkYSBlbGVtZW50byBkZWwgYXJyYXkgcHJveWVjdG9HVERcbiAgICAgICAgICAgICAgZm9yIChjb25zdCBwcm95ZWN0byBvZiBtZXRhZGF0YS5wcm95ZWN0b0dURCkge1xuICAgICAgICAgICAgICAgIC8vIEVsaW1pbmFyIGNvcmNoZXRlcyBkZSB3aWtsaW5rc1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3llY3RvTGltcGlvID0gcHJveWVjdG8ucmVwbGFjZSgvXFxbXFxbfFxcXVxcXS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQ29tcHJvYmFyIHNpIGNvbnRpZW5lIGxhIHJ1dGEgbyBlbCBub21icmUgZGVsIHByb3llY3RvXG4gICAgICAgICAgICAgICAgaWYgKHByb3llY3RvTGltcGlvLmluY2x1ZGVzKHByb3llY3RvUGF0aCkgfHwgXG4gICAgICAgICAgICAgICAgICAgIHByb3llY3RvTGltcGlvLmluY2x1ZGVzKHByb3llY3RvRmlsZS5iYXNlbmFtZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgKHByb3llY3RvQWxpYXMgJiYgcHJveWVjdG9MaW1waW8uaW5jbHVkZXMocHJveWVjdG9BbGlhcykpKSB7XG4gICAgICAgICAgICAgICAgICBlc3RhUmVsYWNpb25hZG8gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBtZXRhZGF0YS5wcm95ZWN0b0dURCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgLy8gU2kgZXMgdW4gc3RyaW5nLCBoYWNlciBsYSBtaXNtYSBjb21wcm9iYWNpXHUwMEYzblxuICAgICAgICAgICAgICBjb25zdCBwcm95ZWN0b0xpbXBpbyA9IG1ldGFkYXRhLnByb3llY3RvR1RELnJlcGxhY2UoL1xcW1xcW3xcXF1cXF0vZywgJycpO1xuICAgICAgICAgICAgICBpZiAocHJveWVjdG9MaW1waW8uaW5jbHVkZXMocHJveWVjdG9QYXRoKSB8fCBcbiAgICAgICAgICAgICAgICAgIHByb3llY3RvTGltcGlvLmluY2x1ZGVzKHByb3llY3RvRmlsZS5iYXNlbmFtZSkgfHxcbiAgICAgICAgICAgICAgICAgIChwcm95ZWN0b0FsaWFzICYmIHByb3llY3RvTGltcGlvLmluY2x1ZGVzKHByb3llY3RvQWxpYXMpKSkge1xuICAgICAgICAgICAgICAgIGVzdGFSZWxhY2lvbmFkbyA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gU2kgZXN0XHUwMEUxIHJlbGFjaW9uYWRvLCBhXHUwMEYxYWRpcmxvIGEgbG9zIHJlZ2lzdHJvc1xuICAgICAgICAgIGlmIChlc3RhUmVsYWNpb25hZG8pIHtcbiAgICAgICAgICAgIC8vIE9idGVuZXIgaW5mb3JtYWNpXHUwMEYzbiBkZSBhc3VudG8gc2kgZXhpc3RlXG4gICAgICAgICAgICBsZXQgYXN1bnRvQWxpYXMgPSBudWxsO1xuICAgICAgICAgICAgaWYgKG1ldGFkYXRhLmFzdW50byAmJiBtZXRhZGF0YS5hc3VudG8ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIEludGVudGFyIGV4dHJhZXIgZWwgYXN1bnRvIChmb3JtYXRvIHdpa2kpXG4gICAgICAgICAgICAgICAgY29uc3QgYXN1bnRvU3RyID0gbWV0YWRhdGEuYXN1bnRvWzBdO1xuICAgICAgICAgICAgICAgIC8vIEV4dHJhZXIgbGEgcnV0YSBkZWwgYXN1bnRvIGRlIGZvcm1hdG8gW1tydXRhfGFsaWFzXV1cbiAgICAgICAgICAgICAgICBjb25zdCBhc3VudG9NYXRjaCA9IGFzdW50b1N0ci5tYXRjaCgvXFxbXFxbKC4qPykoPzpcXHwoLio/KSk/XFxdXFxdLyk7XG4gICAgICAgICAgICAgICAgaWYgKGFzdW50b01hdGNoKSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBhc3VudG9QYXRoID0gYXN1bnRvTWF0Y2hbMV07XG4gICAgICAgICAgICAgICAgICBjb25zdCBhc3VudG9GaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChhc3VudG9QYXRoICsgXCIubWRcIik7XG4gICAgICAgICAgICAgICAgICBpZiAoYXN1bnRvRmlsZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhc3VudG9NZXRhZGF0YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShhc3VudG9GaWxlKT8uZnJvbnRtYXR0ZXI7XG4gICAgICAgICAgICAgICAgICAgIGFzdW50b0FsaWFzID0gYXN1bnRvTWV0YWRhdGE/LmFsaWFzZXM/LlswXSB8fCBhc3VudG9NZXRhZGF0YT8udGl0dWxvIHx8IGFzdW50b0ZpbGUuYmFzZW5hbWU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHByb2Nlc2FuZG8gYXN1bnRvOlwiLCBlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDcmVhciBvYmpldG8gZGUgcmVnaXN0cm8gY29uIHRvZGEgbGEgaW5mb3JtYWNpXHUwMEYzbiBuZWNlc2FyaWFcbiAgICAgICAgICAgIGNvbnN0IHJlZ2lzdHJvID0ge1xuICAgICAgICAgICAgICBwYXRoOiBmaWxlLnBhdGgsXG4gICAgICAgICAgICAgIGJhc2VuYW1lOiBmaWxlLmJhc2VuYW1lLFxuICAgICAgICAgICAgICBkZXNjcmlwY2lvbjogbWV0YWRhdGEuZGVzY3JpcGNpb24gfHwgXCJTaW4gZGVzY3JpcGNpXHUwMEYzblwiLFxuICAgICAgICAgICAgICB0aWVtcG9UcmFiYWphZG86IG1ldGFkYXRhLnRpZW1wb1RyYWJhamFkbyB8fCAwLFxuICAgICAgICAgICAgICBlc3RhZG86IG1ldGFkYXRhLmVzdGFkbyB8fCBcIlx1RDgzRFx1REQwNFwiLFxuICAgICAgICAgICAgICBob3JhSW5pY2lvOiBtZXRhZGF0YS5ob3JhSW5pY2lvIHx8IG1ldGFkYXRhLmZlY2hhIHx8IFwiRGVzY29ub2NpZG9cIixcbiAgICAgICAgICAgICAgaG9yYUZpbmFsOiBtZXRhZGF0YS5ob3JhRmluYWwgfHwgXCJcIixcbiAgICAgICAgICAgICAgYXN1bnRvQWxpYXM6IGFzdW50b0FsaWFzLFxuICAgICAgICAgICAgICBhbGlhc2VzOiBtZXRhZGF0YS5hbGlhc2VzIHx8IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVnaXN0cm9zLnB1c2gocmVnaXN0cm8pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBwcm9jZXNhbmRvIGFyY2hpdm8gJHtmaWxlLnBhdGh9OmAsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBPcmRlbmFyIHJlZ2lzdHJvcyBwb3IgaG9yYUZpbmFsIGRlc2NlbmRlbnRlXG4gICAgICByZWdpc3Ryb3Muc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAvLyBQcmltZXJvIGludGVudGFtb3Mgb3JkZW5hciBwb3IgaG9yYUZpbmFsXG4gICAgICAgIGlmIChhLmhvcmFGaW5hbCAmJiBiLmhvcmFGaW5hbCkge1xuICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShiLmhvcmFGaW5hbCkuZ2V0VGltZSgpIC0gbmV3IERhdGUoYS5ob3JhRmluYWwpLmdldFRpbWUoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTaSBubyBoYXkgaG9yYUZpbmFsLCBvcmRlbmFtb3MgcG9yIGhvcmFJbmljaW9cbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGIuaG9yYUluaWNpbykuZ2V0VGltZSgpIC0gbmV3IERhdGUoYS5ob3JhSW5pY2lvKS5nZXRUaW1lKCk7XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gQ2FsY3VsYXIgZXN0YWRcdTAwRURzdGljYXNcbiAgICAgIGxldCB0b3RhbFRpZW1wb1RyYWJhamFkbyA9IDA7XG4gICAgICBsZXQgdWx0aW1hQWN0aXZpZGFkID0gcmVnaXN0cm9zLmxlbmd0aCA+IDAgPyAocmVnaXN0cm9zWzBdLmhvcmFGaW5hbCB8fCByZWdpc3Ryb3NbMF0uaG9yYUluaWNpbykgOiBudWxsO1xuICAgICAgbGV0IHRpZW1wb1VsdGltb3M3RGlhcyA9IDA7XG4gICAgICBsZXQgdGllbXBvVWx0aW1vczMwRGlhcyA9IDA7XG4gICAgICBcbiAgICAgIC8vIFByb2Nlc2FyIGNhZGEgcmVnaXN0cm8gcGFyYSBjYWxjdWxhciBlc3RhZFx1MDBFRHN0aWNhc1xuICAgICAgZm9yIChsZXQgcmVnaXN0cm8gb2YgcmVnaXN0cm9zKSB7XG4gICAgICAgIC8vIFN1bWFyIHRpZW1wbyB0b3RhbFxuICAgICAgICB0b3RhbFRpZW1wb1RyYWJhamFkbyArPSByZWdpc3Ryby50aWVtcG9UcmFiYWphZG87XG4gICAgICAgIFxuICAgICAgICAvLyBWZXJpZmljYXIgc2kgZXN0XHUwMEUxIGVuIGxvcyBcdTAwRkFsdGltb3MgcGVyXHUwMEVEb2Rvc1xuICAgICAgICBsZXQgZmVjaGFSZWdpc3RybztcbiAgICAgICAgaWYgKHJlZ2lzdHJvLmhvcmFGaW5hbCkge1xuICAgICAgICAgIC8vIEV4dHJhZXIgZmVjaGEgZGUgZm9ybWF0byBcIllZWVktTU0tREQgZFx1MDBFRGEgSEg6bW1cIlxuICAgICAgICAgIGNvbnN0IHBhcnRlcyA9IHJlZ2lzdHJvLmhvcmFGaW5hbC5zcGxpdCgnICcpO1xuICAgICAgICAgIGNvbnN0IGZlY2hhU29sbyA9IHBhcnRlc1swXTsgLy8gWVlZWS1NTS1ERFxuICAgICAgICAgIGZlY2hhUmVnaXN0cm8gPSBuZXcgRGF0ZShmZWNoYVNvbG8pO1xuICAgICAgICB9IGVsc2UgaWYgKHJlZ2lzdHJvLmhvcmFJbmljaW8pIHtcbiAgICAgICAgICAvLyBFeHRyYWVyIGZlY2hhIGRlIG90cm9zIGZvcm1hdG9zIHBvc2libGVzXG4gICAgICAgICAgY29uc3QgcGFydGVzRmVjaGEgPSByZWdpc3Ryby5ob3JhSW5pY2lvLnNwbGl0KCcgJyk7XG4gICAgICAgICAgZmVjaGFSZWdpc3RybyA9IG5ldyBEYXRlKHBhcnRlc0ZlY2hhWzBdKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKGZlY2hhUmVnaXN0cm8pIHtcbiAgICAgICAgICBpZiAoZmVjaGFSZWdpc3RybyA+PSBsaW1pdGU3RGlhcykge1xuICAgICAgICAgICAgdGllbXBvVWx0aW1vczdEaWFzICs9IHJlZ2lzdHJvLnRpZW1wb1RyYWJhamFkbztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGZlY2hhUmVnaXN0cm8gPj0gbGltaXRlMzBEaWFzKSB7XG4gICAgICAgICAgICB0aWVtcG9VbHRpbW9zMzBEaWFzICs9IHJlZ2lzdHJvLnRpZW1wb1RyYWJhamFkbztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEFcdTAwRjFhZGlyIHByb3BpZWRhZCBmb3JtYXRlYWRhIHBhcmEgbW9zdHJhciBlbiBsYSB0YWJsYVxuICAgICAgICByZWdpc3Ryby50aWVtcG9Gb3JtYXRlYWRvID0gZm9ybWF0RHVyYXRpb24ocmVnaXN0cm8udGllbXBvVHJhYmFqYWRvKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gQ3JlYXIgeSByZXRvcm5hciBvYmpldG8gY29uIHRvZGEgbGEgaW5mb3JtYWNpXHUwMEYzbiBwcm9jZXNhZGFcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByb3llY3RvOiB7XG4gICAgICAgICAgcGF0aDogcHJveWVjdG9QYXRoLFxuICAgICAgICAgIG5vbWJyZTogcHJveWVjdG9GaWxlLmJhc2VuYW1lLFxuICAgICAgICAgIGFsaWFzOiBwcm95ZWN0b0FsaWFzXG4gICAgICAgIH0sXG4gICAgICAgIGVzdGFkaXN0aWNhczoge1xuICAgICAgICAgIHRvdGFsVGllbXBvVHJhYmFqYWRvOiB7XG4gICAgICAgICAgICB2YWxvcjogdG90YWxUaWVtcG9UcmFiYWphZG8sXG4gICAgICAgICAgICBmb3JtYXRlYWRvOiBmb3JtYXREdXJhdGlvbih0b3RhbFRpZW1wb1RyYWJhamFkbylcbiAgICAgICAgICB9LFxuICAgICAgICAgIG51bVNlc2lvbmVzOiByZWdpc3Ryb3MubGVuZ3RoLFxuICAgICAgICAgIHVsdGltYUFjdGl2aWRhZDoge1xuICAgICAgICAgICAgZmVjaGE6IHVsdGltYUFjdGl2aWRhZCxcbiAgICAgICAgICAgIHRpZW1wb0Rlc2RlOiB1bHRpbWFBY3RpdmlkYWQgPyB0aWVtcG9EZXNkZSh1bHRpbWFBY3RpdmlkYWQpIDogXCJTaW4gYWN0aXZpZGFkXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHVsdGltb3M3RGlhczoge1xuICAgICAgICAgICAgdmFsb3I6IHRpZW1wb1VsdGltb3M3RGlhcyxcbiAgICAgICAgICAgIGZvcm1hdGVhZG86IGZvcm1hdER1cmF0aW9uKHRpZW1wb1VsdGltb3M3RGlhcylcbiAgICAgICAgICB9LFxuICAgICAgICAgIHVsdGltb3MzMERpYXM6IHtcbiAgICAgICAgICAgIHZhbG9yOiB0aWVtcG9VbHRpbW9zMzBEaWFzLFxuICAgICAgICAgICAgZm9ybWF0ZWFkbzogZm9ybWF0RHVyYXRpb24odGllbXBvVWx0aW1vczMwRGlhcylcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlZ2lzdHJvczogcmVnaXN0cm9zXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZW4gb2J0ZW5lckVzdGFkaXN0aWNhc1RpZW1wbzpcIiwgZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiRXJyb3IgcHJvY2VzYW5kbyBlc3RhZFx1MDBFRHN0aWNhcyBkZSB0aWVtcG86IFwiICsgZXJyb3IubWVzc2FnZSB9O1xuICAgIH1cbiAgfVxuICBcbiAgLyoqXG4gICAqIEdlbmVyYSBlbCBIVE1MIHBhcmEgbW9zdHJhciBsYXMgZXN0YWRcdTAwRURzdGljYXMgZGUgdGllbXBvXG4gICAqIEBwYXJhbSBkdiBPYmpldG8gZGF0YXZpZXcgcGFyYSBjcmVhciBlbGVtZW50b3NcbiAgICogQHBhcmFtIGRhdG9zIE9iamV0byBjb24gbG9zIGRhdG9zIG9idGVuaWRvcyBkZSBvYnRlbmVyRXN0YWRpc3RpY2FzVGllbXBvXG4gICAqIEByZXR1cm5zIEVsZW1lbnRvIEhUTUwgY29uIGxhcyBlc3RhZFx1MDBFRHN0aWNhcyB2aXN1YWxpemFkYXNcbiAgICovXG5cbiAgbW9zdHJhckVzdGFkaXN0aWNhc1RpZW1wbyhkdiwgZGF0b3MpIHtcbiAgICB0cnkge1xuICAgICAgLy8gU2kgaGF5IGVycm9yLCBtb3N0cmFyIG1lbnNhamVcbiAgICAgIGlmIChkYXRvcy5lcnJvcikge1xuICAgICAgICBjb25zdCBlcnJvckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGVycm9yRGl2LmNsYXNzTmFtZSA9IFwidGllbXBvLXN0YXRzLWVycm9yXCI7XG4gICAgICAgIGVycm9yRGl2LnRleHRDb250ZW50ID0gZGF0b3MuZXJyb3I7XG4gICAgICAgIHJldHVybiBlcnJvckRpdjtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gT2J0ZW5lciBlc3RhZFx1MDBFRHN0aWNhcyB5IHJlZ2lzdHJvc1xuICAgICAgY29uc3QgeyBlc3RhZGlzdGljYXMsIHJlZ2lzdHJvcywgcHJveWVjdG8gfSA9IGRhdG9zO1xuICAgICAgXG4gICAgICAvLyBDcmVhciBjb250ZW5lZG9yIHByaW5jaXBhbFxuICAgICAgY29uc3QgY29udGVuZWRvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBjb250ZW5lZG9yLmNsYXNzTmFtZSA9IFwidGllbXBvLXN0YXRzLWNvbnRhaW5lclwiO1xuICAgICAgY29udGVuZWRvci5zdHlsZS5wYWRkaW5nID0gXCIxNnB4IDBcIjsgLy8gTWFudGVuZXIgcGFkZGluZyB2ZXJ0aWNhbCwgZWxpbWluYXIgaG9yaXpvbnRhbFxuICAgICAgY29udGVuZWRvci5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuICAgICAgY29udGVuZWRvci5zdHlsZS5ib3hTaXppbmcgPSBcImJvcmRlci1ib3hcIjtcbiAgICAgIFxuICAgICAgLy8gU2kgbm8gaGF5IHJlZ2lzdHJvcywgbW9zdHJhciBtZW5zYWplIHkgc2FsaXJcbiAgICAgIGlmICghcmVnaXN0cm9zIHx8IHJlZ2lzdHJvcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc3QgbWVuc2FqZVZhY2lvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgIG1lbnNhamVWYWNpby5jbGFzc05hbWUgPSBcInRpZW1wby1zdGF0cy1lbXB0eS1tZXNzYWdlXCI7XG4gICAgICAgIG1lbnNhamVWYWNpby50ZXh0Q29udGVudCA9IFwiTm8gc2UgZW5jb250cmFyb24gcmVnaXN0cm9zIGRlIHRpZW1wbyBwYXJhIGVzdGUgcHJveWVjdG8uXCI7XG4gICAgICAgIGNvbnRlbmVkb3IuYXBwZW5kQ2hpbGQobWVuc2FqZVZhY2lvKTtcbiAgICAgICAgcmV0dXJuIGNvbnRlbmVkb3I7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vID09PSBTRUNDSVx1MDBEM04gMTogRVNUQURcdTAwQ0RTVElDQVMgUFJJTkNJUEFMRVMgPT09XG4gICAgICBjb25zdCBzdGF0c0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBzdGF0c0NvbnRhaW5lci5jbGFzc05hbWUgPSBcInRpZW1wby1zdGF0cy1zdW1tYXJ5XCI7XG4gICAgICBcbiAgICAgIC8vIENyZWFyIHRhcmpldGFzIGRlIGVzdGFkXHUwMEVEc3RpY2FzXG4gICAgICBjb25zdCBpbmZvRXN0YWRpc3RpY2FzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgdGl0dWxvOiBcIlRpZW1wbyBUb3RhbFwiLFxuICAgICAgICAgIHZhbG9yOiBlc3RhZGlzdGljYXMudG90YWxUaWVtcG9UcmFiYWphZG8uZm9ybWF0ZWFkbyxcbiAgICAgICAgICBpY29ubzogXCJcdTIzRjFcdUZFMEZcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGl0dWxvOiBcIlNlc2lvbmVzXCIsXG4gICAgICAgICAgdmFsb3I6IGVzdGFkaXN0aWNhcy5udW1TZXNpb25lcyxcbiAgICAgICAgICBpY29ubzogXCJcdUQ4M0RcdUREMDRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGl0dWxvOiBcIlx1MDBEQWx0aW1hIEFjdGl2aWRhZFwiLFxuICAgICAgICAgIHZhbG9yOiBlc3RhZGlzdGljYXMudWx0aW1hQWN0aXZpZGFkLnRpZW1wb0Rlc2RlLFxuICAgICAgICAgIGljb25vOiBcIlx1RDgzRFx1REQ1MlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0aXR1bG86IFwiXHUwMERBbHRpbW9zIDcgZFx1MDBFRGFzXCIsXG4gICAgICAgICAgdmFsb3I6IGVzdGFkaXN0aWNhcy51bHRpbW9zN0RpYXM/LmZvcm1hdGVhZG8gfHwgXCJOL0FcIixcbiAgICAgICAgICBpY29ubzogXCJcdUQ4M0RcdURDQzVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGl0dWxvOiBcIlx1MDBEQWx0aW1vcyAzMCBkXHUwMEVEYXNcIixcbiAgICAgICAgICB2YWxvcjogZXN0YWRpc3RpY2FzLnVsdGltb3MzMERpYXM/LmZvcm1hdGVhZG8gfHwgXCJOL0FcIixcbiAgICAgICAgICBpY29ubzogXCJcdUQ4M0RcdURDQzZcIlxuICAgICAgICB9XG4gICAgICBdO1xuICAgICAgXG4gICAgICAvLyBDcmVhciBncmlkIHBhcmEgbGFzIHRhcmpldGFzXG4gICAgICBjb25zdCBzdGF0c0dyaWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgc3RhdHNHcmlkLmNsYXNzTmFtZSA9IFwidGllbXBvLXN0YXRzLWdyaWRcIjtcbiAgICAgIFxuICAgICAgLy8gQVx1MDBGMWFkaXIgY2FkYSB0YXJqZXRhIGFsIGdyaWRcbiAgICAgIGZvciAoY29uc3Qgc3RhdCBvZiBpbmZvRXN0YWRpc3RpY2FzKSB7XG4gICAgICAgIGNvbnN0IHRhcmpldGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0YXJqZXRhLmNsYXNzTmFtZSA9IFwidGllbXBvLXN0YXQtY2FyZFwiO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgaWNvbm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgaWNvbm8uY2xhc3NOYW1lID0gXCJ0aWVtcG8tc3RhdC1pY29uXCI7XG4gICAgICAgIGljb25vLnRleHRDb250ZW50ID0gc3RhdC5pY29ubztcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRpdHVsbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHRpdHVsby5jbGFzc05hbWUgPSBcInRpZW1wby1zdGF0LXRpdGxlXCI7XG4gICAgICAgIHRpdHVsby50ZXh0Q29udGVudCA9IHN0YXQudGl0dWxvO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgdmFsb3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB2YWxvci5jbGFzc05hbWUgPSBcInRpZW1wby1zdGF0LXZhbHVlXCI7XG4gICAgICAgIHZhbG9yLnRleHRDb250ZW50ID0gc3RhdC52YWxvcjtcbiAgICAgICAgXG4gICAgICAgIHRhcmpldGEuYXBwZW5kQ2hpbGQoaWNvbm8pO1xuICAgICAgICB0YXJqZXRhLmFwcGVuZENoaWxkKHRpdHVsbyk7XG4gICAgICAgIHRhcmpldGEuYXBwZW5kQ2hpbGQodmFsb3IpO1xuICAgICAgICBcbiAgICAgICAgc3RhdHNHcmlkLmFwcGVuZENoaWxkKHRhcmpldGEpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBzdGF0c0NvbnRhaW5lci5hcHBlbmRDaGlsZChzdGF0c0dyaWQpO1xuICAgICAgY29udGVuZWRvci5hcHBlbmRDaGlsZChzdGF0c0NvbnRhaW5lcik7XG4gICAgICBcbiAgICAgIC8vID09PSBTRUNDSVx1MDBEM04gMjogU0VTSVx1MDBEM04gQUNUSVZBIChzaSBleGlzdGUpID09PVxuICAgICAgaWYgKGVzdGFkaXN0aWNhcy5zZXNpb25BY3RpdmEpIHtcbiAgICAgICAgY29uc3QgYWN0aXZvQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgYWN0aXZvQ29udGFpbmVyLmNsYXNzTmFtZSA9IFwidGllbXBvLXNlc2lvbi1hY3RpdmEtY29udGFpbmVyXCI7XG4gICAgICAgIFxuICAgICAgICAvLyBUXHUwMEVEdHVsbyBkZSBsYSBzZWNjaVx1MDBGM25cbiAgICAgICAgY29uc3QgdGl0dWxvQWN0aXZvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgzXCIpO1xuICAgICAgICB0aXR1bG9BY3Rpdm8uY2xhc3NOYW1lID0gXCJ0aWVtcG8tYWN0aXZvLXRpdGxlXCI7XG4gICAgICAgIHRpdHVsb0FjdGl2by50ZXh0Q29udGVudCA9IFwiU2VzaVx1MDBGM24gYWN0aXZhXCI7XG4gICAgICAgIGFjdGl2b0NvbnRhaW5lci5hcHBlbmRDaGlsZCh0aXR1bG9BY3Rpdm8pO1xuICAgICAgICBcbiAgICAgICAgLy8gRW5jb250cmFyIGVsIHJlZ2lzdHJvIGFjdGl2b1xuICAgICAgICBjb25zdCByZWdpc3Ryb0FjdGl2byA9IHJlZ2lzdHJvcy5maW5kKHIgPT4gci5lc3RhZG8gPT09IFwiXHVEODNEXHVERkUyXCIpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHJlZ2lzdHJvQWN0aXZvKSB7XG4gICAgICAgICAgLy8gQ3JlYXIgdGFyamV0YSBkZSBzZXNpXHUwMEYzbiBhY3RpdmFcbiAgICAgICAgICBjb25zdCB0YXJqZXRhQWN0aXZhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICB0YXJqZXRhQWN0aXZhLmNsYXNzTmFtZSA9IFwidGllbXBvLWFjdGl2by1jYXJkXCI7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gRGVzY3JpcGNpXHUwMEYzblxuICAgICAgICAgIGNvbnN0IGRlc2NBY3RpdmEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgIGRlc2NBY3RpdmEuY2xhc3NOYW1lID0gXCJ0aWVtcG8tYWN0aXZvLWRlc2NyaXBjaW9uXCI7XG4gICAgICAgICAgZGVzY0FjdGl2YS50ZXh0Q29udGVudCA9IHJlZ2lzdHJvQWN0aXZvLmRlc2NyaXBjaW9uO1xuICAgICAgICAgIHRhcmpldGFBY3RpdmEuYXBwZW5kQ2hpbGQoZGVzY0FjdGl2YSk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gVGllbXBvIGVuIGVqZWN1Y2lcdTAwRjNuXG4gICAgICAgICAgY29uc3QgdGllbXBvRWplY3VjaW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICB0aWVtcG9FamVjdWNpb24uY2xhc3NOYW1lID0gXCJ0aWVtcG8tZWplY3VjaW9uXCI7XG4gICAgICAgICAgdGllbXBvRWplY3VjaW9uLmlkID0gYHRpZW1wby1lamVjdWNpb24tJHtlc3RhZGlzdGljYXMuc2VzaW9uQWN0aXZhLmlkfWA7XG4gICAgICAgICAgdGllbXBvRWplY3VjaW9uLnRleHRDb250ZW50ID0gZXN0YWRpc3RpY2FzLnNlc2lvbkFjdGl2YS50aWVtcG9Gb3JtYXRlYWRvO1xuICAgICAgICAgIHRhcmpldGFBY3RpdmEuYXBwZW5kQ2hpbGQodGllbXBvRWplY3VjaW9uKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBCb3RcdTAwRjNuIHBhcmEgaXIgYWwgcmVnaXN0cm9cbiAgICAgICAgICBjb25zdCBlbmxhY2VSZWdpc3RybyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgICAgICAgIGVubGFjZVJlZ2lzdHJvLmNsYXNzTmFtZSA9IFwidGllbXBvLWFjdGl2by1lbmxhY2UgaW50ZXJuYWwtbGlua1wiO1xuICAgICAgICAgIGVubGFjZVJlZ2lzdHJvLmhyZWYgPSByZWdpc3Ryb0FjdGl2by5wYXRoO1xuICAgICAgICAgIGVubGFjZVJlZ2lzdHJvLnNldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiLCByZWdpc3Ryb0FjdGl2by5wYXRoKTtcbiAgICAgICAgICBlbmxhY2VSZWdpc3Ryby50ZXh0Q29udGVudCA9IFwiVmVyIHJlZ2lzdHJvIGNvbXBsZXRvXCI7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gSGFjZXIgY2xpY2FibGUgZWwgZW5sYWNlXG4gICAgICAgICAgZW5sYWNlUmVnaXN0cm8uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGNvbnN0IGhyZWYgPSBlbmxhY2VSZWdpc3Ryby5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIik7XG4gICAgICAgICAgICBpZiAoaHJlZikge1xuICAgICAgICAgICAgICBhcHAud29ya3NwYWNlLm9wZW5MaW5rVGV4dChocmVmLCBcIlwiLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgXG4gICAgICAgICAgdGFyamV0YUFjdGl2YS5hcHBlbmRDaGlsZChlbmxhY2VSZWdpc3Rybyk7XG4gICAgICAgICAgYWN0aXZvQ29udGFpbmVyLmFwcGVuZENoaWxkKHRhcmpldGFBY3RpdmEpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb250ZW5lZG9yLmFwcGVuZENoaWxkKGFjdGl2b0NvbnRhaW5lcik7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vID09PSBTRUNDSVx1MDBEM04gMzogVEFCTEEgREUgUkVHSVNUUk9TID09PVxuICAgICAgLy8gVFx1MDBFRHR1bG8gZGUgbGEgc2VjY2lcdTAwRjNuXG4gICAgICBjb25zdCB0aXR1bG9UYWJsYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoM1wiKTtcbiAgICAgIHRpdHVsb1RhYmxhLmNsYXNzTmFtZSA9IFwidGllbXBvLXRhYmxlLXRpdGxlXCI7XG4gICAgICB0aXR1bG9UYWJsYS50ZXh0Q29udGVudCA9IFwiUmVnaXN0cm9zIGRlIHRpZW1wb1wiO1xuICAgICAgY29udGVuZWRvci5hcHBlbmRDaGlsZCh0aXR1bG9UYWJsYSk7XG4gICAgICBcbiAgICAgIC8vIENyZWFyIGxhIHRhYmxhIGNvbiBlc3RpbG9zIGRpcmVjdG9zIHBhcmEgZXZpdGFyIGVzcGFjaW9zIG5vIGRlc2VhZG9zXG4gICAgICBjb25zdCB0YWJsYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiKTtcbiAgICAgIHRhYmxhLmNsYXNzTmFtZSA9IFwidGllbXBvLXJlZ2lzdHJvcy10YWJsZVwiO1xuICAgICAgdGFibGEuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgICAgIHRhYmxhLnN0eWxlLnRhYmxlTGF5b3V0ID0gXCJmaXhlZFwiO1xuICAgICAgdGFibGEuc3R5bGUuYm9yZGVyQ29sbGFwc2UgPSBcImNvbGxhcHNlXCI7XG4gICAgICB0YWJsYS5zdHlsZS5tYXJnaW4gPSBcIjBcIjtcbiAgICAgIHRhYmxhLnN0eWxlLnBhZGRpbmcgPSBcIjBcIjtcbiAgICAgIFxuICAgICAgLy8gQ3JlYXIgZW5jYWJlemFkb3NcbiAgICAgIGNvbnN0IGVuY2FiZXphZG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGhlYWRcIik7XG4gICAgICBjb25zdCBmaWxhRW5jYWJlemFkbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0clwiKTtcbiAgICAgIFxuICAgICAgLy8gRGVmaW5pciBlbmNhYmV6YWRvcyB5IHN1cyBlc3RpbG9zXG4gICAgICBjb25zdCBlbmNhYmV6YWRvcyA9IFtcbiAgICAgICAgeyB0ZXh0bzogXCJEZXNjcmlwY2lcdTAwRjNuXCIsIGFuY2hvOiBcIjYwJVwiLCBhbGlnbjogXCJsZWZ0XCIgfSxcbiAgICAgICAgeyB0ZXh0bzogXCJEdXJhY2lcdTAwRjNuXCIsIGFuY2hvOiBcIjE1JVwiLCBhbGlnbjogXCJjZW50ZXJcIiB9LFxuICAgICAgICB7IHRleHRvOiBcIkZlY2hhXCIsIGFuY2hvOiBcIjI1JVwiLCBhbGlnbjogXCJsZWZ0XCIgfVxuICAgICAgXTtcbiAgICAgIFxuICAgICAgZm9yIChjb25zdCB7IHRleHRvLCBhbmNobywgYWxpZ24gfSBvZiBlbmNhYmV6YWRvcykge1xuICAgICAgICBjb25zdCB0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0aFwiKTtcbiAgICAgICAgdGgudGV4dENvbnRlbnQgPSB0ZXh0bztcbiAgICAgICAgdGguc3R5bGUud2lkdGggPSBhbmNobztcbiAgICAgICAgdGguc3R5bGUudGV4dEFsaWduID0gYWxpZ247XG4gICAgICAgIHRoLnN0eWxlLnBhZGRpbmcgPSBcIjEwcHhcIjtcbiAgICAgICAgaWYgKHRleHRvID09PSBcIkRlc2NyaXBjaVx1MDBGM25cIikge1xuICAgICAgICAgIHRoLnN0eWxlLnBhZGRpbmdMZWZ0ID0gXCIwXCI7IC8vIEVsaW1pbmFyIHBhZGRpbmcgaXpxdWllcmRvIGRlbCBwcmltZXIgZW5jYWJlemFkb1xuICAgICAgICB9XG4gICAgICAgIGZpbGFFbmNhYmV6YWRvLmFwcGVuZENoaWxkKHRoKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgZW5jYWJlemFkby5hcHBlbmRDaGlsZChmaWxhRW5jYWJlemFkbyk7XG4gICAgICB0YWJsYS5hcHBlbmRDaGlsZChlbmNhYmV6YWRvKTtcbiAgICAgIFxuICAgICAgLy8gQ3JlYXIgY3VlcnBvIGRlIGxhIHRhYmxhXG4gICAgICBjb25zdCBjdWVycG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGJvZHlcIik7XG4gICAgICBcbiAgICAgIC8vIEFcdTAwRjFhZGlyIGZpbGFzIGNvbiBsb3MgZGF0b3NcbiAgICAgIGZvciAoY29uc3QgcmVnaXN0cm8gb2YgcmVnaXN0cm9zKSB7XG4gICAgICAgIGNvbnN0IGZpbGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidHJcIik7XG4gICAgICAgIFxuICAgICAgICAvLyBDb2x1bW5hOiBEZXNjcmlwY2lcdTAwRjNuIGNvbiBlbmxhY2UgYSBsYSBub3RhXG4gICAgICAgIGNvbnN0IGNlbGRhRGVzY3JpcGNpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgIGNlbGRhRGVzY3JpcGNpb24uc3R5bGUud2lkdGggPSBcIjYwJVwiO1xuICAgICAgICBjZWxkYURlc2NyaXBjaW9uLnN0eWxlLnBhZGRpbmdMZWZ0ID0gXCIwXCI7IC8vIEVsaW1pbmFyIHBhZGRpbmcgaXpxdWllcmRvXG4gICAgICAgIGNlbGRhRGVzY3JpcGNpb24uc3R5bGUud2hpdGVTcGFjZSA9IFwibm9ybWFsXCI7XG4gICAgICAgIGNlbGRhRGVzY3JpcGNpb24uc3R5bGUud29yZFdyYXAgPSBcImJyZWFrLXdvcmRcIjtcbiAgICAgICAgY2VsZGFEZXNjcmlwY2lvbi5zdHlsZS53b3JkQnJlYWsgPSBcImJyZWFrLXdvcmRcIjtcbiAgICAgICAgY2VsZGFEZXNjcmlwY2lvbi5zdHlsZS5vdmVyZmxvd1dyYXAgPSBcImJyZWFrLXdvcmRcIjtcbiAgICAgICAgXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQ29udGVuZWRvciBwYXJhIGxhIGRlc2NyaXBjaVx1MDBGM24gcXVlIGZ1ZXJjZSBlbCBzYWx0byBkZSBsXHUwMEVEbmVhXG4gICAgICAgICAgY29uc3QgZGVzY3JpcGNpb25EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgIGRlc2NyaXBjaW9uRGl2LnN0eWxlLmRpc3BsYXkgPSBcImlubGluZVwiO1xuICAgICAgICAgIGRlc2NyaXBjaW9uRGl2LnN0eWxlLndoaXRlU3BhY2UgPSBcIm5vcm1hbFwiO1xuICAgICAgICAgIGRlc2NyaXBjaW9uRGl2LnN0eWxlLndvcmRXcmFwID0gXCJicmVhay13b3JkXCI7XG4gICAgICAgICAgZGVzY3JpcGNpb25EaXYuc3R5bGUud29yZEJyZWFrID0gXCJicmVhay13b3JkXCI7XG4gICAgICAgICAgZGVzY3JpcGNpb25EaXYudGV4dENvbnRlbnQgPSByZWdpc3Ryby5kZXNjcmlwY2lvbiB8fCBcIlNpbiBkZXNjcmlwY2lcdTAwRjNuXCI7XG4gICAgICAgICAgY2VsZGFEZXNjcmlwY2lvbi5hcHBlbmRDaGlsZChkZXNjcmlwY2lvbkRpdik7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQWdyZWdhciBlbmxhY2VcbiAgICAgICAgICBjb25zdCBlbmxhY2VTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgICAgZW5sYWNlU3Bhbi5jbGFzc05hbWUgPSBcInRpZW1wby12ZXItbWFzXCI7XG4gICAgICAgICAgZW5sYWNlU3Bhbi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIiAoXCIpKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBDcmVhciBlbmxhY2VcbiAgICAgICAgICBjb25zdCBlbmxhY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICAgICAgICBlbmxhY2UuY2xhc3NOYW1lID0gXCJpbnRlcm5hbC1saW5rXCI7XG4gICAgICAgICAgZW5sYWNlLmhyZWYgPSByZWdpc3Ryby5wYXRoO1xuICAgICAgICAgIGVubGFjZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIiwgcmVnaXN0cm8ucGF0aCk7XG4gICAgICAgICAgZW5sYWNlLnRleHRDb250ZW50ID0gXCJ2ZXJcIjtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBIYWNlciBjbGljYWJsZSBlbCBlbmxhY2VcbiAgICAgICAgICBlbmxhY2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGNvbnN0IGhyZWYgPSBlbmxhY2UuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpO1xuICAgICAgICAgICAgaWYgKGhyZWYpIHtcbiAgICAgICAgICAgICAgYXBwLndvcmtzcGFjZS5vcGVuTGlua1RleHQoaHJlZiwgXCJcIiwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIFxuICAgICAgICAgIGVubGFjZVNwYW4uYXBwZW5kQ2hpbGQoZW5sYWNlKTtcbiAgICAgICAgICBlbmxhY2VTcGFuLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiKVwiKSk7XG4gICAgICAgICAgY2VsZGFEZXNjcmlwY2lvbi5hcHBlbmRDaGlsZChlbmxhY2VTcGFuKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGNlbGRhRGVzY3JpcGNpb24udGV4dENvbnRlbnQgPSByZWdpc3Ryby5kZXNjcmlwY2lvbiB8fCBcIlNpbiBkZXNjcmlwY2lcdTAwRjNuXCI7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZpbGEuYXBwZW5kQ2hpbGQoY2VsZGFEZXNjcmlwY2lvbik7XG4gICAgICAgIFxuICAgICAgICAvLyBDb2x1bW5hOiBEdXJhY2lcdTAwRjNuIChjZW50cmFkYSlcbiAgICAgICAgY29uc3QgY2VsZGFEdXJhY2lvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcbiAgICAgICAgY2VsZGFEdXJhY2lvbi5zdHlsZS53aWR0aCA9IFwiMTUlXCI7XG4gICAgICAgIGNlbGRhRHVyYWNpb24uc3R5bGUudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcbiAgICAgICAgY2VsZGFEdXJhY2lvbi50ZXh0Q29udGVudCA9IHJlZ2lzdHJvLnRpZW1wb0Zvcm1hdGVhZG87XG4gICAgICAgIGZpbGEuYXBwZW5kQ2hpbGQoY2VsZGFEdXJhY2lvbik7XG4gICAgICAgIFxuICAgICAgICAvLyBDb2x1bW5hOiBGZWNoYVxuICAgICAgICBjb25zdCBjZWxkYUZlY2hhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuICAgICAgICBjZWxkYUZlY2hhLnN0eWxlLndpZHRoID0gXCIyNSVcIjtcbiAgICAgICAgY2VsZGFGZWNoYS5zdHlsZS53aGl0ZVNwYWNlID0gXCJub3JtYWxcIjtcbiAgICAgICAgY2VsZGFGZWNoYS5zdHlsZS53b3JkV3JhcCA9IFwiYnJlYWstd29yZFwiO1xuICAgICAgICBjZWxkYUZlY2hhLnRleHRDb250ZW50ID0gcmVnaXN0cm8uaG9yYUZpbmFsIHx8IHJlZ2lzdHJvLmhvcmFJbmljaW87XG4gICAgICAgIGZpbGEuYXBwZW5kQ2hpbGQoY2VsZGFGZWNoYSk7XG4gICAgICAgIFxuICAgICAgICBjdWVycG8uYXBwZW5kQ2hpbGQoZmlsYSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHRhYmxhLmFwcGVuZENoaWxkKGN1ZXJwbyk7XG4gICAgICBjb250ZW5lZG9yLmFwcGVuZENoaWxkKHRhYmxhKTtcbiAgICAgIFxuICAgICAgcmV0dXJuIGNvbnRlbmVkb3I7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhbCBtb3N0cmFyIGVzdGFkXHUwMEVEc3RpY2FzIGRlIHRpZW1wbzpcIiwgZXJyb3IpO1xuICAgICAgY29uc3QgZXJyb3JEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgZXJyb3JEaXYuY2xhc3NOYW1lID0gXCJ0aWVtcG8tc3RhdHMtZXJyb3JcIjtcbiAgICAgIGVycm9yRGl2LnRleHRDb250ZW50ID0gXCJFcnJvciBhbCBtb3N0cmFyIGVzdGFkXHUwMEVEc3RpY2FzOiBcIiArIGVycm9yLm1lc3NhZ2U7XG4gICAgICByZXR1cm4gZXJyb3JEaXY7XG4gICAgfVxuICB9XG5cbi8vIC0tLS0gVEFSRUFTXG5cbi8qKlxuICogR2VuZXJhIHVuIFx1MDBFMXJib2wgZGUgdGFyZWFzIHBlbmRpZW50ZXMgeSBlbiBwcm9ncmVzbyBkZSBsYSBub3RhIGFjdHVhbCB5IHN1cyByZWZlcmVuY2lhc1xuICogQHBhcmFtIHtPYmplY3R9IHBhZ2luYUFjdHVhbCAtIExhIHBcdTAwRTFnaW5hIGFjdHVhbCBvYnRlbmlkYSBhIHRyYXZcdTAwRTlzIGRlIGR2LmN1cnJlbnQoKVxuICogQHBhcmFtIHtPYmplY3R9IGR2IC0gRWwgb2JqZXRvIGRhdGF2aWV3IHBhcmEgYWNjZWRlciBhIHN1cyBmdW5jaW9uZXNcbiAqIEBwYXJhbSB7TnVtYmVyfSBwcm9mdW5kaWRhZE1heGltYSAtIFByb2Z1bmRpZGFkIG1cdTAwRTF4aW1hIGRlIHJlY3Vyc2lcdTAwRjNuIChkZWZlY3RvOiAzKVxuICogQHBhcmFtIHtTZXR9IHZpc2l0YWRhcyAtIFNldCBkZSBJRHMgZGUgcFx1MDBFMWdpbmFzIHlhIHZpc2l0YWRhcyBwYXJhIGV2aXRhciBjaWNsb3NcbiAqIEBwYXJhbSB7TnVtYmVyfSBwcm9mdW5kaWRhZEFjdHVhbCAtIFByb2Z1bmRpZGFkIGFjdHVhbCBkZSByZWN1cnNpXHUwMEYzblxuICogQHBhcmFtIHtCb29sZWFufSBlc1JlZmVyZW5jaWFOaWRhZGEgLSBJbmRpY2Egc2kgZXMgdW5hIHJlZmVyZW5jaWEgbmlkYWRhIChwYXJhIGV2aXRhciBkdXBsaWNhY2lcdTAwRjNuKVxuICogQHJldHVybnMge0hUTUxFbGVtZW50fSAtIEVsZW1lbnRvIEhUTUwgY29uIGxhIGVzdHJ1Y3R1cmEgZGUgXHUwMEUxcmJvbCBkZSB0YXJlYXNcbiAqL1xuYXN5bmMgZ2VuZXJhckFyYm9sVGFyZWFzKHBhZ2luYUFjdHVhbCwgZHYsIHByb2Z1bmRpZGFkTWF4aW1hID0gMywgdmlzaXRhZGFzID0gbmV3IFNldCgpLCBwcm9mdW5kaWRhZEFjdHVhbCA9IDAsIGVzUmVmZXJlbmNpYU5pZGFkYSA9IGZhbHNlKSB7XG4gICAgLy8gVmFsaWRhciBxdWUgcGFnaW5hQWN0dWFsIHRlbmdhIGxhcyBwcm9waWVkYWRlcyBuZWNlc2FyaWFzXG4gICAgaWYgKCFwYWdpbmFBY3R1YWwgfHwgIXBhZ2luYUFjdHVhbC5maWxlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjogcGFnaW5hQWN0dWFsIG5vIHRpZW5lIGxhcyBwcm9waWVkYWRlcyBuZWNlc2FyaWFzXCIsIHBhZ2luYUFjdHVhbCk7XG4gICAgICAgIHJldHVybiBkdi5lbChcImRpdlwiLCBcIkVycm9yOiBObyBzZSBwdWVkZSBnZW5lcmFyIGVsIFx1MDBFMXJib2wgZGUgdGFyZWFzLlwiLCB7IGNsczogXCJ0YXNrcy10cmVlLWVycm9yXCIgfSk7XG4gICAgfVxuICAgIFxuICAgIGNvbnNvbGUubG9nKGBQcm9jZXNhbmRvIHRhcmVhcyBkZTogJHtwYWdpbmFBY3R1YWwuZmlsZS5wYXRofSAocHJvZnVuZGlkYWQ6ICR7cHJvZnVuZGlkYWRBY3R1YWx9LCBlc1JlZmVyZW5jaWFOaWRhZGE6ICR7ZXNSZWZlcmVuY2lhTmlkYWRhfSlgKTtcbiAgICBcbiAgICAvLyBDcmVhciBlbCBjb250ZW5lZG9yIHByaW5jaXBhbFxuICAgIGNvbnN0IGNvbnRlbmVkb3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGNvbnRlbmVkb3IuY2xhc3NOYW1lID0gXCJ0YXNrcy10cmVlXCI7XG4gICAgXG4gICAgaWYgKHByb2Z1bmRpZGFkQWN0dWFsID09PSAwKSB7XG4gICAgICAgIC8vIEFcdTAwRjFhZGlyIHRcdTAwRUR0dWxvIHBlcnNvbmFsaXphZG8gc29sbyBlbiBsYSByYVx1MDBFRHpcbiAgICAgICAgY29uc3QgdGlwb05vdGEgPSBwYWdpbmFBY3R1YWwudHlwZU5hbWUgfHwgXCJOb3RhXCI7XG4gICAgICAgIGNvbnN0IGFsaWFzID0gcGFnaW5hQWN0dWFsLmZpbGUuYWxpYXNlcyAmJiBwYWdpbmFBY3R1YWwuZmlsZS5hbGlhc2VzLmxlbmd0aCA+IDAgXG4gICAgICAgICAgICA/IHBhZ2luYUFjdHVhbC5maWxlLmFsaWFzZXNbMF0gXG4gICAgICAgICAgICA6IChwYWdpbmFBY3R1YWwudGl0dWxvIHx8IHBhZ2luYUFjdHVhbC5maWxlLm5hbWUpO1xuICAgICAgICAgICAgXG4gICAgICAgIGNvbnN0IHRpdHVsbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoM1wiKTtcbiAgICAgICAgdGl0dWxvLmNsYXNzTmFtZSA9IFwidGFza3MtdHJlZS10aXRsZVwiO1xuICAgICAgICB0aXR1bG8udGV4dENvbnRlbnQgPSBcIlRhcmVhcyBwZW5kaWVudGVzXCI7XG4gICAgICAgIGNvbnRlbmVkb3IuYXBwZW5kQ2hpbGQodGl0dWxvKTtcbiAgICB9XG4gICAgXG4gICAgLy8gU2kgaGVtb3MgbGxlZ2FkbyBhIGxhIHByb2Z1bmRpZGFkIG1cdTAwRTF4aW1hLCBubyBzZWd1aW1vcyBleHBsb3JhbmRvXG4gICAgaWYgKHByb2Z1bmRpZGFkQWN0dWFsID49IHByb2Z1bmRpZGFkTWF4aW1hKSB7XG4gICAgICAgIHJldHVybiBjb250ZW5lZG9yO1xuICAgIH1cbiAgICBcbiAgICAvLyBNYXJjYXIgZXN0YSBwXHUwMEUxZ2luYSBjb21vIHZpc2l0YWRhIHBhcmEgZXZpdGFyIGNpY2xvc1xuICAgIHZpc2l0YWRhcy5hZGQocGFnaW5hQWN0dWFsLmZpbGUucGF0aCk7XG4gICAgXG4gICAgLy8gRXh0cmFlciB0YXJlYXMgZGUgbGEgcFx1MDBFMWdpbmEgYWN0dWFsXG4gICAgbGV0IHRhcmVhcztcbiAgICB0cnkge1xuICAgICAgICB0YXJlYXMgPSBhd2FpdCB0aGlzLmV4dHJhZXJUYXJlYXNEZVBhZ2luYShwYWdpbmFBY3R1YWwsIGR2KTtcbiAgICAgICAgY29uc29sZS5sb2coYEVuY29udHJhZGFzICR7dGFyZWFzLmxlbmd0aH0gdGFyZWFzIGVuICR7cGFnaW5hQWN0dWFsLmZpbGUucGF0aH1gKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGFsIGV4dHJhZXIgdGFyZWFzIGRlICR7cGFnaW5hQWN0dWFsLmZpbGUucGF0aH06YCwgZSk7XG4gICAgICAgIHRhcmVhcyA9IFtdO1xuICAgIH1cbiAgICBcbiAgICAvLyBPYnRlbmVyIHRvZGFzIGxhcyBwXHUwMEUxZ2luYXMgcXVlIGhhY2VuIHJlZmVyZW5jaWEgZGlyZWN0YSBhIGxhIHBcdTAwRTFnaW5hIGFjdHVhbFxuICAgIGxldCB0b2Rhc0xhc1BhZ2luYXM7XG4gICAgdHJ5IHtcbiAgICAgICAgdG9kYXNMYXNQYWdpbmFzID0gZHYucGFnZXMoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhbCBvYnRlbmVyIHBcdTAwRTFnaW5hczpcIiwgZSk7XG4gICAgICAgIGNvbnN0IGVycm9yTXNnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgIGVycm9yTXNnLnRleHRDb250ZW50ID0gXCJFcnJvciBhbCBvYnRlbmVyIHBcdTAwRTFnaW5hcyBkZSBEYXRhdmlld1wiO1xuICAgICAgICBlcnJvck1zZy5jbGFzc05hbWUgPSBcInRhc2tzLXRyZWUtZXJyb3JcIjtcbiAgICAgICAgY29udGVuZWRvci5hcHBlbmRDaGlsZChlcnJvck1zZyk7XG4gICAgICAgIFxuICAgICAgICAvLyBBXHUwMEZBbiBhc1x1MDBFRCwgbW9zdHJhbW9zIGxhcyB0YXJlYXMgZGUgbGEgcFx1MDBFMWdpbmEgYWN0dWFsIHNpIGxhcyBoYXlcbiAgICAgICAgaWYgKHRhcmVhcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmFncmVnYXJUYXJlYXNBQ29udGVuZWRvcih0YXJlYXMsIGNvbnRlbmVkb3IsIGR2LCBwYWdpbmFBY3R1YWwpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gY29udGVuZWRvcjtcbiAgICB9XG4gICAgXG4gICAgLy8gRmlsdHJhciBsYXMgcFx1MDBFMWdpbmFzIHF1ZSByZWZlcmVuY2lhbiBhIGxhIGFjdHVhbCBhIHRyYXZcdTAwRTlzIGRlICdhc3VudG8nXG4gICAgbGV0IHJlZmVyZW5jaWFzRGlyZWN0YXMgPSBbXTtcbiAgICB0cnkge1xuICAgICAgICAvLyBGdW5jaVx1MDBGM24gc2VndXJhIHBhcmEgdmVyaWZpY2FyIHNpIHVuIGFzdW50byBoYWNlIHJlZmVyZW5jaWEgYSBsYSBwXHUwMEUxZ2luYSBhY3R1YWxcbiAgICAgICAgY29uc3QgcmVmZXJlbmNpYUFQYWdpbmFBY3R1YWwgPSAoYXN1bnRvKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIFNpIGFzdW50byBlcyB1biBvYmpldG8gY29uIHBhdGggeSBjb2luY2lkZSBjb24gbGEgcFx1MDBFMWdpbmEgYWN0dWFsXG4gICAgICAgICAgICAgICAgaWYgKGFzdW50byAmJiB0eXBlb2YgYXN1bnRvID09PSAnb2JqZWN0JyAmJiBhc3VudG8ucGF0aCA9PT0gcGFnaW5hQWN0dWFsLmZpbGUucGF0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gU2kgYXN1bnRvIGVzIHVuYSBjYWRlbmFcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFzdW50byA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVmVyaWZpY2FyIHNpIGNvbnRpZW5lIGxhIHJ1dGEgY29tcGxldGFcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFzdW50by5pbmNsdWRlcyhwYWdpbmFBY3R1YWwuZmlsZS5wYXRoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhciBjb2luY2lkZW5jaWEgY29uIGFsaWFzZXMgKHNpIGV4aXN0ZW4pXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYWdpbmFBY3R1YWwuZmlsZS5hbGlhc2VzICYmIEFycmF5LmlzQXJyYXkocGFnaW5hQWN0dWFsLmZpbGUuYWxpYXNlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYWxpYXMgb2YgcGFnaW5hQWN0dWFsLmZpbGUuYWxpYXNlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbGlhcyAmJiBhc3VudG8uaW5jbHVkZXMoYWxpYXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gVmVyaWZpY2FyIGNvaW5jaWRlbmNpYSBjb24gZWwgbm9tYnJlIGRlbCBhcmNoaXZvXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYWdpbmFBY3R1YWwuZmlsZS5uYW1lICYmIGFzdW50by5pbmNsdWRlcyhwYWdpbmFBY3R1YWwuZmlsZS5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhbW9zIHNpIGVsIGFyY2hpdm8gdGllbmUgdGl0dWxvIG8gYWxpYXNlc1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aXR1bG8gPSBwYWdpbmFBY3R1YWwudGl0dWxvIHx8IHBhZ2luYUFjdHVhbC50aXRsZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRpdHVsbyAmJiBhc3VudG8uaW5jbHVkZXModGl0dWxvKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiRXJyb3IgYWwgdmVyaWZpY2FyIHJlZmVyZW5jaWE6XCIsIGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gRmlsdHJhciBsYXMgcFx1MDBFMWdpbmFzIGNvbiBtYW5lam8gZGUgZXJyb3JlcyBtZWpvcmFkb1xuICAgICAgICByZWZlcmVuY2lhc0RpcmVjdGFzID0gdG9kYXNMYXNQYWdpbmFzLmZpbHRlcihwID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCFwIHx8ICFwLmFzdW50bykgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIE5vcm1hbGl6YXIgYXN1bnRvIGEgYXJyYXlcbiAgICAgICAgICAgICAgICBjb25zdCBhc3VudG9zID0gQXJyYXkuaXNBcnJheShwLmFzdW50bykgPyBwLmFzdW50byA6IFtwLmFzdW50b107XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gVmVyaWZpY2FyIGNhZGEgYXN1bnRvXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBhc3VudG8gb2YgYXN1bnRvcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVmZXJlbmNpYUFQYWdpbmFBY3R1YWwoYXN1bnRvKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiRXJyb3IgYWwgZmlsdHJhciBwXHUwMEUxZ2luYTpcIiwgZXJyLCBwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coYEVuY29udHJhZGFzICR7cmVmZXJlbmNpYXNEaXJlY3Rhcy5sZW5ndGh9IHJlZmVyZW5jaWFzIGRpcmVjdGFzIGEgJHtwYWdpbmFBY3R1YWwuZmlsZS5wYXRofWApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIGZpbHRyYXIgcmVmZXJlbmNpYXM6XCIsIGUpO1xuICAgICAgICBjb25zdCBlcnJvck1zZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICBlcnJvck1zZy50ZXh0Q29udGVudCA9IFwiRXJyb3IgYWwgcHJvY2VzYXIgcmVmZXJlbmNpYXNcIjtcbiAgICAgICAgZXJyb3JNc2cuY2xhc3NOYW1lID0gXCJ0YXNrcy10cmVlLWVycm9yXCI7XG4gICAgICAgIGNvbnRlbmVkb3IuYXBwZW5kQ2hpbGQoZXJyb3JNc2cpO1xuXG4gICAgICAgIC8vIEFcdTAwRkFuIGFzXHUwMEVELCBtb3N0cmFtb3MgbGFzIHRhcmVhcyBkZSBsYSBwXHUwMEUxZ2luYSBhY3R1YWwgc2kgbGFzIGhheVxuICAgICAgICBpZiAodGFyZWFzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuYWdyZWdhclRhcmVhc0FDb250ZW5lZG9yKHRhcmVhcywgY29udGVuZWRvciwgZHYsIHBhZ2luYUFjdHVhbCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBjb250ZW5lZG9yO1xuICAgIH1cbiAgICBcbiAgICAvLyBWZXJpZmljYXIgc2kgdGVuZW1vcyB0YXJlYXMgZW4gbGEgcFx1MDBFMWdpbmEgYWN0dWFsIG8gZW4gcmVmZXJlbmNpYXNcbiAgICBjb25zdCBoYXlUYXJlYXNFbkFjdHVhbCA9IHRhcmVhcy5sZW5ndGggPiAwO1xuICAgIFxuICAgIC8vIFByaW1lcm8gdmVyaWZpY2Ftb3Mgc2kgYWxndW5hIHJlZmVyZW5jaWEgdGllbmUgdGFyZWFzXG4gICAgY29uc3QgcmVmZXJlbmNpYXNDb25UYXJlYXMgPSBbXTtcbiAgICBjb25zdCByZWZlcmVuY2lhc0NvblRhcmVhc0hlcmVkYWRhcyA9IFtdOyAvLyBOdWV2byBhcnJheSBwYXJhIHJlZmVyZW5jaWFzIHNpbiB0YXJlYXMgcHJvcGlhcyBwZXJvIGNvbiB0YXJlYXMgaGVyZWRhZGFzXG4gICAgXG4gICAgLy8gUHJvY2VzYXIgdG9kYXMgbGFzIHJlZmVyZW5jaWFzIGRpcmVjdGFzLCBpbmNsdXNvIHNpIG5vIHRpZW5lbiB0YXJlYXMgcHJvcGlhc1xuICAgIGZvciAoY29uc3QgcmVmZXJlbmNpYSBvZiByZWZlcmVuY2lhc0RpcmVjdGFzKSB7XG4gICAgICAgIC8vIEV2aXRhciBjaWNsb3NcbiAgICAgICAgaWYgKHZpc2l0YWRhcy5oYXMocmVmZXJlbmNpYS5maWxlLnBhdGgpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEV4dHJhZXIgdGFyZWFzIHByb3BpYXMgZGUgbGEgcmVmZXJlbmNpYVxuICAgICAgICAgICAgY29uc3QgdGFyZWFzUmVmZXJlbmNpYSA9IGF3YWl0IHRoaXMuZXh0cmFlclRhcmVhc0RlUGFnaW5hKHJlZmVyZW5jaWEsIGR2KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ0FNQklPIEFRVVx1MDBDRDogQ29tcHJvYmFyIHNpIGVzdGEgcmVmZXJlbmNpYSB0aWVuZSByZWZlcmVuY2lhcyBhbmlkYWRhcyBjb24gdGFyZWFzXG4gICAgICAgICAgICAvLyBBdW5xdWUgbm8gdGVuZ2EgdGFyZWFzIHByb3BpYXMsIG5lY2VzaXRhbW9zIGV4cGxvcmFyIG1cdTAwRTFzIHByb2Z1bmRvXG4gICAgICAgICAgICBsZXQgdGllbmVUYXJlYXNIZXJlZGFkYXMgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCByZWZBbmlkYWRhc0NvblRhcmVhcyA9IFtdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDcmVhciBjb3BpYSBkZWwgY29uanVudG8gdmlzaXRhZGFzIHBhcmEgZXZpdGFyIGFmZWN0YXIgYSBvdHJhcyByYW1hc1xuICAgICAgICAgICAgY29uc3QgbnVldm9WaXNpdGFkYXMgPSBuZXcgU2V0KFsuLi52aXNpdGFkYXNdKTtcbiAgICAgICAgICAgIG51ZXZvVmlzaXRhZGFzLmFkZChyZWZlcmVuY2lhLmZpbGUucGF0aCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEJ1c2NhciByZWN1cnNpdmFtZW50ZSBlbiBwcm9mdW5kaWRhZFxuICAgICAgICAgICAgY29uc3QgcmVzdWx0YWRvQW5pZGFkbyA9IGF3YWl0IHRoaXMuZ2VuZXJhckFyYm9sVGFyZWFzKFxuICAgICAgICAgICAgICAgIHJlZmVyZW5jaWEsIGR2LCBwcm9mdW5kaWRhZE1heGltYSwgXG4gICAgICAgICAgICAgICAgbnVldm9WaXNpdGFkYXMsIHByb2Z1bmRpZGFkQWN0dWFsICsgMSxcbiAgICAgICAgICAgICAgICB0cnVlIC8vIEVzIHVuYSByZWZlcmVuY2lhIG5pZGFkYVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVmVyaWZpY2FyIHNpIGVsIHJlc3VsdGFkbyBhbmlkYWRvIGNvbnRpZW5lIHRhcmVhcyAoYnVzY2FuZG8gZWxlbWVudG9zIGNvbiBjbGFzZSAudGFza3MtaXRlbSlcbiAgICAgICAgICAgIGlmIChyZXN1bHRhZG9BbmlkYWRvICYmIHJlc3VsdGFkb0FuaWRhZG8ubm9kZVR5cGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJlYXNBbmlkYWRhcyA9IHJlc3VsdGFkb0FuaWRhZG8ucXVlcnlTZWxlY3RvckFsbCgnLnRhc2tzLWl0ZW0nKTtcbiAgICAgICAgICAgICAgICB0aWVuZVRhcmVhc0hlcmVkYWRhcyA9IHRhcmVhc0FuaWRhZGFzLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHRpZW5lVGFyZWFzSGVyZWRhZGFzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEd1YXJkYXIgZWwgcmVzdWx0YWRvIGFuaWRhZG8gcGFyYSB1c2FybG8gZGVzcHVcdTAwRTlzXG4gICAgICAgICAgICAgICAgICAgIHJlZkFuaWRhZGFzQ29uVGFyZWFzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNpYSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdGFkbzogcmVzdWx0YWRvQW5pZGFkb1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICh0YXJlYXNSZWZlcmVuY2lhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBFc3RhIHJlZmVyZW5jaWEgdGllbmUgdGFyZWFzIHByb3BpYXNcbiAgICAgICAgICAgICAgICByZWZlcmVuY2lhc0NvblRhcmVhcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNpYSxcbiAgICAgICAgICAgICAgICAgICAgdGFyZWFzOiB0YXJlYXNSZWZlcmVuY2lhLFxuICAgICAgICAgICAgICAgICAgICByZWZBbmlkYWRhczogcmVmQW5pZGFkYXNDb25UYXJlYXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGllbmVUYXJlYXNIZXJlZGFkYXMpIHtcbiAgICAgICAgICAgICAgICAvLyBFc3RhIHJlZmVyZW5jaWEgbm8gdGllbmUgdGFyZWFzIHByb3BpYXMsIHBlcm8gdGllbmUgc3VicmVmZXJlbmNpYXMgY29uIHRhcmVhc1xuICAgICAgICAgICAgICAgIHJlZmVyZW5jaWFzQ29uVGFyZWFzSGVyZWRhZGFzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2lhLFxuICAgICAgICAgICAgICAgICAgICB0YXJlYXM6IFtdLCAvLyBObyB0aWVuZSB0YXJlYXMgcHJvcGlhc1xuICAgICAgICAgICAgICAgICAgICByZWZBbmlkYWRhczogcmVmQW5pZGFkYXNDb25UYXJlYXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgYWwgcHJvY2VzYXIgcmVmZXJlbmNpYSAke3JlZmVyZW5jaWEuZmlsZS5wYXRofTpgLCBlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBDb21iaW5hciBhbWJvcyB0aXBvcyBkZSByZWZlcmVuY2lhcyBwYXJhIHByb2Nlc2FybGFzIGp1bnRhc1xuICAgIGNvbnN0IHRvZGFzTGFzUmVmZXJlbmNpYXNDb25UYXJlYXMgPSBbLi4ucmVmZXJlbmNpYXNDb25UYXJlYXMsIC4uLnJlZmVyZW5jaWFzQ29uVGFyZWFzSGVyZWRhZGFzXTtcbiAgICBjb25zdCBoYXlUYXJlYXNFblJlZmVyZW5jaWFzID0gdG9kYXNMYXNSZWZlcmVuY2lhc0NvblRhcmVhcy5sZW5ndGggPiAwO1xuICAgIFxuICAgIC8vIFNpIG5vIGhheSB0YXJlYXMgZW4gbGEgcFx1MDBFMWdpbmEgYWN0dWFsIG5pIGVuIHJlZmVyZW5jaWFzLCB5IG5vIGVzdGFtb3MgZW4gbGEgcmFcdTAwRUR6LFxuICAgIC8vIG5vIG1vc3RyYW1vcyBuYWRhIChwYXJhIG9wdGltaXphciBlc3BhY2lvKVxuICAgIGlmICghaGF5VGFyZWFzRW5BY3R1YWwgJiYgIWhheVRhcmVhc0VuUmVmZXJlbmNpYXMgJiYgcHJvZnVuZGlkYWRBY3R1YWwgPiAwKSB7XG4gICAgICAgIHJldHVybiBjb250ZW5lZG9yO1xuICAgIH1cbiAgICBcbiAgICAvLyBTaSB0ZW5lbW9zIHRhcmVhcyBlbiBsYSBwXHUwMEUxZ2luYSBhY3R1YWwsIGxhcyBtb3N0cmFtb3MsIHBlcm8gc29sbyBzaSBubyBlcyB1bmEgcmVmZXJlbmNpYSBuaWRhZGFcbiAgICAvLyBvIHNpIGVzIGxhIHJhXHUwMEVEeiAocHJvZnVuZGlkYWRBY3R1YWwgPT09IDApXG4gICAgaWYgKGhheVRhcmVhc0VuQWN0dWFsICYmICghZXNSZWZlcmVuY2lhTmlkYWRhIHx8IHByb2Z1bmRpZGFkQWN0dWFsID09PSAwKSkge1xuICAgICAgICAvLyBDcmVhciBzZWNjaVx1MDBGM24gcGFyYSBsYXMgdGFyZWFzIGRlIGxhIHBcdTAwRTFnaW5hIGFjdHVhbFxuICAgICAgICBjb25zdCBzZWNjaW9uQWN0dWFsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgc2VjY2lvbkFjdHVhbC5jbGFzc05hbWUgPSBcInRhc2tzLW5vZGUtY3VycmVudFwiO1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXIgZW5jYWJlemFkbyBzb2xvIHNpIGhheSByZWZlcmVuY2lhcyBkaXJlY3RhcyAocGFyYSBkaWZlcmVuY2lhcilcbiAgICAgICAgaWYgKGhheVRhcmVhc0VuUmVmZXJlbmNpYXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGVuY2FiZXphZG9BY3R1YWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgZW5jYWJlemFkb0FjdHVhbC5jbGFzc05hbWUgPSBcInRhc2tzLW5vZGUtaGVhZGVyXCI7XG4gICAgICAgICAgICBlbmNhYmV6YWRvQWN0dWFsLnRleHRDb250ZW50ID0gXCJUYXJlYXMgZGlyZWN0YXNcIjtcbiAgICAgICAgICAgIHNlY2Npb25BY3R1YWwuYXBwZW5kQ2hpbGQoZW5jYWJlemFkb0FjdHVhbCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEFncmVnYXIgbGFzIHRhcmVhcyBkZSBsYSBwXHUwMEUxZ2luYSBhY3R1YWxcbiAgICAgICAgdGhpcy5hZ3JlZ2FyVGFyZWFzQUNvbnRlbmVkb3IodGFyZWFzLCBzZWNjaW9uQWN0dWFsLCBkdiwgcGFnaW5hQWN0dWFsKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFcdTAwRjFhZGlyIGxhIHNlY2NpXHUwMEYzbiBhbCBjb250ZW5lZG9yIHByaW5jaXBhbFxuICAgICAgICBjb250ZW5lZG9yLmFwcGVuZENoaWxkKHNlY2Npb25BY3R1YWwpO1xuICAgIH1cbiAgICBcbiAgICAvLyBTaSB0ZW5lbW9zIHJlZmVyZW5jaWFzIGNvbiB0YXJlYXMgKHByb3BpYXMgbyBoZXJlZGFkYXMpLCBwcm9jZXNhbW9zIGNhZGEgdW5hXG4gICAgaWYgKGhheVRhcmVhc0VuUmVmZXJlbmNpYXMpIHtcbiAgICAgICAgLy8gQ3JlYXIgc2VjY2lcdTAwRjNuIHBhcmEgbGFzIHRhcmVhcyBkZSByZWZlcmVuY2lhc1xuICAgICAgICBjb25zdCBzZWNjaW9uUmVmZXJlbmNpYXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBzZWNjaW9uUmVmZXJlbmNpYXMuY2xhc3NOYW1lID0gXCJ0YXNrcy1yZWZzLWNvbnRhaW5lclwiO1xuICAgICAgICBcbiAgICAgICAgLy8gU29sbyBhXHUwMEYxYWRpbW9zIGVuY2FiZXphZG8gc2kgaGF5IHRhcmVhcyB0YW50byBlbiBhY3R1YWwgY29tbyBlbiByZWZlcmVuY2lhc1xuICAgICAgICBpZiAoaGF5VGFyZWFzRW5BY3R1YWwgJiYgKCFlc1JlZmVyZW5jaWFOaWRhZGEgfHwgcHJvZnVuZGlkYWRBY3R1YWwgPT09IDApKSB7XG4gICAgICAgICAgICBjb25zdCBlbmNhYmV6YWRvUmVmcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBlbmNhYmV6YWRvUmVmcy5jbGFzc05hbWUgPSBcInRhc2tzLXJlZnMtaGVhZGVyXCI7XG4gICAgICAgICAgICBlbmNhYmV6YWRvUmVmcy50ZXh0Q29udGVudCA9IFwiVGFyZWFzIGVuIG5vdGFzIHJlbGFjaW9uYWRhc1wiO1xuICAgICAgICAgICAgc2VjY2lvblJlZmVyZW5jaWFzLmFwcGVuZENoaWxkKGVuY2FiZXphZG9SZWZzKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXIgbGlzdGEgcGFyYSBsYXMgcmVmZXJlbmNpYXNcbiAgICAgICAgY29uc3QgbGlzdGFSZWZzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xuICAgICAgICBsaXN0YVJlZnMuY2xhc3NOYW1lID0gXCJ0YXNrcy1yZWZzLWxpc3RcIjtcbiAgICAgICAgXG4gICAgICAgIC8vIFByb2Nlc2FyIGNhZGEgcmVmZXJlbmNpYSBjb24gdGFyZWFzIChwcm9waWFzIG8gaGVyZWRhZGFzKVxuICAgICAgICBmb3IgKGNvbnN0IHsgcmVmZXJlbmNpYSwgdGFyZWFzLCByZWZBbmlkYWRhcyB9IG9mIHRvZGFzTGFzUmVmZXJlbmNpYXNDb25UYXJlYXMpIHtcbiAgICAgICAgICAgIC8vIENyZWFyIGVsZW1lbnRvIHBhcmEgZXN0YSByZWZlcmVuY2lhXG4gICAgICAgICAgICBjb25zdCBpdGVtUmVmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgICAgICAgICAgaXRlbVJlZi5jbGFzc05hbWUgPSBcInRhc2tzLXJlZi1pdGVtXCI7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENyZWFyIGVuY2FiZXphZG8gY29uIGluZm9ybWFjaVx1MDBGM24gZGUgbGEgcmVmZXJlbmNpYVxuICAgICAgICAgICAgY29uc3QgaGVhZGVyUmVmID0gdGhpcy5jcmVhckVuY2FiZXphZG9SZWZlcmVuY2lhKHJlZmVyZW5jaWEsIGR2LCB0YXJlYXMubGVuZ3RoKTtcbiAgICAgICAgICAgIGl0ZW1SZWYuYXBwZW5kQ2hpbGQoaGVhZGVyUmVmKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gU2kgdGllbmUgdGFyZWFzIHByb3BpYXMsIG1vc3RyYXJsYXNcbiAgICAgICAgICAgIGlmICh0YXJlYXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIENyZWFyIGNvbnRlbmVkb3IgY29sYXBzYWJsZSBwYXJhIGxhcyB0YXJlYXNcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJlYXNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgIHRhcmVhc0NvbnRhaW5lci5jbGFzc05hbWUgPSBcInRhc2tzLWNvbnRhaW5lclwiO1xuICAgICAgICAgICAgICAgIC8vIEFcdTAwRjFhZGlyIGF0cmlidXRvIGRlIGRhdG9zIHBhcmEgaWRlbnRpZmljYXIgYSBxdVx1MDBFOSBub3RhIHBlcnRlbmVjZSBlc3RlIGNvbnRlbmVkb3JcbiAgICAgICAgICAgICAgICB0YXJlYXNDb250YWluZXIuc2V0QXR0cmlidXRlKFwiZGF0YS1wYXRoXCIsIHJlZmVyZW5jaWEuZmlsZS5wYXRoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBBZ3JlZ2FyIGxhcyB0YXJlYXMgZGUgZXN0YSByZWZlcmVuY2lhXG4gICAgICAgICAgICAgICAgdGhpcy5hZ3JlZ2FyVGFyZWFzQUNvbnRlbmVkb3IodGFyZWFzLCB0YXJlYXNDb250YWluZXIsIGR2LCByZWZlcmVuY2lhKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBBZ3JlZ2FyIGVsIGNvbnRlbmVkb3IgZGUgdGFyZWFzIGFsIGVsZW1lbnRvIGRlIHJlZmVyZW5jaWFcbiAgICAgICAgICAgICAgICBpdGVtUmVmLmFwcGVuZENoaWxkKHRhcmVhc0NvbnRhaW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFNpIHRpZW5lIHN1YnJlZmVyZW5jaWFzIGNvbiB0YXJlYXMsIG1vc3RyYXJsYXNcbiAgICAgICAgICAgIGlmIChyZWZBbmlkYWRhcyAmJiByZWZBbmlkYWRhcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB7IHJlc3VsdGFkbyB9IG9mIHJlZkFuaWRhZGFzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRhZG8gJiYgcmVzdWx0YWRvLm5vZGVUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBRdWl0YXIgZWwgdFx1MDBFRHR1bG8gcmVwZXRpZG8gc2kgZXhpc3RlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aXR1bG9SZXBldGlkbyA9IHJlc3VsdGFkby5xdWVyeVNlbGVjdG9yKCcudGFza3MtdHJlZS10aXRsZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpdHVsb1JlcGV0aWRvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0dWxvUmVwZXRpZG8ucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwbGljYXIgY2xhc2UgZXNwZWNpYWwgcGFyYSBzdWItcmVmZXJlbmNpYXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdGFkby5jbGFzc0xpc3QuYWRkKCd0YXNrcy1zdWJyZWZzLWNvbnRhaW5lcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZ3JlZ2FyIHN1Yi1yZWZlcmVuY2lhcyBhbCBlbGVtZW50byBhY3R1YWxcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1SZWYuYXBwZW5kQ2hpbGQocmVzdWx0YWRvKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQVx1MDBGMWFkaXIgZWwgZWxlbWVudG8gZGUgcmVmZXJlbmNpYSBhIGxhIGxpc3RhXG4gICAgICAgICAgICBsaXN0YVJlZnMuYXBwZW5kQ2hpbGQoaXRlbVJlZik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEFcdTAwRjFhZGlyIGxhIGxpc3RhIGRlIHJlZmVyZW5jaWFzIGEgbGEgc2VjY2lcdTAwRjNuXG4gICAgICAgIHNlY2Npb25SZWZlcmVuY2lhcy5hcHBlbmRDaGlsZChsaXN0YVJlZnMpO1xuICAgICAgICBcbiAgICAgICAgLy8gQVx1MDBGMWFkaXIgbGEgc2VjY2lcdTAwRjNuIGFsIGNvbnRlbmVkb3IgcHJpbmNpcGFsXG4gICAgICAgIGNvbnRlbmVkb3IuYXBwZW5kQ2hpbGQoc2VjY2lvblJlZmVyZW5jaWFzKTtcbiAgICB9XG4gICAgXG4gICAgLy8gU2kgbm8gaGF5IHRhcmVhcyBlbiBhYnNvbHV0byB5IGVzdGFtb3MgZW4gbGEgcmFcdTAwRUR6LCBtb3N0cmFyIG1lbnNhamVcbiAgICBpZiAoIWhheVRhcmVhc0VuQWN0dWFsICYmICFoYXlUYXJlYXNFblJlZmVyZW5jaWFzICYmIHByb2Z1bmRpZGFkQWN0dWFsID09PSAwKSB7XG4gICAgICAgIGNvbnN0IG1lbnNhamUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgbWVuc2FqZS50ZXh0Q29udGVudCA9IFwiTm8gc2UgZW5jb250cmFyb24gdGFyZWFzIHBlbmRpZW50ZXMgbyBlbiBwcm9ncmVzb1wiO1xuICAgICAgICBtZW5zYWplLmNsYXNzTmFtZSA9IFwidGFza3MtdHJlZS1lbXB0eVwiO1xuICAgICAgICBjb250ZW5lZG9yLmFwcGVuZENoaWxkKG1lbnNhamUpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gY29udGVuZWRvcjtcbn1cblxuLyoqXG4gKiBFeHRyYWUgbGFzIHRhcmVhcyBwZW5kaWVudGVzIHkgZW4gcHJvZ3Jlc28gZGUgdW5hIHBcdTAwRTFnaW5hXG4gKiBAcGFyYW0ge09iamVjdH0gcGFnaW5hIC0gTGEgcFx1MDBFMWdpbmEgZGUgbGEgcXVlIGV4dHJhZXIgdGFyZWFzXG4gKiBAcGFyYW0ge09iamVjdH0gZHYgLSBFbCBvYmpldG8gZGF0YXZpZXdcbiAqIEByZXR1cm5zIHtBcnJheX0gLSBBcnJheSBkZSBvYmpldG9zIGNvbiBsYXMgdGFyZWFzIGV4dHJhXHUwMEVEZGFzXG4gKi9cbmFzeW5jIGV4dHJhZXJUYXJlYXNEZVBhZ2luYShwYWdpbmEsIGR2KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gVmVyaWZpY2FyIHF1ZSBwYWdpbmEuZmlsZSBleGlzdGVcbiAgICAgICAgaWYgKCFwYWdpbmEgfHwgIXBhZ2luYS5maWxlIHx8ICFwYWdpbmEuZmlsZS5wYXRoKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJQXHUwMEUxZ2luYSBvIGFyY2hpdm8gbm8gdlx1MDBFMWxpZG86XCIsIHBhZ2luYSk7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIE9idGVuZXIgZWwgY29udGVuaWRvIGRlbCBhcmNoaXZvIGRlIG1hbmVyYSBzZWd1cmFcbiAgICAgICAgbGV0IGNvbnRlbmlkbztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFByaW1lcm8gaW50ZW50YW1vcyBjb24gZWwgbVx1MDBFOXRvZG8gZGUgRGF0YXZpZXcgc2kgZXN0XHUwMEUxIGRpc3BvbmlibGVcbiAgICAgICAgICAgIGlmIChkdiAmJiB0eXBlb2YgZHYuaW8gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkdi5pby5sb2FkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY29udGVuaWRvID0gYXdhaXQgZHYuaW8ubG9hZChwYWdpbmEuZmlsZS5wYXRoKTtcbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAvLyBTaSBubyBmdW5jaW9uYSwgdXNhbW9zIGVsIG1cdTAwRTl0b2RvIGRlIE9ic2lkaWFuXG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhcmNoaXZvID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChwYWdpbmEuZmlsZS5wYXRoKTtcbiAgICAgICAgICAgICAgICBpZiAoYXJjaGl2byAmJiBhcmNoaXZvIGluc3RhbmNlb2YgYXBwLlRGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbmlkbyA9IGF3YWl0IGFwcC52YXVsdC5yZWFkKGFyY2hpdm8pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHNlIHB1ZG8gZW5jb250cmFyIGVsIGFyY2hpdm9cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChyZWFkRXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgTm8gc2UgcHVkbyBsZWVyIGVsIGFyY2hpdm8gJHtwYWdpbmEuZmlsZS5wYXRofTpgLCByZWFkRXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBTaSBubyBwdWRpbW9zIG9idGVuZXIgZWwgY29udGVuaWRvLCByZXRvcm5hbW9zIGFycmF5IHZhY1x1MDBFRG9cbiAgICAgICAgaWYgKCFjb250ZW5pZG8pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgTm8gc2UgcHVkbyBvYnRlbmVyIGNvbnRlbmlkbyBwYXJhICR7cGFnaW5hLmZpbGUucGF0aH1gKTtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gRGl2aWRpciBlbCBjb250ZW5pZG8gZW4gbFx1MDBFRG5lYXNcbiAgICAgICAgY29uc3QgbGluZWFzID0gY29udGVuaWRvLnNwbGl0KCdcXG4nKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFycmF5IHBhcmEgYWxtYWNlbmFyIGxhcyB0YXJlYXMgZW5jb250cmFkYXNcbiAgICAgICAgY29uc3QgdGFyZWFzID0gW107XG4gICAgICAgIFxuICAgICAgICAvLyBBbmFsaXphciBjYWRhIGxcdTAwRURuZWEgYnVzY2FuZG8gdGFyZWFzXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZWFzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5lYSA9IGxpbmVhc1tpXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRXhwcmVzaVx1MDBGM24gcmVndWxhciBwYXJhIGRldGVjdGFyIHRhcmVhcyBwZW5kaWVudGVzICgtIFsgXSkgbyBlbiBwcm9ncmVzbyAoLSBbL10pXG4gICAgICAgICAgICBjb25zdCB0YXJlYVJlZ2V4ID0gL14oXFxzKiktXFxzKlxcWyhbIFxcL10pXFxdXFxzKiguKykkLztcbiAgICAgICAgICAgIGNvbnN0IGNvaW5jaWRlbmNpYSA9IHRhcmVhUmVnZXguZXhlYyhsaW5lYSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChjb2luY2lkZW5jaWEpIHtcbiAgICAgICAgICAgICAgICAvLyBFeHRyYWVyIGxhcyBwYXJ0ZXMgZGUgbGEgdGFyZWFcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRlbnRhY2lvbiA9IGNvaW5jaWRlbmNpYVsxXTtcbiAgICAgICAgICAgICAgICBjb25zdCBlc3RhZG8gPSBjb2luY2lkZW5jaWFbMl0gPT09ICcgJyA/ICdwZW5kaWVudGUnIDogJ3Byb2dyZXNvJztcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0byA9IGNvaW5jaWRlbmNpYVszXS50cmltKCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXIgb2JqZXRvIHBhcmEgbGEgdGFyZWFcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJlYSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dG8sXG4gICAgICAgICAgICAgICAgICAgIGVzdGFkbyxcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50YWNpb246IGluZGVudGFjaW9uLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgbGluZWFJbmRpY2U6IGksXG4gICAgICAgICAgICAgICAgICAgIGxpbmVhT3JpZ2luYWw6IGxpbmVhXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBBXHUwMEYxYWRpciBsYSB0YXJlYSBhbCBhcnJheVxuICAgICAgICAgICAgICAgIHRhcmVhcy5wdXNoKHRhcmVhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRhcmVhcztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBhbCBleHRyYWVyIHRhcmVhcyBkZSAke3BhZ2luYT8uZmlsZT8ucGF0aCB8fCAncFx1MDBFMWdpbmEgZGVzY29ub2NpZGEnfTpgLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTsgLy8gUmV0b3JuYXIgYXJyYXkgdmFjXHUwMEVEbyBlbiBjYXNvIGRlIGVycm9yXG4gICAgfVxufVxuXG4vKipcbiAqIENyZWEgZWwgZW5jYWJlemFkbyBwYXJhIHVuYSByZWZlcmVuY2lhIGNvbiBjb250YWRvciBkZSB0YXJlYXNcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWZlcmVuY2lhIC0gTGEgcmVmZXJlbmNpYSBwYXJhIGxhIHF1ZSBjcmVhciBlbCBlbmNhYmV6YWRvXG4gKiBAcGFyYW0ge09iamVjdH0gZHYgLSBFbCBvYmpldG8gZGF0YXZpZXdcbiAqIEBwYXJhbSB7TnVtYmVyfSBudW1UYXJlYXMgLSBOXHUwMEZBbWVybyBkZSB0YXJlYXMgZW4gZXN0YSByZWZlcmVuY2lhXG4gKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9IC0gRWxlbWVudG8gSFRNTCBjb24gZWwgZW5jYWJlemFkb1xuICovXG5jcmVhckVuY2FiZXphZG9SZWZlcmVuY2lhKHJlZmVyZW5jaWEsIGR2LCBudW1UYXJlYXMpIHtcbiAgICAvLyBDcmVhciBlbCBjb250ZW5lZG9yIGRlbCBlbmNhYmV6YWRvXG4gICAgY29uc3QgaGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBoZWFkZXIuY2xhc3NOYW1lID0gXCJ0YXNrcy1yZWYtaGVhZGVyXCI7XG5cbiAgICAvLyBBXHUwMEYxYWRpciBib3RcdTAwRjNuIGRlIGV4cGFuc2lcdTAwRjNuL2NvbGFwc29cbiAgICBjb25zdCB0b2dnbGVCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICB0b2dnbGVCdG4udGV4dENvbnRlbnQgPSBcIlx1MjVCQ1wiO1xuICAgIHRvZ2dsZUJ0bi5jbGFzc05hbWUgPSBcInRhc2tzLXRvZ2dsZS1idG5cIjtcbiAgICB0b2dnbGVCdG4uc2V0QXR0cmlidXRlKFwiZGF0YS1zdGF0ZVwiLCBcImV4cGFuZGVkXCIpO1xuICAgIHRvZ2dsZUJ0bi5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCBcIkNvbGFwc2FyL0V4cGFuZGlyXCIpO1xuICAgIFxuICAgIC8vIEFcdTAwRjFhZGlyIGhhbmRsZXIgcGFyYSBjb2xhcHNhci9leHBhbmRpclxuICAgIHRvZ2dsZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFN0YXRlID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN0YXRlXCIpO1xuICAgICAgICBjb25zdCBuZXdTdGF0ZSA9IGN1cnJlbnRTdGF0ZSA9PT0gXCJleHBhbmRlZFwiID8gXCJjb2xsYXBzZWRcIiA6IFwiZXhwYW5kZWRcIjtcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN0YXRlXCIsIG5ld1N0YXRlKTtcbiAgICAgICAgdGhpcy50ZXh0Q29udGVudCA9IG5ld1N0YXRlID09PSBcImV4cGFuZGVkXCIgPyBcIlx1MjVCQ1wiIDogXCJcdTI1QjZcIjtcbiAgICAgICAgXG4gICAgICAgIC8vIE9idGVuZXIgZWwgZWxlbWVudG8gcGFkcmUgZGVsIGJvdFx1MDBGM24gKGhlYWRlcikgeSBsdWVnbyBlbCBlbGVtZW50byBwYWRyZSBkZWwgaGVhZGVyIChsaSlcbiAgICAgICAgY29uc3QgaGVhZGVyRWxlbWVudCA9IHRoaXMuY2xvc2VzdChcIi50YXNrcy1yZWYtaGVhZGVyXCIpO1xuICAgICAgICBpZiAoaGVhZGVyRWxlbWVudCAmJiBoZWFkZXJFbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RJdGVtID0gaGVhZGVyRWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBPYnRlbmVyIHRvZG9zIGxvcyBjb250ZW5lZG9yZXMgc2VjdW5kYXJpb3MgLSB0YW50byB0YXNrcy1jb250YWluZXIgY29tbyB0YXNrcy1zdWJyZWZzLWNvbnRhaW5lclxuICAgICAgICAgICAgY29uc3QgY29udGFpbmVycyA9IGxpc3RJdGVtLnF1ZXJ5U2VsZWN0b3JBbGwoJy50YXNrcy1jb250YWluZXIsIC50YXNrcy1zdWJyZWZzLWNvbnRhaW5lcicpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDYW1iaWFyIGxhIHZpc2liaWxpZGFkIGRlIHRvZG9zIGxvcyBjb250ZW5lZG9yZXMgZW5jb250cmFkb3NcbiAgICAgICAgICAgIGNvbnRhaW5lcnMuZm9yRWFjaChjb250YWluZXIgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gbmV3U3RhdGUgPT09IFwiZXhwYW5kZWRcIiA/IFwiYmxvY2tcIiA6IFwibm9uZVwiO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIERldGVuZXIgcHJvcGFnYWNpXHUwMEYzbiBwYXJhIHF1ZSBubyBpbnRlcmZpZXJhIGNvbiBvdHJvcyBjbGljc1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyBBXHUwMEYxYWRpciBib3RcdTAwRjNuIGRlIGV4cGFuc2lcdTAwRjNuIGFsIGVuY2FiZXphZG9cbiAgICBoZWFkZXIuYXBwZW5kQ2hpbGQodG9nZ2xlQnRuKTtcbiAgICBcbiAgICAvLyBEZXRlcm1pbmFyIGVsIHRleHRvIHBhcmEgbW9zdHJhclxuICAgIGxldCBub21icmVNb3N0cmFkbyA9IHJlZmVyZW5jaWEuZmlsZS5hbGlhc2VzICYmIHJlZmVyZW5jaWEuZmlsZS5hbGlhc2VzLmxlbmd0aCA+IDBcbiAgICAgICAgPyByZWZlcmVuY2lhLmZpbGUuYWxpYXNlc1swXVxuICAgICAgICA6IChyZWZlcmVuY2lhLnRpdHVsbyB8fCByZWZlcmVuY2lhLmZpbGUubmFtZSk7XG4gICAgICAgIFxuICAgIC8vIFRpcG8gZGUgbGEgbm90YSAoc2kgZXN0XHUwMEUxIGRpc3BvbmlibGUpXG4gICAgY29uc3QgdGlwbyA9IHJlZmVyZW5jaWEudHlwZU5hbWU7XG4gICAgaWYgKHRpcG8pIHtcbiAgICAgICAgY29uc3QgdGlwb1NwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgdGlwb1NwYW4uY2xhc3NOYW1lID0gXCJ0YXNrcy1yZWYtdHlwZVwiO1xuICAgICAgICB0aXBvU3Bhbi50ZXh0Q29udGVudCA9IGBbJHt0aXBvfV0gYDtcbiAgICAgICAgaGVhZGVyLmFwcGVuZENoaWxkKHRpcG9TcGFuKTtcbiAgICB9XG4gICAgXG4gICAgLy8gQVx1MDBGMWFkaXIgZWwgZW1vamkgZGUgZXN0YWRvIHNpIGV4aXN0ZVxuICAgIGlmIChyZWZlcmVuY2lhLmVzdGFkbykge1xuICAgICAgICBjb25zdCBlc3RhZG9FbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICBlc3RhZG9FbC5jbGFzc05hbWUgPSBcInRhc2tzLXJlZi1zdGF0ZVwiO1xuICAgICAgICBlc3RhZG9FbC50ZXh0Q29udGVudCA9IGAke3JlZmVyZW5jaWEuZXN0YWRvfSBgO1xuICAgICAgICBlc3RhZG9FbC5zdHlsZS5tYXJnaW5SaWdodCA9IFwiNXB4XCI7XG4gICAgICAgIGhlYWRlci5hcHBlbmRDaGlsZChlc3RhZG9FbCk7XG4gICAgfVxuXG5cbiAgICAvLyBDcmVhciBlbCBlbmxhY2UgYSBsYSBub3RhXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZW5sYWNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgICAgIGVubGFjZS5jbGFzc05hbWUgPSBcImludGVybmFsLWxpbmsgdGFza3MtcmVmLWxpbmtcIjtcbiAgICAgICAgZW5sYWNlLmhyZWYgPSByZWZlcmVuY2lhLmZpbGUucGF0aDtcbiAgICAgICAgZW5sYWNlLnNldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiLCByZWZlcmVuY2lhLmZpbGUucGF0aCk7XG4gICAgICAgIGVubGFjZS50ZXh0Q29udGVudCA9IG5vbWJyZU1vc3RyYWRvO1xuICAgICAgICBcbiAgICAgICAgLy8gQXNlZ3VyYXIgcXVlIGVsIGVubGFjZSBlcyBjbGljYWJsZSB1c2FuZG8gbGEgQVBJIGRlIE9ic2lkaWFuXG4gICAgICAgIGVubGFjZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgYXBwLndvcmtzcGFjZS5vcGVuTGlua1RleHQocmVmZXJlbmNpYS5maWxlLnBhdGgsIFwiXCIsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGhlYWRlci5hcHBlbmRDaGlsZChlbmxhY2UpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIGNyZWFyIGVubGFjZTpcIiwgZSk7XG4gICAgICAgIGNvbnN0IHRleHRvUGxhbm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgdGV4dG9QbGFuby5jbGFzc05hbWUgPSBcInRhc2tzLXJlZi1uYW1lXCI7XG4gICAgICAgIHRleHRvUGxhbm8udGV4dENvbnRlbnQgPSBub21icmVNb3N0cmFkbztcbiAgICAgICAgaGVhZGVyLmFwcGVuZENoaWxkKHRleHRvUGxhbm8pO1xuICAgIH1cbiAgICBcbiAgICAvLyBBXHUwMEYxYWRpciBjb250YWRvciBkZSB0YXJlYXNcbiAgICBjb25zdCBjb250YWRvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIGNvbnRhZG9yLmNsYXNzTmFtZSA9IFwidGFza3MtY291bnRcIjtcbiAgICBjb250YWRvci50ZXh0Q29udGVudCA9IGAoJHtudW1UYXJlYXN9KWA7XG4gICAgaGVhZGVyLmFwcGVuZENoaWxkKGNvbnRhZG9yKTtcbiAgICBcbiAgICByZXR1cm4gaGVhZGVyO1xufVxuXG4vKipcbiAqIEFncmVnYSB1biBjb25qdW50byBkZSB0YXJlYXMgYSB1biBjb250ZW5lZG9yIERPTVxuICogQHBhcmFtIHtBcnJheX0gdGFyZWFzIC0gQXJyYXkgZGUgb2JqZXRvcyBkZSB0YXJlYXNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNvbnRlbmVkb3IgLSBDb250ZW5lZG9yIGFsIHF1ZSBhXHUwMEYxYWRpciBsYXMgdGFyZWFzXG4gKiBAcGFyYW0ge09iamVjdH0gZHYgLSBPYmpldG8gZGF0YXZpZXdcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWdpbmEgLSBQXHUwMEUxZ2luYSBhIGxhIHF1ZSBwZXJ0ZW5lY2VuIGxhcyB0YXJlYXNcbiAqL1xuYWdyZWdhclRhcmVhc0FDb250ZW5lZG9yKHRhcmVhcywgY29udGVuZWRvciwgZHYsIHBhZ2luYSkge1xuICAgIGlmICghdGFyZWFzIHx8IHRhcmVhcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBcbiAgICAvLyBDcmVhciBsaXN0YSBwYXJhIGxhcyB0YXJlYXNcbiAgICBjb25zdCBsaXN0YSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiKTtcbiAgICBsaXN0YS5jbGFzc05hbWUgPSBcInRhc2tzLWxpc3RcIjtcbiAgICBcbiAgICAvLyBBXHUwMEYxYWRpciBjYWRhIHRhcmVhIGNvbW8gXHUwMEVEdGVtIGRlIGxpc3RhXG4gICAgZm9yIChjb25zdCB0YXJlYSBvZiB0YXJlYXMpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICAgICAgaXRlbS5jbGFzc05hbWUgPSBgdGFza3MtaXRlbSB0YXNrcy0ke3RhcmVhLmVzdGFkb31gO1xuICAgICAgICBpdGVtLnNldEF0dHJpYnV0ZShcImRhdGEtbGluZWFcIiwgdGFyZWEubGluZWFJbmRpY2UpO1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXIgZWwgaW5kaWNhZG9yIGRlIGVzdGFkbyAoY2hlY2tib3gpXG4gICAgICAgIGNvbnN0IGNoZWNrYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgIGNoZWNrYm94LmNsYXNzTmFtZSA9IGB0YXNrcy1jaGVja2JveCB0YXNrcy1jaGVja2JveC0ke3RhcmVhLmVzdGFkb31gO1xuICAgICAgICBjaGVja2JveC50ZXh0Q29udGVudCA9IHRhcmVhLmVzdGFkbyA9PT0gJ3BlbmRpZW50ZScgPyBcIlx1MjYxMFwiIDogXCJcdTI1RDRcIjtcbiAgICAgICAgXG4gICAgICAgIC8vIEFcdTAwRjFhZGlyIGxpc3RlbmVyIGFsIGNoZWNrYm94IHBhcmEgbmF2ZWdhciBhIGxhIHRhcmVhXG4gICAgICAgIGNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm5hdmVnYXJBVGFyZWEocGFnaW5hLmZpbGUucGF0aCwgdGFyZWEubGluZWFJbmRpY2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWFyIGNvbnRlbmVkb3IgcGFyYSBlbCB0ZXh0byBkZSBsYSB0YXJlYVxuICAgICAgICBjb25zdCB0ZXh0b1NwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgdGV4dG9TcGFuLmNsYXNzTmFtZSA9IFwidGFza3MtdGV4dFwiO1xuICAgICAgICB0ZXh0b1NwYW4udGV4dENvbnRlbnQgPSB0YXJlYS50ZXh0bztcbiAgICAgICAgXG4gICAgICAgIC8vIEFcdTAwRjFhZGlyIGxpc3RlbmVyIGFsIHRleHRvIHBhcmEgbmF2ZWdhciBhIGxhIHRhcmVhXG4gICAgICAgIHRleHRvU3Bhbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5uYXZlZ2FyQVRhcmVhKHBhZ2luYS5maWxlLnBhdGgsIHRhcmVhLmxpbmVhSW5kaWNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBBXHUwMEYxYWRpciBsb3MgZWxlbWVudG9zIGFsIFx1MDBFRHRlbVxuICAgICAgICBpdGVtLmFwcGVuZENoaWxkKGNoZWNrYm94KTtcbiAgICAgICAgaXRlbS5hcHBlbmRDaGlsZCh0ZXh0b1NwYW4pO1xuICAgICAgICBcbiAgICAgICAgLy8gQVx1MDBGMWFkaXIgZWwgXHUwMEVEdGVtIGEgbGEgbGlzdGFcbiAgICAgICAgbGlzdGEuYXBwZW5kQ2hpbGQoaXRlbSk7XG4gICAgfVxuICAgIFxuICAgIC8vIEFcdTAwRjFhZGlyIGxhIGxpc3RhIGFsIGNvbnRlbmVkb3JcbiAgICBjb250ZW5lZG9yLmFwcGVuZENoaWxkKGxpc3RhKTtcbn1cblxuXG4vKipcbiAqIE9idGllbmUgeSBwcm9jZXNhIG5vdGFzIHZpbmN1bGFkYXMgYSB1bmEgbm90YSBhY3R1YWwsIGNvbiBvcGNpb25lcyBkZSBvcmRlbmFtaWVudG9cbiAqIEBwYXJhbSBwYXJhbXMgT2JqZXRvIGNvbiBwYXJcdTAwRTFtZXRyb3MgY29tbyBub3RhQWN0dWFsUGF0aCB5IHNvcnRPcmRlclxuICogQHJldHVybnMgT2JqZXRvIGNvbiBsYSB0YWJsYSBIVE1MIHkgbWV0YWRhdG9zXG4gKi9cbmFzeW5jIG9idGVuZXJOb3Rhc1ZpbmN1bGFkYXMocGFyYW1zKSB7XG4gICAgY29uc29sZS5sb2coXCJbREVCVUddIEluaWNpYW5kbyBvYnRlbmVyTm90YXNWaW5jdWxhZGFzIGNvbiBwYXJcdTAwRTFtZXRyb3M6XCIsIHBhcmFtcyk7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgICAgLy8gRXh0cmFlciBwYXJcdTAwRTFtZXRyb3NcbiAgICAgICAgY29uc3QgeyBub3RhQWN0dWFsUGF0aCwgc29ydE9yZGVyID0gXCJoaXRzXCIgfSA9IHBhcmFtcztcbiAgICAgICAgY29uc29sZS5sb2coXCJbREVCVUddIG5vdGFBY3R1YWxQYXRoOlwiLCBub3RhQWN0dWFsUGF0aCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiW0RFQlVHXSBzb3J0T3JkZXI6XCIsIHNvcnRPcmRlcik7XG4gICAgICAgIFxuICAgICAgICBpZiAoIW5vdGFBY3R1YWxQYXRoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW0VSUk9SXSBObyBzZSBwcm9wb3JjaW9uXHUwMEYzIGxhIHJ1dGEgZGUgbGEgbm90YSBhY3R1YWxcIik7XG4gICAgICAgICAgICByZXR1cm4geyBlcnJvcjogXCJObyBzZSBwcm9wb3JjaW9uXHUwMEYzIGxhIHJ1dGEgZGUgbGEgbm90YSBhY3R1YWxcIiB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBPYnRlbmVyIGxhIG5vdGEgYWN0dWFsXG4gICAgICAgIGNvbnN0IGN1cnJlbnROb3RlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChub3RhQWN0dWFsUGF0aCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiW0RFQlVHXSBjdXJyZW50Tm90ZTpcIiwgY3VycmVudE5vdGU/LnBhdGggfHwgXCJObyBlbmNvbnRyYWRhXCIpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFjdXJyZW50Tm90ZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIltFUlJPUl0gTm8gc2UgcHVkbyBlbmNvbnRyYXIgbGEgbm90YSBhY3R1YWwgZW4gbGEgcnV0YTpcIiwgbm90YUFjdHVhbFBhdGgpO1xuICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiTm8gc2UgcHVkbyBlbmNvbnRyYXIgbGEgbm90YSBhY3R1YWxcIiB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBDYWxjdWxhciBsYSBmZWNoYSBhY3R1YWwgKGluaWNpbyBkZWwgZFx1MDBFRGEpXG4gICAgICAgIGNvbnN0IHRvZGF5ID0gd2luZG93Lm1vbWVudCgpLnN0YXJ0T2YoXCJkYXlcIik7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiW0RFQlVHXSBGZWNoYSBhY3R1YWw6XCIsIHRvZGF5LmZvcm1hdChcIllZWVktTU0tRERcIikpO1xuICAgICAgICBcbiAgICAgICAgLy8gRmlsdHJhciBub3RhcyB2aW5jdWxhZGFzXG4gICAgICAgIGNvbnN0IGFsbEZpbGVzID0gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJbREVCVUddIFRvdGFsIGRlIGFyY2hpdm9zIG1hcmtkb3duOlwiLCBhbGxGaWxlcy5sZW5ndGgpO1xuICAgICAgICBcbiAgICAgICAgbGV0IGxpbmtlZE5vdGVzID0gW107XG4gICAgICAgIGxldCBwcm9jZXNzaW5nRXJyb3JzID0gMDtcbiAgICAgICAgbGV0IG5vdGVzV2l0aEFzdW50byA9IDA7XG4gICAgICAgIGxldCBub3Rlc1R5cGVFbnRyZWdhYmxlID0gMDtcbiAgICAgICAgbGV0IHBvc3NpYmxlTWF0Y2hlcyA9IDA7XG4gICAgICAgIFxuICAgICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgYWxsRmlsZXMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJbREVCVUddIFByb2Nlc2FuZG8gYXJjaGl2bzpcIiwgZmlsZS5wYXRoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zdCBtZXRhZGF0YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXI7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKCFtZXRhZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltERUJVR10gQXJjaGl2byBzaW4gZnJvbnRtYXR0ZXI6XCIsIGZpbGUucGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltERUJVR10gTWV0YWRhdGEgdHlwZU5hbWU6XCIsIG1ldGFkYXRhLnR5cGVOYW1lKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltERUJVR10gTWV0YWRhdGEgYXN1bnRvOlwiLCBKU09OLnN0cmluZ2lmeShtZXRhZGF0YS5hc3VudG8pKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAobWV0YWRhdGEudHlwZU5hbWUgIT09IFwiRW50cmVnYWJsZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0RFQlVHXSBBcmNoaXZvIG5vIGVzIHVuIEVudHJlZ2FibGUsIHNlIHNhbHRhXCIpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbm90ZXNUeXBlRW50cmVnYWJsZSsrO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICghbWV0YWRhdGEuYXN1bnRvKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0RFQlVHXSBFbnRyZWdhYmxlIHNpbiBhc3VudG8sIHNlIHNhbHRhXCIpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbm90ZXNXaXRoQXN1bnRvKys7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gVmVyaWZpY2FyIHNpIGVzdGEgbm90YSBoYWNlIHJlZmVyZW5jaWEgYSBsYSBub3RhIGFjdHVhbFxuICAgICAgICAgICAgICAgIGxldCBpc0xpbmtlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0RFQlVHXSBDb21wcm9iYW5kbyBzaSByZWZlcmVuY2lhIGEgbGEgbm90YSBhY3R1YWw6XCIsIG5vdGFBY3R1YWxQYXRoKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltERUJVR10gVGlwbyBkZSBhc3VudG86XCIsIHR5cGVvZiBtZXRhZGF0YS5hc3VudG8pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG1ldGFkYXRhLmFzdW50bykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJbREVCVUddIGFzdW50byBlcyB1biBhcnJheSBjb25cIiwgbWV0YWRhdGEuYXN1bnRvLmxlbmd0aCwgXCJlbGVtZW50b3NcIik7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBQYXJhIGNhZGEgZWxlbWVudG8gZW4gZWwgYXJyYXkgYXN1bnRvXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYXN1bnRvIG9mIG1ldGFkYXRhLmFzdW50bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJbREVCVUddIEVsZW1lbnRvIGFzdW50bzpcIiwgSlNPTi5zdHJpbmdpZnkoYXN1bnRvKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhc3VudG8gJiYgdHlwZW9mIGFzdW50byA9PT0gJ29iamVjdCcgJiYgYXN1bnRvLnBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltERUJVR10gYXN1bnRvIHRpZW5lIHBhdGg6XCIsIGFzdW50by5wYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltERUJVR10gXHUwMEJGQ29pbmNpZGUgY29uIG5vdGFBY3R1YWxQYXRoP1wiLCBhc3VudG8ucGF0aCA9PT0gbm90YUFjdHVhbFBhdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhc3VudG8ucGF0aCA9PT0gbm90YUFjdHVhbFBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNMaW5rZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZU1hdGNoZXMrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJbREVCVUddIFx1MDBBMUNPSU5DSURFTkNJQSBFTkNPTlRSQURBIGVuIHBhdGghXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhc3VudG8gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJbREVCVUddIGFzdW50byBlcyBzdHJpbmc6XCIsIGFzdW50byk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJbREVCVUddIFx1MDBCRkluY2x1eWUgbm90YUFjdHVhbFBhdGg/XCIsIGFzdW50by5pbmNsdWRlcyhub3RhQWN0dWFsUGF0aCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhc3VudG8uaW5jbHVkZXMobm90YUFjdHVhbFBhdGgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTGlua2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zc2libGVNYXRjaGVzKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0RFQlVHXSBcdTAwQTFDT0lOQ0lERU5DSUEgRU5DT05UUkFEQSBlbiBzdHJpbmchXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGFtYmlcdTAwRTluIGJ1c2NhciBlbiBlbCBjb250ZW5pZG8gZGVsIGVubGFjZSB3aWtpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2lraUxpbmtNYXRjaCA9IGFzdW50by5tYXRjaCgvXFxbXFxbKC4qPykoPzpcXHwoLio/KSk/XFxdXFxdLyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpa2lMaW5rTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlua1BhdGggPSB3aWtpTGlua01hdGNoWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltERUJVR10gRGV0ZWN0YWRvIGVubGFjZSB3aWtpLCBwYXRoOlwiLCBsaW5rUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGlua1BhdGggPT09IGN1cnJlbnROb3RlLmJhc2VuYW1lIHx8IGxpbmtQYXRoID09PSBub3RhQWN0dWFsUGF0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNMaW5rZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zc2libGVNYXRjaGVzKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltERUJVR10gXHUwMEExQ09JTkNJREVOQ0lBIEVOQ09OVFJBREEgZW4gd2lraWxpbmshXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBtZXRhZGF0YS5hc3VudG8gPT09ICdvYmplY3QnICYmIG1ldGFkYXRhLmFzdW50by5wYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0RFQlVHXSBhc3VudG8gZXMgdW4gb2JqZXRvIGNvbiBwYXRoOlwiLCBtZXRhZGF0YS5hc3VudG8ucGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0RFQlVHXSBcdTAwQkZDb2luY2lkZSBjb24gbm90YUFjdHVhbFBhdGg/XCIsIG1ldGFkYXRhLmFzdW50by5wYXRoID09PSBub3RhQWN0dWFsUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAobWV0YWRhdGEuYXN1bnRvLnBhdGggPT09IG5vdGFBY3R1YWxQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0xpbmtlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZU1hdGNoZXMrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0RFQlVHXSBcdTAwQTFDT0lOQ0lERU5DSUEgRU5DT05UUkFEQSBlbiBvYmpldG8hXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbWV0YWRhdGEuYXN1bnRvID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltERUJVR10gYXN1bnRvIGVzIHVuIHN0cmluZyBzaW1wbGU6XCIsIG1ldGFkYXRhLmFzdW50byk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0RFQlVHXSBcdTAwQkZJbmNsdXllIG5vdGFBY3R1YWxQYXRoP1wiLCBtZXRhZGF0YS5hc3VudG8uaW5jbHVkZXMobm90YUFjdHVhbFBhdGgpKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXRhZGF0YS5hc3VudG8uaW5jbHVkZXMobm90YUFjdHVhbFBhdGgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0xpbmtlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZU1hdGNoZXMrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0RFQlVHXSBcdTAwQTFDT0lOQ0lERU5DSUEgRU5DT05UUkFEQSBlbiBzdHJpbmcgc2ltcGxlIVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gVGFtYmlcdTAwRTluIGJ1c2NhciBlbiBlbCBjb250ZW5pZG8gZGVsIGVubGFjZSB3aWtpXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdpa2lMaW5rTWF0Y2ggPSBtZXRhZGF0YS5hc3VudG8ubWF0Y2goL1xcW1xcWyguKj8pKD86XFx8KC4qPykpP1xcXVxcXS8pO1xuICAgICAgICAgICAgICAgICAgICBpZiAod2lraUxpbmtNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlua1BhdGggPSB3aWtpTGlua01hdGNoWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJbREVCVUddIERldGVjdGFkbyBlbmxhY2Ugd2lraSBlbiBzdHJpbmcgc2ltcGxlLCBwYXRoOlwiLCBsaW5rUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbXBhcmFyIHRhbnRvIGNvbiBlbCBub21icmUgZGUgYXJjaGl2byBjb21vIGNvbiBsYSBydXRhXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRjaGVzUGF0aCA9IGxpbmtQYXRoID09PSBub3RhQWN0dWFsUGF0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoZXNCYXNlbmFtZSA9IGxpbmtQYXRoID09PSBjdXJyZW50Tm90ZS5iYXNlbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJbREVCVUddIFx1MDBCRkNvaW5jaWRlIGNvbiBydXRhIGNvbXBsZXRhP1wiLCBtYXRjaGVzUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltERUJVR10gXHUwMEJGQ29pbmNpZGUgY29uIG5vbWJyZSBkZSBhcmNoaXZvP1wiLCBtYXRjaGVzQmFzZW5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hlc1BhdGggfHwgbWF0Y2hlc0Jhc2VuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNMaW5rZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3NpYmxlTWF0Y2hlcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0RFQlVHXSBcdTAwQTFDT0lOQ0lERU5DSUEgRU5DT05UUkFEQSBlbiB3aWtpbGluayBzaW1wbGUhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChpc0xpbmtlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltERUJVR10gXHUyNzA1IE5vdGEgdmluY3VsYWRhIGVuY29udHJhZGE6XCIsIGZpbGUucGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBQcm9jZXNhciBsYSBub3RhXG4gICAgICAgICAgICAgICAgICAgIGxldCBoaXRzID0gcGFyc2VGbG9hdChtZXRhZGF0YS5oaXRzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKGhpdHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltERUJVR10gaGl0cyBubyBlcyB1biBuXHUwMEZBbWVybywgZXN0YWJsZWNpZW5kbyBhIDBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBoaXRzID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWxpYXMgPSBtZXRhZGF0YS5hbGlhc2VzPy5bMF0gfHwgZmlsZS5iYXNlbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXN0YWRvID0gbWV0YWRhdGEuZXN0YWRvIHx8IFwiU2luIGVzdGFkb1wiO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRpZmVyZW5jaWFEaWFzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGFkYXRhLnB1YmxpY2FjaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltERUJVR10gVGllbmUgZmVjaGEgZGUgcHVibGljYWNpXHUwMEYzbjpcIiwgbWV0YWRhdGEucHVibGljYWNpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHViRGF0ZSA9IHdpbmRvdy5tb21lbnQobWV0YWRhdGEucHVibGljYWNpb24udG9TdHJpbmcoKSwgXCJZWVlZLU1NLUREXCIpLnN0YXJ0T2YoXCJkYXlcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwdWJEYXRlLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpZmVyZW5jaWFEaWFzID0gcHViRGF0ZS5kaWZmKHRvZGF5LCBcImRheXNcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJbREVCVUddIGRpZmVyZW5jaWFEaWFzIGNhbGN1bGFkbzpcIiwgZGlmZXJlbmNpYURpYXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltERUJVR10gTGEgZmVjaGEgZGUgcHVibGljYWNpXHUwMEYzbiBubyBlcyB2XHUwMEUxbGlkYVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgbGlua2VkTm90ZXMucHVzaCh7IFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxpYXMsIFxuICAgICAgICAgICAgICAgICAgICAgICAgaGl0cywgXG4gICAgICAgICAgICAgICAgICAgICAgICBlc3RhZG8sIFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlmZXJlbmNpYURpYXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJbREVCVUddIE5vdGEgYVx1MDBGMWFkaWRhIGFsIHJlc3VsdGFkbyBjb24gYWxpYXM6XCIsIGFsaWFzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltERUJVR10gTm8gZXN0XHUwMEUxIHZpbmN1bGFkYSwgc2Ugb21pdGVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBwcm9jZXNzaW5nRXJyb3JzKys7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW0VSUk9SXSBFcnJvciBwcm9jZXNhbmRvIGFyY2hpdm8gJHtmaWxlLnBhdGh9OmAsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coYFtERUJVR10gUHJvY2VzbyBjb21wbGV0YWRvLiBOb3RhcyB2aW5jdWxhZGFzIGVuY29udHJhZGFzOiAke2xpbmtlZE5vdGVzLmxlbmd0aH1gKTtcbiAgICAgICAgY29uc29sZS5sb2coYFtERUJVR10gRXN0YWRcdTAwRURzdGljYXMgZGUgcHJvY2VzYW1pZW50bzpgKTtcbiAgICAgICAgY29uc29sZS5sb2coYFtERUJVR10gLSBUb3RhbCBhcmNoaXZvcyBwcm9jZXNhZG9zOiAke2FsbEZpbGVzLmxlbmd0aH1gKTtcbiAgICAgICAgY29uc29sZS5sb2coYFtERUJVR10gLSBOb3RhcyB0aXBvIEVudHJlZ2FibGU6ICR7bm90ZXNUeXBlRW50cmVnYWJsZX1gKTtcbiAgICAgICAgY29uc29sZS5sb2coYFtERUJVR10gLSBOb3RhcyBjb24gYXN1bnRvOiAke25vdGVzV2l0aEFzdW50b31gKTtcbiAgICAgICAgY29uc29sZS5sb2coYFtERUJVR10gLSBQb3NpYmxlcyBjb2luY2lkZW5jaWFzOiAke3Bvc3NpYmxlTWF0Y2hlc31gKTtcbiAgICAgICAgY29uc29sZS5sb2coYFtERUJVR10gLSBFcnJvcmVzIGRlIHByb2Nlc2FtaWVudG86ICR7cHJvY2Vzc2luZ0Vycm9yc31gKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChsaW5rZWROb3Rlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0RFQlVHXSBObyBzZSBlbmNvbnRyYXJvbiBub3RhcyB2aW5jdWxhZGFzXCIpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDcmVhciBtZW5zYWplIGRlIGluZm9ybWFjaVx1MDBGM25cbiAgICAgICAgICAgIGNvbnN0IGluZm9FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIGluZm9FbGVtZW50LmlubmVySFRNTCA9IGA8cD5ObyBzZSBlbmNvbnRyYXJvbiBlbnRyZWdhYmxlcyB2aW5jdWxhZG9zIGEgZXN0YSBub3RhLjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48c21hbGw+RXN0YWRcdTAwRURzdGljYXM6ICR7bm90ZXNUeXBlRW50cmVnYWJsZX0gZW50cmVnYWJsZXMgcHJvY2VzYWRvcywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtub3Rlc1dpdGhBc3VudG99IGNvbiBhc3VudG8sICR7cG9zc2libGVNYXRjaGVzfSBwb3NpYmxlcyBjb2luY2lkZW5jaWFzLjwvc21hbGw+PC9wPmA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdGFibGFFbGVtZW50OiBpbmZvRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0b3RhbE5vdGFzOiAwLFxuICAgICAgICAgICAgICAgIHRvdGFsSGl0czogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gT3JkZW5hciBub3RhcyBzZWdcdTAwRkFuIGVsIGNyaXRlcmlvXG4gICAgICAgIGNvbnNvbGUubG9nKFwiW0RFQlVHXSBPcmRlbmFuZG8gbm90YXMgcG9yOlwiLCBzb3J0T3JkZXIpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHNvcnRPcmRlciA9PT0gXCJoaXRzXCIpIHtcbiAgICAgICAgICAgIGxpbmtlZE5vdGVzLnNvcnQoKGEsIGIpID0+IGIuaGl0cyAtIGEuaGl0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzYWZlRGlmZiA9IGQgPT4gZCA9PSBudWxsID8gSW5maW5pdHkgOiBkO1xuICAgICAgICAgICAgbGlua2VkTm90ZXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChhLmVzdGFkbyA9PT0gXCJcdUQ4M0RcdUREMzVcIiAmJiBiLmVzdGFkbyAhPT0gXCJcdUQ4M0RcdUREMzVcIikgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgaWYgKGIuZXN0YWRvID09PSBcIlx1RDgzRFx1REQzNVwiICYmIGEuZXN0YWRvICE9PSBcIlx1RDgzRFx1REQzNVwiKSByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNhZmVEaWZmKGEuZGlmZXJlbmNpYURpYXMpIC0gc2FmZURpZmYoYi5kaWZlcmVuY2lhRGlhcyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coXCJbREVCVUddIENyZWFuZG8gdGFibGEgSFRNTFwiKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWFyIGxhIHRhYmxhIEhUTUxcbiAgICAgICAgY29uc3QgdGFibGFFbGVtZW50ID0gdGhpcy5jcmVhclRhYmxhTm90YXNWaW5jdWxhZGFzKGxpbmtlZE5vdGVzKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRvdGFsSGl0cyA9IGxpbmtlZE5vdGVzLnJlZHVjZSgoc3VtLCBub3RhKSA9PiBzdW0gKyBub3RhLmhpdHMsIDApO1xuICAgICAgICBjb25zb2xlLmxvZyhcIltERUJVR10gVG90YWwgaGl0czpcIiwgdG90YWxIaXRzKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0YWJsYUVsZW1lbnQsXG4gICAgICAgICAgICB0b3RhbE5vdGFzOiBsaW5rZWROb3Rlcy5sZW5ndGgsXG4gICAgICAgICAgICB0b3RhbEhpdHNcbiAgICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW0VSUk9SXSBFcnJvciBlbiBvYnRlbmVyTm90YXNWaW5jdWxhZGFzOlwiLCBlcnJvcik7XG4gICAgICAgIFxuICAgICAgICAvLyBDcmVhciBlbGVtZW50byBkZSBlcnJvclxuICAgICAgICBjb25zdCBlcnJvckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBlcnJvckVsZW1lbnQuaW5uZXJIVE1MID0gYDxwIHN0eWxlPVwiY29sb3I6IHJlZDtcIj5FcnJvciBhbCBwcm9jZXNhciBub3RhcyB2aW5jdWxhZGFzOiAke2Vycm9yLm1lc3NhZ2V9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+UmV2aXNhIGxhIGNvbnNvbGEgcGFyYSBtXHUwMEUxcyBkZXRhbGxlcy48L3A+YDtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7IFxuICAgICAgICAgICAgZXJyb3I6IFwiRXJyb3IgYWwgcHJvY2VzYXIgbm90YXMgdmluY3VsYWRhczogXCIgKyBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgdGFibGFFbGVtZW50OiBlcnJvckVsZW1lbnRcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbi8qKlxuICogQ3JlYSB1bmEgdGFibGEgSFRNTCBjb24gbGFzIG5vdGFzIHZpbmN1bGFkYXNcbiAqIEBwYXJhbSBub3RhcyBBcnJheSBkZSBvYmpldG9zIGNvbiBpbmZvcm1hY2lcdTAwRjNuIGRlIG5vdGFzXG4gKiBAcmV0dXJucyBFbGVtZW50byBIVE1MIGRlIGxhIHRhYmxhXG4gKi9cbmNyZWFyVGFibGFOb3Rhc1ZpbmN1bGFkYXMobm90YXMpIHtcbiAgICAvLyBGdW5jaVx1MDBGM24gYXV4aWxpYXIgcGFyYSBkZXRlcm1pbmFyIGVsIGNvbG9yIHNlZ1x1MDBGQW4gbG9zIGRcdTAwRURhcyBoYXN0YSBwdWJsaWNhY2lcdTAwRjNuXG4gICAgY29uc3QgY29sb3JLZXkgPSAobm90YSkgPT4ge1xuICAgICAgICBpZiAobm90YS5lc3RhZG8gPT09IFwiXHVEODNEXHVERDM1XCIpIHJldHVybiBcImdyYXlcIjtcbiAgICAgICAgaWYgKG5vdGEuZGlmZXJlbmNpYURpYXMgPT0gbnVsbCkgcmV0dXJuIFwiaW5oZXJpdFwiO1xuICAgICAgICBpZiAobm90YS5kaWZlcmVuY2lhRGlhcyA+IDYpIHJldHVybiBcImdyZWVuXCI7XG4gICAgICAgIGlmIChub3RhLmRpZmVyZW5jaWFEaWFzID49IDMpIHJldHVybiBcIiNlNmI4MDBcIjtcbiAgICAgICAgaWYgKG5vdGEuZGlmZXJlbmNpYURpYXMgPj0gMSkgcmV0dXJuIFwib3JhbmdlXCI7XG4gICAgICAgIHJldHVybiBcInJlZFwiO1xuICAgIH07XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgICAgLy8gQ3JlYXIgZWwgZWxlbWVudG8gdGFibGFcbiAgICAgICAgY29uc3QgdGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpO1xuICAgICAgICB0YWJsZS5jbGFzc05hbWUgPSAnZGF0YXZpZXcgdGFibGUnO1xuICAgICAgICB0YWJsZS5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWFyIGVuY2FiZXphZG9cbiAgICAgICAgY29uc3QgdGhlYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aGVhZCcpO1xuICAgICAgICBjb25zdCBoZWFkZXJSb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IFtcIk5vdGFcIiwgXCJIaXRzXCIsIFwiRXN0YWRvXCIsIFwiRFx1MDBFRGFzIGhhc3RhIFB1YmxpY2FjaVx1MDBGM25cIl07XG4gICAgICAgIGhlYWRlcnMuZm9yRWFjaChoZWFkZXIgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aCcpO1xuICAgICAgICAgICAgdGgudGV4dENvbnRlbnQgPSBoZWFkZXI7XG4gICAgICAgICAgICBoZWFkZXJSb3cuYXBwZW5kQ2hpbGQodGgpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHRoZWFkLmFwcGVuZENoaWxkKGhlYWRlclJvdyk7XG4gICAgICAgIHRhYmxlLmFwcGVuZENoaWxkKHRoZWFkKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWFyIGN1ZXJwbyBkZSBsYSB0YWJsYVxuICAgICAgICBjb25zdCB0Ym9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3Rib2R5Jyk7XG4gICAgICAgIFxuICAgICAgICAvLyBBZ3JlZ2FyIGZpbGFzIGRlIGRhdG9zXG4gICAgICAgIG5vdGFzLmZvckVhY2gobm90YSA9PiB7XG4gICAgICAgICAgICBjb25zdCByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDZWxkYSBwYXJhIGVsIGVubGFjZSBkZSBsYSBub3RhIC0gU09MVUNJXHUwMEQzTiBDT1JSRUdJREFcbiAgICAgICAgICAgIGNvbnN0IGNlbGxOb3RhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgICBsaW5rLmNsYXNzTmFtZSA9ICdpbnRlcm5hbC1saW5rJztcbiAgICAgICAgICAgIGxpbmsudGV4dENvbnRlbnQgPSBub3RhLmFsaWFzO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBVc2FyIGRhdGEtaHJlZiBlbiBsdWdhciBkZSBocmVmIGNvbiBvYnNpZGlhbjovL1xuICAgICAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoJ2RhdGEtaHJlZicsIG5vdGEuZmlsZS5wYXRoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gSGFjZXIgY2xpY2FibGUgZWwgZW5sYWNlIGNvbiBlbCBtXHUwMEU5dG9kbyBzZWd1cm8gZGUgT2JzaWRpYW5cbiAgICAgICAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhdGggPSBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWhyZWYnKTtcbiAgICAgICAgICAgICAgICBpZiAocGF0aCkge1xuICAgICAgICAgICAgICAgICAgICBhcHAud29ya3NwYWNlLm9wZW5MaW5rVGV4dChwYXRoLCBcIlwiLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNlbGxOb3RhLmFwcGVuZENoaWxkKGxpbmspO1xuICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKGNlbGxOb3RhKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2VsZGEgcGFyYSBoaXRzXG4gICAgICAgICAgICBjb25zdCBjZWxsSGl0cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgICAgICBjZWxsSGl0cy50ZXh0Q29udGVudCA9IG5vdGEuaGl0cztcbiAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChjZWxsSGl0cyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENlbGRhIHBhcmEgZXN0YWRvXG4gICAgICAgICAgICBjb25zdCBjZWxsRXN0YWRvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgICAgIGNlbGxFc3RhZG8udGV4dENvbnRlbnQgPSBub3RhLmVzdGFkbztcbiAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChjZWxsRXN0YWRvKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2VsZGEgcGFyYSBkXHUwMEVEYXMgaGFzdGEgcHVibGljYWNpXHUwMEYzblxuICAgICAgICAgICAgY29uc3QgY2VsbERpYXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICAgICAgY29uc3QgY29sb3IgPSBjb2xvcktleShub3RhKTtcbiAgICAgICAgICAgIGNvbnN0IGRpYXNUZXh0byA9IChub3RhLmRpZmVyZW5jaWFEaWFzICE9IG51bGwpIFxuICAgICAgICAgICAgICAgID8gYCR7bm90YS5kaWZlcmVuY2lhRGlhc30gZFx1MDBFRGFzYCBcbiAgICAgICAgICAgICAgICA6IFwiTm8gZGVmaW5pZG9cIjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3Qgc3BhbkRpYXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICBzcGFuRGlhcy5zdHlsZS5jb2xvciA9IGNvbG9yO1xuICAgICAgICAgICAgc3BhbkRpYXMuc3R5bGUuZm9udFdlaWdodCA9ICdib2xkJztcbiAgICAgICAgICAgIHNwYW5EaWFzLnRleHRDb250ZW50ID0gZGlhc1RleHRvO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjZWxsRGlhcy5hcHBlbmRDaGlsZChzcGFuRGlhcyk7XG4gICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQoY2VsbERpYXMpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0Ym9keS5hcHBlbmRDaGlsZChyb3cpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFncmVnYXIgZmlsYSBkZSB0b3RhbGVzXG4gICAgICAgIGNvbnN0IHRvdGFsUm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRvdGFsTGFiZWxDZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgY29uc3QgdG90YWxMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0cm9uZycpO1xuICAgICAgICB0b3RhbExhYmVsLnRleHRDb250ZW50ID0gJ1RvdGFsJztcbiAgICAgICAgdG90YWxMYWJlbENlbGwuYXBwZW5kQ2hpbGQodG90YWxMYWJlbCk7XG4gICAgICAgIHRvdGFsUm93LmFwcGVuZENoaWxkKHRvdGFsTGFiZWxDZWxsKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRvdGFsSGl0cyA9IG5vdGFzLnJlZHVjZSgoc3VtLCBub3RhKSA9PiBzdW0gKyBub3RhLmhpdHMsIDApO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgdG90YWxWYWx1ZUNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICBjb25zdCB0b3RhbFZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3Ryb25nJyk7XG4gICAgICAgIHRvdGFsVmFsdWUudGV4dENvbnRlbnQgPSB0b3RhbEhpdHMudG9TdHJpbmcoKTtcbiAgICAgICAgdG90YWxWYWx1ZUNlbGwuYXBwZW5kQ2hpbGQodG90YWxWYWx1ZSk7XG4gICAgICAgIHRvdGFsUm93LmFwcGVuZENoaWxkKHRvdGFsVmFsdWVDZWxsKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENlbGRhcyB2YWNcdTAwRURhcyBwYXJhIGNvbXBsZXRhciBsYSBmaWxhXG4gICAgICAgIHRvdGFsUm93LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJykpOyAvLyBlc3RhZG9cbiAgICAgICAgdG90YWxSb3cuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKSk7IC8vIGRcdTAwRURhc1xuICAgICAgICBcbiAgICAgICAgdGJvZHkuYXBwZW5kQ2hpbGQodG90YWxSb3cpO1xuICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZCh0Ym9keSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGFibGU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIGNyZWFyIHRhYmxhIGRlIG5vdGFzIHZpbmN1bGFkYXM6XCIsIGVycm9yKTtcbiAgICAgICAgY29uc3QgZXJyb3JFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gXCJFcnJvciBhbCBnZW5lcmFyIHRhYmxhOiBcIiArIGVycm9yLm1lc3NhZ2U7XG4gICAgICAgIGVycm9yRWxlbWVudC5zdHlsZS5jb2xvciA9IFwicmVkXCI7XG4gICAgICAgIHJldHVybiBlcnJvckVsZW1lbnQ7XG4gICAgfVxufVxuXG4vLy0tLSBTZWxlY3RvciBkZSBFc3RhZG9cblxuLyoqXG4gKiBHZW5lcmEgdW4gc2VsZWN0b3IgdmlzdWFsIGRlIGVzdGFkbyBwYXJhIGxhIG5vdGFcbiAqIEBwYXJhbSBwYXJhbXMgT2JqZXRvIGNvbiBwYXJcdTAwRTFtZXRyb3MgY29tbyBub3RhQWN0dWFsUGF0aCB5IGVzdGFkb0FjdHVhbCBcbiAqIEByZXR1cm5zIEVsZW1lbnRvIERPTSBjb24gZWwgc2VsZWN0b3IgZGUgZXN0YWRvXG4gKi9cbmFzeW5jIGdlbmVyYXJTZWxlY3RvckVzdGFkbyhwYXJhbXMpIHtcbiAgICB0cnkge1xuICAgICAgICAvLyBFeHRyYWVyIHBhclx1MDBFMW1ldHJvc1xuICAgICAgICBjb25zdCB7IG5vdGFBY3R1YWxQYXRoLCBlc3RhZG9BY3R1YWwgfSA9IHBhcmFtcztcbiAgICAgICAgXG4gICAgICAgIGlmICghbm90YUFjdHVhbFBhdGgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJObyBzZSBwcm9wb3JjaW9uXHUwMEYzIGxhIHJ1dGEgZGUgbGEgbm90YSBhY3R1YWxcIik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gT2J0ZW5lciBlbCBhcmNoaXZvIGFjdHVhbFxuICAgICAgICBjb25zdCBjdXJyZW50RmlsZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgobm90YUFjdHVhbFBhdGgpO1xuICAgICAgICBpZiAoIWN1cnJlbnRGaWxlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTm8gc2UgcHVkbyBlbmNvbnRyYXIgZWwgYXJjaGl2byBhY3R1YWw6XCIsIG5vdGFBY3R1YWxQYXRoKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBDb25maWd1cmFjaVx1MDBGM24gcGFyYSBsb3MgZXN0YWRvc1xuICAgICAgICBjb25zdCBlc3RhZG9zID0gW1xuICAgICAgICAgICAgeyBlbW9qaTogXCJcdUQ4M0RcdURGRTJcIiwgbGFiZWw6IFwiQXZhbnphbmRvXCIsIGNvbG9yOiBcIiM0Y2FmNTBcIiB9LFxuICAgICAgICAgICAgeyBlbW9qaTogXCJcdUQ4M0RcdURGRTFcIiwgbGFiZWw6IFwiRW4gUGF1c2FcIiwgY29sb3I6IFwiI2ZmYzEwN1wiIH0sXG4gICAgICAgICAgICB7IGVtb2ppOiBcIlx1RDgzRFx1REQzNFwiLCBsYWJlbDogXCJEZXRlbmlkYVwiLCBjb2xvcjogXCIjZjQ0MzM2XCIgfSxcbiAgICAgICAgICAgIHsgZW1vamk6IFwiXHVEODNEXHVERDM1XCIsIGxhYmVsOiBcIkFyY2hpdmFkYVwiLCBjb2xvcjogXCIjMjE5NmYzXCIgfVxuICAgICAgICBdO1xuICAgICAgICBcbiAgICAgICAgLy8gRGV0ZXJtaW5hciBlbCBlc3RhZG8gYWN0dWFsIGRlIGxhIG5vdGFcbiAgICAgICAgY29uc3QgZXN0YWRvSW5pY2lhbCA9IGVzdGFkb0FjdHVhbCB8fCBcIlx1RDgzRFx1REZFMVwiOyAvLyBWYWxvciBwb3IgZGVmZWN0b1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXIgZWwgY29tcG9uZW50ZSBwcmluY2lwYWxcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgY29udGFpbmVyLmNsYXNzTmFtZSA9IFwiZXN0YWRvLXNlbGVjdG9yLWNvbnRhaW5lclwiO1xuICAgICAgICBjb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xuICAgICAgICBjb250YWluZXIuc3R5bGUuYWxpZ25JdGVtcyA9IFwiY2VudGVyXCI7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5nYXAgPSBcIjEwcHhcIjtcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLm1heFdpZHRoID0gXCI1MDBweFwiO1xuICAgICAgICBjb250YWluZXIuc3R5bGUubWFyZ2luID0gXCIwIGF1dG9cIjtcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLnBhZGRpbmcgPSBcIjhweFwiO1xuICAgICAgICBjb250YWluZXIuc3R5bGUuYm9yZGVyUmFkaXVzID0gXCI0cHhcIjtcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwidmFyKC0tYmFja2dyb3VuZC1zZWNvbmRhcnktYWx0KVwiO1xuICAgICAgICBcbiAgICAgICAgLy8gRXRpcXVldGEgXCJFc3RhZG86XCJcbiAgICAgICAgY29uc3QgbGFiZWxFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICBsYWJlbEVsLmNsYXNzTmFtZSA9IFwiZXN0YWRvLWxhYmVsXCI7XG4gICAgICAgIGxhYmVsRWwudGV4dENvbnRlbnQgPSBcIkVzdGFkbzpcIjtcbiAgICAgICAgbGFiZWxFbC5zdHlsZS5mb250V2VpZ2h0ID0gXCI1MDBcIjtcbiAgICAgICAgbGFiZWxFbC5zdHlsZS5mb250U2l6ZSA9IFwiMC45ZW1cIjtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGxhYmVsRWwpO1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXIgY29udGVuZWRvciBwYXJhIGxvcyBib3RvbmVzXG4gICAgICAgIGNvbnN0IG9wdGlvbnNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBvcHRpb25zQ29udGFpbmVyLmNsYXNzTmFtZSA9IFwiZXN0YWRvLW9wdGlvbnNcIjtcbiAgICAgICAgb3B0aW9uc0NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gICAgICAgIG9wdGlvbnNDb250YWluZXIuc3R5bGUuZ2FwID0gXCI2cHhcIjtcbiAgICAgICAgb3B0aW9uc0NvbnRhaW5lci5zdHlsZS5mbGV4ID0gXCIxXCI7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChvcHRpb25zQ29udGFpbmVyKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEluZGljYWRvciBkZWwgZXN0YWRvIGFjdHVhbCAoYXBhcmVjZSBhIGxhIGRlcmVjaGEpXG4gICAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZUluZGljYXRvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGN1cnJlbnRTdGF0ZUluZGljYXRvci5jbGFzc05hbWUgPSBcImN1cnJlbnQtc3RhdGUtaW5kaWNhdG9yXCI7XG4gICAgICAgIGN1cnJlbnRTdGF0ZUluZGljYXRvci5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gICAgICAgIGN1cnJlbnRTdGF0ZUluZGljYXRvci5zdHlsZS5hbGlnbkl0ZW1zID0gXCJjZW50ZXJcIjtcbiAgICAgICAgY3VycmVudFN0YXRlSW5kaWNhdG9yLnN0eWxlLm1hcmdpbkxlZnQgPSBcIjhweFwiO1xuICAgICAgICBjdXJyZW50U3RhdGVJbmRpY2F0b3Iuc3R5bGUuZm9udFNpemUgPSBcIjAuODVlbVwiO1xuICAgICAgICBjdXJyZW50U3RhdGVJbmRpY2F0b3Iuc3R5bGUub3BhY2l0eSA9IFwiMC44XCI7XG4gICAgICAgIGN1cnJlbnRTdGF0ZUluZGljYXRvci5zdHlsZS53aGl0ZVNwYWNlID0gXCJub3dyYXBcIjtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGVzdGFkb0luZm8gPSBlc3RhZG9zLmZpbmQoZSA9PiBlLmVtb2ppID09PSBlc3RhZG9JbmljaWFsKSB8fCBlc3RhZG9zWzBdO1xuICAgICAgICBjdXJyZW50U3RhdGVJbmRpY2F0b3IudGV4dENvbnRlbnQgPSBlc3RhZG9JbmZvLmxhYmVsO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY3VycmVudFN0YXRlSW5kaWNhdG9yKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEZ1bmNpXHUwMEYzbiBwYXJhIGFjdHVhbGl6YXIgZWwgZXN0YWRvIHVzYW5kbyBsYSBBUEkgbmF0aXZhIGRlIE9ic2lkaWFuXG4gICAgICAgIGNvbnN0IHVwZGF0ZVN0YXRlID0gYXN5bmMgKG5ld1N0YXRlKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIFV0aWxpemFyIGxhIEFQSSBkZSBPYnNpZGlhbiBwYXJhIG1vZGlmaWNhciBlbCBmcm9udG1hdHRlclxuICAgICAgICAgICAgICAgIGF3YWl0IGFwcC5maWxlTWFuYWdlci5wcm9jZXNzRnJvbnRNYXR0ZXIoY3VycmVudEZpbGUsIGZyb250bWF0dGVyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbnRtYXR0ZXIuZXN0YWRvID0gbmV3U3RhdGU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQWN0dWFsaXphciBsYSB2aXN1YWxpemFjaVx1MDBGM24gZGVsIGVzdGFkbyBhY3R1YWxcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdFc3RhZG9JbmZvID0gZXN0YWRvcy5maW5kKGUgPT4gZS5lbW9qaSA9PT0gbmV3U3RhdGUpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRTdGF0ZUluZGljYXRvci50ZXh0Q29udGVudCA9IG5ld0VzdGFkb0luZm8ubGFiZWw7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQWN0dWFsaXphciBlc3RpbG9zIGRlIGJvdG9uZXNcbiAgICAgICAgICAgICAgICBvcHRpb25zQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCJidXR0b25cIikuZm9yRWFjaChidG4gPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBidG5Fc3RhZG8gPSBidG4uZ2V0QXR0cmlidXRlKFwiZGF0YS1lc3RhZG9cIik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVzdGFkb0RhdGEgPSBlc3RhZG9zLmZpbmQoZSA9PiBlLmVtb2ppID09PSBidG5Fc3RhZG8pO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ0bkVzdGFkbyA9PT0gbmV3U3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ0bi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBlc3RhZG9EYXRhLmNvbG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnRuLnN0eWxlLmNvbG9yID0gXCJ3aGl0ZVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnRuLnN0eWxlLnRyYW5zZm9ybSA9IFwic2NhbGUoMS4xKVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnRuLnN0eWxlLmJveFNoYWRvdyA9IFwiMCAycHggNHB4IHJnYmEoMCwwLDAsMC4yKVwiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnRuLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGAke2VzdGFkb0RhdGEuY29sb3J9MjJgO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnRuLnN0eWxlLmNvbG9yID0gZXN0YWRvRGF0YS5jb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ0bi5zdHlsZS50cmFuc2Zvcm0gPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ0bi5zdHlsZS5ib3hTaGFkb3cgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIE1vc3RyYXIgbm90aWZpY2FjaVx1MDBGM24gZGUgXHUwMEU5eGl0b1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYEVzdGFkbyBjYW1iaWFkbyBhICR7bmV3RXN0YWRvSW5mby5sYWJlbH1gKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIGFjdHVhbGl6YXIgZWwgZXN0YWRvOlwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIkVycm9yIGFsIGFjdHVhbGl6YXIgZWwgZXN0YWRvLiBDb25zdWx0YSBsYSBjb25zb2xhIHBhcmEgbVx1MDBFMXMgZGV0YWxsZXMuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXIgYm90b25lcyBwYXJhIGNhZGEgZXN0YWRvXG4gICAgICAgIGVzdGFkb3MuZm9yRWFjaChlc3RhZG8gPT4ge1xuICAgICAgICAgICAgY29uc3QgYm90b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICAgICAgYm90b24uY2xhc3NOYW1lID0gXCJlc3RhZG8tYnRuXCI7XG4gICAgICAgICAgICBib3Rvbi5zZXRBdHRyaWJ1dGUoXCJkYXRhLWVzdGFkb1wiLCBlc3RhZG8uZW1vamkpO1xuICAgICAgICAgICAgYm90b24uc2V0QXR0cmlidXRlKFwidGl0bGVcIiwgZXN0YWRvLmxhYmVsKTtcbiAgICAgICAgICAgIGJvdG9uLnN0eWxlLmZsZXggPSBcIjFcIjtcbiAgICAgICAgICAgIGJvdG9uLnN0eWxlLmJvcmRlciA9IFwibm9uZVwiO1xuICAgICAgICAgICAgYm90b24uc3R5bGUuYm9yZGVyUmFkaXVzID0gXCI0cHhcIjtcbiAgICAgICAgICAgIGJvdG9uLnN0eWxlLnBhZGRpbmcgPSBcIjZweCAwXCI7XG4gICAgICAgICAgICBib3Rvbi5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgICAgIGJvdG9uLnN0eWxlLnRyYW5zaXRpb24gPSBcImFsbCAwLjJzIGVhc2VcIjtcbiAgICAgICAgICAgIGJvdG9uLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgICAgICAgICAgIGJvdG9uLnN0eWxlLmFsaWduSXRlbXMgPSBcImNlbnRlclwiO1xuICAgICAgICAgICAgYm90b24uc3R5bGUuanVzdGlmeUNvbnRlbnQgPSBcImNlbnRlclwiO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBFc3RhYmxlY2VyIGNvbG9yIHNlZ1x1MDBGQW4gZXN0YWRvIGFjdHVhbFxuICAgICAgICAgICAgaWYgKGVzdGFkb0luaWNpYWwgPT09IGVzdGFkby5lbW9qaSkge1xuICAgICAgICAgICAgICAgIGJvdG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGVzdGFkby5jb2xvcjtcbiAgICAgICAgICAgICAgICBib3Rvbi5zdHlsZS5jb2xvciA9IFwid2hpdGVcIjtcbiAgICAgICAgICAgICAgICBib3Rvbi5zdHlsZS50cmFuc2Zvcm0gPSBcInNjYWxlKDEuMSlcIjtcbiAgICAgICAgICAgICAgICBib3Rvbi5zdHlsZS5ib3hTaGFkb3cgPSBcIjAgMnB4IDRweCByZ2JhKDAsMCwwLDAuMilcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYm90b24uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gYCR7ZXN0YWRvLmNvbG9yfTIyYDtcbiAgICAgICAgICAgICAgICBib3Rvbi5zdHlsZS5jb2xvciA9IGVzdGFkby5jb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZW1vamlTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgICAgICBlbW9qaVNwYW4udGV4dENvbnRlbnQgPSBlc3RhZG8uZW1vamk7XG4gICAgICAgICAgICBlbW9qaVNwYW4uc3R5bGUuZm9udFNpemUgPSBcIjE4cHhcIjtcbiAgICAgICAgICAgIGJvdG9uLmFwcGVuZENoaWxkKGVtb2ppU3Bhbik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEV2ZW50b3MgZGUgcmF0XHUwMEYzblxuICAgICAgICAgICAgYm90b24uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVzdGFkb0luaWNpYWwgIT09IGVzdGFkby5lbW9qaSkge1xuICAgICAgICAgICAgICAgICAgICBib3Rvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBgJHtlc3RhZG8uY29sb3J9NDRgO1xuICAgICAgICAgICAgICAgICAgICBib3Rvbi5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZVkoLTJweClcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgYm90b24uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXN0YWRvSW5pY2lhbCAhPT0gZXN0YWRvLmVtb2ppKSB7XG4gICAgICAgICAgICAgICAgICAgIGJvdG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGAke2VzdGFkby5jb2xvcn0yMmA7XG4gICAgICAgICAgICAgICAgICAgIGJvdG9uLnN0eWxlLnRyYW5zZm9ybSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBFdmVudG8gZGUgY2xpY1xuICAgICAgICAgICAgYm90b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICB1cGRhdGVTdGF0ZShlc3RhZG8uZW1vamkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIG9wdGlvbnNDb250YWluZXIuYXBwZW5kQ2hpbGQoYm90b24pO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGVuIGdlbmVyYXJTZWxlY3RvckVzdGFkbzpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cblxuLy8gLS0gQXJib2wgZGUgcHJveWVjdG9zIEdURFxuXG5cbi8qKlxuICogR2VuZXJhIHVuIFx1MDBFMXJib2wgamVyXHUwMEUxcnF1aWNvIHZpc3VhbCBkZSBwcm95ZWN0b3Mgb3JnYW5pemFkb3MgcG9yIFx1MDBDMXJlYXMgZGUgVmlkYSB5IFx1MDBDMXJlYXMgZGUgSW50ZXJcdTAwRTlzXG4gKiBAcGFyYW0ge09iamVjdH0gZHYgLSBFbCBvYmpldG8gZGF0YXZpZXcgcGFyYSBhY2NlZGVyIGEgc3VzIGZ1bmNpb25lc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPcGNpb25lcyBkZSBjb25maWd1cmFjaVx1MDBGM24gKHRpcG8gZGUgcHJveWVjdG9zLCBmaWx0cm9zIGFkaWNpb25hbGVzKVxuICogQHJldHVybnMge0hUTUxFbGVtZW50fSAtIEVsZW1lbnRvIERPTSBjb24gbGEgZXN0cnVjdHVyYSBkZSBcdTAwRTFyYm9sXG4gKi9cbmFzeW5jIGdlbmVyYXJBcmJvbFByb3llY3Rvcyhkdiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gT3BjaW9uZXMgcG9yIGRlZmVjdG9cbiAgICAgICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgICAgICAgdGlwb1Byb3llY3RvOiBvcHRpb25zLnRpcG9Qcm95ZWN0byB8fCBcIlBHVERcIiwgLy8gUEdURCBvIFBRXG4gICAgICAgICAgICBlc3RhZG9GaWx0cm86IG9wdGlvbnMuZXN0YWRvRmlsdHJvIHx8IFwiXHVEODNEXHVERkUyXCIsICAgLy8gUG9yIGRlZmVjdG8gc29sbyBtdWVzdHJhIGFjdGl2b3NcbiAgICAgICAgICAgIHNvbG9Nb3N0cmFyQ29uUGVuZGllbnRlczogb3B0aW9ucy5zb2xvTW9zdHJhckNvblBlbmRpZW50ZXMgfHwgZmFsc2UsXG4gICAgICAgICAgICBleHBhbmRpclBvckRlZmVjdG86IG9wdGlvbnMuZXhwYW5kaXJQb3JEZWZlY3RvIHx8IGZhbHNlLFxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gRGV0ZXJtaW5hciBsYSBjYXJwZXRhIGNvcnJlY3RhIGJhc2FkYSBlbiBlbCB0aXBvIGRlIHByb3llY3RvXG4gICAgICAgIGNvbnN0IGNhcnBldGFLZXkgPSBjb25maWcudGlwb1Byb3llY3RvID09PSBcIlBHVERcIiA/IFwiZm9sZGVyX1Byb3llY3Rvc0dURFwiIDogXCJmb2xkZXJfUHJveWVjdG9zUVwiO1xuICAgICAgICBjb25zdCBjYXJwZXRhID0gdGhpcy5wbHVnaW4uc2V0dGluZ3NbY2FycGV0YUtleV07XG4gICAgICAgIFxuICAgICAgICBpZiAoIWNhcnBldGEpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYENhcnBldGEgcGFyYSAke2NvbmZpZy50aXBvUHJveWVjdG99IG5vIGNvbmZpZ3VyYWRhYCk7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBlcnJvci5jbGFzc05hbWUgPSBcInRyZWUtZXJyb3JcIjtcbiAgICAgICAgICAgIGVycm9yLnRleHRDb250ZW50ID0gYEVycm9yOiBDYXJwZXRhIHBhcmEgJHtjb25maWcudGlwb1Byb3llY3RvfSBubyBjb25maWd1cmFkYWA7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIENyZWFyIGVsIGNvbnRlbmVkb3IgcHJpbmNpcGFsXG4gICAgICAgIGNvbnN0IGNvbnRlbmVkb3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjb250ZW5lZG9yLmNsYXNzTmFtZSA9IFwicHJveWVjdG9zLXRyZWUtY29udGFpbmVyXCI7XG4gICAgICAgIFxuICAgICAgICAvLyBDcmVhciBlbCBlbmNhYmV6YWRvXG4gICAgICAgIGNvbnN0IGVuY2FiZXphZG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDNcIik7XG4gICAgICAgIGVuY2FiZXphZG8uY2xhc3NOYW1lID0gXCJwcm95ZWN0b3MtdHJlZS10aXRsZVwiO1xuICAgICAgICBcbiAgICAgICAgLy8gMS4gT2J0ZW5lciB0b2RvcyBsb3MgcHJveWVjdG9zIGRlbCB0aXBvIHNvbGljaXRhZG9cbiAgICAgICAgY29uc29sZS5sb2coYEJ1c2NhbmRvIHByb3llY3RvcyBlbjogJHtjYXJwZXRhfWApO1xuICAgICAgICBsZXQgcHJveWVjdG9zID0gZHYucGFnZXMoKVxuICAgICAgICAgICAgLmZpbHRlcihwID0+IHAuZmlsZS5wYXRoLnN0YXJ0c1dpdGgoY2FycGV0YSkgJiYgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIXAuZmlsZS5wYXRoLmluY2x1ZGVzKFwiL1BsYW50aWxsYXMvXCIpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIXAuZmlsZS5wYXRoLmluY2x1ZGVzKFwiL0FyY2hpdm8vXCIpKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEd1YXJkYXIgZWwgdG90YWwgYW50ZXMgZGUgZmlsdHJhciAgICAgICAgICAgICAgICAgXG4gICAgICAgIGNvbnN0IHRvdGFsUHJveWVjdG9zID0gcHJveWVjdG9zLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgLy8gR3VhcmRhciB0b2RvcyBsb3MgcHJveWVjdG9zIGVuIHVuYSB2YXJpYWJsZSBwYXJhIHBvZGVyIGZpbHRyYXIgcGVybyBtYW50ZW5lciBsYSBlc3RydWN0dXJhXG4gICAgICAgIGNvbnN0IHRvZG9zTG9zUHJveWVjdG9zID0gWy4uLnByb3llY3Rvc107XG4gICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIC8vIEFwbGljYXIgZmlsdHJvIGRlIGVzdGFkbyBzaSBlc3RcdTAwRTEgZXNwZWNpZmljYWRvIHkgbm8gZXMgXCJ0b2Rvc1wiXG4gICAgICAgIGxldCBwcm95ZWN0b3NGaWx0cmFkb3MgPSBwcm95ZWN0b3M7XG4gICAgICAgIGlmIChjb25maWcuZXN0YWRvRmlsdHJvICYmIGNvbmZpZy5lc3RhZG9GaWx0cm8gIT09IFwiXCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBBcGxpY2FuZG8gZmlsdHJvIGRlIGVzdGFkbzogJHtjb25maWcuZXN0YWRvRmlsdHJvfWApO1xuICAgICAgICAgICAgcHJveWVjdG9zRmlsdHJhZG9zID0gcHJveWVjdG9zLmZpbHRlcihwID0+IHAuZXN0YWRvID09PSBjb25maWcuZXN0YWRvRmlsdHJvKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQWN0dWFsaXphciBlbCBlbmNhYmV6YWRvIGNvbiBsYSBjdWVudGEgdG90YWxcbiAgICAgICAgZW5jYWJlemFkby50ZXh0Q29udGVudCA9IGBFc3RydWN0dXJhIGRlIFByb3llY3RvcyAke2NvbmZpZy50aXBvUHJveWVjdG99ICR7Y29uZmlnLmVzdGFkb0ZpbHRybyA/IGAoJHtwcm95ZWN0b3NGaWx0cmFkb3MubGVuZ3RofS8ke3RvdGFsUHJveWVjdG9zfSlgIDogJyd9YDtcbiAgICAgICAgY29udGVuZWRvci5hcHBlbmRDaGlsZChlbmNhYmV6YWRvKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFNpIG5vIGhheSBwcm95ZWN0b3MgZGVzcHVcdTAwRTlzIGRlIGZpbHRyYXJcbiAgICAgICAgaWYgKHByb3llY3Rvc0ZpbHRyYWRvcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG1lbnNhamUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgICAgIG1lbnNhamUuY2xhc3NOYW1lID0gXCJwcm95ZWN0b3MtdHJlZS1lbXB0eVwiO1xuICAgICAgICAgICAgbWVuc2FqZS50ZXh0Q29udGVudCA9IGBObyBzZSBlbmNvbnRyYXJvbiBwcm95ZWN0b3MgJHtjb25maWcudGlwb1Byb3llY3RvfSR7Y29uZmlnLmVzdGFkb0ZpbHRybyA/IGAgY29uIGVzdGFkbyAke2NvbmZpZy5lc3RhZG9GaWx0cm99YCA6IFwiXCJ9YDtcbiAgICAgICAgICAgIGNvbnRlbmVkb3IuYXBwZW5kQ2hpbGQobWVuc2FqZSk7XG4gICAgICAgICAgICByZXR1cm4gY29udGVuZWRvcjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coYFByb3llY3RvcyBlbmNvbnRyYWRvczogJHtwcm95ZWN0b3NGaWx0cmFkb3MubGVuZ3RofWApO1xuICAgICAgICBcbiAgICAgICAgLy8gMi4gQ29uc3RydWlyIGxhIGVzdHJ1Y3R1cmEgamVyXHUwMEUxcnF1aWNhIHBhcmEgc2FiZXIgcXVcdTAwRTkgcHJveWVjdG9zIHNlIGRlYmVuIG1vc3RyYXJcbiAgICAgICAgY29uc3QgcHJveWVjdG9zQU1vc3RyYXIgPSB0aGlzLmRldGVybWluYXJQcm95ZWN0b3NBTW9zdHJhcihwcm95ZWN0b3NGaWx0cmFkb3MsIHRvZG9zTG9zUHJveWVjdG9zLCBjb25maWcpO1xuICAgICAgICBcbiAgICAgICAgLy8gMy4gQ29uc3RydWlyIGxhIGVzdHJ1Y3R1cmEgamVyXHUwMEUxcnF1aWNhIGRlIHByb3llY3RvcyBjb24gbG9zIHF1ZSBzZSB2YW4gYSBtb3N0cmFyXG4gICAgICAgIGNvbnN0IHsgYXJlYXNWaWRhLCBwcm95ZWN0b3NTaW5BViB9ID0gdGhpcy5jb25zdHJ1aXJFc3RydWN0dXJhUHJveWVjdG9zKHByb3llY3Rvc0FNb3N0cmFyLCBkdik7XG4gICAgICAgIFxuICAgICAgICAvLyA0LiBSZW5kZXJpemFyIGVsIFx1MDBFMXJib2wgZGUgXHUwMEMxcmVhcyBkZSBWaWRhXG4gICAgICAgIGNvbnN0IGFyYm9sQVYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBhcmJvbEFWLmNsYXNzTmFtZSA9IFwicHJveWVjdG9zLWFyZWFzLWNvbnRhaW5lclwiO1xuICAgICAgICBcbiAgICAgICAgLy8gT3JkZW5hciBsYXMgXHUwMEMxcmVhcyBkZSBWaWRhIHBvciBub21icmVcbiAgICAgICAgY29uc3QgYXJlYXNWaWRhT3JkZW5hZGFzID0gWy4uLmFyZWFzVmlkYS5lbnRyaWVzKCldXG4gICAgICAgICAgICAuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vbWJyZUEgPSBhWzFdLm5vbWJyZSB8fCBhWzBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vbWJyZUIgPSBiWzFdLm5vbWJyZSB8fCBiWzBdO1xuICAgICAgICAgICAgICAgIHJldHVybiBub21icmVBLmxvY2FsZUNvbXBhcmUobm9tYnJlQik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFJlbmRlcml6YXIgY2FkYSBcdTAwQzFyZWEgZGUgVmlkYSB5IHN1IGNvbnRlbmlkb1xuICAgICAgICBmb3IgKGNvbnN0IFthdlBhdGgsIGF2RGF0YV0gb2YgYXJlYXNWaWRhT3JkZW5hZGFzKSB7XG4gICAgICAgICAgICBjb25zdCBzZWNjaW9uQVYgPSB0aGlzLnJlbmRlcml6YXJBcmVhVmlkYShhdlBhdGgsIGF2RGF0YSwgZHYsIGNvbmZpZyk7XG4gICAgICAgICAgICBhcmJvbEFWLmFwcGVuZENoaWxkKHNlY2Npb25BVik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIDUuIFJlbmRlcml6YXIgcHJveWVjdG9zIHNpbiBcdTAwQzFyZWEgZGUgVmlkYSBzaSBleGlzdGVuXG4gICAgICAgIGlmIChwcm95ZWN0b3NTaW5BVi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBzZWNjaW9uU2luQVYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgc2VjY2lvblNpbkFWLmNsYXNzTmFtZSA9IFwicHJveWVjdG9zLXNpbi1hdlwiO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCB0aXR1bG9TaW5BViA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICB0aXR1bG9TaW5BVi5jbGFzc05hbWUgPSBcInByb3llY3Rvcy1hcmVhLWhlYWRlciBzaW4tYXJlYVwiO1xuICAgICAgICAgICAgdGl0dWxvU2luQVYuc2V0QXR0cmlidXRlKFwiZGF0YS10b2dnbGUtaWRcIiwgYHNpbmF2LWdsb2JhbGApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBBXHUwMEYxYWRpciBjb250YWRvciBkZSBwcm95ZWN0b3Mgc2luIEFWXG4gICAgICAgICAgICB0aXR1bG9TaW5BVi5pbm5lckhUTUwgPSBgPHNwYW4gY2xhc3M9XCJ0b2dnbGUtaWNvblwiPlx1MjVCQTwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJhcmVhLXRpcG9cIj5TaW4gXHUwMEMxcmVhIGRlIFZpZGE8L3NwYW4+IDxzcGFuIGNsYXNzPVwicHJveWVjdG9zLWNvbnRhZG9yXCI+KCR7cHJveWVjdG9zU2luQVYubGVuZ3RofSk8L3NwYW4+YDtcbiAgICAgICAgICAgIHNlY2Npb25TaW5BVi5hcHBlbmRDaGlsZCh0aXR1bG9TaW5BVik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbmlkb1NpbkFWID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIGNvbnRlbmlkb1NpbkFWLmNsYXNzTmFtZSA9IFwicHJveWVjdG9zLWFyZWEtY29udGVudFwiO1xuICAgICAgICAgICAgY29udGVuaWRvU2luQVYuaWQgPSBgY29udGVudC0ke3RpdHVsb1NpbkFWLmdldEF0dHJpYnV0ZShcImRhdGEtdG9nZ2xlLWlkXCIpfWA7XG4gICAgICAgICAgICBjb250ZW5pZG9TaW5BVi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7IC8vIEluaWNpYWxtZW50ZSBjZXJyYWRvXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFncnVwYXIgcHJveWVjdG9zIHNpbiBBViBwb3IgXHUwMEMxcmVhIGRlIEludGVyXHUwMEU5c1xuICAgICAgICAgICAgY29uc3QgYXJlYXNQb3JBSSA9IHRoaXMuYWdydXBhclByb3llY3Rvc1BvckFJKHByb3llY3Rvc1NpbkFWLCBkdik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFJlbmRlcml6YXIgY2FkYSBncnVwbyBkZSBBSVxuICAgICAgICAgICAgZm9yIChjb25zdCBbYWlQYXRoLCBhaURhdGFdIG9mIGFyZWFzUG9yQUkuZW50cmllcygpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjY2lvbkFJID0gdGhpcy5yZW5kZXJpemFyQXJlYUludGVyZXMoYWlQYXRoLCBhaURhdGEsIGR2LCBjb25maWcpO1xuICAgICAgICAgICAgICAgIGNvbnRlbmlkb1NpbkFWLmFwcGVuZENoaWxkKHNlY2Npb25BSSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFByb3llY3RvcyBzaW4gQUkgZGVudHJvIGRlIGxvcyBzaW4gQVZcbiAgICAgICAgICAgIGNvbnN0IHByb3llY3Rvc1NpbkFJID0gcHJveWVjdG9zU2luQVYuZmlsdGVyKHAgPT4gXG4gICAgICAgICAgICAgICAgIXAuYXJlYUludGVyZXMgfHwgXG4gICAgICAgICAgICAgICAgKEFycmF5LmlzQXJyYXkocC5hcmVhSW50ZXJlcykgJiYgcC5hcmVhSW50ZXJlcy5sZW5ndGggPT09IDApIHx8XG4gICAgICAgICAgICAgICAgKHR5cGVvZiBwLmFyZWFJbnRlcmVzID09PSAnc3RyaW5nJyAmJiBwLmFyZWFJbnRlcmVzLnRyaW0oKSA9PT0gJycpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAocHJveWVjdG9zU2luQUkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlY2Npb25TaW5BSSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgc2VjY2lvblNpbkFJLmNsYXNzTmFtZSA9IFwicHJveWVjdG9zLXNpbi1haVwiO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IHRpdHVsb1NpbkFJID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICB0aXR1bG9TaW5BSS5jbGFzc05hbWUgPSBcInByb3llY3Rvcy1haS1oZWFkZXIgc2luLWFpXCI7XG4gICAgICAgICAgICAgICAgdGl0dWxvU2luQUkuc2V0QXR0cmlidXRlKFwiZGF0YS10b2dnbGUtaWRcIiwgYHNpbmFpLWdsb2JhbGApO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEFcdTAwRjFhZGlyIGNvbnRhZG9yIGFsIHRcdTAwRUR0dWxvXG4gICAgICAgICAgICAgICAgdGl0dWxvU2luQUkuaW5uZXJIVE1MID0gYDxzcGFuIGNsYXNzPVwidG9nZ2xlLWljb25cIj5cdTI1QkE8L3NwYW4+IDxzcGFuIGNsYXNzPVwiYWktdGlwb1wiPlNpbiBcdTAwQzFyZWEgZGUgSW50ZXJcdTAwRTlzPC9zcGFuPiA8c3BhbiBjbGFzcz1cInByb3llY3Rvcy1jb250YWRvclwiPigke3Byb3llY3Rvc1NpbkFJLmxlbmd0aH0pPC9zcGFuPmA7XG4gICAgICAgICAgICAgICAgc2VjY2lvblNpbkFJLmFwcGVuZENoaWxkKHRpdHVsb1NpbkFJKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW5pZG9TaW5BSSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgY29udGVuaWRvU2luQUkuY2xhc3NOYW1lID0gXCJwcm95ZWN0b3MtYWktY29udGVudFwiO1xuICAgICAgICAgICAgICAgIGNvbnRlbmlkb1NpbkFJLmlkID0gYGNvbnRlbnQtJHt0aXR1bG9TaW5BSS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRvZ2dsZS1pZFwiKX1gO1xuICAgICAgICAgICAgICAgIGNvbnRlbmlkb1NpbkFJLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjsgLy8gSW5pY2lhbG1lbnRlIGNlcnJhZG9cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBSZW5kZXJpemFyIGNhZGEgcHJveWVjdG8gc2luIEFJXG4gICAgICAgICAgICAgICAgY29uc3QgbGlzdGFQcm95ZWN0b3MgPSB0aGlzLnJlbmRlcml6YXJMaXN0YVByb3llY3Rvcyhwcm95ZWN0b3NTaW5BSSwgZHYsIGNvbmZpZyk7XG4gICAgICAgICAgICAgICAgY29udGVuaWRvU2luQUkuYXBwZW5kQ2hpbGQobGlzdGFQcm95ZWN0b3MpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHNlY2Npb25TaW5BSS5hcHBlbmRDaGlsZChjb250ZW5pZG9TaW5BSSk7XG4gICAgICAgICAgICAgICAgY29udGVuaWRvU2luQVYuYXBwZW5kQ2hpbGQoc2VjY2lvblNpbkFJKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBBXHUwMEYxYWRpciBsaXN0ZW5lciBwYXJhIHRvZ2dsZVxuICAgICAgICAgICAgICAgIHRpdHVsb1NpbkFJLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldC50YWdOYW1lICE9PSAnQScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlU2VjY2lvbkJ5SWQodGl0dWxvU2luQUkuZ2V0QXR0cmlidXRlKFwiZGF0YS10b2dnbGUtaWRcIikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNlY2Npb25TaW5BVi5hcHBlbmRDaGlsZChjb250ZW5pZG9TaW5BVik7XG4gICAgICAgICAgICBhcmJvbEFWLmFwcGVuZENoaWxkKHNlY2Npb25TaW5BVik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFncmVnYXIgbGlzdGVuZXIgcGFyYSBjb2xhcHNhci9leHBhbmRpclxuICAgICAgICAgICAgdGl0dWxvU2luQVYuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQudGFnTmFtZSAhPT0gJ0EnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlU2VjY2lvbkJ5SWQodGl0dWxvU2luQVYuZ2V0QXR0cmlidXRlKFwiZGF0YS10b2dnbGUtaWRcIikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb250ZW5lZG9yLmFwcGVuZENoaWxkKGFyYm9sQVYpO1xuICAgICAgICBcbiAgICAgICAgLy8gU2kgc2UgZXNwZWNpZmljXHUwMEYzIGV4cGFuZGlyIHBvciBkZWZlY3RvXG4gICAgICAgIGlmIChvcHRpb25zLmV4cGFuZGlyUG9yRGVmZWN0bykge1xuICAgICAgICAgICAgdGhpcy5leHBhbmRpclRvZG8oY29udGVuZWRvcik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBjb250ZW5lZG9yO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBlbiBnZW5lcmFyQXJib2xQcm95ZWN0b3M6XCIsIGVycm9yKTtcbiAgICAgICAgY29uc3QgZXJyb3JFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgZXJyb3JFbGVtZW50LmNsYXNzTmFtZSA9IFwicHJveWVjdG9zLXRyZWUtZXJyb3JcIjtcbiAgICAgICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gYEVycm9yIGFsIGdlbmVyYXIgXHUwMEUxcmJvbCBkZSBwcm95ZWN0b3M6ICR7ZXJyb3IubWVzc2FnZX1gO1xuICAgICAgICByZXR1cm4gZXJyb3JFbGVtZW50O1xuICAgIH1cbn1cblxuLyoqXG4gKiBDb25zdHJ1eWUgbGEgZXN0cnVjdHVyYSBqZXJcdTAwRTFycXVpY2EgZGUgcHJveWVjdG9zIG9yZ2FuaXphZG9zIHBvciBcdTAwQzFyZWFzIGRlIFZpZGFcbiAqIEBwYXJhbSB7QXJyYXl9IHByb3llY3RvcyAtIEFycmF5IGRlIHByb3llY3RvcyBvYnRlbmlkb3MgZGUgZGF0YXZpZXdcbiAqIEBwYXJhbSB7T2JqZWN0fSBkdiAtIE9iamV0byBkYXRhdmlld1xuICogQHJldHVybnMge09iamVjdH0gLSBFc3RydWN0dXJhIG9yZ2FuaXphZGEgcG9yIFx1MDBFMXJlYXNcbiAqL1xuY29uc3RydWlyRXN0cnVjdHVyYVByb3llY3Rvcyhwcm95ZWN0b3MsIGR2KSB7XG4gICAgY29uc3QgYXJlYXNWaWRhID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IHByb3llY3Rvc1NpbkFWID0gW107XG4gICAgXG4gICAgLy8gUHJvY2VzYXIgY2FkYSBwcm95ZWN0byBwYXJhIG9yZ2FuaXphcmxvIGplclx1MDBFMXJxdWljYW1lbnRlXG4gICAgZm9yIChjb25zdCBwcm95ZWN0byBvZiBwcm95ZWN0b3MpIHtcbiAgICAgICAgbGV0IGFzaWduYWRvID0gZmFsc2U7XG4gICAgICAgIFxuICAgICAgICAvLyBEZXRlcm1pbmFyIGEgcXVcdTAwRTkgXHUwMEUxcmVhIGRlIHZpZGEgcGVydGVuZWNlXG4gICAgICAgIGlmIChwcm95ZWN0by5hcmVhVmlkYSkge1xuICAgICAgICAgICAgbGV0IGFyZWFWaWRhUGF0aDtcbiAgICAgICAgICAgIGxldCBhcmVhVmlkYU5vbWJyZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gTWFuZWphciBkaWZlcmVudGVzIGZvcm1hdG9zIGRlIGFyZWFWaWRhXG4gICAgICAgICAgICBpZiAodHlwZW9mIHByb3llY3RvLmFyZWFWaWRhID09PSAnb2JqZWN0JyAmJiBwcm95ZWN0by5hcmVhVmlkYS5wYXRoKSB7XG4gICAgICAgICAgICAgICAgYXJlYVZpZGFQYXRoID0gcHJveWVjdG8uYXJlYVZpZGEucGF0aDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdlBhZ2UgPSBkdi5wYWdlKGFyZWFWaWRhUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIGFyZWFWaWRhTm9tYnJlID0gYXZQYWdlLnRpdHVsbyB8fCBhdlBhZ2UuZmlsZS5uYW1lO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJlYVZpZGFOb21icmUgPSBcIlx1MDBDMXJlYSBkZSBWaWRhIFwiICsgYXJlYVZpZGFQYXRoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHByb3llY3RvLmFyZWFWaWRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIC8vIE1hbmVqYXIgZm9ybWF0byBkZSBcdTAwRTFyZWEgZGUgdmlkYSBjb21vIHN0cmluZywgcG9kclx1MDBFRGEgc2VyIHVuIHdpa2lsaW5rXG4gICAgICAgICAgICAgICAgY29uc3Qgd2lraU1hdGNoID0gcHJveWVjdG8uYXJlYVZpZGEubWF0Y2goL1xcW1xcWyguKj8pKD86XFx8KC4qPykpP1xcXVxcXS8pO1xuICAgICAgICAgICAgICAgIGlmICh3aWtpTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJlYVZpZGFQYXRoID0gd2lraU1hdGNoWzFdO1xuICAgICAgICAgICAgICAgICAgICBhcmVhVmlkYU5vbWJyZSA9IHdpa2lNYXRjaFsyXSB8fCB3aWtpTWF0Y2hbMV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcm95ZWN0by5hcmVhVmlkYSAhPT0gXCJObyBlcyBkZSBuaW5nXHUwMEZBbiBBcmVhIGRlIFZpZGFcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBCdXNjYXIgbGEgcFx1MDBFMWdpbmEgcG9yIG5vbWJyZVxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXZQYWdlcyA9IGR2LnBhZ2VzKCcjXCInICsgcHJveWVjdG8uYXJlYVZpZGEgKyAnXCInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdlBhZ2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmVhVmlkYVBhdGggPSBhdlBhZ2VzWzBdLmZpbGUucGF0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmVhVmlkYU5vbWJyZSA9IHByb3llY3RvLmFyZWFWaWRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmVhVmlkYVBhdGggPSBwcm95ZWN0by5hcmVhVmlkYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmVhVmlkYU5vbWJyZSA9IHByb3llY3RvLmFyZWFWaWRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmVhVmlkYVBhdGggPSBwcm95ZWN0by5hcmVhVmlkYTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZWFWaWRhTm9tYnJlID0gcHJveWVjdG8uYXJlYVZpZGE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFNpIGhheSB1biBcdTAwRTFyZWEgZGUgdmlkYSB2XHUwMEUxbGlkYSBxdWUgbm8gc2VhIFwiTm8gZXMgZGUgbmluZ1x1MDBGQW4gQXJlYSBkZSBWaWRhXCJcbiAgICAgICAgICAgIGlmIChhcmVhVmlkYVBhdGggJiYgYXJlYVZpZGFQYXRoICE9PSBcIk5vIGVzIGRlIG5pbmdcdTAwRkFuIEFyZWEgZGUgVmlkYVwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFhcmVhc1ZpZGEuaGFzKGFyZWFWaWRhUGF0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJlYXNWaWRhLnNldChhcmVhVmlkYVBhdGgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vbWJyZTogYXJlYVZpZGFOb21icmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm95ZWN0b3M6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJveWVjdG9zUG9yQUk6IG5ldyBNYXAoKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQWdyZWdhciBlbCBwcm95ZWN0byBhbCBcdTAwRTFyZWEgY29ycmVzcG9uZGllbnRlXG4gICAgICAgICAgICAgICAgYXJlYXNWaWRhLmdldChhcmVhVmlkYVBhdGgpLnByb3llY3Rvcy5wdXNoKHByb3llY3RvKTtcbiAgICAgICAgICAgICAgICBhc2lnbmFkbyA9IHRydWU7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gT3JnYW5pemFyIHBvciBcdTAwQzFyZWEgZGUgSW50ZXJcdTAwRTlzIGRlbnRybyBkZWwgXHUwMEMxcmVhIGRlIFZpZGFcbiAgICAgICAgICAgICAgICBpZiAocHJveWVjdG8uYXJlYUludGVyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJlYXNJbnRlcmVzID0gQXJyYXkuaXNBcnJheShwcm95ZWN0by5hcmVhSW50ZXJlcykgPyBcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3llY3RvLmFyZWFJbnRlcmVzIDogW3Byb3llY3RvLmFyZWFJbnRlcmVzXTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGxldCBhc2lnbmFkb0FJID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGFpIG9mIGFyZWFzSW50ZXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFpUGF0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhaU5vbWJyZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFuZWphciBkaWZlcmVudGVzIGZvcm1hdG9zIGRlIGFyZWFJbnRlcmVzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFpID09PSAnb2JqZWN0JyAmJiBhaS5wYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWlQYXRoID0gYWkucGF0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhaVBhZ2UgPSBkdi5wYWdlKGFpUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFpTm9tYnJlID0gYWlQYWdlLnRpdHVsbyB8fCBhaVBhZ2UuZmlsZS5uYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWlOb21icmUgPSBcIlx1MDBDMXJlYSBkZSBJbnRlclx1MDBFOXMgXCIgKyBhaVBhdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYWkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2lraU1hdGNoID0gYWkubWF0Y2goL1xcW1xcWyguKj8pKD86XFx8KC4qPykpP1xcXVxcXS8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aWtpTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWlQYXRoID0gd2lraU1hdGNoWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhaU5vbWJyZSA9IHdpa2lNYXRjaFsyXSB8fCB3aWtpTWF0Y2hbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQnVzY2FyIGxhIHBcdTAwRTFnaW5hIHBvciBub21icmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFpUGFnZXMgPSBkdi5wYWdlcygnI1wiJyArIGFpICsgJ1wiJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWlQYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWlQYXRoID0gYWlQYWdlc1swXS5maWxlLnBhdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWlOb21icmUgPSBhaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWlQYXRoID0gYWk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWlOb21icmUgPSBhaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWlQYXRoID0gYWk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhaU5vbWJyZSA9IGFpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWlQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXZEYXRhID0gYXJlYXNWaWRhLmdldChhcmVhVmlkYVBhdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYXZEYXRhLnByb3llY3Rvc1BvckFJLmhhcyhhaVBhdGgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF2RGF0YS5wcm95ZWN0b3NQb3JBSS5zZXQoYWlQYXRoLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub21icmU6IGFpTm9tYnJlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJveWVjdG9zOiBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZEYXRhLnByb3llY3Rvc1BvckFJLmdldChhaVBhdGgpLnByb3llY3Rvcy5wdXNoKHByb3llY3RvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc2lnbmFkb0FJID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gU2kgbm8gc2UgYXNpZ25cdTAwRjMgYSBuaW5nXHUwMEZBbiBBSSwgYWdyZWdhciBhIHByb3llY3RvcyBzaW4gQUlcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhc2lnbmFkb0FJKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdkRhdGEgPSBhcmVhc1ZpZGEuZ2V0KGFyZWFWaWRhUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWF2RGF0YS5wcm95ZWN0b3NTaW5BSSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF2RGF0YS5wcm95ZWN0b3NTaW5BSSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXZEYXRhLnByb3llY3Rvc1NpbkFJLnB1c2gocHJveWVjdG8pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUHJveWVjdG8gc2luIEFJXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGF2RGF0YSA9IGFyZWFzVmlkYS5nZXQoYXJlYVZpZGFQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhdkRhdGEucHJveWVjdG9zU2luQUkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF2RGF0YS5wcm95ZWN0b3NTaW5BSSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGF2RGF0YS5wcm95ZWN0b3NTaW5BSS5wdXNoKHByb3llY3RvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICghYXNpZ25hZG8pIHtcbiAgICAgICAgICAgIHByb3llY3Rvc1NpbkFWLnB1c2gocHJveWVjdG8pO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB7IGFyZWFzVmlkYSwgcHJveWVjdG9zU2luQVYgfTtcbn1cblxuLyoqXG4gKiBBZ3J1cGEgcHJveWVjdG9zIHBvciBcdTAwQzFyZWEgZGUgSW50ZXJcdTAwRTlzXG4gKiBAcGFyYW0ge0FycmF5fSBwcm95ZWN0b3MgLSBBcnJheSBkZSBwcm95ZWN0b3NcbiAqIEBwYXJhbSB7T2JqZWN0fSBkdiAtIE9iamV0byBkYXRhdmlld1xuICogQHJldHVybnMge01hcH0gLSBNYXBhIGRlIHByb3llY3RvcyBhZ3J1cGFkb3MgcG9yIEFJXG4gKi9cbmFncnVwYXJQcm95ZWN0b3NQb3JBSShwcm95ZWN0b3MsIGR2KSB7XG4gICAgY29uc3QgYXJlYXNQb3JBSSA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBwcm95ZWN0b3NTaW5BSSA9IFtdO1xuICAgIFxuICAgIGZvciAoY29uc3QgcHJveWVjdG8gb2YgcHJveWVjdG9zKSB7XG4gICAgICAgIGxldCBhc2lnbmFkbyA9IGZhbHNlO1xuICAgICAgICBcbiAgICAgICAgaWYgKHByb3llY3RvLmFyZWFJbnRlcmVzKSB7XG4gICAgICAgICAgICBjb25zdCBhcmVhc0ludGVyZXMgPSBBcnJheS5pc0FycmF5KHByb3llY3RvLmFyZWFJbnRlcmVzKSA/IFxuICAgICAgICAgICAgICAgIHByb3llY3RvLmFyZWFJbnRlcmVzIDogW3Byb3llY3RvLmFyZWFJbnRlcmVzXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yIChjb25zdCBhaSBvZiBhcmVhc0ludGVyZXMpIHtcbiAgICAgICAgICAgICAgICBsZXQgYWlQYXRoO1xuICAgICAgICAgICAgICAgIGxldCBhaU5vbWJyZTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBNYW5lamFyIGRpZmVyZW50ZXMgZm9ybWF0b3MgZGUgYXJlYUludGVyZXNcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFpID09PSAnb2JqZWN0JyAmJiBhaS5wYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgIGFpUGF0aCA9IGFpLnBhdGg7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhaVBhZ2UgPSBkdi5wYWdlKGFpUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhaU5vbWJyZSA9IGFpUGFnZS50aXR1bG8gfHwgYWlQYWdlLmZpbGUubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWlOb21icmUgPSBcIlx1MDBDMXJlYSBkZSBJbnRlclx1MDBFOXMgXCIgKyBhaVBhdGg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhaSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2lraU1hdGNoID0gYWkubWF0Y2goL1xcW1xcWyguKj8pKD86XFx8KC4qPykpP1xcXVxcXS8pO1xuICAgICAgICAgICAgICAgICAgICBpZiAod2lraU1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhaVBhdGggPSB3aWtpTWF0Y2hbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBhaU5vbWJyZSA9IHdpa2lNYXRjaFsyXSB8fCB3aWtpTWF0Y2hbMV07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBCdXNjYXIgbGEgcFx1MDBFMWdpbmEgcG9yIG5vbWJyZVxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhaVBhZ2VzID0gZHYucGFnZXMoJyNcIicgKyBhaSArICdcIicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhaVBhZ2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWlQYXRoID0gYWlQYWdlc1swXS5maWxlLnBhdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFpTm9tYnJlID0gYWk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWlQYXRoID0gYWk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFpTm9tYnJlID0gYWk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFpUGF0aCA9IGFpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFpTm9tYnJlID0gYWk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGFpUGF0aCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWFyZWFzUG9yQUkuaGFzKGFpUGF0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZWFzUG9yQUkuc2V0KGFpUGF0aCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vbWJyZTogYWlOb21icmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJveWVjdG9zOiBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGFyZWFzUG9yQUkuZ2V0KGFpUGF0aCkucHJveWVjdG9zLnB1c2gocHJveWVjdG8pO1xuICAgICAgICAgICAgICAgICAgICBhc2lnbmFkbyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoIWFzaWduYWRvKSB7XG4gICAgICAgICAgICBwcm95ZWN0b3NTaW5BSS5wdXNoKHByb3llY3RvKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBBZ3JlZ2FyIHByb3llY3RvcyBzaW4gQUkgY29tbyB1bmEgY2F0ZWdvclx1MDBFRGEgZXNwZWNpYWxcbiAgICBpZiAocHJveWVjdG9zU2luQUkubGVuZ3RoID4gMCkge1xuICAgICAgICBhcmVhc1BvckFJLnNldChcInNpbi1haVwiLCB7XG4gICAgICAgICAgICBub21icmU6IFwiU2luIFx1MDBDMXJlYSBkZSBJbnRlclx1MDBFOXNcIixcbiAgICAgICAgICAgIHByb3llY3RvczogcHJveWVjdG9zU2luQUlcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBhcmVhc1BvckFJO1xufVxuXG5cbi8qKlxuICogUmVuZGVyaXphIHVuYSBzZWNjaVx1MDBGM24gZGUgXHUwMEMxcmVhIGRlIFZpZGEgY29uIHN1cyBwcm95ZWN0b3NcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdlBhdGggLSBSdXRhIGRlbCBhcmNoaXZvIGRlbCBcdTAwQzFyZWEgZGUgVmlkYVxuICogQHBhcmFtIHtPYmplY3R9IGF2RGF0YSAtIERhdG9zIGRlbCBcdTAwQzFyZWEgZGUgVmlkYVxuICogQHBhcmFtIHtPYmplY3R9IGR2IC0gT2JqZXRvIGRhdGF2aWV3XG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIC0gQ29uZmlndXJhY2lcdTAwRjNuXG4gKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9IC0gRWxlbWVudG8gRE9NIGNvbiBsYSBzZWNjaVx1MDBGM24gZGVsIEFWXG4gKi9cbnJlbmRlcml6YXJBcmVhVmlkYShhdlBhdGgsIGF2RGF0YSwgZHYsIGNvbmZpZykge1xuICAgIGNvbnN0IHNlY2Npb25BViA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgc2VjY2lvbkFWLmNsYXNzTmFtZSA9IFwicHJveWVjdG9zLWFyZWEtdmlkYVwiO1xuICAgIFxuICAgIC8vIENhbGN1bGFyIGVsIHRvdGFsIGRlIHByb3llY3RvcyBlbiBlc3RhIFx1MDBFMXJlYSBwYXJhIG1vc3RyYXIgZW4gZWwgdFx1MDBFRHR1bG9cbiAgICBjb25zdCB0b3RhbFByb3llY3RvcyA9IGF2RGF0YS5wcm95ZWN0b3MubGVuZ3RoO1xuICAgIFxuICAgIC8vIEVuY2FiZXphZG8gZGVsIFx1MDBDMXJlYSBkZSBWaWRhXG4gICAgY29uc3QgdGl0dWxvQVYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRpdHVsb0FWLmNsYXNzTmFtZSA9IFwicHJveWVjdG9zLWFyZWEtaGVhZGVyXCI7XG4gICAgdGl0dWxvQVYuc2V0QXR0cmlidXRlKFwiZGF0YS10b2dnbGUtaWRcIiwgYGF2LSR7YXZQYXRoLnJlcGxhY2UoL1xcLy9nLCBcIi1cIil9YCk7XG4gICAgXG4gICAgLy8gSWNvbm8gZGUgdG9nZ2xlXG4gICAgY29uc3QgdG9nZ2xlSWNvbm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICB0b2dnbGVJY29uby5jbGFzc05hbWUgPSBcInRvZ2dsZS1pY29uXCI7XG4gICAgdG9nZ2xlSWNvbm8udGV4dENvbnRlbnQgPSBcIlx1MjVCQVwiOyAvLyBQb3IgZGVmZWN0byBjZXJyYWRvXG4gICAgdGl0dWxvQVYuYXBwZW5kQ2hpbGQodG9nZ2xlSWNvbm8pO1xuICAgIFxuICAgIC8vIEV0aXF1ZXRhIGRlIHRpcG9cbiAgICBjb25zdCB0aXBvTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICB0aXBvTGFiZWwuY2xhc3NOYW1lID0gXCJhcmVhLXRpcG9cIjtcbiAgICB0aXBvTGFiZWwudGV4dENvbnRlbnQgPSBcIlx1RDgzRFx1RERDMlx1RkUwRiBcdTAwQzFyZWEgZGUgVmlkYTpcIjtcbiAgICB0aXR1bG9BVi5hcHBlbmRDaGlsZCh0aXBvTGFiZWwpO1xuICAgIFxuICAgIC8vIEVubGFjZSBkZWwgQVZcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBlbmxhY2VBViA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgICAgICBlbmxhY2VBVi5jbGFzc05hbWUgPSBcImFyZWEtbGlua1wiO1xuICAgICAgICBlbmxhY2VBVi50ZXh0Q29udGVudCA9IGF2RGF0YS5ub21icmUgfHwgXCJcdTAwQzFyZWEgZGUgVmlkYVwiO1xuICAgICAgICBlbmxhY2VBVi5ocmVmID0gYXZQYXRoO1xuICAgICAgICBlbmxhY2VBVi5zZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIiwgYXZQYXRoKTtcbiAgICAgICAgZW5sYWNlQVYudGFyZ2V0ID0gXCJfYmxhbmtcIjsgLy8gQWJyaXIgZW4gbnVldmEgcGVzdGFcdTAwRjFhXG4gICAgICAgIFxuICAgICAgICAvLyBIYWNlciBjbGljYWJsZSBlbCBlbmxhY2UgdXNhbmRvIGxhIEFQSSBkZSBPYnNpZGlhblxuICAgICAgICBlbmxhY2VBVi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgYXBwLndvcmtzcGFjZS5vcGVuTGlua1RleHQoYXZQYXRoLCBcIlwiLCB0cnVlKTsgLy8gRWwgdHJ1ZSBoYWNlIHF1ZSBzZSBhYnJhIGVuIG51ZXZhIHBlc3RhXHUwMEYxYVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHRpdHVsb0FWLmFwcGVuZENoaWxkKGVubGFjZUFWKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHRleHRvQVYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgdGV4dG9BVi50ZXh0Q29udGVudCA9IGF2RGF0YS5ub21icmUgfHwgXCJcdTAwQzFyZWEgZGUgVmlkYVwiO1xuICAgICAgICB0aXR1bG9BVi5hcHBlbmRDaGlsZCh0ZXh0b0FWKTtcbiAgICB9XG4gICAgXG4gICAgLy8gQVx1MDBGMWFkaXIgY29udGFkb3IgZGUgcHJveWVjdG9zXG4gICAgY29uc3QgY29udGFkb3JQcm95ZWN0b3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBjb250YWRvclByb3llY3Rvcy5jbGFzc05hbWUgPSBcInByb3llY3Rvcy1jb250YWRvclwiO1xuICAgIGNvbnRhZG9yUHJveWVjdG9zLnRleHRDb250ZW50ID0gYCAoJHt0b3RhbFByb3llY3Rvc30pYDtcbiAgICB0aXR1bG9BVi5hcHBlbmRDaGlsZChjb250YWRvclByb3llY3Rvcyk7XG4gICAgXG4gICAgc2VjY2lvbkFWLmFwcGVuZENoaWxkKHRpdHVsb0FWKTtcbiAgICBcbiAgICAvLyBDb250ZW5pZG8gZGVsIEFWIChBSXMgeSBwcm95ZWN0b3MpXG4gICAgY29uc3QgY29udGVuaWRvQVYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGNvbnRlbmlkb0FWLmNsYXNzTmFtZSA9IFwicHJveWVjdG9zLWFyZWEtY29udGVudFwiO1xuICAgIGNvbnRlbmlkb0FWLmlkID0gYGNvbnRlbnQtJHt0aXR1bG9BVi5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRvZ2dsZS1pZFwiKX1gO1xuICAgIGNvbnRlbmlkb0FWLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjsgLy8gUG9yIGRlZmVjdG8gY2VycmFkb1xuICAgIFxuICAgIC8vIFJlbmRlcml6YXIgXHUwMEMxcmVhcyBkZSBJbnRlclx1MDBFOXMgZGVudHJvIGRlIGVzdGEgQVZcbiAgICBpZiAoYXZEYXRhLnByb3llY3Rvc1BvckFJICYmIGF2RGF0YS5wcm95ZWN0b3NQb3JBSS5zaXplID4gMCkge1xuICAgICAgICAvLyBPcmRlbmFyIEFJcyBhbGZhYlx1MDBFOXRpY2FtZW50ZVxuICAgICAgICBjb25zdCBhaU9yZGVuYWRhcyA9IFsuLi5hdkRhdGEucHJveWVjdG9zUG9yQUkuZW50cmllcygpXVxuICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IGFbMV0ubm9tYnJlLmxvY2FsZUNvbXBhcmUoYlsxXS5ub21icmUpKTtcbiAgICAgICAgXG4gICAgICAgIGZvciAoY29uc3QgW2FpUGF0aCwgYWlEYXRhXSBvZiBhaU9yZGVuYWRhcykge1xuICAgICAgICAgICAgY29uc3Qgc2VjY2lvbkFJID0gdGhpcy5yZW5kZXJpemFyQXJlYUludGVyZXMoYWlQYXRoLCBhaURhdGEsIGR2LCBjb25maWcpO1xuICAgICAgICAgICAgY29udGVuaWRvQVYuYXBwZW5kQ2hpbGQoc2VjY2lvbkFJKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBSZW5kZXJpemFyIHByb3llY3RvcyBzaW4gQUlcbiAgICBpZiAoYXZEYXRhLnByb3llY3Rvc1NpbkFJICYmIGF2RGF0YS5wcm95ZWN0b3NTaW5BSS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHNlY2Npb25TaW5BSSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHNlY2Npb25TaW5BSS5jbGFzc05hbWUgPSBcInByb3llY3Rvcy1zaW4tYWlcIjtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRpdHVsb1NpbkFJID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdGl0dWxvU2luQUkuY2xhc3NOYW1lID0gXCJwcm95ZWN0b3MtYWktaGVhZGVyIHNpbi1haVwiO1xuICAgICAgICB0aXR1bG9TaW5BSS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXRvZ2dsZS1pZFwiLCBgc2luYWktJHthdlBhdGgucmVwbGFjZSgvXFwvL2csIFwiLVwiKX1gKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENvbnRhZG9yIGRlIHByb3llY3RvcyBzaW4gQUlcbiAgICAgICAgY29uc3QgdG90YWxTaW5BSSA9IGF2RGF0YS5wcm95ZWN0b3NTaW5BSS5sZW5ndGg7XG4gICAgICAgIFxuICAgICAgICAvLyBDcmVhciBlbCBIVE1MIGNvbiBlbCBib3RcdTAwRjNuIHRvZ2dsZSB5IGVsIGNvbnRhZG9yXG4gICAgICAgIHRpdHVsb1NpbkFJLmlubmVySFRNTCA9IGA8c3BhbiBjbGFzcz1cInRvZ2dsZS1pY29uXCI+XHUyNUJBPC9zcGFuPiA8c3BhbiBjbGFzcz1cImFpLXRpcG9cIj5TaW4gXHUwMEMxcmVhIGRlIEludGVyXHUwMEU5czwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJwcm95ZWN0b3MtY29udGFkb3JcIj4oJHt0b3RhbFNpbkFJfSk8L3NwYW4+YDtcbiAgICAgICAgc2VjY2lvblNpbkFJLmFwcGVuZENoaWxkKHRpdHVsb1NpbkFJKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGNvbnRlbmlkb1NpbkFJID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgY29udGVuaWRvU2luQUkuY2xhc3NOYW1lID0gXCJwcm95ZWN0b3MtYWktY29udGVudFwiO1xuICAgICAgICBjb250ZW5pZG9TaW5BSS5pZCA9IGBjb250ZW50LSR7dGl0dWxvU2luQUkuZ2V0QXR0cmlidXRlKFwiZGF0YS10b2dnbGUtaWRcIil9YDtcbiAgICAgICAgY29udGVuaWRvU2luQUkuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiOyAvLyBQb3IgZGVmZWN0byBjZXJyYWRvXG4gICAgICAgIFxuICAgICAgICAvLyBSZW5kZXJpemFyIGNhZGEgcHJveWVjdG8gc2luIEFJXG4gICAgICAgIGNvbnN0IGxpc3RhUHJveWVjdG9zID0gdGhpcy5yZW5kZXJpemFyTGlzdGFQcm95ZWN0b3MoYXZEYXRhLnByb3llY3Rvc1NpbkFJLCBkdiwgY29uZmlnKTtcbiAgICAgICAgY29udGVuaWRvU2luQUkuYXBwZW5kQ2hpbGQobGlzdGFQcm95ZWN0b3MpO1xuICAgICAgICBcbiAgICAgICAgc2VjY2lvblNpbkFJLmFwcGVuZENoaWxkKGNvbnRlbmlkb1NpbkFJKTtcbiAgICAgICAgY29udGVuaWRvQVYuYXBwZW5kQ2hpbGQoc2VjY2lvblNpbkFJKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFncmVnYXIgbGlzdGVuZXIgcGFyYSBjb2xhcHNhci9leHBhbmRpclxuICAgICAgICB0aXR1bG9TaW5BSS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LnRhZ05hbWUgIT09ICdBJykge1xuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlU2VjY2lvbkJ5SWQodGl0dWxvU2luQUkuZ2V0QXR0cmlidXRlKFwiZGF0YS10b2dnbGUtaWRcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgc2VjY2lvbkFWLmFwcGVuZENoaWxkKGNvbnRlbmlkb0FWKTtcbiAgICBcbiAgICAvLyBBZ3JlZ2FyIGxpc3RlbmVyIHBhcmEgY29sYXBzYXIvZXhwYW5kaXJcbiAgICB0aXR1bG9BVi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC50YXJnZXQudGFnTmFtZSAhPT0gJ0EnKSB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZVNlY2Npb25CeUlkKHRpdHVsb0FWLmdldEF0dHJpYnV0ZShcImRhdGEtdG9nZ2xlLWlkXCIpKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiBzZWNjaW9uQVY7XG59XG5cbi8qKlxuICogUmVuZGVyaXphIHVuYSBzZWNjaVx1MDBGM24gZGUgXHUwMEMxcmVhIGRlIEludGVyXHUwMEU5cyBjb24gc3VzIHByb3llY3Rvc1xuICogQHBhcmFtIHtzdHJpbmd9IGFpUGF0aCAtIFJ1dGEgZGVsIGFyY2hpdm8gZGVsIFx1MDBDMXJlYSBkZSBJbnRlclx1MDBFOXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBhaURhdGEgLSBEYXRvcyBkZWwgXHUwMEMxcmVhIGRlIEludGVyXHUwMEU5c1xuICogQHBhcmFtIHtPYmplY3R9IGR2IC0gT2JqZXRvIGRhdGF2aWV3XG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIC0gQ29uZmlndXJhY2lcdTAwRjNuXG4gKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9IC0gRWxlbWVudG8gRE9NIGNvbiBsYSBzZWNjaVx1MDBGM24gZGVsIEFJXG4gKi9cbnJlbmRlcml6YXJBcmVhSW50ZXJlcyhhaVBhdGgsIGFpRGF0YSwgZHYsIGNvbmZpZykge1xuICAgIGNvbnN0IHNlY2Npb25BSSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgc2VjY2lvbkFJLmNsYXNzTmFtZSA9IFwicHJveWVjdG9zLWFyZWEtaW50ZXJlc1wiO1xuICAgIFxuICAgIC8vIENhbGN1bGFyIHRvdGFsIGRlIHByb3llY3RvcyBwYXJhIG1vc3RyYXIgZW4gdFx1MDBFRHR1bG9cbiAgICBjb25zdCB0b3RhbFByb3llY3RvcyA9IGFpRGF0YS5wcm95ZWN0b3MgPyBhaURhdGEucHJveWVjdG9zLmxlbmd0aCA6IDA7XG4gICAgXG4gICAgLy8gRW5jYWJlemFkbyBkZWwgQUlcbiAgICBjb25zdCB0aXR1bG9BSSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGl0dWxvQUkuY2xhc3NOYW1lID0gXCJwcm95ZWN0b3MtYWktaGVhZGVyXCI7XG4gICAgdGl0dWxvQUkuc2V0QXR0cmlidXRlKFwiZGF0YS10b2dnbGUtaWRcIiwgYGFpLSR7YWlQYXRoLnJlcGxhY2UoL1xcLy9nLCBcIi1cIil9YCk7XG4gICAgXG4gICAgLy8gSWNvbm8gZGUgdG9nZ2xlXG4gICAgY29uc3QgdG9nZ2xlSWNvbm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICB0b2dnbGVJY29uby5jbGFzc05hbWUgPSBcInRvZ2dsZS1pY29uXCI7XG4gICAgdG9nZ2xlSWNvbm8udGV4dENvbnRlbnQgPSBcIlx1MjVCQVwiOyAvLyBQb3IgZGVmZWN0byBjZXJyYWRvXG4gICAgdGl0dWxvQUkuYXBwZW5kQ2hpbGQodG9nZ2xlSWNvbm8pO1xuICAgIFxuICAgIC8vIEV0aXF1ZXRhIGRlIHRpcG9cbiAgICBjb25zdCB0aXBvTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICB0aXBvTGFiZWwuY2xhc3NOYW1lID0gXCJhaS10aXBvXCI7XG4gICAgdGlwb0xhYmVsLnRleHRDb250ZW50ID0gXCJcdUQ4M0RcdURDQzEgXHUwMEMxcmVhIGRlIEludGVyXHUwMEU5czpcIjtcbiAgICB0aXR1bG9BSS5hcHBlbmRDaGlsZCh0aXBvTGFiZWwpO1xuICAgIFxuICAgIC8vIEVubGFjZSBkZWwgQUlcbiAgICBpZiAoYWlQYXRoICE9PSBcInNpbi1haVwiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBlbmxhY2VBSSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgICAgICAgICAgZW5sYWNlQUkuY2xhc3NOYW1lID0gXCJhaS1saW5rXCI7XG4gICAgICAgICAgICBlbmxhY2VBSS50ZXh0Q29udGVudCA9IGFpRGF0YS5ub21icmUgfHwgXCJcdTAwQzFyZWEgZGUgSW50ZXJcdTAwRTlzXCI7XG4gICAgICAgICAgICBlbmxhY2VBSS5ocmVmID0gYWlQYXRoO1xuICAgICAgICAgICAgZW5sYWNlQUkuc2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIsIGFpUGF0aCk7XG4gICAgICAgICAgICBlbmxhY2VBSS50YXJnZXQgPSBcIl9ibGFua1wiOyAvLyBBYnJpciBlbiBudWV2YSBwZXN0YVx1MDBGMWFcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gSGFjZXIgY2xpY2FibGUgZWwgZW5sYWNlIHVzYW5kbyBsYSBBUEkgZGUgT2JzaWRpYW5cbiAgICAgICAgICAgIGVubGFjZUFJLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGFwcC53b3Jrc3BhY2Uub3BlbkxpbmtUZXh0KGFpUGF0aCwgXCJcIiwgdHJ1ZSk7IC8vIEVsIHRydWUgaGFjZSBxdWUgc2UgYWJyYSBlbiBudWV2YSBwZXN0YVx1MDBGMWFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aXR1bG9BSS5hcHBlbmRDaGlsZChlbmxhY2VBSSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHRleHRvQUkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgICAgIHRleHRvQUkudGV4dENvbnRlbnQgPSBhaURhdGEubm9tYnJlIHx8IFwiXHUwMEMxcmVhIGRlIEludGVyXHUwMEU5c1wiO1xuICAgICAgICAgICAgdGl0dWxvQUkuYXBwZW5kQ2hpbGQodGV4dG9BSSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB0ZXh0b0FJID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgIHRleHRvQUkudGV4dENvbnRlbnQgPSBhaURhdGEubm9tYnJlIHx8IFwiU2luIFx1MDBDMXJlYSBkZSBJbnRlclx1MDBFOXNcIjtcbiAgICAgICAgdGl0dWxvQUkuYXBwZW5kQ2hpbGQodGV4dG9BSSk7XG4gICAgfVxuICAgIFxuICAgIC8vIEFcdTAwRjFhZGlyIGNvbnRhZG9yIGRlIHByb3llY3Rvc1xuICAgIGNvbnN0IGNvbnRhZG9yUHJveWVjdG9zID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgY29udGFkb3JQcm95ZWN0b3MuY2xhc3NOYW1lID0gXCJwcm95ZWN0b3MtY29udGFkb3JcIjtcbiAgICBjb250YWRvclByb3llY3Rvcy50ZXh0Q29udGVudCA9IGAgKCR7dG90YWxQcm95ZWN0b3N9KWA7XG4gICAgdGl0dWxvQUkuYXBwZW5kQ2hpbGQoY29udGFkb3JQcm95ZWN0b3MpO1xuICAgIFxuICAgIHNlY2Npb25BSS5hcHBlbmRDaGlsZCh0aXR1bG9BSSk7XG4gICAgXG4gICAgLy8gQ29udGVuaWRvIGRlbCBBSSAocHJveWVjdG9zKVxuICAgIGNvbnN0IGNvbnRlbmlkb0FJID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBjb250ZW5pZG9BSS5jbGFzc05hbWUgPSBcInByb3llY3Rvcy1haS1jb250ZW50XCI7XG4gICAgY29udGVuaWRvQUkuaWQgPSBgY29udGVudC0ke3RpdHVsb0FJLmdldEF0dHJpYnV0ZShcImRhdGEtdG9nZ2xlLWlkXCIpfWA7XG4gICAgY29udGVuaWRvQUkuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiOyAvLyBQb3IgZGVmZWN0byBjZXJyYWRvXG4gICAgXG4gICAgLy8gUmVuZGVyaXphciBwcm95ZWN0b3MgZGUgZXN0YSBBSVxuICAgIGlmIChhaURhdGEucHJveWVjdG9zICYmIGFpRGF0YS5wcm95ZWN0b3MubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBsaXN0YVByb3llY3RvcyA9IHRoaXMucmVuZGVyaXphckxpc3RhUHJveWVjdG9zKGFpRGF0YS5wcm95ZWN0b3MsIGR2LCBjb25maWcpO1xuICAgICAgICBjb250ZW5pZG9BSS5hcHBlbmRDaGlsZChsaXN0YVByb3llY3Rvcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgbWVuc2FqZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICBtZW5zYWplLmNsYXNzTmFtZSA9IFwicHJveWVjdG9zLWFpLWVtcHR5XCI7XG4gICAgICAgIG1lbnNhamUudGV4dENvbnRlbnQgPSBcIk5vIGhheSBwcm95ZWN0b3MgZW4gZXN0YSBcdTAwQzFyZWEgZGUgSW50ZXJcdTAwRTlzXCI7XG4gICAgICAgIGNvbnRlbmlkb0FJLmFwcGVuZENoaWxkKG1lbnNhamUpO1xuICAgIH1cbiAgICBcbiAgICBzZWNjaW9uQUkuYXBwZW5kQ2hpbGQoY29udGVuaWRvQUkpO1xuICAgIFxuICAgIC8vIEFncmVnYXIgbGlzdGVuZXIgcGFyYSBjb2xhcHNhci9leHBhbmRpclxuICAgIHRpdHVsb0FJLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC50YWdOYW1lICE9PSAnQScpIHtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlU2VjY2lvbkJ5SWQodGl0dWxvQUkuZ2V0QXR0cmlidXRlKFwiZGF0YS10b2dnbGUtaWRcIikpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIHNlY2Npb25BSTtcbn1cblxuLyoqXG4gKiBUb2dnbGUgZXNwZWNcdTAwRURmaWNvIHBhcmEgdW4gZWxlbWVudG8gcG9yIHN1IElEXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9nZ2xlSWQgLSBJRCBcdTAwRkFuaWNvIGRlbCBlbGVtZW50byB0b2dnbGVcbiAqL1xudG9nZ2xlU2VjY2lvbkJ5SWQodG9nZ2xlSWQpIHtcbiAgICAvLyBCdXNjYXIgZWwgaGVhZGVyIHkgZWwgY29udGVuaWRvIGNvcnJlc3BvbmRpZW50ZVxuICAgIGNvbnN0IGhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRvZ2dsZS1pZD1cIiR7dG9nZ2xlSWR9XCJdYCk7XG4gICAgY29uc3QgY29udGVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBjb250ZW50LSR7dG9nZ2xlSWR9YCk7XG4gICAgXG4gICAgaWYgKCFoZWFkZXIgfHwgIWNvbnRlbnQpIHJldHVybjtcbiAgICBcbiAgICBjb25zdCB0b2dnbGVJY29uID0gaGVhZGVyLnF1ZXJ5U2VsZWN0b3IoJy50b2dnbGUtaWNvbicpO1xuICAgIGNvbnN0IGlzVmlzaWJsZSA9IGNvbnRlbnQuc3R5bGUuZGlzcGxheSAhPT0gJ25vbmUnO1xuICAgIFxuICAgIGlmIChpc1Zpc2libGUpIHtcbiAgICAgICAgY29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB0b2dnbGVJY29uLnRleHRDb250ZW50ID0gJ1x1MjVCQSc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgdG9nZ2xlSWNvbi50ZXh0Q29udGVudCA9ICdcdTI1QkMnO1xuICAgIH1cbn1cblxuXG5cbi8qKlxuICogUmVuZGVyaXphIHVuYSBsaXN0YSBkZSBwcm95ZWN0b3NcbiAqIEBwYXJhbSB7QXJyYXl9IHByb3llY3RvcyAtIEFycmF5IGRlIHByb3llY3Rvc1xuICogQHBhcmFtIHtPYmplY3R9IGR2IC0gT2JqZXRvIGRhdGF2aWV3XG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIC0gQ29uZmlndXJhY2lcdTAwRjNuXG4gKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9IC0gRWxlbWVudG8gRE9NIGNvbiBsYSBsaXN0YSBkZSBwcm95ZWN0b3NcbiAqL1xucmVuZGVyaXphckxpc3RhUHJveWVjdG9zKHByb3llY3RvcywgZHYsIGNvbmZpZykge1xuICAgIGNvbnN0IGxpc3RhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xuICAgIGxpc3RhLmNsYXNzTmFtZSA9IFwicHJveWVjdG9zLWxpc3RhXCI7XG4gICAgXG4gICAgLy8gT3JkZW5hciBwcm95ZWN0b3M6IHByaW1lcm8gcG9yIG5pdmVsIChuaXZlbFApLCBsdWVnbyBwb3IgZmVjaGEgKG1cdTAwRTFzIHJlY2llbnRlIHByaW1lcm8pXG4gICAgY29uc3Qgb3JkZW5hZG9zID0gWy4uLnByb3llY3Rvc10uc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBjb25zdCBuaXZlbEEgPSBhLm5pdmVsUCB8fCAwO1xuICAgICAgICBjb25zdCBuaXZlbEIgPSBiLm5pdmVsUCB8fCAwO1xuICAgICAgICBcbiAgICAgICAgaWYgKG5pdmVsQSAhPT0gbml2ZWxCKSB7XG4gICAgICAgICAgICByZXR1cm4gbml2ZWxBIC0gbml2ZWxCOyAvLyBBc2NlbmRlbnRlIHBvciBuaXZlbFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBTaSBsb3Mgbml2ZWxlcyBzb24gaWd1YWxlcywgb3JkZW5hciBwb3IgZmVjaGEgKGRlc2NlbmRlbnRlKVxuICAgICAgICBjb25zdCBmZWNoYUEgPSBhLmZlY2hhID8gbmV3IERhdGUoYS5mZWNoYSkgOiBuZXcgRGF0ZSgwKTtcbiAgICAgICAgY29uc3QgZmVjaGFCID0gYi5mZWNoYSA/IG5ldyBEYXRlKGIuZmVjaGEpIDogbmV3IERhdGUoMCk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZmVjaGFCIC0gZmVjaGFBO1xuICAgIH0pO1xuICAgIFxuICAgIC8vIENvbnN0cnVpciB1biBtYXBhIHBhcmEgcmVsYWNpb25hciBwcm95ZWN0b3MgcGFkcmVzIGUgaGlqb3NcbiAgICBjb25zdCBwcm95ZWN0b3NNYXAgPSBuZXcgTWFwKCk7XG4gICAgY29uc3Qgbm9kb3NSYWl6ID0gW107XG4gICAgXG4gICAgLy8gUHJpbWVybyBtYXBlYXIgdG9kb3MgbG9zIHByb3llY3Rvc1xuICAgIGZvciAoY29uc3QgcHJveWVjdG8gb2Ygb3JkZW5hZG9zKSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBwcm95ZWN0by5maWxlLnBhdGg7XG4gICAgICAgIFxuICAgICAgICBwcm95ZWN0b3NNYXAuc2V0KHBhdGgsIHtcbiAgICAgICAgICAgIHByb3llY3RvLFxuICAgICAgICAgICAgaGlqb3M6IFtdXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICAvLyBTZWd1bmRvIHBhc286IGVzdGFibGVjZXIgcmVsYWNpb25lcyBwYWRyZS1oaWpvXG4gICAgZm9yIChjb25zdCBwcm95ZWN0byBvZiBvcmRlbmFkb3MpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IHByb3llY3RvLmZpbGUucGF0aDtcbiAgICAgICAgXG4gICAgICAgIC8vIFNpIHRpZW5lIHByb3llY3RvR1REL3Byb3llY3RvUSBjb21vIHBhZHJlXG4gICAgICAgIGNvbnN0IHBhZHJlc0NhbXBvID0gY29uZmlnLnRpcG9Qcm95ZWN0byA9PT0gXCJQR1REXCIgPyBcInByb3llY3RvR1REXCIgOiBcInByb3llY3RvUVwiO1xuICAgICAgICBcbiAgICAgICAgaWYgKHByb3llY3RvW3BhZHJlc0NhbXBvXSkge1xuICAgICAgICAgICAgY29uc3QgcGFkcmVzID0gQXJyYXkuaXNBcnJheShwcm95ZWN0b1twYWRyZXNDYW1wb10pID8gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJveWVjdG9bcGFkcmVzQ2FtcG9dIDogW3Byb3llY3RvW3BhZHJlc0NhbXBvXV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCB0aWVuZVJlbGFjaW9uID0gZmFsc2U7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGFkcmUgb2YgcGFkcmVzKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBhZHJlUGF0aDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBhZHJlID09PSAnb2JqZWN0JyAmJiBwYWRyZS5wYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZHJlUGF0aCA9IHBhZHJlLnBhdGg7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcGFkcmUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdpa2lNYXRjaCA9IHBhZHJlLm1hdGNoKC9cXFtcXFsoLio/KSg/OlxcfCguKj8pKT9cXF1cXF0vKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpa2lNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkcmVQYXRoID0gd2lraU1hdGNoWzFdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQnVzY2FyIHByb3llY3RvIHBvciBub21icmVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb3llY3RvRW5jb250cmFkbyA9IG9yZGVuYWRvcy5maW5kKHAgPT4gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcC50aXR1bG8gPT09IHBhZHJlIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwLmFsaWFzZXMgJiYgcC5hbGlhc2VzLmluY2x1ZGVzKHBhZHJlKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmZpbGUubmFtZSA9PT0gcGFkcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm95ZWN0b0VuY29udHJhZG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRyZVBhdGggPSBwcm95ZWN0b0VuY29udHJhZG8uZmlsZS5wYXRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRyZVBhdGggPSBwYWRyZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAocGFkcmVQYXRoICYmIHByb3llY3Rvc01hcC5oYXMocGFkcmVQYXRoKSkge1xuICAgICAgICAgICAgICAgICAgICBwcm95ZWN0b3NNYXAuZ2V0KHBhZHJlUGF0aCkuaGlqb3MucHVzaChwcm95ZWN0b3NNYXAuZ2V0KHBhdGgpKTtcbiAgICAgICAgICAgICAgICAgICAgdGllbmVSZWxhY2lvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIXRpZW5lUmVsYWNpb24pIHtcbiAgICAgICAgICAgICAgICBub2Rvc1JhaXoucHVzaChwcm95ZWN0b3NNYXAuZ2V0KHBhdGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZG9zUmFpei5wdXNoKHByb3llY3Rvc01hcC5nZXQocGF0aCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIFJlbmRlcml6YXIgcHJveWVjdG9zIGplclx1MDBFMXJxdWljYW1lbnRlXG4gICAgZm9yIChjb25zdCBub2RvUmFpeiBvZiBub2Rvc1JhaXopIHtcbiAgICAgICAgdGhpcy5yZW5kZXJpemFyUHJveWVjdG9SZWN1cnNpdm8obm9kb1JhaXosIGxpc3RhLCAwLCBkdiwgY29uZmlnKTtcbiAgICB9XG4gICAgXG4gICAgLy8gU2kgbm8gaGF5IHByb3llY3RvcyBkZXNwdVx1MDBFOXMgZGUgZmlsdHJhclxuICAgIGlmIChsaXN0YS5jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc3QgbWVuc2FqZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICAgICAgbWVuc2FqZS5jbGFzc05hbWUgPSBcInByb3llY3Rvcy1saXN0YS1lbXB0eVwiO1xuICAgICAgICBtZW5zYWplLnRleHRDb250ZW50ID0gXCJObyBoYXkgcHJveWVjdG9zIHF1ZSBjdW1wbGFuIGNvbiBsb3MgY3JpdGVyaW9zIGRlIGZpbHRyb1wiO1xuICAgICAgICBsaXN0YS5hcHBlbmRDaGlsZChtZW5zYWplKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGxpc3RhO1xufVxuXG4vKipcbiAqIFJlbmRlcml6YSB1biBwcm95ZWN0byB5IHN1cyBzdWJwcm95ZWN0b3MgZGUgZm9ybWEgcmVjdXJzaXZhXG4gKiBAcGFyYW0ge09iamVjdH0gbm9kbyAtIE5vZG8gZGVsIHByb3llY3RvIGFjdHVhbFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbGlzdGEgLSBFbGVtZW50byBsaXN0YSBkb25kZSBhZ3JlZ2FyIGVsIHByb3llY3RvXG4gKiBAcGFyYW0ge251bWJlcn0gbml2ZWwgLSBOaXZlbCBkZSBpbmRlbnRhY2lcdTAwRjNuXG4gKiBAcGFyYW0ge09iamVjdH0gZHYgLSBPYmpldG8gZGF0YXZpZXdcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgLSBDb25maWd1cmFjaVx1MDBGM25cbiAqL1xucmVuZGVyaXphclByb3llY3RvUmVjdXJzaXZvKG5vZG8sIGxpc3RhLCBuaXZlbCwgZHYsIGNvbmZpZykge1xuICAgIGNvbnN0IHsgcHJveWVjdG8sIGhpam9zIH0gPSBub2RvO1xuICAgIFxuICAgIC8vIEZpbHRyYXIgc2kgc2UgZGViZSBtb3N0cmFyIHNvbG8gY29uIHRhcmVhcyBwZW5kaWVudGVzXG4gICAgaWYgKGNvbmZpZy5zb2xvTW9zdHJhckNvblBlbmRpZW50ZXMpIHtcbiAgICAgICAgY29uc3QgdGllbmVUYXJlYXNQZW5kaWVudGVzID0gKFxuICAgICAgICAgICAgcHJveWVjdG8uZmlsZS50YXNrcyAmJiBcbiAgICAgICAgICAgIHByb3llY3RvLmZpbGUudGFza3MuZmlsdGVyKHQgPT4gIXQuY29tcGxldGVkKS5sZW5ndGggPiAwXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICAvLyBDb21wcm9iYXIgc2kgYWxndW5vIGRlIHN1cyBoaWpvcyB0aWVuZSB0YXJlYXMgcGVuZGllbnRlc1xuICAgICAgICBjb25zdCBoaWpvc0NvblRhcmVhcyA9IGhpam9zLnNvbWUoaGlqbyA9PiB7XG4gICAgICAgICAgICAvLyBWZXJpZmljYXIgdGFyZWFzIGVuIGVzdGUgaGlqb1xuICAgICAgICAgICAgY29uc3QgaGlqb1BlbmRpZW50ZXMgPSBoaWpvLnByb3llY3RvLmZpbGUudGFza3MgJiYgXG4gICAgICAgICAgICAgICAgaGlqby5wcm95ZWN0by5maWxlLnRhc2tzLmZpbHRlcih0ID0+ICF0LmNvbXBsZXRlZCkubGVuZ3RoID4gMDtcbiAgICAgICAgICAgIHJldHVybiBoaWpvUGVuZGllbnRlcztcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIXRpZW5lVGFyZWFzUGVuZGllbnRlcyAmJiAhaGlqb3NDb25UYXJlYXMgJiYgaGlqb3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47IC8vIE5vIG1vc3RyYXIgZXN0ZSBwcm95ZWN0byBuaSBzdXMgaGlqb3NcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBDcmVhciBpdGVtIGRlIGxpc3RhIHBhcmEgZXN0ZSBwcm95ZWN0b1xuICAgIGNvbnN0IGl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgaXRlbS5jbGFzc05hbWUgPSBgcHJveWVjdG9zLWl0ZW0gbml2ZWwtJHtuaXZlbH1gO1xuICAgIFxuICAgIC8vIEFncmVnYXIgaW5kZW50YWNpXHUwMEYzbiB2aXN1YWxcbiAgICBjb25zdCBpbmRlbnRhY2lvbiA9IG5pdmVsID4gMCA/ICdcdTIxOTInLnJlcGVhdChuaXZlbCkgKyAnICcgOiAnJztcbiAgICBcbiAgICAvLyBEZXRlcm1pbmFyIGVsIHRleHRvIGEgbW9zdHJhciAoYWxpYXMgbyBub21icmUgZGVsIGFyY2hpdm8pXG4gICAgY29uc3QgdGV4dG9Nb3N0cmFyID0gcHJveWVjdG8udGl0dWxvIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAocHJveWVjdG8uYWxpYXNlcyAmJiBwcm95ZWN0by5hbGlhc2VzLmxlbmd0aCA+IDAgPyBwcm95ZWN0by5hbGlhc2VzWzBdIDogbnVsbCkgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgIHByb3llY3RvLmZpbGUubmFtZTtcbiAgICBcbiAgICAvLyBDb25zdHJ1aXIgZWwgY29udGVuaWRvIGRlbCBpdGVtXG4gICAgY29uc3QgY29udGVuaWRvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBjb250ZW5pZG8uY2xhc3NOYW1lID0gXCJwcm95ZWN0by1jb250ZW5pZG9cIjtcbiAgICBcbiAgICAvLyBBZ3JlZ2FyIGVzdGFkbyBjb21vIGVtb2ppXG4gICAgaWYgKHByb3llY3RvLmVzdGFkbykge1xuICAgICAgICBjb25zdCBlc3RhZG9TcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgIGVzdGFkb1NwYW4uY2xhc3NOYW1lID0gXCJwcm95ZWN0by1lc3RhZG9cIjtcbiAgICAgICAgZXN0YWRvU3Bhbi50ZXh0Q29udGVudCA9IHByb3llY3RvLmVzdGFkbyArIFwiIFwiO1xuICAgICAgICBjb250ZW5pZG8uYXBwZW5kQ2hpbGQoZXN0YWRvU3Bhbik7XG4gICAgfVxuICAgIFxuICAgIC8vIEFncmVnYXIgaW5kZW50YWNpXHUwMEYzbiBjb21vIHRleHRvXG4gICAgaWYgKGluZGVudGFjaW9uKSB7XG4gICAgICAgIGNvbnN0IGluZGVudFNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgaW5kZW50U3Bhbi5jbGFzc05hbWUgPSBcInByb3llY3RvLWluZGVudFwiO1xuICAgICAgICBpbmRlbnRTcGFuLnRleHRDb250ZW50ID0gaW5kZW50YWNpb247XG4gICAgICAgIGNvbnRlbmlkby5hcHBlbmRDaGlsZChpbmRlbnRTcGFuKTtcbiAgICB9XG4gICAgXG4gICAgLy8gQ3JlYXIgZW5sYWNlIGFsIHByb3llY3RvXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZW5sYWNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgICAgIGVubGFjZS5jbGFzc05hbWUgPSBcInByb3llY3RvLWxpbmtcIjtcbiAgICAgICAgZW5sYWNlLnRleHRDb250ZW50ID0gdGV4dG9Nb3N0cmFyO1xuICAgICAgICBlbmxhY2UuaHJlZiA9IHByb3llY3RvLmZpbGUucGF0aDtcbiAgICAgICAgZW5sYWNlLnNldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiLCBwcm95ZWN0by5maWxlLnBhdGgpO1xuICAgICAgICBlbmxhY2UudGFyZ2V0ID0gXCJfYmxhbmtcIjsgLy8gQWJyaXIgZW4gbnVldmEgcGVzdGFcdTAwRjFhXG4gICAgICAgIFxuICAgICAgICAvLyBIYWNlciBjbGljYWJsZSBlbCBlbmxhY2VcbiAgICAgICAgZW5sYWNlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBhcHAud29ya3NwYWNlLm9wZW5MaW5rVGV4dChwcm95ZWN0by5maWxlLnBhdGgsIFwiXCIsIHRydWUpOyAvLyBFbCB0cnVlIGhhY2UgcXVlIHNlIGFicmEgZW4gbnVldmEgcGVzdGFcdTAwRjFhXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgY29udGVuaWRvLmFwcGVuZENoaWxkKGVubGFjZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCB0ZXh0byA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICB0ZXh0by50ZXh0Q29udGVudCA9IHRleHRvTW9zdHJhcjtcbiAgICAgICAgY29udGVuaWRvLmFwcGVuZENoaWxkKHRleHRvKTtcbiAgICB9XG4gICAgXG4gICAgLy8gQWdyZWdhciBpbmZvIGFkaWNpb25hbCBjb21vIHRhcmVhcyBwZW5kaWVudGVzXG4gICAgaWYgKHByb3llY3RvLmZpbGUudGFza3MpIHtcbiAgICAgICAgY29uc3QgdGFyZWFzUGVuZGllbnRlcyA9IHByb3llY3RvLmZpbGUudGFza3MuZmlsdGVyKHQgPT4gIXQuY29tcGxldGVkKS5sZW5ndGg7XG4gICAgICAgIGlmICh0YXJlYXNQZW5kaWVudGVzID4gMCkge1xuICAgICAgICAgICAgY29uc3QgdGFyZWFzU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICAgICAgdGFyZWFzU3Bhbi5jbGFzc05hbWUgPSBcInByb3llY3RvLXBlbmRpZW50ZXNcIjtcbiAgICAgICAgICAgIHRhcmVhc1NwYW4udGV4dENvbnRlbnQgPSBgICgke3RhcmVhc1BlbmRpZW50ZXN9IHBlbmRpZW50ZXMpYDtcbiAgICAgICAgICAgIGNvbnRlbmlkby5hcHBlbmRDaGlsZCh0YXJlYXNTcGFuKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBBZ3JlZ2FyIG5pdmVsIHNpIGVzID4gMFxuICAgIGlmIChwcm95ZWN0by5uaXZlbFAgJiYgcHJveWVjdG8ubml2ZWxQID4gMCkge1xuICAgICAgICBjb25zdCBuaXZlbFNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgbml2ZWxTcGFuLmNsYXNzTmFtZSA9IFwicHJveWVjdG8tbml2ZWxcIjtcbiAgICAgICAgbml2ZWxTcGFuLnRleHRDb250ZW50ID0gYCBbTml2ZWwgJHtwcm95ZWN0by5uaXZlbFB9XWA7XG4gICAgICAgIGNvbnRlbmlkby5hcHBlbmRDaGlsZChuaXZlbFNwYW4pO1xuICAgIH1cbiAgICBcbiAgICBpdGVtLmFwcGVuZENoaWxkKGNvbnRlbmlkbyk7XG4gICAgXG4gICAgLy8gQWdyZWdhciBhIGxhIGxpc3RhXG4gICAgbGlzdGEuYXBwZW5kQ2hpbGQoaXRlbSk7XG4gICAgXG4gICAgLy8gUHJvY2VzYXIgaGlqb3MgcmVjdXJzaXZhbWVudGUgc2kgdGllbmVcbiAgICBpZiAoaGlqb3MgJiYgaGlqb3MubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBzdWJsaXN0YSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiKTtcbiAgICAgICAgc3VibGlzdGEuY2xhc3NOYW1lID0gXCJwcm95ZWN0b3Mtc3VibGlzdGFcIjtcbiAgICAgICAgXG4gICAgICAgIC8vIFByb2Nlc2FyIGNhZGEgaGlqb1xuICAgICAgICBmb3IgKGNvbnN0IGhpam8gb2YgaGlqb3MpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyaXphclByb3llY3RvUmVjdXJzaXZvKGhpam8sIHN1Ymxpc3RhLCBuaXZlbCArIDEsIGR2LCBjb25maWcpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBTb2xvIGFncmVnYXIgbGEgc3VibGlzdGEgc2kgdGllbmUgaGlqb3MgZGVzcHVcdTAwRTlzIGRlbCBmaWx0cmFkb1xuICAgICAgICBpZiAoc3VibGlzdGEuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaXRlbS5hcHBlbmRDaGlsZChzdWJsaXN0YSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogQWx0ZXJuYSBlbnRyZSBtb3N0cmFyIHkgb2N1bHRhciB1bmEgc2VjY2lcdTAwRjNuXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBoZWFkZXIgLSBFbGVtZW50byBkZSBlbmNhYmV6YWRvIGNvbiBlbCB0b2dnbGVcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNvbnRlbnQgLSBFbGVtZW50byBkZSBjb250ZW5pZG8gYSBtb3N0cmFyL29jdWx0YXJcbiAqL1xudG9nZ2xlU2VjY2lvbihoZWFkZXIsIGNvbnRlbnQpIHtcbiAgICBjb25zdCB0b2dnbGVJY29uID0gaGVhZGVyLnF1ZXJ5U2VsZWN0b3IoJy50b2dnbGUtaWNvbicpO1xuICAgIGNvbnN0IGlzVmlzaWJsZSA9IGNvbnRlbnQuc3R5bGUuZGlzcGxheSAhPT0gJ25vbmUnO1xuICAgIFxuICAgIGlmIChpc1Zpc2libGUpIHtcbiAgICAgICAgY29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB0b2dnbGVJY29uLnRleHRDb250ZW50ID0gJ1x1MjVCQSc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgdG9nZ2xlSWNvbi50ZXh0Q29udGVudCA9ICdcdTI1QkMnO1xuICAgIH1cbn1cblxuLyoqXG4gKiBFeHBhbmRlIHRvZGFzIGxhcyBzZWNjaW9uZXMgZW4gZWwgXHUwMEUxcmJvbFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29udGFpbmVyIC0gQ29udGVuZWRvciBwcmluY2lwYWxcbiAqL1xuZXhwYW5kaXJUb2RvKGNvbnRhaW5lcikge1xuICAgIC8vIE9idGVuZXIgdG9kb3MgbG9zIGVsZW1lbnRvcyB0b2dnbGFibGVzXG4gICAgY29uc3QgaGVhZGVycyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10b2dnbGUtaWRdJyk7XG4gICAgXG4gICAgLy8gUmVjb3JyZXIgY2FkYSBoZWFkZXIgeSBleHBhbmRpciBzdSBjb250ZW5pZG9cbiAgICBoZWFkZXJzLmZvckVhY2goaGVhZGVyID0+IHtcbiAgICAgICAgY29uc3QgdG9nZ2xlSWQgPSBoZWFkZXIuZ2V0QXR0cmlidXRlKFwiZGF0YS10b2dnbGUtaWRcIik7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgY29udGVudC0ke3RvZ2dsZUlkfWApO1xuICAgICAgICBcbiAgICAgICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgICAgIGNvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICBjb25zdCB0b2dnbGVJY29uID0gaGVhZGVyLnF1ZXJ5U2VsZWN0b3IoJy50b2dnbGUtaWNvbicpO1xuICAgICAgICAgICAgaWYgKHRvZ2dsZUljb24pIHtcbiAgICAgICAgICAgICAgICB0b2dnbGVJY29uLnRleHRDb250ZW50ID0gJ1x1MjVCQyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuLyoqXG4gKiBDb2xhcHNhIHRvZGFzIGxhcyBzZWNjaW9uZXMgZW4gZWwgXHUwMEUxcmJvbFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29udGFpbmVyIC0gQ29udGVuZWRvciBwcmluY2lwYWxcbiAqL1xuY29sYXBzYXJUb2RvKGNvbnRhaW5lcikge1xuICAgIC8vIE9idGVuZXIgdG9kb3MgbG9zIGVsZW1lbnRvcyB0b2dnbGFibGVzXG4gICAgY29uc3QgaGVhZGVycyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10b2dnbGUtaWRdJyk7XG4gICAgXG4gICAgLy8gUmVjb3JyZXIgY2FkYSBoZWFkZXIgeSBjb2xhcHNhciBzdSBjb250ZW5pZG9cbiAgICBoZWFkZXJzLmZvckVhY2goaGVhZGVyID0+IHtcbiAgICAgICAgY29uc3QgdG9nZ2xlSWQgPSBoZWFkZXIuZ2V0QXR0cmlidXRlKFwiZGF0YS10b2dnbGUtaWRcIik7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgY29udGVudC0ke3RvZ2dsZUlkfWApO1xuICAgICAgICBcbiAgICAgICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgICAgIGNvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIGNvbnN0IHRvZ2dsZUljb24gPSBoZWFkZXIucXVlcnlTZWxlY3RvcignLnRvZ2dsZS1pY29uJyk7XG4gICAgICAgICAgICBpZiAodG9nZ2xlSWNvbikge1xuICAgICAgICAgICAgICAgIHRvZ2dsZUljb24udGV4dENvbnRlbnQgPSAnXHUyNUJBJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG4vKipcbiAqIEFncmVnYSBsaXN0ZW5lcnMgcGFyYSBleHBhbmRpci9jb2xhcHNhciBzZWNjaW9uZXNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNvbnRhaW5lciAtIENvbnRlbmVkb3IgcHJpbmNpcGFsXG4gKi9cbmFncmVnYXJMaXN0ZW5lcnNQcm95ZWN0b3MoY29udGFpbmVyKSB7XG4gICAgLy8gQWdyZWdhciBsaXN0ZW5lcnMgcGFyYSBsb3MgaGVhZGVycyBkZSBcdTAwQzFyZWFzIGRlIFZpZGFcbiAgICBjb25zdCBoZWFkZXJzQVYgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLnByb3llY3Rvcy1hcmVhLWhlYWRlcicpO1xuICAgIGhlYWRlcnNBVi5mb3JFYWNoKGhlYWRlciA9PiB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBoZWFkZXIubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICBpZiAoY29udGVudCAmJiBjb250ZW50LmNsYXNzTGlzdC5jb250YWlucygncHJveWVjdG9zLWFyZWEtY29udGVudCcpKSB7XG4gICAgICAgICAgICBoZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LnRhZ05hbWUgIT09ICdBJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVNlY2Npb24oaGVhZGVyLCBjb250ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIC8vIEFncmVnYXIgbGlzdGVuZXJzIHBhcmEgbG9zIGhlYWRlcnMgZGUgXHUwMEMxcmVhcyBkZSBJbnRlclx1MDBFOXNcbiAgICBjb25zdCBoZWFkZXJzQUkgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLnByb3llY3Rvcy1haS1oZWFkZXInKTtcbiAgICBoZWFkZXJzQUkuZm9yRWFjaChoZWFkZXIgPT4ge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gaGVhZGVyLm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgaWYgKGNvbnRlbnQgJiYgY29udGVudC5jbGFzc0xpc3QuY29udGFpbnMoJ3Byb3llY3Rvcy1haS1jb250ZW50JykpIHtcbiAgICAgICAgICAgIGhlYWRlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQudGFnTmFtZSAhPT0gJ0EnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlU2VjY2lvbihoZWFkZXIsIGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cblxuLyoqXG4gKiBEZXRlcm1pbmEgcXVcdTAwRTkgcHJveWVjdG9zIGRlYmVuIG1vc3RyYXJzZSB0ZW5pZW5kbyBlbiBjdWVudGEgbGEgZXN0cnVjdHVyYSBqZXJcdTAwRTFycXVpY2FcbiAqIEBwYXJhbSB7QXJyYXl9IHByb3llY3Rvc0ZpbHRyYWRvcyAtIEFycmF5IGRlIHByb3llY3RvcyB5YSBmaWx0cmFkb3NcbiAqIEBwYXJhbSB7QXJyYXl9IHRvZG9zTG9zUHJveWVjdG9zIC0gQXJyYXkgY29uIHRvZG9zIGxvcyBwcm95ZWN0b3NcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgLSBDb25maWd1cmFjaVx1MDBGM25cbiAqIEByZXR1cm5zIHtBcnJheX0gLSBBcnJheSBkZSBwcm95ZWN0b3MgYSBtb3N0cmFyXG4gKi9cbmRldGVybWluYXJQcm95ZWN0b3NBTW9zdHJhcihwcm95ZWN0b3NGaWx0cmFkb3MsIHRvZG9zTG9zUHJveWVjdG9zLCBjb25maWcpIHtcbiAgICAvLyBTaSBubyBoYXkgZmlsdHJvIGVzcGVjXHUwMEVEZmljbywgbW9zdHJhciB0b2Rvc1xuICAgIGlmICghY29uZmlnLmVzdGFkb0ZpbHRybyB8fCBjb25maWcuZXN0YWRvRmlsdHJvID09PSBcIlwiKSB7XG4gICAgICAgIHJldHVybiB0b2Rvc0xvc1Byb3llY3RvcztcbiAgICB9XG4gICAgXG4gICAgLy8gQ29uanVudG8gcGFyYSBhbG1hY2VuYXIgcGF0aHMgZGUgcHJveWVjdG9zIGEgbW9zdHJhclxuICAgIGNvbnN0IHBhdGhzQU1vc3RyYXIgPSBuZXcgU2V0KCk7XG4gICAgXG4gICAgLy8gUHJpbWVybyBhZ3JlZ2Ftb3MgbG9zIHByb3llY3RvcyBmaWx0cmFkb3NcbiAgICBwcm95ZWN0b3NGaWx0cmFkb3MuZm9yRWFjaChwID0+IHBhdGhzQU1vc3RyYXIuYWRkKHAuZmlsZS5wYXRoKSk7XG4gICAgXG4gICAgLy8gTHVlZ28gaWRlbnRpZmljYW1vcyBwcm95ZWN0b3MgcGFkcmVzIG5lY2VzYXJpb3MgcGFyYSBtYW50ZW5lciBsYSBlc3RydWN0dXJhXG4gICAgbGV0IGNhbWJpb3NSZWFsaXphZG9zID0gdHJ1ZTtcbiAgICBcbiAgICAvLyBQYXNhZGEgMTogSWRlbnRpZmljYXIgcGFkcmVzIGRpcmVjdG9zIGRlIGxvcyBwcm95ZWN0b3MgZmlsdHJhZG9zXG4gICAgd2hpbGUgKGNhbWJpb3NSZWFsaXphZG9zKSB7XG4gICAgICAgIGNhbWJpb3NSZWFsaXphZG9zID0gZmFsc2U7XG4gICAgICAgIFxuICAgICAgICBmb3IgKGNvbnN0IHByb3llY3RvIG9mIHRvZG9zTG9zUHJveWVjdG9zKSB7XG4gICAgICAgICAgICAvLyBTaSBlc3RlIHByb3llY3RvIHlhIGVzdFx1MDBFMSBlbiBsYSBsaXN0YSwgcGFzYW1vcyBhbCBzaWd1aWVudGVcbiAgICAgICAgICAgIGlmIChwYXRoc0FNb3N0cmFyLmhhcyhwcm95ZWN0by5maWxlLnBhdGgpKSBjb250aW51ZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2FtcG8gZGUgcHJveWVjdG9zIHBhZHJlcyBzZWdcdTAwRkFuIGVsIHRpcG9cbiAgICAgICAgICAgIGNvbnN0IHBhZHJlc0NhbXBvID0gY29uZmlnLnRpcG9Qcm95ZWN0byA9PT0gXCJQR1REXCIgPyBcInByb3llY3RvR1REXCIgOiBcInByb3llY3RvUVwiO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBSZXZpc2FyIHNpIGFsZ3VubyBkZSBzdXMgaGlqb3MgZXN0XHUwMEUxIGVuIGxhIGxpc3RhXG4gICAgICAgICAgICBmb3IgKGNvbnN0IG90cm9Qcm95ZWN0byBvZiB0b2Rvc0xvc1Byb3llY3Rvcykge1xuICAgICAgICAgICAgICAgIGlmICghcGF0aHNBTW9zdHJhci5oYXMob3Ryb1Byb3llY3RvLmZpbGUucGF0aCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhciBzaSBlc3RlIHByb3llY3RvIGVzIHBhZHJlIGRlbCBvdHJvXG4gICAgICAgICAgICAgICAgY29uc3QgcGFkcmVzID0gb3Ryb1Byb3llY3RvW3BhZHJlc0NhbXBvXTtcbiAgICAgICAgICAgICAgICBpZiAoIXBhZHJlcykgY29udGludWU7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgZXNSZWZlcmVuY2lhZG9Db21vID0gQXJyYXkuaXNBcnJheShwYWRyZXMpID8gXG4gICAgICAgICAgICAgICAgICAgIHBhZHJlcy5zb21lKHAgPT4gdGhpcy5yZWZlcmVuY2lhQWxNaXNtb1Byb3llY3RvKHAsIHByb3llY3RvKSkgOiBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZlcmVuY2lhQWxNaXNtb1Byb3llY3RvKHBhZHJlcywgcHJveWVjdG8pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChlc1JlZmVyZW5jaWFkb0NvbW8pIHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aHNBTW9zdHJhci5hZGQocHJveWVjdG8uZmlsZS5wYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgY2FtYmlvc1JlYWxpemFkb3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8gUGFzYWRhIDI6IElkZW50aWZpY2FyIGhpam9zIGRpcmVjdG9zIGRlIGxvcyBwcm95ZWN0b3MgZmlsdHJhZG9zXG4gICAgZm9yIChjb25zdCBwcm95ZWN0byBvZiBwcm95ZWN0b3NGaWx0cmFkb3MpIHtcbiAgICAgICAgLy8gQ2FtcG8gZGUgcHJveWVjdG9zIHBhZHJlcyBzZWdcdTAwRkFuIGVsIHRpcG9cbiAgICAgICAgY29uc3QgcGFkcmVzQ2FtcG8gPSBjb25maWcudGlwb1Byb3llY3RvID09PSBcIlBHVERcIiA/IFwicHJveWVjdG9HVERcIiA6IFwicHJveWVjdG9RXCI7XG4gICAgICAgIFxuICAgICAgICAvLyBCdXNjYXIgcHJveWVjdG9zIHF1ZSB0ZW5nYW4gYSBlc3RlIGNvbW8gcGFkcmVcbiAgICAgICAgZm9yIChjb25zdCBvdHJvUHJveWVjdG8gb2YgdG9kb3NMb3NQcm95ZWN0b3MpIHtcbiAgICAgICAgICAgIGlmIChwYXRoc0FNb3N0cmFyLmhhcyhvdHJvUHJveWVjdG8uZmlsZS5wYXRoKSkgY29udGludWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFZlcmlmaWNhciBzaSBwcm95ZWN0byBlcyBwYWRyZSBkZSBvdHJvUHJveWVjdG9cbiAgICAgICAgICAgIGNvbnN0IHBhZHJlcyA9IG90cm9Qcm95ZWN0b1twYWRyZXNDYW1wb107XG4gICAgICAgICAgICBpZiAoIXBhZHJlcykgY29udGludWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGVzUmVmZXJlbmNpYWRvQ29tbyA9IEFycmF5LmlzQXJyYXkocGFkcmVzKSA/IFxuICAgICAgICAgICAgICAgIHBhZHJlcy5zb21lKHAgPT4gdGhpcy5yZWZlcmVuY2lhQWxNaXNtb1Byb3llY3RvKHAsIHByb3llY3RvKSkgOiBcbiAgICAgICAgICAgICAgICB0aGlzLnJlZmVyZW5jaWFBbE1pc21vUHJveWVjdG8ocGFkcmVzLCBwcm95ZWN0byk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChlc1JlZmVyZW5jaWFkb0NvbW8pIHtcbiAgICAgICAgICAgICAgICBwYXRoc0FNb3N0cmFyLmFkZChvdHJvUHJveWVjdG8uZmlsZS5wYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBSZXRvcm5hciBsb3MgcHJveWVjdG9zIHF1ZSBkZWJlbiBtb3N0cmFyc2VcbiAgICByZXR1cm4gdG9kb3NMb3NQcm95ZWN0b3MuZmlsdGVyKHAgPT4gcGF0aHNBTW9zdHJhci5oYXMocC5maWxlLnBhdGgpKTtcbn1cblxuXG5cbi8qKlxuICogQ29tcHJ1ZWJhIHNpIHVuYSByZWZlcmVuY2lhIChvYmpldG8gbyBzdHJpbmcpIGFwdW50YSBhbCBtaXNtbyBwcm95ZWN0b1xuICogQHBhcmFtIHsqfSByZWZlcmVuY2lhIC0gUHVlZGUgc2VyIG9iamV0byBjb24gcGF0aCwgc3RyaW5nIGNvbiB3aWtpbGluaywgbyBub21icmUgZGlyZWN0b1xuICogQHBhcmFtIHtPYmplY3R9IHByb3llY3RvIC0gUHJveWVjdG8gYSBjb21wYXJhclxuICogQHJldHVybnMge2Jvb2xlYW59IC0gdHJ1ZSBzaSBsYSByZWZlcmVuY2lhIGFwdW50YSBhbCBwcm95ZWN0b1xuICovXG5yZWZlcmVuY2lhQWxNaXNtb1Byb3llY3RvKHJlZmVyZW5jaWEsIHByb3llY3RvKSB7XG4gICAgaWYgKCFyZWZlcmVuY2lhIHx8ICFwcm95ZWN0bykgcmV0dXJuIGZhbHNlO1xuICAgIFxuICAgIC8vIFNpIGVzIHVuIG9iamV0byBjb24gcGF0aFxuICAgIGlmICh0eXBlb2YgcmVmZXJlbmNpYSA9PT0gJ29iamVjdCcgJiYgcmVmZXJlbmNpYS5wYXRoKSB7XG4gICAgICAgIHJldHVybiByZWZlcmVuY2lhLnBhdGggPT09IHByb3llY3RvLmZpbGUucGF0aDtcbiAgICB9XG4gICAgXG4gICAgLy8gU2kgZXMgdW4gc3RyaW5nLCBwb2RyXHUwMEVEYSBzZXIgdW4gd2lraWxpbmsgbyB1biBub21icmUgZGlyZWN0b1xuICAgIGlmICh0eXBlb2YgcmVmZXJlbmNpYSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gVmVyaWZpY2FyIHNpIGVzIHVuIHdpa2lsaW5rIFtbcGF0aHxhbGlhc11dXG4gICAgICAgIGNvbnN0IHdpa2lNYXRjaCA9IHJlZmVyZW5jaWEubWF0Y2goL1xcW1xcWyguKj8pKD86XFx8KC4qPykpP1xcXVxcXS8pO1xuICAgICAgICBpZiAod2lraU1hdGNoKSB7XG4gICAgICAgICAgICBjb25zdCBwYXRoID0gd2lraU1hdGNoWzFdO1xuICAgICAgICAgICAgcmV0dXJuIHBhdGggPT09IHByb3llY3RvLmZpbGUucGF0aCB8fCBcbiAgICAgICAgICAgICAgICAgICBwYXRoID09PSBwcm95ZWN0by5maWxlLmJhc2VuYW1lIHx8IFxuICAgICAgICAgICAgICAgICAgIHBhdGggPT09IHByb3llY3RvLnRpdHVsbztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ29tcGFyYXIgY29uIG5vbWJyZSwgdFx1MDBFRHR1bG8gbyBhbGlhc1xuICAgICAgICByZXR1cm4gcmVmZXJlbmNpYSA9PT0gcHJveWVjdG8uZmlsZS5wYXRoIHx8XG4gICAgICAgICAgICAgICByZWZlcmVuY2lhID09PSBwcm95ZWN0by5maWxlLmJhc2VuYW1lIHx8XG4gICAgICAgICAgICAgICByZWZlcmVuY2lhID09PSBwcm95ZWN0by50aXR1bG8gfHxcbiAgICAgICAgICAgICAgIChwcm95ZWN0by5hbGlhc2VzICYmIHByb3llY3RvLmFsaWFzZXMuaW5jbHVkZXMocmVmZXJlbmNpYSkpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogTmF2ZWdhIGEgdW5hIHRhcmVhIGVzcGVjXHUwMEVEZmljYSBlbiB1bmEgbm90YVxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBSdXRhIGRlIGxhIG5vdGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBsaW5lYSAtIE5cdTAwRkFtZXJvIGRlIGxcdTAwRURuZWEgZGUgbGEgdGFyZWFcbiAqL1xubmF2ZWdhckFUYXJlYShwYXRoLCBsaW5lYSkge1xuICAgIGlmICghcGF0aCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTm8gc2UgcHJvcG9yY2lvblx1MDBGMyB1bmEgcnV0YSBkZSBhcmNoaXZvIHZcdTAwRTFsaWRhXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIC8vIE5hdmVnYXIgYSBsYSBub3RhIHkgcG9zaWNpb25hciBlbiBsYSBsXHUwMEVEbmVhIGRlIGxhIHRhcmVhXG4gICAgdHJ5IHtcbiAgICAgICAgLy8gT2J0ZW5lciBlbCBhcmNoaXZvXG4gICAgICAgIGNvbnN0IGFyY2hpdm8gPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHBhdGgpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFhcmNoaXZvKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYE5vIHNlIGVuY29udHJcdTAwRjMgZWwgYXJjaGl2bzogJHtwYXRofWApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBWZXJpZmljYXIgc2kgcG9kZW1vcyB1c2FyIGVTdGF0ZSBwYXJhIHBvc2ljaW9uYXJzZSBlbiB1bmEgbFx1MDBFRG5lYSBlc3BlY1x1MDBFRGZpY2FcbiAgICAgICAgY29uc3QgY2FuVXNlRVN0YXRlID0gdHlwZW9mIGFwcC53b3Jrc3BhY2Uub3BlbkxpbmtUZXh0ID09PSAnZnVuY3Rpb24nO1xuICAgICAgICBcbiAgICAgICAgaWYgKGNhblVzZUVTdGF0ZSkge1xuICAgICAgICAgICAgLy8gRXN0YSBlcyBsYSBmb3JtYSBtXHUwMEUxcyBtb2Rlcm5hIGRlIGFicmlyIGFyY2hpdm9zIGVuIE9ic2lkaWFuXG4gICAgICAgICAgICBhcHAud29ya3NwYWNlLm9wZW5MaW5rVGV4dChwYXRoLCBcIlwiLCB0cnVlLCB7IGVTdGF0ZTogeyBsaW5lOiBsaW5lYSB9IH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQWx0ZXJuYXRpdmE6IGFicmlyIGVsIGFyY2hpdm8geSBsdWVnbyBpbnRlbnRhciBpciBhIGxhIGxcdTAwRURuZWFcbiAgICAgICAgICAgIGNvbnN0IGxlYWYgPSBhcHAud29ya3NwYWNlLmdldExlYWYoZmFsc2UpO1xuICAgICAgICAgICAgbGVhZi5vcGVuRmlsZShhcmNoaXZvKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBJbnRlbnRhciBwb3NpY2lvbmFyIGVuIGxhIGxcdTAwRURuZWEgZGVzcHVcdTAwRTlzIGRlIHF1ZSBzZSBhYnJhIGVsIGFyY2hpdm9cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxlYWYudmlldyAmJiBsZWFmLnZpZXcuZWRpdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlZGl0b3IgPSBsZWFmLnZpZXcuZWRpdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcih7IGxpbmU6IGxpbmVhLCBjaDogMCB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5zY3JvbGxJbnRvVmlldyh7IGZyb206IHsgbGluZTogbGluZWEsIGNoOiAwIH0sIHRvOiB7IGxpbmU6IGxpbmVhLCBjaDogMCB9IH0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWwgbmF2ZWdhciBhIGxhIHRhcmVhOlwiLCBlKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEZhbGxiYWNrIG1cdTAwRTFzIHJvYnVzdG8gLSBtb3N0cmFyIG1lbnNhamUgYWwgdXN1YXJpb1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gSW50ZW50YXIgYWJyaXIgZWwgYXJjaGl2byBzaW4gcG9zaWNpb25hcnNlIGVuIHVuYSBsXHUwMEVEbmVhIGVzcGVjXHUwMEVEZmljYVxuICAgICAgICAgICAgY29uc3QgYXJjaGl2byA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgocGF0aCk7XG4gICAgICAgICAgICBpZiAoYXJjaGl2bykge1xuICAgICAgICAgICAgICAgIGFwcC53b3Jrc3BhY2UuZ2V0TGVhZihmYWxzZSkub3BlbkZpbGUoYXJjaGl2byk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJObyBzZSBwdWRvIGVuY29udHJhciBlbCBhcmNoaXZvOiBcIiArIHBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBlbiBlbCBmYWxsYmFjayBkZSBuYXZlZ2FjaVx1MDBGM246XCIsIGVycik7XG4gICAgICAgICAgICBuZXcgTm90aWNlKFwiRXJyb3IgYWwgYWJyaXIgZWwgYXJjaGl2bzogXCIgKyBlcnIubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuLy8gLS0tIE1lam9yYSBkZSBsYSBidXNxdWVkYSBkZSBDb250ZXh0b3MgR1REIHBvciBibG9xdWUgZHZqc1xuLyoqXG4gKiBHZW5lcmEgdW5hIHZpc3RhIGRlIHRhcmVhcyBwb3IgY29udGV4dG8gY29uIG5hdmVnYWNpXHUwMEYzbiBpbnRlcmFjdGl2YVxuICogQHBhcmFtIGR2IC0gT2JqZXRvIGRhdGF2aWV3IHBhcmEgYWNjZWRlciBhIHN1cyBmdW5jaW9uZXNcbiAqIEByZXR1cm5zIEVsZW1lbnRvIERPTSBpbnRlcmFjdGl2byBjb24gbG9zIGNvbnRleHRvcyB5IHN1cyB0YXJlYXNcbiAqL1xuYXN5bmMgbW9zdHJhckNvbnRleHRvc0dURChkdikge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIENyZWFyIGVsIGNvbnRlbmVkb3IgcHJpbmNpcGFsXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSBcImNvbnRleHRvcy1ndGQtY29udGFpbmVyXCI7XG4gICAgICAgIFxuICAgICAgICAvLyBBXHUwMEYxYWRpciBlc3RpbG9zIGlubGluZSBuZWNlc2FyaW9zXG4gICAgICAgIGNvbnN0IHN0eWxlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgICAgIHN0eWxlRWwudGV4dENvbnRlbnQgPSBgXG4gICAgICAgIC5oaWdobGlnaHRlZC1saW5lIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKHZhcigtLWludGVyYWN0aXZlLWFjY2VudC1yZ2IpLCAwLjMpICFpbXBvcnRhbnQ7XG4gICAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAxcyBlYXNlLW91dDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLnRhcmVhLWxpbmsge1xuICAgICAgICAgIGNvbG9yOiB2YXIoLS1pbnRlcmFjdGl2ZS1hY2NlbnQpO1xuICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAudGFyZWEtbGluazpob3ZlciB7XG4gICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gICAgICAgICAgY29sb3I6IHZhcigtLWludGVyYWN0aXZlLWFjY2VudC1ob3Zlcik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC5saW5lYS1pbmZvIHtcbiAgICAgICAgICBmb250LXNpemU6IDAuODVlbTtcbiAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBFbCByZXN0byBkZSBlc3RpbG9zIG5lY2VzYXJpb3Mgc2UgY2FyZ2FuIGRlc2RlIGVsIGFyY2hpdm8gQ1NTIGdsb2JhbCAqL1xuICAgICAgICBgO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoc3R5bGVFbCk7XG4gICAgICAgIFxuICAgICAgICAvLyBBXHUwMEYxYWRpciBjb250cm9sZXMgcGFyYSBleHBhbmRpci9jb2xhcHNhci9hY3R1YWxpemFyXG4gICAgICAgIGNvbnN0IGNvbnRyb2xzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgY29udHJvbHNDb250YWluZXIuY2xhc3NOYW1lID0gXCJjb250ZXh0b3MtY29udHJvbGVzXCI7XG4gICAgICAgIFxuICAgICAgICAvLyBCb3RvbmVzIGNvbiBlc3RpbG9zIGRpcmVjdG9zXG4gICAgICAgIGNvbnN0IGJ0bkV4cGFuZGlyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgYnRuRXhwYW5kaXIudGV4dENvbnRlbnQgPSBcIlx1RDgzRFx1RENDMiBFeHBhbmRpciBUb2RvXCI7XG4gICAgICAgIGJ0bkV4cGFuZGlyLmNsYXNzTmFtZSA9IFwiY29udGV4dG9zLWJ0biBleHBhbmRpclwiO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgYnRuQ29sYXBzYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICBidG5Db2xhcHNhci50ZXh0Q29udGVudCA9IFwiXHVEODNEXHVEQ0MxIENvbGFwc2FyIFRvZG9cIjtcbiAgICAgICAgYnRuQ29sYXBzYXIuY2xhc3NOYW1lID0gXCJjb250ZXh0b3MtYnRuIGNvbGFwc2FyXCI7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBidG5SZWZyZXNjYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICBidG5SZWZyZXNjYXIudGV4dENvbnRlbnQgPSBcIlx1RDgzRFx1REQwNCBBY3R1YWxpemFyXCI7XG4gICAgICAgIGJ0blJlZnJlc2Nhci5jbGFzc05hbWUgPSBcImNvbnRleHRvcy1idG4gcmVmcmVzY2FyXCI7XG4gICAgICAgIFxuICAgICAgICBjb250cm9sc0NvbnRhaW5lci5hcHBlbmRDaGlsZChidG5FeHBhbmRpcik7XG4gICAgICAgIGNvbnRyb2xzQ29udGFpbmVyLmFwcGVuZENoaWxkKGJ0bkNvbGFwc2FyKTtcbiAgICAgICAgY29udHJvbHNDb250YWluZXIuYXBwZW5kQ2hpbGQoYnRuUmVmcmVzY2FyKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNvbnRyb2xzQ29udGFpbmVyKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENvbnRlbmVkb3IgcGFyYSBsb3MgY29udGV4dG9zXG4gICAgICAgIGNvbnN0IGNvbnRleHRvc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGNvbnRleHRvc0NvbnRhaW5lci5jbGFzc05hbWUgPSBcImNvbnRleHRvcy1jb250YWluZXJcIjtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNvbnRleHRvc0NvbnRhaW5lcik7XG4gICAgICAgIFxuICAgICAgICAvLyBNb3N0cmFyIGluaWNpYWxtZW50ZSB1biBpbmRpY2Fkb3IgZGUgY2FyZ2FcbiAgICAgICAgY29uc3QgbG9hZGluZ0luZGljYXRvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGxvYWRpbmdJbmRpY2F0b3IuY2xhc3NOYW1lID0gXCJsb2FkaW5nLWluZGljYXRvclwiO1xuICAgICAgICBjb25zdCBzcGlubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgc3Bpbm5lci5jbGFzc05hbWUgPSBcInNwaW5uZXJcIjtcbiAgICAgICAgbG9hZGluZ0luZGljYXRvci5hcHBlbmRDaGlsZChzcGlubmVyKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGxvYWRpbmdUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgbG9hZGluZ1RleHQudGV4dENvbnRlbnQgPSBcIkNhcmdhbmRvIGNvbnRleHRvcy4uLlwiO1xuICAgICAgICBsb2FkaW5nSW5kaWNhdG9yLmFwcGVuZENoaWxkKGxvYWRpbmdUZXh0KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnRleHRvc0NvbnRhaW5lci5hcHBlbmRDaGlsZChsb2FkaW5nSW5kaWNhdG9yKTtcbiAgICAgICAgXG4gICAgICAgIC8vIE9idGVuZXIgZGF0b3MgZGUgY29udGV4dG9zIGEgdHJhdlx1MDBFOXMgZGUgbGEgQVBJIGRlIHRhcmVhc1xuICAgICAgICBjb25zdCB7IGNvbnRleHRvc0NvblRhcmVhcywgdG90YWxDb250ZXh0b3MsIHRvdGFsVGFyZWFzIH0gPSBhd2FpdCB0aGlzLnBsdWdpbi50YXJlYXNBUEkuZ2V0VGFyZWFzQ29udGV4dG9zKCk7XG4gICAgICAgIFxuICAgICAgICBpZiAodG90YWxDb250ZXh0b3MgPT09IDApIHtcbiAgICAgICAgICAgIGNvbnRleHRvc0NvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICAgICAgY29uc3QgZW1wdHlNZXNzYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgICAgICBlbXB0eU1lc3NhZ2UuY2xhc3NOYW1lID0gXCJlcnJvci1tZXNzYWdlXCI7XG4gICAgICAgICAgICBlbXB0eU1lc3NhZ2UudGV4dENvbnRlbnQgPSBcIk5vIHNlIGVuY29udHJhcm9uIHRhcmVhcyBjb24gY29udGV4dG9zIGFzaWduYWRvc1wiO1xuICAgICAgICAgICAgY29udGV4dG9zQ29udGFpbmVyLmFwcGVuZENoaWxkKGVtcHR5TWVzc2FnZSk7XG4gICAgICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBMaW1waWFyIGVsIGNvbnRlbmVkb3IgZGUgY2FyZ2FcbiAgICAgICAgY29udGV4dG9zQ29udGFpbmVyLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIFxuICAgICAgICAvLyBNb3N0cmFyIGVzdGFkXHUwMEVEc3RpY2FzXG4gICAgICAgIGNvbnN0IHN0YXRzRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgc3RhdHNEaXYuY2xhc3NOYW1lID0gXCJjb250ZXh0b3Mtc3RhdHNcIjtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHN0YXRUb3RhbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICBzdGF0VG90YWwudGV4dENvbnRlbnQgPSBgVG90YWwgZGUgY29udGV4dG9zIGNvbiB0YXJlYXM6ICR7dG90YWxDb250ZXh0b3N9YDtcbiAgICAgICAgc3RhdHNEaXYuYXBwZW5kQ2hpbGQoc3RhdFRvdGFsKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHN0YXRUYXJlYXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgc3RhdFRhcmVhcy50ZXh0Q29udGVudCA9IGBUb3RhbCBkZSB0YXJlYXMgZW5jb250cmFkYXM6ICR7dG90YWxUYXJlYXN9YDtcbiAgICAgICAgc3RhdHNEaXYuYXBwZW5kQ2hpbGQoc3RhdFRhcmVhcyk7XG4gICAgICAgIFxuICAgICAgICBjb250ZXh0b3NDb250YWluZXIuYXBwZW5kQ2hpbGQoc3RhdHNEaXYpO1xuICAgICAgICBcbiAgICAgICAgLy8gQ29uc3RydWlyIFx1MDBFMXJib2wgZGUgY29udGV4dG9zXG4gICAgICAgIGNvbnN0IGFyYm9sQ29udGV4dG9zID0gdGhpcy5jb25zdHJ1aXJBcmJvbENvbnRleHRvcyhjb250ZXh0b3NDb25UYXJlYXMpO1xuICAgICAgICBcbiAgICAgICAgLy8gR2VuZXJhciBlbCBIVE1MIGRlIGxvcyBjb250ZXh0b3NcbiAgICAgICAgdGhpcy5nZW5lcmFyQ29udGV4dG9zSFRNTChhcmJvbENvbnRleHRvcywgY29udGV4dG9zQ29uVGFyZWFzLCBjb250ZXh0b3NDb250YWluZXIpO1xuICAgICAgICBcbiAgICAgICAgLy8gQ29uZmlndXJhciBldmVudG9zIHBhcmEgbG9zIGJvdG9uZXNcbiAgICAgICAgYnRuRXhwYW5kaXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFwiLmNvbnRleHRvLWRldGFpbHNcIikuZm9yRWFjaChkZXRhaWxzID0+IHtcbiAgICAgICAgICAgICAgICBkZXRhaWxzLnNldEF0dHJpYnV0ZShcIm9wZW5cIiwgXCJ0cnVlXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgYnRuQ29sYXBzYXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFwiLmNvbnRleHRvLWRldGFpbHNcIikuZm9yRWFjaChkZXRhaWxzID0+IHtcbiAgICAgICAgICAgICAgICBkZXRhaWxzLnJlbW92ZUF0dHJpYnV0ZShcIm9wZW5cIik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBidG5SZWZyZXNjYXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIC8vIFJlZW1wbGF6YXIgZWwgY29udGVuZWRvciBhY3R1YWwgcG9yIHVuYSB2ZXJzaVx1MDBGM24gYWN0dWFsaXphZGFcbiAgICAgICAgICAgIGNvbnN0IG51ZXZvQ29udGFpbmVyID0gYXdhaXQgdGhpcy5tb3N0cmFyQ29udGV4dG9zR1REKGR2KTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChudWV2b0NvbnRhaW5lciwgY29udGFpbmVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgICAgICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZW4gbW9zdHJhckNvbnRleHRvc0dURDpcIiwgZXJyb3IpO1xuICAgICAgICBcbiAgICAgICAgLy8gRGV2b2x2ZXIgdW4gbWVuc2FqZSBkZSBlcnJvclxuICAgICAgICBjb25zdCBlcnJvckNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGVycm9yQ29udGFpbmVyLmNsYXNzTmFtZSA9IFwiZXJyb3ItbWVzc2FnZVwiO1xuICAgICAgICBlcnJvckNvbnRhaW5lci50ZXh0Q29udGVudCA9IGBFcnJvciBhbCBjYXJnYXIgY29udGV4dG9zOiAke2Vycm9yLm1lc3NhZ2V9YDtcbiAgICAgICAgcmV0dXJuIGVycm9yQ29udGFpbmVyO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDb25zdHJ1eWUgbGEgZXN0cnVjdHVyYSBkZSBcdTAwRTFyYm9sIGRlIGNvbnRleHRvc1xuICogQHBhcmFtIGNvbnRleHRvc0NvblRhcmVhcyBNYXBhIGRlIGNvbnRleHRvcyBjb24gc3VzIHRhcmVhc1xuICogQHJldHVybnMgRXN0cnVjdHVyYSBqZXJcdTAwRTFycXVpY2EgZGUgY29udGV4dG9zXG4gKi9cbmNvbnN0cnVpckFyYm9sQ29udGV4dG9zKGNvbnRleHRvc0NvblRhcmVhcykge1xuICAgIGNvbnN0IGFyYm9sID0gbmV3IE1hcCgpO1xuXG4gICAgQXJyYXkuZnJvbShjb250ZXh0b3NDb25UYXJlYXMua2V5cygpKS5mb3JFYWNoKGNvbnRleHRvID0+IHtcbiAgICAgICAgY29uc3Qgbml2ZWxlcyA9IGNvbnRleHRvLnNwbGl0KCcgXHUyMTkyICcpO1xuICAgICAgICBsZXQgbm9kb0FjdHVhbCA9IGFyYm9sO1xuXG4gICAgICAgIG5pdmVsZXMuZm9yRWFjaCgobml2ZWwsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoIW5vZG9BY3R1YWwuaGFzKG5pdmVsKSkge1xuICAgICAgICAgICAgICAgIG5vZG9BY3R1YWwuc2V0KG5pdmVsLCB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmVhczogaW5kZXggPT09IG5pdmVsZXMubGVuZ3RoIC0gMSA/IGNvbnRleHRvc0NvblRhcmVhcy5nZXQoY29udGV4dG8pIDogW10sXG4gICAgICAgICAgICAgICAgICAgIHN1YmNvbnRleHRvczogbmV3IE1hcCgpLFxuICAgICAgICAgICAgICAgICAgICBydXRhQ29tcGxldGE6IG5pdmVsZXMuc2xpY2UoMCwgaW5kZXggKyAxKS5qb2luKCcgXHUyMTkyICcpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub2RvQWN0dWFsID0gbm9kb0FjdHVhbC5nZXQobml2ZWwpLnN1YmNvbnRleHRvcztcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJib2w7XG59XG5cbi8qKlxuICogR2VuZXJhIGVsIEhUTUwgZGUgbG9zIGNvbnRleHRvcyByZWN1cnNpdmFtZW50ZVxuICogQHBhcmFtIGFyYm9sQ29udGV4dG9zIEVzdHJ1Y3R1cmEgamVyXHUwMEUxcnF1aWNhIGRlIGNvbnRleHRvc1xuICogQHBhcmFtIGNvbnRleHRvc0NvblRhcmVhcyBNYXBhIG9yaWdpbmFsIGRlIGNvbnRleHRvcyBjb24gdGFyZWFzXG4gKiBAcGFyYW0gY29udGFpbmVyIEVsZW1lbnRvIERPTSBkb25kZSBhXHUwMEYxYWRpciBsb3MgY29udGV4dG9zXG4gKi9cbmdlbmVyYXJDb250ZXh0b3NIVE1MKGFyYm9sQ29udGV4dG9zLCBjb250ZXh0b3NDb25UYXJlYXMsIGNvbnRhaW5lcikge1xuICAgIGNvbnN0IHByb2Nlc2FyTm9kbyA9IChub2RvLCBuaXZlbCA9IDAsIHBhcmVudEVsKSA9PiB7XG4gICAgICAgIC8vIE9yZGVuYXIgY29udGV4dG9zIHBvciBjYW50aWRhZCBkZSB0YXJlYXNcbiAgICAgICAgY29uc3Qgc29ydGVkS2V5cyA9IEFycmF5LmZyb20obm9kby5rZXlzKCkpLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmVhc0EgPSBub2RvLmdldChhKS50YXJlYXMubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgdGFyZWFzQiA9IG5vZG8uZ2V0KGIpLnRhcmVhcy5sZW5ndGg7XG4gICAgICAgICAgICByZXR1cm4gdGFyZWFzQiAtIHRhcmVhc0E7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNvcnRlZEtleXMuZm9yRWFjaChjb250ZXh0byA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmZvID0gbm9kby5nZXQoY29udGV4dG8pO1xuICAgICAgICAgICAgY29uc3QgY2FudGlkYWRUYXJlYXMgPSBpbmZvLnRhcmVhcy5sZW5ndGg7XG4gICAgICAgICAgICBjb25zdCB0aWVuZVN1YmNvbnRleHRvcyA9IGluZm8uc3ViY29udGV4dG9zLnNpemUgPiAwO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBTb2xvIGNyZWFyIGVsZW1lbnRvcyBzaSBoYXkgdGFyZWFzIG8gc3ViY29udGV4dG9zXG4gICAgICAgICAgICBpZiAoY2FudGlkYWRUYXJlYXMgPiAwIHx8IHRpZW5lU3ViY29udGV4dG9zKSB7XG4gICAgICAgICAgICAgICAgLy8gQ3JlYXIgZWxlbWVudG8gZGV0YWlsc1xuICAgICAgICAgICAgICAgIGNvbnN0IGRldGFpbHNFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkZXRhaWxzXCIpO1xuICAgICAgICAgICAgICAgIGRldGFpbHNFbC5jbGFzc05hbWUgPSBgY29udGV4dG8tZGV0YWlscyBuaXZlbC0ke25pdmVsfWA7XG4gICAgICAgICAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQoZGV0YWlsc0VsKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBDcmVhciBzdW1tYXJ5XG4gICAgICAgICAgICAgICAgY29uc3Qgc3VtbWFyeUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN1bW1hcnlcIik7XG4gICAgICAgICAgICAgICAgc3VtbWFyeUVsLmNsYXNzTmFtZSA9IFwiY29udGV4dG8tc3VtbWFyeVwiO1xuICAgICAgICAgICAgICAgIGRldGFpbHNFbC5hcHBlbmRDaGlsZChzdW1tYXJ5RWwpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEVuY2FiZXphZG8gY29uIG5vbWJyZSB5IGNvbnRhZG9yXG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgIGhlYWRlckVsLmNsYXNzTmFtZSA9IFwiY29udGV4dG8taGVhZGVyXCI7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3Qgbm9tYnJlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgIG5vbWJyZUVsLmNsYXNzTmFtZSA9IFwiY29udGV4dG8tbm9tYnJlXCI7XG4gICAgICAgICAgICAgICAgbm9tYnJlRWwudGV4dENvbnRlbnQgPSB0aGlzLmZvcm1hdGVhck5vbWJyZUNvbnRleHRvKGNvbnRleHRvKTtcbiAgICAgICAgICAgICAgICBoZWFkZXJFbC5hcHBlbmRDaGlsZChub21icmVFbCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQ29udGFkb3IgZGUgdGFyZWFzXG4gICAgICAgICAgICAgICAgaWYgKGNhbnRpZGFkVGFyZWFzID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250YWRvckVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGFkb3JFbC5jbGFzc05hbWUgPSBcImNvbnRleHRvLWNvbnRhZG9yXCI7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhZG9yRWwudGV4dENvbnRlbnQgPSBjYW50aWRhZFRhcmVhcy50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJFbC5hcHBlbmRDaGlsZChjb250YWRvckVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgc3VtbWFyeUVsLmFwcGVuZENoaWxkKGhlYWRlckVsKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBDb250ZW5pZG8gZGUgdGFyZWFzXG4gICAgICAgICAgICAgICAgaWYgKGNhbnRpZGFkVGFyZWFzID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJlYXNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgICAgICB0YXJlYXNDb250YWluZXIuY2xhc3NOYW1lID0gXCJjb250ZXh0by10YXJlYXNcIjtcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsc0VsLmFwcGVuZENoaWxkKHRhcmVhc0NvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBPcmRlbmFyIHkgcmVuZGVyaXphciB0YXJlYXNcbiAgICAgICAgICAgICAgICAgICAgaW5mby50YXJlYXMuZm9yRWFjaCh0YXJlYSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWFyVGFyZWFFbGVtZW50KHRhcmVhLCB0YXJlYXNDb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gUHJvY2VzYXIgc3ViY29udGV4dG9zXG4gICAgICAgICAgICAgICAgaWYgKHRpZW5lU3ViY29udGV4dG9zKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1YmNvbnRleHRvc0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICAgICAgc3ViY29udGV4dG9zRWwuY2xhc3NOYW1lID0gXCJzdWJjb250ZXh0b3MtY29udGFpbmVyXCI7XG4gICAgICAgICAgICAgICAgICAgIGRldGFpbHNFbC5hcHBlbmRDaGlsZChzdWJjb250ZXh0b3NFbCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNhck5vZG8oaW5mby5zdWJjb250ZXh0b3MsIG5pdmVsICsgMSwgc3ViY29udGV4dG9zRWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBcbiAgICAvLyBJbmljaWFyIHByb2Nlc2FtaWVudG8gcmVjdXJzaXZvIGRlc2RlIGVsIG5pdmVsIDBcbiAgICBwcm9jZXNhck5vZG8oYXJib2xDb250ZXh0b3MsIDAsIGNvbnRhaW5lcik7XG59XG5cbi8vIFJlZW1wbGF6byBwYXJhIGNyZWFyVGFyZWFFbGVtZW50IGVuIGxhIGNsYXNlIGFkZE9uc0FQSVxuY3JlYXJUYXJlYUVsZW1lbnQodGFyZWEsIGNvbnRhaW5lcikge1xuICAgIC8vIEVsZW1lbnRvIHByaW5jaXBhbCBkZSBsYSB0YXJlYVxuICAgIGNvbnN0IHRhcmVhRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRhcmVhRWwuY2xhc3NOYW1lID0gYHRhcmVhLWl0ZW0gJHt0YXJlYS5pc0Jsb2NrZWQgPyAndGFyZWEtYmxvcXVlYWRhJyA6ICcnfWA7XG4gICAgXG4gICAgLy8gVGV4dG8gZGUgbGEgdGFyZWFcbiAgICBjb25zdCB0ZXh0b0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0ZXh0b0VsLmNsYXNzTmFtZSA9IFwidGFyZWEtdGV4dG9cIjtcbiAgICBcbiAgICBjb25zdCBjaGVja2JveEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgY2hlY2tib3hFbC5jbGFzc05hbWUgPSBcInRhcmVhLWNoZWNrYm94XCI7XG4gICAgY2hlY2tib3hFbC50ZXh0Q29udGVudCA9IFwiXHUyNjEwXCI7XG4gICAgdGV4dG9FbC5hcHBlbmRDaGlsZChjaGVja2JveEVsKTtcbiAgICBcbiAgICBjb25zdCBjb250ZW5pZG9FbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIGNvbnRlbmlkb0VsLmNsYXNzTmFtZSA9IFwidGFyZWEtY29udGVuaWRvXCI7XG4gICAgY29udGVuaWRvRWwudGV4dENvbnRlbnQgPSB0YXJlYS50ZXh0bztcbiAgICB0ZXh0b0VsLmFwcGVuZENoaWxkKGNvbnRlbmlkb0VsKTtcbiAgICBcbiAgICB0YXJlYUVsLmFwcGVuZENoaWxkKHRleHRvRWwpO1xuICAgIFxuICAgIC8vIE1ldGFkYXRvc1xuICAgIGNvbnN0IG1ldGFkYXRvc0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBtZXRhZGF0b3NFbC5jbGFzc05hbWUgPSBcInRhcmVhLW1ldGFkYXRvc1wiO1xuICAgIFxuICAgIC8vIFViaWNhY2lcdTAwRjNuIGNvbiBuYXZlZ2FjaVx1MDBGM25cbiAgICBjb25zdCB1YmljYWNpb25FbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdWJpY2FjaW9uRWwuY2xhc3NOYW1lID0gXCJ0YXJlYS11YmljYWNpb25cIjtcbiAgICBcbiAgICBjb25zdCBpY29ub1ViaWNhY2lvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIGljb25vVWJpY2FjaW9uLmNsYXNzTmFtZSA9IFwibWV0YWRhdG8taWNvbm9cIjtcbiAgICBpY29ub1ViaWNhY2lvbi50ZXh0Q29udGVudCA9IFwiXHVEODNEXHVEQ0NEXCI7XG4gICAgdWJpY2FjaW9uRWwuYXBwZW5kQ2hpbGQoaWNvbm9VYmljYWNpb24pO1xuICAgIFxuICAgIGNvbnN0IHZhbG9yVWJpY2FjaW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgdmFsb3JVYmljYWNpb24uY2xhc3NOYW1lID0gXCJtZXRhZGF0by12YWxvclwiO1xuICAgIFxuICAgIC8vIEVubGFjZSBwYXJhIG5hdmVnYWNpXHUwMEYzblxuICAgIGNvbnN0IGVubGFjZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgIGVubGFjZS5jbGFzc05hbWUgPSBcImludGVybmFsLWxpbmsgdGFyZWEtbGlua1wiO1xuICAgIGVubGFjZS50ZXh0Q29udGVudCA9IHRhcmVhLnRpdHVsbztcbiAgICBcbiAgICAvLyBWZXJpZmljYXIgc2kgbGEgcnV0YSBkZWwgYXJjaGl2byBlcyB2XHUwMEUxbGlkYVxuICAgIGxldCBydXRhVmFsaWRhID0gdGFyZWEucnV0YUFyY2hpdm87XG4gICAgXG4gICAgLy8gRWxpbWluYXIgY3VhbHF1aWVyIGNhclx1MDBFMWN0ZXIgd2lraVxuICAgIGlmIChydXRhVmFsaWRhKSB7XG4gICAgICAgIC8vIExpbXBpYXIgcG9zaWJsZXMgZm9ybWF0b3Mgd2lraSBbW3J1dGF8YWxpYXNdXVxuICAgICAgICBjb25zdCB3aWtpTWF0Y2ggPSBydXRhVmFsaWRhLm1hdGNoKC9cXFtcXFsoLio/KSg/OlxcfCguKj8pKT9cXF1cXF0vKTtcbiAgICAgICAgaWYgKHdpa2lNYXRjaCkge1xuICAgICAgICAgICAgcnV0YVZhbGlkYSA9IHdpa2lNYXRjaFsxXTsgLy8gVXNhciBzb2xvIGxhIHJ1dGEsIG5vIGVsIGFsaWFzXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEFzZWd1cmFyc2UgZGUgcXVlIGxhIHJ1dGEgdGVybWluYSBlbiAubWQgc2kgZXMgdW4gYXJjaGl2byBtYXJrZG93blxuICAgICAgICBpZiAoIXJ1dGFWYWxpZGEuZW5kc1dpdGgoJy5tZCcpICYmIGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgocnV0YVZhbGlkYSArICcubWQnKSkge1xuICAgICAgICAgICAgcnV0YVZhbGlkYSArPSAnLm1kJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBBbG1hY2VuYXIgZGF0b3Mgc2VndXJvcyBwYXJhIG5hdmVnYWNpXHUwMEYzblxuICAgIGVubGFjZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcGF0aCcsIHJ1dGFWYWxpZGEgfHwgJycpO1xuICAgIGVubGFjZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtbGluZScsIHRhcmVhLmxpbmVJbmZvPy5udW1lcm8/LnRvU3RyaW5nKCkgfHwgJzAnKTtcbiAgICBlbmxhY2Uuc2V0QXR0cmlidXRlKCdkYXRhLXRleHRvJywgdGFyZWEudGV4dG9PcmlnaW5hbCB8fCB0YXJlYS50ZXh0byB8fCAnJyk7XG4gICAgXG4gICAgLy8gVXNhciBlbCBtXHUwMEU5dG9kbyBzZWd1cm8gZGUgT2JzaWRpYW4gcGFyYSBsYSBuYXZlZ2FjaVx1MDBGM25cbiAgICBlbmxhY2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgcGF0aCA9IGVubGFjZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGF0aCcpO1xuICAgICAgICBjb25zdCBsaW5lID0gcGFyc2VJbnQoZW5sYWNlLmdldEF0dHJpYnV0ZSgnZGF0YS1saW5lJyksIDEwKTtcbiAgICAgICAgY29uc3QgdGV4dG8gPSBlbmxhY2UuZ2V0QXR0cmlidXRlKCdkYXRhLXRleHRvJyk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIXBhdGgpIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1J1dGEgZGVsIGFyY2hpdm8gbm8gZGlzcG9uaWJsZScpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBWZXJpZmljYXIgcXVlIGVsIGFyY2hpdm8gZXhpc3RlIGFudGVzIGRlIGludGVudGFyIGFicmlybG9cbiAgICAgICAgY29uc3QgZmlsZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgocGF0aCk7XG4gICAgICAgIGlmICghZmlsZSkge1xuICAgICAgICAgICAgbmV3IE5vdGljZShgQXJjaGl2byBubyBlbmNvbnRyYWRvOiAke3BhdGh9YCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFVzYXIgZWwgbVx1MDBFOXRvZG8gZGUgbmF2ZWdhY2lcdTAwRjNuIGNvbiByZXNhbHRhZG8geSBhYnJpciBlbiBudWV2YSBwZXN0YVx1MDBGMWFcbiAgICAgICAgdGhpcy5uYXZlZ2FyQVRhcmVhQ29uUmVzYWx0YWRvKHBhdGgsIGxpbmUsIHRleHRvLCB0cnVlKTsgLy8gUGFzYW1vcyB0cnVlIHBhcmEgaW5kaWNhciBudWV2YSBwZXN0YVx1MDBGMWFcbiAgICB9KTtcbiAgICBcbiAgICB2YWxvclViaWNhY2lvbi5hcHBlbmRDaGlsZChlbmxhY2UpO1xuICAgIFxuICAgIC8vIEFcdTAwRjFhZGlyIG5cdTAwRkFtZXJvIGRlIGxcdTAwRURuZWEgc2kgZXhpc3RlXG4gICAgaWYgKHRhcmVhLmxpbmVJbmZvPy5udW1lcm8pIHtcbiAgICAgICAgY29uc3QgbGluZWFJbmZvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgIGxpbmVhSW5mby5jbGFzc05hbWUgPSBcImxpbmVhLWluZm9cIjtcbiAgICAgICAgbGluZWFJbmZvLnRleHRDb250ZW50ID0gYCAobFx1MDBFRG5lYSAke3RhcmVhLmxpbmVJbmZvLm51bWVyb30pYDtcbiAgICAgICAgdmFsb3JVYmljYWNpb24uYXBwZW5kQ2hpbGQobGluZWFJbmZvKTtcbiAgICB9XG4gICAgXG4gICAgdWJpY2FjaW9uRWwuYXBwZW5kQ2hpbGQodmFsb3JVYmljYWNpb24pO1xuICAgIG1ldGFkYXRvc0VsLmFwcGVuZENoaWxkKHViaWNhY2lvbkVsKTtcbiAgICBcbiAgICAvLyBGZWNoYXNcbiAgICBpZiAodGFyZWEuZmVjaGFWZW5jaW1pZW50byB8fCB0YXJlYS5mZWNoYVNjaGVkdWxlZCB8fCB0YXJlYS5mZWNoYVN0YXJ0KSB7XG4gICAgICAgIGNvbnN0IGZlY2hhc0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgZmVjaGFzRWwuY2xhc3NOYW1lID0gXCJ0YXJlYS1mZWNoYXNcIjtcbiAgICAgICAgXG4gICAgICAgIGlmICh0YXJlYS5mZWNoYVZlbmNpbWllbnRvKSB7XG4gICAgICAgICAgICBjb25zdCBmZWNoYUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIGZlY2hhRWwuY2xhc3NOYW1lID0gXCJ0YXJlYS1mZWNoYSB2ZW5jaW1pZW50b1wiO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBpY29ub0ZlY2hhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgICAgICBpY29ub0ZlY2hhLmNsYXNzTmFtZSA9IFwibWV0YWRhdG8taWNvbm9cIjtcbiAgICAgICAgICAgIGljb25vRmVjaGEudGV4dENvbnRlbnQgPSBcIlx1RDgzRFx1RENDNVwiO1xuICAgICAgICAgICAgZmVjaGFFbC5hcHBlbmRDaGlsZChpY29ub0ZlY2hhKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgdmFsb3JGZWNoYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICAgICAgdmFsb3JGZWNoYS5jbGFzc05hbWUgPSBcIm1ldGFkYXRvLXZhbG9yXCI7XG4gICAgICAgICAgICB2YWxvckZlY2hhLnRleHRDb250ZW50ID0gdGFyZWEuZmVjaGFWZW5jaW1pZW50bztcbiAgICAgICAgICAgIGZlY2hhRWwuYXBwZW5kQ2hpbGQodmFsb3JGZWNoYSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZlY2hhc0VsLmFwcGVuZENoaWxkKGZlY2hhRWwpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAodGFyZWEuZmVjaGFTY2hlZHVsZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGZlY2hhRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgZmVjaGFFbC5jbGFzc05hbWUgPSBcInRhcmVhLWZlY2hhIHNjaGVkdWxlZFwiO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBpY29ub0ZlY2hhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgICAgICBpY29ub0ZlY2hhLmNsYXNzTmFtZSA9IFwibWV0YWRhdG8taWNvbm9cIjtcbiAgICAgICAgICAgIGljb25vRmVjaGEudGV4dENvbnRlbnQgPSBcIlx1MjNGM1wiO1xuICAgICAgICAgICAgZmVjaGFFbC5hcHBlbmRDaGlsZChpY29ub0ZlY2hhKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgdmFsb3JGZWNoYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICAgICAgdmFsb3JGZWNoYS5jbGFzc05hbWUgPSBcIm1ldGFkYXRvLXZhbG9yXCI7XG4gICAgICAgICAgICB2YWxvckZlY2hhLnRleHRDb250ZW50ID0gdGFyZWEuZmVjaGFTY2hlZHVsZWQ7XG4gICAgICAgICAgICBmZWNoYUVsLmFwcGVuZENoaWxkKHZhbG9yRmVjaGEpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBmZWNoYXNFbC5hcHBlbmRDaGlsZChmZWNoYUVsKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHRhcmVhLmZlY2hhU3RhcnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGZlY2hhRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgZmVjaGFFbC5jbGFzc05hbWUgPSBcInRhcmVhLWZlY2hhIHN0YXJ0XCI7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGljb25vRmVjaGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgICAgIGljb25vRmVjaGEuY2xhc3NOYW1lID0gXCJtZXRhZGF0by1pY29ub1wiO1xuICAgICAgICAgICAgaWNvbm9GZWNoYS50ZXh0Q29udGVudCA9IFwiXHVEODNEXHVERUVCXCI7XG4gICAgICAgICAgICBmZWNoYUVsLmFwcGVuZENoaWxkKGljb25vRmVjaGEpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCB2YWxvckZlY2hhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgICAgICB2YWxvckZlY2hhLmNsYXNzTmFtZSA9IFwibWV0YWRhdG8tdmFsb3JcIjtcbiAgICAgICAgICAgIHZhbG9yRmVjaGEudGV4dENvbnRlbnQgPSB0YXJlYS5mZWNoYVN0YXJ0O1xuICAgICAgICAgICAgZmVjaGFFbC5hcHBlbmRDaGlsZCh2YWxvckZlY2hhKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZmVjaGFzRWwuYXBwZW5kQ2hpbGQoZmVjaGFFbCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIG1ldGFkYXRvc0VsLmFwcGVuZENoaWxkKGZlY2hhc0VsKTtcbiAgICB9XG4gICAgXG4gICAgLy8gSG9yYXJpb3NcbiAgICBpZiAodGFyZWEuaG9yYUluaWNpbyB8fCB0YXJlYS5ob3JhRmluKSB7XG4gICAgICAgIGNvbnN0IGhvcmFyaW9FbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGhvcmFyaW9FbC5jbGFzc05hbWUgPSBcInRhcmVhLWhvcmFyaW9cIjtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGljb25vSG9yYXJpbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICBpY29ub0hvcmFyaW8uY2xhc3NOYW1lID0gXCJtZXRhZGF0by1pY29ub1wiO1xuICAgICAgICBpY29ub0hvcmFyaW8udGV4dENvbnRlbnQgPSBcIlx1MjNGMFwiO1xuICAgICAgICBob3JhcmlvRWwuYXBwZW5kQ2hpbGQoaWNvbm9Ib3JhcmlvKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHZhbG9ySG9yYXJpbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICB2YWxvckhvcmFyaW8uY2xhc3NOYW1lID0gXCJtZXRhZGF0by12YWxvclwiO1xuICAgICAgICB2YWxvckhvcmFyaW8udGV4dENvbnRlbnQgPSBgJHt0YXJlYS5ob3JhSW5pY2lvIHx8ICctLTotLSd9IC0gJHt0YXJlYS5ob3JhRmluIHx8ICctLTotLSd9YDtcbiAgICAgICAgaG9yYXJpb0VsLmFwcGVuZENoaWxkKHZhbG9ySG9yYXJpbyk7XG4gICAgICAgIFxuICAgICAgICBtZXRhZGF0b3NFbC5hcHBlbmRDaGlsZChob3JhcmlvRWwpO1xuICAgIH1cbiAgICBcbiAgICAvLyBQZXJzb25hcyBhc2lnbmFkYXNcbiAgICBpZiAodGFyZWEuZXRpcXVldGFzLnBlcnNvbmFzPy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHBlcnNvbmFzRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBwZXJzb25hc0VsLmNsYXNzTmFtZSA9IFwidGFyZWEtcGVyc29uYXNcIjtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGljb25vUGVyc29uYXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgaWNvbm9QZXJzb25hcy5jbGFzc05hbWUgPSBcIm1ldGFkYXRvLWljb25vXCI7XG4gICAgICAgIGljb25vUGVyc29uYXMudGV4dENvbnRlbnQgPSBcIlx1RDgzRFx1REM2NFwiO1xuICAgICAgICBwZXJzb25hc0VsLmFwcGVuZENoaWxkKGljb25vUGVyc29uYXMpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgdmFsb3JQZXJzb25hcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICB2YWxvclBlcnNvbmFzLmNsYXNzTmFtZSA9IFwibWV0YWRhdG8tdmFsb3JcIjtcbiAgICAgICAgdmFsb3JQZXJzb25hcy50ZXh0Q29udGVudCA9IHRhcmVhLmV0aXF1ZXRhcy5wZXJzb25hcy5qb2luKCcgfCAnKTtcbiAgICAgICAgcGVyc29uYXNFbC5hcHBlbmRDaGlsZCh2YWxvclBlcnNvbmFzKTtcbiAgICAgICAgXG4gICAgICAgIG1ldGFkYXRvc0VsLmFwcGVuZENoaWxkKHBlcnNvbmFzRWwpO1xuICAgIH1cbiAgICBcbiAgICB0YXJlYUVsLmFwcGVuZENoaWxkKG1ldGFkYXRvc0VsKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodGFyZWFFbCk7XG59XG5cbi8vIE1cdTAwRTl0b2RvIG1lam9yYWRvIGRlIG5hdmVnYWNpXHUwMEYzbiBhIHRhcmVhcyBjb24gdmFsaWRhY2lcdTAwRjNuIGFkaWNpb25hbFxuYXN5bmMgbmF2ZWdhckFUYXJlYUNvblJlc2FsdGFkbyhwYXRoLCBsaW5lTnVtYmVyLCB0ZXh0b1RhcmVhLCBudWV2YVBlc3RhXHUwMEYxYSA9IHRydWUpIHtcbiAgICB0cnkge1xuICAgICAgICAvLyBWZXJpZmljYXIgcXVlIGxhIHJ1dGEgZXMgdlx1MDBFMWxpZGFcbiAgICAgICAgY29uc3QgZmlsZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgocGF0aCk7XG4gICAgICAgIGlmICghZmlsZSkge1xuICAgICAgICAgICAgbmV3IE5vdGljZShgQXJjaGl2byBubyBlbmNvbnRyYWRvOiAke3BhdGh9YCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEludGVudGFyIGFicmlyIGVsIGFyY2hpdm8sIG9wY2lvbmFsbWVudGUgZW4gdW5hIG51ZXZhIHBlc3RhXHUwMEYxYVxuICAgICAgICBjb25zdCBsZWFmID0gYXBwLndvcmtzcGFjZS5nZXRMZWFmKG51ZXZhUGVzdGFcdTAwRjFhKTsgLy8gJ3RydWUnIGluZGljYSBjcmVhciB1bmEgbnVldmEgcGVzdGFcdTAwRjFhXG4gICAgICAgIGF3YWl0IGxlYWYub3BlbkZpbGUoZmlsZSk7XG4gICAgICAgIFxuICAgICAgICAvLyBBcGxpY2FyIHJlc2FsdGFkbyBkZXNwdVx1MDBFOXMgZGUgcXVlIGVsIGFyY2hpdm8gc2UgaGF5YSBhYmllcnRvIGNvbXBsZXRhbWVudGVcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlZGl0b3IgPSBsZWFmLnZpZXcuZWRpdG9yO1xuICAgICAgICAgICAgaWYgKCFlZGl0b3IpIHJldHVybjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGxpbmVOdW1iZXIgPiAwKSB7XG4gICAgICAgICAgICAgICAgLy8gTW92ZXIgY3Vyc29yIHkgcGFudGFsbGEgYSBsYSBsXHUwMEVEbmVhXG4gICAgICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcih7IGxpbmU6IGxpbmVOdW1iZXIgLSAxLCBjaDogMCB9KTtcbiAgICAgICAgICAgICAgICBlZGl0b3Iuc2Nyb2xsSW50b1ZpZXcoXG4gICAgICAgICAgICAgICAgICAgIHsgZnJvbTogeyBsaW5lOiBsaW5lTnVtYmVyIC0gMSwgY2g6IDAgfSwgdG86IHsgbGluZTogbGluZU51bWJlciAtIDEsIGNoOiAwIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQXBsaWNhciByZXNhbHRhZG8gdmlzdWFsIFxuICAgICAgICAgICAgICAgIHRoaXMucmVzYWx0YXJMaW5lYVRlbXBvcmFsbWVudGUoZWRpdG9yLCBsaW5lTnVtYmVyIC0gMSk7XG4gICAgICAgICAgICB9IFxuICAgICAgICAgICAgLy8gU2kgbm8gdGVuZW1vcyBuXHUwMEZBbWVybyBkZSBsXHUwMEVEbmVhIHBlcm8gdGVuZW1vcyB0ZXh0bywgYnVzY2Ftb3MgZWwgdGV4dG9cbiAgICAgICAgICAgIGVsc2UgaWYgKHRleHRvVGFyZWEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW5pZG8gPSBlZGl0b3IuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lYXMgPSBjb250ZW5pZG8uc3BsaXQoJ1xcbicpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZWFzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEJ1c2NhciB0ZXh0byBsaW1waW8gbyBjb24gbWFyY2Fkb3JlcyBkZSB0YXJlYVxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0b0xpbXBpbyA9IHRleHRvVGFyZWEucmVwbGFjZSgvXi1cXHMqXFxbW15cXF1dK1xcXVxccyovLCAnJykudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lYUxpbXBpYSA9IGxpbmVhc1tpXS5yZXBsYWNlKC9eLVxccypcXFtbXlxcXV0rXFxdXFxzKi8sICcnKS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAobGluZWFzW2ldLmluY2x1ZGVzKHRleHRvVGFyZWEpIHx8IGxpbmVhTGltcGlhLmluY2x1ZGVzKHRleHRvTGltcGlvKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTW92ZXIgY3Vyc29yIHkgcGFudGFsbGEgYSBsYSBsXHUwMEVEbmVhIGVuY29udHJhZGFcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5zZXRDdXJzb3IoeyBsaW5lOiBpLCBjaDogMCB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5zY3JvbGxJbnRvVmlldyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGZyb206IHsgbGluZTogaSwgY2g6IDAgfSwgdG86IHsgbGluZTogaSwgY2g6IGxpbmVhc1tpXS5sZW5ndGggfSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwbGljYXIgcmVzYWx0YWRvIHZpc3VhbFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNhbHRhckxpbmVhVGVtcG9yYWxtZW50ZShlZGl0b3IsIGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDMwMCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZW4gbmF2ZWdhckFUYXJlYUNvblJlc2FsdGFkbzonLCBlcnJvcik7XG4gICAgICAgIG5ldyBOb3RpY2UoYEVycm9yIGFsIG5hdmVnYXI6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICB9XG59XG5cbi8vIFZlcnNpXHUwMEYzbiBtZWpvcmFkYSBkZWwgcmVzYWx0YWRvIGRlIGxcdTAwRURuZWFzXG5yZXNhbHRhckxpbmVhVGVtcG9yYWxtZW50ZShlZGl0b3IsIGxpbmVJbmRleCkge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIFVzYXIgQ002IG8gQ001IGRlcGVuZGllbmRvIGRlbCBlZGl0b3JcbiAgICAgICAgaWYgKGVkaXRvci5jbSAmJiBlZGl0b3IuY20uc3RhdGUpIHtcbiAgICAgICAgICAgIC8vIEVkaXRvciBtb2Rlcm5vIChDTTYpXG4gICAgICAgICAgICBjb25zdCBsaW5lRGl2ID0gZWRpdG9yLmNtLmRvbS5xdWVyeVNlbGVjdG9yKCcuY20tY29udGVudCcpO1xuICAgICAgICAgICAgaWYgKGxpbmVEaXYpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lRWxlbWVudHMgPSBsaW5lRGl2LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jbS1saW5lJyk7XG4gICAgICAgICAgICAgICAgaWYgKGxpbmVFbGVtZW50cyAmJiBsaW5lRWxlbWVudHMubGVuZ3RoID4gbGluZUluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVFbGVtZW50c1tsaW5lSW5kZXhdLmNsYXNzTGlzdC5hZGQoJ2hpZ2hsaWdodGVkLWxpbmUnKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZUVsZW1lbnRzW2xpbmVJbmRleF0uY2xhc3NMaXN0LnJlbW92ZSgnaGlnaGxpZ2h0ZWQtbGluZScpO1xuICAgICAgICAgICAgICAgICAgICB9LCAyMDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBFZGl0b3IgY2xcdTAwRTFzaWNvIChDTTUpXG4gICAgICAgICAgICBjb25zdCBsaW5lRGl2ID0gZWRpdG9yLmxpbmVEaXYgfHwgZWRpdG9yLmdldFNjcm9sbGVyRWxlbWVudCgpO1xuICAgICAgICAgICAgaWYgKGxpbmVEaXYpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lRWxlbWVudHMgPSBsaW5lRGl2LnF1ZXJ5U2VsZWN0b3JBbGwoJy5Db2RlTWlycm9yLWxpbmUnKTtcbiAgICAgICAgICAgICAgICBpZiAobGluZUVsZW1lbnRzICYmIGxpbmVFbGVtZW50cy5sZW5ndGggPiBsaW5lSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGluZUVsZW1lbnRzW2xpbmVJbmRleF0uY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0ZWQtbGluZScpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lRWxlbWVudHNbbGluZUluZGV4XS5jbGFzc0xpc3QucmVtb3ZlKCdoaWdobGlnaHRlZC1saW5lJyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDIwMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFsIHJlc2FsdGFyIGxcdTAwRURuZWE6JywgZXJyb3IpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBGb3JtYXRlYSBlbCBub21icmUgZGUgdW4gY29udGV4dG8gcGFyYSBtZWpvciB2aXN1YWxpemFjaVx1MDBGM25cbiAqIEBwYXJhbSBjb250ZXh0byBTdHJpbmcgZGVsIGNvbnRleHRvIGNvbiBmb3JtYXRvIGplclx1MDBFMXJxdWljb1xuICogQHJldHVybnMgTm9tYnJlIGZvcm1hdGVhZG8gZGVsIGNvbnRleHRvXG4gKi9cbmZvcm1hdGVhck5vbWJyZUNvbnRleHRvKGNvbnRleHRvKSB7XG4gICAgaWYgKGNvbnRleHRvLmluY2x1ZGVzKCcgXHUyMTkyICcpKSB7XG4gICAgICAgIHJldHVybiBjb250ZXh0by5zcGxpdCgnIFx1MjE5MiAnKS5wb3AoKSB8fCBjb250ZXh0bztcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRleHRvO1xufVxuXG5cblxuLy8gLS0tIFRhZWFzIEh1ZXJmYW5hc1xuXG4vLyBNXHUwMEU5dG9kbyBwYXJhIGFkZE9uc0FQSSBxdWUgbXVlc3RyYSB0YXJlYXMgc2luIGNsYXNpZmljYXIgZW4gdW4gY29tcG9uZW50ZSB2aXN1YWxcblxuLyoqXG4gKiBHZW5lcmEgdW4gY29tcG9uZW50ZSB2aXN1YWwgcGFyYSBtb3N0cmFyIHRhcmVhcyBzaW4gY2xhc2lmaWNhciAoc2luIGNvbnRleHRvLCBwZXJzb25hcyxcbiAqIGZlY2hhcyBvIGNsYXNpZmljYWNpXHUwMEYzbiBHVEQpXG4gKiBAcGFyYW0gZHYgT2JqZXRvIGRhdGF2aWV3IHBhcmEgYWNjZWRlciBhIHN1cyBmdW5jaW9uZXNcbiAqIEByZXR1cm5zIEVsZW1lbnRvIERPTSBjb24gbGEgdmlzdGEgZGUgdGFyZWFzIHNpbiBjbGFzaWZpY2FyXG4gKi9cbmFzeW5jIG1vc3RyYXJUYXJlYXNTaW5DbGFzaWZpY2FyKGR2KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gQ3JlYXIgZWwgY29udGVuZWRvciBwcmluY2lwYWxcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgY29udGFpbmVyLmNsYXNzTmFtZSA9IFwidGFyZWFzLXNpbi1jbGFzaWZpY2FyLWNvbnRhaW5lclwiO1xuICAgICAgICBcbiAgICAgICAgLy8gQVx1MDBGMWFkaXIgZXN0aWxvcyBwZXJzb25hbGl6YWRvcyBwYXJhIGxhIHZpc3VhbGl6YWNpXHUwMEYzblxuICAgICAgICBjb25zdCBzdHlsZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgICAgICBzdHlsZUVsLnRleHRDb250ZW50ID0gYFxuICAgICAgICAudGFyZWFzLXNpbi1jbGFzaWZpY2FyLWNvbnRhaW5lciB7XG4gICAgICAgICAgICBmb250LXNpemU6IDAuOTVlbTtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLnRhcmVhcy1oZWFkaW5nIHtcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDFyZW07XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XG4gICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xuICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDZweDtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgICAgICAgICBmb250LXNpemU6IDEuM2VtO1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC5zdGF0cy1iYWRnZSB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1pbnRlcmFjdGl2ZS1hY2NlbnQpO1xuICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTJweDtcbiAgICAgICAgICAgIHBhZGRpbmc6IDJweCAxMHB4O1xuICAgICAgICAgICAgZm9udC1zaXplOiAwLjhlbTtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC50YXJlYS1ncm91cCB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLXNlY29uZGFyeSk7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xuICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLnRhcmVhLWdyb3VwLWhlYWRlciB7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgIHBhZGRpbmc6IDhweCAxMnB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZC1zZWNvbmRhcnktYWx0KTtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAudGFyZWEtZ3JvdXAtaGVhZGVyOmhvdmVyIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItaG92ZXIpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAudGFyZWEtZ3JvdXAtdGl0bGUge1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICBnYXA6IDhweDtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC50YXJlYS1ncm91cC10b2dnbGUge1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjJzIGVhc2U7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC50YXJlYS1ncm91cC10b2dnbGUub3BlbiB7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC50YXJlYS1ncm91cC1jb3VudCB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1pbnRlcmFjdGl2ZS1hY2NlbnQpO1xuICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTJweDtcbiAgICAgICAgICAgIHBhZGRpbmc6IDFweCA4cHg7XG4gICAgICAgICAgICBmb250LXNpemU6IDAuODVlbTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLnRhcmVhLWxpc3Qge1xuICAgICAgICAgICAgcGFkZGluZzogMCAxMnB4IDEycHg7XG4gICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAudGFyZWEtbGlzdC5vcGVuIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAudGFyZWEtaXRlbSB7XG4gICAgICAgICAgICBtYXJnaW46IDhweCAwO1xuICAgICAgICAgICAgcGFkZGluZzogOHB4O1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZC1wcmltYXJ5KTtcbiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2U7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC50YXJlYS1pdGVtOmhvdmVyIHtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTJweCk7XG4gICAgICAgICAgICBib3JkZXItY29sb3I6IHZhcigtLWludGVyYWN0aXZlLWFjY2VudCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC50YXJlYS10ZXh0byB7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA2cHg7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgZ2FwOiA4cHg7XG4gICAgICAgICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLnRhcmVhLWNoZWNrYm94IHtcbiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LWZhaW50KTtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4xZW07XG4gICAgICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLnRhcmVhLWNvbnRlbmlkbyB7XG4gICAgICAgICAgICBmbGV4LWdyb3c6IDE7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMS40O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAudGFyZWEtbWV0YWRhdG9zIHtcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAyOHB4O1xuICAgICAgICAgICAgZm9udC1zaXplOiAwLjllbTtcbiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW11dGVkKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLnRhcmVhLW1ldGEtaXRlbSB7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzcHg7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGJhc2VsaW5lO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAubWV0YS1pY29uIHtcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNnB4O1xuICAgICAgICAgICAgd2lkdGg6IDE2cHg7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC5sb2FkaW5nLWluZGljYXRvciB7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgIHBhZGRpbmc6IDJyZW07XG4gICAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC5zcGlubmVyIHtcbiAgICAgICAgICAgIGJvcmRlcjogM3B4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgICAgICAgIGJvcmRlci10b3A6IDNweCBzb2xpZCB2YXIoLS1pbnRlcmFjdGl2ZS1hY2NlbnQpO1xuICAgICAgICAgICAgd2lkdGg6IDMwcHg7XG4gICAgICAgICAgICBoZWlnaHQ6IDMwcHg7XG4gICAgICAgICAgICBhbmltYXRpb246IHNwaW4gMXMgbGluZWFyIGluZmluaXRlO1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgQGtleWZyYW1lcyBzcGluIHtcbiAgICAgICAgICAgIDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7IH1cbiAgICAgICAgICAgIDEwMCUgeyB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOyB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC5lcnJvci1tZXNzYWdlIHtcbiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LWVycm9yKTtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEodmFyKC0tdGV4dC1lcnJvci1yZ2IpLCAwLjEpO1xuICAgICAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIG1hcmdpbjogMTBweCAwO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAudGFyZWFzLWNvbnRyb2xzIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBnYXA6IDEwcHg7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC50YXJlYXMtYnRuIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5LWFsdCk7XG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcik7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA2cHg7XG4gICAgICAgICAgICBwYWRkaW5nOiA2cHggMTJweDtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2U7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC50YXJlYXMtYnRuOmhvdmVyIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItaG92ZXIpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAuZXhwYW5kLWJ0bjpob3ZlciB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1pbnRlcmFjdGl2ZS1hY2NlbnQpO1xuICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAuZW1wdHktbWVzc2FnZSB7XG4gICAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCk7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICBwYWRkaW5nOiAycmVtO1xuICAgICAgICAgICAgZm9udC1zdHlsZTogaXRhbGljO1xuICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChzdHlsZUVsKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFcdTAwRjFhZGlyIGVuY2FiZXphZG8gcHJpbmNpcGFsXG4gICAgICAgIGNvbnN0IGhlYWRpbmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDNcIik7XG4gICAgICAgIGhlYWRpbmcuY2xhc3NOYW1lID0gXCJ0YXJlYXMtaGVhZGluZ1wiO1xuICAgICAgICBoZWFkaW5nLnRleHRDb250ZW50ID0gXCJUYXJlYXMgU2luIENsYXNpZmljYXJcIjtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGhlYWRpbmcpO1xuICAgICAgICBcbiAgICAgICAgLy8gQWdyZWdhciBjb250cm9sZXMgcGFyYSBleHBhbmRpci9jb2xhcHNhciB0b2RvXG4gICAgICAgIGNvbnN0IGNvbnRyb2xzRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgY29udHJvbHNEaXYuY2xhc3NOYW1lID0gXCJ0YXJlYXMtY29udHJvbHNcIjtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGV4cGFuZEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIGV4cGFuZEJ0bi5jbGFzc05hbWUgPSBcInRhcmVhcy1idG4gZXhwYW5kLWJ0blwiO1xuICAgICAgICBleHBhbmRCdG4udGV4dENvbnRlbnQgPSBcIlx1RDgzRFx1RENDMiBFeHBhbmRpciBUb2RvXCI7XG4gICAgICAgIGV4cGFuZEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdGhpcy5leHBhbmRpclRvZGFzTGFzVGFyZWFzKGNvbnRhaW5lcikpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgY29sbGFwc2VCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICBjb2xsYXBzZUJ0bi5jbGFzc05hbWUgPSBcInRhcmVhcy1idG4gY29sbGFwc2UtYnRuXCI7XG4gICAgICAgIGNvbGxhcHNlQnRuLnRleHRDb250ZW50ID0gXCJcdUQ4M0RcdURDQzEgQ29sYXBzYXIgVG9kb1wiO1xuICAgICAgICBjb2xsYXBzZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdGhpcy5jb2xhcHNhclRvZGFzTGFzVGFyZWFzKGNvbnRhaW5lcikpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVmcmVzaEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIHJlZnJlc2hCdG4uY2xhc3NOYW1lID0gXCJ0YXJlYXMtYnRuIHJlZnJlc2gtYnRuXCI7XG4gICAgICAgIHJlZnJlc2hCdG4udGV4dENvbnRlbnQgPSBcIlx1RDgzRFx1REQwNCBBY3R1YWxpemFyXCI7XG4gICAgICAgIHJlZnJlc2hCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG51ZXZvQ29udGFpbmVyID0gYXdhaXQgdGhpcy5tb3N0cmFyVGFyZWFzU2luQ2xhc2lmaWNhcihkdik7XG4gICAgICAgICAgICBjb250YWluZXIucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobnVldm9Db250YWluZXIsIGNvbnRhaW5lcik7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgY29udHJvbHNEaXYuYXBwZW5kQ2hpbGQoZXhwYW5kQnRuKTtcbiAgICAgICAgY29udHJvbHNEaXYuYXBwZW5kQ2hpbGQoY29sbGFwc2VCdG4pO1xuICAgICAgICBjb250cm9sc0Rpdi5hcHBlbmRDaGlsZChyZWZyZXNoQnRuKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNvbnRyb2xzRGl2KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFcdTAwRjFhZGlyIGluZGljYWRvciBkZSBjYXJnYVxuICAgICAgICBjb25zdCBsb2FkaW5nRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgbG9hZGluZ0Rpdi5jbGFzc05hbWUgPSBcImxvYWRpbmctaW5kaWNhdG9yXCI7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBzcGlubmVyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgc3Bpbm5lckRpdi5jbGFzc05hbWUgPSBcInNwaW5uZXJcIjtcbiAgICAgICAgbG9hZGluZ0Rpdi5hcHBlbmRDaGlsZChzcGlubmVyRGl2KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGxvYWRpbmdUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgbG9hZGluZ1RleHQudGV4dENvbnRlbnQgPSBcIkJ1c2NhbmRvIHRhcmVhcyBzaW4gY2xhc2lmaWNhci4uLlwiO1xuICAgICAgICBsb2FkaW5nRGl2LmFwcGVuZENoaWxkKGxvYWRpbmdUZXh0KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChsb2FkaW5nRGl2KTtcbiAgICAgICAgXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBPYnRlbmVyIGRhdG9zIGRlIHRhcmVhcyBzaW4gY2xhc2lmaWNhciBhIHRyYXZcdTAwRTlzIGRlIGxhIEFQSVxuICAgICAgICAgICAgY29uc3QgeyB0YXJlYXNQb3JOb3RhLCB0b3RhbFRhcmVhcywgdG90YWxOb3RhcyB9ID0gYXdhaXQgdGhpcy5wbHVnaW4udGFyZWFzQVBJLmdldFRhcmVhc1NpbkNsYXNpZmljYXIoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRWxpbWluYXIgZWwgaW5kaWNhZG9yIGRlIGNhcmdhXG4gICAgICAgICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQobG9hZGluZ0Rpdik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFNpIG5vIGhheSB0YXJlYXMgc2luIGNsYXNpZmljYXJcbiAgICAgICAgICAgIGlmICh0b3RhbFRhcmVhcyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVtcHR5TWVzc2FnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgZW1wdHlNZXNzYWdlLmNsYXNzTmFtZSA9IFwiZW1wdHktbWVzc2FnZVwiO1xuICAgICAgICAgICAgICAgIGVtcHR5TWVzc2FnZS50ZXh0Q29udGVudCA9IFwiXHUwMEExRmVsaWNpZGFkZXMhIE5vIHNlIGVuY29udHJhcm9uIHRhcmVhcyBzaW4gY2xhc2lmaWNhci5cIjtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZW1wdHlNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBBY3R1YWxpemFyIGVsIGVuY2FiZXphZG8gY29uIGVsIGNvbnRhZG9yXG4gICAgICAgICAgICBjb25zdCBzdGF0c0JhZGdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgICAgICBzdGF0c0JhZGdlLmNsYXNzTmFtZSA9IFwic3RhdHMtYmFkZ2VcIjtcbiAgICAgICAgICAgIHN0YXRzQmFkZ2UudGV4dENvbnRlbnQgPSBgJHt0b3RhbFRhcmVhc30gdGFyZWFzIGVuICR7dG90YWxOb3Rhc30gbm90YXNgO1xuICAgICAgICAgICAgaGVhZGluZy5hcHBlbmRDaGlsZChzdGF0c0JhZGdlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gT3JkZW5hciBub3RhcyBwb3IgY2FudGlkYWQgZGUgdGFyZWFzIChkZXNjZW5kZW50ZSlcbiAgICAgICAgICAgIGNvbnN0IG5vdGFzT3JkZW5hZGFzID0gQXJyYXkuZnJvbSh0YXJlYXNQb3JOb3RhLnZhbHVlcygpKVxuICAgICAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBiLnRhcmVhcy5sZW5ndGggLSBhLnRhcmVhcy5sZW5ndGgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDcmVhciBncnVwb3MgZGUgdGFyZWFzIHBvciBub3RhXG4gICAgICAgICAgICBmb3IgKGNvbnN0IG5vdGFJbmZvIG9mIG5vdGFzT3JkZW5hZGFzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZ3J1cG9UYXJlYXMgPSB0aGlzLmNyZWFyR3J1cG9UYXJlYXMobm90YUluZm8sIGR2KTtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZ3J1cG9UYXJlYXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBFeHBhbmRpciBlbCBwcmltZXIgZ3J1cG8gYXV0b21cdTAwRTF0aWNhbWVudGVcbiAgICAgICAgICAgIGlmIChub3Rhc09yZGVuYWRhcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJpbWVyR3J1cG8gPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignLnRhcmVhLWdyb3VwJyk7XG4gICAgICAgICAgICAgICAgaWYgKHByaW1lckdydXBvKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlciA9IHByaW1lckdydXBvLnF1ZXJ5U2VsZWN0b3IoJy50YXJlYS1ncm91cC1oZWFkZXInKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9nZ2xlID0gcHJpbWVyR3J1cG8ucXVlcnlTZWxlY3RvcignLnRhcmVhLWdyb3VwLXRvZ2dsZScpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaXN0ID0gcHJpbWVyR3J1cG8ucXVlcnlTZWxlY3RvcignLnRhcmVhLWxpc3QnKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZS5jbGFzc0xpc3QuYWRkKCdvcGVuJyk7XG4gICAgICAgICAgICAgICAgICAgIGxpc3QuY2xhc3NMaXN0LmFkZCgnb3BlbicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gRWxpbWluYXIgZWwgaW5kaWNhZG9yIGRlIGNhcmdhXG4gICAgICAgICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQobG9hZGluZ0Rpdik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIE1vc3RyYXIgbWVuc2FqZSBkZSBlcnJvclxuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZS5jbGFzc05hbWUgPSBcImVycm9yLW1lc3NhZ2VcIjtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZS50ZXh0Q29udGVudCA9IGBFcnJvciBhbCBjYXJnYXIgdGFyZWFzIHNpbiBjbGFzaWZpY2FyOiAke2Vycm9yLm1lc3NhZ2V9YDtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlcnJvck1lc3NhZ2UpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZW4gbW9zdHJhclRhcmVhc1NpbkNsYXNpZmljYXI6XCIsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZ2VuZXJhbCBlbiBtb3N0cmFyVGFyZWFzU2luQ2xhc2lmaWNhcjpcIiwgZXJyb3IpO1xuICAgICAgICBcbiAgICAgICAgLy8gRGV2b2x2ZXIgdW4gbWVuc2FqZSBkZSBlcnJvclxuICAgICAgICBjb25zdCBlcnJvckNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGVycm9yQ29udGFpbmVyLmNsYXNzTmFtZSA9IFwiZXJyb3ItbWVzc2FnZVwiO1xuICAgICAgICBlcnJvckNvbnRhaW5lci50ZXh0Q29udGVudCA9IGBFcnJvciBhbCBjYXJnYXIgdGFyZWFzIHNpbiBjbGFzaWZpY2FyOiAke2Vycm9yLm1lc3NhZ2V9YDtcbiAgICAgICAgcmV0dXJuIGVycm9yQ29udGFpbmVyO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDcmVhIHVuIGdydXBvIGRlIHRhcmVhcyBwYXJhIHVuYSBub3RhIGVzcGVjXHUwMEVEZmljYVxuICogQHBhcmFtIG5vdGFJbmZvIEluZm9ybWFjaVx1MDBGM24gZGUgbGEgbm90YSB5IHN1cyB0YXJlYXNcbiAqIEBwYXJhbSBkdiBPYmpldG8gZGF0YXZpZXdcbiAqIEByZXR1cm5zIEVsZW1lbnRvIERPTSBjb24gZWwgZ3J1cG8gZGUgdGFyZWFzXG4gKi9cbmNyZWFyR3J1cG9UYXJlYXMobm90YUluZm8sIGR2KSB7XG4gICAgY29uc3QgeyB0aXR1bG8sIHJ1dGEsIHRhcmVhcyB9ID0gbm90YUluZm87XG4gICAgXG4gICAgLy8gQ3JlYXIgY29udGVuZWRvciBkZWwgZ3J1cG9cbiAgICBjb25zdCBncnVwb0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZ3J1cG9EaXYuY2xhc3NOYW1lID0gXCJ0YXJlYS1ncm91cFwiO1xuICAgIFxuICAgIC8vIENyZWFyIGVuY2FiZXphZG8gY29uIHRvZ2dsZVxuICAgIGNvbnN0IGhlYWRlckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgaGVhZGVyRGl2LmNsYXNzTmFtZSA9IFwidGFyZWEtZ3JvdXAtaGVhZGVyXCI7XG4gICAgXG4gICAgLy8gVFx1MDBFRHR1bG8gY29uIFx1MDBFRGNvbm8gZGUgdG9nZ2xlXG4gICAgY29uc3QgdGl0bGVEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRpdGxlRGl2LmNsYXNzTmFtZSA9IFwidGFyZWEtZ3JvdXAtdGl0bGVcIjtcbiAgICBcbiAgICBjb25zdCB0b2dnbGVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgdG9nZ2xlU3Bhbi5jbGFzc05hbWUgPSBcInRhcmVhLWdyb3VwLXRvZ2dsZVwiO1xuICAgIHRvZ2dsZVNwYW4udGV4dENvbnRlbnQgPSBcIlx1MjVCNlwiO1xuICAgIHRpdGxlRGl2LmFwcGVuZENoaWxkKHRvZ2dsZVNwYW4pO1xuICAgIFxuICAgIC8vIEVubGFjZSBhIGxhIG5vdGFcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBlbmxhY2VOb3RhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgICAgIGVubGFjZU5vdGEuY2xhc3NOYW1lID0gXCJpbnRlcm5hbC1saW5rXCI7XG4gICAgICAgIGVubGFjZU5vdGEudGV4dENvbnRlbnQgPSB0aXR1bG87XG4gICAgICAgIGVubGFjZU5vdGEuaHJlZiA9IHJ1dGE7XG4gICAgICAgIGVubGFjZU5vdGEuc2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIsIHJ1dGEpO1xuICAgICAgICBcbiAgICAgICAgLy8gQWdyZWdhciBldmVudG8gcGFyYSBhYnJpciBsYSBub3RhXG4gICAgICAgIGVubGFjZU5vdGEuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGFwcC53b3Jrc3BhY2Uub3BlbkxpbmtUZXh0KHJ1dGEsIFwiXCIsIHRydWUpOyAvLyBBYnJpciBlbiBudWV2YSBwZXN0YVx1MDBGMWFcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICB0aXRsZURpdi5hcHBlbmRDaGlsZChlbmxhY2VOb3RhKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIFNpIGZhbGxhIGxhIGNyZWFjaVx1MDBGM24gZGVsIGVubGFjZSwgbW9zdHJhciBzb2xvIHRleHRvXG4gICAgICAgIGNvbnN0IHRleHRvTm90YSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICB0ZXh0b05vdGEudGV4dENvbnRlbnQgPSB0aXR1bG87XG4gICAgICAgIHRpdGxlRGl2LmFwcGVuZENoaWxkKHRleHRvTm90YSk7XG4gICAgfVxuICAgIFxuICAgIGhlYWRlckRpdi5hcHBlbmRDaGlsZCh0aXRsZURpdik7XG4gICAgXG4gICAgLy8gQ29udGFkb3IgZGUgdGFyZWFzXG4gICAgY29uc3QgY291bnRTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgY291bnRTcGFuLmNsYXNzTmFtZSA9IFwidGFyZWEtZ3JvdXAtY291bnRcIjtcbiAgICBjb3VudFNwYW4udGV4dENvbnRlbnQgPSB0YXJlYXMubGVuZ3RoLnRvU3RyaW5nKCk7XG4gICAgaGVhZGVyRGl2LmFwcGVuZENoaWxkKGNvdW50U3Bhbik7XG4gICAgXG4gICAgZ3J1cG9EaXYuYXBwZW5kQ2hpbGQoaGVhZGVyRGl2KTtcbiAgICBcbiAgICAvLyBMaXN0YSBkZSB0YXJlYXMgKGluaWNpYWxtZW50ZSBvY3VsdGEpXG4gICAgY29uc3QgdGFyZWFzTGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGFyZWFzTGlzdC5jbGFzc05hbWUgPSBcInRhcmVhLWxpc3RcIjtcbiAgICBcbiAgICAvLyBBXHUwMEYxYWRpciBjYWRhIHRhcmVhXG4gICAgZm9yIChjb25zdCB0YXJlYSBvZiB0YXJlYXMpIHtcbiAgICAgICAgY29uc3QgdGFyZWFFbGVtZW50ID0gdGhpcy5jcmVhclRhcmVhRWxlbWVudEh1ZXJmYW5hKHRhcmVhLCBkdik7XG4gICAgICAgIHRhcmVhc0xpc3QuYXBwZW5kQ2hpbGQodGFyZWFFbGVtZW50KTtcbiAgICB9XG4gICAgXG4gICAgZ3J1cG9EaXYuYXBwZW5kQ2hpbGQodGFyZWFzTGlzdCk7XG4gICAgXG4gICAgLy8gQWdyZWdhciBldmVudG8gcGFyYSBtb3N0cmFyL29jdWx0YXIgbGlzdGEgZGUgdGFyZWFzXG4gICAgaGVhZGVyRGl2LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgLy8gTm8gY29sYXBzYXIgc2kgc2UgaGl6byBjbGljIGVuIHVuIGVubGFjZVxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LnRhZ05hbWUgPT09ICdBJykgcmV0dXJuO1xuICAgICAgICBcbiAgICAgICAgdG9nZ2xlU3Bhbi5jbGFzc0xpc3QudG9nZ2xlKCdvcGVuJyk7XG4gICAgICAgIHRhcmVhc0xpc3QuY2xhc3NMaXN0LnRvZ2dsZSgnb3BlbicpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHRvZ2dsZVNwYW4uY2xhc3NMaXN0LmNvbnRhaW5zKCdvcGVuJykpIHtcbiAgICAgICAgICAgIHRvZ2dsZVNwYW4udGV4dENvbnRlbnQgPSBcIlx1MjVCQ1wiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9nZ2xlU3Bhbi50ZXh0Q29udGVudCA9IFwiXHUyNUI2XCI7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gZ3J1cG9EaXY7XG59XG5cbi8qKlxuICogQ3JlYSB1biBlbGVtZW50byBET00gcGFyYSB1bmEgdGFyZWEgc2luIGNsYXNpZmljYXJcbiAqIEBwYXJhbSB0YXJlYSBPYmpldG8gY29uIGxhIGluZm9ybWFjaVx1MDBGM24gZGUgbGEgdGFyZWFcbiAqIEBwYXJhbSBkdiBPYmpldG8gZGF0YXZpZXdcbiAqIEByZXR1cm5zIEVsZW1lbnRvIERPTSByZXByZXNlbnRhbmRvIGxhIHRhcmVhXG4gKi9cbmNyZWFyVGFyZWFFbGVtZW50SHVlcmZhbmEodGFyZWEsIGR2KSB7XG4gICAgLy8gRWxlbWVudG8gcHJpbmNpcGFsXG4gICAgY29uc3QgdGFyZWFEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRhcmVhRGl2LmNsYXNzTmFtZSA9IFwidGFyZWEtaXRlbVwiO1xuICAgIFxuICAgIC8vIFRleHRvIGRlIGxhIHRhcmVhXG4gICAgY29uc3QgdGV4dG9EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRleHRvRGl2LmNsYXNzTmFtZSA9IFwidGFyZWEtdGV4dG9cIjtcbiAgICBcbiAgICAvLyBDaGVja2JveCAodmlzdWFsLCBubyBmdW5jaW9uYWwpXG4gICAgY29uc3QgY2hlY2tib3hTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgY2hlY2tib3hTcGFuLmNsYXNzTmFtZSA9IFwidGFyZWEtY2hlY2tib3hcIjtcbiAgICBjaGVja2JveFNwYW4udGV4dENvbnRlbnQgPSBcIlx1MjYxMFwiO1xuICAgIGNoZWNrYm94U3Bhbi5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBhdGhcIiwgdGFyZWEucnV0YUFyY2hpdm8pO1xuICAgIGNoZWNrYm94U3Bhbi5zZXRBdHRyaWJ1dGUoXCJkYXRhLWxpbmVcIiwgdGFyZWEubGluZUluZm8/Lm51bWVybz8udG9TdHJpbmcoKSB8fCBcIjBcIik7XG4gICAgXG4gICAgLy8gSGFjZXIgZWwgY2hlY2tib3ggY2xpY2FibGUgcGFyYSBuYXZlZ2FyIGEgbGEgdGFyZWFcbiAgICBjaGVja2JveFNwYW4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgY29uc3QgcGF0aCA9IGNoZWNrYm94U3Bhbi5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBhdGhcIik7XG4gICAgICAgIGNvbnN0IGxpbmUgPSBwYXJzZUludChjaGVja2JveFNwYW4uZ2V0QXR0cmlidXRlKFwiZGF0YS1saW5lXCIpIHx8IFwiMFwiLCAxMCk7XG4gICAgICAgIHRoaXMubmF2ZWdhckFUYXJlYUNvblJlc2FsdGFkbyhwYXRoLCBsaW5lLCB0YXJlYS50ZXh0b09yaWdpbmFsIHx8IHRhcmVhLnRleHRvLCB0cnVlKTtcbiAgICB9KTtcbiAgICBcbiAgICB0ZXh0b0Rpdi5hcHBlbmRDaGlsZChjaGVja2JveFNwYW4pO1xuICAgIFxuICAgIC8vIENvbnRlbmlkbyBkZSBsYSB0YXJlYVxuICAgIGNvbnN0IGNvbnRlbmlkb1NwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBjb250ZW5pZG9TcGFuLmNsYXNzTmFtZSA9IFwidGFyZWEtY29udGVuaWRvXCI7XG4gICAgY29udGVuaWRvU3Bhbi50ZXh0Q29udGVudCA9IHRhcmVhLnRleHRvO1xuICAgIFxuICAgIC8vIEhhY2VyIGVsIGNvbnRlbmlkbyBjbGljYWJsZSBwYXJhIG5hdmVnYXIgYSBsYSB0YXJlYVxuICAgIGNvbnRlbmlkb1NwYW4uc2V0QXR0cmlidXRlKFwiZGF0YS1wYXRoXCIsIHRhcmVhLnJ1dGFBcmNoaXZvKTtcbiAgICBjb250ZW5pZG9TcGFuLnNldEF0dHJpYnV0ZShcImRhdGEtbGluZVwiLCB0YXJlYS5saW5lSW5mbz8ubnVtZXJvPy50b1N0cmluZygpIHx8IFwiMFwiKTtcbiAgICBjb250ZW5pZG9TcGFuLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xuICAgIFxuICAgIGNvbnRlbmlkb1NwYW4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgY29uc3QgcGF0aCA9IGNvbnRlbmlkb1NwYW4uZ2V0QXR0cmlidXRlKFwiZGF0YS1wYXRoXCIpO1xuICAgICAgICBjb25zdCBsaW5lID0gcGFyc2VJbnQoY29udGVuaWRvU3Bhbi5nZXRBdHRyaWJ1dGUoXCJkYXRhLWxpbmVcIikgfHwgXCIwXCIsIDEwKTtcbiAgICAgICAgdGhpcy5uYXZlZ2FyQVRhcmVhQ29uUmVzYWx0YWRvKHBhdGgsIGxpbmUsIHRhcmVhLnRleHRvT3JpZ2luYWwgfHwgdGFyZWEudGV4dG8sIHRydWUpO1xuICAgIH0pO1xuICAgIFxuICAgIHRleHRvRGl2LmFwcGVuZENoaWxkKGNvbnRlbmlkb1NwYW4pO1xuICAgIHRhcmVhRGl2LmFwcGVuZENoaWxkKHRleHRvRGl2KTtcbiAgICBcbiAgICAvLyBNZXRhZGF0b3NcbiAgICBjb25zdCBtZXRhZGF0b3NEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIG1ldGFkYXRvc0Rpdi5jbGFzc05hbWUgPSBcInRhcmVhLW1ldGFkYXRvc1wiO1xuICAgIFxuICAgIC8vIFViaWNhY2lcdTAwRjNuIChydXRhIHkgbFx1MDBFRG5lYSlcbiAgICBjb25zdCB1YmljYWNpb25EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHViaWNhY2lvbkRpdi5jbGFzc05hbWUgPSBcInRhcmVhLW1ldGEtaXRlbVwiO1xuICAgIFxuICAgIGNvbnN0IGljb25vVWJpY2FjaW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgaWNvbm9VYmljYWNpb24uY2xhc3NOYW1lID0gXCJtZXRhLWljb25cIjtcbiAgICBpY29ub1ViaWNhY2lvbi50ZXh0Q29udGVudCA9IFwiXHVEODNEXHVEQ0NEXCI7XG4gICAgdWJpY2FjaW9uRGl2LmFwcGVuZENoaWxkKGljb25vVWJpY2FjaW9uKTtcbiAgICBcbiAgICBjb25zdCB2YWxvclViaWNhY2lvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIFxuICAgIC8vIFNpIHRlbmVtb3Mgblx1MDBGQW1lcm8gZGUgbFx1MDBFRG5lYSwgbW9zdHJhcmxvXG4gICAgaWYgKHRhcmVhLmxpbmVJbmZvPy5udW1lcm8pIHtcbiAgICAgICAgdmFsb3JVYmljYWNpb24udGV4dENvbnRlbnQgPSBgTFx1MDBFRG5lYSAke3RhcmVhLmxpbmVJbmZvLm51bWVyb31gO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbG9yVWJpY2FjaW9uLnRleHRDb250ZW50ID0gXCJQb3NpY2lcdTAwRjNuIGRlc2Nvbm9jaWRhXCI7XG4gICAgfVxuICAgIFxuICAgIHViaWNhY2lvbkRpdi5hcHBlbmRDaGlsZCh2YWxvclViaWNhY2lvbik7XG4gICAgbWV0YWRhdG9zRGl2LmFwcGVuZENoaWxkKHViaWNhY2lvbkRpdik7XG4gICAgXG4gICAgLy8gU2kgdGllbmUgZXRpcXVldGFzIG1vc3RyYXJsYXMgKGF1bnF1ZSBubyBzZWFuIGRlIGxhcyBjYXRlZ29yXHUwMEVEYXMgYnVzY2FkYXMpXG4gICAgaWYgKHRhcmVhLmV0aXF1ZXRhcy50b2Rhcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGV0aXF1ZXRhc0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGV0aXF1ZXRhc0Rpdi5jbGFzc05hbWUgPSBcInRhcmVhLW1ldGEtaXRlbVwiO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgaWNvbm9FdGlxdWV0YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgaWNvbm9FdGlxdWV0YXMuY2xhc3NOYW1lID0gXCJtZXRhLWljb25cIjtcbiAgICAgICAgaWNvbm9FdGlxdWV0YXMudGV4dENvbnRlbnQgPSBcIlx1RDgzQ1x1REZGN1x1RkUwRlwiO1xuICAgICAgICBldGlxdWV0YXNEaXYuYXBwZW5kQ2hpbGQoaWNvbm9FdGlxdWV0YXMpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgdmFsb3JFdGlxdWV0YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgdmFsb3JFdGlxdWV0YXMudGV4dENvbnRlbnQgPSB0YXJlYS5ldGlxdWV0YXMudG9kYXMuam9pbignICcpO1xuICAgICAgICBldGlxdWV0YXNEaXYuYXBwZW5kQ2hpbGQodmFsb3JFdGlxdWV0YXMpO1xuICAgICAgICBcbiAgICAgICAgbWV0YWRhdG9zRGl2LmFwcGVuZENoaWxkKGV0aXF1ZXRhc0Rpdik7XG4gICAgfVxuICAgIFxuICAgIHRhcmVhRGl2LmFwcGVuZENoaWxkKG1ldGFkYXRvc0Rpdik7XG4gICAgXG4gICAgcmV0dXJuIHRhcmVhRGl2O1xufVxuXG4vKipcbiAqIEV4cGFuZGUgdG9kb3MgbG9zIGdydXBvcyBkZSB0YXJlYXNcbiAqIEBwYXJhbSBjb250YWluZXIgQ29udGVuZWRvciBwcmluY2lwYWxcbiAqL1xuZXhwYW5kaXJUb2Rhc0xhc1RhcmVhcyhjb250YWluZXIpIHtcbiAgICBjb25zdCBncnVwb3MgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLnRhcmVhLWdyb3VwJyk7XG4gICAgXG4gICAgZ3J1cG9zLmZvckVhY2goZ3J1cG8gPT4ge1xuICAgICAgICBjb25zdCB0b2dnbGUgPSBncnVwby5xdWVyeVNlbGVjdG9yKCcudGFyZWEtZ3JvdXAtdG9nZ2xlJyk7XG4gICAgICAgIGNvbnN0IGxpc3QgPSBncnVwby5xdWVyeVNlbGVjdG9yKCcudGFyZWEtbGlzdCcpO1xuICAgICAgICBcbiAgICAgICAgdG9nZ2xlLmNsYXNzTGlzdC5hZGQoJ29wZW4nKTtcbiAgICAgICAgdG9nZ2xlLnRleHRDb250ZW50ID0gXCJcdTI1QkNcIjtcbiAgICAgICAgbGlzdC5jbGFzc0xpc3QuYWRkKCdvcGVuJyk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogQ29sYXBzYSB0b2RvcyBsb3MgZ3J1cG9zIGRlIHRhcmVhc1xuICogQHBhcmFtIGNvbnRhaW5lciBDb250ZW5lZG9yIHByaW5jaXBhbFxuICovXG5jb2xhcHNhclRvZGFzTGFzVGFyZWFzKGNvbnRhaW5lcikge1xuICAgIGNvbnN0IGdydXBvcyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcudGFyZWEtZ3JvdXAnKTtcbiAgICBcbiAgICBncnVwb3MuZm9yRWFjaChncnVwbyA9PiB7XG4gICAgICAgIGNvbnN0IHRvZ2dsZSA9IGdydXBvLnF1ZXJ5U2VsZWN0b3IoJy50YXJlYS1ncm91cC10b2dnbGUnKTtcbiAgICAgICAgY29uc3QgbGlzdCA9IGdydXBvLnF1ZXJ5U2VsZWN0b3IoJy50YXJlYS1saXN0Jyk7XG4gICAgICAgIFxuICAgICAgICB0b2dnbGUuY2xhc3NMaXN0LnJlbW92ZSgnb3BlbicpO1xuICAgICAgICB0b2dnbGUudGV4dENvbnRlbnQgPSBcIlx1MjVCNlwiO1xuICAgICAgICBsaXN0LmNsYXNzTGlzdC5yZW1vdmUoJ29wZW4nKTtcbiAgICB9KTtcbn1cblxuXG4vLy0tIFRhcmVhcyBJbmJveFxuXG4vLyBEZWxlZ2FjaVx1MDBGM24gcGFyYSBtb3N0cmFyVGFyZWFzSW5ib3hcbmFzeW5jIG1vc3RyYXJUYXJlYXNJbmJveChkdjogYW55KTogUHJvbWlzZTxIVE1MRWxlbWVudD4ge1xuICAgIHJldHVybiB0aGlzLnRhcmVhc0luYm94Q29tcG9uZW50LmdlbmVyYXIoZHYpO1xuICB9XG5cbiAgXG4gICAgLyoqXG4gICAgICogTXVlc3RyYSB1biBkYXNoYm9hcmQgZGUgcHJveWVjdG9zIEdURCB5IHN1cyBjYW1wYVx1MDBGMWFzIGFzb2NpYWRhc1xuICAgICAqIEBwYXJhbSBkdiBPYmpldG8gZGF0YXZpZXcgcGFyYSBhY2NlZGVyIGEgc3VzIGZ1bmNpb25lc1xuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wY2lvbmVzIGRlIGNvbmZpZ3VyYWNpXHUwMEYzbiAobW9kbyBkZSB2aXN1YWxpemFjaVx1MDBGM24pXG4gICAgICogQHJldHVybnMgRWxlbWVudG8gSFRNTCBjb24gZWwgZGFzaGJvYXJkIGludGVyYWN0aXZvXG4gICAgICovXG4gICAgYXN5bmMgbW9zdHJhckRhc2hib2FyZFByb3llY3Rvc0NhbXBhbmFzKGR2OiBhbnksIG9wdGlvbnM6IHtcbiAgICAgICAgbW9kbz86ICdoaXRzJyB8ICdmZWNoYXMnLFxuICAgICAgICBwcm95ZWN0b0FjdHVhbFBhdGg/OiBzdHJpbmdcbiAgICB9ID0ge30pOiBQcm9taXNlPEhUTUxFbGVtZW50PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3llY3RvQ2FtcGFuYXNDb21wb25lbnQuZ2VuZXJhcihkdiwgb3B0aW9ucyk7XG4gICAgfVxuICB9IiwgIi8qXG4gKiBGaWxlbmFtZTogL3NyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL0FQSS9ZQU1MVXBkYXRlckFQSS50c1xuICogUGF0aDogL3NyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL0FQSVxuICogQ3JlYXRlZCBEYXRlOiAyMDI1LTAyLTIzIDE1OjU3OjQwXG4gKiBBdXRob3I6IEFuZHJcdTAwRTlzIEp1bGlcdTAwRTFuIEJvcmJcdTAwRjNuXG4gKiAtLS0tLVxuICogTGFzdCBNb2RpZmllZDogMjAyNS0wMi0yMyAxNzo0OTo0M1xuICogTW9kaWZpZWQgQnk6IEFuZHJcdTAwRTlzIEp1bGlcdTAwRTFuIEJvcmJcdTAwRjNuXG4gKiAtLS0tLVxuICogQ29weXJpZ2h0IChjKSAyMDI1IC0gQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqL1xuXG4vL2ltcG9ydCB7dXRpbHNBUEl9IGZyb20gJy4vdXRpbHNBUEknXG5cbmltcG9ydCB7IE5vdGljZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgbW9kYWxfY2FtYmlvSEYgfSBmcm9tIFwiLi4vLi4vbW9kdWxvUmVnaXN0cm9UaWVtcG8vbW9kYWxzL2NhbWJpb0hGXCI7XG5cbmV4cG9ydCBjbGFzcyBZQU1MVXBkYXRlckFQSSB7XG4gICAgLy9wcml2YXRlIHV0aWxzQXBpOiB1dGlsc0FQSTtcbiAgICBwcml2YXRlIHBsdWdpbjogUGx1Z2luO1xuICAgIHByaXZhdGUgaW5mb1N1YnNpc3RlbWE6IG9iamVjdDsgLy8gQXN1bWllbmRvIHF1ZSBlcyB1biBzdHJpbmdcbiAgICBwcml2YXRlIHRwOiBvYmplY3Q7XG4gICAgcHJpdmF0ZSBwYXRoQ2FtcG9zOiBzdHJpbmc7IFxuICAgIHByaXZhdGUgbm90YTogb2JqZWN0O1xuICAgIHByaXZhdGUgaW5mb05vdGE6IG9iamVjdDtcblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgICAgICAvLyBJbmljaWFsaXphIGZvbGRlciBlIGluZGljZSBjb24gdmFsb3JlcyBwcmVkZXRlcm1pbmFkb3MgbyBsXHUwMEYzZ2ljYSBlc3BlY1x1MDBFRGZpY2EuXG4gICAgICAgIHRoaXMuaW5mb05vdGEgPSB7fTtcbiAgICAgICAgdGhpcy5ub3RhID0ge307XG4gICAgICAgIHRoaXMudHAgPSB0aGlzLmdldFRwKCk7XG4gICAgICAgIHRoaXMucGF0aENhbXBvcyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmZpbGVfY2FtcG9zQ2VudHJhbCArIFwiLm1kXCI7XG4gICAgfVxuICAgIFxuXG4gICAgYXN5bmMgYWN0dWFsaXphck5vdGEoaW5mb05vdGE6IGFueSwgY2FtcG9zOiBhbnkpIHtcbiAgICAgICBcbiAgICAgICAgLy9sZXQgbm90YSA9IHt9OyAvLyBJbmljaWFsaXphIGVsIG9iamV0byBub3RhLlxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuaW5mb05vdGEsIGluZm9Ob3RhKTsgXG4gICAgICAgIFxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjYW1wbyBvZiBjYW1wb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRGl2aWRlIGVsIGNhbXBvIGVuIGZ1bmNpXHUwMEYzbiBkZWwgc1x1MDBFRG1ib2xvIFwiX1wiXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnRlcyA9IGNhbXBvLnNwbGl0KCdfJyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjYW1wb05hbWUsIGZ1bmN0aW9uTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhcmFtZXRybyA9IG51bGw7IFxuICAgICAgICAgICAgICAgICAgICAvLyBTaSBoYXkgdW4gc1x1MDBFRG1ib2xvIFwiX1wiLCB1c2EgbGEgcGFydGUgYW50ZXMgZGUgXCJfXCIgcGFyYSBlbCBub21icmUgZGUgbGEgZnVuY2lcdTAwRjNuLFxuICAgICAgICAgICAgICAgICAgICAvLyB5IGxhIHBhcnRlIGRlc3B1XHUwMEU5cyBkZSBcIl9cIiBjb21vIHBhclx1MDBFMW1ldHJvLlxuICAgICAgICAgICAgICAgICAgICBpZiAocGFydGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uTmFtZSA9IGBnZXQke3BhcnRlc1swXS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHBhcnRlc1swXS5zbGljZSgxKX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FtcG9OYW1lID0gcGFydGVzWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1ldHJvID0gcGFydGVzWzFdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FtcG9OYW1lID0gcGFydGVzWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25OYW1lID0gYGdldCR7Y2FtcG8uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBjYW1wby5zbGljZSgxKX1gO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IG1ldGFkYXRhID0gIGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZSh0aGlzLmluZm9Ob3RhLmZpbGUpPy5mcm9udG1hdHRlcjtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGxldCB2YWxvckFjdHVhbENhbXBvID0gbWV0YWRhdGFbY2FtcG9OYW1lXSB8fCBcIlNpbiBkZWZpbmlyXCI7XG4gICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhIHNpIGV4aXN0ZSB1bmEgZnVuY2lcdTAwRjNuIGNvbiBlc2Ugbm9tYnJlLlxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXNbZnVuY3Rpb25OYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTGxhbWEgYSBsYSBmdW5jaVx1MDBGM24gZGUgbWFuZXJhIGRpblx1MDBFMW1pY2EuIFNpIGV4aXN0ZSB1biBwYXJcdTAwRTFtZXRybywgcFx1MDBFMXNhbG8gYSBsYSBmdW5jaVx1MDBGM24uXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1ldHJvICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RhW2NhbXBvTmFtZV0gPSBhd2FpdCB0aGlzW2Z1bmN0aW9uTmFtZV0ocGFyYW1ldHJvLHZhbG9yQWN0dWFsQ2FtcG8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGFbY2FtcG9OYW1lXSA9IGF3YWl0IHRoaXNbZnVuY3Rpb25OYW1lXSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgTGEgZnVuY2lcdTAwRjNuICR7ZnVuY3Rpb25OYW1lfSBubyBlc3RcdTAwRTEgZGVmaW5pZGEuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNYW5lamEgZWwgY2FzbyBlbiBxdWUgbGEgZnVuY2lcdTAwRjNuIG5vIGVzdFx1MDBFOSBkZWZpbmlkYS5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBBY3R1YWxpemFyIGxhIG5vdGFcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5ub3RhKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEVqZWN1dGEgdHUgY1x1MDBGM2RpZ28gYXF1XHUwMEVEIHNpIGVsIG9iamV0byBgbm90YWAgdGllbmUgbVx1MDBFMXMgZGUgdW5hIHByb3BpZWRhZFxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZVlBTUxGaWVsZHModGhpcy5ub3RhLCBpbmZvTm90YS5maWxlLnBhdGgpXG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIC8vTm8gc2UgZW5jb250cmFyb24gY2FtcG9zIHBhcmEgbW9kaWZpY2FyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEFxdVx1MDBFRCBpclx1MDBFRGEgZWwgY1x1MDBGM2RpZ28gcGFyYSBwcm9jZXNhciBlbCBvYmpldG8gbm90YSwgY29tbyBndWFyZGFyIGVuIHVuIGFyY2hpdm8gZGVudHJvIGRlICdmb2xkZXInLlxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTm8gc2UgcHVkbyBjcmVhciBlbCBvYmpldG8gZGUgcmVnaXN0cm8uXCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiTm8gc2UgcHVkbyBjcmVhciBlbCBvYmpldG8gZGUgcmVnaXN0cm8uXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5ub3RhOyAvLyBSZXRvcm5hIGVsIG9iamV0byBub3RhIGNvbiB0b2RhcyBsYXMgcHJvcGllZGFkZXMgYWdyZWdhZGFzLlxuICAgIH1cbiAgICBcbiAgICBhc3luYyBhcmNoaXZhck5vdGEoaW5mb05vdGE6IGFueSwgY2FtcG9zOiBhbnkpIHtcbiAgICAgICAgXG4gICAgICAgIGxldCBub3RhID0ge307IC8vIEluaWNpYWxpemEgZWwgb2JqZXRvIG5vdGEuXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5pbmZvTm90YSwgaW5mb05vdGEpOyBcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgY2FtcG8gb2YgY2FtcG9zKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVzYSBlbCBub21icmUgZGVsIGNhbXBvIHBhcmEgY29uc3RydWlyIGVsIG5vbWJyZSBkZSBsYSBmdW5jaVx1MDBGM24gKHAuIGVqLiwgXCJnZXRJZFwiKVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmdW5jdGlvbk5hbWUgPSBgZ2V0JHtjYW1wby5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGNhbXBvLnNsaWNlKDEpfWA7XG4gICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhIHNpIGV4aXN0ZSB1bmEgZnVuY2lcdTAwRjNuIGNvbiBlc2Ugbm9tYnJlLlxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXNbZnVuY3Rpb25OYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTGxhbWEgYSBsYSBmdW5jaVx1MDBGM24gZGUgbWFuZXJhIGRpblx1MDBFMW1pY2EgeSBhc2lnbmEgZWwgcmVzdWx0YWRvIGFsIGNhbXBvIGNvcnJlc3BvbmRpZW50ZSBkZSBsYSBub3RhLlxuICAgICAgICAgICAgICAgICAgICAgICAgbm90YVtjYW1wb10gPSBhd2FpdCB0aGlzW2Z1bmN0aW9uTmFtZV0oKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYExhIGZ1bmNpXHUwMEYzbiAke2Z1bmN0aW9uTmFtZX0gbm8gZXN0XHUwMEUxIGRlZmluaWRhLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFuZWphIGVsIGNhc28gZW4gcXVlIGxhIGZ1bmNpXHUwMEYzbiBubyBlc3RcdTAwRTkgZGVmaW5pZGEuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQb3IgZWplbXBsbywgcG9kclx1MDBFRGFzIGFzaWduYXIgdW4gdmFsb3IgcG9yIGRlZmVjdG8gYSBub3RhW2NhbXBvXSBvIHNpbXBsZW1lbnRlIGNvbnRpbnVhci5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBBY3R1YWxpemFyIGxhIG5vdGFcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBub3RhLmVzdGFkbyA9IFwiXHVEODNEXHVERDM1XCI7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKG5vdGEpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRWplY3V0YSB0dSBjXHUwMEYzZGlnbyBhcXVcdTAwRUQgc2kgZWwgb2JqZXRvIGBub3RhYCB0aWVuZSBtXHUwMEUxcyBkZSB1bmEgcHJvcGllZGFkXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlWUFNTEZpZWxkcyhub3RhLCBpbmZvTm90YS5maWxlLnBhdGgpXG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIC8vTm8gc2UgZW5jb250cmFyb24gY2FtcG9zIHBhcmEgbW9kaWZpY2FyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEFxdVx1MDBFRCBpclx1MDBFRGEgZWwgY1x1MDBGM2RpZ28gcGFyYSBwcm9jZXNhciBlbCBvYmpldG8gbm90YSwgY29tbyBndWFyZGFyIGVuIHVuIGFyY2hpdm8gZGVudHJvIGRlICdmb2xkZXInLlxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTm8gc2UgcHVkbyBjcmVhciBlbCBvYmpldG8gZGUgcmVnaXN0cm8uXCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiTm8gc2UgcHVkbyBjcmVhciBlbCBvYmpldG8gZGUgcmVnaXN0cm8uXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm90YTsgLy8gUmV0b3JuYSBlbCBvYmpldG8gbm90YSBjb24gdG9kYXMgbGFzIHByb3BpZWRhZGVzIGFncmVnYWRhcy5cbiAgICB9XG5cblxuICAgIGFzeW5jIHVwZGF0ZVlBTUxGaWVsZHMobm90YSwgcnV0YSkge1xuICAgICAgICBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHJ1dGEpO1xuICAgICAgICAgICAgYXdhaXQgYXBwLmZpbGVNYW5hZ2VyLnByb2Nlc3NGcm9udE1hdHRlcihmaWxlLCBmcm9udG1hdHRlciA9PiB7XG4gICAgICAgICAgICAgICAgLy8gSXRlcmFyIHNvYnJlIGNhZGEgcHJvcGllZGFkIGRlbCBvYmpldG8gJ25vdGEnXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBjYW1wbyBpbiBub3RhKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoZnJvbnRtYXR0ZXIuaGFzT3duUHJvcGVydHkoY2FtcG8pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBY3R1YWxpemFyIGVsIGNhbXBvIGVuIGVsIGZyb250bWF0dGVyIGNvbiBlbCB2YWxvciBjb3JyZXNwb25kaWVudGVcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbnRtYXR0ZXJbY2FtcG9dID0gbm90YVtjYW1wb107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRnJvbnRtYXR0ZXIgYWN0dWFsaXphZG8gY29uIFx1MDBFOXhpdG9cIik7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIGFjdHVhbGl6YXIgZWwgZnJvbnRtYXR0ZXJcIiwgZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcblxuICAgIGdldFRwKCl7XG4gICAgICAgIFxuICAgICAgICBpZiAoIXRoaXMucGx1Z2luIHx8ICF0aGlzLnBsdWdpbi5hcHAucGx1Z2lucy5lbmFibGVkUGx1Z2lucy5oYXMoJ3RlbXBsYXRlci1vYnNpZGlhbicpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFbCBwbHVnaW4gVGVtcGxhdGVyIG5vIGVzdFx1MDBFMSBoYWJpbGl0YWRvLicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vICBGb3JtYSBkZSBhY2NlZGVyIGFsIG9iamV0byB0cCBub3JtYWwgcXVlIGhlIHVzYWRvIGRlc2RlIERWSlMgY3VhbmRvIGN1cnJlbnQgRnVuY3Rpb25zIGVzdGEgY2FyZ2Fkby5cbiAgICAgICAgLy9jb25zdCB0ZW1wbGF0ZXJQbHVnaW4gPSB0aGlzLmFwcC5wbHVnaW5zLnBsdWdpbnNbJ3RlbXBsYXRlci1vYnNpZGlhbiddO1xuICAgICAgICAvL2NvbnN0IHRwID0gdGVtcGxhdGVyUGx1Z2luLnRlbXBsYXRlci5jdXJyZW50X2Z1bmN0aW9uc19vYmplY3Q7XG4gICAgICAgIC8vIC0+IHZlcnNpb24gcXVlIGZhbGxhIHNpIG5vIGVzdGEgYXJyaWJhIGVsIHBsdWdpbiBwb3JxdWUgaGFjZSBnZXQgZGVsIHBsdWdpbiBkaXJlY3RvLiBjb25zdCB0ZW1wbGF0ZXJQbHVnaW4gPSB0aGlzLmFwcC5wbHVnaW5zLmdldFBsdWdpbigndGVtcGxhdGVyLW9ic2lkaWFuJyk7XG4gICAgICAgIFxuICAgICAgICBsZXQgdHBHZW4gPSB0aGlzLnBsdWdpbi5hcHAucGx1Z2lucy5wbHVnaW5zW1widGVtcGxhdGVyLW9ic2lkaWFuXCJdLnRlbXBsYXRlcjtcbiAgICAgICAgdHBHZW4gPSB0cEdlbi5mdW5jdGlvbnNfZ2VuZXJhdG9yLmludGVybmFsX2Z1bmN0aW9ucy5tb2R1bGVzX2FycmF5O1xuICAgICAgICBsZXQgdHAgPSB7fVxuICAgICAgICAvLyBnZXQgYW4gaW5zdGFuY2Ugb2YgdGhlIGRhdGUgbW9kdWxlXG4gICAgICAgIHRwLnN5c3RlbSA9IHRwR2VuLmZpbmQobSA9PiBtLm5hbWUgPT0gXCJzeXN0ZW1cIik7XG5cbiAgICAgICAgaWYgKCF0cC5zeXN0ZW0pIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk5vIHNlIHB1ZG8gYWNjZWRlciBhbCBvYmpldG8gZGUgZnVuY2lvbmVzIGFjdHVhbGVzIGRlIFRlbXBsYXRlci5cIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc29sZS5sb2coJ3RwIGVuIFlBTUxVcGRhdGVyQVBJIHNlIGhhIGNhcmdhZG8gc2F0aXNmYWN0b3JpYW1lbnRlJyk7XG4gICAgcmV0dXJuIHRwO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEZlY2hhKGZsYWcsIGFjdHVhbCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0ZWFyRmVjaGEobmV3IERhdGUoKSk7XG4gICAgfVxuXG4gICAgZm9ybWF0ZWFyRmVjaGEoZmVjaGE6IERhdGUpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBmZWNoYS5nZXRUaW1lem9uZU9mZnNldCgpICogNjAwMDA7XG4gICAgICAgIGNvbnN0IGZlY2hhTG9jYWwgPSBuZXcgRGF0ZShmZWNoYS5nZXRUaW1lKCkgLSBvZmZzZXQpO1xuICAgICAgICBjb25zdCBmZWNoYUZvcm1hdG8gPSBmZWNoYUxvY2FsLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcbiAgICAgICAgY29uc3QgZGlhcyA9IFsnRG9taW5nbycsICdMdW5lcycsICdNYXJ0ZXMnLCAnTWlcdTAwRTlyY29sZXMnLCAnSnVldmVzJywgJ1ZpZXJuZXMnLCAnU1x1MDBFMWJhZG8nXTtcbiAgICAgICAgY29uc3QgZGlhU2VtYW5hID0gZGlhc1tmZWNoYS5nZXREYXkoKV07XG4gICAgICAgIGNvbnN0IGhvcmFGb3JtYXRvID0gZmVjaGEudG9UaW1lU3RyaW5nKCkuc3BsaXQoJyAnKVswXS5zdWJzdHJpbmcoMCwgNSk7XG4gICAgICAgIHJldHVybiBgJHtmZWNoYUZvcm1hdG99ICR7ZGlhU2VtYW5hfSAke2hvcmFGb3JtYXRvfWA7XG4gICAgfVxuXG5cbiAgICBhc3luYyBnZXRIb3JhRmluYWwocGFyYW1ldHJvLCBhY3R1YWwpe1xuICAgICAgICAvLyBFc3RhIGZ1bmNpXHUwMEYzbiBzb2xvIHJlY2liZSBlbiBlbCBwYXJcdTAwRTFtZXRybyBsYSBob3JhIGZpbmFsIG51ZXZhLCBwYXJhIGFjdHVhbGl6YXIgZWwgdmFsb3IuXG4gICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICBpZiAocGFyYW1ldHJvID09PSB1bmRlZmluZWQpe1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRlYXJGZWNoYShuZXcgRGF0ZSgpKTtcbiAgICAgICAgfWVsc2V7IFxuICAgICAgICAgICAgcmV0dXJuIHBhcmFtZXRybztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGdldFRpZW1wb1RyYWJhamFkbyhwYXJhbWV0cm8sIGFjdHVhbCl7XG4gICAgICAgIGRlYnVnZ2VyXG4gICAgICAgIFxuICAgICAgICBsZXQgaG9yYUluaWNpb1N0ciA9IHRoaXMuaW5mb05vdGEuaG9yYUluaWNpbztcbiAgICAgICAgbGV0IGNpZXJyZTtcbiAgICAgICAgLy8gU3Vwb25pZW5kbyBxdWUgZWwgZm9ybWF0byBlcyBcIllZWVktTU0tREQgZGRkZCBISDptbVwiIHkgcXVpZXJlcyBjb252ZXJ0aXJsbyBhIHVuIGZvcm1hdG8gcmVjb25vY2lkbyBwb3IgRGF0ZVxuICAgICAgICAvLyBQcmltZXJvLCBlbGltaW5hIGxhIHBhcnRlIGRlbCBkXHUwMEVEYSBkZSBsYSBzZW1hbmEsIHlhIHF1ZSBEYXRlKCkgbm8gbGEgbmVjZXNpdGFcbiAgICAgICAgbGV0IFtmZWNoYSwgLCBob3JhXSA9IGhvcmFJbmljaW9TdHIuc3BsaXQoJyAnKTtcbiAgICAgICAgbGV0IGZlY2hhSG9yYUlTTyA9IGAke2ZlY2hhfVQke2hvcmF9YDtcbiAgICAgICAgLy8gQ3JlYXIgb2JqZXRvcyBEYXRlXG4gICAgICAgIGxldCBob3JhSW5pY2lvID0gbmV3IERhdGUoZmVjaGFIb3JhSVNPKTtcbiAgICAgICAgaWYgKHBhcmFtZXRybyA9PSB1bmRlZmluZWQpeyAgICBcbiAgICAgICAgY2llcnJlID0gbmV3IERhdGUoKTtcblxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGxldCBbZmVjaGFDaWVycmUsICxob3JhQ2llcnJlXSA9IHBhcmFtZXRyby5zcGxpdCgnICcpOyAgIFxuICAgICAgICAgICAgbGV0IGZlY2hhSG9yYUNpZXJyZUlTTyA9IGAke2ZlY2hhQ2llcnJlfVQke2hvcmFDaWVycmV9YDtcbiAgICAgICAgICAgIGNpZXJyZSA9IG5ldyBEYXRlKGZlY2hhSG9yYUNpZXJyZUlTTyk7XG4gICAgICAgIH0gICAgICAgIFxuICAgICAgICAvLyBDYWxjdWxhciBsYSBkaWZlcmVuY2lhIGVuIG1pbGlzZWd1bmRvc1xuICAgICAgICBsZXQgZGlmZXJlbmNpYUVuTWlsaXNlZ3VuZG9zID0gY2llcnJlIC0gaG9yYUluaWNpbztcbiAgICAgICAgcmV0dXJuIGRpZmVyZW5jaWFFbk1pbGlzZWd1bmRvcztcbiAgICB9XG5cblxuICAgIGFzeW5jIGdldFNlY0lkKGZsYWcsIGFjdHVhbCl7XG5cbiAgICB9XG4gICAgXG4gICAgYXN5bmMgZ2V0VGl0dWxvKGZsYWcsIGFjdHVhbCl7XG4gICAgICAgIGxldCB0aXR1bG8gPSBhd2FpdCB0aGlzLnRwLnN5c3RlbS5wcm9tcHQoYFRpdHVsbyBkZSBlc3RlKGEpICR7dGhpcy5pbmZvU3Vic2lzdGVtYS5uYW1lfWAsIGAke3RoaXMuaW5mb1N1YnNpc3RlbWEubmFtZX0gLSAke3RoaXMubm90YS5pZH1gLCB0cnVlKVxuXHQgICAgLy8gVmVyaWZpY2FyIHNpIGVsIHVzdWFyaW8gcHJlc2lvblx1MDBGMyBFc2MuXG4gICAgICAgIGlmICh0aXR1bG8gPT09IG51bGwpIHtcbiAgICAgICAgbmV3IE5vdGljZShcIkNyZWFjaVx1MDBGM24gZGUgbm90YSBjYW5jZWxhZGEgcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgICAgICByZXR1cm47IC8vIFRlcm1pbmEgbGEgZWplY3VjaVx1MDBGM24gZGUgbGEgZnVuY2lcdTAwRjNuIGFxdVx1MDBFRC5cblx0ICAgIH1cbiAgICAgICAgdGhpcy5ub3RhLnRpdHVsbyA9IHRpdHVsbztcbiAgICAgICAgcmV0dXJuIHRpdHVsbztcbiAgICB9XG5cbiAgICBhc3luYyBnZXREZXNjcmlwY2lvbihmbGFnLCBhY3R1YWwpe1xuICAgICAgICBsZXQgcHJvbXB0ID0gdGhpcy50cC5zeXN0ZW0uc3RhdGljX2Z1bmN0aW9ucy5nZXQoXCJwcm9tcHRcIik7XG4gICAgICAgIGxldCBkZXNjcmlwY2lvbjtcbiAgICAgICAgc3dpdGNoIChmbGFnKSB7XG4gICAgICAgICAgICBjYXNlIFwiUmVnaXN0cm9UaWVtcG9cIjpcbiAgICAgICAgICAgICAgICAgZGVzY3JpcGNpb24gPSBhd2FpdCBwcm9tcHQoXCJcdTAwQkZEZXRhbGxlIGRlbCBSZWdpc3RybyBUaWVtcG86XCIsIGFjdHVhbCwgZmFsc2UsIHRydWUgKSAgIFxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgZGVzY3JpcGNpb24gPSBhd2FpdCBwcm9tcHQoXCJcdTAwQkZRdWllcmVzIGFncmVnYXIgdW5hIGRlc2NyaXBjaVx1MDBGM24/XCIsIFwiIFwiICsgYEVzdGEgbm90YSBlcyBzb2JyZSAke3RoaXMubm90YS50aXR1bG99YCwgZmFsc2UsIHRydWUgKVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9IFxuXHQgICAgLy8gVmVyaWZpY2FyIHNpIGVsIHVzdWFyaW8gcHJlc2lvblx1MDBGMyBFc2MuXG4gICAgICAgIGlmIChkZXNjcmlwY2lvbiA9PT0gbnVsbCkge1xuICAgICAgICBuZXcgTm90aWNlKFwiQ3JlYWNpXHUwMEYzbiBkZSBub3RhIGNhbmNlbGFkYSBwb3IgZWwgdXN1YXJpby5cIik7XG4gICAgICAgIHJldHVybjsgLy8gVGVybWluYSBsYSBlamVjdWNpXHUwMEYzbiBkZSBsYSBmdW5jaVx1MDBGM24gYXF1XHUwMEVELlxuXHQgICAgfVxuICAgICAgICB0aGlzLm5vdGEuZGVzY3JpcGNpb24gPSBkZXNjcmlwY2lvbjtcbiAgICAgICAgcmV0dXJuIGRlc2NyaXBjaW9uO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEFsaWFzZXMoZmxhZywgYWN0dWFsKXtcbiAgICAgICAgdGhpcy5ub3RhLmFsaWFzZXMgPSBbXTsgICAgICBcbiAgICAgICAgc3dpdGNoKHRoaXMuaW5mb1N1YnNpc3RlbWEudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcIkF4XCI6XG4gICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFsaWFzZXMucHVzaChgJHt0aGlzLm5vdGEudGl0dWxvfWApXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFsaWFzZXMucHVzaChgJHt0aGlzLmluZm9TdWJzaXN0ZW1hLnR5cGV9IC0gJHt0aGlzLm5vdGEudGl0dWxvfWApXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiQVZcIjpcbiAgICAgICAgICAgIGNhc2UgXCJBSVwiOlxuICAgICAgICAgICAgICAgIC8vIDAgLT4gTm9tYnJlLCAxIC0+IHR5cGUgKyBOb21icmVcbiAgICAgICAgICAgICAgICBicmVhazsgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm90YS5hbGlhc2VzO1xuICAgICAgIFxuICAgIH1cblxuICAgIGFzeW5jIGdldEFzdW50byhmbGFnLCBhY3R1YWwpe1xuICAgICAgICBsZXQgc2lBc3VudG8sIG5vbWJyZTsgXG4gICAgICAgIGxldCBhY3Rpdm8gPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcbiAgICAgICAgaWYgKGFjdGl2byAhPSBudWxsKXsgXG4gICAgICAgICAgICBub21icmUgPSBhY3Rpdm8uYmFzZW5hbWU7XG4gICAgICAgICAgICBjb25zdCBub3RhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGFjdGl2byk7IFxuICAgICAgICAgICAgc2lBc3VudG8gPSBhd2FpdCB0aGlzLnRwLnN5c3RlbS5zdWdnZXN0ZXIoW1wiU2lcIixcIk5vXCJdLFt0cnVlLCBmYWxzZV0sIHRydWUsIG5vbWJyZSArIFwiIGVzIG9yaWdlbiBkZSBcIiArIHRoaXMubm90YS50aXR1bG8gKyBcIj9cIilcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHNpQXN1bnRvID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbm9tYnJlID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5ub3RhLmFzdW50byA9IHt9O1xuICAgICAgICAgICAgdGhpcy5ub3RhLmFzdW50by5zaUFzdW50byA9IHNpQXN1bnRvO1xuICAgICAgICAgICAgdGhpcy5ub3RhLmFzdW50by5ub21icmUgPSBub21icmU7ICAgIFxuICAgICAgICByZXR1cm4ge3NpQXN1bnRvLCBub21icmV9XG4gICAgfVxuXG5cbiAgICBhc3luYyBnZXRDbGFzaWZpY2FjaW9uKGZsYWcsIGFjdHVhbCl7XG4gICAgICAgIGxldCBjbGFzaWZpY2FjaW9uLCB0YWdDbGFzaWZpY2FjaW9uLCBjbGFzaWZpY2FjaW9uQVgsIHRhZ3NDbGFzaWZpY2FjaW9uQVg7XG4gICAgICAgIGxldCBudWV2YUNsYXNpZmljYWNpb24gPSBmYWxzZTtcbiAgICAgICAgY29uc3QgZmlsZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgodGhpcy5wYXRoQ2FtcG9zKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGZyb250bWF0dGVyID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpPy5mcm9udG1hdHRlcjtcbiAgICAgICAgaWYgKGZyb250bWF0dGVyKSB7XG4gICAgICAgICAgICBjbGFzaWZpY2FjaW9uQVggPSBmcm9udG1hdHRlci50aXR1bG9DbGFzaWZpY2FjaW9uQVggfHwgW107XG4gICAgICAgICAgICB0YWdzQ2xhc2lmaWNhY2lvbkFYID0gZnJvbnRtYXR0ZXIudGFnc0NsYXNpZmljYWNpb25BWCB8fCBbXTtcbiAgICAgICAgICAgIHRhZ0NsYXNpZmljYWNpb24gPSBhd2FpdCB0aGlzLnRwLnN5c3RlbS5zdWdnZXN0ZXIoY2xhc2lmaWNhY2lvbkFYLCB0YWdzQ2xhc2lmaWNhY2lvbkFYLCBmYWxzZSwgXCJcdTAwQkZDbGFzaWZpY2FyXHUwMEVEYXMgZXN0YSBub3RhIGJham8gYWxndW5hIGRlIGxhcyBzaWd1aWVudGVzIGNhdGVnb3JcdTAwRURhcz9cIilcbiAgICAgICAgICAgIC8vIFZlcmlmaWNhciBzaSBlbCB1c3VhcmlvIHByZXNpb25cdTAwRjMgRXNjLiBcbiAgICAgICAgICAgIGlmICh0YWdDbGFzaWZpY2FjaW9uID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIkNyZWFjaVx1MDBGM24gZGUgbm90YSBjYW5jZWxhZGEgcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjsgLy8gVGVybWluYSBsYSBlamVjdWNpXHUwMEYzbiBkZSBsYSBmdW5jaVx1MDBGM24gYXF1XHUwMEVELlxuICAgICAgICAgICAgfSBlbHNlIGlmICh0YWdDbGFzaWZpY2FjaW9uPT1cIk51ZXZvXCIpe1xuICAgICAgICAgICAgICAgIGNsYXNpZmljYWNpb24gPSBhd2FpdCB0aGlzLnRwLnN5c3RlbS5wcm9tcHQoXCJcdTAwQkZDdWFsIGVzIGVsIG5vbWJyZSBkZSBsYSBudWV2YSBjbGFzaWZpY2FjaVx1MDBGM24gcXVlIHZhcyBhIGluZ3Jlc2FyP1wiLCBcIk1pQ2xhc2lmaWNhY2lcdTAwRjNuXCIsIHRydWUpXG4gICAgICAgICAgICAgICAgLy8gVmVyaWZpY2FyIHNpIGVsIHVzdWFyaW8gcHJlc2lvblx1MDBGMyBFc2MuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGFzaWZpY2FjaW9uID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiQ3JlYWNpXHUwMEYzbiBkZSBub3RhIGNhbmNlbGFkYSBwb3IgZWwgdXN1YXJpby5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47IC8vIFRlcm1pbmEgbGEgZWplY3VjaVx1MDBGM24gZGUgbGEgZnVuY2lcdTAwRjNuIGFxdVx1MDBFRC5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRhZ0NsYXNpZmljYWNpb24gPSBhd2FpdCB0aGlzLnRwLnN5c3RlbS5wcm9tcHQoXCJcdTAwQkZDdWFsIGVzIGVsIHRhZyBxdWUgdXRpbGl6YXJhcyBwYXJhIFwiICsgY2xhc2lmaWNhY2lvbiArIFwiPy4gTm8gdXRpbGljZXMgZXNwYWNpb3MgZW4gbGEgZGVmaW5pY2lcdTAwRjNuIGRlbCB0YWcuXCIsIFwibnVldm9UYWdcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAvLyBWZXJpZmljYXIgc2kgZWwgdXN1YXJpbyBwcmVzaW9uXHUwMEYzIEVzYy5cbiAgICAgICAgICAgICAgICBpZiAodGFnQ2xhc2lmaWNhY2lvbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiQ3JlYWNpXHUwMEYzbiBkZSBub3RhIGNhbmNlbGFkYSBwb3IgZWwgdXN1YXJpby5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gVGVybWluYSBsYSBlamVjdWNpXHUwMEYzbiBkZSBsYSBmdW5jaVx1MDBGM24gYXF1XHUwMEVELlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBudWV2YUNsYXNpZmljYWNpb24gPSB0cnVlO1xuICAgICAgICAgICAgfWVsc2UgaWYodGFnQ2xhc2lmaWNhY2lvbj09XCJOaW5ndW5hXCIpe1xuICAgICAgICAgICAgICAgIHRhZ0NsYXNpZmljYWNpb24gPSBcIlwiXG4gICAgICAgICAgICAgICAgY2xhc2lmaWNhY2lvbiA9IFwiXCJcdFxuICAgICAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBpbmRpY2UgPSB0YWdzQ2xhc2lmaWNhY2lvbkFYLmluZGV4T2YodGFnQ2xhc2lmaWNhY2lvbilcbiAgICAgICAgICAgICAgICBjbGFzaWZpY2FjaW9uID0gY2xhc2lmaWNhY2lvbkFYW2luZGljZV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChudWV2YUNsYXNpZmljYWNpb24pIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgYXBwLmZpbGVNYW5hZ2VyLnByb2Nlc3NGcm9udE1hdHRlcihmaWxlLCBmcm9udG1hdHRlciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFzdW1pZW5kbyBxdWUgJ2FjdHNUZW1hcycgZXMgZWwgY2FtcG8gYSBtb2RpZmljYXJcbiAgICAgICAgICAgICAgICBsZXQgbmV3Q2xhc2lmaWNhY2lvbiA9IFsuLi5jbGFzaWZpY2FjaW9uQVgsIGNsYXNpZmljYWNpb25dXG4gICAgICAgICAgICAgICAgbGV0IG5ld1RhZ0NsYXNpZmljYWNpb24gPSBbLi4udGFnc0NsYXNpZmljYWNpb25BWCwgdGFnQ2xhc2lmaWNhY2lvbl1cbiAgICAgICAgICAgICAgICBmcm9udG1hdHRlci50aXR1bG9DbGFzaWZpY2FjaW9uQVggPSBuZXdDbGFzaWZpY2FjaW9uO1xuICAgICAgICAgICAgICAgIGZyb250bWF0dGVyLnRhZ3NDbGFzaWZpY2FjaW9uQVggPSBuZXdUYWdDbGFzaWZpY2FjaW9uO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRnJvbnRtYXR0ZXIgYWN0dWFsaXphZG8gY29uIFx1MDBFOXhpdG9cIik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWwgYWN0dWFsaXphciBlbCBmcm9udG1hdHRlclwiLCBlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICBpZiAodGFnQ2xhc2lmaWNhY2lvbiAhPSBcIlwiKXtcbiAgICAgICAgICAgIHRhZ0NsYXNpZmljYWNpb24gPSBcImNsL1wiICsgdGFnQ2xhc2lmaWNhY2lvbiBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubm90YS5jbGFzaWZpY2FjaW9uQVggPSBjbGFzaWZpY2FjaW9uO1xuICAgICAgICAgICAgdGhpcy5ub3RhLnRhZ0NsYXNpZmljYWNpb25BWCA9IHRhZ0NsYXNpZmljYWNpb247XG4gICAgICAgICAgICByZXR1cm4ge2NsYXNlOiBjbGFzaWZpY2FjaW9uLCB0YWc6IHRhZ0NsYXNpZmljYWNpb259O1xuICAgIH1cbiAgICAvLyAtPlxuXG4gICAgYXN5bmMgZ2V0RXN0YWRvKHBhcmFtZXRybywgYWN0dWFsKXtcbiAgICAgICAgZGVidWdnZXI7XG4gICAgICAgIGxldCBjYW1wbztcbiAgICAgICAgaWYgKHBhcmFtZXRybyA9PSB1bmRlZmluZWQpe1xuICAgICAgICBsZXQgc3VnZ2VzdGVyID0gdGhpcy50cC5zeXN0ZW0uc3RhdGljX2Z1bmN0aW9ucy5nZXQoXCJzdWdnZXN0ZXJcIik7XG5cdCAgICBjYW1wbyA9IGF3YWl0IHN1Z2dlc3RlcihbXCJcdUQ4M0RcdUREMzUgLT4gQ29tcGxldGFkbyAtIEluZm9ybWFjaVx1MDBGM25cIiwgXCJcdUQ4M0RcdURGRTIgLT4gRmluYWxpemFkb1wiLFwiXHVEODNEXHVERkUxIC0+IEVuIGVqZWN1Y2lcdTAwRjNuXCIsIFwiXHVEODNEXHVERDM0IC0+IERldGVuaWRvXCJdLFtcIlx1RDgzRFx1REQzNVwiLCBcIlx1RDgzRFx1REZFMlwiLFwiXHVEODNEXHVERkUxXCIsIFwiXHVEODNEXHVERDM0XCJdLCBmYWxzZSwgXCJTZWxlY2Npb25lIGVsIG51ZXZvIGVzdGFkbzpcIik7XG4gICAgICAgIC8vIFZlcmlmaWNhciBzaSBlbCB1c3VhcmlvIHByZXNpb25cdTAwRjMgRXNjLlxuICAgICAgICBpZiAoY2FtcG8gPT09IG51bGwpIHtcbiAgICAgICAgbmV3IE5vdGljZShcIk1vZGlmaWNhY2lcdTAwRjNuIGRlIG5vdGEgY2FuY2VsYWRhIHBvciBlbCB1c3VhcmlvLlwiKTtcbiAgICAgICAgcmV0dXJuOyAvLyBUZXJtaW5hIGxhIGVqZWN1Y2lcdTAwRjNuIGRlIGxhIGZ1bmNpXHUwMEYzbiBhcXVcdTAwRUQuXG5cdCAgICB9XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgY2FtcG8gPSBwYXJhbWV0cm87XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm5vdGEuZXN0YWRvID0gY2FtcG87XG4gICAgICAgIHJldHVybiBjYW1wbztcbiAgICB9XG5cbiAgICBhc3luYyBnZXRGaWxlbmFtZShmbGFnLCBhY3R1YWwpe1xuICAgICAgICBzd2l0Y2godGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiQVZcIjpcbiAgICAgICAgICAgIGNhc2UgXCJBSVwiOlxuICAgICAgICAgICAgICAgIHRoaXMubm90YS5maWxlTmFtZSA9IChgJHt0aGlzLmluZm9TdWJzaXN0ZW1hLmZvbGRlcn0vJHt0aGlzLm5vdGEudGl0dWxvfS9pbmRleCR7dGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlfWApXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiQXhcIjpcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGEuZmlsZU5hbWUgPSAoYCR7dGhpcy5pbmZvU3Vic2lzdGVtYS5mb2xkZXJ9LyR7dGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlfSAtICR7dGhpcy5ub3RhLmlkfWApXG4gICAgICAgICAgICAgICAgYnJlYWs7ICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vdGEuZmlsZU5hbWU7XG4gICAgfVxuXG4gICAgYXN5bmMgbW9kYWxDYW1iaW9IRihub3RhKXtcbiAgICAgICAgZGVidWdnZXI7XG4gICAgICAgIGxldCBtb2RhbCA9IG5ldyBtb2RhbF9jYW1iaW9IRih0aGlzLnBsdWdpbiwgbm90YSk7XG4gICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICB9XG4gICBcblxuICB9XG4gICIsICIvKlxuICogRmlsZW5hbWU6IC9zcmMvbW9kdWxlcy9tb2R1bG9SZWdpc3Ryb1RpZW1wby9tb2RhbHMvY2FtYmlvSEYudHNcbiAqIFBhdGg6IC9zcmMvbW9kdWxlcy9tb2R1bG9SZWdpc3Ryb1RpZW1wby9tb2RhbHNcbiAqIENyZWF0ZWQgRGF0ZTogMjAyNC0wMy0yMyAxNzoyMzoxMFxuICogQXV0aG9yOiBBbmRyXHUwMEU5cyBKdWxpXHUwMEUxbiBCb3JiXHUwMEYzblxuICogLS0tLS1cbiAqIExhc3QgTW9kaWZpZWQ6IDIwMjUtMDItMjMgMTc6NDY6MjJcbiAqIE1vZGlmaWVkIEJ5OiBBbmRyXHUwMEU5cyBKdWxpXHUwMEUxbiBCb3JiXHUwMEYzblxuICogLS0tLS1cbiAqIENvcHlyaWdodCAoYykgMjAyNSAtIEFuZHJcdTAwRTlzIEp1bGlcdTAwRTFuIEJvcmJcdTAwRjNuXG4gKi9cblxuXG5pbXBvcnQgeyBNb2RhbCwgQXBwLCBURmlsZSwgTm90aWNlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgWUFNTFVwZGF0ZXJBUEkgfSBmcm9tICcuLi8uLi9ub3RlTGlmZWN5Y2xlTWFuYWdlci9BUEkvWUFNTFVwZGF0ZXJBUEknO1xuXG5leHBvcnQgY2xhc3MgbW9kYWxfY2FtYmlvSEYgZXh0ZW5kcyBNb2RhbCB7XG4gICAgZmlsZTogVEZpbGU7XG4gICAgYXBwOiBBcHA7XG4gICAgaG9yYUZpbmFsSW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IFBsdWdpbiwgZmlsZTogVEZpbGUpIHtcbiAgICAgICAgc3VwZXIocGx1Z2luLmFwcCk7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgICAgICB0aGlzLmZpbGUgPSBmaWxlO1xuICAgIH1cblxuICAgIGFzeW5jIG9uT3BlbigpIHtcbiAgICAgICAgZGVidWdnZXI7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuY2xhc3NMaXN0LmFkZChcIm1vZGFsSW5ib3hcIik7XG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLnBsdWdpbi5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUodGhpcy5maWxlLmZpbGUpO1xuICAgICAgICBjb25zdCBhbGlhc2VzID0gbWV0YWRhdGE/LmZyb250bWF0dGVyPy5hbGlhc2VzIHx8IFwiQWN0aXZpZGFkIHNpbiBhbGlhc1wiO1xuICAgICAgICAvLyBDb252ZXJ0aXIgaG9yYUluaWNpb1N0ciBhIGZvcm1hdG8gXCJZWVlZLU1NLUREVEhIOk1NXCIgcGFyYSBkYXRldGltZS1sb2NhbFxuICAgICAgICBjb25zdCBob3JhRmluU3RyID0gbWV0YWRhdGE/LmZyb250bWF0dGVyPy5ob3JhRmluYWwgPyB3aW5kb3cubW9tZW50KG1ldGFkYXRhLmZyb250bWF0dGVyLmhvcmFGaW5hbCwgXCJZWVlZLU1NLUREIGRkZGQgSEg6bW1cIikuZm9ybWF0KFwiWVlZWS1NTS1ERFRISDptbVwiKSA6ICcnO1xuXG4gICAgICAgIC8vIENvbmZpZ3VyYSBlbCB0XHUwMEVEdHVsbyBkZWwgbW9kYWwgeSBtdWVzdHJhIGVsIGFsaWFzIGRlIGxhIHRhcmVhXG4gICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6IGBDYW1iaW8gaG9yYSBjaWVycmUgZGUgcmVnaXN0cm8uYCB9KTtcbiAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiBgVGFyZWE6IFwiJHthbGlhc2VzWzBdfVwiYCB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIElucHV0IHBhcmEgbGEgaG9yYSBkZSBpbmljaW8gY29uIHRpcG8gZGF0ZXRpbWUtbG9jYWxcbiAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnSG9yYSBkZSBjaWVycmUgcmVnaXN0cm86JyB9KTtcbiAgICAgICAgdGhpcy5ob3JhRmluYWxJbnB1dCA9IGNvbnRlbnRFbC5jcmVhdGVFbCgnaW5wdXQnLCB7XG4gICAgICAgICAgICB0eXBlOiAnZGF0ZXRpbWUtbG9jYWwnLFxuICAgICAgICAgICAgdmFsdWU6IGhvcmFGaW5TdHJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQm90XHUwMEYzbiBwYXJhIGd1YXJkYXIgY2FtYmlvc1xuICAgICAgICBjb25zdCBzYXZlQnV0dG9uID0gY29udGVudEVsLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdHdWFyZGFyIGNhbWJpb3MnIH0pO1xuICAgICAgICBzYXZlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB0aGlzLmd1YXJkYXJDYW1iaW9zKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ3VhcmRhckNhbWJpb3MoKSB7XG4gICAgICAgIGNvbnN0IG51ZXZhSG9yYUZpbmFsTG9jYWwgPSB0aGlzLmhvcmFGaW5hbElucHV0LnZhbHVlO1xuICAgICAgICAvLyBBc2VndXJhciBxdWUgbGEgbnVldmEgaG9yYSB0aWVuZSB2YWxvciBhbnRlcyBkZSBpbnRlbnRhciBmb3JtYXRlYXJcbiAgICAgICAgaWYgKCFudWV2YUhvcmFGaW5hbExvY2FsKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKFwiUG9yIGZhdm9yLCBzZWxlY2Npb25lIHVuYSBob3JhIGRlIGNpZXJyZS5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb252ZXJ0aXIgZGUgXCJZWVlZLU1NLUREVEhIOk1NXCIgYSBcIllZWVktTU0tREQgZGRkZCBISDptbVwiXG4gICAgICAgIGNvbnN0IG51ZXZhSG9yYUZpbmFsID0gd2luZG93Lm1vbWVudChudWV2YUhvcmFGaW5hbExvY2FsKS5mb3JtYXQoXCJZWVlZLU1NLUREIGRkZGQgSEg6bW1cIik7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICAgICAgLy8gRWplY3V0YXIgWUFNTCBVcGRhdGVcbiAgICAgICAgICAgIGxldCBjYW1wb3MgPSBbXCJmZWNoYVwiLGBob3JhRmluYWxfJHtudWV2YUhvcmFGaW5hbH1gLGB0aWVtcG9UcmFiYWphZG9fJHtudWV2YUhvcmFGaW5hbH1gLCBcImVzdGFkb19cdUQ4M0RcdUREMzVcIl07XG4gICAgICAgICAgICBsZXQgcmVzdWx0YWRvID0gYXdhaXQgdGhpcy5wbHVnaW4uWUFNTFVwZGF0ZXJBUEkuYWN0dWFsaXphck5vdGEodGhpcy5maWxlLCBjYW1wb3MpO1xuXG5cblxuXG4gICAgICAgICAgICAvLyBDZXJyYXIgZWwgbW9kYWwgZGVzcHVcdTAwRTlzIGRlIGd1YXJkYXIgbG9zIGNhbWJpb3NcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJIb3JhIGRlIEZpbmFsaXphY2lcdTAwRjNuIGFjdHVhbGl6YWRhIGNvcnJlY3RhbWVudGUuXCIpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIGd1YXJkYXIgY2FtYmlvcyBlbiBsYSBub3RhOlwiLCBlcnJvcik7XG4gICAgICAgICAgICBuZXcgTm90aWNlKFwiRXJyb3IgYWwgZ3VhcmRhciBsb3MgY2FtYmlvcyBlbiBsYSBub3RhLlwiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsICIvKlxuICogRmlsZW5hbWU6IC9zcmMvbW9kdWxlcy9ub3RlTGlmZWN5Y2xlTWFuYWdlci9BUEkvbWVudURpYXJpb0FQSS50c1xuICogUGF0aDogL3NyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL0FQSVxuICogQ3JlYXRlZCBEYXRlOiAyMDI0LTAzLTA3IDE2OjA5OjE2XG4gKiBBdXRob3I6IEFuZHJcdTAwRTlzIEp1bGlcdTAwRTFuIEJvcmJcdTAwRjNuXG4gKiAtLS0tLVxuICogTGFzdCBNb2RpZmllZDogMjAyNS0wMi0yMyAxNzo0ODo1MFxuICogTW9kaWZpZWQgQnk6IEFuZHJcdTAwRTlzIEp1bGlcdTAwRTFuIEJvcmJcdTAwRjNuXG4gKiAtLS0tLVxuICogQ29weXJpZ2h0IChjKSAyMDI1IC0gQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqL1xuXG5cbmltcG9ydCB7Tm90aWNlLCBURmlsZX0gZnJvbSAnb2JzaWRpYW4nXG5pbXBvcnQge0RhdGVUaW1lLCBEdXJhdGlvbn0gZnJvbSAnbHV4b24nXG5pbXBvcnQgeyBzdGFydGVyQVBJIH0gZnJvbSAnLi9zdGFydGVyQVBJJztcbmltcG9ydCB7IHV0aWxzQVBJIH0gZnJvbSAnLi4vLi4vbW9kdWxvUmVnaXN0cm9UaWVtcG8vQVBJL3V0aWxzQVBJJztcbmltcG9ydCB7IHJlZ2lzdHJvVGllbXBvQVBJIH0gZnJvbSAnLi4vLi4vbW9kdWxvUmVnaXN0cm9UaWVtcG8vQVBJL3JlZ2lzdHJvVGllbXBvQVBJJztcblxuZXhwb3J0IGNsYXNzIG1lbnVIb3lBUEkge1xuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgICAgICB0aGlzLmFwcCA9IHBsdWdpbi5hcHA7ICAvLyBHdWFyZGEgdW5hIHJlZmVyZW5jaWEgYSBsYSBhcGxpY2FjaVx1MDBGM24gT2JzaWRpYW4gcGFyYSBhY2NlZGVyIGEgc3VzIG1cdTAwRTl0b2RvcyB5IHByb3BpZWRhZGVzXG4gICAgICAgIHRoaXMucmVnaXN0cm9UaWVtcG9BUEkgPSBuZXcgcmVnaXN0cm9UaWVtcG9BUEkodGhpcy5wbHVnaW4pO1xuICAgIH1cblxuICAgIC8vIEZ1bmNpXHUwMEYzbiBwYXJhIGNyZWFyIHkgbW9zdHJhciBlbCBib3RcdTAwRjNuIGluaWNpYWwgXCJNZW5cdTAwRkEgaG95XCJcbiAgICBhc3luYyBtb3N0cmFyTWVudShkdikge1xuICAgICAgICBkdi5jb250YWluZXIuaW5uZXJIVE1MID0gJyc7IC8vIExpbXBpYXIgZWwgY29udGVuZWRvclxuXG4gICAgICAgIGNvbnN0IGJvdG9uTWVudUhveSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICBib3Rvbk1lbnVIb3kudGV4dENvbnRlbnQgPSAnTWVuXHUwMEZBIGhveSc7XG4gICAgICAgIGR2LmNvbnRhaW5lci5hcHBlbmRDaGlsZChib3Rvbk1lbnVIb3kpO1xuXG4gICAgICAgIGJvdG9uTWVudUhveS5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5tb3N0cmFyQm90b25lcyhkdik7IC8vIE1vc3RyYXIgbG9zIGJvdG9uZXMgYWRpY2lvbmFsZXMgYWwgaGFjZXIgY2xpY1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIE1cdTAwRTl0b2RvIG1vZGlmaWNhZG8gcGFyYSBhZGFwdGFyc2UgYWwgY29udGV4dG8gZGVsIHBsdWdpblxuICAgIGFzeW5jIG1vc3RyYXJCb3RvbmVzKGR2KSB7XG4gICAgICAgIGR2LmNvbnRhaW5lci5pbm5lckhUTUwgPSAnJzsgLy8gTGltcGlhciBlbCBjb250ZW5lZG9yIHBhcmEgcmVtb3ZlciBlbCBib3RcdTAwRjNuIGRlIG1lblx1MDBGQVxuXG4gICAgICAgIGNvbnN0IGJvdG9uZXMgPSBbXG4gICAgICAgICAgICBcIkhcdTAwRTFiaXRvc1wiLCBcIkJhbGFuY2VcIiwgXCJSZWdpc3RybyBkZSBUYXJlYXNcIiwgXCJOb3RhcyBkXHUwMEVEYVwiLCBcIlBlcnNvbmFsZXNcIlxuICAgICAgICBdO1xuXG4gICAgICAgIC8vIENyZWFyIHkgbW9zdHJhciBjYWRhIGJvdFx1MDBGM25cbiAgICAgICAgYm90b25lcy5mb3JFYWNoKHRleHRvQm90b24gPT4ge1xuICAgICAgICAgICAgY29uc3QgYm90b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgIGJvdG9uLnRleHRDb250ZW50ID0gdGV4dG9Cb3RvbjtcbiAgICAgICAgICAgIGJvdG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc3dpdGNoKHRleHRvQm90b24pIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQmFsYW5jZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm1vc3RyYXJCb3RvbkJhbGFuY2VQZXJzb25hbChkdik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnSFx1MDBFMWJpdG9zJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubW9zdHJhckZvcm11bGFyaW9IYWJpdG9zKGR2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdSZWdpc3RybyBkZSBUYXJlYXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tb3N0cmFyQm90b25SZWdpc3Ryb1RhcmVhcyhkdik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTm90YXMgZFx1MDBFRGEnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tb3N0cmFyQm90b25lc05vdGFzRFx1MDBFRGEoZHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1BlcnNvbmFsZXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tb3N0cmFyQm90b25lc05vdGFzUGVyc29uYWxlcyhkdik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke3RleHRvQm90b259IHByZXNpb25hZG8uYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZHYuY29udGFpbmVyLmFwcGVuZENoaWxkKGJvdG9uKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgYm90b25TYWxpciA9IHRoaXMuYWdyZWdhckJvdG9uU2FsaXIoZHYpO1xuICAgICAgICBkdi5jb250YWluZXIuYXBwZW5kQ2hpbGQoYm90b25TYWxpcik7XG4gICAgfVxuXG4gICAgLy8gTVx1MDBFOXRvZG8gcGFyYSBhZ3JlZ2FyIGVsIGJvdFx1MDBGM24gZGUgcmVjYXJnYSB5IHN1IGxcdTAwRjNnaWNhIChFamVtcGxvIGFkYXB0YWRvKVxuICAgIGFncmVnYXJCb3RvblNhbGlyKGR2KSB7XG4gICAgICAgIGNvbnN0IGJvdG9uUmVjYXJnYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICBib3RvblJlY2FyZ2EudGV4dENvbnRlbnQgPSAnU2FsaXInO1xuICAgICAgICBib3RvblJlY2FyZ2Eub25jbGljayA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubW9zdHJhck1lbnUoZHYpOyAvLyBSZXN0YWJsZWNlciBhIGxhIHZpc3RhIGRlbCBib3RcdTAwRjNuIGRlIG1lblx1MDBGQSBpbmljaWFsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBib3RvblJlY2FyZ2E7XG4gICAgfVxuXG4gICAgIC8vIE1cdTAwRTl0b2RvIHBhcmEgYWN0dWFsaXphciBjYW1wb3MgWUFNTFxuICAgICBhc3luYyB1cGRhdGVZQU1MRmllbGRzKGZpbGVQYXRoLCBZQU1MZmllbGQsIHZhbG9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBSdXRhIGFsIGFyY2hpdm8gcXVlIHNlIHZhIGEgbW9kaWZpY2FyXG4gICAgICAgICAgICBjb25zdCBmaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmaWxlUGF0aCk7XG4gICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgLy8gTGVlciB5IGFjdHVhbGl6YXIgZWwgZnJvbnRtYXR0ZXIgdXNhbmRvIHByb2Nlc3NGcm9udE1hdHRlclxuICAgICAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGF3YWl0IGFwcC5maWxlTWFuYWdlci5wcm9jZXNzRnJvbnRNYXR0ZXIoZmlsZSwgZnJvbnRtYXR0ZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBBY3R1YWxpemFyIGVsIHZhbG9yIGRlbCBjYW1wbyBlc3BlY2lmaWNhZG9cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGZyb250bWF0dGVyW1lBTUxmaWVsZF0gPSB2YWxvcjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBPcGNpb25hbDogTm90aWZpY2FyIGFsIHVzdWFyaW8gcXVlIGxhIGFjdHVhbGl6YWNpXHUwMEYzbiBmdWUgZXhpdG9zYVxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1lBTUwgYWN0dWFsaXphZG8gY29uIFx1MDBFOXhpdG8uJyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWwgYWN0dWFsaXphciBlbCBmcm9udG1hdHRlclwiLCBlcnIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkFyY2hpdm8gbm8gZW5jb250cmFkb1wiLCBlcnIpO1xuICAgICAgICAgICAgbmV3IE5vdGljZSgnRXJyb3IgYWwgYWN0dWFsaXphciBlbCBZQU1MLicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTVx1MDBFOXRvZG8gYWRhcHRhZG8gcGFyYSBtb3N0cmFyQm90b25CYWxhbmNlUGVyc29uYWxcbiAgICBhc3luYyBtb3N0cmFyQm90b25CYWxhbmNlUGVyc29uYWwoZHYpIHtcbiAgICAgICAgLy8gTGltcGlhciBlbCBjb250ZW5lZG9yXG4gICAgICAgIGR2LmNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICBcbiAgICAgICAgLy8gTWVuc2FqZSBpbmljaWFsXG4gICAgICAgIGNvbnN0IG1lbnNhamUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xuICAgICAgICBtZW5zYWplLnRleHRDb250ZW50ID0gJ0V2YWxcdTAwRkFhIGVsIGJhbGFuY2UgZGUgdHUgdmlkYSBob3knO1xuICAgICAgICBkdi5jb250YWluZXIuYXBwZW5kQ2hpbGQobWVuc2FqZSk7XG4gICAgXG4gICAgICAgIGNvbnN0IGluc3RydWNjaW9uZXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgIGluc3RydWNjaW9uZXMudGV4dENvbnRlbnQgPSAnRXZhbFx1MDBGQWEgZGUgMSBhIDUgY2FkYSBcdTAwRTFyZWE6JztcbiAgICAgICAgZHYuY29udGFpbmVyLmFwcGVuZENoaWxkKGluc3RydWNjaW9uZXMpO1xuICAgIFxuICAgICAgICAvLyBcdTAwQzFyZWFzIGEgZXZhbHVhclxuICAgICAgICBjb25zdCBhcmVhcyA9IFtcbiAgICAgICAgICAgIFwiUHJvZHVjdGl2aWRhZFwiLCBcIkVzcGlyaXR1YWxcIiwgXCJTYWx1ZFwiLCBcIlJ1dGluYXNcIixcbiAgICAgICAgICAgIFwiVmlkYSBTb2NpYWxcIiwgXCJGYW1pbGlhclwiLCBcIkFwcmVuZGl6YWplc1wiLCBcIkNyZWF0aXZpZGFkXCJcbiAgICAgICAgXTtcbiAgICBcbiAgICAgICAgLy8gT2J0ZW5lciBlbCBhcmNoaXZvIGFjdHVhbCB5IHN1IG1ldGFkYXRhXG4gICAgICAgIGNvbnN0IGZpbGUgPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcbiAgICAgICAgbGV0IG1ldGFkYXRhO1xuICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICBtZXRhZGF0YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXI7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gQ3JlYXIgaW5wdXQgcmFuZ2UgcGFyYSBjYWRhIFx1MDBFMXJlYVxuICAgICAgICBhcmVhcy5mb3JFYWNoKGFyZWEgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2FmZU5hbWUgPSBhcmVhLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvIC9nLCAnXycpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VmFsID0gbWV0YWRhdGEgJiYgbWV0YWRhdGFbc2FmZU5hbWVdID8gbWV0YWRhdGFbc2FmZU5hbWVdIDogMDtcbiAgICBcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbmVkb3JBcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBjb250ZW5lZG9yQXJlYS5jbGFzc0xpc3QuYWRkKCdhcmVhLWV2YWx1YWNpb24nKTtcbiAgICBcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgICAgICAgIGxhYmVsLnRleHRDb250ZW50ID0gYXJlYSArICc6ICc7XG4gICAgICAgICAgICBsYWJlbC5odG1sRm9yID0gc2FmZU5hbWU7XG4gICAgXG4gICAgICAgICAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgICBpbnB1dC50eXBlID0gJ3JhbmdlJztcbiAgICAgICAgICAgIGlucHV0LmlkID0gc2FmZU5hbWU7XG4gICAgICAgICAgICBpbnB1dC5uYW1lID0gc2FmZU5hbWU7XG4gICAgICAgICAgICBpbnB1dC5taW4gPSAnMSc7XG4gICAgICAgICAgICBpbnB1dC5tYXggPSAnNSc7XG4gICAgICAgICAgICBpbnB1dC52YWx1ZSA9IGN1cnJlbnRWYWwudG9TdHJpbmcoKTsgLy8gVXNhciB2YWxvciBhY3R1YWwgbyAwXG4gICAgXG4gICAgICAgICAgICBjb25zdCB2YWxvckxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgICAgdmFsb3JMYWJlbC50ZXh0Q29udGVudCA9IGlucHV0LnZhbHVlOyAvLyBNb3N0cmFyIGVsIHZhbG9yIGFjdHVhbCBhbCBsYWRvXG4gICAgXG4gICAgICAgICAgICBpbnB1dC5vbmlucHV0ID0gKCkgPT4gdmFsb3JMYWJlbC50ZXh0Q29udGVudCA9IGlucHV0LnZhbHVlOyAvLyBBY3R1YWxpemFyIGVsIHZhbG9yIG1vc3RyYWRvIGFsIG1vdmVyIGVsIHJhbmdlXG4gICAgXG4gICAgICAgICAgICBjb250ZW5lZG9yQXJlYS5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgICAgICAgICBjb250ZW5lZG9yQXJlYS5hcHBlbmRDaGlsZChpbnB1dCk7XG4gICAgICAgICAgICBjb250ZW5lZG9yQXJlYS5hcHBlbmRDaGlsZCh2YWxvckxhYmVsKTtcbiAgICAgICAgICAgIGR2LmNvbnRhaW5lci5hcHBlbmRDaGlsZChjb250ZW5lZG9yQXJlYSk7XG4gICAgICAgIH0pO1xuICAgIFxuICAgICAgICAvLyBCb3RcdTAwRjNuIHBhcmEgZ3VhcmRhciBsb3MgdmFsb3Jlc1xuICAgICAgICBjb25zdCBib3Rvbkd1YXJkYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgYm90b25HdWFyZGFyLnRleHRDb250ZW50ID0gJ0d1YXJkYXInO1xuICAgICAgICBib3Rvbkd1YXJkYXIub25jbGljayA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGFyZWEgb2YgYXJlYXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2FmZU5hbWUgPSBhcmVhLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvIC9nLCAnXycpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzYWZlTmFtZSkgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsb3IgPSBwYXJzZUludChpbnB1dEVsZW1lbnQudmFsdWUsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVZQU1MRmllbGRzKGZpbGUucGF0aCwgc2FmZU5hbWUsIHZhbG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnQmFsYW5jZXMgYWN0dWFsaXphZG9zIGNvbiBcdTAwRTl4aXRvLicpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdObyBzZSBwdWRvIG9idGVuZXIgZWwgYXJjaGl2byBhY3R1YWwuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGR2LmNvbnRhaW5lci5hcHBlbmRDaGlsZChib3Rvbkd1YXJkYXIpO1xuICAgIFxuICAgICAgICAvLyBBZ3JlZ2FyIGJvdFx1MDBGM24gZGUgc2FsaXIgc2kgbmVjZXNhcmlvXG4gICAgICAgIGNvbnN0IGJvdG9uU2FsaXIgPSB0aGlzLmFncmVnYXJCb3RvblNhbGlyKGR2KTtcbiAgICAgICAgZHYuY29udGFpbmVyLmFwcGVuZENoaWxkKGJvdG9uU2FsaXIpO1xuICAgIH1cblxuXG4gICAgYXN5bmMgbW9zdHJhckZvcm11bGFyaW9IYWJpdG9zKGR2KSB7XG4gICAgICAgIC8vIExpbXBpYXIgZWwgY29udGVuZWRvclxuICAgICAgICBkdi5jb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBoYWJpdG9zID0gW1xuICAgICAgICAgICAgXCJDbHViIDVhbVwiLFxuICAgICAgICAgICAgXCJSZWdpc3RybyBBa1x1MDBFMXNoaWtvXCIsXG4gICAgICAgICAgICBcIkdpbW5hc2lvXCIsXG4gICAgICAgICAgICBcIkNvbWVyIFNhbHVkYWJsZVwiLFxuICAgICAgICAgICAgXCJMZWVyIGxpYnJvXCIsXG4gICAgICAgICAgICBcIkVzY3JpYmlyIGJpdFx1MDBFMWNvcmEgZWwgbWlzbW8gZFx1MDBFRGFcIixcbiAgICAgICAgICAgIFwiQ3JlYXIgcGxhbiBkXHUwMEVEYSBzaWd1aWVudGVcIixcbiAgICAgICAgICAgIFwiTWUgZnVcdTAwRUQgYSBkb3JtaXIgYW50ZXMgZGUgbGFzIDEwOjMwcG1cIlxuICAgICAgICBdO1xuICAgIFxuICAgICAgICAvLyBGdW5jaVx1MDBGM24gcGFyYSBjYXJnYXIgeSBtYXJjYXIgY2hlY2tib3hlcyBzZWxlY2Npb25hZG9zIHByZXZpYW1lbnRlXG4gICAgICAgIGNvbnN0IGNhcmdhckNoZWNrYm94ZXNTZWxlY2Npb25hZG9zID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmlsZSA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICAgICAgLy8gTGVlciBlbCBhcmNoaXZvIHBhcmEgb2J0ZW5lciBlbCBjYW1wbyAnaGFiaXRvcycgZGVsIFlBTUxcbiAgICAgICAgICAgIGNvbnN0IGZpbGVDb250ZW50ID0gYXdhaXQgYXBwLnZhdWx0LnJlYWQoZmlsZSk7XG4gICAgICAgICAgICBjb25zdCBmcm9udE1hdHRlciA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXI7XG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ0hhYml0cyA9IGZyb250TWF0dGVyPy5oYWJpdG9zIHx8IFtdO1xuICAgIFxuICAgICAgICAgICAgaGFiaXRvcy5mb3JFYWNoKGhhYml0byA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hlY2tib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAgICAgICAgIGNoZWNrYm94LnR5cGUgPSAnY2hlY2tib3gnO1xuICAgICAgICAgICAgICAgIGNoZWNrYm94LmlkID0gaGFiaXRvO1xuICAgICAgICAgICAgICAgIGNoZWNrYm94Lm5hbWUgPSAnaGFiaXRvcyc7XG4gICAgICAgICAgICAgICAgY2hlY2tib3gudmFsdWUgPSBoYWJpdG87XG4gICAgICAgICAgICAgICAgY2hlY2tib3guY2hlY2tlZCA9IGV4aXN0aW5nSGFiaXRzLmluY2x1ZGVzKGhhYml0byk7XG4gICAgXG4gICAgICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgICAgICAgICAgICAgIGxhYmVsLmh0bWxGb3IgPSBoYWJpdG87XG4gICAgICAgICAgICAgICAgbGFiZWwudGV4dENvbnRlbnQgPSBoYWJpdG87XG4gICAgXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNoZWNrYm94KTtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICAgIFxuICAgICAgICAgICAgICAgIGR2LmNvbnRhaW5lci5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIGF3YWl0IGNhcmdhckNoZWNrYm94ZXNTZWxlY2Npb25hZG9zKCk7XG4gICAgXG4gICAgICAgIC8vIENyZWFyIHkgY29uZmlndXJhciBlbCBib3RcdTAwRjNuIGRlIGd1YXJkYXJcbiAgICAgICAgY29uc3QgZ3VhcmRhckJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICBndWFyZGFyQnRuLnRleHRDb250ZW50ID0gJ0d1YXJkYXInO1xuICAgICAgICBndWFyZGFyQnRuLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmaWxlID0gYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG4gICAgICAgICAgICBjb25zdCBjaGVja2JveGVzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFtuYW1lPVwiaGFiaXRvc1wiXTpjaGVja2VkJykpO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRIYWJpdHMgPSBjaGVja2JveGVzLm1hcChjaGVja2JveCA9PiBjaGVja2JveC52YWx1ZSk7XG4gICAgXG4gICAgICAgICAgICAvLyBBY3R1YWxpemFyIGVsIGNhbXBvICdoYWJpdG9zJyBlbiBlbCBhcmNoaXZvIFlBTUwgdXNhbmRvIGVsIG1cdTAwRTl0b2RvIHVwZGF0ZVlBTUxGaWVsZHNcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlWUFNTEZpZWxkcyhmaWxlLnBhdGgsICdoYWJpdG9zJywgc2VsZWN0ZWRIYWJpdHMpO1xuICAgICAgICB9O1xuICAgIFxuICAgICAgICAvLyBBXHUwMEYxYWRpciBlbCBib3RcdTAwRjNuIGRlIGd1YXJkYXIgYWwgY29udGVuZWRvclxuICAgICAgICBkdi5jb250YWluZXIuYXBwZW5kQ2hpbGQoZ3VhcmRhckJ0bik7XG5cbiAgICAgICAgLy8gQWdyZWdhciBib3RcdTAwRjNuIGRlIHNhbGlyIHNpIG5lY2VzYXJpb1xuICAgICAgICBjb25zdCBib3RvblNhbGlyID0gdGhpcy5hZ3JlZ2FyQm90b25TYWxpcihkdik7XG4gICAgICAgIGR2LmNvbnRhaW5lci5hcHBlbmRDaGlsZChib3RvblNhbGlyKTtcbiAgICB9XG4gICAgXG4gICAgLy8gTVx1MDBFOXRvZG8gYWRhcHRhZG8gcGFyYSBtb3N0cmFyQm90b25CYWxhbmNlUGVyc29uYWxcbiAgICBhc3luYyBtb3N0cmFyQm90b25SZWdpc3Ryb1RhcmVhcyhkdikge1xuICAgICAgICBcbiAgICAgICAgLy8gTGltcGlhciBlbCBjb250ZW5lZG9yXG4gICAgICAgIGR2LmNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgbGV0IGJvdG9uZXM7XG4gICAgICAgIGNvbnN0IHV0aWxzQVBJbnN0YW5jZSA9IG5ldyB1dGlsc0FQSSh0aGlzLnBsdWdpbik7XG4gICAgICAgIGNvbnN0IGFjdGl2byA9IGF3YWl0IHV0aWxzQVBJbnN0YW5jZS5idXNjYXJSZWdpc3Ryb3NBY3Rpdm9zKGFwcClcbiAgICAgICAgaWYgKGFjdGl2byBpbnN0YW5jZW9mIFRGaWxlKXsgLy8gVmVyaWZpY2Egc2kgaGF5IGFsZ3VuIGFyY2hpdm8gYWN0aXZvIFxuICAgICAgICAgICAgYm90b25lcyA9IFtcIkNlcnJhZGFzIEhveVwiLCBcIlJlZ2lzdHJvcyBIb3lcIiwgXCJOdWV2byBSZWdpc3RybyBUaWVtcG9cIiwgXCJDZXJyYXIgUmVnaXN0cm8gVGllbXBvXCJdO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGJvdG9uZXMgPSBbXCJDZXJyYWRhcyBIb3lcIiwgXCJSZWdpc3Ryb3MgSG95XCIsIFwiTnVldm8gUmVnaXN0cm8gVGllbXBvXCJdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXIgeSBtb3N0cmFyIGNhZGEgYm90XHUwMEYzblxuICAgICAgICBib3RvbmVzLmZvckVhY2godGV4dG9Cb3RvbiA9PiB7XG4gICAgICAgICAgICBjb25zdCBib3RvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICAgICAgYm90b24udGV4dENvbnRlbnQgPSB0ZXh0b0JvdG9uO1xuICAgICAgICAgICAgYm90b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBzd2l0Y2godGV4dG9Cb3Rvbikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdDZXJyYWRhcyBIb3knOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tb3N0cmFyQ2VycmFkYXNIb3koZHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1JlZ2lzdHJvcyBIb3knOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tb3N0cmFyUmVnaXN0cm9zSG95KGR2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdDZXJyYXIgUmVnaXN0cm8gVGllbXBvJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5yZWdpc3Ryb1RpZW1wb0FQSS5jZXJyYXJSZWdpc3RybyhhY3Rpdm8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ051ZXZvIFJlZ2lzdHJvIFRpZW1wbyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydGVyQVBJbnN0YW5jZSA9IG5ldyBzdGFydGVyQVBJKHRoaXMucGx1Z2luKVxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgc3RhcnRlckFQSW5zdGFuY2UuY3JlYXRlTm90ZShcIlJlZ2lzdHJvVGllbXBvXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgJHt0ZXh0b0JvdG9ufSBwcmVzaW9uYWRvLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGR2LmNvbnRhaW5lci5hcHBlbmRDaGlsZChib3Rvbik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGJvdG9uU2FsaXIgPSB0aGlzLmFncmVnYXJCb3RvblNhbGlyKGR2KTtcbiAgICAgICAgZHYuY29udGFpbmVyLmFwcGVuZENoaWxkKGJvdG9uU2FsaXIpO1xuICAgIH1cblxuICAgIGFzeW5jIG1vc3RyYXJDZXJyYWRhc0hveShkdikge1xuICAgICAgICBkdi5jb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG4gICAgXG4gICAgICAgIGNvbnN0IGFjdGl2byA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICBsZXQgZmVjaGFBY3Rpdm8gPSBhY3Rpdm8/LmJhc2VuYW1lLnNwbGl0KFwiIFwiKVswXTtcbiAgICAgICAgY29uc3QgaG95ID0gbmV3IERhdGUoZmVjaGFBY3Rpdm8pLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgIFxuICAgICAgICBjb25zdCBmaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG4gICAgICAgIFxuICAgICAgICBsZXQgdGFyZWFzUHJvbWVzYXMgPSBmaWxlcy5tYXAoYXN5bmMgKGZpbGUpID0+IHtcbiAgICAgICAgICAgIGxldCBjb250ZW5pZG8gPSBhd2FpdCBhcHAudmF1bHQucmVhZChmaWxlKTtcbiAgICAgICAgICAgIGxldCB0YXJlYXNFeHRyYWlkYXMgPSBleHRyYWVyVGFyZWFzKGNvbnRlbmlkbyk7XG4gICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZnJvbnRNYXR0ZXIgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk/LmZyb250bWF0dGVyO1xuICAgICAgICAgICAgY29uc3QgYWxpYXMgPSBmcm9udE1hdHRlcj8uYWxpYXNlcyA/IGZyb250TWF0dGVyLmFsaWFzZXNbMF0gOiBudWxsO1xuICAgICAgICAgICAgY29uc3QgZmlsZVBhdGggPSBmaWxlLnBhdGg7XG4gICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBmaWxlUGF0aCxcbiAgICAgICAgICAgICAgICBhbGlhcyxcbiAgICAgICAgICAgICAgICB0YXJlYXM6IHRhcmVhc0V4dHJhaWRhcy5maWx0ZXIodGFyZWEgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZmVjaGFUYXJlYSA9IG5ldyBEYXRlKHRhcmVhLmNvbXBsZXRpb25EYXRlKS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmVhLmNvbXBsZXRlZCAmJiB0YXJlYS5jb21wbGV0aW9uRGF0ZSAmJiBmZWNoYVRhcmVhID09PSBob3k7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgbGV0IHJlc3VsdGFkb3MgPSBhd2FpdCBQcm9taXNlLmFsbCh0YXJlYXNQcm9tZXNhcyk7XG4gICAgICAgIGxldCB0b3RhbFRhcmVhc0NlcnJhZGFzID0gcmVzdWx0YWRvcy5yZWR1Y2UoKHRvdGFsLCB7IHRhcmVhcyB9KSA9PiB0b3RhbCArIHRhcmVhcy5sZW5ndGgsIDApO1xuXG4gICAgICAgIC8vIE1lbnNhamUgc29icmUgZWwgZXN0YWRvIGRlIGxhcyB0YXJlYXMgY2VycmFkYXMgaG95XG4gICAgICAgIGlmICh0b3RhbFRhcmVhc0NlcnJhZGFzID4gMCkge1xuICAgICAgICAgICAgZHYuaGVhZGVyKDMsIGBIb3kgc2UgaGFuIGNlcnJhZG8gJHt0b3RhbFRhcmVhc0NlcnJhZGFzfSB0YXJlYXMuYCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAvLyBDcmVhciBsYSB0YWJsYSBIVE1MXG4gICAgICAgIGNvbnN0IHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKTtcbiAgICAgICAgdGFibGUuY2xhc3NMaXN0LmFkZCgndGFibGUnKTsgLy8gQWdyZWdhciB1bmEgY2xhc2UgcGFyYSBsYSB0YWJsYSBwYXJhIGVsIGVzdGlsb1xuICAgICAgICB0YWJsZS5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICBcbiAgICAgICAgLy8gQVx1MDBGMWFkaXIgZW5jYWJlemFkb3MgZGUgdGFibGFcbiAgICAgICAgY29uc3QgaGVhZGVyUm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSBbXCJOb3RhXCIsIFwiVGFyZWFzIENlcnJhZGFzXCJdO1xuICAgICAgICBoZWFkZXJzLmZvckVhY2goaGVhZGVyVGV4dCA9PiB7XG4gICAgICAgICAgICBsZXQgaGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGgnKTtcbiAgICAgICAgICAgIGhlYWRlci50ZXh0Q29udGVudCA9IGhlYWRlclRleHQ7XG4gICAgICAgICAgICBoZWFkZXIuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICBoZWFkZXJSb3cuYXBwZW5kQ2hpbGQoaGVhZGVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRhYmxlLmFwcGVuZENoaWxkKGhlYWRlclJvdyk7XG4gICAgXG4gICAgICAgIC8vIEFcdTAwRjFhZGlyIGZpbGFzIGRlIGRhdG9zIGEgbGEgdGFibGFcbiAgICAgICAgcmVzdWx0YWRvcy5mb3JFYWNoKCh7ZmlsZVBhdGgsIGFsaWFzLCB0YXJlYXN9KSA9PiB7XG4gICAgICAgICAgICBpZiAodGFyZWFzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBDb2x1bW5hIGRlIGVubGFjZSBjZW50cmFkbyB2ZXJ0aWNhbG1lbnRlXG4gICAgICAgICAgICAgICAgbGV0IGxpbmtDZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgICAgICAgICBsaW5rQ2VsbC5zdHlsZS52ZXJ0aWNhbEFsaWduID0gJ21pZGRsZSc7XG4gICAgICAgICAgICAgICAgbGV0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgICAgICAgYS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBgb2JzaWRpYW46Ly9vcGVuP3ZhdWx0PSR7YXBwLnZhdWx0LmdldE5hbWUoKX0mZmlsZT0ke2VuY29kZVVSSUNvbXBvbmVudChmaWxlUGF0aCl9YCk7XG4gICAgICAgICAgICAgICAgYS50ZXh0Q29udGVudCA9IGFsaWFzIHx8IGZpbGVQYXRoO1xuICAgICAgICAgICAgICAgIGxpbmtDZWxsLmFwcGVuZENoaWxkKGEpO1xuICAgICAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChsaW5rQ2VsbCk7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gQ29sdW1uYSBkZSB0YXJlYXMgY2VycmFkYXNcbiAgICAgICAgICAgICAgICBsZXQgdGFza3NDZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgICAgICAgICBsZXQgdGFza3NMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcbiAgICAgICAgICAgICAgICB0YXJlYXMuZm9yRWFjaCh0YXJlYSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgICAgICAgICAgICAgIGxpLnRleHRDb250ZW50ID0gdGFyZWEudGV4dDtcbiAgICAgICAgICAgICAgICAgICAgdGFza3NMaXN0LmFwcGVuZENoaWxkKGxpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0YXNrc0NlbGwuYXBwZW5kQ2hpbGQodGFza3NMaXN0KTtcbiAgICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQodGFza3NDZWxsKTtcbiAgICBcbiAgICAgICAgICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZChyb3cpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgLy8gQVx1MDBGMWFkaXIgbGEgdGFibGEgYWwgY29udGVuZWRvciBkZSBEYXRhdmlld1xuICAgICAgICBkdi5jb250YWluZXIuYXBwZW5kQ2hpbGQodGFibGUpO1xuICAgICAgICBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGR2LnBhcmFncmFwaChcIk5vIGhheSB0YXJlYXMgY2VycmFkYXMgaG95LlwiKTtcbiAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIGNvbnN0IGJvdG9uU2FsaXIgPSB0aGlzLmFncmVnYXJCb3RvblNhbGlyKGR2KTtcbiAgICAgICAgZHYuY29udGFpbmVyLmFwcGVuZENoaWxkKGJvdG9uU2FsaXIpO1xuICAgIFxuICAgIGZ1bmN0aW9uIGV4dHJhZXJUYXJlYXMoY29udGVuaWRvKSB7XG4gICAgICAgIGNvbnN0IHRhcmVhcyA9IFtdO1xuICAgICAgICBjb25zdCBsaW5lYXMgPSBjb250ZW5pZG8uc3BsaXQoXCJcXG5cIik7XG4gICAgXG4gICAgICAgIGZvciAoY29uc3QgbGluZWEgb2YgbGluZWFzKSB7XG4gICAgICAgICAgICBjb25zdCB0YXJlYVJlZ2V4ID0gL15cXHMqLVxccypcXFsoeHxYfCApXFxdXFxzKiguKykkLztcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gdGFyZWFSZWdleC5leGVjKGxpbmVhKTtcbiAgICBcbiAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBsZXRhZGEgPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpID09PSAneCc7XG4gICAgICAgICAgICAgICAgbGV0IHRleHRvVGFyZWEgPSBtYXRjaFsyXTtcbiAgICAgICAgICAgICAgICBsZXQgZmVjaGFDb21wbGV0aXR1ZCA9IG51bGw7XG4gICAgXG4gICAgICAgICAgICAgICAgY29uc3QgZmVjaGFSZWdleCA9IC9cXFtjb21wbGV0aW9uOjogKFxcZHs0fS1cXGR7Mn0tXFxkezJ9KVxcXS87XG4gICAgICAgICAgICAgICAgY29uc3QgZmVjaGFNYXRjaCA9IGZlY2hhUmVnZXguZXhlYyh0ZXh0b1RhcmVhKTtcbiAgICAgICAgICAgICAgICBpZiAoZmVjaGFNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBmZWNoYUNvbXBsZXRpdHVkID0gZmVjaGFNYXRjaFsxXTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dG9UYXJlYSA9IHRleHRvVGFyZWEucmVwbGFjZShmZWNoYVJlZ2V4LCAnJykudHJpbSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB0YXJlYXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHRleHRvVGFyZWEsXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZDogY29tcGxldGFkYSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGlvbkRhdGU6IGZlY2hhQ29tcGxldGl0dWQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgcmV0dXJuIHRhcmVhcztcbiAgICB9XG4gICAgXG4gICAgXG59XG5cblxuICAgIGFzeW5jIG1vc3RyYXJSZWdpc3Ryb3NIb3koZHYpIHtcbiAgICAgICAgICAgLy8gT2J0ZW5lciBlbCBsZWFmIGFjdGl2byBhY3R1YWxcbiAgICAgICAgICAgY29uc3QgYWN0aXZlTGVhZiA9IGFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZjtcblxuICAgICAgICAgICAvLyBPYnRlbmVyIGVsIHBhdGggZGVsIFRGaWxlIGFzb2NpYWRvIGNvbiBlbCBsZWFmIGFjdGl2bywgc2kgZXhpc3RlXG4gICAgICAgICAgIGNvbnN0IGN1cnJlbnRGaWxlUGF0aCA9IGFjdGl2ZUxlYWYudmlldz8uZmlsZT8ucGF0aDtcbiAgIFxuICAgICAgICAgICAvLyBDcmVhciB1bmEgbnVldmEgZGl2aXNpXHUwMEYzbiBhIGxhIGRlcmVjaGEgZGVsIGxlYWYgYWN0aXZvXG4gICAgICAgICAgIGNvbnN0IG5ld0xlYWYgPSBhd2FpdCBhcHAud29ya3NwYWNlLnNwbGl0QWN0aXZlTGVhZigndmVydGljYWwnKTtcbiAgIFxuICAgICAgICAgICAvLyBDb25maWd1cmFyIGVsIG51ZXZvIGxlYWYgcGFyYSBtb3N0cmFyIHR1IHZpc3RhIHBlcnNvbmFsaXphZGFcbiAgICAgICAgICAgLy8geSBwYXNhciBlbCBwYXRoIGRlbCBURmlsZSBjb21vIHBhcnRlIGRlbCBlc3RhZG9cbiAgICBcbiAgICAgICAgICAgYXdhaXQgbmV3TGVhZi5zZXRWaWV3U3RhdGUoe1xuICAgICAgICAgICAgICAgdHlwZTogXCJ2aXN0YS1yZWdpc3Ryby1kaWFyaW9cIixcbiAgICAgICAgICAgfSk7XG4gICAgXG4gICAgICAgICAgIGFwcC53b3Jrc3BhY2UucmV2ZWFsTGVhZihuZXdMZWFmKTsgICAgXG59XG5cbiAgICBjcmVhdGVCdXR0b25UYWJsZShidXR0b25UZXh0LCBvbkNsaWNrQ2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9IGJ1dHRvblRleHQ7XG4gICAgICAgIGJ1dHRvbi50eXBlID0gJ2J1dHRvbic7IC8vIEFzZWdcdTAwRkFyYXRlIGRlIHF1ZSBubyBzZSBlbnZpYXJcdTAwRTEgdW4gZm9ybXVsYXJpbyBhbCBoYWNlciBjbGljIGVuIFx1MDBFOWxcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3lvdXItYnV0dG9uLWNsYXNzJyk7IC8vIEFncmVnYSB1bmEgY2xhc2UgcGFyYSBlbCBlc3RpbG8gZGVsIGJvdFx1MDBGM24gc2kgZXMgbmVjZXNhcmlvXG5cbiAgICAgICAgLy8gQVx1MDBGMWFkZSBlbCBldmVudG8gZGUgY2xpYyBhbCBib3RcdTAwRjNuXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2xpY2tDYWxsYmFjayk7XG5cbiAgICAgICAgcmV0dXJuIGJ1dHRvbjtcbiAgICB9XG4gICAgLy8gQ3JlYSBsYSBub3RhIGRlc2RlIGVsIHRlbXBsYXRlciBkZSBSZWdpc3Ryb1RpZW1wb1xuICAgIGFzeW5jIHJldG9tYXJUYXJlYShpZCkgeyBcbiAgICAgICAgLy8gQXNlZ1x1MDBGQXJhdGUgZGUgcmVlbXBsYXphciAncnV0YS9hbC9hcmNoaXZvLm1kJyBjb24gbGEgcnV0YSBleGFjdGEgZGVsIGFyY2hpdm8gcXVlIGRlc2VhcyBvYnRlbmVyXG4gICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICBjb25zdCBmaWxlUGF0aCA9IGBQbGFudGlsbGFzLyR7dGhpcy5wbHVnaW4uc2V0dGluZ3NbYGZvbGRlcl9SZWdpc3Ryb1RpZW1wb2BdfS9QbHQgLSBSZWdpc3Ryb1RpZW1wby5tZGA7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmaWxlUGF0aCk7XG5cbiAgICAgICAgaWYgKHRlbXBsYXRlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgIC8vIEFob3JhICdmaWxlJyBlcyB0dSBhcmNoaXZvIGRlc2VhZG8sIHkgcHVlZGVzIHRyYWJhamFyIGNvbiBcdTAwRTlsIGNvbW8gbmVjZXNpdGVzXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFyY2hpdm8gZW5jb250cmFkbzpcIiwgdGVtcGxhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gU2kgZWwgYXJjaGl2byBubyBzZSBlbmNvbnRyXHUwMEYzLCAnZmlsZScgc2VyXHUwMEUxIG51bGxcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQXJjaGl2byBubyBlbmNvbnRyYWRvLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaWxlbmFtZSA9IFwiUmV0b21hciBcIiArIGlkO1xuICAgICAgICBjb25zdCBmb2xkZXIgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKFwiSW5ib3hcIik7XG4gICAgICAgIGNvbnN0IHRwID0gdGhpcy5nZXRUcCgpO1xuICAgICAgICBsZXQgY3JlYXJOb3RhID0gdHAuZmlsZS5zdGF0aWNfZnVuY3Rpb25zLmdldChcImNyZWF0ZV9uZXdcIilcbiAgICAgICAgYXdhaXQgY3JlYXJOb3RhICh0ZW1wbGF0ZSwgZmlsZW5hbWUsIGZhbHNlLCBmb2xkZXIpLmJhc2VuYW1lO1xuICAgICAgfVxuXG4gICAgZ2V0VHAoKXtcbiAgICAgICAgaWYgKCF0aGlzLnBsdWdpbiB8fCAhdGhpcy5wbHVnaW4uYXBwLnBsdWdpbnMuZW5hYmxlZFBsdWdpbnMuaGFzKCd0ZW1wbGF0ZXItb2JzaWRpYW4nKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRWwgcGx1Z2luIFRlbXBsYXRlciBubyBlc3RcdTAwRTEgaGFiaWxpdGFkby4nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAgIFxuICAgICAgICBsZXQgdHBHZW4gPSB0aGlzLnBsdWdpbi5hcHAucGx1Z2lucy5wbHVnaW5zW1widGVtcGxhdGVyLW9ic2lkaWFuXCJdLnRlbXBsYXRlcjtcbiAgICAgICAgdHBHZW4gPSB0cEdlbi5mdW5jdGlvbnNfZ2VuZXJhdG9yLmludGVybmFsX2Z1bmN0aW9ucy5tb2R1bGVzX2FycmF5O1xuICAgICAgICBsZXQgdHAgPSB7fVxuICAgICAgICAvLyBnZXQgYW4gaW5zdGFuY2Ugb2YgbW9kdWxlc1xuICAgICAgICB0cC5maWxlID0gdHBHZW4uZmluZChtID0+IG0ubmFtZSA9PSBcImZpbGVcIik7XG4gICAgICAgIHRwLnN5c3RlbSA9IHRwR2VuLmZpbmQobSA9PiBtLm5hbWUgPT0gXCJzeXN0ZW1cIik7XG5cbiAgICAgICAgaWYgKCF0cC5maWxlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJObyBzZSBwdWRvIGFjY2VkZXIgYWwgb2JqZXRvIGRlIGZ1bmNpb25lcyBhY3R1YWxlcyBkZSBUZW1wbGF0ZXIuXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coJ3RwIGNvbiBwcm9waWVkYWRlcyBcImZpbGVcIiBzZSBoYSBjYXJnYWRvIHNhdGlzZmFjdG9yaWFtZW50ZScpO1xuICAgICAgICByZXR1cm4gdHA7XG4gICAgfVxuXG59XG4gICAgXG4iLCAiLypcbiAqIEZpbGVuYW1lOiAvc3JjL21vZHVsZXMvbm90ZUxpZmVjeWNsZU1hbmFnZXIvQVBJL21lbnVTZW1hbmFsQVBJLnRzXG4gKiBQYXRoOiAvc3JjL21vZHVsZXMvbm90ZUxpZmVjeWNsZU1hbmFnZXIvQVBJXG4gKiBDcmVhdGVkIERhdGU6IDIwMjQtMDQtMTUgMTU6Mzc6MDlcbiAqIEF1dGhvcjogQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqIC0tLS0tXG4gKiBMYXN0IE1vZGlmaWVkOiAyMDI1LTAyLTIzIDE3OjQ4OjU4XG4gKiBNb2RpZmllZCBCeTogQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqIC0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjUgLSBBbmRyXHUwMEU5cyBKdWxpXHUwMEUxbiBCb3JiXHUwMEYzblxuICovXG5cblxuaW1wb3J0IHtOb3RpY2UsIFRGaWxlfSBmcm9tICdvYnNpZGlhbidcbmltcG9ydCB7RGF0ZVRpbWUsIER1cmF0aW9ufSBmcm9tICdsdXhvbidcbmltcG9ydCB7IHN0YXJ0ZXJBUEkgfSBmcm9tICcuL3N0YXJ0ZXJBUEknO1xuaW1wb3J0IHsgdXRpbHNBUEkgfSBmcm9tICcuLi8uLi9tb2R1bG9SZWdpc3Ryb1RpZW1wby9BUEkvdXRpbHNBUEknO1xuaW1wb3J0IHsgVmlzdGFSZXN1bWVuU2VtYW5hbCB9IGZyb20gJy4uL3ZpZXdzL3Zpc3RhUmVzdW1lblNlbWFuYWwnO1xuXG5leHBvcnQgY2xhc3MgbWVudVNlbWFuYWxBUEkge1xuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgICAgICB0aGlzLmFwcCA9IHBsdWdpbi5hcHA7ICAvLyBHdWFyZGEgdW5hIHJlZmVyZW5jaWEgYSBsYSBhcGxpY2FjaVx1MDBGM24gT2JzaWRpYW4gcGFyYSBhY2NlZGVyIGEgc3VzIG1cdTAwRTl0b2RvcyB5IHByb3BpZWRhZGVzXG4gICAgICAgIC8vIHRoaXMucmVnaXN0cm9UaWVtcG9BUEkgPSBuZXcgcmVnaXN0cm9UaWVtcG9BUEkodGhpcy5wbHVnaW4pO1xuICAgIH1cblxuICAgIC8vIEZ1bmNpXHUwMEYzbiBwYXJhIGNyZWFyIHkgbW9zdHJhciBlbCBib3RcdTAwRjNuIGluaWNpYWwgXCJNZW5cdTAwRkEgaG95XCJcbiAgICBhc3luYyBtb3N0cmFyTWVudShkdikge1xuICAgICAgICBkdi5jb250YWluZXIuaW5uZXJIVE1MID0gJyc7IC8vIExpbXBpYXIgZWwgY29udGVuZWRvclxuXG4gICAgICAgIGNvbnN0IGJvdG9uTWVudUhveSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICBib3Rvbk1lbnVIb3kudGV4dENvbnRlbnQgPSAnTWVuXHUwMEZBIFNlbWFuYWwnO1xuICAgICAgICBkdi5jb250YWluZXIuYXBwZW5kQ2hpbGQoYm90b25NZW51SG95KTtcblxuICAgICAgICBib3Rvbk1lbnVIb3kub25jbGljayA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubW9zdHJhckJvdG9uZXMoZHYpOyAvLyBNb3N0cmFyIGxvcyBib3RvbmVzIGFkaWNpb25hbGVzIGFsIGhhY2VyIGNsaWNcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBNXHUwMEU5dG9kbyBtb2RpZmljYWRvIHBhcmEgYWRhcHRhcnNlIGFsIGNvbnRleHRvIGRlbCBwbHVnaW5cbiAgICBhc3luYyBtb3N0cmFyQm90b25lcyhkdikge1xuICAgICAgICBkdi5jb250YWluZXIuaW5uZXJIVE1MID0gJyc7IC8vIExpbXBpYXIgZWwgY29udGVuZWRvciBwYXJhIHJlbW92ZXIgZWwgYm90XHUwMEYzbiBkZSBtZW5cdTAwRkFcblxuICAgICAgICBjb25zdCBib3RvbmVzID0gW1xuICAgICAgICAgICAgXCJSZXN1bWVuIGRpYXJpb1wiLCBcIkFncmFkZWNpbWllbnRvc1wiLCBcIkNyZWFkYXNcIiwgXCJNb2RpZmljYWRhc1wiLCBcInggRmVjaGFcIiwgXCJUYXJlYXMgQ2VycmFkYXNcIlxuICAgICAgICBdO1xuXG4gICAgICAgIC8vIENyZWFyIHkgbW9zdHJhciBjYWRhIGJvdFx1MDBGM25cbiAgICAgICAgYm90b25lcy5mb3JFYWNoKHRleHRvQm90b24gPT4ge1xuICAgICAgICAgICAgY29uc3QgYm90b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgIGJvdG9uLnRleHRDb250ZW50ID0gdGV4dG9Cb3RvbjtcbiAgICAgICAgICAgIGJvdG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc3dpdGNoKHRleHRvQm90b24pIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnUmVzdW1lbiBkaWFyaW8nOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tb3N0cmFyUmVzdW1lbkRpYXJpbyhkdik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQWdyYWRlY2ltaWVudG9zJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubW9zdHJhckFncmFkZWNpbWllbnRvcyhkdik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQ3JlYWRhcyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm1vc3RyYXJDcmVhZGFzKGR2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdNb2RpZmljYWRhcyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm1vc3RyYXJNb2RpZmljYWRhcyhkdik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAneCBGZWNoYSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm1vc3RyYXJ4RmVjaGEoZHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1RhcmVhcyBDZXJyYWRhcyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm1vc3RyYXJUYXJlYXNDZXJyYWRhcyhkdik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke3RleHRvQm90b259IHByZXNpb25hZG8uYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZHYuY29udGFpbmVyLmFwcGVuZENoaWxkKGJvdG9uKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgYm90b25TYWxpciA9IHRoaXMuYWdyZWdhckJvdG9uU2FsaXIoZHYpO1xuICAgICAgICBkdi5jb250YWluZXIuYXBwZW5kQ2hpbGQoYm90b25TYWxpcik7XG4gICAgfVxuXG4gICAgLy8gTVx1MDBFOXRvZG8gcGFyYSBhZ3JlZ2FyIGVsIGJvdFx1MDBGM24gZGUgcmVjYXJnYSB5IHN1IGxcdTAwRjNnaWNhIChFamVtcGxvIGFkYXB0YWRvKVxuICAgIGFncmVnYXJCb3RvblNhbGlyKGR2KSB7XG4gICAgICAgIGNvbnN0IGJvdG9uUmVjYXJnYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICBib3RvblJlY2FyZ2EudGV4dENvbnRlbnQgPSAnU2FsaXInO1xuICAgICAgICBib3RvblJlY2FyZ2Eub25jbGljayA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubW9zdHJhck1lbnUoZHYpOyAvLyBSZXN0YWJsZWNlciBhIGxhIHZpc3RhIGRlbCBib3RcdTAwRjNuIGRlIG1lblx1MDBGQSBpbmljaWFsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBib3RvblJlY2FyZ2E7XG4gICAgfVxuXG4gICAgIC8vIE1cdTAwRTl0b2RvIHBhcmEgYWN0dWFsaXphciBjYW1wb3MgWUFNTFxuICAgICBhc3luYyB1cGRhdGVZQU1MRmllbGRzKGZpbGVQYXRoLCBZQU1MZmllbGQsIHZhbG9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBSdXRhIGFsIGFyY2hpdm8gcXVlIHNlIHZhIGEgbW9kaWZpY2FyXG4gICAgICAgICAgICBjb25zdCBmaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmaWxlUGF0aCk7XG4gICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgLy8gTGVlciB5IGFjdHVhbGl6YXIgZWwgZnJvbnRtYXR0ZXIgdXNhbmRvIHByb2Nlc3NGcm9udE1hdHRlclxuICAgICAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGF3YWl0IGFwcC5maWxlTWFuYWdlci5wcm9jZXNzRnJvbnRNYXR0ZXIoZmlsZSwgZnJvbnRtYXR0ZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBBY3R1YWxpemFyIGVsIHZhbG9yIGRlbCBjYW1wbyBlc3BlY2lmaWNhZG9cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGZyb250bWF0dGVyW1lBTUxmaWVsZF0gPSB2YWxvcjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBPcGNpb25hbDogTm90aWZpY2FyIGFsIHVzdWFyaW8gcXVlIGxhIGFjdHVhbGl6YWNpXHUwMEYzbiBmdWUgZXhpdG9zYVxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1lBTUwgYWN0dWFsaXphZG8gY29uIFx1MDBFOXhpdG8uJyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWwgYWN0dWFsaXphciBlbCBmcm9udG1hdHRlclwiLCBlcnIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkFyY2hpdm8gbm8gZW5jb250cmFkb1wiLCBlcnIpO1xuICAgICAgICAgICAgbmV3IE5vdGljZSgnRXJyb3IgYWwgYWN0dWFsaXphciBlbCBZQU1MLicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgbW9zdHJhclJlc3VtZW5EaWFyaW8oZHYpe1xuICAgICAgICBkZWJ1Z2dlcjtcblxuICAgICAgICAvLyBPYnRlbmVyIGVsIGxlYWYgYWN0aXZvIGFjdHVhbFxuICAgICAgICBjb25zdCBhY3RpdmVMZWFmID0gYXBwLndvcmtzcGFjZS5hY3RpdmVMZWFmO1xuXG4gICAgICAgIC8vIE9idGVuZXIgZWwgcGF0aCBkZWwgVEZpbGUgYXNvY2lhZG8gY29uIGVsIGxlYWYgYWN0aXZvLCBzaSBleGlzdGVcbiAgICAgICAgY29uc3QgY3VycmVudEZpbGVQYXRoID0gYWN0aXZlTGVhZi52aWV3Py5maWxlPy5wYXRoO1xuXG4gICAgICAgIC8vIENyZWFyIHVuYSBudWV2YSBkaXZpc2lcdTAwRjNuIGEgbGEgZGVyZWNoYSBkZWwgbGVhZiBhY3Rpdm9cbiAgICAgICAgY29uc3QgbmV3TGVhZiA9IGF3YWl0IGFwcC53b3Jrc3BhY2Uuc3BsaXRBY3RpdmVMZWFmKCd2ZXJ0aWNhbCcpO1xuXG4gICAgICAgIC8vIENvbmZpZ3VyYXIgZWwgbnVldm8gbGVhZiBwYXJhIG1vc3RyYXIgdHUgdmlzdGEgcGVyc29uYWxpemFkYVxuICAgICAgICAvLyB5IHBhc2FyIGVsIHBhdGggZGVsIFRGaWxlIGNvbW8gcGFydGUgZGVsIGVzdGFkb1xuIFxuICAgICAgICBhd2FpdCBuZXdMZWFmLnNldFZpZXdTdGF0ZSh7XG4gICAgICAgICAgICB0eXBlOiBcInZpc3RhLXJlc3VtZW4tc2VtYW5hbFwiLFxuICAgICAgICB9KTtcbiBcbiAgICAgICAgYXBwLndvcmtzcGFjZS5yZXZlYWxMZWFmKG5ld0xlYWYpO1xuICAgIH1cbiAgICBcblxuXG5cbiAgICAvLyBNXHUwMEU5dG9kbyBhZGFwdGFkbyBwYXJhIG1vc3RyYXJCb3RvbkJhbGFuY2VQZXJzb25hbFxuICAgIGFzeW5jIG1vc3RyYXJCb3RvbkJhbGFuY2VQZXJzb25hbChkdikge1xuICAgICAgICAvLyBMaW1waWFyIGVsIGNvbnRlbmVkb3JcbiAgICAgICAgZHYuY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuICAgIFxuICAgICAgICAvLyBNZW5zYWplIGluaWNpYWxcbiAgICAgICAgY29uc3QgbWVuc2FqZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XG4gICAgICAgIG1lbnNhamUudGV4dENvbnRlbnQgPSAnRXZhbFx1MDBGQWEgZWwgYmFsYW5jZSBkZSB0dSB2aWRhIGhveSc7XG4gICAgICAgIGR2LmNvbnRhaW5lci5hcHBlbmRDaGlsZChtZW5zYWplKTtcbiAgICBcbiAgICAgICAgY29uc3QgaW5zdHJ1Y2Npb25lcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgaW5zdHJ1Y2Npb25lcy50ZXh0Q29udGVudCA9ICdFdmFsXHUwMEZBYSBkZSAxIGEgNSBjYWRhIFx1MDBFMXJlYTonO1xuICAgICAgICBkdi5jb250YWluZXIuYXBwZW5kQ2hpbGQoaW5zdHJ1Y2Npb25lcyk7XG4gICAgXG4gICAgICAgIC8vIFx1MDBDMXJlYXMgYSBldmFsdWFyXG4gICAgICAgIGNvbnN0IGFyZWFzID0gW1xuICAgICAgICAgICAgXCJQcm9kdWN0aXZpZGFkXCIsIFwiRXNwaXJpdHVhbFwiLCBcIlNhbHVkXCIsIFwiUnV0aW5hc1wiLFxuICAgICAgICAgICAgXCJWaWRhIFNvY2lhbFwiLCBcIkZhbWlsaWFyXCIsIFwiQXByZW5kaXphamVzXCIsIFwiQ3JlYXRpdmlkYWRcIlxuICAgICAgICBdO1xuICAgIFxuICAgICAgICAvLyBPYnRlbmVyIGVsIGFyY2hpdm8gYWN0dWFsIHkgc3UgbWV0YWRhdGFcbiAgICAgICAgY29uc3QgZmlsZSA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICBsZXQgbWV0YWRhdGE7XG4gICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgIG1ldGFkYXRhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpPy5mcm9udG1hdHRlcjtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBDcmVhciBpbnB1dCByYW5nZSBwYXJhIGNhZGEgXHUwMEUxcmVhXG4gICAgICAgIGFyZWFzLmZvckVhY2goYXJlYSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzYWZlTmFtZSA9IGFyZWEudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8gL2csICdfJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRWYWwgPSBtZXRhZGF0YSAmJiBtZXRhZGF0YVtzYWZlTmFtZV0gPyBtZXRhZGF0YVtzYWZlTmFtZV0gOiAwO1xuICAgIFxuICAgICAgICAgICAgY29uc3QgY29udGVuZWRvckFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGNvbnRlbmVkb3JBcmVhLmNsYXNzTGlzdC5hZGQoJ2FyZWEtZXZhbHVhY2lvbicpO1xuICAgIFxuICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgICAgICAgICAgbGFiZWwudGV4dENvbnRlbnQgPSBhcmVhICsgJzogJztcbiAgICAgICAgICAgIGxhYmVsLmh0bWxGb3IgPSBzYWZlTmFtZTtcbiAgICBcbiAgICAgICAgICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgIGlucHV0LnR5cGUgPSAncmFuZ2UnO1xuICAgICAgICAgICAgaW5wdXQuaWQgPSBzYWZlTmFtZTtcbiAgICAgICAgICAgIGlucHV0Lm5hbWUgPSBzYWZlTmFtZTtcbiAgICAgICAgICAgIGlucHV0Lm1pbiA9ICcxJztcbiAgICAgICAgICAgIGlucHV0Lm1heCA9ICc1JztcbiAgICAgICAgICAgIGlucHV0LnZhbHVlID0gY3VycmVudFZhbC50b1N0cmluZygpOyAvLyBVc2FyIHZhbG9yIGFjdHVhbCBvIDBcbiAgICBcbiAgICAgICAgICAgIGNvbnN0IHZhbG9yTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICB2YWxvckxhYmVsLnRleHRDb250ZW50ID0gaW5wdXQudmFsdWU7IC8vIE1vc3RyYXIgZWwgdmFsb3IgYWN0dWFsIGFsIGxhZG9cbiAgICBcbiAgICAgICAgICAgIGlucHV0Lm9uaW5wdXQgPSAoKSA9PiB2YWxvckxhYmVsLnRleHRDb250ZW50ID0gaW5wdXQudmFsdWU7IC8vIEFjdHVhbGl6YXIgZWwgdmFsb3IgbW9zdHJhZG8gYWwgbW92ZXIgZWwgcmFuZ2VcbiAgICBcbiAgICAgICAgICAgIGNvbnRlbmVkb3JBcmVhLmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgICAgICAgICAgIGNvbnRlbmVkb3JBcmVhLmFwcGVuZENoaWxkKGlucHV0KTtcbiAgICAgICAgICAgIGNvbnRlbmVkb3JBcmVhLmFwcGVuZENoaWxkKHZhbG9yTGFiZWwpO1xuICAgICAgICAgICAgZHYuY29udGFpbmVyLmFwcGVuZENoaWxkKGNvbnRlbmVkb3JBcmVhKTtcbiAgICAgICAgfSk7XG4gICAgXG4gICAgICAgIC8vIEJvdFx1MDBGM24gcGFyYSBndWFyZGFyIGxvcyB2YWxvcmVzXG4gICAgICAgIGNvbnN0IGJvdG9uR3VhcmRhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICBib3Rvbkd1YXJkYXIudGV4dENvbnRlbnQgPSAnR3VhcmRhcic7XG4gICAgICAgIGJvdG9uR3VhcmRhci5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYXJlYSBvZiBhcmVhcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzYWZlTmFtZSA9IGFyZWEudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8gL2csICdfJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNhZmVOYW1lKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWxvciA9IHBhcnNlSW50KGlucHV0RWxlbWVudC52YWx1ZSwgMTApO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZVlBTUxGaWVsZHMoZmlsZS5wYXRoLCBzYWZlTmFtZSwgdmFsb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdCYWxhbmNlcyBhY3R1YWxpemFkb3MgY29uIFx1MDBFOXhpdG8uJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ05vIHNlIHB1ZG8gb2J0ZW5lciBlbCBhcmNoaXZvIGFjdHVhbC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZHYuY29udGFpbmVyLmFwcGVuZENoaWxkKGJvdG9uR3VhcmRhcik7XG4gICAgXG4gICAgICAgIC8vIEFncmVnYXIgYm90XHUwMEYzbiBkZSBzYWxpciBzaSBuZWNlc2FyaW9cbiAgICAgICAgY29uc3QgYm90b25TYWxpciA9IHRoaXMuYWdyZWdhckJvdG9uU2FsaXIoZHYpO1xuICAgICAgICBkdi5jb250YWluZXIuYXBwZW5kQ2hpbGQoYm90b25TYWxpcik7XG4gICAgfVxuXG5cbiAgICBhc3luYyBtb3N0cmFyRm9ybXVsYXJpb0hhYml0b3MoZHYpIHtcbiAgICAgICAgLy8gTGltcGlhciBlbCBjb250ZW5lZG9yXG4gICAgICAgIGR2LmNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGhhYml0b3MgPSBbXG4gICAgICAgICAgICBcIkNsdWIgNWFtXCIsXG4gICAgICAgICAgICBcIlJlZ2lzdHJvIEFrXHUwMEUxc2hpa29cIixcbiAgICAgICAgICAgIFwiR2ltbmFzaW9cIixcbiAgICAgICAgICAgIFwiQ29tZXIgU2FsdWRhYmxlXCIsXG4gICAgICAgICAgICBcIkxlZXIgbGlicm9cIixcbiAgICAgICAgICAgIFwiRXNjcmliaXIgYml0XHUwMEUxY29yYSBlbCBtaXNtbyBkXHUwMEVEYVwiLFxuICAgICAgICAgICAgXCJDcmVhciBwbGFuIGRcdTAwRURhIHNpZ3VpZW50ZVwiLFxuICAgICAgICAgICAgXCJNZSBmdVx1MDBFRCBhIGRvcm1pciBhbnRlcyBkZSBsYXMgMTA6MzBwbVwiXG4gICAgICAgIF07XG4gICAgXG4gICAgICAgIC8vIEZ1bmNpXHUwMEYzbiBwYXJhIGNhcmdhciB5IG1hcmNhciBjaGVja2JveGVzIHNlbGVjY2lvbmFkb3MgcHJldmlhbWVudGVcbiAgICAgICAgY29uc3QgY2FyZ2FyQ2hlY2tib3hlc1NlbGVjY2lvbmFkb3MgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmaWxlID0gYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG4gICAgICAgICAgICAvLyBMZWVyIGVsIGFyY2hpdm8gcGFyYSBvYnRlbmVyIGVsIGNhbXBvICdoYWJpdG9zJyBkZWwgWUFNTFxuICAgICAgICAgICAgY29uc3QgZmlsZUNvbnRlbnQgPSBhd2FpdCBhcHAudmF1bHQucmVhZChmaWxlKTtcbiAgICAgICAgICAgIGNvbnN0IGZyb250TWF0dGVyID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpPy5mcm9udG1hdHRlcjtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nSGFiaXRzID0gZnJvbnRNYXR0ZXI/LmhhYml0b3MgfHwgW107XG4gICAgXG4gICAgICAgICAgICBoYWJpdG9zLmZvckVhY2goaGFiaXRvID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgICAgICAgY2hlY2tib3gudHlwZSA9ICdjaGVja2JveCc7XG4gICAgICAgICAgICAgICAgY2hlY2tib3guaWQgPSBoYWJpdG87XG4gICAgICAgICAgICAgICAgY2hlY2tib3gubmFtZSA9ICdoYWJpdG9zJztcbiAgICAgICAgICAgICAgICBjaGVja2JveC52YWx1ZSA9IGhhYml0bztcbiAgICAgICAgICAgICAgICBjaGVja2JveC5jaGVja2VkID0gZXhpc3RpbmdIYWJpdHMuaW5jbHVkZXMoaGFiaXRvKTtcbiAgICBcbiAgICAgICAgICAgICAgICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICAgICAgICAgICAgbGFiZWwuaHRtbEZvciA9IGhhYml0bztcbiAgICAgICAgICAgICAgICBsYWJlbC50ZXh0Q29udGVudCA9IGhhYml0bztcbiAgICBcbiAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY2hlY2tib3gpO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgXG4gICAgICAgICAgICAgICAgZHYuY29udGFpbmVyLmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgYXdhaXQgY2FyZ2FyQ2hlY2tib3hlc1NlbGVjY2lvbmFkb3MoKTtcbiAgICBcbiAgICAgICAgLy8gQ3JlYXIgeSBjb25maWd1cmFyIGVsIGJvdFx1MDBGM24gZGUgZ3VhcmRhclxuICAgICAgICBjb25zdCBndWFyZGFyQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgIGd1YXJkYXJCdG4udGV4dENvbnRlbnQgPSAnR3VhcmRhcic7XG4gICAgICAgIGd1YXJkYXJCdG4ub25jbGljayA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrYm94ZXMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W25hbWU9XCJoYWJpdG9zXCJdOmNoZWNrZWQnKSk7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZEhhYml0cyA9IGNoZWNrYm94ZXMubWFwKGNoZWNrYm94ID0+IGNoZWNrYm94LnZhbHVlKTtcbiAgICBcbiAgICAgICAgICAgIC8vIEFjdHVhbGl6YXIgZWwgY2FtcG8gJ2hhYml0b3MnIGVuIGVsIGFyY2hpdm8gWUFNTCB1c2FuZG8gZWwgbVx1MDBFOXRvZG8gdXBkYXRlWUFNTEZpZWxkc1xuICAgICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVZQU1MRmllbGRzKGZpbGUucGF0aCwgJ2hhYml0b3MnLCBzZWxlY3RlZEhhYml0cyk7XG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIC8vIEFcdTAwRjFhZGlyIGVsIGJvdFx1MDBGM24gZGUgZ3VhcmRhciBhbCBjb250ZW5lZG9yXG4gICAgICAgIGR2LmNvbnRhaW5lci5hcHBlbmRDaGlsZChndWFyZGFyQnRuKTtcblxuICAgICAgICAvLyBBZ3JlZ2FyIGJvdFx1MDBGM24gZGUgc2FsaXIgc2kgbmVjZXNhcmlvXG4gICAgICAgIGNvbnN0IGJvdG9uU2FsaXIgPSB0aGlzLmFncmVnYXJCb3RvblNhbGlyKGR2KTtcbiAgICAgICAgZHYuY29udGFpbmVyLmFwcGVuZENoaWxkKGJvdG9uU2FsaXIpO1xuICAgIH1cbiAgICBcbiAgICAvLyBNXHUwMEU5dG9kbyBhZGFwdGFkbyBwYXJhIG1vc3RyYXJCb3RvbkJhbGFuY2VQZXJzb25hbFxuICAgIGFzeW5jIG1vc3RyYXJCb3RvblJlZ2lzdHJvVGFyZWFzKGR2KSB7XG4gICAgICAgIFxuICAgICAgICAvLyBMaW1waWFyIGVsIGNvbnRlbmVkb3JcbiAgICAgICAgZHYuY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuICAgICAgICBsZXQgYm90b25lcztcbiAgICAgICAgY29uc3QgdXRpbHNBUEluc3RhbmNlID0gbmV3IHV0aWxzQVBJKHRoaXMucGx1Z2luKTtcbiAgICAgICAgY29uc3QgYWN0aXZvID0gYXdhaXQgdXRpbHNBUEluc3RhbmNlLmJ1c2NhclJlZ2lzdHJvc0FjdGl2b3MoYXBwKVxuICAgICAgICBpZiAoYWN0aXZvIGluc3RhbmNlb2YgVEZpbGUpeyAvLyBWZXJpZmljYSBzaSBoYXkgYWxndW4gYXJjaGl2byBhY3Rpdm8gXG4gICAgICAgICAgICBib3RvbmVzID0gW1wiQ2VycmFkYXMgSG95XCIsIFwiUmVnaXN0cm9zIEhveVwiLCBcIk51ZXZvIFJlZ2lzdHJvIFRpZW1wb1wiLCBcIkNlcnJhciBSZWdpc3RybyBUaWVtcG9cIl07XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgYm90b25lcyA9IFtcIkNlcnJhZGFzIEhveVwiLCBcIlJlZ2lzdHJvcyBIb3lcIiwgXCJOdWV2byBSZWdpc3RybyBUaWVtcG9cIl07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhciB5IG1vc3RyYXIgY2FkYSBib3RcdTAwRjNuXG4gICAgICAgIGJvdG9uZXMuZm9yRWFjaCh0ZXh0b0JvdG9uID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJvdG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICBib3Rvbi50ZXh0Q29udGVudCA9IHRleHRvQm90b247XG4gICAgICAgICAgICBib3Rvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHN3aXRjaCh0ZXh0b0JvdG9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0NlcnJhZGFzIEhveSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm1vc3RyYXJDZXJyYWRhc0hveShkdik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnUmVnaXN0cm9zIEhveSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm1vc3RyYXJSZWdpc3Ryb3NIb3koZHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0NlcnJhciBSZWdpc3RybyBUaWVtcG8nOlxuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnJlZ2lzdHJvVGllbXBvQVBJLmNlcnJhclJlZ2lzdHJvKGFjdGl2byk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTnVldm8gUmVnaXN0cm8gVGllbXBvJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ZXJBUEluc3RhbmNlID0gbmV3IHN0YXJ0ZXJBUEkodGhpcy5wbHVnaW4pXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBzdGFydGVyQVBJbnN0YW5jZS5jcmVhdGVOb3RlKFwiUmVnaXN0cm9UaWVtcG9cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke3RleHRvQm90b259IHByZXNpb25hZG8uYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZHYuY29udGFpbmVyLmFwcGVuZENoaWxkKGJvdG9uKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgYm90b25TYWxpciA9IHRoaXMuYWdyZWdhckJvdG9uU2FsaXIoZHYpO1xuICAgICAgICBkdi5jb250YWluZXIuYXBwZW5kQ2hpbGQoYm90b25TYWxpcik7XG4gICAgfVxuXG4gICAgYXN5bmMgbW9zdHJhckNlcnJhZGFzSG95KGR2KSB7XG4gICAgICAgIGR2LmNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICBcbiAgICAgICAgY29uc3QgYWN0aXZvID0gYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG4gICAgICAgIGxldCBmZWNoYUFjdGl2byA9IGFjdGl2bz8uYmFzZW5hbWUuc3BsaXQoXCIgXCIpWzBdO1xuICAgICAgICBjb25zdCBob3kgPSBuZXcgRGF0ZShmZWNoYUFjdGl2bykuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gICAgXG4gICAgICAgIGNvbnN0IGZpbGVzID0gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcbiAgICAgICAgXG4gICAgICAgIGxldCB0YXJlYXNQcm9tZXNhcyA9IGZpbGVzLm1hcChhc3luYyAoZmlsZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGNvbnRlbmlkbyA9IGF3YWl0IGFwcC52YXVsdC5yZWFkKGZpbGUpO1xuICAgICAgICAgICAgbGV0IHRhcmVhc0V4dHJhaWRhcyA9IGV4dHJhZXJUYXJlYXMoY29udGVuaWRvKTtcbiAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBmcm9udE1hdHRlciA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXI7XG4gICAgICAgICAgICBjb25zdCBhbGlhcyA9IGZyb250TWF0dGVyPy5hbGlhc2VzID8gZnJvbnRNYXR0ZXIuYWxpYXNlc1swXSA6IG51bGw7XG4gICAgICAgICAgICBjb25zdCBmaWxlUGF0aCA9IGZpbGUucGF0aDtcbiAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGZpbGVQYXRoLFxuICAgICAgICAgICAgICAgIGFsaWFzLFxuICAgICAgICAgICAgICAgIHRhcmVhczogdGFyZWFzRXh0cmFpZGFzLmZpbHRlcih0YXJlYSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmZWNoYVRhcmVhID0gbmV3IERhdGUodGFyZWEuY29tcGxldGlvbkRhdGUpLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZWEuY29tcGxldGVkICYmIHRhcmVhLmNvbXBsZXRpb25EYXRlICYmIGZlY2hhVGFyZWEgPT09IGhveTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBsZXQgcmVzdWx0YWRvcyA9IGF3YWl0IFByb21pc2UuYWxsKHRhcmVhc1Byb21lc2FzKTtcbiAgICAgICAgbGV0IHRvdGFsVGFyZWFzQ2VycmFkYXMgPSByZXN1bHRhZG9zLnJlZHVjZSgodG90YWwsIHsgdGFyZWFzIH0pID0+IHRvdGFsICsgdGFyZWFzLmxlbmd0aCwgMCk7XG5cbiAgICAgICAgLy8gTWVuc2FqZSBzb2JyZSBlbCBlc3RhZG8gZGUgbGFzIHRhcmVhcyBjZXJyYWRhcyBob3lcbiAgICAgICAgaWYgKHRvdGFsVGFyZWFzQ2VycmFkYXMgPiAwKSB7XG4gICAgICAgICAgICBkdi5oZWFkZXIoMywgYEhveSBzZSBoYW4gY2VycmFkbyAke3RvdGFsVGFyZWFzQ2VycmFkYXN9IHRhcmVhcy5gKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgIC8vIENyZWFyIGxhIHRhYmxhIEhUTUxcbiAgICAgICAgY29uc3QgdGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpO1xuICAgICAgICB0YWJsZS5jbGFzc0xpc3QuYWRkKCd0YWJsZScpOyAvLyBBZ3JlZ2FyIHVuYSBjbGFzZSBwYXJhIGxhIHRhYmxhIHBhcmEgZWwgZXN0aWxvXG4gICAgICAgIHRhYmxlLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgIFxuICAgICAgICAvLyBBXHUwMEYxYWRpciBlbmNhYmV6YWRvcyBkZSB0YWJsYVxuICAgICAgICBjb25zdCBoZWFkZXJSb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgICAgICBsZXQgaGVhZGVycyA9IFtcIk5vdGFcIiwgXCJUYXJlYXMgQ2VycmFkYXNcIl07XG4gICAgICAgIGhlYWRlcnMuZm9yRWFjaChoZWFkZXJUZXh0ID0+IHtcbiAgICAgICAgICAgIGxldCBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aCcpO1xuICAgICAgICAgICAgaGVhZGVyLnRleHRDb250ZW50ID0gaGVhZGVyVGV4dDtcbiAgICAgICAgICAgIGhlYWRlci5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICAgIGhlYWRlclJvdy5hcHBlbmRDaGlsZChoZWFkZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGFibGUuYXBwZW5kQ2hpbGQoaGVhZGVyUm93KTtcbiAgICBcbiAgICAgICAgLy8gQVx1MDBGMWFkaXIgZmlsYXMgZGUgZGF0b3MgYSBsYSB0YWJsYVxuICAgICAgICByZXN1bHRhZG9zLmZvckVhY2goKHtmaWxlUGF0aCwgYWxpYXMsIHRhcmVhc30pID0+IHtcbiAgICAgICAgICAgIGlmICh0YXJlYXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGxldCByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIENvbHVtbmEgZGUgZW5sYWNlIGNlbnRyYWRvIHZlcnRpY2FsbWVudGVcbiAgICAgICAgICAgICAgICBsZXQgbGlua0NlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICAgICAgICAgIGxpbmtDZWxsLnN0eWxlLnZlcnRpY2FsQWxpZ24gPSAnbWlkZGxlJztcbiAgICAgICAgICAgICAgICBsZXQgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICAgICAgICBhLnNldEF0dHJpYnV0ZSgnaHJlZicsIGBvYnNpZGlhbjovL29wZW4/dmF1bHQ9JHthcHAudmF1bHQuZ2V0TmFtZSgpfSZmaWxlPSR7ZW5jb2RlVVJJQ29tcG9uZW50KGZpbGVQYXRoKX1gKTtcbiAgICAgICAgICAgICAgICBhLnRleHRDb250ZW50ID0gYWxpYXMgfHwgZmlsZVBhdGg7XG4gICAgICAgICAgICAgICAgbGlua0NlbGwuYXBwZW5kQ2hpbGQoYSk7XG4gICAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKGxpbmtDZWxsKTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBDb2x1bW5hIGRlIHRhcmVhcyBjZXJyYWRhc1xuICAgICAgICAgICAgICAgIGxldCB0YXNrc0NlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICAgICAgICAgIGxldCB0YXNrc0xpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuICAgICAgICAgICAgICAgIHRhcmVhcy5mb3JFYWNoKHRhcmVhID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgICAgICAgICAgICAgbGkudGV4dENvbnRlbnQgPSB0YXJlYS50ZXh0O1xuICAgICAgICAgICAgICAgICAgICB0YXNrc0xpc3QuYXBwZW5kQ2hpbGQobGkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRhc2tzQ2VsbC5hcHBlbmRDaGlsZCh0YXNrc0xpc3QpO1xuICAgICAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZCh0YXNrc0NlbGwpO1xuICAgIFxuICAgICAgICAgICAgICAgIHRhYmxlLmFwcGVuZENoaWxkKHJvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIFxuICAgICAgICAvLyBBXHUwMEYxYWRpciBsYSB0YWJsYSBhbCBjb250ZW5lZG9yIGRlIERhdGF2aWV3XG4gICAgICAgIGR2LmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0YWJsZSk7XG4gICAgICAgIFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZHYucGFyYWdyYXBoKFwiTm8gaGF5IHRhcmVhcyBjZXJyYWRhcyBob3kuXCIpO1xuICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgY29uc3QgYm90b25TYWxpciA9IHRoaXMuYWdyZWdhckJvdG9uU2FsaXIoZHYpO1xuICAgICAgICBkdi5jb250YWluZXIuYXBwZW5kQ2hpbGQoYm90b25TYWxpcik7XG4gICAgXG4gICAgZnVuY3Rpb24gZXh0cmFlclRhcmVhcyhjb250ZW5pZG8pIHtcbiAgICAgICAgY29uc3QgdGFyZWFzID0gW107XG4gICAgICAgIGNvbnN0IGxpbmVhcyA9IGNvbnRlbmlkby5zcGxpdChcIlxcblwiKTtcbiAgICBcbiAgICAgICAgZm9yIChjb25zdCBsaW5lYSBvZiBsaW5lYXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmVhUmVnZXggPSAvXlxccyotXFxzKlxcWyh4fFh8IClcXF1cXHMqKC4rKSQvO1xuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSB0YXJlYVJlZ2V4LmV4ZWMobGluZWEpO1xuICAgIFxuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29tcGxldGFkYSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCkgPT09ICd4JztcbiAgICAgICAgICAgICAgICBsZXQgdGV4dG9UYXJlYSA9IG1hdGNoWzJdO1xuICAgICAgICAgICAgICAgIGxldCBmZWNoYUNvbXBsZXRpdHVkID0gbnVsbDtcbiAgICBcbiAgICAgICAgICAgICAgICBjb25zdCBmZWNoYVJlZ2V4ID0gL1xcW2NvbXBsZXRpb246OiAoXFxkezR9LVxcZHsyfS1cXGR7Mn0pXFxdLztcbiAgICAgICAgICAgICAgICBjb25zdCBmZWNoYU1hdGNoID0gZmVjaGFSZWdleC5leGVjKHRleHRvVGFyZWEpO1xuICAgICAgICAgICAgICAgIGlmIChmZWNoYU1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGZlY2hhQ29tcGxldGl0dWQgPSBmZWNoYU1hdGNoWzFdO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0b1RhcmVhID0gdGV4dG9UYXJlYS5yZXBsYWNlKGZlY2hhUmVnZXgsICcnKS50cmltKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHRhcmVhcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogdGV4dG9UYXJlYSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkOiBjb21wbGV0YWRhLFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0aW9uRGF0ZTogZmVjaGFDb21wbGV0aXR1ZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4gdGFyZWFzO1xuICAgIH1cbiAgICBcbiAgICBcbn1cblxuXG4gICAgYXN5bmMgbW9zdHJhclJlZ2lzdHJvc0hveShkdikge1xuICAgICAgICBkdi5jb250YWluZXIuaW5uZXJIVE1MID0gJyc7IC8vIExpbXBpYXIgZWwgY29udGVuZWRvciBkZSBEYXRhdmlld1xuICAgICAgICBcbiAgICAgICAgLy8gT2J0XHUwMEU5biBsYSBmZWNoYSBhY3R1YWwgYmFzYWRhIGVuIGVsIG5vbWJyZSBkZWwgYXJjaGl2b1xuICAgICAgICBjb25zdCBmZWNoYUhveSA9IERhdGVUaW1lLmZyb21Gb3JtYXQoYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCkuYmFzZW5hbWUuc3BsaXQoXCIgXCIpWzBdLCAneXl5eS1NTS1kZCcsIHsgbG9jYWxlOiAnZXMnIH0pO1xuICAgICAgIFxuICAgICAgICAvLyBFbmN1ZW50cmEgYXJjaGl2b3MgcXVlIGNvbnRpZW5lbiByZWdpc3Ryb3MgZGUgdGllbXBvXG4gICAgICAgIGNvbnN0IGZvbGRlciA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9SZWdpc3Ryb1RpZW1wb1xuICAgICAgICBjb25zdCBmaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCkuZmlsdGVyKGZpbGUgPT4gZmlsZS5wYXRoLmluY2x1ZGVzKGZvbGRlcikpO1xuXG4gICAgICAgIC8vIExlZSB5IHByb2Nlc2EgZWwgY29udGVuaWRvIGRlIGNhZGEgYXJjaGl2byBwYXJhIGV4dHJhZXIgcmVnaXN0cm9zIGRlIHRpZW1wb1xuICAgICAgICBsZXQgdG90YWxEaWEgPSAwO1xuICAgICAgICBsZXQgcmVnaXN0cm9zSG95ID0gW107XG4gICAgICAgIFxuICAgICAgICBmb3IgKGxldCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCBtZXRhZGF0YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXI7XG5cbiAgICAgICAgICAgIGlmIChtZXRhZGF0YT8uaG9yYUluaWNpbykge1xuICAgICAgICAgICAgICAgIGxldCBob3JhSW5pY2lvID0gRGF0ZVRpbWUuZnJvbUZvcm1hdChtZXRhZGF0YS5ob3JhSW5pY2lvLCAneXl5eS1NTS1kZCBFRUVFIEhIOm1tJywgeyBsb2NhbGU6ICdlcycgfSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRPZkRheSA9IGhvcmFJbmljaW8uc3RhcnRPZignZGF5Jyk7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0T2ZEYXkudHMgPT09IGZlY2hhSG95LnN0YXJ0T2YoJ2RheScpLnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZ2lzdHJvc0hveS5wdXNoKHtwYXRoOiBmaWxlLnBhdGgsIGZyb250bWF0dGVyIDogbWV0YWRhdGF9KTsgLy8gQ29ycmVnaWRvIHBhcmEgYWdyZWdhciBlbCBvYmpldG8gYXJjaGl2byBkaXJlY3RhbWVudGVcbiAgICAgICAgICAgICAgICAgICAgLy8gQXNlZ1x1MDBGQXJhdGUgZGUgY29udmVydGlyIHRpZW1wb1RyYWJhamFkbyBhIG5cdTAwRkFtZXJvIGFudGVzIGRlIHN1bWFyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsRGlhICs9IG1ldGFkYXRhLnRpZW1wb1RyYWJhamFkbyA/IHBhcnNlSW50KG1ldGFkYXRhLnRpZW1wb1RyYWJhamFkbykgOiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBNb3N0cmFyIGVsIHRvdGFsIGRlIHRpZW1wbyB0cmFiYWphZG8gaG95XG4gICAgICAgIGR2LmhlYWRlcigzLCBcIlRpZW1wbyByZWdpc3RyYWRvIGhveTogXCIgKyBEdXJhdGlvbi5mcm9tTWlsbGlzKHRvdGFsRGlhKS50b0Zvcm1hdCgnaGg6bW06c3MnKSk7XG5cblxuICAgICAgICAgICAgLy8gT3JkZW5hIGxvcyByZWdpc3Ryb3MgcG9yIGhvcmEgZGUgaW5pY2lvIGFudGVzIGRlIGdlbmVyYXIgbGEgdGFibGFcbiAgICAgICAgcmVnaXN0cm9zSG95LnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhIHNpIGhvcmFJbmljaW8gZXN0XHUwMEUxIHByZXNlbnRlIHkgZXMgdW5hIGNhZGVuYSB2XHUwMEUxbGlkYSBwYXJhIGFtYm9zIG9iamV0b3NcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGEuZnJvbnRtYXR0ZXIuaG9yYUluaWNpbyA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIGIuZnJvbnRtYXR0ZXIuaG9yYUluaWNpbyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1pbGxpc0EgPSBEYXRlVGltZS5mcm9tRm9ybWF0KGEuZnJvbnRtYXR0ZXIuaG9yYUluaWNpbywgJ3l5eXktTU0tZGQgRUVFRSBISDptbScsIHsgbG9jYWxlOiAnZXMnIH0pLnRvTWlsbGlzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtaWxsaXNCID0gRGF0ZVRpbWUuZnJvbUZvcm1hdChiLmZyb250bWF0dGVyLmhvcmFJbmljaW8sICd5eXl5LU1NLWRkIEVFRUUgSEg6bW0nLCB7IGxvY2FsZTogJ2VzJyB9KS50b01pbGxpcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1pbGxpc0IgLSBtaWxsaXNBO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgcGFyc2luZyBkYXRlczpcIiwgZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1hbmVqbyBkZSBjYXNvcyBkb25kZSBsb3MgZGF0b3Mgbm8gc2VhbiBzdHJpbmdzIHZcdTAwRTFsaWRvc1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0ludmFsaWQgZGF0ZSBmb3JtYXQgZm9yIHNvcnRpbmc6JywgYS5ob3JhSW5pY2lvLCBiLmhvcmFJbmljaW8pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBcbmlmIChyZWdpc3Ryb3NIb3kubGVuZ3RoPjApe1xuLy8gQ3JlYSBsYSB0YWJsYSBIVE1MXG5jb25zdCB0YWJsZSA9IGR2LmNvbnRhaW5lci5jcmVhdGVFbCgndGFibGUnLCB7Y2xzOiAnZGF0YXZpZXcgdGFibGUnfSk7XG50YWJsZS5zdHlsZS53aWR0aCA9ICcxMDAlJztcblxuLy8gQ3JlYSB5IGFcdTAwRjFhZGUgbG9zIGVuY2FiZXphZG9zIGRlIGxhIHRhYmxhXG5jb25zdCBoZWFkZXIgPSBkdi5lbCgndHInLCAnJywgdGFibGUpO1xuW1wiUmVnaXN0cm9cIiwgXCJEZXNjcmlwY2lcdTAwRjNuXCIsIFwiSG9yYSBJbmljaW9cIiwgXCJUaWVtcG9cIiwgXCJFc3RhZG9cIiwgXCJJZFwiLCBcIkFjY2lcdTAwRjNuXCJdLmZvckVhY2godGV4dCA9PiBkdi5lbCgndGgnLCB0ZXh0LCBoZWFkZXIpKTtcblxuLy8gQ3JlYSB5IGFcdTAwRjFhZGUgY2FkYSBmaWxhIGRlIHJlZ2lzdHJvIGEgbGEgdGFibGFcbnJlZ2lzdHJvc0hveS5mb3JFYWNoKHJlZ2lzdHJvID0+IHtcbiAgICBjb25zdCByb3cgPSBkdi5lbCgndHInLCcnLHRhYmxlKVxuICAgIGR2LmVsKCd0ZCcsIGR2LmZ1bmMubGluayhyZWdpc3Ryby5wYXRoLHJlZ2lzdHJvLmZyb250bWF0dGVyLmFsaWFzZXNbMF0pLCByb3cpO1xuICAgICAvLyBBXHUwMEYxYWRlIGxhIGNlbGRhIGRlIGRlc2NyaXBjaVx1MDBGM24geSB0XHUwMEVEdHVsb1xuICAgIGR2LmVsKCd0ZCcsIHJlZ2lzdHJvLmZyb250bWF0dGVyLmRlc2NyaXBjaW9uID8gcmVnaXN0cm8uZnJvbnRtYXR0ZXIuZGVzY3JpcGNpb24gOiAnU2luIGRlc2NyaXBjaVx1MDBGM24nLCByb3cpO1xuICAgIGR2LmVsKCd0ZCcsIERhdGVUaW1lLmZyb21Gb3JtYXQocmVnaXN0cm8uZnJvbnRtYXR0ZXIuaG9yYUluaWNpbywgJ3l5eXktTU0tZGQgRUVFRSBISDptbScsIHsgbG9jYWxlOiAnZXMnIH0pLnRvRm9ybWF0KCdoOm1tIGEnKSArXG4gICAgXCIgLyBcIiArIERhdGVUaW1lLmZyb21Gb3JtYXQocmVnaXN0cm8uZnJvbnRtYXR0ZXIuaG9yYUZpbmFsLCAneXl5eS1NTS1kZCBFRUVFIEhIOm1tJywgeyBsb2NhbGU6ICdlcycgfSkudG9Gb3JtYXQoJ2g6bW0gYScpLCByb3cpO1xuICAgIGlmIChyZWdpc3Ryby5mcm9udG1hdHRlci5lc3RhZG8gPT09IFwiXHVEODNEXHVERkUyXCIpe1xuICAgIC8vIFNlcGFyYW1vcyBsYSBmZWNoYSB5IGxhIGhvcmEsIHkgZWxpbWluYW1vcyBlbCBkXHUwMEVEYSBkZSBsYSBzZW1hbmFcbiAgICBsZXQgcGFydGVzID0gcmVnaXN0cm8uZnJvbnRtYXR0ZXIuaG9yYUluaWNpby5zcGxpdCgnICcpO1xuICAgIC8vIFJlb3JnYW5pemFtb3MgbGFzIHBhcnRlcyBwYXJhIGZvcm1hciB1bmEgZmVjaGEgZW4gZm9ybWF0byBcIllZWVktTU0tRERUSEg6bW1cIlxuICAgIGxldCBmZWNoYUhvcmFJU08gPSBgJHtwYXJ0ZXNbMF19VCR7cGFydGVzWzJdfWA7XG4gICAgLy8gUGFyc2VhbW9zIGxhIGZlY2hhIGVuIGZvcm1hdG8gSVNPXG4gICAgbGV0IGluaWNpbyA9IERhdGUucGFyc2UoZmVjaGFIb3JhSVNPKTtcbiAgICBsZXQgYWhvcmEgPSBEYXRlLm5vdygpO1xuICAgIGxldCBkaWZlcmVuY2lhID0gYWhvcmEgLSBpbmljaW87IC8vIERpZmVyZW5jaWEgZW4gbWlsaXNlZ3VuZG9zXG4gICAgZHYuZWwoJ3RkJywgRHVyYXRpb24uZnJvbU1pbGxpcyhkaWZlcmVuY2lhKS50b0Zvcm1hdCgnaDptbScpLCByb3cpXG4gICAgfWVsc2V7XG4gICAgZHYuZWwoJ3RkJywgRHVyYXRpb24uZnJvbU1pbGxpcyhyZWdpc3Ryby5mcm9udG1hdHRlci50aWVtcG9UcmFiYWphZG8pLnRvRm9ybWF0KCdoOm1tJyksIHJvdyk7XG4gICAgfVxuICAgIGR2LmVsKCd0ZCcsIHJlZ2lzdHJvLmZyb250bWF0dGVyLmVzdGFkbywgcm93KTtcbiAgICBkdi5lbCgndGQnLCByZWdpc3Ryby5mcm9udG1hdHRlci5pZCwgcm93KTtcbiAgICBpZiAocmVnaXN0cm8uZnJvbnRtYXR0ZXIuZXN0YWRvID09PSBcIlx1RDgzRFx1REZFMlwiKXtcbiAgICAgICAgZHYuZWwoJ3RkJywgdGhpcy5jcmVhdGVCdXR0b25UYWJsZSgnQ2VycmFyJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBkZWJ1Z2dlclxuICAgICAgICAvLyBMXHUwMEYzZ2ljYSBxdWUgbWFuZWphclx1MDBFMSBlbCBjbGljIGRlbCBib3RcdTAwRjNuLlxuICAgICAgICAvLyBQb3IgZWplbXBsbywgcmV0b21hciBsYSB0YXJlYSByZXByZXNlbnRhZGEgcG9yIGByZWdpc3Ryb2BcbiAgICAgICAgYXdhaXQgdGhpcy5yZWdpc3Ryb1RpZW1wb0FQSS5jZXJyYXJSZWdpc3RybyhyZWdpc3Ryby5mcm9udG1hdHRlci5pZCk7XG4gICAgICAgIC8vdGhpcy5jZXJyYXJUYXJlYShyZWdpc3Ryby5mcm9udG1hdHRlci5pZCk7XG4gICAgICAgIH0pLCByb3cpO1xuICAgIH1lbHNle1xuICAgIGR2LmVsKCd0ZCcsIHRoaXMuY3JlYXRlQnV0dG9uVGFibGUoJ1JldG9tYXInLCAoKSA9PiB7XG4gICAgICAgIC8vIExcdTAwRjNnaWNhIHF1ZSBtYW5lamFyXHUwMEUxIGVsIGNsaWMgZGVsIGJvdFx1MDBGM24uXG4gICAgICAgIC8vIFBvciBlamVtcGxvLCByZXRvbWFyIGxhIHRhcmVhIHJlcHJlc2VudGFkYSBwb3IgYHJlZ2lzdHJvYFxuICAgICAgICB0aGlzLnJldG9tYXJUYXJlYShyZWdpc3Ryby5mcm9udG1hdHRlci5pZCk7XG4gICAgICAgIH0pLCByb3cpO1xuICAgIH1cbiAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgYm90b25TYWxpciA9IHRoaXMuYWdyZWdhckJvdG9uU2FsaXIoZHYpO1xuICAgIGR2LmNvbnRhaW5lci5hcHBlbmRDaGlsZChib3RvblNhbGlyKTtcbiAgICBcbn1cblxuICAgIGNyZWF0ZUJ1dHRvblRhYmxlKGJ1dHRvblRleHQsIG9uQ2xpY2tDYWxsYmFjaykge1xuICAgICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgYnV0dG9uLnRleHRDb250ZW50ID0gYnV0dG9uVGV4dDtcbiAgICAgICAgYnV0dG9uLnR5cGUgPSAnYnV0dG9uJzsgLy8gQXNlZ1x1MDBGQXJhdGUgZGUgcXVlIG5vIHNlIGVudmlhclx1MDBFMSB1biBmb3JtdWxhcmlvIGFsIGhhY2VyIGNsaWMgZW4gXHUwMEU5bFxuICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgneW91ci1idXR0b24tY2xhc3MnKTsgLy8gQWdyZWdhIHVuYSBjbGFzZSBwYXJhIGVsIGVzdGlsbyBkZWwgYm90XHUwMEYzbiBzaSBlcyBuZWNlc2FyaW9cblxuICAgICAgICAvLyBBXHUwMEYxYWRlIGVsIGV2ZW50byBkZSBjbGljIGFsIGJvdFx1MDBGM25cbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbGlja0NhbGxiYWNrKTtcblxuICAgICAgICByZXR1cm4gYnV0dG9uO1xuICAgIH1cbiAgICAvLyBDcmVhIGxhIG5vdGEgZGVzZGUgZWwgdGVtcGxhdGVyIGRlIFJlZ2lzdHJvVGllbXBvXG4gICAgYXN5bmMgcmV0b21hclRhcmVhKGlkKSB7IFxuICAgICAgICAvLyBBc2VnXHUwMEZBcmF0ZSBkZSByZWVtcGxhemFyICdydXRhL2FsL2FyY2hpdm8ubWQnIGNvbiBsYSBydXRhIGV4YWN0YSBkZWwgYXJjaGl2byBxdWUgZGVzZWFzIG9idGVuZXJcbiAgICAgICAgZGVidWdnZXI7XG4gICAgICAgIGNvbnN0IGZpbGVQYXRoID0gYFBsYW50aWxsYXMvJHt0aGlzLnBsdWdpbi5zZXR0aW5nc1tgZm9sZGVyX1JlZ2lzdHJvVGllbXBvYF19L1BsdCAtIFJlZ2lzdHJvVGllbXBvLm1kYDtcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZpbGVQYXRoKTtcblxuICAgICAgICBpZiAodGVtcGxhdGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgLy8gQWhvcmEgJ2ZpbGUnIGVzIHR1IGFyY2hpdm8gZGVzZWFkbywgeSBwdWVkZXMgdHJhYmFqYXIgY29uIFx1MDBFOWwgY29tbyBuZWNlc2l0ZXNcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQXJjaGl2byBlbmNvbnRyYWRvOlwiLCB0ZW1wbGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBTaSBlbCBhcmNoaXZvIG5vIHNlIGVuY29udHJcdTAwRjMsICdmaWxlJyBzZXJcdTAwRTEgbnVsbFxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJBcmNoaXZvIG5vIGVuY29udHJhZG8uXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gXCJSZXRvbWFyIFwiICsgaWQ7XG4gICAgICAgIGNvbnN0IGZvbGRlciA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoXCJJbmJveFwiKTtcbiAgICAgICAgY29uc3QgdHAgPSB0aGlzLmdldFRwKCk7XG4gICAgICAgIGxldCBjcmVhck5vdGEgPSB0cC5maWxlLnN0YXRpY19mdW5jdGlvbnMuZ2V0KFwiY3JlYXRlX25ld1wiKVxuICAgICAgICBhd2FpdCBjcmVhck5vdGEgKHRlbXBsYXRlLCBmaWxlbmFtZSwgZmFsc2UsIGZvbGRlcikuYmFzZW5hbWU7XG4gICAgICB9XG5cbiAgICBnZXRUcCgpe1xuICAgICAgICBpZiAoIXRoaXMucGx1Z2luIHx8ICF0aGlzLnBsdWdpbi5hcHAucGx1Z2lucy5lbmFibGVkUGx1Z2lucy5oYXMoJ3RlbXBsYXRlci1vYnNpZGlhbicpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFbCBwbHVnaW4gVGVtcGxhdGVyIG5vIGVzdFx1MDBFMSBoYWJpbGl0YWRvLicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9ICAgXG4gICAgICAgIGxldCB0cEdlbiA9IHRoaXMucGx1Z2luLmFwcC5wbHVnaW5zLnBsdWdpbnNbXCJ0ZW1wbGF0ZXItb2JzaWRpYW5cIl0udGVtcGxhdGVyO1xuICAgICAgICB0cEdlbiA9IHRwR2VuLmZ1bmN0aW9uc19nZW5lcmF0b3IuaW50ZXJuYWxfZnVuY3Rpb25zLm1vZHVsZXNfYXJyYXk7XG4gICAgICAgIGxldCB0cCA9IHt9XG4gICAgICAgIC8vIGdldCBhbiBpbnN0YW5jZSBvZiBtb2R1bGVzXG4gICAgICAgIHRwLmZpbGUgPSB0cEdlbi5maW5kKG0gPT4gbS5uYW1lID09IFwiZmlsZVwiKTtcbiAgICAgICAgdHAuc3lzdGVtID0gdHBHZW4uZmluZChtID0+IG0ubmFtZSA9PSBcInN5c3RlbVwiKTtcblxuICAgICAgICBpZiAoIXRwLmZpbGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk5vIHNlIHB1ZG8gYWNjZWRlciBhbCBvYmpldG8gZGUgZnVuY2lvbmVzIGFjdHVhbGVzIGRlIFRlbXBsYXRlci5cIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZygndHAgY29uIHByb3BpZWRhZGVzIFwiZmlsZVwiIHNlIGhhIGNhcmdhZG8gc2F0aXNmYWN0b3JpYW1lbnRlJyk7XG4gICAgICAgIHJldHVybiB0cDtcbiAgICB9XG5cbn1cbiAgICBcbiIsICJpbXBvcnQgeyBJdGVtVmlldywgV29ya3NwYWNlTGVhZiwgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSAnbHV4b24nO1xuXG5leHBvcnQgY2xhc3MgVmlzdGFSZXN1bWVuU2VtYW5hbCBleHRlbmRzIEl0ZW1WaWV3IHtcbiAgICBpbnRlcnZhbElkOiBudW1iZXI7XG4gXG5cbiAgICBjb25zdHJ1Y3RvcihsZWFmOiBXb3Jrc3BhY2VMZWFmLCBwdWJsaWMgcGx1Z2luOiBhbnkpIHtcbiAgICAgICAgc3VwZXIobGVhZik7XG4gICAgfVxuXG4gICAgZ2V0Vmlld1R5cGUoKSB7XG4gICAgICAgIHJldHVybiBcInZpc3RhLXJlc3VtZW4tc2VtYW5hbFwiO1xuICAgIH1cblxuICAgIGdldERpc3BsYXlUZXh0KCkge1xuICAgICAgICByZXR1cm4gXCJSZXN1bWVuIFNlbWFuYWxcIjtcbiAgICB9XG5cbiAgICBnZXRJY29uKCkge1xuICAgICAgICByZXR1cm4gXCJoaXN0b3J5XCI7IC8vIEVzdGUgZXMgdW4gZWplbXBsbywgY2FtYmlhIFwiZG9jdW1lbnRvXCIgcG9yIGVsIG5vbWJyZSBkZWwgXHUwMEVEY29ubyBxdWUgZGVzZWVzIHVzYXJcbiAgICB9XG5cbiAgICBhc3luYyBvbk9wZW4oKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZUZpbGUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICBpZiAoIWFjdGl2ZUZpbGUpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGVudEVsLnNldFRleHQoXCJObyBoYXkgdW4gYXJjaGl2byBhY3Rpdm8uXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmlsZUNhY2hlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoYWN0aXZlRmlsZSk7XG4gICAgICAgIGF3YWl0IHRoaXMuYWN0dWFsaXphclZpc3RhKGZpbGVDYWNoZSk7IC8vIFB1ZWRlcyB1c2FyIHRoaXMuZmlsZSBkZW50cm8gZGUgYWN0dWFsaXphclZpc3RhXG4gICAgXG4gICAgICAgIC8vYXdhaXQgdGhpcy5hY3R1YWxpemFyVmlzdGEoKTsgLy8gQWN0dWFsaXphIGxhIHZpc3RhIGlubWVkaWF0YW1lbnRlIGFsIGFicmlyXG5cbiAgICAgICAgdGhpcy5pbnRlcnZhbElkID0gd2luZG93LnNldEludGVydmFsKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYWN0dWFsaXphclZpc3RhKGZpbGVDYWNoZSk7IC8vIEFjdHVhbGl6YSBsYSB2aXN0YSBjYWRhIDEwIHNlZ3VuZG9zXG4gICAgICAgIH0sIDEwMDAwKTtcbiAgICB9XG4gICAgXG4gICAgb25DbG9zZSgpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsSWQpOyAvLyBMaW1waWEgZWwgaW50ZXJ2YWxvIGFsIGNlcnJhciBsYSB2aXN0YVxuICAgIH1cblxuICAgIGFzeW5jIGFjdHVhbGl6YXJWaXN0YShmaWxlQ2FjaGUpIHtcbiAgICAgICAgdGhpcy5jb250ZW50RWwuZW1wdHkoKTsgLy8gTGltcGlhIGVsIGNvbnRlbmlkbyBleGlzdGVudGUgYW50ZXMgZGUgYWN0dWFsaXphclxuICAgIFxuICAgICAgICBcbiAgICAgICAgY29uc3QgaW5pY2lvV1N0ciA9IGZpbGVDYWNoZS5mcm9udG1hdHRlcj8uaW5pY2lvVzsgXG4gICAgICAgIGlmICghaW5pY2lvV1N0cikge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50RWwuc2V0VGV4dChcIkxhIGNvbmZpZ3VyYWNpXHUwMEYzbiBkZSBpbmljaW9XIG5vIGVzdFx1MDBFMSBlc3RhYmxlY2lkYS5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZm9sZGVyRGlhcmlvID0gXCJFc3RydWN0dXJhL0pvdXJuYWwvRGlhcmlvL05vdGFzXCI7XG4gICAgICAgIGNvbnN0IGluaWNpb1cgPSBEYXRlVGltZS5mcm9tRm9ybWF0KGluaWNpb1dTdHIsIFwieXl5eS1NTS1kZCBFRUVFXCIsIHsgbG9jYWxlOiBcImVzXCIgfSk7XG4gICAgICAgIGNvbnN0IGZpblcgPSBpbmljaW9XLnBsdXMoeyBkYXlzOiA2IH0pOyAvLyBBanVzdGUgcGFyYSBhc2VndXJhciBxdWUgZWwgZmluIGVzIGVsIGRvbWluZ28gZGUgbGEgbWlzbWEgc2VtYW5hXG4gICAgXG4gICAgICAgIGNvbnN0IGFyY2hpdm9zRGlhcmlvID0gdGhpcy5hcHAudmF1bHQuZ2V0RmlsZXMoKVxuICAgICAgICAgICAgLmZpbHRlcihmaWxlID0+IGZpbGUucGF0aC5zdGFydHNXaXRoKGZvbGRlckRpYXJpbykgJiYgZmlsZS5leHRlbnNpb24gPT09ICdtZCcpO1xuICAgIFxuICAgICAgICBjb25zdCBiaXRhY29yYXMgPSBhcmNoaXZvc0RpYXJpb1xuICAgICAgICAgICAgLm1hcChmaWxlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBmZWNoYUFyY2hpdm8gPSBEYXRlVGltZS5mcm9tSVNPKGZpbGUuYmFzZW5hbWUuc3Vic3RyaW5nKDAsIDEwKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0b3MgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgYXJjaGl2bzogZmlsZS5iYXNlbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogZmlsZS5wYXRoLFxuICAgICAgICAgICAgICAgICAgICBmZWNoYUFyY2hpdm8sXG4gICAgICAgICAgICAgICAgICAgIGRhdG9zXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmlsdGVyKCh7IGZlY2hhQXJjaGl2byB9KSA9PiBmZWNoYUFyY2hpdm8gPj0gaW5pY2lvVyAmJiBmZWNoYUFyY2hpdm8gPD0gZmluVylcbiAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmZlY2hhQXJjaGl2by50b01pbGxpcygpIC0gYi5mZWNoYUFyY2hpdm8udG9NaWxsaXMoKSk7XG4gICAgXG4gICAgICAgIC8vIENyZWFyIHRcdTAwRUR0dWxvIGNvbiBsYXMgZmVjaGFzIGRlIGxhIHNlbWFuYVxuICAgICAgICBsZXQgdHJpbSA9IGZpblcucXVhcnRlcjtcbiAgICAgICAgbGV0IHNlbSA9IChmaW5XLndlZWtOdW1iZXIgLSAoZmluVy5xdWFydGVyIC0gMSkqMTMpXG4gICAgICAgIGlmIChzZW09PTApe3NlbSA9IDEzfVxuXG4gICAgICAgIGNvbnN0IHRpdHVsbyA9IHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogYFJlc3VtZW4gZGUgbGEgc2VtYW5hICR7c2VtfSAtIFEke3RyaW19IC8gVyR7ZmluVy50b0Zvcm1hdCgnV1cnKX0uYH0pO1xuICAgICAgICBjb25zdCBzdWJ0aXR1bG8gPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6IGBEZXNkZSBlbCAke2luaWNpb1cudG9Gb3JtYXQoJ0VFRUUsIEREJyl9IGFsICR7ZmluVy50b0Zvcm1hdCgnRUVFRSwgREQnKX1gIH0pO1xuICAgICAgICB0aXR1bG8uc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgIHN1YnRpdHVsby5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgLy8gQ3JlYXIgdGFibGFcbiAgICAgICAgY29uc3QgdGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpO1xuICAgICAgICB0YWJsZS5jbGFzc05hbWUgPSAndGFibGUtcmVzdW1lblNlbWFuYWwnO1xuICAgIFxuICAgICAgICAvLyBDcmVhciBjYWJlY2VyYSBkZSBsYSB0YWJsYVxuICAgICAgICBjb25zdCB0aGVhZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoZWFkJyk7XG4gICAgICAgIGNvbnN0IGhlYWRlclJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG4gICAgICAgIFsnRFx1MDBFRGEnLCAnUmVzdW1lbiddLmZvckVhY2goaGVhZGVyVGV4dCA9PiB7XG4gICAgICAgICAgICBjb25zdCB0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJyk7XG4gICAgICAgICAgICB0aC50ZXh0Q29udGVudCA9IGhlYWRlclRleHQ7XG4gICAgICAgICAgICBoZWFkZXJSb3cuYXBwZW5kQ2hpbGQodGgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhlYWQuYXBwZW5kQ2hpbGQoaGVhZGVyUm93KTtcbiAgICAgICAgdGFibGUuYXBwZW5kQ2hpbGQodGhlYWQpO1xuICAgIFxuICAgICAgICAvLyBDcmVhciBjdWVycG8gZGUgbGEgdGFibGFcbiAgICAgICAgY29uc3QgdGJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0Ym9keScpO1xuICAgICAgICBiaXRhY29yYXMuZm9yRWFjaCgoeyBhcmNoaXZvLCBwYXRoLCBkYXRvcyB9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG4gICAgXG4gICAgICAgICAgICBjb25zdCB0ZEFyY2hpdm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICAgICAgY29uc3QgbGlua0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgbGlua0VsLnRleHRDb250ZW50ID0gYXJjaGl2bztcbiAgICAgICAgICAgIGxpbmtFbC5ocmVmID0gcGF0aDtcbiAgICAgICAgICAgIGxpbmtFbC5vbmNsaWNrID0gYXN5bmMgKGV2KSA9PiB7XG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHBhdGgpO1xuICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoZmFsc2UpLm9wZW5GaWxlKGZpbGUsIHsgZVN0YXRlOiB7IGZvY3VzOiB0cnVlIH0gfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRkQXJjaGl2by5hcHBlbmRDaGlsZChsaW5rRWwpO1xuICAgIFxuICAgICAgICAgICAgY29uc3QgdGRSZXN1bWVuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgICAgIGNvbnN0IHVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcbiAgICAgICAgICAgIChkYXRvcy50aXR1bG8gfHwgWydTaW4gdFx1MDBFRHR1bG8nXSkuZm9yRWFjaCh0aXR1bG8gPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgICAgICAgICBsaS50ZXh0Q29udGVudCA9IHRpdHVsbztcbiAgICAgICAgICAgICAgICB1bC5hcHBlbmRDaGlsZChsaSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRkUmVzdW1lbi5hcHBlbmRDaGlsZCh1bCk7XG4gICAgXG4gICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZEFyY2hpdm8pO1xuICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGRSZXN1bWVuKTtcbiAgICBcbiAgICAgICAgICAgIHRib2R5LmFwcGVuZENoaWxkKHRyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRhYmxlLmFwcGVuZENoaWxkKHRib2R5KTtcbiAgICBcbiAgICAgICAgLy8gQWdyZWdhciBsYSB0YWJsYSBhbCBjb250ZW5lZG9yXG4gICAgICAgIHRoaXMuY29udGVudEVsLmFwcGVuZENoaWxkKHRhYmxlKTtcbiAgICB9XG4gICAgXG4gICAgXG5cblxuICAgIC8vIE9wY2lvbmFsOiBJbXBsZW1lbnRhIG9uQ2xvc2Ugc2kgbmVjZXNpdGFzIGxpbXBpZXphIGFsIGNlcnJhciBsYSB2aXN0YS5cbn0iLCAiLypcbiAqIEZpbGVuYW1lOiAvc3JjL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG8vdmlld3MvdmlzdGFSVEFjdGl2by50c1xuICogUGF0aDogL3NyYy9tb2R1bGVzL21vZHVsb1JlZ2lzdHJvVGllbXBvL3ZpZXdzXG4gKiBDcmVhdGVkIERhdGU6IDIwMjUtMDItMjMgMjE6MDE6MjVcbiAqIEF1dGhvcjogQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqIC0tLS0tXG4gKiBMYXN0IE1vZGlmaWVkOiAyMDI1LTAyLTIzIDIzOjU4OjM0XG4gKiBNb2RpZmllZCBCeTogQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqIC0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjUgLSBBbmRyXHUwMEU5cyBKdWxpXHUwMEUxbiBCb3JiXHUwMEYzblxuICovXG5cbi8vIGltcG9ydCBicmVha0F1ZGlvIGZyb20gXCIuLi8uLi8uLi8uLi9SZWN1cnNvcy9CcmVhay5tcDNcIjtcbmltcG9ydCB7IEl0ZW1WaWV3LCBXb3Jrc3BhY2VMZWFmLCBQbHVnaW4sIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBEYXRlVGltZSwgRHVyYXRpb24gfSBmcm9tIFwibHV4b25cIjsgLy8gQXNlZ1x1MDBGQXJhdGUgZGUgdGVuZXIgTHV4b24gZGlzcG9uaWJsZSBwYXJhIG1hbmlwdWxhciBmZWNoYXMgeSBob3Jhc1xuaW1wb3J0IHsgcmVnaXN0cm9UaWVtcG9BUEkgfSBmcm9tIFwiLi4vQVBJL3JlZ2lzdHJvVGllbXBvQVBJXCI7XG5pbXBvcnQgeyBzdGFydGVyQVBJIH0gZnJvbSBcIi4uLy4uL25vdGVMaWZlY3ljbGVNYW5hZ2VyL0FQSS9zdGFydGVyQVBJXCI7XG5cbmV4cG9ydCBjbGFzcyBWaXN0YVJlZ2lzdHJvQWN0aXZvIGV4dGVuZHMgSXRlbVZpZXcge1xuICAgIHBsdWdpbiA6IFBsdWdpbjtcbiAgICBjb25zdHJ1Y3RvcihsZWFmOiBXb3Jrc3BhY2VMZWFmLCBwbHVnaW46IFBsdWdpbikge1xuICAgICAgICBzdXBlcihsZWFmKTtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgICAgIHRoaXMucmVnaXN0cm9UaWVtcG9BUEkgPSBuZXcgcmVnaXN0cm9UaWVtcG9BUEkodGhpcy5wbHVnaW4pO1xuICAgIH1cblxuICAgIGdldFZpZXdUeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJ2aXN0YS1yZWdpc3Ryby1hY3Rpdm9cIjtcbiAgICB9XG5cbiAgICBnZXREaXNwbGF5VGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIFwiUmVnaXN0cm8gQWN0aXZvXCI7XG4gICAgfVxuXG4gICAgZ2V0SWNvbigpIHtcbiAgICAgICAgcmV0dXJuIFwiY2hlY2ttYXJrXCI7IC8vIENhbWJpYSBhIHVuIFx1MDBFRGNvbm8gYWRlY3VhZG8gcGFyYSByZWdpc3Ryb3MgYWN0aXZvc1xuICAgIH1cblxuICAgIGFzeW5jIG9uT3BlbigpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5hY3R1YWxpemFyVmlzdGEoKTsgLy8gQWN0dWFsaXphIGxhIHZpc3RhIGlubWVkaWF0YW1lbnRlIGFsIGFicmlyXG4gICAgXG4gICAgICAgIHRoaXMuaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYWN0dWFsaXphclZpc3RhKCk7IC8vIEFjdHVhbGl6YSBsYSB2aXN0YSBjYWRhIDUgc2VndW5kb3NcbiAgICAgICAgfSwgNTAwMCk7XG4gICAgfVxuICAgIFxuICAgIG9uQ2xvc2UoKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbElkKTsgLy8gTGltcGlhIGVsIGludGVydmFsbyBhbCBjZXJyYXIgbGEgdmlzdGFcbiAgICB9XG5cblxuICAgIGFzeW5jIGFjdHVhbGl6YXJWaXN0YSgpIHtcbiAgICAgICAgLy8gMS4gR3VhcmRhciBsYSBwb3NpY2lcdTAwRjNuIGRlIHNjcm9sbCBhY3R1YWwgZGVsIGNvbnRlbmVkb3IgZGUgbGEgdGFibGEsIHNpIGV4aXN0ZS5cbiAgICAgICAgbGV0IHNjcm9sbFRvcCA9IDA7XG4gICAgICAgIGxldCBzY3JvbGxMZWZ0ID0gMDtcbiAgICAgICAgY29uc3Qgb2xkVGFibGVXcmFwcGVyID0gdGhpcy5jb250YWluZXJFbC5xdWVyeVNlbGVjdG9yKFwiLnRhYmxlLXdyYXBwZXJcIik7XG4gICAgICAgIGlmIChvbGRUYWJsZVdyYXBwZXIpIHtcbiAgICAgICAgICAgIHNjcm9sbFRvcCA9IG9sZFRhYmxlV3JhcHBlci5zY3JvbGxUb3A7XG4gICAgICAgICAgICBzY3JvbGxMZWZ0ID0gb2xkVGFibGVXcmFwcGVyLnNjcm9sbExlZnQ7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gMi4gVmFjaWFyIGVsIGNvbnRlbmVkb3IgcHJpbmNpcGFsIHkgY29uZmlndXJhciBsYSBjbGFzZSBiYXNlLlxuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmVtcHR5KCk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuY2xhc3NMaXN0LmFkZChcInJlZ2lzdHJvLXRpZW1wby1jb250YWluZXJcIik7XG4gICAgXG4gICAgICAgIGNvbnN0IGZvbGRlciA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9SZWdpc3Ryb1RpZW1wbztcbiAgICAgICAgY29uc3QgZmlsZXMgPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpLmZpbHRlcihmaWxlID0+IGZpbGUucGF0aC5pbmNsdWRlcyhmb2xkZXIpKTtcbiAgICAgICAgbGV0IHJlZ2lzdHJvc0FjdGl2b3MgPSBbXTtcbiAgICBcbiAgICAgICAgLy8gQnVzY2FyIHJlZ2lzdHJvcyBhY3Rpdm9zIChlc3RhZG8gXHVEODNEXHVERkUyKVxuICAgICAgICBmb3IgKGxldCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgICAgICAgICBsZXQgbWV0YWRhdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk/LmZyb250bWF0dGVyO1xuICAgICAgICAgICAgaWYgKG1ldGFkYXRhPy5lc3RhZG8gPT09IFwiXHVEODNEXHVERkUyXCIpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVnaXN0cm9BY3Rpdm8gPSB7IGZpbGUgfTtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHJlZ2lzdHJvQWN0aXZvLCBtZXRhZGF0YSk7XG4gICAgICAgICAgICAgICAgcmVnaXN0cm9zQWN0aXZvcy5wdXNoKHJlZ2lzdHJvQWN0aXZvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIFxuICAgICAgICBpZiAocmVnaXN0cm9zQWN0aXZvcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIC8vIENvbnRlbmVkb3IgcGFyYSBlbCBtZW5zYWplIHkgZWwgYm90XHUwMEYzbiBzaSBubyBoYXkgcmVnaXN0cm9zIGFjdGl2b3MuXG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlQ29udGFpbmVyID0gdGhpcy5jb250YWluZXJFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdtZXNzYWdlLWNvbnRhaW5lcicgfSk7XG4gICAgICAgICAgICBtZXNzYWdlQ29udGFpbmVyLmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnTm8gaGF5IG5pbmdcdTAwRkFuIHJlZ2lzdHJvIGRlIHRpZW1wbyBlamVjdXRcdTAwRTFuZG9zZS4nIH0pO1xuICAgIFxuICAgICAgICAgICAgY29uc3QgYm90b25DcmVhciA9IG1lc3NhZ2VDb250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgY2xzOiAncmVnaXN0cm8tdGllbXBvLWJ0bicgfSk7XG4gICAgICAgICAgICBib3RvbkNyZWFyLnRleHRDb250ZW50ID0gJysgUmVnaXN0cm8gVGllbXBvJztcbiAgICAgICAgICAgIGJvdG9uQ3JlYXIub25jbGljayA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydGVyQVBJbnN0YW5jZSA9IG5ldyBzdGFydGVyQVBJKHRoaXMucGx1Z2luKTtcbiAgICAgICAgICAgICAgICBhd2FpdCBzdGFydGVyQVBJbnN0YW5jZS5jcmVhdGVOb3RlKFwiUmVnaXN0cm9UaWVtcG9cIik7XG4gICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbC5hcHBlbmRDaGlsZChtZXNzYWdlQ29udGFpbmVyKTtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAnc2VwYXJhZG9yJyB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChyZWdpc3Ryb3NBY3Rpdm9zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHJlZ2lzdHJvRW5FamVjdWNpb24gPSByZWdpc3Ryb3NBY3Rpdm9zWzBdO1xuICAgIFxuICAgICAgICAgICAgY29uc3QgYWN0aXZlQ29udGFpbmVyID0gdGhpcy5jb250YWluZXJFbC5jcmVhdGVFbChcImRpdlwiLCB7IGNsczogXCJhY3RpdmUtdGltZS1jb250YWluZXJcIiB9KTtcbiAgICBcbiAgICAgICAgICAgIC8vIFRcdTAwRUR0dWxvXG4gICAgICAgICAgICBhY3RpdmVDb250YWluZXIuY3JlYXRlRWwoXCJoNFwiLCB7IHRleHQ6IFwiUmVnaXN0cm8gZGUgVGllbXBvIGVuIEVqZWN1Y2lcdTAwRjNuXCIsIGNsczogXCJyZWdpc3Ryby10aWVtcG8tdGl0dWxvXCIgfSk7XG4gICAgXG4gICAgICAgICAgICBjb25zdCBhbGlhc0NvbnRhaW5lciA9IGFjdGl2ZUNvbnRhaW5lci5jcmVhdGVFbChcInBcIiwgeyBjbHM6IFwicmVnaXN0cm8tYWxpYXNcIiB9KTtcbiAgICAgICAgICAgIGNvbnN0IGFsaWFzVGV4dCA9IHJlZ2lzdHJvRW5FamVjdWNpb24uYWxpYXNlcyAmJiByZWdpc3Ryb0VuRWplY3VjaW9uLmFsaWFzZXNbMV1cbiAgICAgICAgICAgICAgPyByZWdpc3Ryb0VuRWplY3VjaW9uLmFsaWFzZXNbMV1cbiAgICAgICAgICAgICAgOiByZWdpc3Ryb0VuRWplY3VjaW9uLmFsaWFzZXMgJiYgcmVnaXN0cm9FbkVqZWN1Y2lvbi5hbGlhc2VzWzBdXG4gICAgICAgICAgICAgICAgICA/IHJlZ2lzdHJvRW5FamVjdWNpb24uYWxpYXNlc1swXVxuICAgICAgICAgICAgICAgICAgOiBcIlNpbiBhbGlhc1wiO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDcmVhciB1biBzcGFuIHBhcmEgXCJBbGlhczpcIiB5IGVsIGVubGFjZSBwYXJhIGVsIHRleHRvIGRlbCBhbGlhc1xuICAgICAgICAgICAgY29uc3QgYWxpYXNMYWJlbCA9IGFsaWFzQ29udGFpbmVyLmNyZWF0ZUVsKFwic3Ryb25nXCIsIHsgdGV4dDogXCJBbGlhczogXCIgfSk7XG4gICAgICAgICAgICBjb25zdCBhbGlhc0xpbmsgPSBhbGlhc0NvbnRhaW5lci5jcmVhdGVFbChcImFcIiwge1xuICAgICAgICAgICAgICB0ZXh0OiBhbGlhc1RleHQsXG4gICAgICAgICAgICAgIGNsczogXCJhbGlhcy1saW5rXCIsXG4gICAgICAgICAgICAgIGhyZWY6IFwiI1wiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQWdyZWdhciBlbCBldmVudG8gZGUgY2xpYyBwYXJhIGFicmlyIGxhIG5vdGEgZW4gdW5hIG51ZXZhIHZlbnRhbmFcbiAgICAgICAgICAgIGFsaWFzTGluay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIGlmIChyZWdpc3Ryb0VuRWplY3VjaW9uLmZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgIC8vIEFicmlyIGVuIHVuYSBudWV2YSBob2phXG4gICAgICAgICAgICAgICAgYXdhaXQgYXBwLndvcmtzcGFjZS5nZXRMZWFmKCdzcGxpdCcpLm9wZW5GaWxlKHJlZ2lzdHJvRW5FamVjdWNpb24uZmlsZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBEZXNjcmlwY2lcdTAwRjNuIChWaXNpYmxlIGVuIGxhIFZpc3RhKVxuICAgICAgICAgICAgY29uc3QgZGVzY3JpcGNpb25Db250YWluZXIgPSBhY3RpdmVDb250YWluZXIuY3JlYXRlRWwoXCJwXCIsIHsgY2xzOiBcInJlZ2lzdHJvLWRlc2NyaXBjaW9uXCIgfSk7XG4gICAgICAgICAgICBkZXNjcmlwY2lvbkNvbnRhaW5lci5pbm5lckhUTUwgPSBgPHN0cm9uZz5EZXNjcmlwY2lcdTAwRjNuOjwvc3Ryb25nPiAke3JlZ2lzdHJvRW5FamVjdWNpb24uZGVzY3JpcGNpb24gfHwgXCJTaW4gZGVzY3JpcGNpXHUwMEYzblwifWA7XG4gICAgXG4gICAgICAgICAgICAvLyBUaWVtcG8gZW4gZWplY3VjaVx1MDBGM25cbiAgICAgICAgICAgIC8vIFRpZW1wbyBlbiBlamVjdWNpXHUwMEYzbiBjb24gXHUwMEVEY29ubyBwYXJhIGVkaXRhciBob3JhIGRlIGluaWNpb1xuICAgICAgICAgICAgY29uc3QgdGllbXBvQ29udGFpbmVyID0gYWN0aXZlQ29udGFpbmVyLmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiBcInRpZW1wby1jb250YWluZXJcIiB9KTtcbiAgICAgICAgICAgIGNvbnN0IHRpZW1wb0VqZWN1Y2lvbiA9IHRpZW1wb0NvbnRhaW5lci5jcmVhdGVFbChcInBcIiwgeyBjbHM6IFwidGllbXBvLWVqZWN1Y2lvblwiLCB0ZXh0OiBcIlRpZW1wbyB0cmFuc2N1cnJpZG86IENhbGN1bGFuZG8uLi5cIiB9KTtcbiAgICAgICAgICAgIHRoaXMuYWN0dWFsaXphclRpZW1wb0VuRWplY3VjaW9uKHRpZW1wb0VqZWN1Y2lvbiwgcmVnaXN0cm9FbkVqZWN1Y2lvbi5ob3JhSW5pY2lvKTtcblxuICAgICAgICAgICAgLy8gXHUwMENEY29ubyBwYXJhIGVkaXRhciBsYSBob3JhIGRlIGluaWNpb1xuICAgICAgICAgICAgY29uc3QgZWRpdFRpbWVJY29uID0gdGllbXBvQ29udGFpbmVyLmNyZWF0ZUVsKFwic3BhblwiLCB7IFxuICAgICAgICAgICAgICAgIGNsczogXCJlZGl0LXRpbWUtaWNvblwiLCBcbiAgICAgICAgICAgICAgICBhdHRyOiB7IFxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1sYWJlbCc6ICdFZGl0YXIgaG9yYSBkZSBpbmljaW8nLFxuICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiAnRWRpdGFyIGhvcmEgZGUgaW5pY2lvJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZWRpdFRpbWVJY29uLmlubmVySFRNTCA9IFwiXHUyM0YxXHVGRTBGXCI7IC8vIFx1MDBDRGNvbm8gZGUgcmVsb2pcbiAgICAgICAgICAgIGVkaXRUaW1lSWNvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubW9zdHJhclNlbGVjdG9ySG9yYUluaWNpbyhyZWdpc3Ryb0VuRWplY3VjaW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgIFxuICAgICAgICAgICAgLy8gQ29udGVuZWRvciBkZSBib3RvbmVzIGFsaW5lYWRvc1xuICAgICAgICAgICAgY29uc3QgYm90b25lc0NvbnRhaW5lciA9IGFjdGl2ZUNvbnRhaW5lci5jcmVhdGVFbChcImRpdlwiLCB7IGNsczogXCJyZWdpc3Ryby1ib3RvbmVzLWNvbnRhaW5lclwiIH0pO1xuICAgIFxuICAgICAgICAgICAgLy8gQm90XHUwMEYzbiBwYXJhIGNhbWJpYXIgbGEgZGVzY3JpcGNpXHUwMEYzblxuICAgICAgICAgICAgY29uc3QgY2hhbmdlRGVzY0J1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgICAgICBjaGFuZ2VEZXNjQnV0dG9uLmlubmVySFRNTCA9IFwiXHUyNzBGXHVGRTBGIDxzcGFuIGNsYXNzPSdidXR0b24tdGV4dCc+ICBEZXNjcmlwY2lcdTAwRjNuPC9zcGFuPlwiO1xuICAgICAgICAgICAgY2hhbmdlRGVzY0J1dHRvbi5jbGFzc0xpc3QuYWRkKFwiY2hhbmdlLWRlc2MtYnRuXCIpO1xuICAgICAgICAgICAgY2hhbmdlRGVzY0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG51ZXZhRGVzY3JpcGNpb24gPSBhd2FpdCB0aGlzLm1vc3RyYXJQcm9tcHQoXCJOdWV2YSBEZXNjcmlwY2lcdTAwRjNuOlwiLCByZWdpc3Ryb0VuRWplY3VjaW9uLmRlc2NyaXBjaW9uIHx8IFwiXCIpO1xuICAgICAgICAgICAgICAgIGlmIChudWV2YURlc2NyaXBjaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGUgPSByZWdpc3Ryb0VuRWplY3VjaW9uLmZpbGU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZmlsZSkgcmV0dXJuO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlQ29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZmlsZSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmcm9udG1hdHRlciA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpPy5mcm9udG1hdHRlciB8fCB7fTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZnJvbnRtYXR0ZXIuZGVzY3JpcGNpb24gPSBudWV2YURlc2NyaXBjaW9uO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdDb250ZW50ID0gdGhpcy5yZWVzY3JpYmlyRnJvbnRtYXR0ZXIoZmlsZUNvbnRlbnQsIGZyb250bWF0dGVyKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQubW9kaWZ5KGZpbGUsIG5ld0NvbnRlbnQpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBBY3R1YWxpemFyIGxhIHZpc3RhIHBhcmEgcmVmbGVqYXIgZWwgY2FtYmlvXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0dWFsaXphclZpc3RhKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgXG4gICAgICAgICAgICAvLyBCb3RcdTAwRjNuIHBhcmEgZGV0ZW5lciBlbCByZWdpc3Ryb1xuICAgICAgICAgICAgY29uc3Qgc3RvcEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgICAgICBzdG9wQnV0dG9uLmlubmVySFRNTCA9IFwiXHUyNzBCXHVEODNDXHVERkZDIDxzcGFuIGNsYXNzPSdidXR0b24tdGV4dCc+IERldGVuZXIgUmVnaXN0cm88L3NwYW4+XCI7XG4gICAgICAgICAgICBzdG9wQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJzdG9wLXRpbWUtYnRuXCIpO1xuICAgICAgICAgICAgc3RvcEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQm90XHUwMEYzbiAnQ2VycmFyIFRhcmVhJyBwcmVzaW9uYWRvLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWdpc3Ryb0VuRWplY3VjaW9uLmZpbGUgfHwgIShyZWdpc3Ryb0VuRWplY3VjaW9uLmZpbGUgaW5zdGFuY2VvZiBURmlsZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJObyBzZSBlbmNvbnRyXHUwMEYzIGVsIGFyY2hpdm8gZGVsIHJlZ2lzdHJvIGVuIGVqZWN1Y2lcdTAwRjNuLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnJlZ2lzdHJvVGllbXBvQVBJLmNlcnJhclJlZ2lzdHJvKHJlZ2lzdHJvRW5FamVjdWNpb24uZmlsZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmVnaXN0cm8gY2VycmFkbyBjb3JyZWN0YW1lbnRlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3R1YWxpemFyVmlzdGEoKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWwgY2VycmFyIGxhIHRhcmVhOlwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgXG4gICAgICAgICAgICAvLyBBZ3JlZ2FyIGJvdG9uZXMgYWwgY29udGVuZWRvclxuICAgICAgICAgICAgYm90b25lc0NvbnRhaW5lci5hcHBlbmRDaGlsZChjaGFuZ2VEZXNjQnV0dG9uKTtcbiAgICAgICAgICAgIGJvdG9uZXNDb250YWluZXIuYXBwZW5kQ2hpbGQoc3RvcEJ1dHRvbik7XG4gICAgXG4gICAgICAgICAgICBhY3RpdmVDb250YWluZXIuYXBwZW5kQ2hpbGQoYm90b25lc0NvbnRhaW5lcik7XG4gICAgICAgICAgICBhY3RpdmVDb250YWluZXIuYXBwZW5kQ2hpbGQoYWxpYXNDb250YWluZXIpO1xuICAgICAgICAgICAgYWN0aXZlQ29udGFpbmVyLmFwcGVuZENoaWxkKGRlc2NyaXBjaW9uQ29udGFpbmVyKTtcbiAgICAgICAgICAgIGFjdGl2ZUNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aWVtcG9Db250YWluZXIpO1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbC5hcHBlbmRDaGlsZChhY3RpdmVDb250YWluZXIpO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8vIE1vc3RyYXIgcmVnaXN0cm9zIGZpbmFsaXphZG9zXG4gICAgICAgIGxldCByZWdpc3Ryb3NGaW5hbGl6YWRvcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgICAgICAgICBsZXQgbWV0YWRhdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk/LmZyb250bWF0dGVyO1xuICAgICAgICAgICAgaWYgKG1ldGFkYXRhPy5lc3RhZG8gPT09IFwiXHVEODNEXHVERDM1XCIpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVnaXN0cm9GaW5hbGl6YWRvID0geyBmaWxlIH07XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZWdpc3Ryb0ZpbmFsaXphZG8sIG1ldGFkYXRhKTtcbiAgICAgICAgICAgICAgICByZWdpc3Ryb3NGaW5hbGl6YWRvcy5wdXNoKHJlZ2lzdHJvRmluYWxpemFkbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgcmVnaXN0cm9zRmluYWxpemFkb3Muc29ydCgoYSwgYikgPT4gYi5pZCAtIGEuaWQpO1xuICAgICAgICBsZXQgdG9wNVJlZ2lzdHJvc0FjdGl2b3MgPSByZWdpc3Ryb3NGaW5hbGl6YWRvcy5zbGljZSgwLCAxNSk7XG4gICAgXG4gICAgICAgIGlmICh0b3A1UmVnaXN0cm9zQWN0aXZvcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCB0YWJsZVdyYXBwZXIgPSB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiBcInRhYmxlLXdyYXBwZXJcIiB9KTtcbiAgICAgICAgICAgIGNvbnN0IHRhYmxlID0gdGFibGVXcmFwcGVyLmNyZWF0ZUVsKFwidGFibGVcIiwgeyBjbHM6IFwic3R5bGVkLXRhYmxlXCIgfSk7XG4gICAgICAgICAgICBjb25zdCBoZWFkZXIgPSB0YWJsZS5jcmVhdGVFbChcInRyXCIpO1xuICAgICAgICAgICAgW1wiQWxpYXNcIiwgXCJEZXNjcmlwY2lcdTAwRjNuXCIsIFwiUmV0b21hclwiXS5mb3JFYWNoKHRleHQgPT4gaGVhZGVyLmNyZWF0ZUVsKFwidGhcIiwgeyB0ZXh0OiB0ZXh0IH0pKTtcbiAgICBcbiAgICAgICAgICAgIHRvcDVSZWdpc3Ryb3NBY3Rpdm9zLmZvckVhY2gocmVnaXN0cm8gPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJvdyA9IHRhYmxlLmNyZWF0ZUVsKFwidHJcIik7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gQWxpYXMgY29uIGVubGFjZVxuICAgICAgICAgICAgICAgIGNvbnN0IGFsaWFzQ2VsbCA9IHJvdy5jcmVhdGVFbChcInRkXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFsaWFzVGV4dCA9IHJlZ2lzdHJvLmFsaWFzZXMgJiYgcmVnaXN0cm8uYWxpYXNlc1sxXVxuICAgICAgICAgICAgICAgICAgICA/IHJlZ2lzdHJvLmFsaWFzZXNbMV1cbiAgICAgICAgICAgICAgICAgICAgOiByZWdpc3Ryby5hbGlhc2VzICYmIHJlZ2lzdHJvLmFsaWFzZXNbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgID8gcmVnaXN0cm8uYWxpYXNlc1swXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBcIlNpbiBhbGlhc1wiO1xuICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IGFsaWFzTGluayA9IGFsaWFzQ2VsbC5jcmVhdGVFbChcImFcIiwge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBhbGlhc1RleHQsXG4gICAgICAgICAgICAgICAgICAgIGNsczogXCJjbGlja2FibGUtYWxpYXNcIixcbiAgICAgICAgICAgICAgICAgICAgaHJlZjogXCIjXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBhbGlhc0xpbmsuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHJlZ2lzdHJvLmZpbGUucGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGFwcC53b3Jrc3BhY2UuZ2V0TGVhZih0cnVlKS5vcGVuRmlsZShmaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgIFxuICAgICAgICAgICAgICAgIHJvdy5jcmVhdGVFbChcInRkXCIsIHsgdGV4dDogcmVnaXN0cm8uZGVzY3JpcGNpb24gfHwgXCJObyBEZWZpbmlkYVwiIH0pO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIEJvdFx1MDBGM24gXCJSZXRvbWFyXCJcbiAgICAgICAgICAgICAgICBjb25zdCBidXR0b25DZWxsID0gcm93LmNyZWF0ZUVsKFwidGRcIik7XG4gICAgICAgICAgICAgICAgY29uc3QgYnV0dG9uID0gdGhpcy5jcmVhdGVCdXR0b25UYWJsZShcIlx1MjNGMVx1RkUwRlwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVnaXN0cm9UaWVtcG9BUEkucmV0b21hclRhcmVhKHJlZ2lzdHJvLmlkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZChcInJldG9tYXItYnRuXCIpO1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIFwiUmV0b21hclwiKTtcbiAgICAgICAgICAgICAgICBidXR0b25DZWxsLmFwcGVuZENoaWxkKGJ1dHRvbik7XG4gICAgICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuYXBwZW5kQ2hpbGQodGFibGVXcmFwcGVyKTtcbiAgICBcbiAgICAgICAgICAgIC8vIDMuIFJlc3RhdXJhciBsYSBwb3NpY2lcdTAwRjNuIGRlIHNjcm9sbCBlbiBlbCBudWV2byBjb250ZW5lZG9yIGRlIHRhYmxhLlxuICAgICAgICAgICAgdGFibGVXcmFwcGVyLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgICAgICAgIHRhYmxlV3JhcHBlci5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRWwoXCJwXCIsIHsgdGV4dDogXCJObyBoYXkgcmVnaXN0cm9zIGZpbmFsaXphZG9zLlwiIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIEZ1bmNpXHUwMEYzbiBwYXJhIGFjdHVhbGl6YXIgZGluXHUwMEUxbWljYW1lbnRlIGVsIHRpZW1wbyBlbiBlamVjdWNpXHUwMEYzblxuICAgICAqL1xuLyoqXG4gKiBGdW5jaVx1MDBGM24gcGFyYSBhY3R1YWxpemFyIGRpblx1MDBFMW1pY2FtZW50ZSBlbCB0aWVtcG8gZW4gZWplY3VjaVx1MDBGM25cbiAqL1xuYWxlcnRhRWplY3V0YWRhMjU6IGJvb2xlYW4gPSBmYWxzZTtcblxuLyoqXG4gKiBGdW5jaVx1MDBGM24gcGFyYSBhY3R1YWxpemFyIGRpblx1MDBFMW1pY2FtZW50ZSBlbCB0aWVtcG8gZW4gZWplY3VjaVx1MDBGM25cbiAqIE1vZGlmaWNhZGEgcGFyYSBzb3BvcnRhciBkXHUwMEVEYXMgY29uIHRpbGRlcyBjb21vIFwiTWlcdTAwRTlyY29sZXNcIiB5IFwiU1x1MDBFMWJhZG9cIlxuICovXG5hY3R1YWxpemFyVGllbXBvRW5FamVjdWNpb24oZWxlbWVudDogSFRNTEVsZW1lbnQsIGhvcmFJbmljaW86IHN0cmluZykge1xuICAgIGNvbnN0IGV4dHJhZXJIb3JhID0gKGZlY2hhU3RyOiBzdHJpbmcpOiBEYXRlIHwgbnVsbCA9PiB7XG4gICAgICAgIC8vIFJlZ2V4IG1vZGlmaWNhZG8gcGFyYSBpZ25vcmFyIGVsIG5vbWJyZSBkZWwgZFx1MDBFRGEgKGNvbiBvIHNpbiB0aWxkZXMpXG4gICAgICAgIC8vIENhcHR1cmEgc29sbyBsYSBmZWNoYSB5IGxhIGhvcmFcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBmZWNoYVN0ci5tYXRjaCgvKFxcZHs0fS1cXGR7Mn0tXFxkezJ9KVxccytcXFMrXFxzKyhcXGR7Mn06XFxkezJ9KS8pO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShgJHttYXRjaFsxXX1UJHttYXRjaFsyXX06MDBgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgY29uc3QgaW5pY2lvID0gZXh0cmFlckhvcmEoaG9yYUluaWNpbyk7XG4gICAgaWYgKCFpbmljaW8pIHtcbiAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IFwiVGllbXBvIHRyYW5zY3VycmlkbzogTm8gZGlzcG9uaWJsZVwiO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY2FsY3VsYXJUaWVtcG8gPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGFob3JhID0gbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3QgZGlmZXJlbmNpYSA9IE1hdGguZmxvb3IoKGFob3JhLmdldFRpbWUoKSAtIGluaWNpby5nZXRUaW1lKCkpIC8gMTAwMCk7XG4gICAgICAgIGNvbnN0IGhvcmFzID0gTWF0aC5mbG9vcihkaWZlcmVuY2lhIC8gMzYwMCk7XG4gICAgICAgIGNvbnN0IG1pbnV0b3MgPSBNYXRoLmZsb29yKChkaWZlcmVuY2lhICUgMzYwMCkgLyA2MCk7XG4gICAgICAgIGNvbnN0IHNlZ3VuZG9zID0gZGlmZXJlbmNpYSAlIDYwO1xuXG4gICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSBgVGllbXBvIHRyYW5zY3VycmlkbzogJHtob3Jhc31oICR7bWludXRvc31tICR7c2VndW5kb3N9c2A7XG5cbiAgICAgICAgLy8gQ3VhbmRvIHNlIGFsY2FuemEgbyBzdXBlcmEgMjUgbWludXRvcyAoMTUwMCBzZWd1bmRvcylcbiAgICAgICAgaWYgKGRpZmVyZW5jaWEgPj0gMTUwMCkge1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGllbXBvLXJvam9cIik7ICAgICAgICAgICAgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJ0aWVtcG8tcm9qb1wiKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBBY3R1YWxpemEgaW5tZWRpYXRhbWVudGUgeSBsdWVnbyBjYWRhIHNlZ3VuZG9cbiAgICBjYWxjdWxhclRpZW1wbygpO1xuICAgIHNldEludGVydmFsKGNhbGN1bGFyVGllbXBvLCAxMDAwKTtcbn1cbiAgICBcbi8qKlxuICogRnVuY2lcdTAwRjNuIHBhcmEgbW9zdHJhciB1biBwcm9tcHQgeSBvYnRlbmVyIHVuIG51ZXZvIHZhbG9yXG4gKi9cbmFzeW5jIG1vc3RyYXJQcm9tcHQobWVuc2FqZTogc3RyaW5nLCB2YWxvckFjdHVhbDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAvLyBDcmVhIGVsIGZvbmRvIG9zY3Vyb1xuICAgICAgY29uc3QgYmFja2Ryb3AgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgYmFja2Ryb3AuY2xhc3NMaXN0LmFkZChcInByb21wdC1tb2RhbC1iYWNrZHJvcFwiKTtcbiAgXG4gICAgICAvLyBDcmVhIGVsIG1vZGFsXG4gICAgICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBtb2RhbC5jbGFzc0xpc3QuYWRkKFwicHJvbXB0LW1vZGFsXCIpO1xuXG4gICAgICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgICAgICBsYWJlbC50ZXh0Q29udGVudCA9IG1lbnNhamU7XG5cbiAgICAgICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIGlucHV0LnR5cGUgPSBcInRleHRcIjtcbiAgICAgICAgaW5wdXQudmFsdWUgPSB2YWxvckFjdHVhbDsgLy8gUHJlbGxlbmFyIGNvbiBsYSBkZXNjcmlwY2lcdTAwRjNuIGFjdHVhbFxuXG4gICAgICAgIGNvbnN0IGJ1dHRvbkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cbiAgICAgICAgY29uc3QgYWNlcHRhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIGFjZXB0YXIudGV4dENvbnRlbnQgPSBcIkFjZXB0YXJcIjtcbiAgICAgICAgYWNlcHRhci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZShpbnB1dC52YWx1ZS50cmltKCkgfHwgbnVsbCk7IC8vIFJldG9ybmEgZWwgdGV4dG8gZXNjcml0b1xuICAgICAgICAgICAgbW9kYWwucmVtb3ZlKCk7XG4gICAgICAgICAgICBiYWNrZHJvcC5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgY2FuY2VsYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICBjYW5jZWxhci50ZXh0Q29udGVudCA9IFwiQ2FuY2VsYXJcIjtcbiAgICAgICAgY2FuY2VsYXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUobnVsbCk7IC8vIENhbmNlbGFyIHNpbiBjYW1iaW9zXG4gICAgICAgICAgICBtb2RhbC5yZW1vdmUoKTtcbiAgICAgICAgICAgIGJhY2tkcm9wLnJlbW92ZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBQZXJtaXRpciBjb25maXJtYXIgY29uIFwiRW50ZXJcIlxuICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgYWNlcHRhci5jbGljaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBidXR0b25Db250YWluZXIuYXBwZW5kQ2hpbGQoYWNlcHRhcik7XG4gICAgICAgIGJ1dHRvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChjYW5jZWxhcik7XG4gICAgICAgIG1vZGFsLmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgICAgICAgbW9kYWwuYXBwZW5kQ2hpbGQoaW5wdXQpO1xuICAgICAgICBtb2RhbC5hcHBlbmRDaGlsZChidXR0b25Db250YWluZXIpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGJhY2tkcm9wKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChtb2RhbCk7XG5cbiAgICAgICAgaW5wdXQuZm9jdXMoKTsgLy8gRW5mb2NhciBlbCBpbnB1dCBhdXRvbVx1MDBFMXRpY2FtZW50ZVxuICAgIH0pO1xufVxuXG4gICAgY3JlYXRlQnV0dG9uVGFibGUoYnV0dG9uVGV4dCwgb25DbGlja0NhbGxiYWNrKSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgYnV0dG9uLnRleHRDb250ZW50ID0gYnV0dG9uVGV4dDtcbiAgICAgICAgYnV0dG9uLnR5cGUgPSAnYnV0dG9uJzsgLy8gQXNlZ1x1MDBGQXJhdGUgZGUgcXVlIG5vIHNlIGVudmlhclx1MDBFMSB1biBmb3JtdWxhcmlvIGFsIGhhY2VyIGNsaWMgZW4gXHUwMEU5bFxuICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgneW91ci1idXR0b24tY2xhc3MnKTsgLy8gQWdyZWdhIHVuYSBjbGFzZSBwYXJhIGVsIGVzdGlsbyBkZWwgYm90XHUwMEYzbiBzaSBlcyBuZWNlc2FyaW9cblxuICAgICAgICAvLyBBXHUwMEYxYWRlIGVsIGV2ZW50byBkZSBjbGljIGFsIGJvdFx1MDBGM25cbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbGlja0NhbGxiYWNrKTtcblxuICAgICAgICByZXR1cm4gYnV0dG9uO1xuICAgIH1cbiAgICBcbi8qKlxuICogUmVlc2NyaWJlIGVsIGZyb250bWF0dGVyIGVuIHVuIGFyY2hpdm8gTWFya2Rvd24sIHByZXNlcnZhbmRvIGxhIGVzdHJ1Y3R1cmEgb3JpZ2luYWwuXG4gKi9cbnJlZXNjcmliaXJGcm9udG1hdHRlcihjb250ZW50OiBzdHJpbmcsIGZyb250bWF0dGVyOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogc3RyaW5nIHtcbiAgICBjb25zdCB5YW1sU3RhcnQgPSBjb250ZW50LmluZGV4T2YoJy0tLScpO1xuICAgIGNvbnN0IHlhbWxFbmQgPSBjb250ZW50LmluZGV4T2YoJy0tLScsIHlhbWxTdGFydCArIDMpO1xuXG4gICAgaWYgKHlhbWxTdGFydCA9PT0gLTEgfHwgeWFtbEVuZCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7IC8vIFNpIG5vIGhheSBmcm9udG1hdHRlciwgbm8gbW9kaWZpY2FyIG5hZGEuXG4gICAgfVxuXG4gICAgLy8gQ29udmVydGlyIGVsIGZyb250bWF0dGVyIGVuIFlBTUwgZm9ybWF0ZWFkbyBjb3JyZWN0YW1lbnRlXG4gICAgbGV0IG51ZXZvRnJvbnRtYXR0ZXIgPSAnLS0tXFxuJztcblxuICAgIGZvciAoY29uc3Qga2V5IGluIGZyb250bWF0dGVyKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZnJvbnRtYXR0ZXJba2V5XTtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIC8vIFNpIGVsIGNhbXBvIGVzIHVuYSBsaXN0YSwgYXNlZ3VyYXJzZSBkZSBxdWUgY2FkYSBlbGVtZW50byBzZSBmb3JtYXRlZSBjb3JyZWN0YW1lbnRlXG4gICAgICAgICAgICBudWV2b0Zyb250bWF0dGVyICs9IGAke2tleX06XFxuYDtcbiAgICAgICAgICAgIHZhbHVlLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSBcInN0cmluZ1wiICYmIGl0ZW0ubWF0Y2goL15cXFtcXFsuKlxcXVxcXSQvKSkge1xuICAgICAgICAgICAgICAgICAgICBudWV2b0Zyb250bWF0dGVyICs9IGAgIC0gXCIke2l0ZW19XCJcXG5gO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG51ZXZvRnJvbnRtYXR0ZXIgKz0gYCAgLSAke0pTT04uc3RyaW5naWZ5KGl0ZW0pfVxcbmA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUubWF0Y2goL15cXFtcXFsuKlxcXVxcXSQvKSkge1xuICAgICAgICAgICAgICAgIG51ZXZvRnJvbnRtYXR0ZXIgKz0gYCR7a2V5fTogXCIke3ZhbHVlfVwiXFxuYDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbnVldm9Gcm9udG1hdHRlciArPSBgJHtrZXl9OiAke0pTT04uc3RyaW5naWZ5KHZhbHVlKX1cXG5gO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbnVldm9Gcm9udG1hdHRlciArPSBgJHtrZXl9OiAke3ZhbHVlfVxcbmA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBudWV2b0Zyb250bWF0dGVyICs9ICctLS1cXG4nO1xuXG4gICAgLy8gT2J0ZW5lciBlbCBjb250ZW5pZG8gcG9zdGVyaW9yIGFsIGZyb250bWF0dGVyXG4gICAgbGV0IGNvbnRlbmlkb1Jlc3RhbnRlID0gY29udGVudC5zbGljZSh5YW1sRW5kICsgMykudHJpbVN0YXJ0KCk7IC8vIEVsaW1pbmFyIHNhbHRvcyBkZSBsXHUwMEVEbmVhIGV4dHJhXG5cbiAgICAvLyBBZ3JlZ2FyIHVuYSBsXHUwMEVEbmVhIGVuIGJsYW5jbyBzb2xvIHNpIGhheSBjb250ZW5pZG8gcmVzdGFudGVcbiAgICByZXR1cm4gbnVldm9Gcm9udG1hdHRlciArIChjb250ZW5pZG9SZXN0YW50ZSA/ICdcXG4nICsgY29udGVuaWRvUmVzdGFudGUgOiAnJyk7XG59XG5cbi8qKlxuICogTXVlc3RyYSB1biBzZWxlY3RvciBkZSBmZWNoYSB5IGhvcmEgcGFyYSBtb2RpZmljYXIgbGEgaG9yYSBkZSBpbmljaW8gZGVsIHJlZ2lzdHJvXG4gKiBWZXJzaVx1MDBGM24gY29ycmVnaWRhIHBhcmEgcG9zaWNpb25hciBjb3JyZWN0YW1lbnRlIGVsIG1vZGFsXG4gKi9cbmFzeW5jIG1vc3RyYXJTZWxlY3RvckhvcmFJbmljaW8ocmVnaXN0cm86IGFueSkge1xuICAgIC8vIEV4dHJhZXIgbGEgZmVjaGEgeSBob3JhIGRlbCBmb3JtYXRvIGFjdHVhbFxuICAgIGxldCBob3JhSW5pY2lvID0gcmVnaXN0cm8uaG9yYUluaWNpbztcbiAgICBsZXQgZmVjaGFIb3JhID0gdGhpcy5leHRyYWVyRmVjaGFIb3JhKGhvcmFJbmljaW8pO1xuICAgIFxuICAgIGlmICghZmVjaGFIb3JhKSB7XG4gICAgICAgIG5ldyBOb3RpY2UoXCJObyBzZSBwdWRvIGV4dHJhZXIgY29ycmVjdGFtZW50ZSBsYSBmZWNoYSB5IGhvcmEgZGUgaW5pY2lvXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIC8vIEZvcm1hdGVhciBwYXJhIGVsIGlucHV0IGRhdGV0aW1lLWxvY2FsXG4gICAgY29uc3QgdmFsb3JJbmljaWFsSW5wdXQgPSBgJHtmZWNoYUhvcmEuZmVjaGF9VCR7ZmVjaGFIb3JhLmhvcmF9YDtcbiAgICBcbiAgICAvLyBDcmVhbW9zIHVuIG92ZXJsYXkgcGFyYSBlbCBmb25kbyBvc2N1cm9cbiAgICBjb25zdCBvdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBvdmVybGF5LmNsYXNzTGlzdC5hZGQoXCJ0aW1lLXNlbGVjdG9yLW92ZXJsYXlcIik7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChvdmVybGF5KTtcbiAgICBcbiAgICAvLyBDcmVhbW9zIGVsIG1vZGFsXG4gICAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIG1vZGFsLmNsYXNzTGlzdC5hZGQoXCJ0aW1lLXNlbGVjdG9yLW1vZGFsXCIpO1xuICAgIFxuICAgIC8vIFRcdTAwRUR0dWxvXG4gICAgY29uc3QgdGl0dWxvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgzXCIpO1xuICAgIHRpdHVsby50ZXh0Q29udGVudCA9IFwiTW9kaWZpY2FyIGhvcmEgZGUgaW5pY2lvXCI7XG4gICAgbW9kYWwuYXBwZW5kQ2hpbGQodGl0dWxvKTtcbiAgICBcbiAgICAvLyBDb250ZW5lZG9yIGRlIGluZm9ybWFjaVx1MDBGM25cbiAgICBjb25zdCBpbmZvQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBpbmZvQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJ0aW1lLXNlbGVjdG9yLWluZm9cIik7XG4gICAgaW5mb0NvbnRhaW5lci5pbm5lckhUTUwgPSBgXG4gICAgICAgIDxwPlJlZ2lzdHJvOiA8c3Ryb25nPiR7cmVnaXN0cm8uYWxpYXNlcz8uWzBdIHx8IFwiU2luIGFsaWFzXCJ9PC9zdHJvbmc+PC9wPlxuICAgICAgICA8cD5Ib3JhIGFjdHVhbDogPHN0cm9uZz4ke2hvcmFJbmljaW99PC9zdHJvbmc+PC9wPlxuICAgIGA7XG4gICAgbW9kYWwuYXBwZW5kQ2hpbGQoaW5mb0NvbnRhaW5lcik7XG4gICAgXG4gICAgLy8gSW5wdXQgcGFyYSBzZWxlY2Npb25hciBudWV2YSBmZWNoYSB5IGhvcmFcbiAgICBjb25zdCBpbnB1dENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgaW5wdXRDb250YWluZXIuY2xhc3NMaXN0LmFkZChcInRpbWUtc2VsZWN0b3ItaW5wdXQtY29udGFpbmVyXCIpO1xuICAgIFxuICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgIGxhYmVsLnRleHRDb250ZW50ID0gXCJOdWV2YSBob3JhIGRlIGluaWNpbzpcIjtcbiAgICBsYWJlbC5odG1sRm9yID0gXCJuZXctc3RhcnQtdGltZVwiO1xuICAgIFxuICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIGlucHV0LnR5cGUgPSBcImRhdGV0aW1lLWxvY2FsXCI7XG4gICAgaW5wdXQuaWQgPSBcIm5ldy1zdGFydC10aW1lXCI7XG4gICAgaW5wdXQudmFsdWUgPSB2YWxvckluaWNpYWxJbnB1dDtcbiAgICBcbiAgICBpbnB1dENvbnRhaW5lci5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgaW5wdXRDb250YWluZXIuYXBwZW5kQ2hpbGQoaW5wdXQpO1xuICAgIG1vZGFsLmFwcGVuZENoaWxkKGlucHV0Q29udGFpbmVyKTtcbiAgICBcbiAgICAvLyBCb3RvbmVzXG4gICAgY29uc3QgYnV0dG9uc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgYnV0dG9uc0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwidGltZS1zZWxlY3Rvci1idXR0b25zXCIpO1xuICAgIFxuICAgIGNvbnN0IGNhbmNlbEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgY2FuY2VsQnV0dG9uLnRleHRDb250ZW50ID0gXCJDYW5jZWxhclwiO1xuICAgIGNhbmNlbEJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwidGltZS1zZWxlY3Rvci1idXR0b25cIiwgXCJjYW5jZWwtYnV0dG9uXCIpO1xuICAgIGNhbmNlbEJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKG1vZGFsKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChvdmVybGF5KTtcbiAgICB9O1xuICAgIFxuICAgIGNvbnN0IHNhdmVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIHNhdmVCdXR0b24udGV4dENvbnRlbnQgPSBcIkd1YXJkYXJcIjtcbiAgICBzYXZlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJ0aW1lLXNlbGVjdG9yLWJ1dHRvblwiLCBcInNhdmUtYnV0dG9uXCIpO1xuICAgIHNhdmVCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgbnVldmFGZWNoYUhvcmEgPSBpbnB1dC52YWx1ZTtcbiAgICAgICAgaWYgKCFudWV2YUZlY2hhSG9yYSkge1xuICAgICAgICAgICAgbmV3IE5vdGljZShcIlBvciBmYXZvciwgc2VsZWNjaW9uZSB1bmEgZmVjaGEgeSBob3JhIHZcdTAwRTFsaWRhXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBDb252ZXJ0aXIgZGUgZm9ybWF0byBJU08gYSBmb3JtYXRvIHBlcnNvbmFsaXphZG8gdXNhZG8gZW4gZWwgcmVnaXN0cm9cbiAgICAgICAgLy8gRm9ybWF0bzogXCJZWVlZLU1NLUREIGRkZGQgSEg6bW1cIlxuICAgICAgICBjb25zdCBmZWNoYSA9IG5ldyBEYXRlKG51ZXZhRmVjaGFIb3JhKTtcbiAgICAgICAgXG4gICAgICAgIC8vIE9idGVuZXIgZWwgbm9tYnJlIGRlbCBkXHUwMEVEYSBkZSBsYSBzZW1hbmEgZW4gZXNwYVx1MDBGMW9sXG4gICAgICAgIGNvbnN0IGRpYXNTZW1hbmEgPSBbXCJEb21pbmdvXCIsIFwiTHVuZXNcIiwgXCJNYXJ0ZXNcIiwgXCJNaVx1MDBFOXJjb2xlc1wiLCBcIkp1ZXZlc1wiLCBcIlZpZXJuZXNcIiwgXCJTXHUwMEUxYmFkb1wiXTtcbiAgICAgICAgY29uc3QgZGlhU2VtYW5hID0gZGlhc1NlbWFuYVtmZWNoYS5nZXREYXkoKV07XG4gICAgICAgIFxuICAgICAgICAvLyBDb25zdHJ1aXIgbGEgY2FkZW5hIGNvbiBlbCBmb3JtYXRvIHJlcXVlcmlkb1xuICAgICAgICBjb25zdCBhXHUwMEYxbyA9IGZlY2hhLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgIGNvbnN0IG1lcyA9IFN0cmluZyhmZWNoYS5nZXRNb250aCgpICsgMSkucGFkU3RhcnQoMiwgJzAnKTtcbiAgICAgICAgY29uc3QgZGlhID0gU3RyaW5nKGZlY2hhLmdldERhdGUoKSkucGFkU3RhcnQoMiwgJzAnKTtcbiAgICAgICAgY29uc3QgaG9yYXMgPSBTdHJpbmcoZmVjaGEuZ2V0SG91cnMoKSkucGFkU3RhcnQoMiwgJzAnKTtcbiAgICAgICAgY29uc3QgbWludXRvcyA9IFN0cmluZyhmZWNoYS5nZXRNaW51dGVzKCkpLnBhZFN0YXJ0KDIsICcwJyk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBudWV2YUhvcmFGb3JtYXRlYWRhID0gYCR7YVx1MDBGMW99LSR7bWVzfS0ke2RpYX0gJHtkaWFTZW1hbmF9ICR7aG9yYXN9OiR7bWludXRvc31gO1xuICAgICAgICBcbiAgICAgICAgLy8gQWN0dWFsaXphciBsYSBob3JhIGRlIGluaWNpbyBlbiBlbCBhcmNoaXZvXG4gICAgICAgIGF3YWl0IHRoaXMuYWN0dWFsaXphckhvcmFJbmljaW8ocmVnaXN0cm8uZmlsZSwgbnVldmFIb3JhRm9ybWF0ZWFkYSk7XG4gICAgICAgIFxuICAgICAgICAvLyBDZXJyYXIgZWwgbW9kYWxcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChtb2RhbCk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQob3ZlcmxheSk7XG4gICAgICAgIFxuICAgICAgICAvLyBSZWZyZXNjYXIgbGEgdmlzdGFcbiAgICAgICAgdGhpcy5hY3R1YWxpemFyVmlzdGEoKTtcbiAgICB9O1xuICAgIFxuICAgIGJ1dHRvbnNDb250YWluZXIuYXBwZW5kQ2hpbGQoY2FuY2VsQnV0dG9uKTtcbiAgICBidXR0b25zQ29udGFpbmVyLmFwcGVuZENoaWxkKHNhdmVCdXR0b24pO1xuICAgIG1vZGFsLmFwcGVuZENoaWxkKGJ1dHRvbnNDb250YWluZXIpO1xuICAgIFxuICAgIC8vIEFcdTAwRjFhZGlyIGVsIG1vZGFsIGFsIERPTVxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobW9kYWwpO1xuICAgIFxuICAgIC8vIENPUlJFR0lETzogWWEgbm8gdHJhdGFtb3MgZGUgY2FsY3VsYXIgbGEgcG9zaWNpXHUwMEYzbiBtYW51YWxtZW50ZVxuICAgIC8vIEVsIG1vZGFsIHNlIGNlbnRyYXJcdTAwRTEgYXV0b21cdTAwRTF0aWNhbWVudGUgY29uIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpXG4gICAgXG4gICAgLy8gRW5mb2NhciBlbCBpbnB1dFxuICAgIGlucHV0LmZvY3VzKCk7XG59XG5cbi8qKlxuICogRXh0cmFlIGxhIGZlY2hhIHkgaG9yYSBkZSB1bmEgY2FkZW5hIGNvbiBmb3JtYXRvIFwiWVlZWS1NTS1ERCBkZGRkIEhIOm1tXCJcbiAqL1xuZXh0cmFlckZlY2hhSG9yYShmZWNoYVN0cjogc3RyaW5nKTogeyBmZWNoYTogc3RyaW5nLCBob3JhOiBzdHJpbmcgfSB8IG51bGwge1xuICAgIC8vIFJlZ2V4IHBhcmEgZXh0cmFlciBsYSBmZWNoYSB5IGxhIGhvcmFcbiAgICBjb25zdCBtYXRjaCA9IGZlY2hhU3RyLm1hdGNoKC8oXFxkezR9LVxcZHsyfS1cXGR7Mn0pXFxzK1xcUytcXHMrKFxcZHsyfTpcXGR7Mn0pLyk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmZWNoYTogbWF0Y2hbMV0sXG4gICAgICAgICAgICBob3JhOiBtYXRjaFsyXVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBBY3R1YWxpemEgbGEgaG9yYSBkZSBpbmljaW8gZW4gZWwgZnJvbnRtYXR0ZXIgZGVsIGFyY2hpdm9cbiAqL1xuYXN5bmMgYWN0dWFsaXphckhvcmFJbmljaW8oZmlsZTogVEZpbGUsIG51ZXZhSG9yYUluaWNpbzogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gTGVlciBlbCBjb250ZW5pZG8gYWN0dWFsIGRlbCBhcmNoaXZvXG4gICAgICAgIGNvbnN0IGNvbnRlbmlkbyA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZmlsZSk7XG4gICAgICAgIFxuICAgICAgICAvLyBCdXNjYXIgeSByZWVtcGxhemFyIGxhIGxcdTAwRURuZWEgaG9yYUluaWNpbyBlbiBlbCBmcm9udG1hdHRlclxuICAgICAgICBjb25zdCBudWV2b0NvbnRlbmlkbyA9IGNvbnRlbmlkby5yZXBsYWNlKFxuICAgICAgICAgICAgL2hvcmFJbmljaW86XFxzKi4qKD89XFxuKS8sXG4gICAgICAgICAgICBgaG9yYUluaWNpbzogJHtudWV2YUhvcmFJbmljaW99YFxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgLy8gR3VhcmRhciBlbCBhcmNoaXZvIG1vZGlmaWNhZG9cbiAgICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQubW9kaWZ5KGZpbGUsIG51ZXZvQ29udGVuaWRvKTtcbiAgICAgICAgXG4gICAgICAgIG5ldyBOb3RpY2UoXCJIb3JhIGRlIGluaWNpbyBhY3R1YWxpemFkYSBjb3JyZWN0YW1lbnRlXCIpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhbCBhY3R1YWxpemFyIGxhIGhvcmEgZGUgaW5pY2lvOlwiLCBlcnJvcik7XG4gICAgICAgIG5ldyBOb3RpY2UoXCJFcnJvciBhbCBhY3R1YWxpemFyIGxhIGhvcmEgZGUgaW5pY2lvXCIpO1xuICAgIH1cbn1cbiAgICBcbn1cbiIsICIvKiBGaWxlIExvY2F0aW9uOiAgc3JjL21vZHVsZXMvbW9kdWxvR1REL2luZGV4LnRzICovXG5pbXBvcnQgeyBQbHVnaW4sIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgcmVnaXN0ZXJDb21tYW5kcywgZGVhY3RpdmF0ZUNvbW1hbmRzIH0gZnJvbSBcIi4vY29tbWFuZHNcIjtcblxuZXhwb3J0IGNsYXNzIE1vZHVsb0dURCB7XG4gICAgcGx1Z2luOiBQbHVnaW47XG4gICAgbW9kdWxvR1REOiBNb2R1bG9HVEQgfCBudWxsID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgIH1cblxuICAgIGFjdGl2YXRlKCkge1xuICAgICAgICBpZiAodGhpcy5tb2R1bG9HVEQpIHJldHVybjsgLy8gU2kgeWEgZXN0XHUwMEUxIGFjdGl2bywgbm8gaGFjZXIgbmFkYVxuXG4gICAgICAgIHJlZ2lzdGVyQ29tbWFuZHModGhpcy5wbHVnaW4pO1xuICAgIH1cblxuICAgIGRlYWN0aXZhdGUoKSB7XG4gICAgICAgIGlmICghdGhpcy5tb2R1bG9HVEQpIHJldHVybjsgLy8gU2kgeWEgZXN0XHUwMEUxIGRlc2FjdGl2YWRvLCBubyBoYWNlciBuYWRhXG4gICAgICAgIGRlYWN0aXZhdGVDb21tYW5kcyh0aGlzLnBsdWdpbik7XG4gICAgICAgIHRoaXMubW9kdWxvR1REID0gbnVsbDtcbiAgICB9XG5cblxufSIsICIvLyBzcmMvbW9kdWxlcy9tb2R1bG9HVEQvY29tbWFuZHMudHNcblxuaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgaW5ncmVzYXJCYW5kZWphRW50cmFkYSB9IGZyb20gXCIuL2luYm94XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckNvbW1hbmRzKHBsdWdpbjogUGx1Z2luKTogdm9pZCB7XG4gICAgLy8gQ29tYW5kbyBwYXJhIGluZ3Jlc2FyIGEgbGEgYmFuZGVqYSBkZSBlbnRyYWRhXG4gICAgY29uc3QgaW5ib3hDb21tYW5kID0gcGx1Z2luLmFkZENvbW1hbmQoe1xuICAgICAgICBpZDogXCJpbmdyZXNhci1pbmJveFwiLFxuICAgICAgICBuYW1lOiBcIkluZ3Jlc2FyIEJhbmRlamEgZGUgRW50cmFkYSAtPiBJbmJveFwiLFxuICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgaW5ncmVzYXJCYW5kZWphRW50cmFkYShwbHVnaW4pO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBSZWdpc3RyYXIgbG9zIElEcyBkZSBsb3MgY29tYW5kb3MgcGFyYSBwb2RlciBkZXNhY3RpdmFybG9zIGRlc3B1XHUwMEU5c1xuICAgIHBsdWdpbi5yZWdpc3RlcmVkQ29tbWFuZElkc0dURCA9IHBsdWdpbi5yZWdpc3RlcmVkQ29tbWFuZElkc0dURCB8fCBbXTtcbiAgICBwbHVnaW4ucmVnaXN0ZXJlZENvbW1hbmRJZHNHVEQucHVzaChpbmJveENvbW1hbmQuaWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVhY3RpdmF0ZUNvbW1hbmRzKHBsdWdpbjogUGx1Z2luKTogdm9pZCB7XG4gICAgaWYgKCFwbHVnaW4ucmVnaXN0ZXJlZENvbW1hbmRJZHNHVEQpIHJldHVybjtcbiAgICBcbiAgICBwbHVnaW4ucmVnaXN0ZXJlZENvbW1hbmRJZHNHVEQuZm9yRWFjaChjb21tYW5kSWQgPT4ge1xuICAgICAgICBjb25zdCBjb21tYW5kID0gcGx1Z2luLmFwcC5jb21tYW5kcy5jb21tYW5kc1tjb21tYW5kSWRdO1xuICAgICAgICBpZiAoY29tbWFuZCkge1xuICAgICAgICAgICAgY29tbWFuZC5jYWxsYmFjayA9ICgpID0+IG5ldyBOb3RpY2UoXCJFc3RlIGNvbWFuZG8gaGEgc2lkbyBkZXNhY3RpdmFkby5cIik7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICAvLyBMaW1waWFyIGVsIGFycmF5IGRlIGNvbWFuZG9zIHJlZ2lzdHJhZG9zXG4gICAgcGx1Z2luLnJlZ2lzdGVyZWRDb21tYW5kSWRzR1REID0gW107XG59IiwgImltcG9ydCB7IE5vdGljZSwgUGx1Z2luLCBURmlsZSwgTWFya2Rvd25WaWV3LCBBbGVydCB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSAnbHV4b24nO1xuaW1wb3J0IHsgQmFuZGVqYURlRW50cmFkYU1vZGFsfSBmcm9tICcuLi9tb2RhbGVzL2luYm94TW9kYWwnXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbmdyZXNhckJhbmRlamFFbnRyYWRhKHBsdWdpbjogUGx1Z2luKTogdm9pZCB7XG4gICAgbGV0IGluYm94UGF0aCA9IGAke3BsdWdpbi5zZXR0aW5ncy5maWxlX0luYm94fS5tZGA7XG4gICAgbGV0IGluYm94RmlsZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoaW5ib3hQYXRoKTtcbiAgICBjb25zdCBhY3RpdmVGaWxlID0gYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG5cbiAgICBpZiAoIWFjdGl2ZUZpbGUpIHtcbiAgICAgICAgbmV3IE5vdGljZShcIk5vIGhheSBhcmNoaXZvIGFjdGl2b1wiKTtcbiAgICAgICAgcmV0dXJuOyAvLyBBc2VndXJhIHF1ZSBoYXkgdW4gYXJjaGl2byBhY3Rpdm8gYW50ZXMgZGUgY29udGludWFyXG4gICAgfVxuICAgIGxldCBpbmJveDtcblxuXG4gICAgLy8gVXNvIGRlbCBNb2RhbFxuICAgIGNvbnN0IG1vZGFsID0gbmV3IEJhbmRlamFEZUVudHJhZGFNb2RhbChwbHVnaW4uYXBwKTtcbiAgICBtb2RhbC5vcGVuKCk7XG5cbiAgICBjb25zdCB7IHRleHQsIHNhdmVJbkN1cnJlbnQgfSA9IGF3YWl0IG1vZGFsLndhaXRGb3JJbnB1dCgpO1xuICAgIFxuICAgIGlmICh0ZXh0Lmxlbmd0aCA8IDMpIHtcbiAgICAgICAgbmV3IE5vdGljZShcIkluYm94IGNhbmNlbGFkYVwiKTtcbiAgICAgICAgcmV0dXJuOyAvLyBUZXJtaW5hIGxhIGVqZWN1Y2lcdTAwRjNuIGRlIGxhIGZ1bmNpXHUwMEYzbiBhcXVcdTAwRUQuXG4gICAgfVxuICAgIGxldCBkZXN0aW5vID0gc2F2ZUluQ3VycmVudCA/IGFjdGl2ZUZpbGUgOiBpbmJveEZpbGU7XG4gICAgbGV0IGhveSA9IERhdGVUaW1lLm5vdygpLnRvRm9ybWF0KCd5eXl5LU1NLWRkJyk7XG4gICAgbGV0IGhvcmEgPSBEYXRlVGltZS5ub3coKS50b0Zvcm1hdCgnSEg6bW0nKTtcbiAgICBpbmJveCA9IGAtIFsgXSBcdUQ4M0VcdURERTAgJHt0ZXh0fSAjaW5ib3ggW2NyZWF0ZWQ6OiAke2hveX1dIGEgbGFzICR7aG9yYX1cXG5gO1xuXG4gICAgXG4gICAgLy8gTFx1MDBGM2dpY2EgcGFyYSBlc2NyaWJpciBlbiBlbCBhcmNoaXZvXG4gICAgaWYgKGRlc3Rpbm8gaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICBpZiAoZGVzdGlubyA9PT0gaW5ib3hGaWxlKSB7XG4gICAgICAgICAgICAvLyBNYW5lamFtb3MgbGEgcHJvbWVzYSBjb24gLnRoZW4oKSB5IC5jYXRjaCgpIHBhcmEgZWwgbWFuZWpvIGRlIGVycm9yZXNcbiAgICAgICAgICAgIGluc2VydEF0U3RhcnRVc2luZ1Byb2Nlc3MoaW5ib3gsIGRlc3Rpbm8pXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBTaSBsYSBwcm9tZXNhIHNlIHJlc3VlbHZlIHNpbiBlcnJvcmVzLCBtdWVzdHJhIHVuIE5vdGljZVxuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiQmFuZGVqYSBkZSBlbnRyYWRhIGFjdHVhbGl6YWRhIGNvbiBcdTAwRTl4aXRvLlwiKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAvLyBTaSBvY3VycmUgdW4gZXJyb3IsIG11ZXN0cmEgdW4gQWxlcnRcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIkVycm9yIGFsIGFncmVnYXIgY29udGVuaWRvIGFsIGluaWNpbyBkZWwgYXJjaGl2bzogXCIgKyBlcnJvci5tZXNzYWdlKTtcblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgaW5zZXJ0SW5ib3hBdEN1cnNvcihpbmJveCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGluc2VydEluYm94QXRDdXJzb3IoaW5ib3gpIHtcbiAgICBkZWJ1Z2dlclxuICAgIGNvbnN0IGFjdGl2ZUxlYWYgPSBhcHAud29ya3NwYWNlLmFjdGl2ZUxlYWY7XG4gICAgaWYgKGFjdGl2ZUxlYWYpIHtcbiAgICAgICAgY29uc3QgZWRpdG9yID0gYWN0aXZlTGVhZi52aWV3LnNvdXJjZU1vZGUuY21FZGl0b3I7XG4gICAgICAgIGNvbnN0IGN1cnNvciA9IGVkaXRvci5nZXRDdXJzb3IoKTtcbiAgICAgICAgZWRpdG9yLnJlcGxhY2VSYW5nZShpbmJveCwgY3Vyc29yKTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGluc2VydEF0U3RhcnRVc2luZ1Byb2Nlc3MoaW5ib3gsIGZpbGUpIHtcbiAgICBpZiAoIShmaWxlIGluc3RhbmNlb2YgVEZpbGUpKSByZXR1cm47XG4gICAgLy8gVXRpbGl6YSBWYXVsdC5wcm9jZXNzIHBhcmEgbW9kaWZpY2FyIGVsIGNvbnRlbmlkbyBkZWwgYXJjaGl2b1xuICAgIGF3YWl0IGFwcC52YXVsdC5wcm9jZXNzKGZpbGUsIChjb250ZW50KSA9PiB7XG4gICAgICAgIC8vIENvbmNhdGVuYSBlbCB0ZXh0byBkZSBlbnRyYWRhIGVuIGxhIHByaW1lcmEgbFx1MDBFRG5lYSB5IGVsIGNvbnRlbmlkbyBvcmlnaW5hbFxuICAgICAgICBjb25zdCBuZXdDb250ZW50ID0gaW5ib3ggKyBjb250ZW50O1xuICAgICAgICByZXR1cm4gbmV3Q29udGVudDsgLy8gUmV0b3JuYSBlbCBudWV2byBjb250ZW5pZG8gcGFyYSBzZXIgZ3VhcmRhZG9cbiAgICB9KTtcbn1cblxuXG5cbiIsICJpbXBvcnQgeyBNb2RhbCwgQXBwIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5leHBvcnQgY2xhc3MgQmFuZGVqYURlRW50cmFkYU1vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIGlucHV0QXJlYTogSFRNTFRleHRBcmVhRWxlbWVudDtcbiAgICBjaGVja0JveDogSFRNTElucHV0RWxlbWVudDtcbiAgICBwcml2YXRlIHJlc29sdmVyOiAodmFsdWU6IHsgdGV4dDogc3RyaW5nOyBzYXZlSW5DdXJyZW50OiBib29sZWFuIH0pID0+IHZvaWQ7XG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCkge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgIH1cblxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5jbGFzc0xpc3QuYWRkKFwibW9kYWxJbmJveFwiKTtcbiAgICAgICAgbGV0IHtjb250ZW50RWx9ID0gdGhpcztcbiAgICAgICAgXG4gICAgICAgIHRoaXMudGl0bGVFbC5zZXRUZXh0KFwiQmFuZGVqYSBkZSBFbnRyYWRhXCIpO1xuICAgICAgICBcbiAgICAgICAgLy8gRW52dWVsdmUgZWwgXHUwMEUxcmVhIGRlIHRleHRvIGVuIHVuIGRpdiBwYXJhIGNvbnRyb2wgZGUgZmx1am9cbiAgICAgICAgbGV0IHRleHRBcmVhRGl2ID0gY29udGVudEVsLmNyZWF0ZUVsKCdkaXYnKTtcbiAgICAgICAgdGhpcy5pbnB1dEFyZWEgPSB0ZXh0QXJlYURpdi5jcmVhdGVFbCgndGV4dGFyZWEnKTtcbiAgICAgICAgdGhpcy5pbnB1dEFyZWEuc2V0QXR0cmlidXRlKCdwbGFjZWhvbGRlcicsICdFc2NyaWJlIHR1IHRhcmVhIGFxdVx1MDBFRC4uLicpO1xuICAgICAgICAvLyBBXHUwMEYxYWRlIHVuIGxpc3RlbmVyIGRlIGV2ZW50byAna2V5ZG93bicgYWwgdGV4dGFyZWFcbiAgICAgICAgdGhpcy5pbnB1dEFyZWEuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChlKSA9PiB7XG4gICAgICAgICAgICAvLyBWZXJpZmljYSBzaSBsYSB0ZWNsYSBwcmVzaW9uYWRhIGVzIEVudGVyIHkgcXVlIG5vIGhheWEgbmluZ3VuYSBtb2RpZmljYWNpXHUwMEYzbiAoc2hpZnQsIGN0cmwsIGFsdClcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJyAmJiAhZS5zaGlmdEtleSAmJiAhZS5jdHJsS2V5ICYmICFlLmFsdEtleSkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgLy8gUHJldmllbmUgZWwgY29tcG9ydGFtaWVudG8gcG9yIGRlZmVjdG8gcGFyYSBubyBpbnNlcnRhciB1bmEgbnVldmEgbFx1MDBFRG5lYVxuICAgICAgICAgICAgICAgIHRoaXMuc3VibWl0Rm9ybSgpOyAvLyBMbGFtYSBhIGxhIGZ1bmNpXHUwMEYzbiBxdWUgbWFuZWphIGVsIGVudlx1MDBFRG9cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgXG4gICAgICAgIGNvbnN0IGFjdGl2ZUZpbGUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGFjdGl2ZUZpbGUpO1xuICAgICAgICBsZXQgbmFtZUFjdGl2ZUZpbGUgPSBtZXRhZGF0YS5hbGlhc2VzID8gbWV0YWRhdGEuYWxpYXNlc1swXSA6IGFjdGl2ZUZpbGUuYmFzZW5hbWU7XG4gICAgICAgIFxuICAgICAgICAvLyBFbnZ1ZWx2ZSBlbCBjaGVja2JveCB5IHN1IGV0aXF1ZXRhIGVuIHVuIGRpdiBwYXJhIGNvbnRyb2wgZGUgZmx1am9cbiAgICAgICAgbGV0IGNoZWNrQm94RGl2ID0gY29udGVudEVsLmNyZWF0ZUVsKCdkaXYnKTtcbiAgICAgICAgdGhpcy5jaGVja0JveCA9IGNoZWNrQm94RGl2LmNyZWF0ZUVsKCdpbnB1dCcsIHt0eXBlOiAnY2hlY2tib3gnfSk7XG4gICAgICAgIGNoZWNrQm94RGl2LmNyZWF0ZUVsKCdsYWJlbCcsIHt0ZXh0OiBgR3VhcmRhciBlbiAke25hbWVBY3RpdmVGaWxlfWB9KS5wcmVwZW5kKHRoaXMuY2hlY2tCb3gpO1xuICAgICAgICBjb25zdCBzYXZlQnV0dG9uID0gY2hlY2tCb3hEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHt0ZXh0OiAnR3VhcmRhcid9KTtcbiAgICAgICAgc2F2ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuc3VibWl0Rm9ybSgpKTtcbiAgICB9XG4gICAgXG4gICAgc3VibWl0Rm9ybSgpIHtcbiAgICAgICAgY29uc3QgdGV4dCA9IHRoaXMuaW5wdXRBcmVhLnZhbHVlO1xuICAgICAgICBjb25zdCBzYXZlSW5DdXJyZW50ID0gdGhpcy5jaGVja0JveC5jaGVja2VkO1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIGlmICh0aGlzLnJlc29sdmVyKSB7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmVyKHsgdGV4dCwgc2F2ZUluQ3VycmVudCB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcblxuICAgIHdhaXRGb3JJbnB1dCgpOiBQcm9taXNlPHsgdGV4dDogc3RyaW5nOyBzYXZlSW5DdXJyZW50OiBib29sZWFuIH0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmVyID0gcmVzb2x2ZTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwgIi8qXG4gKiBGaWxlbmFtZTogL3NyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL0FQSS9zdWJzaXN0ZW1hc0FQSS50c1xuICogUGF0aDogL3NyYy9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL0FQSVxuICogQ3JlYXRlZCBEYXRlOiAyMDI0LTAzLTE5IDEzOjExOjI2XG4gKiBBdXRob3I6IEFuZHJcdTAwRTlzIEp1bGlcdTAwRTFuIEJvcmJcdTAwRjNuXG4gKiAtLS0tLVxuICogTGFzdCBNb2RpZmllZDogMjAyNS0wMi0yMyAxNzo0OTozM1xuICogTW9kaWZpZWQgQnk6IEFuZHJcdTAwRTlzIEp1bGlcdTAwRTFuIEJvcmJcdTAwRjNuXG4gKiAtLS0tLVxuICogQ29weXJpZ2h0IChjKSAyMDI1IC0gQW5kclx1MDBFOXMgSnVsaVx1MDBFMW4gQm9yYlx1MDBGM25cbiAqL1xuXG5pbXBvcnQgeyBURmlsZSwgVEZvbGRlciB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG5pbnRlcmZhY2UgR3J1cG9BViB7XG4gIGdydXBvOiBzdHJpbmc7XG4gIGF2OiBzdHJpbmc7XG4gIHRleHRvOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBzdWJzaXN0ZW1hc0FQSSB7XG4gIGNvbnN0cnVjdG9yKHBsdWdpbikge1xuICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgIHRoaXMucGF0aENhbXBvcyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmZpbGVfY2FtcG9zQ2VudHJhbCArIFwiLm1kXCI7XG4gIH1cblxuICAvLyBGdW5jaVx1MDBGM24gcGFyYSBjcmVhciB5IG1vc3RyYXIgZWwgYm90XHUwMEYzbiBpbmljaWFsIFwiTWVuXHUwMEZBIGhveVwiXG4gIGFzeW5jIG1vc3RyYXJCb3RvbkNyZWFyQVYoZHYpIHtcbiAgICBkdi5jb250YWluZXIuaW5uZXJIVE1MID0gXCJcIjsgLy8gTGltcGlhciBlbCBjb250ZW5lZG9yXG5cbiAgICBjb25zdCBib3Rvbk1lbnVIb3kgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGJvdG9uTWVudUhveS50ZXh0Q29udGVudCA9IFwiUHJvY2VzYXIgQXJlYXMgZGUgVmlkYVwiO1xuICAgIGR2LmNvbnRhaW5lci5hcHBlbmRDaGlsZChib3Rvbk1lbnVIb3kpO1xuXG4gICAgYm90b25NZW51SG95Lm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCB0aGlzLnByb2Nlc2FyQVYoZHYpOyAvLyBNb3N0cmFyIGxvcyBib3RvbmVzIGFkaWNpb25hbGVzIGFsIGhhY2VyIGNsaWNcbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgbW9zdHJhckJvdG9uQ3JlYXJBVlRyaW1lc3RyYWwoZHYpIHtcbiAgICBkdi5jb250YWluZXIuaW5uZXJIVE1MID0gXCJcIjsgLy8gTGltcGlhciBlbCBjb250ZW5lZG9yXG5cbiAgICBjb25zdCBib3Rvbk1lbnVIb3kgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGJvdG9uTWVudUhveS50ZXh0Q29udGVudCA9IFwiUHJvY2VzYXIgQXJlYXMgZGUgVmlkYSBkZWwgdHJpbWVzdHJlXCI7XG4gICAgZHYuY29udGFpbmVyLmFwcGVuZENoaWxkKGJvdG9uTWVudUhveSk7XG5cbiAgICBib3Rvbk1lbnVIb3kub25jbGljayA9IGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHRoaXMucHJvY2VzYXJBVlRyaW1lc3RyZShkdik7IC8vIE1vc3RyYXIgbG9zIGJvdG9uZXMgYWRpY2lvbmFsZXMgYWwgaGFjZXIgY2xpY1xuICAgIH07XG4gIH1cblxuICBhc3luYyBwcm9jZXNhckFWKGR2KSB7XG4gICAgLy8gT2J0ZW5lciBRcyBwYXJhIHByZWd1bnRhciBlbCBRIHBhcmEgZWwgcXVlIGRlc2VhIGNyZWFyIGxhcyBcdTAwRTFyZWFzIGRlIHZpZGEuXG4gICAgY29uc3QgZm9sZGVyUSA9IHRoaXMucGx1Z2luLnNldHRpbmdzW1wiZm9sZGVyX1RyaW1lc3RyYWxcIl07XG4gICAgY29uc3QgZmlsZXNRID0gYXBwLnZhdWx0XG4gICAgICAuZ2V0TWFya2Rvd25GaWxlcygpXG4gICAgICAuZmlsdGVyKFxuICAgICAgICAoZmlsZSkgPT5cbiAgICAgICAgICBmaWxlLnBhdGguaW5jbHVkZXMoZm9sZGVyUSkgJiZcbiAgICAgICAgICAhZmlsZS5wYXRoLmluY2x1ZGVzKFwiUGxhbnRpbGxhc1wiKSAmJlxuICAgICAgICAgICFmaWxlLnBhdGguaW5jbHVkZXMoXCJBcmNoaXZvXCIpXG4gICAgICApO1xuICAgIGxldCBxQ3JlYWRvcyA9IFtdO1xuXG4gICAgZm9yIChsZXQgZmlsZSBvZiBmaWxlc1EpIHtcbiAgICAgIGxldCBtZXRhZGF0YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXI7XG5cbiAgICAgIGlmIChtZXRhZGF0YT8udHlwZSA9PT0gXCJUUVwiICYmIG1ldGFkYXRhPy50cmltZXN0cmUpIHtcbiAgICAgICAgbGV0IHFBY3Rpdm8gPSB7IGZpbGUgfTsgLy8gQXN1bWllbmRvIHF1ZSBxdWllcmVzIGd1YXJkYXIgZWwgcGF0aCBkZWwgYXJjaGl2b1xuICAgICAgICBPYmplY3QuYXNzaWduKHFBY3Rpdm8sIG1ldGFkYXRhKTsgLy8gQWdyZWdhIGVsIG1ldGFkYXRhIGFsIG9iamV0byBxQWN0aXZvXG4gICAgICAgIHFDcmVhZG9zLnB1c2gocUFjdGl2byk7IC8vIEFcdTAwRjFhZGUgZWwgcmVnaXN0cm8gYWN0aXZvIGFsIGFycmF5XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHN1Z2dlc3RlciA9IHRoaXMucGx1Z2luLnRwLnN5c3RlbS5zdGF0aWNfZnVuY3Rpb25zLmdldChcInN1Z2dlc3RlclwiKTtcbiAgICBsZXQgcSA9IGF3YWl0IHN1Z2dlc3RlcihcbiAgICAgIHFDcmVhZG9zLm1hcCgoYikgPT4gYi50cmltZXN0cmUpLFxuICAgICAgcUNyZWFkb3MubWFwKChiKSA9PiBiKSxcbiAgICAgIHRydWUsXG4gICAgICBgRGUgcXVlIHRyaW1lc3RyZSB2YW1vcyBhIHByb2Nlc2FyIHR1cyBBcmVhcyBkZSBWaWRhYFxuICAgICk7XG4gICAgY29uc3QgcmVzdWx0YWRvQVY6IEdydXBvQVZbXSA9IFtdO1xuICAgIGNvbnN0IGZpbGVDYW1wb3MgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHRoaXMucGF0aENhbXBvcyk7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChmaWxlQ2FtcG9zIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgLy8gVXNhIG1ldGFkYXRhQ2FjaGUgcGFyYSBvYnRlbmVyIGxvcyBtZXRhZGF0b3MgZGVsIGFyY2hpdm9cbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZUNhbXBvcyk7XG4gICAgICAgIGNvbnN0IGFycmVnbG9BViA9IG1ldGFkYXRhPy5mcm9udG1hdHRlcj8uQXJlYXNWaWRhIHx8IFtdO1xuICAgICAgICAvLyBSZWxsZW5hIGVsIGFycmVnbG8gY29uIGxvcyBkYXRvcyBkZWwgYXJyZWdsb1Jlc3VsdFxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcnJlZ2xvQVYpKSB7XG4gICAgICAgICAgYXJyZWdsb0FWLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pICYmIGl0ZW0ubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICAgICAgcmVzdWx0YWRvQVYucHVzaCh7XG4gICAgICAgICAgICAgICAgZ3J1cG86IGl0ZW1bMF0sXG4gICAgICAgICAgICAgICAgYXY6IGl0ZW1bMV0sXG4gICAgICAgICAgICAgICAgdGV4dG86IGl0ZW1bMF0gKyBcIiAvIFwiICsgaXRlbVsxXSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIG9idGVuaWVuZG8gZWwgYXJjaGl2byBkZSBjYW1wb3M6XCIsIGVycm9yKTtcbiAgICAgIC8vIEFxdVx1MDBFRCBtYW5lamFyXHUwMEVEYXMgZWwgZXJyb3IgY29tbyBzZWEgYXByb3BpYWRvIHBhcmEgdHUgYXBsaWNhY2lcdTAwRjNuXG4gICAgICB0aHJvdyBlcnJvcjsgLy8gTyBkZXZvbHZlciB1biBhcnJlZ2xvIHZhY1x1MDBFRG8gY29tbyByZXN1bHRhZG8gZGUgZXJyb3JcbiAgICB9XG5cbiAgICBjb25zdCBhbGxGaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG4gICAgbGV0IGJhc2VQYXRoID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX0FyZWFzVmlkYTtcblxuICAgIC8vIC0uLi0+IFJldmlzaVx1MDBGM24gZGUgZXNjZW5hcmlvcy5cblxuICAgIGZvciAobGV0IGFyZWFWaWRhIG9mIHJlc3VsdGFkb0FWKSB7XG4gICAgICAvLyBWZXJpZmljYSBzaSBsYSBjYXJwZXRhIGV4aXN0ZSBlbiBsYSB1YmljYWNpXHUwMEYzbiBlc3BlY1x1MDBFRGZpY2FcbiAgICAgIGNvbnN0IGZ1bGxGb2xkZXJQYXRoID0gYCR7YmFzZVBhdGh9LyR7YXJlYVZpZGEuYXZ9YDtcbiAgICAgIGNvbnN0IGZvbGRlciA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZnVsbEZvbGRlclBhdGgpO1xuXG4gICAgICAvL1AwIC0+IFZlcmlmaWNhIHNpIGxhIGNhcnBldGEgcGF0aC9hcmVhVmlkYSBleGlzdGVcbiAgICAgIC8vUDAgLSBTSVxuICAgICAgaWYgKGZvbGRlciBpbnN0YW5jZW9mIFRGb2xkZXIpIHtcbiAgICAgICAgY29uc29sZS5sb2coYExhIGNhcnBldGEgJHthcmVhVmlkYS5hdn0gZXhpc3RlIGRlbnRybyBkZSAke2Jhc2VQYXRofS5gKTtcbiAgICAgICAgLy8gQWhvcmEsIHZlcmlmaWNhIHNpIGxhIG5vdGEgZXhpc3RlIGRlbnRybyBkZSBsYSBjYXJwZXRhXG4gICAgICAgIGNvbnN0IGluc3RhbmNlc09mQVYgPSBhcHAudmF1bHRcbiAgICAgICAgICAuZ2V0TWFya2Rvd25GaWxlcygpXG4gICAgICAgICAgLmZpbHRlcihcbiAgICAgICAgICAgIChmaWxlKSA9PlxuICAgICAgICAgICAgICBmaWxlLnBhdGguaW5jbHVkZXMoZnVsbEZvbGRlclBhdGgpICYmXG4gICAgICAgICAgICAgICFmaWxlLnBhdGguaW5jbHVkZXMoXCJQbGFudGlsbGFzXCIpICYmXG4gICAgICAgICAgICAgICFmaWxlLnBhdGguaW5jbHVkZXMoXCJBcmNoaXZvXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgLy8gUDEgRXhpc3RlIG5vZGVBcmVhVmlkYT9cbiAgICAgICAgY29uc3Qgbm9kZUFWRXhpc3RzID0gaW5zdGFuY2VzT2ZBVi5zb21lKFxuICAgICAgICAgIChmaWxlKSA9PiBmaWxlLmJhc2VuYW1lID09PSBhcmVhVmlkYS5hdlxuICAgICAgICApO1xuXG4gICAgICAgIC8vIFAxIFNJXG4gICAgICAgIGlmIChub2RlQVZFeGlzdHMpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgIGBMYSBub3RhICR7YXJlYVZpZGEuYXZ9IGV4aXN0ZSBkZW50cm8gZGUgbGEgY2FycGV0YSAke2FyZWFWaWRhLmF2fS5gXG4gICAgICAgICAgKTtcbiAgICAgICAgICAvLyBQMiBhcmVhVmlkYSBRIEV4aXN0ZT9cbiAgICAgICAgICBhd2FpdCB0aGlzLnZhbGlkYWNpb25BVlEoZnVsbEZvbGRlclBhdGgsIHEsIGFyZWFWaWRhKTtcbiAgICAgICAgfVxuICAgICAgICAvL1AxIC0gTk8gKG5vZGVBcmVhVmlkYSBubyBFeGlzdGUpXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICAgIC8vIENhc28gMyB5IDRcbiAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgIGBMYSBub3RhICR7YXJlYVZpZGEuYXZ9IG5vIGV4aXN0ZSBkZW50cm8gZGUgbGEgY2FycGV0YSAke2FyZWFWaWRhLmF2fS5gXG4gICAgICAgICAgKTtcbiAgICAgICAgICAvLyBQMyBBZ3JlZ2FyIE5vZG8gQXJlYSBWaWRhP1xuICAgICAgICAgIGxldCBuQVYgPSBhd2FpdCB0aGlzLmFncmVnYXJOb2RvQXJlYVZpZGEoYXJlYVZpZGEpOyAvLyBRdWllcmVzIEFncmVnYXIgZXN0YSBBViBhIHR1IHNpc3RlbWEgZGUgR2VzdGlcdTAwRjNuP1xuICAgICAgICAgIC8vUDMgLT4gU0lcbiAgICAgICAgICBpZiAobkFWKSB7XG4gICAgICAgICAgICAvLyBQMiAuLiAtPiBTaSB5IE5vXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnZhbGlkYWNpb25BVlEoZnVsbEZvbGRlclBhdGgsIHEsIGFyZWFWaWRhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy9QMyAtPiBOT1xuICAgICAgICAgIGVsc2UgaWYgKG5BViA9PSBmYWxzZSkge1xuICAgICAgICAgICAgY29udGludWU7IC8vU2VudGVuY2lhIHF1ZSBkZWJlIHBhc2FyIGFsIHNpZ3VpZW50ZSBlbGVtZW50byBkZWwgY2ljbG8gZm9yLlxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47IC8vIEVuIGNhc28gZGUgcXVlIHNlIGRlIGVzY2FwZS5cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFBPIC0+IE5PIChMYSBDYXJwZXRhIG5vIGV4aXN0ZSlcbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICBgTGEgY2FycGV0YSAke2FyZWFWaWRhLmF2fSBubyBleGlzdGUgYVx1MDBGQW4gZGVudHJvIGRlICR7YmFzZVBhdGh9LmBcbiAgICAgICAgKTtcbiAgICAgICAgLy8gUDMgQWdyZWdhciBOb2RvIEFyZWEgVmlkYT9cbiAgICAgICAgbGV0IG5BViA9IGF3YWl0IHRoaXMuYWdyZWdhck5vZG9BcmVhVmlkYShhcmVhVmlkYSk7IC8vIFF1aWVyZXMgQWdyZWdhciBlc3RhIEFWIGEgdHUgc2lzdGVtYSBkZSBHZXN0aVx1MDBGM24/XG4gICAgICAgIC8vIFAzIC0+IFNJXG4gICAgICAgIGlmIChuQVYpIHtcbiAgICAgICAgICAvLyBQMlxuICAgICAgICAgIGF3YWl0IHRoaXMudmFsaWRhY2lvbkFWUShmdWxsRm9sZGVyUGF0aCwgcSwgYXJlYVZpZGEpO1xuICAgICAgICB9XG4gICAgICAgIC8vUDMgLT4gTk9cbiAgICAgICAgZWxzZSBpZiAobkFWID09IGZhbHNlKSB7XG4gICAgICAgICAgY29udGludWU7IC8vU2VudGVuY2lhIHF1ZSBkZWJlIHBhc2FyIGFsIHNpZ3VpZW50ZSBlbGVtZW50byBkZWwgY2ljbG8gZm9yLlxuICAgICAgICB9XG4gICAgICAgIC8vIFAzIC0+IEVzY2FwZVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICByZXR1cm47IC8vIEVuIGNhc28gZGUgcXVlIHNlIGRlIGVzY2FwZS5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gRmluIEZvciBBcmVhc1ZpZGEgZmlsZUNhbXBvc1xuICB9IC8vIEZpbiBwcm9jZXNhckFWKClcblxuXG4gIGFzeW5jIHByb2Nlc2FyQVZUcmltZXN0cmUoZHYpIHtcbiAgICBcbiAgICBsZXQgcSA9IHt9OyBcbiAgICBxLnRyaW1lc3RyZSA9IGR2LmN1cnJlbnQoKS50cmltZXN0cmU7XG4gICAgY29uc3QgcmVzdWx0YWRvQVY6IEdydXBvQVZbXSA9IFtdO1xuICAgIGNvbnN0IGZpbGVDYW1wb3MgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHRoaXMucGF0aENhbXBvcyk7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChmaWxlQ2FtcG9zIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgLy8gVXNhIG1ldGFkYXRhQ2FjaGUgcGFyYSBvYnRlbmVyIGxvcyBtZXRhZGF0b3MgZGVsIGFyY2hpdm9cbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZUNhbXBvcyk7XG4gICAgICAgIGNvbnN0IGFycmVnbG9BViA9IG1ldGFkYXRhPy5mcm9udG1hdHRlcj8uQXJlYXNWaWRhIHx8IFtdO1xuICAgICAgICAvLyBSZWxsZW5hIGVsIGFycmVnbG8gY29uIGxvcyBkYXRvcyBkZWwgYXJyZWdsb1Jlc3VsdFxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcnJlZ2xvQVYpKSB7XG4gICAgICAgICAgYXJyZWdsb0FWLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pICYmIGl0ZW0ubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICAgICAgcmVzdWx0YWRvQVYucHVzaCh7XG4gICAgICAgICAgICAgICAgZ3J1cG86IGl0ZW1bMF0sXG4gICAgICAgICAgICAgICAgYXY6IGl0ZW1bMV0sXG4gICAgICAgICAgICAgICAgdGV4dG86IGl0ZW1bMF0gKyBcIiAvIFwiICsgaXRlbVsxXSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIG9idGVuaWVuZG8gZWwgYXJjaGl2byBkZSBjYW1wb3M6XCIsIGVycm9yKTtcbiAgICAgIC8vIEFxdVx1MDBFRCBtYW5lamFyXHUwMEVEYXMgZWwgZXJyb3IgY29tbyBzZWEgYXByb3BpYWRvIHBhcmEgdHUgYXBsaWNhY2lcdTAwRjNuXG4gICAgICB0aHJvdyBlcnJvcjsgLy8gTyBkZXZvbHZlciB1biBhcnJlZ2xvIHZhY1x1MDBFRG8gY29tbyByZXN1bHRhZG8gZGUgZXJyb3JcbiAgICB9XG5cbiAgICBjb25zdCBhbGxGaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG4gICAgbGV0IGJhc2VQYXRoID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX0FyZWFzVmlkYTtcblxuICAgIC8vIC0uLi0+IFJldmlzaVx1MDBGM24gZGUgZXNjZW5hcmlvcy5cblxuICAgIGZvciAobGV0IGFyZWFWaWRhIG9mIHJlc3VsdGFkb0FWKSB7XG4gICAgICAvLyBWZXJpZmljYSBzaSBsYSBjYXJwZXRhIGV4aXN0ZSBlbiBsYSB1YmljYWNpXHUwMEYzbiBlc3BlY1x1MDBFRGZpY2FcbiAgICAgIGNvbnN0IGZ1bGxGb2xkZXJQYXRoID0gYCR7YmFzZVBhdGh9LyR7YXJlYVZpZGEuYXZ9YDtcbiAgICAgIGNvbnN0IGZvbGRlciA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZnVsbEZvbGRlclBhdGgpO1xuXG4gICAgICAvL1AwIC0+IFZlcmlmaWNhIHNpIGxhIGNhcnBldGEgcGF0aC9hcmVhVmlkYSBleGlzdGVcbiAgICAgIC8vUDAgLSBTSVxuICAgICAgaWYgKGZvbGRlciBpbnN0YW5jZW9mIFRGb2xkZXIpIHtcbiAgICAgICAgY29uc29sZS5sb2coYExhIGNhcnBldGEgJHthcmVhVmlkYS5hdn0gZXhpc3RlIGRlbnRybyBkZSAke2Jhc2VQYXRofS5gKTtcbiAgICAgICAgLy8gQWhvcmEsIHZlcmlmaWNhIHNpIGxhIG5vdGEgZXhpc3RlIGRlbnRybyBkZSBsYSBjYXJwZXRhXG4gICAgICAgIGNvbnN0IGluc3RhbmNlc09mQVYgPSBhcHAudmF1bHRcbiAgICAgICAgICAuZ2V0TWFya2Rvd25GaWxlcygpXG4gICAgICAgICAgLmZpbHRlcihcbiAgICAgICAgICAgIChmaWxlKSA9PlxuICAgICAgICAgICAgICBmaWxlLnBhdGguaW5jbHVkZXMoZnVsbEZvbGRlclBhdGgpICYmXG4gICAgICAgICAgICAgICFmaWxlLnBhdGguaW5jbHVkZXMoXCJQbGFudGlsbGFzXCIpICYmXG4gICAgICAgICAgICAgICFmaWxlLnBhdGguaW5jbHVkZXMoXCJBcmNoaXZvXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgLy8gUDEgRXhpc3RlIG5vZGVBcmVhVmlkYT9cbiAgICAgICAgY29uc3Qgbm9kZUFWRXhpc3RzID0gaW5zdGFuY2VzT2ZBVi5zb21lKFxuICAgICAgICAgIChmaWxlKSA9PiBmaWxlLmJhc2VuYW1lID09PSBhcmVhVmlkYS5hdlxuICAgICAgICApO1xuXG4gICAgICAgIC8vIFAxIFNJXG4gICAgICAgIGlmIChub2RlQVZFeGlzdHMpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgIGBMYSBub3RhICR7YXJlYVZpZGEuYXZ9IGV4aXN0ZSBkZW50cm8gZGUgbGEgY2FycGV0YSAke2FyZWFWaWRhLmF2fS5gXG4gICAgICAgICAgKTtcbiAgICAgICAgICAvLyBQMiBhcmVhVmlkYSBRIEV4aXN0ZT9cbiAgICAgICAgICBhd2FpdCB0aGlzLnZhbGlkYWNpb25BVlEoZnVsbEZvbGRlclBhdGgsIHEsIGFyZWFWaWRhKTtcbiAgICAgICAgfVxuICAgICAgICAvL1AxIC0gTk8gKG5vZGVBcmVhVmlkYSBubyBFeGlzdGUpXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICAgIC8vIENhc28gMyB5IDRcbiAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgIGBMYSBub3RhICR7YXJlYVZpZGEuYXZ9IG5vIGV4aXN0ZSBkZW50cm8gZGUgbGEgY2FycGV0YSAke2FyZWFWaWRhLmF2fS5gXG4gICAgICAgICAgKTtcbiAgICAgICAgICAvLyBQMyBBZ3JlZ2FyIE5vZG8gQXJlYSBWaWRhP1xuICAgICAgICAgIGxldCBuQVYgPSBhd2FpdCB0aGlzLmFncmVnYXJOb2RvQXJlYVZpZGEoYXJlYVZpZGEpOyAvLyBRdWllcmVzIEFncmVnYXIgZXN0YSBBViBhIHR1IHNpc3RlbWEgZGUgR2VzdGlcdTAwRjNuP1xuICAgICAgICAgIC8vUDMgLT4gU0lcbiAgICAgICAgICBpZiAobkFWKSB7XG4gICAgICAgICAgICAvLyBQMiAuLiAtPiBTaSB5IE5vXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnZhbGlkYWNpb25BVlEoZnVsbEZvbGRlclBhdGgsIHEsIGFyZWFWaWRhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy9QMyAtPiBOT1xuICAgICAgICAgIGVsc2UgaWYgKG5BViA9PSBmYWxzZSkge1xuICAgICAgICAgICAgY29udGludWU7IC8vU2VudGVuY2lhIHF1ZSBkZWJlIHBhc2FyIGFsIHNpZ3VpZW50ZSBlbGVtZW50byBkZWwgY2ljbG8gZm9yLlxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47IC8vIEVuIGNhc28gZGUgcXVlIHNlIGRlIGVzY2FwZS5cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFBPIC0+IE5PIChMYSBDYXJwZXRhIG5vIGV4aXN0ZSlcbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICBgTGEgY2FycGV0YSAke2FyZWFWaWRhLmF2fSBubyBleGlzdGUgYVx1MDBGQW4gZGVudHJvIGRlICR7YmFzZVBhdGh9LmBcbiAgICAgICAgKTtcbiAgICAgICAgLy8gUDMgQWdyZWdhciBOb2RvIEFyZWEgVmlkYT9cbiAgICAgICAgbGV0IG5BViA9IGF3YWl0IHRoaXMuYWdyZWdhck5vZG9BcmVhVmlkYShhcmVhVmlkYSk7IC8vIFF1aWVyZXMgQWdyZWdhciBlc3RhIEFWIGEgdHUgc2lzdGVtYSBkZSBHZXN0aVx1MDBGM24/XG4gICAgICAgIC8vIFAzIC0+IFNJXG4gICAgICAgIGlmIChuQVYpIHtcbiAgICAgICAgICAvLyBQMlxuICAgICAgICAgIGF3YWl0IHRoaXMudmFsaWRhY2lvbkFWUShmdWxsRm9sZGVyUGF0aCwgcSwgYXJlYVZpZGEpO1xuICAgICAgICB9XG4gICAgICAgIC8vUDMgLT4gTk9cbiAgICAgICAgZWxzZSBpZiAobkFWID09IGZhbHNlKSB7XG4gICAgICAgICAgY29udGludWU7IC8vU2VudGVuY2lhIHF1ZSBkZWJlIHBhc2FyIGFsIHNpZ3VpZW50ZSBlbGVtZW50byBkZWwgY2ljbG8gZm9yLlxuICAgICAgICB9XG4gICAgICAgIC8vIFAzIC0+IEVzY2FwZVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICByZXR1cm47IC8vIEVuIGNhc28gZGUgcXVlIHNlIGRlIGVzY2FwZS5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gRmluIEZvciBBcmVhc1ZpZGEgZmlsZUNhbXBvc1xuICB9IC8vIEZpbiBwcm9jZXNhckFWVHJpbWVzdHJlKClcblxuXG4gIC8vUDIgYXJlYVZpZGEgUSBFeGlzdGU/XG4gIGFzeW5jIHZhbGlkYWNpb25BVlEoXG4gICAgZnVsbEZvbGRlclBhdGg6IHN0cmluZyxcbiAgICBxOiBhbnksXG4gICAgYXJlYVZpZGE6IGFueVxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBwYXRoQVZRID0gYCR7ZnVsbEZvbGRlclBhdGh9LyR7cS50cmltZXN0cmV9IC0gJHthcmVhVmlkYS5hdn0ubWRgO1xuICAgIGNvbnN0IGZpbGVBVlEgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHBhdGhBVlEpO1xuICAgIGRlYnVnZ2VyO1xuICAgIC8vIFZlcmlmaWNhciBzaSBlbCBBViBkZSBRIEV4aXN0ZVxuICAgIC8vIFAyIFNJXG4gICAgLy8gQ0FTTyA0XG4gICAgLy8gQ0FTTyA1XG4gICAgaWYgKGZpbGVBVlEgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgbGV0IHN1Z2dlc3RlciA9IHRoaXMucGx1Z2luLnRwLnN5c3RlbS5zdGF0aWNfZnVuY3Rpb25zLmdldChcInN1Z2dlc3RlclwiKTtcbiAgICAgIGxldCBuZXh0U3RlcCA9IGF3YWl0IHN1Z2dlc3RlcihcbiAgICAgICAgW1xuICAgICAgICAgIFwiQWN0dWFsaXphciBlc3RhZG8gZGVsIEFWXCIsXG4gICAgICAgICAgXCJCb3JyYXIgeSBDcmVhciBkZSBudWV2byBlbCBBVlwiLFxuICAgICAgICAgIFwiRGVqYXIgZWwgQVYgY29tbyBlc3RcdTAwRTEgXCIsXG4gICAgICAgIF0sXG4gICAgICAgIFtcInVwZFwiLCBcImRlbCtjcmVcIiwgXCJjb250aW51ZVwiXSxcbiAgICAgICAgdHJ1ZSxcbiAgICAgICAgYFx1MDBCRiR7cS50cmltZXN0cmV9ICR7YXJlYVZpZGEuYXZ9IHlhIGV4aXN0ZS4gRWxpZ2UgdW5hIG9wY2lcdTAwRjNuOmBcbiAgICAgICk7XG4gICAgICBzd2l0Y2ggKG5leHRTdGVwKSB7XG4gICAgICAgIGNhc2UgXCJ1cGRcIjpcbiAgICAgICAgICBhd2FpdCB0aGlzLmFjdHVhbGl6YXJBVlEoZmlsZUFWUSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJkZWwrY3JlXCI6XG4gICAgICAgICAgYXdhaXQgdGhpcy5ib3JyYXJBVlEoZmlsZUFWUSk7XG4gICAgICAgICAgYXdhaXQgdGhpcy5hZ3JlZ2FyQVZRKGFyZWFWaWRhLCBxLnRyaW1lc3RyZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJjb250aW51ZVwiOlxuICAgICAgICAgIGNvbnNvbGUubG9nKGBDb250aW51YXIgc2luIGhhY2VyIG5hZGEgY29uICR7ZmlsZUFWUS5iYXNlbmFtZX1gKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8vIFNpIEFWIGRlIFEgZXhpc3RlICgxKSBtdWVzdHJhIGVsIGVzdGFkbyB5IHBlcm1pdGUgY2FtYmlhcmxvLlxuICAgIH1cbiAgICAvLyBQMiBOT1xuICAgIC8vIC0+PiBDQVNPIDFcbiAgICAvLyAtPj4gQ0FTTyAzXG4gICAgLy8gLS0+IENBU08gNlxuICAgIGVsc2Uge1xuICAgICAgZGVidWdnZXI7XG4gICAgICAvLyBTaSBBViBkZSBRIG5vIEV4aXN0ZSAoMikgQWdyZWdhIEFyZWFWaWRhIGRlIFEsIHByZWd1bnRhbmRvIGVuIHF1ZSBlc3RhZG8gcXVpZXJlIHRlbmVyIGVzYSBBViBlc2UgUVxuICAgICAgYXdhaXQgdGhpcy5hZ3JlZ2FyQVZRKGFyZWFWaWRhLCBxLnRyaW1lc3RyZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUDMgQWdyZWdhciBub2RvQXJlYVZpZGE/XG4gIGFzeW5jIGFncmVnYXJOb2RvQXJlYVZpZGEoYXJlYVZpZGEpIHtcbiAgICAvLyBwcmVndW50YXIgcHJpbWVybyBzaSBzaSBsbyBkZXNlYSBhZ3JlZ2FyLlxuXG4gICAgbGV0IHN1Z2dlc3RlciA9IHRoaXMucGx1Z2luLnRwLnN5c3RlbS5zdGF0aWNfZnVuY3Rpb25zLmdldChcInN1Z2dlc3RlclwiKTtcbiAgICBsZXQgYWdyZWdhciA9IGF3YWl0IHN1Z2dlc3RlcihcbiAgICAgIFtcIlNpXCIsIFwiTm9cIl0sXG4gICAgICBbdHJ1ZSwgZmFsc2VdLFxuICAgICAgdHJ1ZSxcbiAgICAgIGBcdTAwQkZEZXNlYXMgYWdyZWdhciAke2FyZWFWaWRhLmF2fSBhIHR1IHNpc3RlbWEgZGUgZ2VzdGlcdTAwRjNuP2BcbiAgICApO1xuICAgIC8vIFAzIFNJXG4gICAgaWYgKGFncmVnYXIpIHtcbiAgICAgIGNvbnN0IGZpbGVQYXRoID0gYFBsYW50aWxsYXMvJHtcbiAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3NbYGZvbGRlcl9BcmVhc1ZpZGFgXVxuICAgICAgfS9QbHQgLSBub2RvQXJlYXNWaWRhLm1kYDtcbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmaWxlUGF0aCk7XG4gICAgICBpZiAodGVtcGxhdGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkFyY2hpdm8gbm9kb0FyZWFWaWRhIHRlbXBsYXRlIGVuY29udHJhZG86XCIsIHRlbXBsYXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQXJjaGl2byB0ZW1wbGF0ZSBub2RvQXJlYVZpZGEgbm8gZW5jb250cmFkby5cIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGZpbGVuYW1lID0gYXJlYVZpZGEuZ3J1cG8gKyBcIiAtIFwiICsgYXJlYVZpZGEuYXY7XG4gICAgICBsZXQgZm9sZGVyUGF0aCA9IGAke3RoaXMucGx1Z2luLnNldHRpbmdzW2Bmb2xkZXJfQXJlYXNWaWRhYF19LyR7XG4gICAgICAgIGFyZWFWaWRhLmF2XG4gICAgICB9YDtcbiAgICAgIC8vIFNlIGFzZWd1cmEgZGUgcXVlIGxhIGNhcnBldGEgZXhpc3RhIHBhcmEgcG9kZXIgY3JlYXIgZWwgYXJjaGl2byBkaXJlY3RhbWVudGUgZW4gZXNhIGNhcnBldGFcbiAgICAgIGF3YWl0IHRoaXMuY3JlYXJDYXJwZXRhKGZvbGRlclBhdGgpO1xuICAgICAgY29uc3QgZm9sZGVyID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmb2xkZXJQYXRoKTtcbiAgICAgIGxldCBjcmVhck5vdGE6IChcbiAgICAgICAgdGVtcGxhdGU6IFRGaWxlLFxuICAgICAgICBmaWxlbmFtZTogc3RyaW5nLFxuICAgICAgICBvdmVyd3JpdGU6IGJvb2xlYW4sXG4gICAgICAgIGZvbGRlcjogVEZvbGRlclxuICAgICAgKSA9PiBQcm9taXNlPHZvaWQ+O1xuICAgICAgY3JlYXJOb3RhID0gdGhpcy5wbHVnaW4udHAuZmlsZS5zdGF0aWNfZnVuY3Rpb25zLmdldChcImNyZWF0ZV9uZXdcIik7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBub3RhID0gYXdhaXQgY3JlYXJOb3RhKHRlbXBsYXRlLCBmaWxlbmFtZSwgZmFsc2UsIGZvbGRlcik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGNyZWFuZG8gTm9kb0FyZWFWaWRhOiBcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBhZ3JlZ2FyQVZRKGFyZWFWaWRhOiBhbnksIHRyaW1lc3RyZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgZmlsZVBhdGggPSBgUGxhbnRpbGxhcy8ke3RoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9BcmVhc1ZpZGF9L1BsdCAtIEFyZWFzVmlkYS5tZGA7XG4gICAgY29uc3QgdGVtcGxhdGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZpbGVQYXRoKTtcblxuICAgIGlmICghKHRlbXBsYXRlIGluc3RhbmNlb2YgVEZpbGUpKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkFyY2hpdm8gbm8gZW5jb250cmFkby5cIik7XG4gICAgICByZXR1cm4gZmFsc2U7IC8vIEFzZWd1cmEgcXVlIGxhIGZ1bmNpXHUwMEYzbiByZXRvcm5hIHVuIGJvb2xlYW5vIGluY2x1c28gZW4gY2FzbyBkZSBlcnJvci5cbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJBcmNoaXZvIGVuY29udHJhZG86XCIsIHRlbXBsYXRlKTtcbiAgICBjb25zdCBmaWxlbmFtZSA9IGAke3RyaW1lc3RyZX0gLS0gJHthcmVhVmlkYS5hdn0gLS0gJHthcmVhVmlkYS5ncnVwb31gO1xuICAgIGxldCBmb2xkZXJQYXRoID0gYCR7dGhpcy5wbHVnaW4uc2V0dGluZ3NbYGZvbGRlcl9BcmVhc1ZpZGFgXX0vJHtcbiAgICAgIGFyZWFWaWRhLmF2XG4gICAgfWA7XG4gICAgY29uc3QgZm9sZGVyID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmb2xkZXJQYXRoKSBhcyBURm9sZGVyOyAvLyBBc2VnXHUwMEZBcmF0ZSBkZSBxdWUgXCJJbmJveFwiIHJlYWxtZW50ZSBleGlzdGEgeSBzZWEgdW4gVEZvbGRlci5cblxuICAgIC8vIEFzdW1pZW5kbyBxdWUgZWwgdGlwbyBkZSBgZm9sZGVyYCBlcyBjb3JyZWN0byB5IHF1ZSBjcmVhck5vdGEgZXMgdW5hIGZ1bmNpXHUwMEYzbiBhc2luY3JcdTAwRjNuaWNhIHF1ZSBkZXZ1ZWx2ZSB2b2lkLlxuICAgIGxldCBjcmVhck5vdGEgPSB0aGlzLnBsdWdpbi50cC5maWxlLnN0YXRpY19mdW5jdGlvbnMuZ2V0KFwiY3JlYXRlX25ld1wiKSBhcyAoXG4gICAgICB0ZW1wbGF0ZTogVEZpbGUsXG4gICAgICBmaWxlbmFtZTogc3RyaW5nLFxuICAgICAgb3ZlcndyaXRlOiBib29sZWFuLFxuICAgICAgZm9sZGVyOiBURm9sZGVyXG4gICAgKSA9PiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGNyZWFyTm90YSh0ZW1wbGF0ZSwgZmlsZW5hbWUsIGZhbHNlLCBmb2xkZXIpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBjcmVhbmRvIEFyZWFWaWRhOiBcIiwgZXJyb3IpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGJvcnJhckFWUShmaWxlQVZRKSB7XG4gICAgY29uc29sZS5sb2coYExvZ2ljYSBkZSBib3JyYWRvIGRlICR7ZmlsZUFWUS5iYXNlbmFtZX1gKTtcbiAgICB0cnkge1xuICAgICAgLy8gQXNlZ3VyYXJzZSBkZSBxdWUgZmlsZUFWUSBlcyB1biBvYmpldG8gVEZpbGUgdlx1MDBFMWxpZG9cbiAgICAgIGlmIChmaWxlQVZRIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgYXdhaXQgYXBwLnZhdWx0LmRlbGV0ZShmaWxlQVZRKTsgLy8gQm9ycmFyIGVsIGFyY2hpdm9cbiAgICAgICAgY29uc29sZS5sb2coYCR7ZmlsZUFWUS5iYXNlbmFtZX0gaGEgc2lkbyBib3JyYWRvIGNvbiBcdTAwRTl4aXRvLmApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICBgJHtmaWxlQVZRLmJhc2VuYW1lfSBubyBlcyB1biBhcmNoaXZvIHZcdTAwRTFsaWRvIG8gbm8gZXhpc3RlLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGFsIGludGVudGFyIGJvcnJhciAke2ZpbGVBVlEuYmFzZW5hbWV9OmAsIGVycik7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgYWN0dWFsaXphckFWUShmaWxlQVZRKSB7XG4gICAgY29uc29sZS5sb2coYExvZ2ljYSBkZSBhY3R1YWxpemFjaVx1MDBGM24gZGUgZXN0YWRvIGRlICR7ZmlsZUFWUS5iYXNlbmFtZX1gKTtcblxuICAgIC8vIE9idGVuZXIgYWNjZXNvIGEgZnVuY2lvbmVzIGRlbCBzaXN0ZW1hIHkgbWV0YWRhdGFDYWNoZVxuICAgIGxldCBzdWdnZXN0ZXIgPSB0aGlzLnBsdWdpbi50cC5zeXN0ZW0uc3RhdGljX2Z1bmN0aW9ucy5nZXQoXCJzdWdnZXN0ZXJcIik7XG4gICAgbGV0IG1ldGFkYXRhQ2FjaGUgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZUFWUSk7XG5cbiAgICAvLyBJbmljaWFsaXphciB2YXJpYWJsZXNcbiAgICBsZXQgZXN0YWRvQWN0dWFsID0gXCJcIjtcbiAgICBsZXQgbnVldm9Fc3RhZG8gPSBcIlwiO1xuXG4gICAgLy8gT2J0ZW5lciBlbCBlc3RhZG8gYWN0dWFsIGRlc2RlIGVsIGZyb250bWF0dGVyIHVzYW5kbyBtZXRhZGF0YUNhY2hlXG4gICAgaWYgKFxuICAgICAgbWV0YWRhdGFDYWNoZS5mcm9udG1hdHRlciAmJlxuICAgICAgbWV0YWRhdGFDYWNoZS5mcm9udG1hdHRlci5oYXNPd25Qcm9wZXJ0eShcImVzdGFkb1wiKVxuICAgICkge1xuICAgICAgZXN0YWRvQWN0dWFsID0gbWV0YWRhdGFDYWNoZS5mcm9udG1hdHRlci5lc3RhZG87XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiTm8gc2UgZW5jb250clx1MDBGMyBlbCBlc3RhZG8gYWN0dWFsIGVuIGVsIGZyb250bWF0dGVyLlwiKTtcbiAgICAgIHJldHVybjsgLy8gU2FsaXIgc2kgbm8gaGF5IGVzdGFkbyBhY3R1YWxcbiAgICB9XG5cbiAgICAvLyBNb3N0cmFyIGVsIHN1Z2dlc3RlciBwYXJhIHNlbGVjY2lvbmFyIGVsIG51ZXZvIGVzdGFkb1xuICAgIHRyeSB7XG4gICAgICBudWV2b0VzdGFkbyA9IGF3YWl0IHN1Z2dlc3RlcihcbiAgICAgICAgW1wiXHVEODNEXHVERDM1IC0+IEFyY2hpdmFkb1wiLCBcIlx1RDgzRFx1REZFMiAtPiBBY3Rpdm9cIiwgXCJcdUQ4M0RcdURGRTEgLT4gRW4gUGF1c2FcIiwgXCJcdUQ4M0RcdUREMzQgLT4gRGV0ZW5pZG9cIl0sIC8vIG9wY2lvbmVzIHBhcmEgbW9zdHJhclxuICAgICAgICBbXCJcdUQ4M0RcdUREMzVcIiwgXCJcdUQ4M0RcdURGRTJcIiwgXCJcdUQ4M0RcdURGRTFcIiwgXCJcdUQ4M0RcdUREMzRcIl0sIC8vIHZhbG9yZXMgYSByZXRvcm5hclxuICAgICAgICBmYWxzZSwgLy8gcGVybWl0ZSBzZWxlY2NpXHUwMEYzbiBtXHUwMEZBbHRpcGxlXG4gICAgICAgIGAke2ZpbGVBVlEuYmFzZW5hbWV9IGVzdFx1MDBFMSAke2VzdGFkb0FjdHVhbH0uIEFzaWduYXIgZXN0YWRvOmAgLy8gbWVuc2FqZVxuICAgICAgKTtcblxuICAgICAgLy8gVmVyaWZpY2FyIHNpIHNlIHNlbGVjY2lvblx1MDBGMyB1biBudWV2byBlc3RhZG9cbiAgICAgIGlmICghbnVldm9Fc3RhZG8pIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJObyBzZSBzZWxlY2Npb25cdTAwRjMgdW4gbnVldm8gZXN0YWRvLlwiKTtcbiAgICAgICAgcmV0dXJuOyAvLyBTYWxpciBzaSBubyBzZSBzZWxlY2Npb25cdTAwRjMgdW4gbnVldm8gZXN0YWRvXG4gICAgICB9XG5cbiAgICAgIC8vIEFjdHVhbGl6YXIgZWwgZXN0YWRvIGVuIGVsIGZyb250bWF0dGVyXG4gICAgICBhd2FpdCBhcHAuZmlsZU1hbmFnZXIucHJvY2Vzc0Zyb250TWF0dGVyKGZpbGVBVlEsIChmcm9udG1hdHRlcikgPT4ge1xuICAgICAgICBpZiAoZnJvbnRtYXR0ZXIuaGFzT3duUHJvcGVydHkoXCJlc3RhZG9cIikpIHtcbiAgICAgICAgICBmcm9udG1hdHRlci5lc3RhZG8gPSBudWV2b0VzdGFkbzsgLy8gQWN0dWFsaXphciBlbCBlc3RhZG9cbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkVzdGFkbyBhY3R1YWxpemFkbyBjb24gXHUwMEU5eGl0byBhOlwiLCBudWV2b0VzdGFkbyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIGFjdHVhbGl6YXIgZWwgZXN0YWRvIGVuIGVsIGZyb250bWF0dGVyOlwiLCBlcnIpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNyZWFyQ2FycGV0YShmb2xkZXJQYXRoOiBzdHJpbmcpIHtcbiAgICB0cnkge1xuICAgICAgLy8gVmVyaWZpY2Egc2kgbGEgY2FycGV0YSB5YSBleGlzdGVcblxuICAgICAgY29uc3QgY2FycGV0YUV4aXN0ZW50ZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZm9sZGVyUGF0aCk7XG4gICAgICBpZiAoY2FycGV0YUV4aXN0ZW50ZSBpbnN0YW5jZW9mIFRGb2xkZXIpIHtcbiAgICAgICAgY29uc29sZS5sb2coYExhIGNhcnBldGEgJyR7Zm9sZGVyUGF0aH0nIHlhIGV4aXN0ZS5gKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gQ3JlYSBsYSBjYXJwZXRhXG4gICAgICBhd2FpdCBhcHAudmF1bHQuY3JlYXRlRm9sZGVyKGZvbGRlclBhdGgpO1xuICAgICAgY29uc29sZS5sb2coYENhcnBldGEgJyR7Zm9sZGVyUGF0aH0nIGNyZWFkYSBleGl0b3NhbWVudGUuYCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGFsIGNyZWFyIGxhIGNhcnBldGEgJyR7Zm9sZGVyUGF0aH0nOmAsIGVycm9yKTtcbiAgICB9XG4gIH1cblxuICAvLyBQQVJBIFBST0NFU0FSIExPUyBDT01QQVNTXG5cbiAgLy8gRnVuY2lcdTAwRjNuIHBhcmEgY3JlYXIgeSBtb3N0cmFyIGVsIGJvdFx1MDBGM24gZGUgcHJvY2VzYXIgT2JqZXRpdm9zIGRlIGxhcyBBViBhbnVhbGVzIGVuIGVsIHByb2Nlc28gZGUgQ29tcGFzcy5cbiAgYXN5bmMgbW9zdHJhckJvdG9uQ29tcGFzc0FudWFsKGR2KSB7XG4gICAgZHYuY29udGFpbmVyLmlubmVySFRNTCA9IFwiXCI7IC8vIExpbXBpYXIgZWwgY29udGVuZWRvclxuXG4gICAgY29uc3QgYm90b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGJvdG9uLnRleHRDb250ZW50ID0gXCJQcm9jZXNhciBPYmpldGl2b3MgQVYgQW51YWxcIjtcbiAgICBkdi5jb250YWluZXIuYXBwZW5kQ2hpbGQoYm90b24pO1xuXG4gICAgYm90b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHRoaXMucHJvY2VzYXJDb21wYXNzQW51YWwoZHYpOyAvLyBNb3N0cmFyIGxvcyBib3RvbmVzIGFkaWNpb25hbGVzIGFsIGhhY2VyIGNsaWNcbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgbW9zdHJhckJvdG9uQ29tcGFzc1RyaW1lc3RyYWwoZHYpIHtcbiAgICBkdi5jb250YWluZXIuaW5uZXJIVE1MID0gXCJcIjsgLy8gTGltcGlhciBlbCBjb250ZW5lZG9yXG5cbiAgICBjb25zdCBib3RvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgYm90b24udGV4dENvbnRlbnQgPSBcIlByb2Nlc2FyIE9iamV0aXZvcyBBViBUcmltZXN0cmFsZXNcIjtcbiAgICBkdi5jb250YWluZXIuYXBwZW5kQ2hpbGQoYm90b24pO1xuXG4gICAgYm90b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHRoaXMucHJvY2VzYXJDb21wYXNzVHJpbWVzdHJhbChkdik7IFxuICAgIH07XG4gIH1cblxuICBhc3luYyBwcm9jZXNhckNvbXBhc3NBbnVhbChkdikge1xuICBcbiAgICBsZXQgYVx1MDBGMW8gPSBkdi5jdXJyZW50KCkuYVx1MDBGMW87XG4gICAgY29uc3QgcmVzdWx0YWRvQVY6IEdydXBvQVZbXSA9IFtdO1xuICAgIGNvbnN0IGZpbGVDYW1wb3MgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHRoaXMucGF0aENhbXBvcyk7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChmaWxlQ2FtcG9zIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgLy8gVXNhIG1ldGFkYXRhQ2FjaGUgcGFyYSBvYnRlbmVyIGxvcyBtZXRhZGF0b3MgZGVsIGFyY2hpdm9cbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZUNhbXBvcyk7XG4gICAgICAgIGNvbnN0IGFycmVnbG9BViA9IG1ldGFkYXRhPy5mcm9udG1hdHRlcj8uQXJlYXNWaWRhIHx8IFtdO1xuICAgICAgICAvLyBSZWxsZW5hIGVsIGFycmVnbG8gY29uIGxvcyBkYXRvcyBkZWwgYXJyZWdsb1Jlc3VsdFxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcnJlZ2xvQVYpKSB7XG4gICAgICAgICAgYXJyZWdsb0FWLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pICYmIGl0ZW0ubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICAgICAgcmVzdWx0YWRvQVYucHVzaCh7XG4gICAgICAgICAgICAgICAgZ3J1cG86IGl0ZW1bMF0sXG4gICAgICAgICAgICAgICAgYXY6IGl0ZW1bMV0sXG4gICAgICAgICAgICAgICAgdGV4dG86IGl0ZW1bMF0gKyBcIiAvIFwiICsgaXRlbVsxXSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIG9idGVuaWVuZG8gZWwgYXJjaGl2byBkZSBjYW1wb3M6XCIsIGVycm9yKTtcbiAgICAgIC8vIEFxdVx1MDBFRCBtYW5lamFyXHUwMEVEYXMgZWwgZXJyb3IgY29tbyBzZWEgYXByb3BpYWRvIHBhcmEgdHUgYXBsaWNhY2lcdTAwRjNuXG4gICAgICB0aHJvdyBlcnJvcjsgLy8gTyBkZXZvbHZlciB1biBhcnJlZ2xvIHZhY1x1MDBFRG8gY29tbyByZXN1bHRhZG8gZGUgZXJyb3JcbiAgICB9XG5cbiAgICBjb25zdCBhbGxGaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG4gICAgbGV0IGJhc2VQYXRoID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX0FyZWFzVmlkYTtcblxuICAgIC8vIC0uLi0+IFJldmlzaVx1MDBGM24gZGUgZXNjZW5hcmlvcy5cbiAgICBkZWJ1Z2dlcjtcbiAgICBmb3IgKGxldCBhcmVhVmlkYSBvZiByZXN1bHRhZG9BVikge1xuICAgICAgLy8gVmVyaWZpY2Egc2kgbGEgY2FycGV0YSBleGlzdGUgZW4gbGEgdWJpY2FjaVx1MDBGM24gZXNwZWNcdTAwRURmaWNhXG4gICAgICBjb25zdCBmdWxsRm9sZGVyUGF0aCA9IGAke2Jhc2VQYXRofS8ke2FyZWFWaWRhLmF2fWA7XG4gICAgICBjb25zdCBmb2xkZXIgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZ1bGxGb2xkZXJQYXRoKTtcblxuICAgICAgLy9QMCAtPiBWZXJpZmljYSBzaSBsYSBjYXJwZXRhIHBhdGgvYXJlYVZpZGEgZXhpc3RlXG4gICAgICAvL1AwIC0gU0lcbiAgICAgIGlmIChmb2xkZXIgaW5zdGFuY2VvZiBURm9sZGVyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBMYSBjYXJwZXRhICR7YXJlYVZpZGEuYXZ9IGV4aXN0ZSBkZW50cm8gZGUgJHtiYXNlUGF0aH0uYCk7XG4gICAgICAgIC8vIEFob3JhLCB2ZXJpZmljYSBzaSBsYSBub3RhIGV4aXN0ZSBkZW50cm8gZGUgbGEgY2FycGV0YVxuICAgICAgICBjb25zdCBpbnN0YW5jZXNPZkFWID0gYXBwLnZhdWx0XG4gICAgICAgICAgLmdldE1hcmtkb3duRmlsZXMoKVxuICAgICAgICAgIC5maWx0ZXIoXG4gICAgICAgICAgICAoZmlsZSkgPT5cbiAgICAgICAgICAgICAgZmlsZS5wYXRoLmluY2x1ZGVzKGZ1bGxGb2xkZXJQYXRoKSAmJlxuICAgICAgICAgICAgICAhZmlsZS5wYXRoLmluY2x1ZGVzKFwiUGxhbnRpbGxhc1wiKSAmJlxuICAgICAgICAgICAgICAhZmlsZS5wYXRoLmluY2x1ZGVzKFwiQXJjaGl2b1wiKVxuICAgICAgICAgICk7XG4gICAgICAgIC8vIFAxIEV4aXN0ZSBub2RlQXJlYVZpZGE/XG4gICAgICAgIGNvbnN0IG5vZGVBVkV4aXN0cyA9IGluc3RhbmNlc09mQVYuc29tZShcbiAgICAgICAgICAoZmlsZSkgPT4gZmlsZS5iYXNlbmFtZSA9PT0gYXJlYVZpZGEuYXZcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBQMSBTSVxuICAgICAgICBpZiAobm9kZUFWRXhpc3RzKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICBgTGEgbm90YSAke2FyZWFWaWRhLmF2fSBleGlzdGUgZGVudHJvIGRlIGxhIGNhcnBldGEgJHthcmVhVmlkYS5hdn0uYFxuICAgICAgICAgICk7XG4gICAgICAgICAgLy8gUDIgYXJlYVZpZGEgUSBFeGlzdGU/XG4gICAgICAgICAgLy8gUHJlZ3VudGFyIEVsIG9iamV0aXZvIHkgZ3VhcmRhcmxvIGVuIGVsIG5vZG8gZGUgQVYuXG4gICAgICAgICAgYXdhaXQgdGhpcy5vYmpldGl2b0FudWFsKGFcdTAwRjFvLCBhcmVhVmlkYS5hdik7XG4gICAgICAgIH1cbiAgICAgICAgLy9QMSAtIE5PIChub2RlQXJlYVZpZGEgbm8gRXhpc3RlKVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAvLyBDYXNvIDMgeSA0XG4gICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICBgTGEgbm90YSAke2FyZWFWaWRhLmF2fSBubyBleGlzdGUgZGVudHJvIGRlIGxhIGNhcnBldGEgJHthcmVhVmlkYS5hdn0uYFxuICAgICAgICAgICk7XG4gICAgICAgICAgLy8gUDMgQWdyZWdhciBOb2RvIEFyZWEgVmlkYT9cbiAgICAgICAgICBsZXQgbkFWID0gYXdhaXQgdGhpcy5hZ3JlZ2FyTm9kb0FyZWFWaWRhKGFyZWFWaWRhKTsgLy8gUXVpZXJlcyBBZ3JlZ2FyIGVzdGEgQVYgYSB0dSBzaXN0ZW1hIGRlIEdlc3RpXHUwMEYzbj9cbiAgICAgICAgICAvL1AzIC0+IFNJXG4gICAgICAgICAgaWYgKG5BVikge1xuICAgICAgICAgICAgLy8gUDIgLi4gLT4gU2kgeSBOb1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5vYmpldGl2b0FudWFsKGFcdTAwRjFvLCBhcmVhVmlkYS5hdik7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vUDMgLT4gTk9cbiAgICAgICAgICBlbHNlIGlmIChuQVYgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlOyAvL1NlbnRlbmNpYSBxdWUgZGViZSBwYXNhciBhbCBzaWd1aWVudGUgZWxlbWVudG8gZGVsIGNpY2xvIGZvci5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBFbiBjYXNvIGRlIHF1ZSBzZSBkZSBlc2NhcGUuXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBQTyAtPiBOTyAoTGEgQ2FycGV0YSBubyBleGlzdGUpXG4gICAgICBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgYExhIGNhcnBldGEgJHthcmVhVmlkYS5hdn0gbm8gZXhpc3RlIGFcdTAwRkFuIGRlbnRybyBkZSAke2Jhc2VQYXRofS5gXG4gICAgICAgICk7XG4gICAgICAgIC8vIFAzIEFncmVnYXIgTm9kbyBBcmVhIFZpZGE/XG4gICAgICAgIGxldCBuQVYgPSBhd2FpdCB0aGlzLmFncmVnYXJOb2RvQXJlYVZpZGEoYXJlYVZpZGEpOyAvLyBRdWllcmVzIEFncmVnYXIgZXN0YSBBViBhIHR1IHNpc3RlbWEgZGUgR2VzdGlcdTAwRjNuP1xuICAgICAgICAvLyBQMyAtPiBTSVxuICAgICAgICBpZiAobkFWKSB7XG4gICAgICAgICAgLy8gUDJcbiAgICAgICAgICBhd2FpdCB0aGlzLm9iamV0aXZvQW51YWwoYVx1MDBGMW8sIGFyZWFWaWRhLmF2KTtcbiAgICAgICAgfVxuICAgICAgICAvL1AzIC0+IE5PXG4gICAgICAgIGVsc2UgaWYgKG5BViA9PSBmYWxzZSkge1xuICAgICAgICAgIGNvbnRpbnVlOyAvL1NlbnRlbmNpYSBxdWUgZGViZSBwYXNhciBhbCBzaWd1aWVudGUgZWxlbWVudG8gZGVsIGNpY2xvIGZvci5cbiAgICAgICAgfVxuICAgICAgICAvLyBQMyAtPiBFc2NhcGVcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgcmV0dXJuOyAvLyBFbiBjYXNvIGRlIHF1ZSBzZSBkZSBlc2NhcGUuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vIEZpbiBGb3IgQXJlYXNWaWRhIGZpbGVDYW1wb3NcbiAgfSAvLyBNZXRvZG8gUHJvY2VzYXIgQ29tcGFzcyBBbnVhbFxuXG4gIGFzeW5jIHByb2Nlc2FyQ29tcGFzc1RyaW1lc3RyYWwoZHYpIHtcbiAgICBkZWJ1Z2dlcjtcbiAgICBsZXQgdHJpbWVzdHJlID0gZHYuY3VycmVudCgpLnRyaW1lc3RyZTtcbiAgICBjb25zdCByZXN1bHRhZG9BVjogR3J1cG9BVltdID0gW107XG4gICAgY29uc3QgZmlsZUNhbXBvcyA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgodGhpcy5wYXRoQ2FtcG9zKTtcbiAgICB0cnkge1xuICAgICAgaWYgKGZpbGVDYW1wb3MgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAvLyBVc2EgbWV0YWRhdGFDYWNoZSBwYXJhIG9idGVuZXIgbG9zIG1ldGFkYXRvcyBkZWwgYXJjaGl2b1xuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlQ2FtcG9zKTtcbiAgICAgICAgY29uc3QgYXJyZWdsb0FWID0gbWV0YWRhdGE/LmZyb250bWF0dGVyPy5BcmVhc1ZpZGEgfHwgW107XG4gICAgICAgIC8vIFJlbGxlbmEgZWwgYXJyZWdsbyBjb24gbG9zIGRhdG9zIGRlbCBhcnJlZ2xvUmVzdWx0XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFycmVnbG9BVikpIHtcbiAgICAgICAgICBhcnJlZ2xvQVYuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkgJiYgaXRlbS5sZW5ndGggPj0gMikge1xuICAgICAgICAgICAgICByZXN1bHRhZG9BVi5wdXNoKHtcbiAgICAgICAgICAgICAgICBncnVwbzogaXRlbVswXSxcbiAgICAgICAgICAgICAgICBhdjogaXRlbVsxXSxcbiAgICAgICAgICAgICAgICB0ZXh0bzogaXRlbVswXSArIFwiIC8gXCIgKyBpdGVtWzFdLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igb2J0ZW5pZW5kbyBlbCBhcmNoaXZvIGRlIGNhbXBvczpcIiwgZXJyb3IpO1xuICAgICAgLy8gQXF1XHUwMEVEIG1hbmVqYXJcdTAwRURhcyBlbCBlcnJvciBjb21vIHNlYSBhcHJvcGlhZG8gcGFyYSB0dSBhcGxpY2FjaVx1MDBGM25cbiAgICAgIHRocm93IGVycm9yOyAvLyBPIGRldm9sdmVyIHVuIGFycmVnbG8gdmFjXHUwMEVEbyBjb21vIHJlc3VsdGFkbyBkZSBlcnJvclxuICAgIH1cblxuICAgIGNvbnN0IGFsbEZpbGVzID0gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcbiAgICBsZXQgYmFzZVBhdGggPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfQXJlYXNWaWRhO1xuXG4gICAgLy8gLS4uLT4gUmV2aXNpXHUwMEYzbiBkZSBlc2NlbmFyaW9zLlxuICAgIGZvciAobGV0IGFyZWFWaWRhIG9mIHJlc3VsdGFkb0FWKSB7XG4gICAgICAvLyBWZXJpZmljYSBzaSBsYSBjYXJwZXRhIGV4aXN0ZSBlbiBsYSB1YmljYWNpXHUwMEYzbiBlc3BlY1x1MDBFRGZpY2FcbiAgICAgIGNvbnN0IGZ1bGxGb2xkZXJQYXRoID0gYCR7YmFzZVBhdGh9LyR7YXJlYVZpZGEuYXZ9YDtcbiAgICAgIGNvbnN0IGZvbGRlciA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZnVsbEZvbGRlclBhdGgpO1xuXG4gICAgICAvL1AwIC0+IFZlcmlmaWNhIHNpIGxhIGNhcnBldGEgcGF0aC9hcmVhVmlkYSBleGlzdGVcbiAgICAgIC8vUDAgLSBTSVxuICAgICAgaWYgKGZvbGRlciBpbnN0YW5jZW9mIFRGb2xkZXIpIHtcbiAgICAgICAgY29uc29sZS5sb2coYExhIGNhcnBldGEgJHthcmVhVmlkYS5hdn0gZXhpc3RlIGRlbnRybyBkZSAke2Jhc2VQYXRofS5gKTtcbiAgICAgICAgLy8gQWhvcmEsIHZlcmlmaWNhIHNpIGxhIG5vdGEgZXhpc3RlIGRlbnRybyBkZSBsYSBjYXJwZXRhXG4gICAgICAgIGNvbnN0IGluc3RhbmNlc09mQVYgPSBhcHAudmF1bHRcbiAgICAgICAgICAuZ2V0TWFya2Rvd25GaWxlcygpXG4gICAgICAgICAgLmZpbHRlcihcbiAgICAgICAgICAgIChmaWxlKSA9PlxuICAgICAgICAgICAgICBmaWxlLnBhdGguaW5jbHVkZXMoZnVsbEZvbGRlclBhdGgpICYmXG4gICAgICAgICAgICAgICFmaWxlLnBhdGguaW5jbHVkZXMoXCJQbGFudGlsbGFzXCIpICYmXG4gICAgICAgICAgICAgICFmaWxlLnBhdGguaW5jbHVkZXMoXCJBcmNoaXZvXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgLy8gUDEgRXhpc3RlIG5vZGVBcmVhVmlkYT9cbiAgICAgICAgY29uc3Qgbm9kZUFWRXhpc3RzID0gaW5zdGFuY2VzT2ZBVi5zb21lKFxuICAgICAgICAgIChmaWxlKSA9PiBmaWxlLmJhc2VuYW1lID09PSBhcmVhVmlkYS5hdlxuICAgICAgICApO1xuXG4gICAgICAgIC8vIFAxIFNJXG4gICAgICAgIGlmIChub2RlQVZFeGlzdHMpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgIGBMYSBub3RhICR7YXJlYVZpZGEuYXZ9IGV4aXN0ZSBkZW50cm8gZGUgbGEgY2FycGV0YSAke2FyZWFWaWRhLmF2fS5gXG4gICAgICAgICAgKTtcbiAgICAgICAgICAvLyBQMiBhcmVhVmlkYSBRIEV4aXN0ZT9cbiAgICAgICAgICAvLyBQcmVndW50YXIgRWwgb2JqZXRpdm8geSBndWFyZGFybG8gZW4gZWwgbm9kbyBkZSBBVi5cbiAgICAgICAgICBhd2FpdCB0aGlzLm9iamV0aXZvVHJpbWVzdHJhbCh0cmltZXN0cmUsIGFyZWFWaWRhLmF2KTtcbiAgICAgICAgfVxuICAgICAgICAvL1AxIC0gTk8gKG5vZGVBcmVhVmlkYSBubyBFeGlzdGUpXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIC8vIENhc28gMyB5IDRcbiAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgIGBMYSBub3RhICR7YXJlYVZpZGEuYXZ9IG5vIGV4aXN0ZSBkZW50cm8gZGUgbGEgY2FycGV0YSAke2FyZWFWaWRhLmF2fS5gXG4gICAgICAgICAgKTtcbiAgICAgICAgICAvLyBQMyBBZ3JlZ2FyIE5vZG8gQXJlYSBWaWRhP1xuICAgICAgICAgIGxldCBuQVYgPSBhd2FpdCB0aGlzLmFncmVnYXJOb2RvQXJlYVZpZGEoYXJlYVZpZGEpOyAvLyBRdWllcmVzIEFncmVnYXIgZXN0YSBBViBhIHR1IHNpc3RlbWEgZGUgR2VzdGlcdTAwRjNuP1xuICAgICAgICAgIC8vUDMgLT4gU0lcbiAgICAgICAgICBpZiAobkFWKSB7XG4gICAgICAgICAgICAvLyBQMiAuLiAtPiBTaSB5IE5vXG4gICAgICAgICAgICBhd2FpdCB0aGlzLm9iamV0aXZvVHJpbWVzdHJhbCh0cmltZXN0cmUsIGFyZWFWaWRhLmF2KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy9QMyAtPiBOT1xuICAgICAgICAgIGVsc2UgaWYgKG5BViA9PSBmYWxzZSkge1xuICAgICAgICAgICAgY29udGludWU7IC8vU2VudGVuY2lhIHF1ZSBkZWJlIHBhc2FyIGFsIHNpZ3VpZW50ZSBlbGVtZW50byBkZWwgY2ljbG8gZm9yLlxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47IC8vIEVuIGNhc28gZGUgcXVlIHNlIGRlIGVzY2FwZS5cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFBPIC0+IE5PIChMYSBDYXJwZXRhIG5vIGV4aXN0ZSlcbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICBgTGEgY2FycGV0YSAke2FyZWFWaWRhLmF2fSBubyBleGlzdGUgYVx1MDBGQW4gZGVudHJvIGRlICR7YmFzZVBhdGh9LmBcbiAgICAgICAgKTtcbiAgICAgICAgLy8gUDMgQWdyZWdhciBOb2RvIEFyZWEgVmlkYT9cbiAgICAgICAgbGV0IG5BViA9IGF3YWl0IHRoaXMuYWdyZWdhck5vZG9BcmVhVmlkYShhcmVhVmlkYSk7IC8vIFF1aWVyZXMgQWdyZWdhciBlc3RhIEFWIGEgdHUgc2lzdGVtYSBkZSBHZXN0aVx1MDBGM24/XG4gICAgICAgIC8vIFAzIC0+IFNJXG4gICAgICAgIGlmIChuQVYpIHtcbiAgICAgICAgICAvLyBQMlxuICAgICAgICAgIGF3YWl0IHRoaXMub2JqZXRpdm9UcmltZXN0cmFsKHRyaW1lc3RyZSwgYXJlYVZpZGEuYXYpO1xuICAgICAgICB9XG4gICAgICAgIC8vUDMgLT4gTk9cbiAgICAgICAgZWxzZSBpZiAobkFWID09IGZhbHNlKSB7XG4gICAgICAgICAgY29udGludWU7IC8vU2VudGVuY2lhIHF1ZSBkZWJlIHBhc2FyIGFsIHNpZ3VpZW50ZSBlbGVtZW50byBkZWwgY2ljbG8gZm9yLlxuICAgICAgICB9XG4gICAgICAgIC8vIFAzIC0+IEVzY2FwZVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICByZXR1cm47IC8vIEVuIGNhc28gZGUgcXVlIHNlIGRlIGVzY2FwZS5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gRmluIEZvciBBcmVhc1ZpZGEgZmlsZUNhbXBvc1xuICB9IC8vIE1ldG9kbyBQcm9jZXNhciBDb21wYXNzIFRyaW1lc3RyYWwgXG5cblxuICBhc3luYyBvYmpldGl2b0FudWFsKGFcdTAwRjFvOiBhbnksIGFyZWFWaWRhOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBCdXNjYXIgc2kgeWEgaGF5IG9iamV0aXZvcyBjcmVhZG9zIHBhcmEgZXNlIGFcdTAwRjFvIHkgZXNhIGFyZWEgZGUgdmlkYS5cblxuICAgIGNvbnN0IGZvbGRlck9iaiA9IHRoaXMucGx1Z2luLnNldHRpbmdzW1wiZm9sZGVyX09iakNvbXBhc3NBbnVhbFwiXTtcbiAgICBjb25zdCBmaWxlc09iaiA9IGFwcC52YXVsdFxuICAgICAgLmdldE1hcmtkb3duRmlsZXMoKVxuICAgICAgLmZpbHRlcihcbiAgICAgICAgKGZpbGUpID0+XG4gICAgICAgICAgZmlsZS5wYXRoLmluY2x1ZGVzKGZvbGRlck9iaikgJiZcbiAgICAgICAgICAhZmlsZS5wYXRoLmluY2x1ZGVzKFwiUGxhbnRpbGxhc1wiKSAmJlxuICAgICAgICAgICFmaWxlLnBhdGguaW5jbHVkZXMoXCJBcmNoaXZvXCIpXG4gICAgICApO1xuICAgIGxldCBvYmpDcmVhZG9zID0gW107XG5cbiAgICBmb3IgKGxldCBmaWxlIG9mIGZpbGVzT2JqKSB7XG4gICAgICBkZWJ1Z2dlcjtcbiAgICAgIGxldCBtZXRhZGF0YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXI7XG4gICAgICBjb25zdCByZWdleCA9IC9cXFtcXFtcXHMqKC4qPylcXHMqXFxdXFxdLztcbiAgICAgIGxldCBmaWxlQVYgPSBtZXRhZGF0YT8uYXJlYVZpZGEubWF0Y2gocmVnZXgpWzFdO1xuICAgICAgY29uc3Qgc2FtZUFWID0gZmlsZUFWID09PSBhcmVhVmlkYTtcblxuICAgICAgaWYgKG1ldGFkYXRhPy5hXHUwMEYxbyA9PT0gYVx1MDBGMW8gJiYgc2FtZUFWKSB7XG4gICAgICAgIGxldCBvYmpBY3Rpdm8gPSB7IGZpbGUgfTsgLy8gQXN1bWllbmRvIHF1ZSBxdWllcmVzIGd1YXJkYXIgZWwgcGF0aCBkZWwgYXJjaGl2b1xuICAgICAgICBPYmplY3QuYXNzaWduKG9iakFjdGl2bywgbWV0YWRhdGEpOyAvLyBBZ3JlZ2EgZWwgbWV0YWRhdGEgYWwgb2JqZXRvIHFBY3Rpdm9cbiAgICAgICAgb2JqQ3JlYWRvcy5wdXNoKG9iakFjdGl2byk7IC8vIEFcdTAwRjFhZGUgZWwgcmVnaXN0cm8gYWN0aXZvIGFsIGFycmF5XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBwcm9tcHQgPSB0aGlzLnBsdWdpbi50cC5zeXN0ZW0uc3RhdGljX2Z1bmN0aW9ucy5nZXQoXCJwcm9tcHRcIik7XG4gICAgbGV0IHN1Z2dlc3RlciA9IHRoaXMucGx1Z2luLnRwLnN5c3RlbS5zdGF0aWNfZnVuY3Rpb25zLmdldChcInN1Z2dlc3RlclwiKTtcbiAgICBsZXQgb2JqZXRpdm9zID0gW107XG4gICAgbGV0IGRlc2VhQWdyZWdhck9iamV0aXZvO1xuICAgIGlmIChvYmpDcmVhZG9zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gU2kgaGF5IG9iamV0aXZvcyBjcmVhZG9zLlxuICAgICAgICAvLyBMb2dpY2EgY3VhbmRvIHlhIGhheSBvYmpldGl2b3MgY3JlYWRvcy5cbiAgICAgIGxldCBuZXh0U3RlcCA9IGF3YWl0IHN1Z2dlc3RlcihcbiAgICAgICAgW1xuICAgICAgICAgIFwiQWdyZWdhciBPYmpldGl2b3NcIixcbiAgICAgICAgICBcIkJvcnJhciB5IENyZWFyIGRlIG51ZXZvIGxvcyBvYmpldGl2b3NcIixcbiAgICAgICAgICBcIkRlamFyIGxvcyBvYmpldGl2b3MgY29tbyBlc3RcdTAwRTFuIFwiLFxuICAgICAgICBdLFxuICAgICAgICBbXCJ1cGRcIiwgXCJkZWwrY3JlXCIsIFwiY29udGludWVcIl0sXG4gICAgICAgIHRydWUsXG4gICAgICAgIGBcdTAwQkZZYSBoYXkgJHtvYmpDcmVhZG9zLmxlbmd0aH0gb2JqZXRpdm9zIGNyZWFkb3MgcGFyYSAke2FyZWFWaWRhfSBlbiBlbCAke2FcdTAwRjFvfS4gRWxpZ2UgdW5hIG9wY2lcdTAwRjNuOmBcbiAgICAgICk7XG5cbiAgICAgICAgc3dpdGNoIChuZXh0U3RlcCkge1xuICAgICAgICAgIGNhc2UgXCJ1cGRcIjpcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgbGV0IG9iamV0aXZvID0gYXdhaXQgdGhpcy5jcmVhck9iamV0aXZvKGFyZWFWaWRhLCBhXHUwMEYxbyk7XG5cbiAgICAgICAgICAgICAgLy8gUHJlZ3VudGFyIG51ZXZhbWVudGUgc2kgZGVzZWEgYWdyZWdhciBvdHJvIG9iamV0aXZvLlxuICAgICAgICAgICAgICBkZXNlYUFncmVnYXJPYmpldGl2byA9IGF3YWl0IHN1Z2dlc3RlcihcbiAgICAgICAgICAgICAgICBbXCJTaVwiLCBcIk5vXCJdLFxuICAgICAgICAgICAgICAgIFt0cnVlLCBmYWxzZV0sXG4gICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICBgXHUwMEJGRGVzZWEgYWdyZWdhciBvdHJvIG9iamV0aXZvIHBhcmEgJHthcmVhVmlkYX0gZW4gJHthXHUwMEYxb30/YFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSB3aGlsZSAoZGVzZWFBZ3JlZ2FyT2JqZXRpdm8pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImRlbCtjcmVcIjpcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYm9ycmFyT2JqZXRpdm9zKG9iakNyZWFkb3MpO1xuICAgICAgICAgICAgZGVzZWFBZ3JlZ2FyT2JqZXRpdm8gPSBhd2FpdCBzdWdnZXN0ZXIoXG4gICAgICAgICAgICAgIFtcIlNpXCIsIFwiTm9cIl0sXG4gICAgICAgICAgICAgIFt0cnVlLCBmYWxzZV0sXG4gICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgIGBcdTAwQkZEZXNlYSBhZ3JlZ2FyIGFsZ1x1MDBGQW4gb2JqZXRpdm8gcGFyYSAke2FyZWFWaWRhfSBlbiAke2FcdTAwRjFvfT9gXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgd2hpbGUgKGRlc2VhQWdyZWdhck9iamV0aXZvKSB7XG4gICAgICAgICAgICAgIGxldCBvYmpldGl2byA9IGF3YWl0IHRoaXMuY3JlYXJPYmpldGl2byhhcmVhVmlkYSwgYVx1MDBGMW8pO1xuICAgICAgICAgICAgICAvLyBCb3JyYXIgbG9zIG9iamV0aXZvcyBhbnRlcmlvcmVzLlxuICAgICAgICAgICAgICAvLyBQcmVndW50YXIgbnVldmFtZW50ZSBzaSBkZXNlYSBhZ3JlZ2FyIG90cm8gb2JqZXRpdm8uXG4gICAgICAgICAgICAgIGRlc2VhQWdyZWdhck9iamV0aXZvID0gYXdhaXQgc3VnZ2VzdGVyKFxuICAgICAgICAgICAgICAgIFtcIlNpXCIsIFwiTm9cIl0sXG4gICAgICAgICAgICAgICAgW3RydWUsIGZhbHNlXSxcbiAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgIGBcdTAwQkZEZXNlYSBhZ3JlZ2FyIG90cm8gb2JqZXRpdm8gcGFyYSAke2FyZWFWaWRhfSBlbiAke2FcdTAwRjFvfT9gXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiY29udGludWVcIjpcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBDb250aW51YXIgc2luIGhhY2VyIG5hZGEgY29uIGxvcyBvYmpldGl2b3MgZGUgJHthcmVhVmlkYX1gKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBObyBoYXkgb2JqZXRpdm9zIGNyZWFkb3MuXG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gVmVyaWZpY2FyIHNpIGRlc2VhIGFncmVnYXIgYWxnXHUwMEZBbiBvYmpldGl2by5cbiAgICAgICAgZGVzZWFBZ3JlZ2FyT2JqZXRpdm8gPSBhd2FpdCBzdWdnZXN0ZXIoXG4gICAgICAgICAgW1wiU2lcIiwgXCJOb1wiXSxcbiAgICAgICAgICBbdHJ1ZSwgZmFsc2VdLFxuICAgICAgICAgIHRydWUsXG4gICAgICAgICAgYFx1MDBCRkRlc2VhIGFncmVnYXIgYWxnXHUwMEZBbiBvYmpldGl2byBwYXJhICR7YXJlYVZpZGF9IGVuICR7YVx1MDBGMW99P2BcbiAgICAgICAgKTtcbiAgICAgICAgd2hpbGUgKGRlc2VhQWdyZWdhck9iamV0aXZvKSB7XG4gICAgICAgICAgbGV0IG9iamV0aXZvID0gYXdhaXQgdGhpcy5jcmVhck9iamV0aXZvKGFyZWFWaWRhLCBhXHUwMEYxbyk7XG4gICAgICAgICAgb2JqZXRpdm9zLnB1c2goW29iamV0aXZvXSk7XG5cbiAgICAgICAgICAvLyBQcmVndW50YXIgbnVldmFtZW50ZSBzaSBkZXNlYSBhZ3JlZ2FyIG90cm8gb2JqZXRpdm8uXG4gICAgICAgICAgZGVzZWFBZ3JlZ2FyT2JqZXRpdm8gPSBhd2FpdCBzdWdnZXN0ZXIoXG4gICAgICAgICAgICBbXCJTaVwiLCBcIk5vXCJdLFxuICAgICAgICAgICAgW3RydWUsIGZhbHNlXSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICBgXHUwMEJGRGVzZWEgYWdyZWdhciBvdHJvIG9iamV0aXZvIHBhcmEgJHthcmVhVmlkYX0gZW4gJHthXHUwMEYxb30/YFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgfSAvLyBNXHUwMEU5dG9kbyBvYmpldGl2b0FudWFsLlxuICBcbiAgYXN5bmMgb2JqZXRpdm9UcmltZXN0cmFsKHRyaW1lc3RyZTogYW55LCBhcmVhVmlkYTogYW55KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgZGVidWdnZXI7XG4gICAgLy8gQnVzY2FyIHNpIHlhIGhheSBvYmpldGl2b3MgY3JlYWRvcyBwYXJhIGVzZSBhXHUwMEYxbyB5IGVzYSBhcmVhIGRlIHZpZGEuXG5cbiAgICBjb25zdCBmb2xkZXJPYmogPSB0aGlzLnBsdWdpbi5zZXR0aW5nc1tcImZvbGRlcl9PYmpDb21wYXNzQW51YWxcIl07XG4gICAgY29uc3QgZmlsZXNPYmogPSBhcHAudmF1bHRcbiAgICAgIC5nZXRNYXJrZG93bkZpbGVzKClcbiAgICAgIC5maWx0ZXIoXG4gICAgICAgIChmaWxlKSA9PlxuICAgICAgICAgIGZpbGUucGF0aC5pbmNsdWRlcyhmb2xkZXJPYmopICYmXG4gICAgICAgICAgIWZpbGUucGF0aC5pbmNsdWRlcyhcIlBsYW50aWxsYXNcIikgJiZcbiAgICAgICAgICAhZmlsZS5wYXRoLmluY2x1ZGVzKFwiQXJjaGl2b1wiKVxuICAgICAgKTtcbiAgICBsZXQgb2JqQ3JlYWRvcyA9IFtdO1xuXG4gICAgZm9yIChsZXQgZmlsZSBvZiBmaWxlc09iaikge1xuICAgICAgZGVidWdnZXI7XG4gICAgICBsZXQgbWV0YWRhdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk/LmZyb250bWF0dGVyO1xuICAgICAgY29uc3QgcmVnZXggPSAvXFxbXFxbXFxzKiguKj8pXFxzKlxcXVxcXS87XG4gICAgICBsZXQgZmlsZUFWID0gbWV0YWRhdGE/LmFyZWFWaWRhLm1hdGNoKHJlZ2V4KVsxXTtcbiAgICAgIGNvbnN0IHNhbWVBViA9IGZpbGVBViA9PT0gYXJlYVZpZGE7XG5cbiAgICAgIGlmIChtZXRhZGF0YT8udHJpbWVzdHJlPy5wYXRoICYmIHR5cGVvZiAobWV0YWRhdGEudHJpbWVzdHJlLnBhdGggPT09ICdzdHJpbmcnKSAmJiAgbWV0YWRhdGEudHJpbWVzdHJlLnBhdGguaW5jbHVkZXModHJpbWVzdHJlKSAmJiBzYW1lQVYpIHtcbiAgICAgICAgbGV0IG9iakFjdGl2byA9IHsgZmlsZSB9OyAvLyBBc3VtaWVuZG8gcXVlIHF1aWVyZXMgZ3VhcmRhciBlbCBwYXRoIGRlbCBhcmNoaXZvXG4gICAgICAgIE9iamVjdC5hc3NpZ24ob2JqQWN0aXZvLCBtZXRhZGF0YSk7IC8vIEFncmVnYSBlbCBtZXRhZGF0YSBhbCBvYmpldG8gcUFjdGl2b1xuICAgICAgICBvYmpDcmVhZG9zLnB1c2gob2JqQWN0aXZvKTsgLy8gQVx1MDBGMWFkZSBlbCByZWdpc3RybyBhY3Rpdm8gYWwgYXJyYXlcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IHByb21wdCA9IHRoaXMucGx1Z2luLnRwLnN5c3RlbS5zdGF0aWNfZnVuY3Rpb25zLmdldChcInByb21wdFwiKTtcbiAgICBsZXQgc3VnZ2VzdGVyID0gdGhpcy5wbHVnaW4udHAuc3lzdGVtLnN0YXRpY19mdW5jdGlvbnMuZ2V0KFwic3VnZ2VzdGVyXCIpO1xuICAgIGxldCBvYmpldGl2b3MgPSBbXTtcbiAgICBsZXQgZGVzZWFBZ3JlZ2FyT2JqZXRpdm87XG4gICAgaWYgKG9iakNyZWFkb3MubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyBTaSBoYXkgb2JqZXRpdm9zIGNyZWFkb3MuXG4gICAgICAgIC8vIExvZ2ljYSBjdWFuZG8geWEgaGF5IG9iamV0aXZvcyBjcmVhZG9zLlxuICAgICAgbGV0IG5leHRTdGVwID0gYXdhaXQgc3VnZ2VzdGVyKFxuICAgICAgICBbXG4gICAgICAgICAgXCJBZ3JlZ2FyIE9iamV0aXZvc1wiLFxuICAgICAgICAgIFwiQm9ycmFyIHkgQ3JlYXIgZGUgbnVldm8gbG9zIG9iamV0aXZvc1wiLFxuICAgICAgICAgIFwiRGVqYXIgbG9zIG9iamV0aXZvcyBjb21vIGVzdFx1MDBFMW4gXCIsXG4gICAgICAgIF0sXG4gICAgICAgIFtcInVwZFwiLCBcImRlbCtjcmVcIiwgXCJjb250aW51ZVwiXSxcbiAgICAgICAgdHJ1ZSxcbiAgICAgICAgYFx1MDBCRllhIGhheSAke29iakNyZWFkb3MubGVuZ3RofSBvYmpldGl2b3MgY3JlYWRvcyBwYXJhICR7YXJlYVZpZGF9IGVuIGVsICR7dHJpbWVzdHJlfS4gRWxpZ2UgdW5hIG9wY2lcdTAwRjNuOmBcbiAgICAgICk7XG5cbiAgICAgICAgc3dpdGNoIChuZXh0U3RlcCkge1xuICAgICAgICAgIGNhc2UgXCJ1cGRcIjpcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgbGV0IG9iamV0aXZvID0gYXdhaXQgdGhpcy5jcmVhck9iamV0aXZvVHJpbWVzdHJlKGFyZWFWaWRhLCB0cmltZXN0cmUpO1xuXG4gICAgICAgICAgICAgIC8vIFByZWd1bnRhciBudWV2YW1lbnRlIHNpIGRlc2VhIGFncmVnYXIgb3RybyBvYmpldGl2by5cbiAgICAgICAgICAgICAgZGVzZWFBZ3JlZ2FyT2JqZXRpdm8gPSBhd2FpdCBzdWdnZXN0ZXIoXG4gICAgICAgICAgICAgICAgW1wiU2lcIiwgXCJOb1wiXSxcbiAgICAgICAgICAgICAgICBbdHJ1ZSwgZmFsc2VdLFxuICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgYFx1MDBCRkRlc2VhIGFncmVnYXIgb3RybyBvYmpldGl2byBwYXJhICR7YXJlYVZpZGF9IGVuICR7dHJpbWVzdHJlfT9gXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IHdoaWxlIChkZXNlYUFncmVnYXJPYmpldGl2byk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZGVsK2NyZVwiOlxuICAgICAgICAgICAgYXdhaXQgdGhpcy5ib3JyYXJPYmpldGl2b3Mob2JqQ3JlYWRvcyk7XG4gICAgICAgICAgICBkZXNlYUFncmVnYXJPYmpldGl2byA9IGF3YWl0IHN1Z2dlc3RlcihcbiAgICAgICAgICAgICAgW1wiU2lcIiwgXCJOb1wiXSxcbiAgICAgICAgICAgICAgW3RydWUsIGZhbHNlXSxcbiAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgYFx1MDBCRkRlc2VhIGFncmVnYXIgYWxnXHUwMEZBbiBvYmpldGl2byBwYXJhICR7YXJlYVZpZGF9IGVuICR7dHJpbWVzdHJlfT9gXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgd2hpbGUgKGRlc2VhQWdyZWdhck9iamV0aXZvKSB7XG4gICAgICAgICAgICAgIGxldCBvYmpldGl2byA9IGF3YWl0IHRoaXMuY3JlYXJPYmpldGl2b1RyaW1lc3RyZShhcmVhVmlkYSwgdHJpbWVzdHJlKTtcbiAgICAgICAgICAgICAgLy8gQm9ycmFyIGxvcyBvYmpldGl2b3MgYW50ZXJpb3Jlcy5cbiAgICAgICAgICAgICAgLy8gUHJlZ3VudGFyIG51ZXZhbWVudGUgc2kgZGVzZWEgYWdyZWdhciBvdHJvIG9iamV0aXZvLlxuICAgICAgICAgICAgICBkZXNlYUFncmVnYXJPYmpldGl2byA9IGF3YWl0IHN1Z2dlc3RlcihcbiAgICAgICAgICAgICAgICBbXCJTaVwiLCBcIk5vXCJdLFxuICAgICAgICAgICAgICAgIFt0cnVlLCBmYWxzZV0sXG4gICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICBgXHUwMEJGRGVzZWEgYWdyZWdhciBvdHJvIG9iamV0aXZvIHBhcmEgJHthcmVhVmlkYX0gZW4gJHt0cmltZXN0cmV9P2BcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJjb250aW51ZVwiOlxuICAgICAgICAgICAgY29uc29sZS5sb2coYENvbnRpbnVhciBzaW4gaGFjZXIgbmFkYSBjb24gbG9zIG9iamV0aXZvcyBkZSAke2FyZWFWaWRhfWApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIE5vIGhheSBvYmpldGl2b3MgY3JlYWRvcy5cbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyBWZXJpZmljYXIgc2kgZGVzZWEgYWdyZWdhciBhbGdcdTAwRkFuIG9iamV0aXZvLlxuICAgICAgICBkZXNlYUFncmVnYXJPYmpldGl2byA9IGF3YWl0IHN1Z2dlc3RlcihcbiAgICAgICAgICBbXCJTaVwiLCBcIk5vXCJdLFxuICAgICAgICAgIFt0cnVlLCBmYWxzZV0sXG4gICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICBgXHUwMEJGRGVzZWEgYWdyZWdhciBhbGdcdTAwRkFuIG9iamV0aXZvIHBhcmEgJHthcmVhVmlkYX0gZW4gJHt0cmltZXN0cmV9P2BcbiAgICAgICAgKTtcbiAgICAgICAgd2hpbGUgKGRlc2VhQWdyZWdhck9iamV0aXZvKSB7XG4gICAgICAgICAgbGV0IG9iamV0aXZvID0gYXdhaXQgdGhpcy5jcmVhck9iamV0aXZvVHJpbWVzdHJlKGFyZWFWaWRhLCB0cmltZXN0cmUpO1xuICAgICAgICAgIG9iamV0aXZvcy5wdXNoKFtvYmpldGl2b10pO1xuXG4gICAgICAgICAgLy8gUHJlZ3VudGFyIG51ZXZhbWVudGUgc2kgZGVzZWEgYWdyZWdhciBvdHJvIG9iamV0aXZvLlxuICAgICAgICAgIGRlc2VhQWdyZWdhck9iamV0aXZvID0gYXdhaXQgc3VnZ2VzdGVyKFxuICAgICAgICAgICAgW1wiU2lcIiwgXCJOb1wiXSxcbiAgICAgICAgICAgIFt0cnVlLCBmYWxzZV0sXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgYFx1MDBCRkRlc2VhIGFncmVnYXIgb3RybyBvYmpldGl2byBwYXJhICR7YXJlYVZpZGF9IGVuICR7dHJpbWVzdHJlfT9gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICB9IC8vIE1cdTAwRTl0b2RvIG9iamV0aXZvVHJpbWVzdHJhbC5cblxuXG5cbi8qIFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuTVx1MDBFOXRvZG8gcXVlIGNyZWEgZWwgYm90XHUwMEYzbiBxdWUgc2UgYWdyZWdhIGVuIGxhIHRhYmxhIGRlIHByb3llY3RvcyBlbiBlbCBcbkNvbXBhc3MgQW51YWwsIHBhcmEgY3JlYXIgZWwgcHJveWVjdG8gYSBjYWRhIE9iamV0aXZvLlxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi8gXG4gIGNyZWF0ZUJ1dHRvblRhYmxlKGR2LCBvYmpldGl2bykge1xuICAgIGNvbnN0IGJ1dHRvbkNvbnRhaW5lciA9IGR2LmVsKFwiZGl2XCIsIFwiXCIpO1xuICAgIGNvbnN0IGJ1dHRvbiA9IGR2LmVsKFwiYnV0dG9uXCIsIFwiTnVldm8gUHJveWVjdG9cIik7XG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYyAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgYXdhaXQgdGhpcy5jcmVhclByb3llY3RvT2JqZXRpdm8oZHYsIG9iamV0aXZvKTtcbiAgICB9KTtcbiAgICBidXR0b25Db250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcbiAgICByZXR1cm4gYnV0dG9uQ29udGFpbmVyO1xufVxuXG4vKiBcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbk1ldG9kbyBpbnZvY2FkbyBwb3IgZWwgYm90b24gZGUgbGEgdGFibGEgZGVsIGNvbXBhc3MgYW51YWwgXCJOdWV2byBQcm95ZWN0b1wiIFxucGFyYSBjcmVhciBwcm95ZWN0byBhIHVuIG9iamV0aXZvIGFudWFsIGVzdGFibGVjaWRvLlxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi8gXG5hc3luYyBjcmVhclByb3llY3RvT2JqZXRpdm8oZHYsIG9iamV0aXZvKXtcbiAgZGVidWdnZXI7XG4gIGxldCBzdWdnZXN0ZXIgPSB0aGlzLnBsdWdpbi50cC5zeXN0ZW0uc3RhdGljX2Z1bmN0aW9ucy5nZXQoXCJzdWdnZXN0ZXJcIik7XG4gIGxldCB0aXBvUHJveWVjdG8gPSBhd2FpdCBzdWdnZXN0ZXIoXG4gICAgW1wiUHJveWVjdG8gR1REXCIsIFwiUHJveWVjdG8gZGUgUVwiXSxcbiAgICBbdHJ1ZSwgZmFsc2VdLFxuICAgIHRydWUsXG4gICAgYFx1MDBCRkVsIHByb3llY3RvICR7b2JqZXRpdm8uZmlsZS5uYW1lfSByZXF1aWVyZSB1biBQcm95ZWN0byBHVEQgbyBQcm95ZWN0byBkZSBRP2BcbiAgKTtcbiAgbGV0IHByb3llY3RvO1xuICBpZiAodGlwb1Byb3llY3RvKXtcbiAgICBwcm95ZWN0byA9IHRoaXMuY3JlYXJQcm95ZWN0b0dURChvYmpldGl2byk7Ly8gQ3JlYXIgUHJveWVjdG8gR1REXG4gIH1lbHNle1xuICAgIC8qIFxuICAgIEJ1c2NhbmRvIG9wdGltaXphciBlbCB1c28gZGVsIG1cdTAwRTl0b2RvIGNyZWFyIHByb3llY3RvUSwgXG4gICAgdmFtb3MgYSBjb25maXJtYXIgZWwgdHJpbWVzdHJlIGRlc2RlIGNyZWFyUHJveWVjdG9PYmpldGl2bzsgXG4gICAgKi9cbiAgICBkZWJ1Z2dlcjtcbiAgICBjb25zdCByZWdleFRyaW0gPSAvXFxbP1xcWz8oXFxkezR9LVFbMS00XSlcXF0/XFxdPy9nO1xuICAgIGNvbnN0IHRyaW1lc3RyZSA9IG9iamV0aXZvLnRyaW1lc3RyZS5wYXRoLm1hdGNoKHJlZ2V4VHJpbSk7XG5cbiAgICBjb25zdCBjb25maXJtYVRyaW0gPSBhd2FpdCBzdWdnZXN0ZXIoXG4gICAgICBbXCJTaVwiLCBcIk5vXCJdLFxuICAgICAgW3RydWUsIGZhbHNlXSxcbiAgICAgIHRydWUsXG4gICAgICBgXHUwMEJGVmFtb3MgYSBjcmVhciBlbCBwcm95ZWN0byAke29iamV0aXZvLmZpbGUubmFtZX0gZW4gZWwgdHJpbWVzdHJlICR7dHJpbWVzdHJlfT9gXG4gICAgKTtcbiAgIFxuICAgIGlmICghY29uZmlybWFUcmltKXsgIFxuICAgICAgY29uc3QgcSA9IGF3YWl0IHRoaXMuZXN0YWJsZWNlclRyaW1lc3RyZShcIm9iamV0aXZvIGRlbCBhXHUwMEYxb1wiKTtcbiAgICAgIC8vb2JqZXRpdm8udHJpbWVzdHJlLnBhdGggPSBxLnRyaW1lc3RyZTtcbiAgICAgIGRlYnVnZ2VyO1xuICAgICAgYXdhaXQgdGhpcy5hY3R1YWxpemFyWUFNTHMoe3RyaW1lc3RyZTogYFtbJHtxLnRyaW1lc3RyZX1dXWB9LCBvYmpldGl2by5maWxlLnBhdGgpO1xuICAgICAgfVxuICAgIHByb3llY3RvID0gYXdhaXQgdGhpcy5jcmVhclByb3llY3RvUShvYmpldGl2byk7XG4gIH1cbn1cblxuLyogXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5NZXRvZG8gcXVlIGluaWNpYWxpemEgbGEgY3JlYWNpXHUwMEYzbiBkZSBsYSBwbGFudGlsbGEgZGUgb2JqZXRpdm8gQ29tcGFzcy5cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiovIFxuYXN5bmMgY3JlYXJPYmpldGl2byhhcmVhVmlkYSwgYVx1MDBGMW8pe1xuICBkZWJ1Z2dlcjtcbiAgY29uc3QgdGVtcGxhdGVQYXRoID0gYFBsYW50aWxsYXMvJHt0aGlzLnBsdWdpbi5zZXR0aW5nc1tcImZvbGRlcl9PYmpDb21wYXNzQW51YWxcIl19L1BsdCAtIE9iakNvbXBhc3NBbnVhbC5tZGA7XG4gIGNvbnN0IHRlbXBsYXRlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aCh0ZW1wbGF0ZVBhdGgpO1xuICBjb25zdCBmb2xkZXIgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKFwiSW5ib3hcIik7XG4gIGxldCBjcmVhck5vdGEgPSB0aGlzLnBsdWdpbi50cC5maWxlLnN0YXRpY19mdW5jdGlvbnMuZ2V0KFwiY3JlYXRlX25ld1wiKSBcbiAgbGV0IGZpbGVuYW1lID0gYCR7YVx1MDBGMW99IC0gT2JqZXRpdm8gcGFyYSAke2FyZWFWaWRhfWA7XG4gIGxldCBvYmpldGl2byA9IGF3YWl0IGNyZWFyTm90YSAodGVtcGxhdGUsIGZpbGVuYW1lLCBmYWxzZSwgZm9sZGVyKTtcbiAgcmV0dXJuIG9iamV0aXZvO1xufVxuXG5hc3luYyBjcmVhck9iamV0aXZvVHJpbWVzdHJlKGFyZWFWaWRhLCB0cmltZXN0cmUpe1xuICBkZWJ1Z2dlcjtcbiAgY29uc3QgdGVtcGxhdGVQYXRoID0gYFBsYW50aWxsYXMvJHt0aGlzLnBsdWdpbi5zZXR0aW5nc1tcImZvbGRlcl9PYmpDb21wYXNzQW51YWxcIl19L1BsdCAtIE9iakNvbXBhc3NBbnVhbC5tZGA7XG4gIGNvbnN0IHRlbXBsYXRlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aCh0ZW1wbGF0ZVBhdGgpO1xuICBjb25zdCBmb2xkZXIgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKFwiSW5ib3hcIik7XG4gIGxldCBjcmVhck5vdGEgPSB0aGlzLnBsdWdpbi50cC5maWxlLnN0YXRpY19mdW5jdGlvbnMuZ2V0KFwiY3JlYXRlX25ld1wiKSBcbiAgbGV0IGZpbGVuYW1lID0gYFRyaW1lc3RyZSAke3RyaW1lc3RyZX0gLSBPYmpldGl2byBwYXJhICR7YXJlYVZpZGF9YDtcbiAgbGV0IG9iamV0aXZvID0gYXdhaXQgY3JlYXJOb3RhICh0ZW1wbGF0ZSwgZmlsZW5hbWUsIGZhbHNlLCBmb2xkZXIpO1xuICByZXR1cm4gb2JqZXRpdm87XG59XG5cbi8qIFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuTWV0b2RvIGludm9jYWRvIGRlc2RlIGNyZWFyUHJveWVjdG9PYmpldGl2byhkdiwgb2JqZXRpdm8pXG5Fc3RcdTAwRTkgbVx1MDBFOXRvZG8gaGFjZSBwYXJ0ZSBkZWwgcHJvY2VzbyBkZSBDb21wYXNzIEFudWFsLlxuRmFjaWxpdGEgbGEgY3JlYWNpXHUwMEYzbiBkZWwgdW4gcHJveWVjdG8gZGUgUSBwYXJhIHVuIG9iamV0aXZvIGFudWFsIGVzdGFibGVjaWRvLlxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi8gXG5hc3luYyBjcmVhclByb3llY3RvUShvYmpldGl2byl7XG4gIGxldCBzdWdnZXN0ZXIgPSB0aGlzLnBsdWdpbi50cC5zeXN0ZW0uc3RhdGljX2Z1bmN0aW9ucy5nZXQoXCJzdWdnZXN0ZXJcIik7XG4gIGRlYnVnZ2VyO1xuICBjb25zdCB0ZW1wbGF0ZVBhdGggPSBgUGxhbnRpbGxhcy8ke3RoaXMucGx1Z2luLnNldHRpbmdzW1wiZm9sZGVyX1Byb3llY3Rvc1FcIl19L1BsdCAtIFByb3llY3Rvc1EubWRgO1xuICBjb25zdCB0ZW1wbGF0ZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgodGVtcGxhdGVQYXRoKTtcbiAgY29uc3QgZm9sZGVyID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChcIkluYm94XCIpO1xuICBsZXQgY3JlYXJOb3RhID0gdGhpcy5wbHVnaW4udHAuZmlsZS5zdGF0aWNfZnVuY3Rpb25zLmdldChcImNyZWF0ZV9uZXdcIikgXG4gIGxldCBmaWxlbmFtZSA9IGBQcm95ZWN0byBwYXJhIE9iamV0aXZvIENvbXBhc3MgQW51YWwgLSAke29iamV0aXZvLmlkfWA7XG4gIGxldCBwcm95ZWN0byA9IGF3YWl0IGNyZWFyTm90YSh0ZW1wbGF0ZSwgZmlsZW5hbWUsIHRydWUsIGZvbGRlcik7XG4gIHJldHVybiBwcm95ZWN0bztcbn1cblxuYXN5bmMgY3JlYXJQcm95ZWN0b0dURChvYmpldGl2byl7XG4gIGRlYnVnZ2VyO1xuICBjb25zdCB0ZW1wbGF0ZVBhdGggPSBgUGxhbnRpbGxhcy8ke3RoaXMucGx1Z2luLnNldHRpbmdzW1wiZm9sZGVyX1Byb3llY3Rvc0dURFwiXX0vUGx0IC0gUHJveWVjdG9zR1RELm1kYDtcbiAgY29uc3QgdGVtcGxhdGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHRlbXBsYXRlUGF0aCk7XG4gIGNvbnN0IGZvbGRlciA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoXCJJbmJveFwiKTtcbiAgbGV0IGNyZWFyTm90YSA9IHRoaXMucGx1Z2luLnRwLmZpbGUuc3RhdGljX2Z1bmN0aW9ucy5nZXQoXCJjcmVhdGVfbmV3XCIpIFxuICBsZXQgZmlsZW5hbWUgPSBgUHJveWVjdG8gcGFyYSBPYmpldGl2byBDb21wYXNzIEFudWFsIC0gJHtvYmpldGl2by5pZH1gO1xuICBsZXQgcHJveWVjdG8gPSBhd2FpdCBjcmVhck5vdGEgKHRlbXBsYXRlLCBmaWxlbmFtZSwgdHJ1ZSwgZm9sZGVyKTtcbiAgcmV0dXJuIHByb3llY3RvO1xufVxuXG5cbi8qIFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuTWV0b2RvIGludm9jYWRvIGVuIGVsIHByb2Nlc28gZGUgQ29tcGFzcyBBbnVhbCwgY3VhbmRvIGVsaWpvIHZvbHZlclxuYSBjcmVhciB0b2RvcyBsb3MgcHJveWVjdG9zIGRlIHVuIGFyZWEgZGUgdmlkYSBwYXJhIHVuIGFcdTAwRjFvLlxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi8gXG5hc3luYyBib3JyYXJPYmpldGl2b3Mob2JqZXRpdm9zKXtcbiAgZGVidWdnZXI7XG4gIGZvciAobGV0IG9iamV0aXZvIG9mIG9iamV0aXZvcyl7IFxuICAgIHRyeSB7XG4gICAgICAvLyBJbnRlbnRhIGJvcnJhciBlbCBhcmNoaXZvIGFjdHVhbCBkZWwgYXJyZWdsb1xuICAgICAgYXdhaXQgYXBwLnZhdWx0LmRlbGV0ZShvYmpldGl2by5maWxlKTtcbiAgICAgIGNvbnNvbGUubG9nKGBBcmNoaXZvIGJvcnJhZG86ICR7b2JqZXRpdm8uZmlsZS5wYXRofWApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGFsIGJvcnJhciBlbCBhcmNoaXZvICR7b2JqZXRpdm8uZmlsZS5wYXRofTogJHtlcnJvcn1gKTtcbiAgICAgfVxuICB9XG5cbiAgfVxuXG5cbi8qIFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuTWV0b2RvIHF1ZSBwZXJtaXRlIHBhcmEgY3VhbHF1aWVyIGNhc28gZW4gZWwgcXVlIHNlIHJlcXVpZXJhIGVsZWdpciBcbnVuIHRyaW1lc3RyZSBwYXJhIGNvbnRpbnVhciB1biBwcm9jZXNvLCBoYWNlciBsYSB2ZXJpZmljYWNpXHUwMEYzbiBzb2JyZSBsb3NcbnRyaW1lc3RyZXMgcXVlIGVzdGVuIGNyZWFkb3MgYSBwYXJ0aXIgZGUgbGEgbm90YSBUUS4gIFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cbiAgYXN5bmMgZXN0YWJsZWNlclRyaW1lc3RyZSh0ZW1hVHJpbWVzdHJlKXtcbiAgICAvLyBPYnRlbmVyIFFzIHBhcmEgcHJlZ3VudGFyIGVsIFEgcGFyYSBlbCBxdWUgZGVzZWEgY3JlYXIgbGFzIFx1MDBFMXJlYXMgZGUgdmlkYS5cbiAgICBjb25zdCBmb2xkZXJRID0gdGhpcy5wbHVnaW4uc2V0dGluZ3NbXCJmb2xkZXJfVHJpbWVzdHJhbFwiXTtcbiAgICBjb25zdCBmaWxlc1EgPSBhcHAudmF1bHRcbiAgICAgIC5nZXRNYXJrZG93bkZpbGVzKClcbiAgICAgIC5maWx0ZXIoXG4gICAgICAgIChmaWxlKSA9PlxuICAgICAgICAgIGZpbGUucGF0aC5pbmNsdWRlcyhmb2xkZXJRKSAmJlxuICAgICAgICAgICFmaWxlLnBhdGguaW5jbHVkZXMoXCJQbGFudGlsbGFzXCIpICYmXG4gICAgICAgICAgIWZpbGUucGF0aC5pbmNsdWRlcyhcIkFyY2hpdm9cIilcbiAgICAgICk7XG4gICAgbGV0IHFDcmVhZG9zID0gW107XG5cbiAgICBmb3IgKGxldCBmaWxlIG9mIGZpbGVzUSkge1xuICAgICAgbGV0IG1ldGFkYXRhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpPy5mcm9udG1hdHRlcjtcblxuICAgICAgaWYgKG1ldGFkYXRhPy50eXBlID09PSBcIlRRXCIgJiYgbWV0YWRhdGE/LnRyaW1lc3RyZSkge1xuICAgICAgICBsZXQgcUFjdGl2byA9IHsgZmlsZSB9OyAvLyBBc3VtaWVuZG8gcXVlIHF1aWVyZXMgZ3VhcmRhciBlbCBwYXRoIGRlbCBhcmNoaXZvXG4gICAgICAgIE9iamVjdC5hc3NpZ24ocUFjdGl2bywgbWV0YWRhdGEpOyAvLyBBZ3JlZ2EgZWwgbWV0YWRhdGEgYWwgb2JqZXRvIHFBY3Rpdm9cbiAgICAgICAgcUNyZWFkb3MucHVzaChxQWN0aXZvKTsgLy8gQVx1MDBGMWFkZSBlbCByZWdpc3RybyBhY3Rpdm8gYWwgYXJyYXlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgc3VnZ2VzdGVyID0gdGhpcy5wbHVnaW4udHAuc3lzdGVtLnN0YXRpY19mdW5jdGlvbnMuZ2V0KFwic3VnZ2VzdGVyXCIpO1xuICAgIHRyeSB7XG4gICAgICBsZXQgcSA9IGF3YWl0IHN1Z2dlc3RlcihcbiAgICAgICAgcUNyZWFkb3MubWFwKChiKSA9PiBiLnRyaW1lc3RyZSksXG4gICAgICAgIHFDcmVhZG9zLm1hcCgoYikgPT4gYiksXG4gICAgICAgIHRydWUsXG4gICAgICAgIGBEZSBxdWUgdHJpbWVzdHJlIHZhbW9zIGEgcHJvY2VzYXIgdHVzICR7dGVtYVRyaW1lc3RyZX1gXG4gICAgICApO1xuICBcbiAgICAgIC8vIEFxdVx1MDBFRCBhc3VtaW1vcyBxdWUgc2kgcSBlcyB1bmRlZmluZWQsIGVsIHVzdWFyaW8gY2FuY2VsXHUwMEYzIGxhIG9wZXJhY2lcdTAwRjNuLlxuICAgICAgaWYgKHEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiT3BlcmFjaVx1MDBGM24gY2FuY2VsYWRhIHBvciBlbCB1c3VhcmlvLlwiKTtcbiAgICAgICAgICAvLyBNYW5lamEgZWwgZXNjYXBlIG8gY2FuY2VsYWNpXHUwMEYzbiBhcXVcdTAwRUQuIFBvciBlamVtcGxvLCBwb2RyXHUwMEVEYXMgc2FsaXIgZGUgbGEgZnVuY2lcdTAwRjNuIGFjdHVhbCBvIGhhY2VyIG90cmEgY29zYS5cbiAgICAgICAgICByZXR1cm47IC8vIFNhbGUgZGUgbGEgZnVuY2lcdTAwRjNuIHNpIGVsIHVzdWFyaW8gY2FuY2VsYS5cbiAgICAgIH1cbiAgXG4gICAgICAvLyBDb250aW51YXIgY29uIGxhIGxcdTAwRjNnaWNhIGRlc3B1XHUwMEU5cyBkZSBxdWUgZWwgdXN1YXJpbyBoYSBzZWxlY2Npb25hZG8gdW5hIG9wY2lcdTAwRjNuXG4gICAgICAgIGNvbnNvbGUubG9nKFwiRWwgdXN1YXJpbyBzZWxlY2Npb25cdTAwRjM6XCIsIHEpO1xuICAgICAgICByZXR1cm4gcTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGVuIGVsIHN1Z2dlc3RlcjpcIiwgZXJyb3IpO1xuICAgICAgfVxuICB9XG5cbi8qIFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQ29uIGVzdGUgbVx1MDBFOXRvZG8gcHVlZG8gYWN0dWFsaXphciB2YWxvcmVzIGVuIGxhcyBub3RhcyB5YSBleGlzdGVudGVzLlxuTG8gdXRpbGl6byBlbiBlc3RhIGNsYXNlLCBwYXJhIGFjdHVhbGl6YXIgZWwgdHJpbWVzdHJlLlxuRXN0YSBmdW5jaVx1MDBGM24gc29sbyBhY3R1YWxpemEsIG5vIGNyZWEgZWwgY2FtcG9zIHNpIG5vIGV4aXN0ZS4gXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuICBhc3luYyBhY3R1YWxpemFyWUFNTHMoY2FtcG9zLCBydXRhKSB7XG4gICAgICAgIFxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHJ1dGEpO1xuICAgICAgICBhd2FpdCBhcHAuZmlsZU1hbmFnZXIucHJvY2Vzc0Zyb250TWF0dGVyKGZpbGUsIGZyb250bWF0dGVyID0+IHtcbiAgICAgICAgICAgIC8vIEl0ZXJhciBzb2JyZSBjYWRhIHByb3BpZWRhZCBkZWwgb2JqZXRvICdub3RhJ1xuICAgICAgICAgICAgZm9yIChjb25zdCBjYW1wbyBpbiBjYW1wb3MpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoZnJvbnRtYXR0ZXIuaGFzT3duUHJvcGVydHkoY2FtcG8pKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFjdHVhbGl6YXIgZWwgY2FtcG8gZW4gZWwgZnJvbnRtYXR0ZXIgY29uIGVsIHZhbG9yIGNvcnJlc3BvbmRpZW50ZVxuICAgICAgICAgICAgICAgICAgICBmcm9udG1hdHRlcltjYW1wb10gPSBjYW1wb3NbY2FtcG9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRnJvbnRtYXR0ZXIgYWN0dWFsaXphZG8gY29uIFx1MDBFOXhpdG9cIik7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhbCBhY3R1YWxpemFyIGVsIGZyb250bWF0dGVyXCIsIGVycik7XG4gICAgfVxufVxuXG59XG4iLCAiaW1wb3J0IHsgSXRlbVZpZXcsIFdvcmtzcGFjZUxlYWYsIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBEYXRlVGltZSwgRHVyYXRpb24gfSBmcm9tICdsdXhvbic7XG5pbXBvcnQgeyByZWdpc3Ryb1RpZW1wb0FQSSB9IGZyb20gXCIuLi8uLi9tb2R1bG9SZWdpc3Ryb1RpZW1wby9BUEkvcmVnaXN0cm9UaWVtcG9BUElcIjtcblxuZXhwb3J0IGNsYXNzIFZpc3RhUmVnaXN0cm9EaWFyaW8gZXh0ZW5kcyBJdGVtVmlldyB7XG4gICAgaW50ZXJ2YWxJZDogbnVtYmVyO1xuIFxuXG4gICAgY29uc3RydWN0b3IobGVhZjogV29ya3NwYWNlTGVhZiwgcHVibGljIHBsdWdpbjogYW55KSB7XG4gICAgICAgIHN1cGVyKGxlYWYpO1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgICAgdGhpcy5yZWdpc3Ryb1RpZW1wb0FQSSA9IG5ldyByZWdpc3Ryb1RpZW1wb0FQSSh0aGlzLnBsdWdpbik7XG4gICAgfVxuXG4gICAgZ2V0Vmlld1R5cGUoKSB7XG4gICAgICAgIHJldHVybiBcInZpc3RhLXJlZ2lzdHJvLWRpYXJpb1wiO1xuICAgIH1cblxuICAgIGdldERpc3BsYXlUZXh0KCkge1xuICAgICAgICByZXR1cm4gXCJSZWdpc3RybyBEaWFyaW9cIjtcbiAgICB9XG5cbiAgICBnZXRJY29uKCkge1xuICAgICAgICByZXR1cm4gXCJmaWxlLWNsb2NrXCI7IC8vIEVzdGUgZXMgdW4gZWplbXBsbywgY2FtYmlhIFwiZG9jdW1lbnRvXCIgcG9yIGVsIG5vbWJyZSBkZWwgXHUwMEVEY29ubyBxdWUgZGVzZWVzIHVzYXJcbiAgICB9XG5cbiAgICBhc3luYyBvbk9wZW4oKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZUZpbGUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICBpZiAoIWFjdGl2ZUZpbGUpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGVudEVsLnNldFRleHQoXCJObyBoYXkgdW4gYXJjaGl2byBhY3Rpdm8uXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5hY3R1YWxpemFyVmlzdGEoYWN0aXZlRmlsZSk7IC8vIFB1ZWRlcyB1c2FyIHRoaXMuZmlsZSBkZW50cm8gZGUgYWN0dWFsaXphclZpc3RhXG4gICAgXG4gICAgICAgIC8vYXdhaXQgdGhpcy5hY3R1YWxpemFyVmlzdGEoKTsgLy8gQWN0dWFsaXphIGxhIHZpc3RhIGlubWVkaWF0YW1lbnRlIGFsIGFicmlyXG5cbiAgICAgICAgdGhpcy5pbnRlcnZhbElkID0gd2luZG93LnNldEludGVydmFsKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYWN0dWFsaXphclZpc3RhKGFjdGl2ZUZpbGUpOyAvLyBBY3R1YWxpemEgbGEgdmlzdGEgY2FkYSAxMCBzZWd1bmRvc1xuICAgICAgICB9LCA1MDAwKTtcbiAgICB9XG4gICAgXG4gICAgb25DbG9zZSgpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsSWQpOyAvLyBMaW1waWEgZWwgaW50ZXJ2YWxvIGFsIGNlcnJhciBsYSB2aXN0YVxuICAgIH1cblxuICAgIGFzeW5jIGFjdHVhbGl6YXJWaXN0YShhY3RpdmVGaWxlKSB7XG4gICAgICAgIHRoaXMuY29udGVudEVsLmVtcHR5KCk7IC8vIExpbXBpYSBlbCBjb250ZW5pZG8gZXhpc3RlbnRlIGFudGVzIGRlIGFjdHVhbGl6YXJcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGZlY2hhSG95ID0gRGF0ZVRpbWUuZnJvbUZvcm1hdChhY3RpdmVGaWxlLmJhc2VuYW1lLnNwbGl0KFwiIFwiKVswXSwgJ3l5eXktTU0tZGQnLCB7IGxvY2FsZTogJ2VzJyB9KTtcbiAgICAgICAgY29uc3QgZm9sZGVyID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX1JlZ2lzdHJvVGllbXBvO1xuICAgICAgICBjb25zdCBmaWxlcyA9IHRoaXMuYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKS5maWx0ZXIoZmlsZSA9PiBmaWxlLnBhdGguaW5jbHVkZXMoZm9sZGVyKSk7XG5cbiAgICAgICAgbGV0IHRvdGFsRGlhID0gMDtcbiAgICAgICAgbGV0IHJlZ2lzdHJvc0hveSA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgICAgICAgIGxldCBtZXRhZGF0YSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpPy5mcm9udG1hdHRlcjtcbiAgICAgICAgICAgIGlmIChtZXRhZGF0YT8uaG9yYUluaWNpbykge1xuICAgICAgICAgICAgICAgIGxldCBob3JhSW5pY2lvID0gRGF0ZVRpbWUuZnJvbUZvcm1hdChtZXRhZGF0YS5ob3JhSW5pY2lvLCAneXl5eS1NTS1kZCBFRUVFIEhIOm1tJywgeyBsb2NhbGU6ICdlcycgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGhvcmFJbmljaW8uc3RhcnRPZignZGF5JykudHMgPT09IGZlY2hhSG95LnN0YXJ0T2YoJ2RheScpLnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZ2lzdHJvc0hveS5wdXNoKHsgcGF0aDogZmlsZS5wYXRoLCBmcm9udG1hdHRlcjogbWV0YWRhdGEgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsRGlhICs9IHBhcnNlSW50KG1ldGFkYXRhLnRpZW1wb1RyYWJhamFkbyB8fCAnMCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdHJvc0hveS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICBsZXQgZmVjaGFBID0gRGF0ZVRpbWUuZnJvbUZvcm1hdChhLmZyb250bWF0dGVyLmhvcmFJbmljaW8sICd5eXl5LU1NLWRkIEVFRUUgSEg6bW0nLCB7IGxvY2FsZTogJ2VzJyB9KS50cztcbiAgICAgICAgICAgIGxldCBmZWNoYUIgPSBEYXRlVGltZS5mcm9tRm9ybWF0KGIuZnJvbnRtYXR0ZXIuaG9yYUluaWNpbywgJ3l5eXktTU0tZGQgRUVFRSBISDptbScsIHsgbG9jYWxlOiAnZXMnIH0pLnRzO1xuICAgICAgICAgICAgcmV0dXJuIGZlY2hhQSAtIGZlY2hhQjtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHRpdHVsbyA9IHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogYFJlZ2lzdHJvcyBkZSB0aWVtcG8gZGVsICR7ZmVjaGFIb3kudG9Gb3JtYXQoJ0VFRUUsIEREJyl9LmB9KTtcbiAgICAgICAgdGl0dWxvLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYWNpXHUwMEYzbiBkZSBlbGVtZW50b3MgSFRNTCBkaXJlY3RhbWVudGVcbiAgICAgICAgY29uc3QgdGFibGUgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbCgndGFibGUnLCB7IGNsczogJ3RhYmxlLXJlc3VtZW5TZW1hbmFsJyB9KTtcbiAgICAgICAgY29uc3QgdGhlYWQgPSB0YWJsZS5jcmVhdGVFbCgndGhlYWQnKTtcbiAgICAgICAgY29uc3QgaGVhZGVyUm93ID0gdGhlYWQuY3JlYXRlRWwoJ3RyJyk7XG4gICAgICAgIFsnUmVnaXN0cm8nLCAnRGVzY3JpcGNpXHUwMEYzbicsICdQZXJpb2RvJywgJ1RpZW1wbycsICdFc3RhZG8nLCAnSWQnLCAnQWNjaVx1MDBGM24nXS5mb3JFYWNoKGhlYWRlciA9PiB7XG4gICAgICAgICAgICBoZWFkZXJSb3cuY3JlYXRlRWwoJ3RoJywgeyB0ZXh0OiBoZWFkZXIgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHRib2R5ID0gdGFibGUuY3JlYXRlRWwoJ3Rib2R5Jyk7XG4gICAgICAgIHJlZ2lzdHJvc0hveS5mb3JFYWNoKHJlZ2lzdHJvID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJvdyA9IHRib2R5LmNyZWF0ZUVsKCd0cicpO1xuICAgICAgICAgICAgLy8gQXF1XHUwMEVEIHJlbGxlbmFzIGxhcyBjZWxkYXMgZGUgbGEgZmlsYVxuICAgICAgICAgICAgdGhpcy5maWxsUm93V2l0aERhdGEocm93LCByZWdpc3Rybyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuY29udGVudEVsLmFwcGVuZENoaWxkKHRhYmxlKTtcbiAgICB9XG5cbiAgICBmaWxsUm93V2l0aERhdGEocm93LCByZWdpc3Rybykge1xuICAgICAgICBjb25zdCB0ZEFyY2hpdm8gPSByb3cuY3JlYXRlRWwoJ3RkJyk7XG4gICAgICAgIGNvbnN0IGxpbmtFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgbGlua0VsLnRleHRDb250ZW50ID0gcmVnaXN0cm8uZnJvbnRtYXR0ZXIuYWxpYXNlc1swXTsgIC8vIFVzYSBlbCBhbGlhcyBjb21vIHRleHRvIGRlbCBlbmxhY2VcbiAgICAgICAgbGlua0VsLmhyZWYgPSAnIyc7XG4gICAgICAgIGxpbmtFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jIChldikgPT4ge1xuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTsgLy8gRXZpdGEgbGEgbmF2ZWdhY2lcdTAwRjNuIHByZWRldGVybWluYWRhIGRlbCBlbmxhY2VcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgocmVnaXN0cm8ucGF0aCk7XG4gICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgLy8gQWJyZSBlbCBhcmNoaXZvIGVuIHVuYSBudWV2YSBob2phIGRlIGVzcGFjaW8gZGUgdHJhYmFqb1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKHRydWUpLm9wZW5GaWxlKGZpbGUsIHsgZm9jdXM6IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0ZEFyY2hpdm8uYXBwZW5kQ2hpbGQobGlua0VsKTtcbiAgICAgICAgXG4gICAgICAgIHJvdy5jcmVhdGVFbCgndGQnLCB7IHRleHQ6IHJlZ2lzdHJvLmZyb250bWF0dGVyLmRlc2NyaXBjaW9uIH0pO1xuICAgICAgICByb3cuY3JlYXRlRWwoJ3RkJywgeyB0ZXh0OiBgJHtEYXRlVGltZS5mcm9tRm9ybWF0KHJlZ2lzdHJvLmZyb250bWF0dGVyLmhvcmFJbmljaW8sICd5eXl5LU1NLWRkIEVFRUUgSEg6bW0nLCB7IGxvY2FsZTogJ2VzJyB9KS50b0Zvcm1hdCgnaDptbSBhJyl9IC8gJHtEYXRlVGltZS5mcm9tRm9ybWF0KHJlZ2lzdHJvLmZyb250bWF0dGVyLmhvcmFGaW5hbCwgJ3l5eXktTU0tZGQgRUVFRSBISDptbScsIHsgbG9jYWxlOiAnZXMnIH0pLnRvRm9ybWF0KCdoOm1tIGEnKX1gfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBDYWxjdWxhIHkgbXVlc3RyYSBlbCB0aWVtcG8gZW4gZm9ybWF0byBkZSBkXHUwMEVEYXMsIGhvcmFzIHkgbWludXRvc1xuICAgICAgICBjb25zdCB0ZFBlcmlvZG8gPSByb3cuY3JlYXRlRWwoJ3RkJyk7XG4gICAgICAgIGlmIChyZWdpc3Ryby5mcm9udG1hdHRlci5lc3RhZG8gPT09IFwiXHVEODNEXHVERkUyXCIpIHtcbiAgICAgICAgICAgIC8vIENhbGN1bGEgZWwgdGllbXBvIGRlc2RlIGFob3JhIGhhc3RhIGxhIGhvcmEgZGUgaW5pY2lvXG4gICAgICAgICAgICBsZXQgYWhvcmEgPSBEYXRlVGltZS5sb2NhbCgpO1xuICAgICAgICAgICAgbGV0IGluaWNpbyA9IERhdGVUaW1lLmZyb21Gb3JtYXQocmVnaXN0cm8uZnJvbnRtYXR0ZXIuaG9yYUluaWNpbywgJ3l5eXktTU0tZGQgRUVFRSBISDptbScsIHsgbG9jYWxlOiAnZXMnIH0pO1xuICAgICAgICAgICAgbGV0IGR1cmFjaW9uID0gYWhvcmEuZGlmZihpbmljaW8sIFsnZGF5cycsICdob3VycycsICdtaW51dGVzJ10pO1xuICAgICAgICAgICAgdGRQZXJpb2RvLnRleHRDb250ZW50ID0gdGhpcy5mb3JtYXREdXJhdGlvbihkdXJhY2lvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBNdWVzdHJhIGVsIHRpZW1wbyB0cmFiYWphZG8gZW4gbWlsaXNlZ3VuZG9zIGNvbnZlcnRpZG8gYSBmb3JtYXRvIGxlZ2libGVcbiAgICAgICAgICAgIGxldCB0aWVtcG9UcmFiYWphZG8gPSB0aGlzLmZvcm1hdER1cmF0aW9uKHJlZ2lzdHJvLmZyb250bWF0dGVyLnRpZW1wb1RyYWJhamFkbyk7XG4gICAgICAgICAgICB0ZFBlcmlvZG8udGV4dENvbnRlbnQgPSB0aWVtcG9UcmFiYWphZG87XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJvdy5jcmVhdGVFbCgndGQnLCB7IHRleHQ6IHJlZ2lzdHJvLmZyb250bWF0dGVyLmVzdGFkbyB9KTtcbiAgICAgICAgcm93LmNyZWF0ZUVsKCd0ZCcsIHsgdGV4dDogcmVnaXN0cm8uZnJvbnRtYXR0ZXIuaWQgfSk7XG5cbiAgICAgICAgY29uc3QgYWN0aW9uQ2VsbCA9IHJvdy5jcmVhdGVFbCgndGQnKTtcbiAgICAgICAgaWYgKHJlZ2lzdHJvLmZyb250bWF0dGVyLmVzdGFkbyA9PT0gXCJcdUQ4M0RcdURGRTJcIikge1xuICAgICAgICAgICAgYWN0aW9uQ2VsbC5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZUJ1dHRvblRhYmxlKCdDZXJyYXInLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5yZWdpc3Ryb1RpZW1wb0FQSS5jZXJyYXJSZWdpc3RybyhyZWdpc3Ryby5mcm9udG1hdHRlci5pZCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY3Rpb25DZWxsLmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlQnV0dG9uVGFibGUoJ1JldG9tYXInLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXRvbWFyVGFyZWEocmVnaXN0cm8uZnJvbnRtYXR0ZXIuaWQpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gRnVuY2lcdTAwRjNuIGF1eGlsaWFyIHBhcmEgZm9ybWF0ZWFyIGxhIGR1cmFjaVx1MDBGM24gZGUgTHV4b24gYSB1biBmb3JtYXRvIGxlZ2libGVcbiAgICBmb3JtYXREdXJhdGlvbihtcykge1xuICAgICAgICAgICAgaWYgKG1zID09PSBudWxsIHx8IG1zID09PSB1bmRlZmluZWQgfHwgaXNOYU4obXMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiTm8gZGVmaW5pZG9cIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQ29udmVydGlyIG1pbGlzZWd1bmRvcyBhIG1pbnV0b3MsIGhvcmFzIHkgZFx1MDBFRGFzXG4gICAgICAgICAgICAgICAgbGV0IG1pbnV0b3MgPSBNYXRoLmZsb29yKG1zIC8gKDEwMDAgKiA2MCkpO1xuICAgICAgICAgICAgICAgIGxldCBob3JhcyA9IE1hdGguZmxvb3IobWludXRvcyAvIDYwKTtcbiAgICAgICAgICAgICAgICBtaW51dG9zID0gbWludXRvcyAlIDYwOyAvLyBSZXN0byBkZSBsYSBkaXZpc2lcdTAwRjNuIHBhcmEgb2J0ZW5lciBsb3MgbWludXRvcyBzb2JyYW50ZXNcbiAgICAgICAgICAgICAgICBsZXQgZGlhcyA9IE1hdGguZmxvb3IoaG9yYXMgLyAyNCk7XG4gICAgICAgICAgICAgICAgaG9yYXMgPSBob3JhcyAlIDI0OyAvLyBSZXN0byBkZSBsYSBkaXZpc2lcdTAwRjNuIHBhcmEgb2J0ZW5lciBsYXMgaG9yYXMgc29icmFudGVzXG4gICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEZvcm1hdGVhciBlbCBzdHJpbmcgZGUgc2FsaWRhXG4gICAgICAgICAgICAgICAgaWYgKGRpYXMgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtkaWFzfSBkICR7aG9yYXN9IGggJHttaW51dG9zfSBtaW5gO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaG9yYXMgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtob3Jhc30gaCAke21pbnV0b3N9IG1pbmA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke21pbnV0b3N9IG1pbmA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZUJ1dHRvblRhYmxlKGJ1dHRvblRleHQsIG9uQ2xpY2tDYWxsYmFjaykge1xuICAgICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgYnV0dG9uLnRleHRDb250ZW50ID0gYnV0dG9uVGV4dDtcbiAgICAgICAgYnV0dG9uLnR5cGUgPSAnYnV0dG9uJztcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3lvdXItYnV0dG9uLWNsYXNzJyk7XG5cbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbGlja0NhbGxiYWNrKTtcblxuICAgICAgICByZXR1cm4gYnV0dG9uO1xuICAgIH1cbiAgICBcbiAgICBhc3luYyByZXRvbWFyVGFyZWEoaWQpIHsgXG4gICAgICAgIC8vIEFzZWdcdTAwRkFyYXRlIGRlIHJlZW1wbGF6YXIgJ3J1dGEvYWwvYXJjaGl2by5tZCcgY29uIGxhIHJ1dGEgZXhhY3RhIGRlbCBhcmNoaXZvIHF1ZSBkZXNlYXMgb2J0ZW5lclxuICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgY29uc3QgZmlsZVBhdGggPSBgUGxhbnRpbGxhcy8ke3RoaXMucGx1Z2luLnNldHRpbmdzW2Bmb2xkZXJfUmVnaXN0cm9UaWVtcG9gXX0vUGx0IC0gUmVnaXN0cm9UaWVtcG8ubWRgO1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZmlsZVBhdGgpO1xuXG4gICAgICAgIGlmICh0ZW1wbGF0ZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAvLyBBaG9yYSAnZmlsZScgZXMgdHUgYXJjaGl2byBkZXNlYWRvLCB5IHB1ZWRlcyB0cmFiYWphciBjb24gXHUwMEU5bCBjb21vIG5lY2VzaXRlc1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJBcmNoaXZvIGVuY29udHJhZG86XCIsIHRlbXBsYXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFNpIGVsIGFyY2hpdm8gbm8gc2UgZW5jb250clx1MDBGMywgJ2ZpbGUnIHNlclx1MDBFMSBudWxsXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFyY2hpdm8gbm8gZW5jb250cmFkby5cIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlsZW5hbWUgPSBcIlJldG9tYXIgXCIgKyBpZDtcbiAgICAgICAgY29uc3QgZm9sZGVyID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChcIkluYm94XCIpO1xuICAgICAgICBjb25zdCB0cCA9IHRoaXMuZ2V0VHAoKTtcbiAgICAgICAgbGV0IGNyZWFyTm90YSA9IHRwLmZpbGUuc3RhdGljX2Z1bmN0aW9ucy5nZXQoXCJjcmVhdGVfbmV3XCIpXG4gICAgICAgIGF3YWl0IGNyZWFyTm90YSAodGVtcGxhdGUsIGZpbGVuYW1lLCBmYWxzZSwgZm9sZGVyKS5iYXNlbmFtZTtcbiAgICAgIH1cblxuICAgIGdldFRwKCl7XG4gICAgICAgIGlmICghdGhpcy5wbHVnaW4gfHwgIXRoaXMucGx1Z2luLmFwcC5wbHVnaW5zLmVuYWJsZWRQbHVnaW5zLmhhcygndGVtcGxhdGVyLW9ic2lkaWFuJykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VsIHBsdWdpbiBUZW1wbGF0ZXIgbm8gZXN0XHUwMEUxIGhhYmlsaXRhZG8uJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gICBcbiAgICAgICAgbGV0IHRwR2VuID0gdGhpcy5wbHVnaW4uYXBwLnBsdWdpbnMucGx1Z2luc1tcInRlbXBsYXRlci1vYnNpZGlhblwiXS50ZW1wbGF0ZXI7XG4gICAgICAgIHRwR2VuID0gdHBHZW4uZnVuY3Rpb25zX2dlbmVyYXRvci5pbnRlcm5hbF9mdW5jdGlvbnMubW9kdWxlc19hcnJheTtcbiAgICAgICAgbGV0IHRwID0ge31cbiAgICAgICAgLy8gZ2V0IGFuIGluc3RhbmNlIG9mIG1vZHVsZXNcbiAgICAgICAgdHAuZmlsZSA9IHRwR2VuLmZpbmQobSA9PiBtLm5hbWUgPT0gXCJmaWxlXCIpO1xuICAgICAgICB0cC5zeXN0ZW0gPSB0cEdlbi5maW5kKG0gPT4gbS5uYW1lID09IFwic3lzdGVtXCIpO1xuXG4gICAgICAgIGlmICghdHAuZmlsZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTm8gc2UgcHVkbyBhY2NlZGVyIGFsIG9iamV0byBkZSBmdW5jaW9uZXMgYWN0dWFsZXMgZGUgVGVtcGxhdGVyLlwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKCd0cCBjb24gcHJvcGllZGFkZXMgXCJmaWxlXCIgc2UgaGEgY2FyZ2FkbyBzYXRpc2ZhY3RvcmlhbWVudGUnKTtcbiAgICAgICAgcmV0dXJuIHRwO1xuICAgIH1cbiAgICBcblxuXG4gICAgLy8gT3BjaW9uYWw6IEltcGxlbWVudGEgb25DbG9zZSBzaSBuZWNlc2l0YXMgbGltcGllemEgYWwgY2VycmFyIGxhIHZpc3RhLlxufSIsICJpbXBvcnQgeyBBcHAsIE1vZGFsIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHUFRob3JhIHtcbiAgICBhcHA6IEFwcDtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwKSB7XG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xuICAgIH1cblxuICAgIG9ubG9hZCgpIHtcbiAgICAgICAgdGhpcy5hcHAuY29tbWFuZHMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogJ3Nob3ctbG9jYWwtdGltZScsXG4gICAgICAgICAgICBuYW1lOiAnTW9zdHJhciBIb3JhIExvY2FsJyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB0aGlzLnNob3dMb2NhbFRpbWVNb2RhbCgpXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNob3dMb2NhbFRpbWVNb2RhbCgpIHtcbiAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgTG9jYWxUaW1lTW9kYWwodGhpcy5hcHApO1xuICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgfVxufVxuXG5jbGFzcyBMb2NhbFRpbWVNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCkge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgIH1cblxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xuXG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGNvbnN0IGhvdXJzID0gbm93LmdldEhvdXJzKCkgJSAxMiB8fCAxMjtcbiAgICAgICAgY29uc3QgbWludXRlcyA9IG5vdy5nZXRNaW51dGVzKCkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpO1xuICAgICAgICBjb25zdCBhbXBtID0gbm93LmdldEhvdXJzKCkgPj0gMTIgPyAnUE0nIDogJ0FNJztcbiAgICAgICAgY29uc3QgdGltZVN0cmluZyA9IGAke2hvdXJzfToke21pbnV0ZXN9ICR7YW1wbX1gO1xuXG4gICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgnaDEnLCB7IHRleHQ6ICdIb3JhIExvY2FsJyB9KTtcbiAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiB0aW1lU3RyaW5nIH0pO1xuXG4gICAgICAgIC8vIEVzdGlsbyBkZWwgbW9kYWxcbiAgICAgICAgY29udGVudEVsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjMkUzNDQwJztcbiAgICAgICAgY29udGVudEVsLnN0eWxlLmNvbG9yID0gJyNEOERFRTknO1xuICAgICAgICBjb250ZW50RWwuc3R5bGUucGFkZGluZyA9ICcyMHB4JztcbiAgICAgICAgY29udGVudEVsLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgIH1cblxuICAgIG9uQ2xvc2UoKSB7XG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgICAgICBjb250ZW50RWwuZW1wdHkoKTtcbiAgICB9XG59IiwgImltcG9ydCB7IFRGaWxlLCBOb3RpY2UsIFRGb2xkZXIgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQge0RhdGVUaW1lICwgRHVyYXRpb259IGZyb20gJ2x1eG9uJztcblxuZXhwb3J0IGNsYXNzIGxpYnJvc0FQSSB7XG4gICAgLy9wcml2YXRlIHV0aWxzQXBpOiB1dGlsc0FQSTtcbiAgICBwcml2YXRlIHBsdWdpbjogUGx1Z2luO1xuICAgICAgcHJpdmF0ZSB0cDogb2JqZWN0O1xuICAgIHByaXZhdGUgbm90YTogb2JqZWN0O1xuICBcbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IFBsdWdpbikge1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgICAgLy8gSW5pY2lhbGl6YSBmb2xkZXIgZSBpbmRpY2UgZ2V0Y29uIHZhbG9yZXMgcHJlZGV0ZXJtaW5hZG9zIG8gbFx1MDBGM2dpY2EgZXNwZWNcdTAwRURmaWNhLlxuICAgICAgICB0aGlzLnRwID0gdGhpcy5wbHVnaW4udHA7XG4gICAgfVxuXG4gICAgICBhc3luYyBraW5kbGUoZHYpIHtcbiAgICBsZXQgZm9sZGVyUHJpbmNpcGFsID0gdGhpcy5wbHVnaW4uc2V0dGluZ3NbXCJmb2xkZXJfS2luZGxlTm90ZXNcIl07XG4gICAgY29uc3QgbGlicmFyeUZvbGRlciA9IHRoaXMucGx1Z2luLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZm9sZGVyUHJpbmNpcGFsKTtcblxuICAgIGlmICghKGxpYnJhcnlGb2xkZXIgaW5zdGFuY2VvZiBURm9sZGVyKSkge1xuICAgICAgbmV3IE5vdGljZShgTGEgY2FycGV0YSAke2ZvbGRlclByaW5jaXBhbH0gbm8gZXhpc3RlLmApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBhcmNoaXZvQWN0aXZvID0gdGhpcy5wbHVnaW4uYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG4gICAgaWYgKCFhcmNoaXZvQWN0aXZvKSB7XG4gICAgICBuZXcgTm90aWNlKFwiTm8gaGF5IHVuYSBub3RhIGFjdGl2YS5cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLnBsdWdpbi5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoYXJjaGl2b0FjdGl2byk7XG4gICAgY29uc3QgeWFtbERhdGEgPSBtZXRhZGF0YT8uZnJvbnRtYXR0ZXIgfHwge307XG5cbiAgICBpZiAoeWFtbERhdGEua2luZGxlTm90ZSkge1xuICAgICAgY29uc3QgbGlua0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICAgIGxpbmtFbGVtZW50LmhyZWYgPSB5YW1sRGF0YS5raW5kbGVOb3RlO1xuICAgICAgbGlua0VsZW1lbnQudGV4dENvbnRlbnQgPSBcIlZlciBlbiBLaW5kbGVcIjtcbiAgICAgIGR2LmNvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiOyAvLyBMaW1waWFyIGVsIGNvbnRlbmVkb3JcbiAgICAgIGR2LmNvbnRhaW5lci5hcHBlbmRDaGlsZChsaW5rRWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE1vc3RyYXIgc3VnZ2VzdGVyIHBhcmEgZWxlZ2lyIGxhIG5vdGEgS2luZGxlIGNvcnJlc3BvbmRpZW50ZVxuICAgICAgY29uc3Qgbm90ZXNMaXN0ID0gYXdhaXQgdGhpcy5nZXROb3Rlc0Zyb21Gb2xkZXIoZm9sZGVyUHJpbmNpcGFsKTtcblxuICAgICAgaWYgKG5vdGVzTGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgbmV3IE5vdGljZShcIk5vIGhheSBub3RhcyBlbiBlbCBmb2xkZXIgZGUgS2luZGxlLlwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzdWdnZXN0b3JDb25maWc6IFN1Z2dlc3RlckNvbmZpZzxURmlsZT4gPSB7XG4gICAgICAgIG9uQ2hvb3NlSXRlbTogYXN5bmMgKHNlbGVjdGVkTm90ZSwgZXZ0KTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgICAgICAgeWFtbERhdGEua2luZGxlTm90ZSA9IHNlbGVjdGVkTm90ZS5wYXRoO1xuICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLmFwcC52YXVsdC5tb2RpZnkoYXJjaGl2b0FjdGl2bywgYC0tLVxcbiR7eWFtbERhdGF9XFxuLi4uYCk7XG4gICAgICAgICAgbmV3IE5vdGljZShcIlNlIGhhIGd1YXJkYWRvIGVsIGxpbmsgZGUgbGEgbm90YSBLaW5kbGUgZW4gZWwgYXJjaGl2byBhY3R1YWwuXCIpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRJdGVtczogKCkgPT4gbm90ZXNMaXN0LFxuICAgICAgICByZW5kZXJTdWdnZXN0aW9uOiAoaXRlbTogVEZpbGUsIGVsOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICAgIGVsLnRleHRDb250ZW50ID0gaXRlbS5iYXNlbmFtZTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgbmV3IFN1Z2dlc3Rlcih0aGlzLnBsdWdpbiwgc3VnZ2VzdG9yQ29uZmlnKS5zdGFydCgpO1xuICAgIH1cbiAgfVxuXG5hc3luYyBnZXROb3Rlc0Zyb21Gb2xkZXIoZm9sZGVyUGF0aDogc3RyaW5nKTogUHJvbWlzZTxURmlsZVtdPiB7XG4gIGNvbnN0IGZvbGRlckZpbGVzID0gYXdhaXQgdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmdldEFsbExvYWRlZEZpbGVzKCk7XG4gIHJldHVybiBmb2xkZXJGaWxlcy5maWx0ZXIoZmlsZSA9PiBmaWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgZmlsZS5wYXRoLnN0YXJ0c1dpdGgoZm9sZGVyUGF0aCkpO1xufVxuXG5cblxuICAgICAgLy8gRnVuY2lcdTAwRjNuIHBhcmEgY3JlYXIgeSBtb3N0cmFyIGVsIGJvdFx1MDBGM24gaW5pY2lhbCBcIk1lblx1MDBGQSBob3lcIlxuICAgICAgYXN5bmMgbW9zdHJhckJvdG9uQ3JlYXJMaWJybyhkdikge1xuICAgICAgICBsZXQgZm9sZGVyUHJpbmNpcGFsID0gdGhpcy5wbHVnaW4uc2V0dGluZ3NbXCJmb2xkZXJfQmlibGlvdGVjYVwiXTtcbiAgICAgICAgY29uc3QgbGlicmFyeUZvbGRlciA9IHRoaXMucGx1Z2luLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZm9sZGVyUHJpbmNpcGFsKTtcbiAgICBcbiAgICAgICAgaWYgKCEobGlicmFyeUZvbGRlciBpbnN0YW5jZW9mIFRGb2xkZXIpKSB7XG4gICAgICAgICAgbmV3IE5vdGljZShgTGEgY2FycGV0YSAke2ZvbGRlclByaW5jaXBhbH0gbm8gZXhpc3RlLmApO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBsZXQgYXJjaGl2b0FjdGl2byA9IHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICBpZiAoIWFyY2hpdm9BY3Rpdm8pIHtcbiAgICAgICAgICBuZXcgTm90aWNlKFwiTm8gaGF5IHVuYSBub3RhIGFjdGl2YS5cIik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGNvbnN0IGJvb2tFeGlzdHMgPSBhd2FpdCB0aGlzLmJvb2tFeGlzdHNJbkxpYnJhcnkoZm9sZGVyUHJpbmNpcGFsLCBhcmNoaXZvQWN0aXZvKTtcbiAgICBcbiAgICAgICAgaWYgKGJvb2tFeGlzdHMpIHtcbiAgICAgICAgICBjb25zdCBhbGlhcyA9IGF3YWl0IHRoaXMuZ2V0QWxpYXMoYm9va0V4aXN0cyk7XG4gICAgICAgICAgY29uc3QgdGV4dG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgICAgICAgbGluay5ocmVmID0gYm9va0V4aXN0cy5wYXRoO1xuICAgICAgICAgIGxpbmsudGV4dENvbnRlbnQgPSBhbGlhcztcbiAgICAgICAgICBsaW5rLmRhdGFzZXQuaHJlZiA9IGJvb2tFeGlzdHMucGF0aDtcbiAgICAgICAgICBsaW5rLmNsYXNzTmFtZSA9IFwiaW50ZXJuYWwtbGlua1wiO1xuICAgICAgICAgIFxuICAgICAgICAgIHRleHRvLnRleHRDb250ZW50ID0gYEVsIGxpYnJvIHlhIGVzdFx1MDBFMSBlbiBsYSBiaWJsaW90ZWNhOiBgO1xuICAgICAgICAgIHRleHRvLmFwcGVuZENoaWxkKGxpbmspO1xuICAgICAgICAgIGR2LmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0ZXh0byk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZHYuY29udGFpbmVyLmlubmVySFRNTCA9IFwiXCI7IC8vIExpbXBpYXIgZWwgY29udGVuZWRvclxuICAgIFxuICAgICAgICAgIGNvbnN0IGJvdG9uQ3JlYXJMaWJybyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgICAgYm90b25DcmVhckxpYnJvLnRleHRDb250ZW50ID0gXCJJbmdyZXNhciBhIG1pIEJpYmxpb3RlY2FcIjtcbiAgICAgICAgICBkdi5jb250YWluZXIuYXBwZW5kQ2hpbGQoYm90b25DcmVhckxpYnJvKTtcbiAgICBcbiAgICAgICAgICBib3RvbkNyZWFyTGlicm8ub25jbGljayA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuaW5ncmVzYXJMaWJyb0JpYmxpb3RlY2EoKTsgLy8gTW9zdHJhciBsb3MgYm90b25lcyBhZGljaW9uYWxlcyBhbCBoYWNlciBjbGljXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIFxuICAgICAgYXN5bmMgYm9va0V4aXN0c0luTGlicmFyeShmb2xkZXJQcmluY2lwYWwsIGFyY2hpdm9BY3Rpdm8pIHtcbiAgICAgICAgY29uc3QgZmlsZXMgPSB0aGlzLnBsdWdpbi5hcHAudmF1bHQuZ2V0RmlsZXMoKTtcbiAgICAgICAgY29uc3QgYWN0aXZlRmlsZU5hbWUgPSBhcmNoaXZvQWN0aXZvLmJhc2VuYW1lO1xuICAgIFxuICAgICAgICBmb3IgKGxldCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgICAgICAgaWYgKGZpbGUucGF0aC5zdGFydHNXaXRoKGZvbGRlclByaW5jaXBhbCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5wbHVnaW4uYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuICAgICAgICAgICAgY29uc3QgZnJvbnRtYXR0ZXIgPSBjYWNoZT8uZnJvbnRtYXR0ZXI7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChmcm9udG1hdHRlciAmJiBmcm9udG1hdHRlci5hc3VudG8pIHtcbiAgICAgICAgICAgICAgY29uc3QgYXN1bnRvID0gZnJvbnRtYXR0ZXIuYXN1bnRvO1xuICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhc3VudG8pKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgZW50cnkgb2YgYXN1bnRvKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoZW50cnkuaW5jbHVkZXMoYFtbJHthY3RpdmVGaWxlTmFtZX1dXWApKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXN1bnRvID09PSAnc3RyaW5nJyAmJiBhc3VudG8uaW5jbHVkZXMoYFtbJHthY3RpdmVGaWxlTmFtZX1dXWApKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbGU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBhc3luYyBnZXRBbGlhcyhmaWxlKSB7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5wbHVnaW4uYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuICAgICAgICBjb25zdCBmcm9udG1hdHRlciA9IGNhY2hlPy5mcm9udG1hdHRlcjtcbiAgICAgICAgcmV0dXJuIGZyb250bWF0dGVyICYmIGZyb250bWF0dGVyLmFsaWFzZXMgJiYgZnJvbnRtYXR0ZXIuYWxpYXNlc1swXSA/IGZyb250bWF0dGVyLmFsaWFzZXNbMF0gOiBmaWxlLmJhc2VuYW1lO1xuICAgICAgfVxuXG5cblxuXG4gIGFzeW5jIGluZ3Jlc2FyTGlicm9CaWJsaW90ZWNhKCl7XG4gICAgZGVidWdnZXI7XG4gICAgY29uc3QgdGVtcGxhdGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKFwiUGxhbnRpbGxhcy9TdWJzaXN0ZW1hcy9MaWJyb3MvQmlibGlvdGVjYS9QbHQgLSBMaWJybyBhIEJpYmxpb3RlY2EubWRcIik7ICAvL09idGVuZXIgZWwgVEZpbGUgZGVsIHRlbXBsYXRlXG4gICAgY29uc3QgZmlsZW5hbWUgPSBcIk51ZXZvIExpYnJvXCJcbiAgICBjb25zdCBmb2xkZXIgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKFwiSW5ib3hcIilcbiAgICBpZiAodGVtcGxhdGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgLy8gQWhvcmEgJ2ZpbGUnIGVzIHR1IGFyY2hpdm8gZGVzZWFkbywgeSBwdWVkZXMgdHJhYmFqYXIgY29uIFx1MDBFOWwgY29tbyBuZWNlc2l0ZXNcbiAgICAgIGNvbnNvbGUubG9nKFwiQXJjaGl2byBlbmNvbnRyYWRvOlwiLCB0ZW1wbGF0ZSk7XG4gICAgIH0gZWxzZSB7XG4gICAgICAvLyBTaSBlbCBhcmNoaXZvIG5vIHNlIGVuY29udHJcdTAwRjMsICdmaWxlJyBzZXJcdTAwRTEgbnVsbFxuICAgICAgY29uc29sZS5sb2coXCJBcmNoaXZvIG5vIGVuY29udHJhZG8uXCIpO1xuICAgICB9XG4gICAgbGV0IGNyZWFyTm90YSA9IHRoaXMudHAuZmlsZS5zdGF0aWNfZnVuY3Rpb25zLmdldChcImNyZWF0ZV9uZXdcIik7XG4gICAgYXdhaXQgY3JlYXJOb3RhICh0ZW1wbGF0ZSwgZmlsZW5hbWUsIGZhbHNlLCBmb2xkZXIpLmJhc2VuYW1lO1xufVxuXG5cblxuXG4gXG5cbn0iLCAiLypcbiAqIEZpbGVuYW1lOiAvc3JjL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG8vQVBJL3VwZGF0ZVNlc2lvbkxlY3R1cmEudHNcbiAqIFBhdGg6IC9zcmMvbW9kdWxlcy9tb2R1bG9SZWdpc3Ryb1RpZW1wby9BUElcbiAqIENyZWF0ZWQgRGF0ZTogMjAyNS0wMi0yMyAxNTo1Nzo0MFxuICogQXV0aG9yOiBBbmRyXHUwMEU5cyBKdWxpXHUwMEUxbiBCb3JiXHUwMEYzblxuICogLS0tLS1cbiAqIExhc3QgTW9kaWZpZWQ6IDIwMjUtMDItMjMgMTc6NDM6NDdcbiAqIE1vZGlmaWVkIEJ5OiBBbmRyXHUwMEU5cyBKdWxpXHUwMEUxbiBCb3JiXHUwMEYzblxuICogLS0tLS1cbiAqIENvcHlyaWdodCAoYykgMjAyNSAtIEFuZHJcdTAwRTlzIEp1bGlcdTAwRTFuIEJvcmJcdTAwRjNuXG4gKi9cblxuXG5pbXBvcnQge3V0aWxzQVBJfSBmcm9tICcuL3V0aWxzQVBJJ1xuaW1wb3J0IHsgVEZpbGUgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBVcGRhdGVTTCB9IGZyb20gJy4uL0ludGVyZmFjZXMvVXBkYXRlU0wnO1xuaW1wb3J0IHsgWUFNTFVwZGF0ZXJBUEkgfSBmcm9tICcuLi8uLi9ub3RlTGlmZWN5Y2xlTWFuYWdlci9BUEkvWUFNTFVwZGF0ZXJBUEknXG5pbXBvcnQge0RhdGVUaW1lfSBmcm9tICdsdXhvbic7XG5cbmV4cG9ydCBjbGFzcyB1cGRhdGVTZXNpb25MZWN0dXJhIGV4dGVuZHMgWUFNTFVwZGF0ZXJBUEkgaW1wbGVtZW50cyBVcGRhdGVTTHtcbiAgICBwcml2YXRlIHV0aWxzQXBpOiB1dGlsc0FQSTtcbiAgICBwcm90ZWN0ZWQgbm90YTogb2JqZWN0O1xuICAgIHByb3RlY3RlZCBpbmZvU3Vic2lzdGVtYTogYW55OyBcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgIHN1cGVyKHBsdWdpbik7XG4gICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgIHRoaXMudXRpbHNBcGkgPSBuZXcgdXRpbHNBUEkocGx1Z2luKTtcbiAgICAgIHRoaXMudHAgPSBwbHVnaW4udHA7XG4gICAgICB0aGlzLm5vdGEgPSB7fTtcbiAgICAgIHRoaXMuaW5mb05vdGEgPSB7fTtcbiAgICB9XG5cblxuICAgIC8vYWN0dWFsaXphck5vdGEoaW5mb05vdGE6IGFueSwgY2FtcG9zOiBhbnkpOiBQcm9taXNlPGFueT47XG4gICAgLy9nZXRGZWNoYSgpOiBQcm9taXNlPHN0cmluZz47XG4gICAgLy9nZXRIb3JhRmluYWwoKTogUHJvbWlzZTxzdHJpbmc+O1xuICAgIFxuXG4gICAgLy9nZXRUaWVtcG9MZWlkbygpOiBQcm9taXNlPHN0cmluZz47XG4gICAgXG4gICAgYXN5bmMgZ2V0VGllbXBvTGVpZG8ocGFyYW1ldHJvLCBhY3R1YWwpeyAgXG4gICAgICAgIGRlYnVnZ2VyOyAgICAgIFxuICAgICAgICBsZXQgaG9yYUluaWNpb1N0ciA9IHRoaXMuaW5mb05vdGEuaG9yYUluaWNpbztcbiAgICAgICAgbGV0IGNpZXJyZTtcbiAgICAgICAgLy8gU3Vwb25pZW5kbyBxdWUgZWwgZm9ybWF0byBlcyBcIllZWVktTU0tREQgZGRkZCBISDptbVwiIHkgcXVpZXJlcyBjb252ZXJ0aXJsbyBhIHVuIGZvcm1hdG8gcmVjb25vY2lkbyBwb3IgRGF0ZVxuICAgICAgICAvLyBQcmltZXJvLCBlbGltaW5hIGxhIHBhcnRlIGRlbCBkXHUwMEVEYSBkZSBsYSBzZW1hbmEsIHlhIHF1ZSBEYXRlKCkgbm8gbGEgbmVjZXNpdGFcbiAgICAgICAgbGV0IFtmZWNoYSwgLCBob3JhXSA9IGhvcmFJbmljaW9TdHIuc3BsaXQoJyAnKTtcbiAgICAgICAgbGV0IGZlY2hhSG9yYUlTTyA9IGAke2ZlY2hhfVQke2hvcmF9YDtcbiAgICAgICAgLy8gQ3JlYXIgb2JqZXRvcyBEYXRlXG4gICAgICAgIGxldCBob3JhSW5pY2lvID0gbmV3IERhdGUoZmVjaGFIb3JhSVNPKTtcbiAgICAgICAgaWYgKHBhcmFtZXRybyA9PSB1bmRlZmluZWQpeyAgICBcbiAgICAgICAgY2llcnJlID0gbmV3IERhdGUoKTtcblxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGxldCBbZmVjaGFDaWVycmUsICxob3JhQ2llcnJlXSA9IHBhcmFtZXRyby5zcGxpdCgnICcpOyAgIFxuICAgICAgICAgICAgbGV0IGZlY2hhSG9yYUNpZXJyZUlTTyA9IGAke2ZlY2hhQ2llcnJlfVQke2hvcmFDaWVycmV9YDtcbiAgICAgICAgICAgIGNpZXJyZSA9IG5ldyBEYXRlKGZlY2hhSG9yYUNpZXJyZUlTTyk7XG4gICAgICAgIH0gICAgICAgIFxuICAgICAgICAvLyBDYWxjdWxhciBsYSBkaWZlcmVuY2lhIGVuIG1pbGlzZWd1bmRvc1xuICAgICAgICBsZXQgZGlmZXJlbmNpYUVuTWlsaXNlZ3VuZG9zID0gY2llcnJlIC0gaG9yYUluaWNpbztcbiAgICAgICAgcmV0dXJuIGRpZmVyZW5jaWFFbk1pbGlzZWd1bmRvcztcbiAgICB9XG5cbiAgICBhc3luYyBnZXRFc3RhZG8ocGFyYW1ldHJvLCBhY3R1YWwpe1xuICAgICAgICBsZXQgY2FtcG87XG4gICAgICAgIGlmIChwYXJhbWV0cm8gPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgLy9sZXQgc3VnZ2VzdGVyID0gdGhpcy50cC5zeXN0ZW0uc3RhdGljX2Z1bmN0aW9ucy5nZXQoXCJzdWdnZXN0ZXJcIik7XG5cdCAgICAvL2NhbXBvID0gYXdhaXQgc3VnZ2VzdGVyKFtcIlx1RDgzRFx1REQzNSAtPiBDb21wbGV0YWRvIC0gSW5mb3JtYWNpXHUwMEYzblwiLCBcIlx1RDgzRFx1REZFMiAtPiBGaW5hbGl6YWRvXCIsXCJcdUQ4M0RcdURGRTEgLT4gRW4gZWplY3VjaVx1MDBGM25cIiwgXCJcdUQ4M0RcdUREMzQgLT4gRGV0ZW5pZG9cIl0sW1wiXHVEODNEXHVERDM1XCIsIFwiXHVEODNEXHVERkUyXCIsXCJcdUQ4M0RcdURGRTFcIiwgXCJcdUQ4M0RcdUREMzRcIl0sIGZhbHNlLCBcIlNlbGVjY2lvbmUgZWwgbnVldm8gZXN0YWRvOlwiKTtcbiAgICAgICAgY2FtcG8gPSBcIlx1RDgzRFx1REQzNVwiO1xuICAgICAgICAvLyBWZXJpZmljYXIgc2kgZWwgdXN1YXJpbyBwcmVzaW9uXHUwMEYzIEVzYy5cbiAgICAgICAgaWYgKGNhbXBvID09PSBudWxsKSB7XG4gICAgICAgIG5ldyBOb3RpY2UoXCJNb2RpZmljYWNpXHUwMEYzbiBkZSBub3RhIGNhbmNlbGFkYSBwb3IgZWwgdXN1YXJpby5cIik7XG4gICAgICAgIHJldHVybjsgLy8gVGVybWluYSBsYSBlamVjdWNpXHUwMEYzbiBkZSBsYSBmdW5jaVx1MDBGM24gYXF1XHUwMEVELlxuXHQgICAgfVxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGNhbXBvID0gcGFyYW1ldHJvO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ub3RhLmVzdGFkbyA9IGNhbXBvO1xuICAgICAgICByZXR1cm4gY2FtcG87XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0UFBNKCk6IFByb21pc2U8YW55PntcbiAgICAgICAgZGVidWdnZXI7XG4gICAgICAgIGxldCBwYWxhYnJhc1BvckhvamEgPSBwYXJzZUludCh0aGlzLmluZm9Ob3RhLnBhbGFicmFzUG9ySG9qYSk7XG4gICAgICAgIGxldCBwYWdpbmFzTGVpZGFzID0gcGFyc2VJbnQodGhpcy5ub3RhLnBhZ0xlaWRhcyk7XG4gICAgICAgIGxldCB0aWVtcG9MZWlkbyA9IHBhcnNlSW50KHRoaXMubm90YS50aWVtcG9MZWlkbyk7XG4gICAgICAgIGxldCBQUE0gPSAocGFsYWJyYXNQb3JIb2phICogcGFnaW5hc0xlaWRhcykvKHRpZW1wb0xlaWRvLzYwMDAwKTtcbiAgICAgICAgcmV0dXJuIFBQTTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRQYWdMZWlkYXMoKTogUHJvbWlzZTxhbnk+e1xuICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgbGV0IHBhZ0ZpbiA9IHBhcnNlSW50KHRoaXMubm90YS5wYWdGaW4pO1xuXHQgICAgIGxldCBwYWdpbmFzTGVpZGFzID0gcGFnRmluIC0gcGFyc2VJbnQodGhpcy5pbmZvTm90YS5wYWdJbmljaW8pO1xuICAgICAgICAgLy90aGlzLm5vdGEucGFnTGVpZGFzID0gcGFyc2VJbnQocGFnaW5hc0xlaWRhcyk7XG4gICAgICAgICByZXR1cm4gcGFyc2VJbnQocGFnaW5hc0xlaWRhcyk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0UGFnRmluKCk6IFByb21pc2U8YW55PntcbiAgICAgICAgZGVidWdnZXI7XG4gICAgICAgIGxldCBwcm9tcHQgPSB0aGlzLnRwLnN5c3RlbS5zdGF0aWNfZnVuY3Rpb25zLmdldChcInByb21wdFwiKTtcbiAgICAgICAgbGV0IHBhZ0ZpbiA9IGF3YWl0IHByb21wdChgXHUwMEJGSGFzdGEgcXVlIHBcdTAwRTFnaW5hIGxlXHUwMEVEc3RlP2AsIGAke3RoaXMuaW5mb05vdGEucGFnSW5pY2lvfWAsIHRydWUpXG4gICAgICAgIC8vdGhpcy5ub3RhLnBhZ0ZpbiA9IHBhcnNlSW50KHBhZ0ZpbilcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHBhZ0Zpbik7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0UG9yTGVlcigpOiBQcm9taXNlPG51bWJlcj57XG4gICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICBsZXQgcG9yTGVlciA9IHBhcnNlSW50KHRoaXMuaW5mb05vdGEucGFnaW5hcykgLSBwYXJzZUludCh0aGlzLm5vdGEucGFnRmluKTtcbiAgICAgICAgLy90aGlzLm5vdGEucG9yTGVlciA9IHBvckxlZXI7XG4gICAgICAgIHJldHVybiBwb3JMZWVyO1xuICAgIH1cblxufSIsICIvLyBzcmMvbW9kdWxlcy90YXNrTWFuYWdlci9hcGkvdGFyZWFzQVBJLnRzXG5cbmltcG9ydCB7IFRGaWxlLCBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgTXlQbHVnaW4gZnJvbSAnLi4vLi4vLi4vbWFpbic7XG5pbXBvcnQgeyBUYXNrLCBFc3RhZG9UYXJlYSB9IGZyb20gJy4uL2ludGVyZmFjZXMvdGFza0ludGVyZmFjZXMnO1xuaW1wb3J0IHsgVGFza1V0aWxzIH0gZnJvbSAnLi4vdXRpbHMvdGFza1V0aWxzJztcbmltcG9ydCB7IFRhc2tXZWlnaHRDYWxjdWxhdG9yIH0gZnJvbSAnLi4vdXRpbHMvdGFza1dlaWdodENhbGN1bGF0b3InO1xuXG5leHBvcnQgY2xhc3MgVGFyZWFzQVBJIHtcbiAgICBwcml2YXRlIHRhc2tVdGlsczogVGFza1V0aWxzO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwbHVnaW46IE15UGx1Z2luKSB7XG4gICAgICAgIHRoaXMudGFza1V0aWxzID0gbmV3IFRhc2tVdGlscyhwbHVnaW4pO1xuICAgICAgICBUYXNrV2VpZ2h0Q2FsY3VsYXRvci5zZXRUYXNrVXRpbHModGhpcy50YXNrVXRpbHMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGViZUV4Y2x1aXJBcmNoaXZvKGZpbGU6IFRGaWxlKTogYm9vbGVhbiB7XG4gICAgICAgIC8vIEV4Y2x1aXIgbGEgY2FycGV0YSBQbGFudGlsbGFzIHkgc3VzIHN1YmNhcnBldGFzXG4gICAgICAgIGlmIChmaWxlLnBhdGguc3RhcnRzV2l0aCgnUGxhbnRpbGxhcy8nKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFeGNsdWlyIGxhIGNhcnBldGEgZGVsIHNpc3RlbWEgR1REIHkgc3VzIHN1YmNhcnBldGFzXG4gICAgICAgIGlmIChmaWxlLnBhdGguc3RhcnRzV2l0aChgJHt0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfU2lzdGVtYUdURH0vYCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRXhjbHVpciBjYXJwZXRhIGRlIGFyY2hpdm9zIChzaSBleGlzdGUpXG4gICAgICAgIGlmIChmaWxlLnBhdGguc3RhcnRzV2l0aCgnQXJjaGl2by8nKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBwcm9jZXNhclRhcmVhcyhcbiAgICAgICAgZmlsZXM6IFRGaWxlW10sIFxuICAgICAgICBmaWx0cm86ICh0YXNrOiBUYXNrKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPixcbiAgICAgICAgYnVzY2FyRW5FamVjdWNpb246IGJvb2xlYW4gPSBmYWxzZVxuICAgICk6IFByb21pc2U8VGFza1tdPiB7XG4gICAgICAgIGNvbnN0IHRhcmVhczogVGFza1tdID0gW107XG4gICAgICAgIGNvbnN0IGVycm9yZXM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZmlsZXNQYXJhUHJvY2VzYXIgPSBmaWxlcy5maWx0ZXIoZmlsZSA9PiAhdGhpcy5kZWJlRXhjbHVpckFyY2hpdm8oZmlsZSkpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYFxcbj09PSBJTklDSUFORE8gUFJPQ0VTQU1JRU5UTyBERSBUQVJFQVMgPT09YCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgUHJvY2VzYW5kbyAke2ZpbGVzUGFyYVByb2Nlc2FyLmxlbmd0aH0gYXJjaGl2b3MgZGUgJHtmaWxlcy5sZW5ndGh9IHRvdGFsZXNgKTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzUGFyYVByb2Nlc2FyKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVuaWRvID0gYXdhaXQgdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmNhY2hlZFJlYWQoZmlsZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVhcyA9IGNvbnRlbmlkby5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpdHVsb05vdGEgPSB0aGlzLnRhc2tVdGlscy5vYnRlbmVyVGl0dWxvTm90YShmaWxlKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXFxuUHJvY2VzYW5kbyBhcmNoaXZvOiAke2ZpbGUucGF0aH1gKTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGxpbmVhIG9mIGxpbmVhcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGV0ZWN0YXIgZWwgdGlwbyBkZSB0YXJlYSBiYXNhZG8gZW4gZWwgY2hlY2tib3hcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVzRW5FamVjdWNpb24gPSBsaW5lYS50cmltKCkuc3RhcnRzV2l0aCgnLSBbL10nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVzQWJpZXJ0YSA9IGxpbmVhLnRyaW0oKS5zdGFydHNXaXRoKCctIFsgXScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXNDb21wbGV0YWRhID0gbGluZWEudHJpbSgpLnN0YXJ0c1dpdGgoJy0gW3hdJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhbHRhciBsXHUwMEVEbmVhcyBxdWUgbm8gc29uIHRhcmVhc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsaW5lYS50cmltKCkuc3RhcnRzV2l0aCgnLSBbJykpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbXBsZW1lbnRhciBsXHUwMEYzZ2ljYSBzZXBhcmFkYSBwYXJhIHRhcmVhcyBlbiBlamVjdWNpXHUwMEYzblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1c2NhckVuRWplY3VjaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlc0VuRWplY3VjaW9uKSBjb250aW51ZTsgLy8gU29sbyBwcm9jZXNhciB0YXJlYXMgZW4gZWplY3VjaVx1MDBGM25cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUGFyYSBvdHJhcyBiXHUwMEZBc3F1ZWRhcywgaWdub3JhciB0YXJlYXMgY29tcGxldGFkYXMgeSBlbiBlamVjdWNpXHUwMEYzblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlc0NvbXBsZXRhZGEgfHwgZXNFbkVqZWN1Y2lvbikgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlc0FiaWVydGEpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWVyIGVsIHRleHRvIGxpbXBpbyBkZSBsYSB0YXJlYVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dG9MaW1waW8gPSB0aGlzLnRhc2tVdGlscy5saW1waWFyVGV4dG9UYXJlYShsaW5lYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0b09yaWdpbmFsID0gbGluZWEudHJpbSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWVyIG1ldGFkYXRvc1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmVjaGFzWUhvcmFzID0gdGhpcy50YXNrVXRpbHMuZXh0cmFlckZlY2hhc1lIb3JhcyhsaW5lYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBldGlxdWV0YXNFeHRyYWlkYXMgPSB0aGlzLnRhc2tVdGlscy5leHRyYWVyRXRpcXVldGFzKGxpbmVhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV0aXF1ZXRhc0NhdGVnb3JpemFkYXMgPSB0aGlzLnRhc2tVdGlscy5jYXRlZ29yaXphckV0aXF1ZXRhcyhldGlxdWV0YXNFeHRyYWlkYXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyB0YXNrSWQsIGRlcGVuZGVuY3lJZCB9ID0gdGhpcy50YXNrVXRpbHMuZXh0cmFlckRlcGVuZGVuY2lhc1lJZHMobGluZWEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhciBvYmpldG8gZGUgdGFyZWFcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmVhOiBUYXNrID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRvOiB0ZXh0b0xpbXBpbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0b09yaWdpbmFsOiB0ZXh0b09yaWdpbmFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1dGFBcmNoaXZvOiBmaWxlLnBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9tYnJlQXJjaGl2bzogZmlsZS5iYXNlbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXR1bG86IHRpdHVsb05vdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXN0YWRvOiBlc0VuRWplY3VjaW9uID8gRXN0YWRvVGFyZWEuRW5FamVjdWNpb24gOiBFc3RhZG9UYXJlYS5BYmllcnRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmZlY2hhc1lIb3JhcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldGlxdWV0YXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9kYXM6IGV0aXF1ZXRhc0V4dHJhaWRhcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZXRpcXVldGFzQ2F0ZWdvcml6YWRhc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza0lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY3lJZFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXIgcGVzbyB5IHZlcmlmaWNhciBkZXBlbmRlbmNpYXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmVhLndlaWdodCA9IFRhc2tXZWlnaHRDYWxjdWxhdG9yLmNhbGN1bGF0ZVdlaWdodCh0YXJlYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVwZW5kZW5jeUlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXN0YWRvRGVwZW5kZW5jaWEgPSBhd2FpdCB0aGlzLnRhc2tVdGlscy52ZXJpZmljYXJFc3RhZG9UYXJlYShkZXBlbmRlbmN5SWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmVhLmlzQmxvY2tlZCA9ICFlc3RhZG9EZXBlbmRlbmNpYS5jb21wbGV0YWRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmVhLmRlcGVuZGVuY3lMb2NhdGlvbiA9IGVzdGFkb0RlcGVuZGVuY2lhLnJ1dGFBcmNoaXZvO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmVhLmRlcGVuZGVuY3lUaXRsZSA9IGVzdGFkb0RlcGVuZGVuY2lhLnRpdHVsb0FyY2hpdm87XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZWEuZGVwZW5kZW5jeVRleHRvID0gZXN0YWRvRGVwZW5kZW5jaWEudGV4dG9UYXJlYTsgLy8gQWdyZWdhciBlbCB0ZXh0byBkZSBsYSB0YXJlYSBkZXBlbmRpZW50ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBcGxpY2FyIGZpbHRyb1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VtcGxlRmlsdHJvID0gYXdhaXQgUHJvbWlzZS5yZXNvbHZlKGZpbHRybyh0YXJlYSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1bXBsZUZpbHRybykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAtPiBUYXJlYSBhZ3JlZ2FkYTogJHt0ZXh0b0xpbXBpby5zdWJzdHJpbmcoMCwgNTApfS4uLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmVhcy5wdXNoKHRhcmVhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGZpbGVFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcmVzLnB1c2goYEVycm9yIHByb2Nlc2FuZG8gYXJjaGl2byAke2ZpbGUucGF0aH06ICR7ZmlsZUVycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGVuIGFyY2hpdm8gJHtmaWxlLnBhdGh9OmAsIGZpbGVFcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2VuZXJhbCBwcm9jZXNhbmRvIHRhcmVhczonLCBlcnJvcik7XG4gICAgICAgICAgICBuZXcgTm90aWNlKCdFcnJvciBwcm9jZXNhbmRvIHRhcmVhcy4gUmV2aXNhIGxhIGNvbnNvbGEgcGFyYSBtXHUwMEUxcyBkZXRhbGxlcy4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlcnJvcmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignXFxuRXJyb3JlcyBlbmNvbnRyYWRvcyBkdXJhbnRlIGVsIHByb2Nlc2FtaWVudG86JywgZXJyb3Jlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZyhgXFxuPT09IFBST0NFU0FNSUVOVE8gQ09NUExFVEFETyA9PT1gKTtcbiAgICAgICAgY29uc29sZS5sb2coYFRvdGFsIGRlIHRhcmVhcyBlbmNvbnRyYWRhczogJHt0YXJlYXMubGVuZ3RofWApO1xuICAgICAgICBcbiAgICAgICAgLy8gT3JkZW5hciBsYXMgdGFyZWFzIHNlZ1x1MDBGQW4gY29ycmVzcG9uZGFcbiAgICAgICAgcmV0dXJuIGJ1c2NhckVuRWplY3VjaW9uID8gXG4gICAgICAgICAgICB0aGlzLm9yZ2FuaXphclRhcmVhc0VuRWplY3VjaW9uKHRhcmVhcykgOiBcbiAgICAgICAgICAgIFRhc2tXZWlnaHRDYWxjdWxhdG9yLnNvcnRUYXNrcyh0YXJlYXMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ3VhcmRhcllBYnJpckFyY2hpdm8oXG4gICAgICAgIG5vbWJyZUFyY2hpdm86IHN0cmluZywgXG4gICAgICAgIGNvbnRlbmlkbzogc3RyaW5nXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIEFzZWd1cmFyc2UgZGUgcXVlIGV4aXN0ZSBsYSBjYXJwZXRhIGRlbCBzaXN0ZW1hIEdURFxuICAgICAgICAgICAgICAgIGNvbnN0IGNhcnBldGFHVEQgPSB0aGlzLnBsdWdpbi5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfU2lzdGVtYUdURFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKCFjYXJwZXRhR1REKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLmFwcC52YXVsdC5jcmVhdGVGb2xkZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfU2lzdGVtYUdURFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGFyY2hpdm9FeGlzdGVudGUgPSB0aGlzLnBsdWdpbi5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG5vbWJyZUFyY2hpdm8pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChhcmNoaXZvRXhpc3RlbnRlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uYXBwLnZhdWx0Lm1vZGlmeShhcmNoaXZvRXhpc3RlbnRlLCBjb250ZW5pZG8pO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5hcHAud29ya3NwYWNlLmdldExlYWYoKS5vcGVuRmlsZShhcmNoaXZvRXhpc3RlbnRlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBudWV2b0FyY2hpdm8gPSBhd2FpdCB0aGlzLnBsdWdpbi5hcHAudmF1bHQuY3JlYXRlKG5vbWJyZUFyY2hpdm8sIGNvbnRlbmlkbyk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZigpLm9wZW5GaWxlKG51ZXZvQXJjaGl2byk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIGd1YXJkYXIvYWJyaXIgYXJjaGl2bzpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIE1cdTAwRTl0b2RvcyBwcmluY2lwYWxlcyBkZSBiXHUwMEZBc3F1ZWRhIGRlIHRhcmVhc1xuICAgIHB1YmxpYyBhc3luYyBnZXRUYXJlYXNWZW5jaWRhc0FiaWVydGFzKCk6IFByb21pc2U8VGFza1tdPiB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb2Nlc2FyVGFyZWFzKFxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKSxcbiAgICAgICAgICAgICh0YXJlYSkgPT4gVGFza1dlaWdodENhbGN1bGF0b3Iuc2hvdWxkSW5jbHVkZVRhc2sodGFyZWEsICd2ZW5jaWRhcycsIHRoaXMudGFza1V0aWxzLm9idGVuZXJGZWNoYUxvY2FsKCkpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldFRhcmVhc0hveSgpOiBQcm9taXNlPFRhc2tbXT4ge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm9jZXNhclRhcmVhcyhcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCksXG4gICAgICAgICAgICAodGFyZWEpID0+IFRhc2tXZWlnaHRDYWxjdWxhdG9yLnNob3VsZEluY2x1ZGVUYXNrKHRhcmVhLCAnaG95JywgdGhpcy50YXNrVXRpbHMub2J0ZW5lckZlY2hhTG9jYWwoKSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0VGFyZWFzUHJveGltYXMoZGlhc1Byb3hpbW9zOiBudW1iZXIgPSA3KTogUHJvbWlzZTxUYXNrW10+IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJvY2VzYXJUYXJlYXMoXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpLFxuICAgICAgICAgICAgKHRhcmVhKSA9PiBUYXNrV2VpZ2h0Q2FsY3VsYXRvci5zaG91bGRJbmNsdWRlVGFzayh0YXJlYSwgJ3Byb3hpbWFzJywgdGhpcy50YXNrVXRpbHMub2J0ZW5lckZlY2hhTG9jYWwoKSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0VGFyZWFzU3RhcnRWZW5jaWRhcygpOiBQcm9taXNlPFRhc2tbXT4ge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm9jZXNhclRhcmVhcyhcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCksXG4gICAgICAgICAgICAodGFyZWEpID0+IFRhc2tXZWlnaHRDYWxjdWxhdG9yLnNob3VsZEluY2x1ZGVUYXNrKHRhcmVhLCAnc3RhcnRfdmVuY2lkYXMnLCB0aGlzLnRhc2tVdGlscy5vYnRlbmVyRmVjaGFMb2NhbCgpKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZXRUYXJlYXNTdGFydFByb3hpbWFzKGRpYXNQcm94aW1vczogbnVtYmVyID0gNyk6IFByb21pc2U8VGFza1tdPiB7XG4gICAgICAgIGNvbnN0IGhveSA9IHRoaXMudGFza1V0aWxzLm9idGVuZXJGZWNoYUxvY2FsKCk7XG4gICAgICAgIGNvbnN0IGxpbWl0ZUZ1dHVybyA9IG5ldyBEYXRlKGhveSk7XG4gICAgICAgIGxpbWl0ZUZ1dHVyby5zZXREYXRlKGxpbWl0ZUZ1dHVyby5nZXREYXRlKCkgKyBkaWFzUHJveGltb3MpO1xuXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb2Nlc2FyVGFyZWFzKFxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKSxcbiAgICAgICAgICAgICh0YXJlYSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGFyZWEuZmVjaGFTdGFydCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZlY2hhU3RhcnQgPSB0aGlzLnRhc2tVdGlscy5wYXJzZWFyRmVjaGFWZW5jaW1pZW50byh0YXJlYS5mZWNoYVN0YXJ0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmVjaGFTdGFydCAmJiBmZWNoYVN0YXJ0IDw9IGxpbWl0ZUZ1dHVybyAmJiBmZWNoYVN0YXJ0ID49IGhveTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBNXHUwMEU5dG9kb3MgZGUgcmVuZGVyaXphZG8geSB2aXN1YWxpemFjaVx1MDBGM25cbiAgICBwcml2YXRlIGdlbmVyYXJCb3RvbkFjdHVhbGl6YWNpb24obWV0b2RvOiBzdHJpbmcsIHBhcmFtZXRyb3M/OiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYFxcYFxcYFxcYGRhdGF2aWV3anNcbmNvbnN0IGdwID0gYXBwLnBsdWdpbnMucGx1Z2luc1snb2JzaWRpYW4tcGVyc29uYWwtbWFuYWdlbWVudCddO1xuaWYgKCFncCkge1xuICAgIGR2LnBhcmFncmFwaChcIlx1MjZBMFx1RkUwRiBQbHVnaW4gZGUgR2VzdGlcdTAwRjNuIFBlcnNvbmFsIG5vIGVuY29udHJhZG9cIik7XG4gICAgcmV0dXJuO1xufVxuXG5jb25zdCBidG4gPSB0aGlzLmNvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywge3RleHQ6ICdcdUQ4M0RcdUREMDQgQWN0dWFsaXphciBWaXN0YSd9KTtcbmJ0bi5zdHlsZS5jc3NUZXh0ID0gJ3BhZGRpbmc6IDVweCAxNXB4OyBiYWNrZ3JvdW5kLWNvbG9yOiAjMWUxZTFlOyBjb2xvcjogI2ZmZmZmZjsgYm9yZGVyOiAxcHggc29saWQgIzRhNGE0YTsgYm9yZGVyLXJhZGl1czogNHB4OyBjdXJzb3I6IHBvaW50ZXI7IG1hcmdpbi1ib3R0b206IDEwcHg7JztcblxuYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCAoKSA9PiBidG4uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyMyZTJlMmUnKTtcbmJ0bi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKCkgPT4gYnRuLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjMWUxZTFlJyk7XG5cbmJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBuZXcgTm90aWNlKCdBY3R1YWxpemFuZG8gdmlzdGEuLi4nKTtcbiAgICAgICAgYXdhaXQgZ3AudGFyZWFzQVBJLiR7bWV0b2RvfSgke3BhcmFtZXRyb3MgfHwgJyd9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvcik7XG4gICAgICAgIG5ldyBOb3RpY2UoJ0Vycm9yIGFsIGFjdHVhbGl6YXIgdGFyZWFzJyk7XG4gICAgfVxufSk7XG5cXGBcXGBcXGBcXG5cXG5gO1xuICAgIH1cblxuICAgIC8vIE1cdTAwRTl0b2RvcyBwXHUwMEZBYmxpY29zIGRlIHZpc3VhbGl6YWNpXHUwMEYzbiBjb3JyZXNwb25kaWVudGVzIGEgbG9zIGNvbWFuZG9zXG4gICAgcHVibGljIGFzeW5jIG1vc3RyYXJUYXJlYXNWZW5jaWRhcygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmVhcyA9IGF3YWl0IHRoaXMuZ2V0VGFyZWFzVmVuY2lkYXNBYmllcnRhcygpO1xuICAgICAgICAgICAgaWYgKHRhcmVhcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdObyBoYXkgdGFyZWFzIHZlbmNpZGFzIGFiaWVydGFzLicpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgY29udGVuaWRvID0gdGhpcy5nZW5lcmFyVmlzdGFDb21wbGV0YShcbiAgICAgICAgICAgICAgICB0YXJlYXMsXG4gICAgICAgICAgICAgICAgXCJUYXJlYXMgVmVuY2lkYXNcIixcbiAgICAgICAgICAgICAgICBcIm1vc3RyYXJUYXJlYXNWZW5jaWRhc1wiXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmd1YXJkYXJZQWJyaXJBcmNoaXZvKFxuICAgICAgICAgICAgICAgIGAke3RoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9TaXN0ZW1hR1REfS9UYXJlYXMgVmVuY2lkYXMubWRgLFxuICAgICAgICAgICAgICAgIGNvbnRlbmlkb1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYFNlIGVuY29udHJhcm9uICR7dGFyZWFzLmxlbmd0aH0gdGFyZWFzIHZlbmNpZGFzYCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZW4gbW9zdHJhclRhcmVhc1ZlbmNpZGFzOlwiLCBlcnJvcik7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGBFcnJvcjogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIG1vc3RyYXJUYXJlYXNQcm94aW1hcyhkaWFzUHJveGltb3M6IG51bWJlciA9IDcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmVhcyA9IGF3YWl0IHRoaXMuZ2V0VGFyZWFzUHJveGltYXMoZGlhc1Byb3hpbW9zKTtcbiAgICAgICAgICAgIGlmICh0YXJlYXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnTm8gaGF5IHRhcmVhcyBwclx1MDBGM3hpbWFzLicpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgY29udGVuaWRvID0gdGhpcy5nZW5lcmFyVmlzdGFDb21wbGV0YShcbiAgICAgICAgICAgICAgICB0YXJlYXMsXG4gICAgICAgICAgICAgICAgXCJUYXJlYXMgUHJcdTAwRjN4aW1hc1wiLFxuICAgICAgICAgICAgICAgIFwibW9zdHJhclRhcmVhc1Byb3hpbWFzXCIsXG4gICAgICAgICAgICAgICAgZGlhc1Byb3hpbW9zXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmd1YXJkYXJZQWJyaXJBcmNoaXZvKFxuICAgICAgICAgICAgICAgIGAke3RoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9TaXN0ZW1hR1REfS9UYXJlYXMgUHJcdTAwRjN4aW1hcy5tZGAsXG4gICAgICAgICAgICAgICAgY29udGVuaWRvXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbmV3IE5vdGljZShgU2UgZW5jb250cmFyb24gJHt0YXJlYXMubGVuZ3RofSB0YXJlYXMgcHJcdTAwRjN4aW1hc2ApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGVuIG1vc3RyYXJUYXJlYXNQcm94aW1hczpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgbmV3IE5vdGljZShgRXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBtb3N0cmFyVGFyZWFzSG95KCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgdGFyZWFzID0gYXdhaXQgdGhpcy5nZXRUYXJlYXNIb3koKTtcbiAgICAgICAgICAgIGlmICh0YXJlYXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnTm8gaGF5IHRhcmVhcyBwcm9ncmFtYWRhcyBwYXJhIGhveS4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbmlkbyA9IHRoaXMuZ2VuZXJhclZpc3RhQ29tcGxldGEoXG4gICAgICAgICAgICAgICAgdGFyZWFzLFxuICAgICAgICAgICAgICAgIFwiVGFyZWFzIHBhcmEgSG95XCIsXG4gICAgICAgICAgICAgICAgXCJtb3N0cmFyVGFyZWFzSG95XCJcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZ3VhcmRhcllBYnJpckFyY2hpdm8oXG4gICAgICAgICAgICAgICAgYCR7dGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX1Npc3RlbWFHVER9L1RhcmVhcyBwYXJhIEhveS5tZGAsXG4gICAgICAgICAgICAgICAgY29udGVuaWRvXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbmV3IE5vdGljZShgU2UgZW5jb250cmFyb24gJHt0YXJlYXMubGVuZ3RofSB0YXJlYXMgcGFyYSBob3lgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBlbiBtb3N0cmFyVGFyZWFzSG95OlwiLCBlcnJvcik7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGBFcnJvcjogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIG1vc3RyYXJUYXJlYXNTdGFydFZlbmNpZGFzKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgdGFyZWFzID0gYXdhaXQgdGhpcy5nZXRUYXJlYXNTdGFydFZlbmNpZGFzKCk7XG4gICAgICAgICAgICBpZiAodGFyZWFzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ05vIGhheSB0YXJlYXMgY29uIGluaWNpbyB2ZW5jaWRvLicpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgY29udGVuaWRvID0gdGhpcy5nZW5lcmFyVmlzdGFDb21wbGV0YShcbiAgICAgICAgICAgICAgICB0YXJlYXMsXG4gICAgICAgICAgICAgICAgXCJUYXJlYXMgY29uIEluaWNpbyBWZW5jaWRvXCIsXG4gICAgICAgICAgICAgICAgXCJtb3N0cmFyVGFyZWFzU3RhcnRWZW5jaWRhc1wiXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmd1YXJkYXJZQWJyaXJBcmNoaXZvKFxuICAgICAgICAgICAgICAgIGAke3RoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9TaXN0ZW1hR1REfS9UYXJlYXMgY29uIEluaWNpbyBWZW5jaWRvLm1kYCxcbiAgICAgICAgICAgICAgICBjb250ZW5pZG9cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGBTZSBlbmNvbnRyYXJvbiAke3RhcmVhcy5sZW5ndGh9IHRhcmVhcyBjb24gaW5pY2lvIHZlbmNpZG9gKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBlbiBtb3N0cmFyVGFyZWFzU3RhcnRWZW5jaWRhczpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgbmV3IE5vdGljZShgRXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBtb3N0cmFyVGFyZWFzU3RhcnRQcm94aW1hcyhkaWFzUHJveGltb3M6IG51bWJlciA9IDcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmVhcyA9IGF3YWl0IHRoaXMuZ2V0VGFyZWFzU3RhcnRQcm94aW1hcyhkaWFzUHJveGltb3MpO1xuICAgICAgICAgICAgaWYgKHRhcmVhcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdObyBoYXkgdGFyZWFzIHBvciBpbmljaWFyIGVuIGVsIHBlclx1MDBFRG9kbyBlc3BlY2lmaWNhZG8uJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjb250ZW5pZG8gPSB0aGlzLmdlbmVyYXJWaXN0YUNvbXBsZXRhKFxuICAgICAgICAgICAgICAgIHRhcmVhcyxcbiAgICAgICAgICAgICAgICBcIlRhcmVhcyBwb3IgSW5pY2lhclwiLFxuICAgICAgICAgICAgICAgIFwibW9zdHJhclRhcmVhc1N0YXJ0UHJveGltYXNcIixcbiAgICAgICAgICAgICAgICBkaWFzUHJveGltb3NcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZ3VhcmRhcllBYnJpckFyY2hpdm8oXG4gICAgICAgICAgICAgICAgYCR7dGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX1Npc3RlbWFHVER9L1RhcmVhcyBwb3IgSW5pY2lhci5tZGAsXG4gICAgICAgICAgICAgICAgY29udGVuaWRvXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbmV3IE5vdGljZShgU2UgZW5jb250cmFyb24gJHt0YXJlYXMubGVuZ3RofSB0YXJlYXMgcG9yIGluaWNpYXJgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBlbiBtb3N0cmFyVGFyZWFzU3RhcnRQcm94aW1hczpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgbmV3IE5vdGljZShgRXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1cdTAwRTl0b2RvcyBkZSB1dGlsaWRhZCBwcml2YWRvc1xuICAgIHByaXZhdGUgdGllbmVGZWNoYXNWYWxpZGFzKGZlY2hhc1lIb3JhczogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IHsgZmVjaGFWZW5jaW1pZW50bywgZmVjaGFTY2hlZHVsZWQsIGZlY2hhU3RhcnQgfSA9IGZlY2hhc1lIb3JhcztcbiAgICAgICAgcmV0dXJuIGZlY2hhVmVuY2ltaWVudG8gfHwgZmVjaGFTY2hlZHVsZWQgfHwgZmVjaGFTdGFydDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdlbmVyYXJWaXN0YUNvbXBsZXRhKFxuICAgICAgICB0YXJlYXM6IFRhc2tbXSxcbiAgICAgICAgdGl0dWxvOiBzdHJpbmcsXG4gICAgICAgIG1ldG9kb0FjdHVhbGl6YWNpb246IHN0cmluZyxcbiAgICAgICAgZGlhc1Byb3hpbW9zPzogbnVtYmVyXG4gICAgKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgaG95ID0gdGhpcy50YXNrVXRpbHMub2J0ZW5lckZlY2hhTG9jYWwoKTtcbiAgICAgICAgbGV0IGNvbnRlbmlkbyA9IGAjICR7dGl0dWxvfVxcblxcbmA7XG4gICAgICAgIFxuICAgICAgICBjb250ZW5pZG8gKz0gdGhpcy5nZW5lcmFyQm90b25BY3R1YWxpemFjaW9uKG1ldG9kb0FjdHVhbGl6YWNpb24sIGRpYXNQcm94aW1vcyk7XG4gICAgICAgIGNvbnRlbmlkbyArPSBgPiBbIWluZm9dIEFjdHVhbGl6YWRvOiAke2hveS50b0xvY2FsZURhdGVTdHJpbmcoKX0gJHtuZXcgRGF0ZSgpLnRvTG9jYWxlVGltZVN0cmluZygpfVxcbmA7XG4gICAgICAgIGlmIChkaWFzUHJveGltb3MpIHtcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgPiBNb3N0cmFuZG8gdGFyZWFzIHBhcmEgbG9zIHByXHUwMEYzeGltb3MgJHtkaWFzUHJveGltb3N9IGRcdTAwRURhc1xcbmA7XG4gICAgICAgIH1cbiAgICAgICAgY29udGVuaWRvICs9IGA+IFRvdGFsIGRlIHRhcmVhcyBlbmNvbnRyYWRhczogJHt0YXJlYXMubGVuZ3RofVxcblxcbmA7XG4gICAgICAgIFxuICAgICAgICBjb250ZW5pZG8gKz0gdGhpcy5yZW5kZXJpemFyVGFyZWFzQWdydXBhZGFzKHRhcmVhcyk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gY29udGVuaWRvO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyaXphclRhcmVhc0FncnVwYWRhcyh0YXJlYXM6IFRhc2tbXSk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHRhcmVhc1BvckFyY2hpdm8gPSB0aGlzLmFncnVwYXJUYXJlYXNQb3JBcmNoaXZvKHRhcmVhcyk7XG4gICAgICAgIGxldCBjb250ZW5pZG8gPSAnJztcbiAgICAgICAgXG4gICAgICAgIGZvciAoY29uc3QgW3J1dGFBcmNoaXZvLCBpbmZvXSBvZiBPYmplY3QuZW50cmllcyh0YXJlYXNQb3JBcmNoaXZvKSkge1xuICAgICAgICAgICAgY29udGVuaWRvICs9IGAjIyMgW1ske3J1dGFBcmNoaXZvfXwke2luZm8udGl0dWxvfV1dXFxuXFxuYDtcbiAgICAgICAgICAgIGluZm8udGFyZWFzLmZvckVhY2godGFyZWEgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnRlbmlkbyArPSB0aGlzLnJlbmRlcml6YXJUYXJlYSh0YXJlYSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSAnXFxuJztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGNvbnRlbmlkbztcbiAgICB9XG5cbiAgIFxuICAgIHByaXZhdGUgcmVuZGVyaXphclRhcmVhKHRhcmVhOiBUYXNrKTogc3RyaW5nIHtcbiAgICBsZXQgY29udGVuaWRvID0gYC0gWyBdICR7dGFyZWEudGV4dG99XFxuYDtcbiAgICBcbiAgICAvLyBBZ3J1cGFyIGxhcyBmZWNoYXMgcGFyYSBtZWpvciB2aXN1YWxpemFjaVx1MDBGM25cbiAgICBjb25zdCBmZWNoYXMgPSBbXTtcbiAgICBpZiAodGFyZWEuZmVjaGFWZW5jaW1pZW50bykge1xuICAgICAgICBmZWNoYXMucHVzaChgXHVEODNEXHVEQ0M1ICR7dGhpcy5mb3JtYXRlYXJGZWNoYUNvbkNvbnRleHRvKHRhcmVhLmZlY2hhVmVuY2ltaWVudG8sICdkdWUnKX1gKTtcbiAgICB9XG4gICAgaWYgKHRhcmVhLmZlY2hhU2NoZWR1bGVkKSB7XG4gICAgICAgIGZlY2hhcy5wdXNoKGBcdTIzRjMgJHt0aGlzLmZvcm1hdGVhckZlY2hhQ29uQ29udGV4dG8odGFyZWEuZmVjaGFTY2hlZHVsZWQsICdzY2hlZHVsZWQnKX1gKTtcbiAgICB9XG4gICAgaWYgKHRhcmVhLmZlY2hhU3RhcnQpIHtcbiAgICAgICAgZmVjaGFzLnB1c2goYFx1RDgzRFx1REVFQiAke3RoaXMuZm9ybWF0ZWFyRmVjaGFDb25Db250ZXh0byh0YXJlYS5mZWNoYVN0YXJ0LCAnc3RhcnQnKX1gKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKGZlY2hhcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnRlbmlkbyArPSBgICAgIC0gRmVjaGFzOlxcbiAgICAgICAgJHtmZWNoYXMuam9pbignXFxuICAgICAgICAnKX1cXG5gO1xuICAgIH1cblxuICAgICAgICAvLyBIb3Jhcmlvc1xuICAgICAgICBpZiAodGFyZWEuaG9yYUluaWNpbyB8fCB0YXJlYS5ob3JhRmluKSB7XG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICAtIFx1MjNGMCBIb3JhcmlvOiAke3RhcmVhLmhvcmFJbmljaW8gfHwgJy0tOi0tJ30gLSAke3RhcmVhLmhvcmFGaW4gfHwgJy0tOi0tJ31cXG5gO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRXRpcXVldGFzXG4gICAgICAgIGlmICh0YXJlYS5ldGlxdWV0YXMuY29udGV4dG9zPy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICAtIFx1RDgzRFx1RERDMlx1RkUwRiBDb250ZXh0b3M6ICR7dGFyZWEuZXRpcXVldGFzLmNvbnRleHRvcy5qb2luKCcgfCAnKX1cXG5gO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YXJlYS5ldGlxdWV0YXMucGVyc29uYXM/Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgICAgIC0gXHVEODNEXHVEQzY0IDogJHt0YXJlYS5ldGlxdWV0YXMucGVyc29uYXMuam9pbignIHwgJyl9XFxuYDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFyZWEuZXRpcXVldGFzLnRvZG9pc3Q/Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgICAgIC0gXHVEODNEXHVEQ0YyIDogJHt0YXJlYS5ldGlxdWV0YXMudG9kb2lzdC5qb2luKCcgJyl9XFxuYDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFyZWEuZXRpcXVldGFzLm90cmFzPy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICAtIFx1RDgzQ1x1REZGN1x1RkUwRiBPdHJhczogJHt0YXJlYS5ldGlxdWV0YXMub3RyYXMuam9pbignICcpfVxcbmA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQcmlvcmlkYWRcbiAgICAgICAgY29uc3QgcHJpb3JpZGFkID0gdGhpcy5vYnRlbmVyUHJpb3JpZGFkVGFyZWEodGFyZWEudGV4dG8pO1xuICAgICAgICBpZiAocHJpb3JpZGFkKSB7XG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICAtICR7cHJpb3JpZGFkLmVtb2ppfSBQcmlvcmlkYWQ6ICR7cHJpb3JpZGFkLm5vbWJyZX1cXG5gO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbnRlbmlkbztcbiAgICB9XG5cbiAgICBwcml2YXRlIG9idGVuZXJQcmlvcmlkYWRUYXJlYSh0ZXh0bzogc3RyaW5nKTogeyBlbW9qaTogc3RyaW5nOyBub21icmU6IHN0cmluZyB9IHwgbnVsbCB7XG4gICAgICAgIGlmICh0ZXh0by5pbmNsdWRlcygnXHVEODNEXHVERDNBJykpIHJldHVybiB7IGVtb2ppOiAnXHVEODNEXHVERDNBJywgbm9tYnJlOiAnTXV5IEFsdGEnIH07XG4gICAgICAgIGlmICh0ZXh0by5pbmNsdWRlcygnXHUyM0VCJykpIHJldHVybiB7IGVtb2ppOiAnXHUyM0VCJywgbm9tYnJlOiAnQWx0YScgfTtcbiAgICAgICAgaWYgKHRleHRvLmluY2x1ZGVzKCdcdUQ4M0RcdUREM0MnKSkgcmV0dXJuIHsgZW1vamk6ICdcdUQ4M0RcdUREM0MnLCBub21icmU6ICdNZWRpYScgfTtcbiAgICAgICAgaWYgKHRleHRvLmluY2x1ZGVzKCdcdUQ4M0RcdUREM0QnKSkgcmV0dXJuIHsgZW1vamk6ICdcdUQ4M0RcdUREM0QnLCBub21icmU6ICdCYWphJyB9O1xuICAgICAgICBpZiAodGV4dG8uaW5jbHVkZXMoJ1x1MjNFQycpKSByZXR1cm4geyBlbW9qaTogJ1x1MjNFQycsIG5vbWJyZTogJ011eSBCYWphJyB9O1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFncnVwYXJUYXJlYXNQb3JBcmNoaXZvKHRhcmVhczogVGFza1tdKTogeyBba2V5OiBzdHJpbmddOiB7IHRpdHVsbzogc3RyaW5nOyB0YXJlYXM6IFRhc2tbXSB9IH0ge1xuICAgICAgICByZXR1cm4gdGFyZWFzLnJlZHVjZSgoYWNjLCB0YXJlYSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFhY2NbdGFyZWEucnV0YUFyY2hpdm9dKSB7XG4gICAgICAgICAgICAgICAgYWNjW3RhcmVhLnJ1dGFBcmNoaXZvXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdGl0dWxvOiB0YXJlYS50aXR1bG8sXG4gICAgICAgICAgICAgICAgICAgIHRhcmVhczogW11cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWNjW3RhcmVhLnJ1dGFBcmNoaXZvXS50YXJlYXMucHVzaCh0YXJlYSk7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7fSBhcyB7IFtrZXk6IHN0cmluZ106IHsgdGl0dWxvOiBzdHJpbmc7IHRhcmVhczogVGFza1tdIH0gfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmb3JtYXRlYXJGZWNoYUNvbkNvbnRleHRvKGZlY2hhOiBzdHJpbmcsIHRpcG86ICdkdWUnIHwgJ3NjaGVkdWxlZCcgfCAnc3RhcnQnKTogc3RyaW5nIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGZlY2hhT2JqID0gdGhpcy50YXNrVXRpbHMucGFyc2VhckZlY2hhVmVuY2ltaWVudG8oZmVjaGEpO1xuICAgICAgICAgICAgaWYgKCFmZWNoYU9iaikgcmV0dXJuIGZlY2hhO1xuXG4gICAgICAgICAgICBjb25zdCBob3kgPSB0aGlzLnRhc2tVdGlscy5vYnRlbmVyRmVjaGFMb2NhbCgpO1xuICAgICAgICAgICAgY29uc3QgZGlmZXJlbmNpYURpYXMgPSBNYXRoLmNlaWwoXG4gICAgICAgICAgICAgICAgKGZlY2hhT2JqLmdldFRpbWUoKSAtIGhveS5nZXRUaW1lKCkpIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBsZXQgdGV4dG9CYXNlID0gJyc7XG4gICAgICAgICAgICBzd2l0Y2ggKHRpcG8pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkdWUnOlxuICAgICAgICAgICAgICAgICAgICB0ZXh0b0Jhc2UgPSBkaWZlcmVuY2lhRGlhcyA8IDAgPyAnVmVuY2lcdTAwRjMnIDogJ1ZlbmNlJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc2NoZWR1bGVkJzpcbiAgICAgICAgICAgICAgICAgICAgdGV4dG9CYXNlID0gJ1Byb2dyYW1hZGEnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgICAgICAgICAgICAgIHRleHRvQmFzZSA9IGRpZmVyZW5jaWFEaWFzIDwgMCA/ICdEZWJpXHUwMEYzIGluaWNpYXInIDogJ0luaWNpYSc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgY29udGV4dG8gPSAnJztcbiAgICAgICAgICAgIGlmIChkaWZlcmVuY2lhRGlhcyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHRvID0gJ2hveSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRpZmVyZW5jaWFEaWFzID09PSAxKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dG8gPSAnbWFcdTAwRjFhbmEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkaWZlcmVuY2lhRGlhcyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0byA9ICdheWVyJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGlmZXJlbmNpYURpYXMgPCAwKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dG8gPSBgaGFjZSAke01hdGguYWJzKGRpZmVyZW5jaWFEaWFzKX0gZFx1MDBFRGFzYDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGV4dG8gPSBgZW4gJHtkaWZlcmVuY2lhRGlhc30gZFx1MDBFRGFzYDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGAke3RleHRvQmFzZX0gJHtmZWNoYX0gKCR7Y29udGV4dG99KWA7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmb3JtYXRlYW5kbyBmZWNoYTonLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gZmVjaGE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBXHUwMEYxYWRpciBudWV2byBtXHUwMEU5dG9kbyBwYXJhIG9idGVuZXIgdGFyZWFzIGZ1dHVyYXNcbiAgICBwdWJsaWMgYXN5bmMgZ2V0VGFyZWFzRnV0dXJhcyhkaWFzRnV0dXJvczogbnVtYmVyID0gNyk6IFByb21pc2U8VGFza1tdPiB7XG4gICAgY29uc3QgaG95ID0gdGhpcy50YXNrVXRpbHMub2J0ZW5lckZlY2hhTG9jYWwoKTtcbiAgICBjb25zdCBsaW1pdGVGdXR1cm8gPSBuZXcgRGF0ZShob3kpO1xuICAgIGxpbWl0ZUZ1dHVyby5zZXREYXRlKGxpbWl0ZUZ1dHVyby5nZXREYXRlKCkgKyBkaWFzRnV0dXJvcyk7XG5cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm9jZXNhclRhcmVhcyhcbiAgICAgICAgdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKSxcbiAgICAgICAgKHRhcmVhKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmZWNoYXNSZWxldmFudGVzID0gW1xuICAgICAgICAgICAgICAgIHRhcmVhLmZlY2hhVmVuY2ltaWVudG8sXG4gICAgICAgICAgICAgICAgdGFyZWEuZmVjaGFTY2hlZHVsZWQsXG4gICAgICAgICAgICAgICAgdGFyZWEuZmVjaGFTdGFydFxuICAgICAgICAgICAgXS5maWx0ZXIoQm9vbGVhbik7XG5cbiAgICAgICAgICAgIHJldHVybiBmZWNoYXNSZWxldmFudGVzLnNvbWUoZmVjaGEgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZlY2hhT2JqID0gdGhpcy50YXNrVXRpbHMucGFyc2VhckZlY2hhVmVuY2ltaWVudG8oZmVjaGEhKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmVjaGFPYmogJiYgZmVjaGFPYmogPiBob3kgJiYgZmVjaGFPYmogPD0gbGltaXRlRnV0dXJvO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICApO1xuICAgIH1cblxuICAgIC8vIEFcdTAwRjFhZGlyIG1cdTAwRTl0b2RvIHBhcmEgbW9zdHJhciB0YXJlYXMgZnV0dXJhc1xuICAgIHB1YmxpYyBhc3luYyBtb3N0cmFyVGFyZWFzRnV0dXJhcyhkaWFzRnV0dXJvczogbnVtYmVyID0gNyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgdGFyZWFzID0gYXdhaXQgdGhpcy5nZXRUYXJlYXNGdXR1cmFzKGRpYXNGdXR1cm9zKTtcbiAgICAgICAgICAgIGlmICh0YXJlYXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShgTm8gaGF5IHRhcmVhcyBwcm9ncmFtYWRhcyBwYXJhIGxvcyBwclx1MDBGM3hpbW9zICR7ZGlhc0Z1dHVyb3N9IGRcdTAwRURhcy5gKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbmlkbyA9IHRoaXMuZ2VuZXJhclZpc3RhQ29tcGxldGEoXG4gICAgICAgICAgICAgICAgdGFyZWFzLFxuICAgICAgICAgICAgICAgIGBUYXJlYXMgUHJvZ3JhbWFkYXMgKFByXHUwMEYzeGltb3MgJHtkaWFzRnV0dXJvc30gZFx1MDBFRGFzKWAsXG4gICAgICAgICAgICAgICAgXCJtb3N0cmFyVGFyZWFzRnV0dXJhc1wiLFxuICAgICAgICAgICAgICAgIGRpYXNGdXR1cm9zXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmd1YXJkYXJZQWJyaXJBcmNoaXZvKFxuICAgICAgICAgICAgICAgIGAke3RoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9TaXN0ZW1hR1REfS9UYXJlYXMgUHJvZ3JhbWFkYXMubWRgLFxuICAgICAgICAgICAgICAgIGNvbnRlbmlkb1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYFNlIGVuY29udHJhcm9uICR7dGFyZWFzLmxlbmd0aH0gdGFyZWFzIHByb2dyYW1hZGFzIHBhcmEgbG9zIHByXHUwMEYzeGltb3MgJHtkaWFzRnV0dXJvc30gZFx1MDBFRGFzYCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZW4gbW9zdHJhclRhcmVhc0Z1dHVyYXM6XCIsIGVycm9yKTtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYEVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBXHUwMEYxYWRpciBudWV2byBtXHUwMEU5dG9kbyBwYXJhIG9idGVuZXIgdGFyZWFzIGVuIGVqZWN1Y2lcdTAwRjNuXG4gICAgcHVibGljIGFzeW5jIGdldFRhcmVhc0VuRWplY3VjaW9uKCk6IFByb21pc2U8VGFza1tdPiB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb2Nlc2FyVGFyZWFzKFxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKSxcbiAgICAgICAgICAgICh0YXJlYSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIE1vZGlmaWNhciBlbCBwcm9jZXNhbWllbnRvIGRlIHRhcmVhcyBwYXJhIGRldGVjdGFyIGVzdGFkbyBbL11cbiAgICAgICAgICAgICAgICBjb25zdCB0YXNrTGluZSA9IHRhcmVhLnRleHRvLnRyaW0oKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFza0xpbmUuc3RhcnRzV2l0aCgnLSBbL10nKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIHRydWUgLy8gbnVldm8gcGFyXHUwMEUxbWV0cm8gcGFyYSBpbmRpY2FyIHF1ZSBidXNjYW1vcyB0YXJlYXMgZW4gZWplY3VjaVx1MDBGM25cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBBXHUwMEYxYWRpciBtXHUwMEU5dG9kbyBwYXJhIG1vc3RyYXIgdGFyZWFzIGVuIGVqZWN1Y2lcdTAwRjNuXG4gICAgcHVibGljIGFzeW5jIG1vc3RyYXJUYXJlYXNFbkVqZWN1Y2lvbigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIE9idGVuZXIgdGFyZWFzIGVuIGVqZWN1Y2lcdTAwRjNuXG4gICAgICAgICAgICBjb25zdCB0YXJlYXMgPSBhd2FpdCB0aGlzLnByb2Nlc2FyVGFyZWFzKFxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCksXG4gICAgICAgICAgICAgICAgKHRhcmVhKSA9PiB0cnVlLCAvLyBObyBhcGxpY2Ftb3MgZmlsdHJvIGFkaWNpb25hbCBwb3JxdWUgeWEgZmlsdHJhbW9zIHBvciBlc3RhZG8gZW4gcHJvY2VzYXJUYXJlYXNcbiAgICAgICAgICAgICAgICB0cnVlIC8vIEluZGljYXIgcXVlIGJ1c2NhbW9zIHRhcmVhcyBlbiBlamVjdWNpXHUwMEYzblxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKHRhcmVhcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdObyBzZSBlbmNvbnRyYXJvbiB0YXJlYXMgZW4gZWplY3VjaVx1MDBGM24nKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdlbmVyYXIgdmlzdGEgeSBndWFyZGFyIGFyY2hpdm9cbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbmlkbyA9IHRoaXMuZ2VuZXJhclZpc3RhRW5FamVjdWNpb24odGFyZWFzKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZ3VhcmRhcllBYnJpckFyY2hpdm8oXG4gICAgICAgICAgICAgICAgYCR7dGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX1Npc3RlbWFHVER9L1RhcmVhcyBlbiBFamVjdWNpXHUwMEYzbi5tZGAsXG4gICAgICAgICAgICAgICAgY29udGVuaWRvXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBuZXcgTm90aWNlKGBTZSBlbmNvbnRyYXJvbiAke3RhcmVhcy5sZW5ndGh9IHRhcmVhcyBlbiBlamVjdWNpXHUwMEYzbmApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGVuIG1vc3RyYXJUYXJlYXNFbkVqZWN1Y2lvbjpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgbmV3IE5vdGljZShgRXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2VuZXJhclZpc3RhRW5FamVjdWNpb24odGFyZWFzOiBUYXNrW10pOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBob3kgPSB0aGlzLnRhc2tVdGlscy5vYnRlbmVyRmVjaGFMb2NhbCgpO1xuICAgICAgICBsZXQgY29udGVuaWRvID0gYCMgVGFyZWFzIGVuIEVqZWN1Y2lcdTAwRjNuXFxuXFxuYDtcbiAgICAgICAgXG4gICAgICAgIC8vIEFcdTAwRjFhZGlyIGJvdFx1MDBGM24gZGUgYWN0dWFsaXphY2lcdTAwRjNuXG4gICAgICAgIGNvbnRlbmlkbyArPSB0aGlzLmdlbmVyYXJCb3RvbkFjdHVhbGl6YWNpb24oXCJtb3N0cmFyVGFyZWFzRW5FamVjdWNpb25cIik7XG4gICAgICAgIFxuICAgICAgICAvLyBBXHUwMEYxYWRpciBpbmZvcm1hY2lcdTAwRjNuIGdlbmVyYWxcbiAgICAgICAgY29udGVuaWRvICs9IGA+IFshaW5mb10gQWN0dWFsaXphZG86ICR7aG95LnRvTG9jYWxlRGF0ZVN0cmluZygpfSAke25ldyBEYXRlKCkudG9Mb2NhbGVUaW1lU3RyaW5nKCl9XFxuYDtcbiAgICAgICAgY29udGVuaWRvICs9IGA+IFRvdGFsIGRlIHRhcmVhcyBlbiBlamVjdWNpXHUwMEYzbjogJHt0YXJlYXMubGVuZ3RofVxcblxcbmA7XG5cbiAgICAgICAgLy8gU2VwYXJhciB0YXJlYXMgcG9yIGNhdGVnb3JcdTAwRURhc1xuICAgICAgICBjb25zdCB0YXJlYXNDb25WZW5jaW1pZW50byA9IHRhcmVhcy5maWx0ZXIodCA9PiB0LmZlY2hhVmVuY2ltaWVudG8pO1xuICAgICAgICBjb25zdCB0YXJlYXNQcm9ncmFtYWRhcyA9IHRhcmVhcy5maWx0ZXIodCA9PiAhdC5mZWNoYVZlbmNpbWllbnRvICYmIHQuZmVjaGFTY2hlZHVsZWQpO1xuICAgICAgICBjb25zdCB0YXJlYXNDb25JbmljaW8gPSB0YXJlYXMuZmlsdGVyKHQgPT4gIXQuZmVjaGFWZW5jaW1pZW50byAmJiAhdC5mZWNoYVNjaGVkdWxlZCAmJiB0LmZlY2hhU3RhcnQpO1xuICAgICAgICBjb25zdCB0YXJlYXNTaW5GZWNoYSA9IHRhcmVhcy5maWx0ZXIodCA9PiAhdC5mZWNoYVZlbmNpbWllbnRvICYmICF0LmZlY2hhU2NoZWR1bGVkICYmICF0LmZlY2hhU3RhcnQpO1xuXG4gICAgICAgICAgIC8vIFJlbmRlcml6YXIgY2FkYSBzZWNjaVx1MDBGM25cbiAgICAgICAgaWYgKHRhcmVhc0NvblZlbmNpbWllbnRvLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgIyMgQ29uIGZlY2hhIGRlIHZlbmNpbWllbnRvICgke3RhcmVhc0NvblZlbmNpbWllbnRvLmxlbmd0aH0pXFxuXFxuYDtcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSB0aGlzLnJlbmRlcml6YXJHcnVwb1RhcmVhc0VuRWplY3VjaW9uKHRhcmVhc0NvblZlbmNpbWllbnRvKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJlYXNQcm9ncmFtYWRhcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gYCMjIFByb2dyYW1hZGFzICgke3RhcmVhc1Byb2dyYW1hZGFzLmxlbmd0aH0pXFxuXFxuYDtcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSB0aGlzLnJlbmRlcml6YXJHcnVwb1RhcmVhc0VuRWplY3VjaW9uKHRhcmVhc1Byb2dyYW1hZGFzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJlYXNDb25JbmljaW8ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29udGVuaWRvICs9IGAjIyBDb24gZmVjaGEgZGUgaW5pY2lvICgke3RhcmVhc0NvbkluaWNpby5sZW5ndGh9KVxcblxcbmA7XG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gdGhpcy5yZW5kZXJpemFyR3J1cG9UYXJlYXNFbkVqZWN1Y2lvbih0YXJlYXNDb25JbmljaW8pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRhcmVhc1NpbkZlY2hhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgIyMgU2luIGZlY2hhIGFzaWduYWRhICgke3RhcmVhc1NpbkZlY2hhLmxlbmd0aH0pXFxuXFxuYDtcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSB0aGlzLnJlbmRlcml6YXJHcnVwb1RhcmVhc0VuRWplY3VjaW9uKHRhcmVhc1NpbkZlY2hhKTtcblxuICAgICAgICByZXR1cm4gY29udGVuaWRvO1xuICAgIH1cbn1cblxuXG4gICAgICAgIC8vIEFcdTAwRjFhZGlyIG1cdTAwRTl0b2RvIGVzcGVjXHUwMEVEZmljbyBwYXJhIHJlbmRlcml6YXIgZ3J1cG9zIGRlIHRhcmVhcyBlbiBlamVjdWNpXHUwMEYzblxuICAgIHByaXZhdGUgcmVuZGVyaXphckdydXBvVGFyZWFzRW5FamVjdWNpb24odGFyZWFzOiBUYXNrW10pOiBzdHJpbmcge1xuICAgICAgICBjb25zdCB0YXJlYXNQb3JBcmNoaXZvID0gdGhpcy5hZ3J1cGFyVGFyZWFzUG9yQXJjaGl2byh0YXJlYXMpO1xuICAgICAgICBsZXQgY29udGVuaWRvID0gJyc7XG4gICAgICAgIFxuICAgICAgICBmb3IgKGNvbnN0IFtydXRhQXJjaGl2bywgaW5mb10gb2YgT2JqZWN0LmVudHJpZXModGFyZWFzUG9yQXJjaGl2bykpIHtcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgIyMjIFtbJHtydXRhQXJjaGl2b318JHtpbmZvLnRpdHVsb31dXVxcblxcbmA7XG4gICAgICAgICAgICBpbmZvLnRhcmVhcy5mb3JFYWNoKHRhcmVhID0+IHtcbiAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gdGhpcy5yZW5kZXJpemFyVGFyZWFFbkVqZWN1Y2lvbih0YXJlYSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSAnXFxuJztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGNvbnRlbmlkbztcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlcml6YXJHcnVwb1RhcmVhcyh0YXJlYXM6IFRhc2tbXSk6IHN0cmluZyB7XG4gICAgY29uc3QgdGFyZWFzUG9yQXJjaGl2byA9IHRoaXMuYWdydXBhclRhcmVhc1BvckFyY2hpdm8odGFyZWFzKTtcbiAgICBsZXQgY29udGVuaWRvID0gJyc7XG4gICAgXG4gICAgZm9yIChjb25zdCBbcnV0YUFyY2hpdm8sIGluZm9dIG9mIE9iamVjdC5lbnRyaWVzKHRhcmVhc1BvckFyY2hpdm8pKSB7XG4gICAgICAgIGNvbnRlbmlkbyArPSBgIyMjIFtbJHtydXRhQXJjaGl2b318JHtpbmZvLnRpdHVsb31dXVxcblxcbmA7XG4gICAgICAgIGluZm8udGFyZWFzLmZvckVhY2godGFyZWEgPT4ge1xuICAgICAgICAgICAgY29udGVuaWRvICs9IHRoaXMucmVuZGVyaXphclRhcmVhRW5FamVjdWNpb24odGFyZWEpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29udGVuaWRvICs9ICdcXG4nO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gY29udGVuaWRvO1xuICAgIH0gICBcblxuICAgIHByaXZhdGUgcmVuZGVyaXphclRhcmVhRW5FamVjdWNpb24odGFyZWE6IFRhc2spOiBzdHJpbmcge1xuICAgICAgICBsZXQgY29udGVuaWRvID0gYCR7dGFyZWEudGV4dG99XFxuYDtcbiAgICAgICAgXG4gICAgICAgIC8vIFJlbmRlcml6YXIgZmVjaGFzIHNpIGV4aXN0ZW5cbiAgICAgICAgaWYgKHRhcmVhLmZlY2hhVmVuY2ltaWVudG8gfHwgdGFyZWEuZmVjaGFTY2hlZHVsZWQgfHwgdGFyZWEuZmVjaGFTdGFydCkge1xuICAgICAgICAgICAgY29udGVuaWRvICs9IGAgICAgLSBGZWNoYXM6XFxuYDtcbiAgICAgICAgICAgIGlmICh0YXJlYS5mZWNoYVZlbmNpbWllbnRvKSB7XG4gICAgICAgICAgICAgICAgY29udGVuaWRvICs9IGAgICAgICAgIC0gXHVEODNEXHVEQ0M1IDogJHt0aGlzLmZvcm1hdGVhckZlY2hhQ29uQ29udGV4dG8odGFyZWEuZmVjaGFWZW5jaW1pZW50bywgJ2R1ZScpfVxcbmA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGFyZWEuZmVjaGFTY2hlZHVsZWQpIHtcbiAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICAgICAgLSBcdTIzRjMgOiAke3RoaXMuZm9ybWF0ZWFyRmVjaGFDb25Db250ZXh0byh0YXJlYS5mZWNoYVNjaGVkdWxlZCwgJ3NjaGVkdWxlZCcpfVxcbmA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGFyZWEuZmVjaGFTdGFydCkge1xuICAgICAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgICAgICAgICAtIFx1RDgzRFx1REVFQjogJHt0aGlzLmZvcm1hdGVhckZlY2hhQ29uQ29udGV4dG8odGFyZWEuZmVjaGFTdGFydCwgJ3N0YXJ0Jyl9XFxuYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbmRlcml6YXIgaG9yYXJpb3Mgc2kgZXhpc3RlblxuICAgICAgICBpZiAodGFyZWEuaG9yYUluaWNpbyB8fCB0YXJlYS5ob3JhRmluKSB7XG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICAtIFx1MjNGMCBIb3JhcmlvOiAke3RhcmVhLmhvcmFJbmljaW8gfHwgJy0tOi0tJ30gLSAke3RhcmVhLmhvcmFGaW4gfHwgJy0tOi0tJ31cXG5gO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRXRpcXVldGFzXG4gICAgICAgIGlmICh0YXJlYS5ldGlxdWV0YXMuY29udGV4dG9zPy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICAtIFx1RDgzRFx1RERDMlx1RkUwRiBDb250ZXh0b3M6ICR7dGFyZWEuZXRpcXVldGFzLmNvbnRleHRvcy5qb2luKCcgfCAnKX1cXG5gO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YXJlYS5ldGlxdWV0YXMucGVyc29uYXM/Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgICAgIC0gXHVEODNEXHVEQzY0IFBlcnNvbmFzOiAke3RhcmVhLmV0aXF1ZXRhcy5wZXJzb25hcy5qb2luKCcgfCAnKX1cXG5gO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YXJlYS5ldGlxdWV0YXMudG9kb2lzdD8ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29udGVuaWRvICs9IGAgICAgLSBcdUQ4M0RcdURDRjIgVG9kb2lzdDogJHt0YXJlYS5ldGlxdWV0YXMudG9kb2lzdC5qb2luKCcgJyl9XFxuYDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFyZWEuZXRpcXVldGFzLm90cmFzPy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICAtIFx1RDgzQ1x1REZGN1x1RkUwRiBPdHJhczogJHt0YXJlYS5ldGlxdWV0YXMub3RyYXMuam9pbignICcpfVxcbmA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQcmlvcmlkYWRcbiAgICAgICAgY29uc3QgcHJpb3JpZGFkID0gdGhpcy5vYnRlbmVyUHJpb3JpZGFkVGFyZWEodGFyZWEudGV4dG8pO1xuICAgICAgICBpZiAocHJpb3JpZGFkKSB7XG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICAtICR7cHJpb3JpZGFkLmVtb2ppfSBQcmlvcmlkYWQ6ICR7cHJpb3JpZGFkLm5vbWJyZX1cXG5gO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbnRlbmlkbztcbiAgICB9XG5cbiAgICBwcml2YXRlIG9yZ2FuaXphclRhcmVhc0VuRWplY3VjaW9uKHRhcmVhczogVGFza1tdKTogVGFza1tdIHtcbiAgICAgICAgcmV0dXJuIHRhcmVhcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmZWNoYUEgPSBhLmZlY2hhVmVuY2ltaWVudG8gfHwgYS5mZWNoYVNjaGVkdWxlZCB8fCBhLmZlY2hhU3RhcnQ7XG4gICAgICAgICAgICBjb25zdCBmZWNoYUIgPSBiLmZlY2hhVmVuY2ltaWVudG8gfHwgYi5mZWNoYVNjaGVkdWxlZCB8fCBiLmZlY2hhU3RhcnQ7XG5cbiAgICAgICAgICAgIGlmIChmZWNoYUEgJiYgZmVjaGFCKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmVjaGFPYmpBID0gdGhpcy50YXNrVXRpbHMucGFyc2VhckZlY2hhVmVuY2ltaWVudG8oZmVjaGFBKTtcbiAgICAgICAgICAgICAgICBjb25zdCBmZWNoYU9iakIgPSB0aGlzLnRhc2tVdGlscy5wYXJzZWFyRmVjaGFWZW5jaW1pZW50byhmZWNoYUIpO1xuICAgICAgICAgICAgICAgIGlmIChmZWNoYU9iakEgJiYgZmVjaGFPYmpCKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmZWNoYU9iakEuZ2V0VGltZSgpIC0gZmVjaGFPYmpCLmdldFRpbWUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNpIHVuYSB0YXJlYSB0aWVuZSBmZWNoYSB5IGxhIG90cmEgbm8sIGxhIHF1ZSB0aWVuZSBmZWNoYSB2YSBwcmltZXJvXG4gICAgICAgICAgICBpZiAoZmVjaGFBKSByZXR1cm4gLTE7XG4gICAgICAgICAgICBpZiAoZmVjaGFCKSByZXR1cm4gMTtcblxuICAgICAgICAgICAgLy8gU2kgbmluZ3VuYSB0aWVuZSBmZWNoYSwgbWFudGVuZXIgZWwgb3JkZW4gcG9yIHBlc29cbiAgICAgICAgICAgIHJldHVybiAoYi53ZWlnaHQ/LnRvdGFsV2VpZ2h0IHx8IDApIC0gKGEud2VpZ2h0Py50b3RhbFdlaWdodCB8fCAwKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgIC8vIE51ZXZvIG1cdTAwRTl0b2RvIHBhcmEgb2J0ZW5lciB0YXJlYXMgc2NoZWR1bGVkIHZlbmNpZGFzXG4gICAgIHB1YmxpYyBhc3luYyBnZXRUYXJlYXNTY2hlZHVsZWRWZW5jaWRhcygpOiBQcm9taXNlPFRhc2tbXT4ge1xuICAgICAgICBjb25zdCBob3kgPSB0aGlzLnRhc2tVdGlscy5vYnRlbmVyRmVjaGFMb2NhbCgpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJvY2VzYXJUYXJlYXMoXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpLFxuICAgICAgICAgICAgKHRhcmVhKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0YXJlYS5mZWNoYVNjaGVkdWxlZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZlY2hhU2NoZWR1bGVkID0gdGhpcy50YXNrVXRpbHMucGFyc2VhckZlY2hhVmVuY2ltaWVudG8odGFyZWEuZmVjaGFTY2hlZHVsZWQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmZWNoYVNjaGVkdWxlZCAhPT0gbnVsbCAmJiBmZWNoYVNjaGVkdWxlZCA8IGhveTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBOdWV2byBtXHUwMEU5dG9kbyBwYXJhIG9idGVuZXIgdGFyZWFzIHNjaGVkdWxlZCBwclx1MDBGM3hpbWFzXG4gICAgcHVibGljIGFzeW5jIGdldFRhcmVhc1NjaGVkdWxlZFByb3hpbWFzKGRpYXNQcm94aW1vczogbnVtYmVyID0gNyk6IFByb21pc2U8VGFza1tdPiB7XG4gICAgICAgIGNvbnN0IGhveSA9IHRoaXMudGFza1V0aWxzLm9idGVuZXJGZWNoYUxvY2FsKCk7XG4gICAgICAgIGNvbnN0IGxpbWl0ZUZ1dHVybyA9IG5ldyBEYXRlKGhveSk7XG4gICAgICAgIGxpbWl0ZUZ1dHVyby5zZXREYXRlKGxpbWl0ZUZ1dHVyby5nZXREYXRlKCkgKyBkaWFzUHJveGltb3MpO1xuXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb2Nlc2FyVGFyZWFzKFxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKSxcbiAgICAgICAgICAgICh0YXJlYSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGFyZWEuZmVjaGFTY2hlZHVsZWQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICBjb25zdCBmZWNoYVNjaGVkdWxlZCA9IHRoaXMudGFza1V0aWxzLnBhcnNlYXJGZWNoYVZlbmNpbWllbnRvKHRhcmVhLmZlY2hhU2NoZWR1bGVkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmVjaGFTY2hlZHVsZWQgIT09IG51bGwgJiYgXG4gICAgICAgICAgICAgICAgICAgICAgIGZlY2hhU2NoZWR1bGVkID49IGhveSAmJiBcbiAgICAgICAgICAgICAgICAgICAgICAgZmVjaGFTY2hlZHVsZWQgPD0gbGltaXRlRnV0dXJvO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8vIE1cdTAwRTl0b2RvIHBhcmEgbW9zdHJhciB0YXJlYXMgc2NoZWR1bGVkIHZlbmNpZGFzXG4gICAgcHVibGljIGFzeW5jIG1vc3RyYXJUYXJlYXNTY2hlZHVsZWRWZW5jaWRhcygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmVhcyA9IGF3YWl0IHRoaXMuZ2V0VGFyZWFzU2NoZWR1bGVkVmVuY2lkYXMoKTtcbiAgICAgICAgICAgIGlmICh0YXJlYXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnTm8gaGF5IHRhcmVhcyBzY2hlZHVsZWQgdmVuY2lkYXMuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjb250ZW5pZG8gPSB0aGlzLmdlbmVyYXJWaXN0YUNvbXBsZXRhKFxuICAgICAgICAgICAgICAgIHRhcmVhcyxcbiAgICAgICAgICAgICAgICBcIlRhcmVhcyBTY2hlZHVsZWQgVmVuY2lkYXNcIixcbiAgICAgICAgICAgICAgICBcIm1vc3RyYXJUYXJlYXNTY2hlZHVsZWRWZW5jaWRhc1wiXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmd1YXJkYXJZQWJyaXJBcmNoaXZvKFxuICAgICAgICAgICAgICAgIGAke3RoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9TaXN0ZW1hR1REfS9UYXJlYXMgU2NoZWR1bGVkIFZlbmNpZGFzLm1kYCxcbiAgICAgICAgICAgICAgICBjb250ZW5pZG9cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGBTZSBlbmNvbnRyYXJvbiAke3RhcmVhcy5sZW5ndGh9IHRhcmVhcyBzY2hlZHVsZWQgdmVuY2lkYXNgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBlbiBtb3N0cmFyVGFyZWFzU2NoZWR1bGVkVmVuY2lkYXM6XCIsIGVycm9yKTtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYEVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNXHUwMEU5dG9kbyBwYXJhIG1vc3RyYXIgdGFyZWFzIHNjaGVkdWxlZCBwclx1MDBGM3hpbWFzXG4gICAgcHVibGljIGFzeW5jIG1vc3RyYXJUYXJlYXNTY2hlZHVsZWRQcm94aW1hcyhkaWFzUHJveGltb3M6IG51bWJlciA9IDcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmVhcyA9IGF3YWl0IHRoaXMuZ2V0VGFyZWFzU2NoZWR1bGVkUHJveGltYXMoZGlhc1Byb3hpbW9zKTtcbiAgICAgICAgICAgIGlmICh0YXJlYXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnTm8gaGF5IHRhcmVhcyBzY2hlZHVsZWQgcHJcdTAwRjN4aW1hcy4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbmlkbyA9IHRoaXMuZ2VuZXJhclZpc3RhQ29tcGxldGEoXG4gICAgICAgICAgICAgICAgdGFyZWFzLFxuICAgICAgICAgICAgICAgIGBUYXJlYXMgU2NoZWR1bGVkIFByXHUwMEYzeGltYXMgKCR7ZGlhc1Byb3hpbW9zfSBkXHUwMEVEYXMpYCxcbiAgICAgICAgICAgICAgICBcIm1vc3RyYXJUYXJlYXNTY2hlZHVsZWRQcm94aW1hc1wiLFxuICAgICAgICAgICAgICAgIGRpYXNQcm94aW1vc1xuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5ndWFyZGFyWUFicmlyQXJjaGl2byhcbiAgICAgICAgICAgICAgICBgJHt0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfU2lzdGVtYUdURH0vVGFyZWFzIFNjaGVkdWxlZCBQclx1MDBGM3hpbWFzLm1kYCxcbiAgICAgICAgICAgICAgICBjb250ZW5pZG9cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGBTZSBlbmNvbnRyYXJvbiAke3RhcmVhcy5sZW5ndGh9IHRhcmVhcyBzY2hlZHVsZWQgcHJcdTAwRjN4aW1hc2ApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGVuIG1vc3RyYXJUYXJlYXNTY2hlZHVsZWRQcm94aW1hczpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgbmV3IE5vdGljZShgRXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICAgIC8vIE1cdTAwRTl0b2RvIGF1eGlsaWFyIHBhcmEgbGEgdmlzdWFsaXphY2lcdTAwRjNuIGRlIGZlY2hhcyBzY2hlZHVsZWRcbiAgICBwcml2YXRlIGZvcm1hdGVhckZlY2hhU2NoZWR1bGVkKGZlY2hhOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBmZWNoYU9iaiA9IHRoaXMudGFza1V0aWxzLnBhcnNlYXJGZWNoYVZlbmNpbWllbnRvKGZlY2hhKTtcbiAgICAgICAgaWYgKCFmZWNoYU9iaikgcmV0dXJuIGZlY2hhO1xuXG4gICAgICAgIGNvbnN0IGhveSA9IHRoaXMudGFza1V0aWxzLm9idGVuZXJGZWNoYUxvY2FsKCk7XG4gICAgICAgIGNvbnN0IGRpZmVyZW5jaWFEaWFzID0gTWF0aC5jZWlsKFxuICAgICAgICAgICAgKGZlY2hhT2JqLmdldFRpbWUoKSAtIGhveS5nZXRUaW1lKCkpIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpXG4gICAgICAgICk7XG5cbiAgICAgICAgbGV0IGNvbnRleHRvID0gJyc7XG4gICAgICAgIGlmIChkaWZlcmVuY2lhRGlhcyA8IDApIHtcbiAgICAgICAgICAgIGNvbnRleHRvID0gYChyZXRyYXNhZGEgJHtNYXRoLmFicyhkaWZlcmVuY2lhRGlhcyl9IGRcdTAwRURhcylgO1xuICAgICAgICB9IGVsc2UgaWYgKGRpZmVyZW5jaWFEaWFzID09PSAwKSB7XG4gICAgICAgICAgICBjb250ZXh0byA9ICcoaG95KSc7XG4gICAgICAgIH0gZWxzZSBpZiAoZGlmZXJlbmNpYURpYXMgPT09IDEpIHtcbiAgICAgICAgICAgIGNvbnRleHRvID0gJyhtYVx1MDBGMWFuYSknO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29udGV4dG8gPSBgKGVuICR7ZGlmZXJlbmNpYURpYXN9IGRcdTAwRURhcylgO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGAke2ZlY2hhfSAke2NvbnRleHRvfWA7XG4gICAgfVxuXG4gICAgIC8vIE1cdTAwRTl0b2RvIHBhcmEgb2J0ZW5lciB0b2RhcyBsYXMgdGFyZWFzIHZlbmNpZGFzXG4gICAgIHB1YmxpYyBhc3luYyBnZXRUb2Rhc1RhcmVhc1ZlbmNpZGFzKCk6IFByb21pc2U8VGFza1tdPiB7XG4gICAgICAgIGNvbnN0IGhveSA9IHRoaXMudGFza1V0aWxzLm9idGVuZXJGZWNoYUxvY2FsKCk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm9jZXNhclRhcmVhcyhcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCksXG4gICAgICAgICAgICAodGFyZWEpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZXN0YVZlbmNpZGEgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBWZXJpZmljYXIgZmVjaGEgZGUgdmVuY2ltaWVudG8gKGR1ZSlcbiAgICAgICAgICAgICAgICBpZiAodGFyZWEuZmVjaGFWZW5jaW1pZW50bykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmZWNoYVZlbmMgPSB0aGlzLnRhc2tVdGlscy5wYXJzZWFyRmVjaGFWZW5jaW1pZW50byh0YXJlYS5mZWNoYVZlbmNpbWllbnRvKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZlY2hhVmVuYyAmJiBmZWNoYVZlbmMgPCBob3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmVhLnRpcG9WZW5jaW1pZW50byA9IFsnZHVlJ107XG4gICAgICAgICAgICAgICAgICAgICAgICBlc3RhVmVuY2lkYSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gVmVyaWZpY2FyIGZlY2hhIHNjaGVkdWxlZFxuICAgICAgICAgICAgICAgIGlmICh0YXJlYS5mZWNoYVNjaGVkdWxlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmZWNoYVNjaGVkID0gdGhpcy50YXNrVXRpbHMucGFyc2VhckZlY2hhVmVuY2ltaWVudG8odGFyZWEuZmVjaGFTY2hlZHVsZWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmVjaGFTY2hlZCAmJiBmZWNoYVNjaGVkIDwgaG95KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJlYS50aXBvVmVuY2ltaWVudG8gPSB0YXJlYS50aXBvVmVuY2ltaWVudG8gfHwgW107XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJlYS50aXBvVmVuY2ltaWVudG8ucHVzaCgnc2NoZWR1bGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlc3RhVmVuY2lkYSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gVmVyaWZpY2FyIGZlY2hhIGRlIGluaWNpbyAoc3RhcnQpXG4gICAgICAgICAgICAgICAgaWYgKHRhcmVhLmZlY2hhU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmVjaGFTdGFydCA9IHRoaXMudGFza1V0aWxzLnBhcnNlYXJGZWNoYVZlbmNpbWllbnRvKHRhcmVhLmZlY2hhU3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmVjaGFTdGFydCAmJiBmZWNoYVN0YXJ0IDwgaG95KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJlYS50aXBvVmVuY2ltaWVudG8gPSB0YXJlYS50aXBvVmVuY2ltaWVudG8gfHwgW107XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJlYS50aXBvVmVuY2ltaWVudG8ucHVzaCgnc3RhcnQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVzdGFWZW5jaWRhID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZXN0YVZlbmNpZGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gTVx1MDBFOXRvZG8gcGFyYSBtb3N0cmFyIHRvZGFzIGxhcyB0YXJlYXMgdmVuY2lkYXNcbiAgICBwdWJsaWMgYXN5bmMgbW9zdHJhclRvZGFzVGFyZWFzVmVuY2lkYXMoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB0YXJlYXMgPSBhd2FpdCB0aGlzLmdldFRvZGFzVGFyZWFzVmVuY2lkYXMoKTtcbiAgICAgICAgICAgIGlmICh0YXJlYXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnTm8gaGF5IHRhcmVhcyB2ZW5jaWRhcy4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbmlkbyA9IHRoaXMuZ2VuZXJhclZpc3RhVG9kYXNWZW5jaWRhcyh0YXJlYXMpO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmd1YXJkYXJZQWJyaXJBcmNoaXZvKFxuICAgICAgICAgICAgICAgIGAke3RoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9TaXN0ZW1hR1REfS9Ub2RhcyBsYXMgVGFyZWFzIFZlbmNpZGFzLm1kYCxcbiAgICAgICAgICAgICAgICBjb250ZW5pZG9cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGBTZSBlbmNvbnRyYXJvbiAke3RhcmVhcy5sZW5ndGh9IHRhcmVhcyB2ZW5jaWRhc2ApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGVuIG1vc3RyYXJUb2Rhc1RhcmVhc1ZlbmNpZGFzOlwiLCBlcnJvcik7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGBFcnJvcjogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTVx1MDBFOXRvZG8gZXNwZWNcdTAwRURmaWNvIHBhcmEgZ2VuZXJhciBsYSB2aXN0YSBkZSB0b2RhcyBsYXMgdGFyZWFzIHZlbmNpZGFzXG4gICAgcHJpdmF0ZSBnZW5lcmFyVmlzdGFUb2Rhc1ZlbmNpZGFzKHRhcmVhczogVGFza1tdKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgaG95ID0gdGhpcy50YXNrVXRpbHMub2J0ZW5lckZlY2hhTG9jYWwoKTtcbiAgICAgICAgbGV0IGNvbnRlbmlkbyA9IGAjIFRvZGFzIGxhcyBUYXJlYXMgVmVuY2lkYXNcXG5cXG5gO1xuICAgICAgICBcbiAgICAgICAgY29udGVuaWRvICs9IHRoaXMuZ2VuZXJhckJvdG9uQWN0dWFsaXphY2lvbihcIm1vc3RyYXJUb2Rhc1RhcmVhc1ZlbmNpZGFzXCIpO1xuICAgICAgICBjb250ZW5pZG8gKz0gYD4gWyFpbmZvXSBBY3R1YWxpemFkbzogJHtob3kudG9Mb2NhbGVEYXRlU3RyaW5nKCl9ICR7bmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoKX1cXG5gO1xuICAgICAgICBjb250ZW5pZG8gKz0gYD4gVG90YWwgZGUgdGFyZWFzIHZlbmNpZGFzOiAke3RhcmVhcy5sZW5ndGh9XFxuXFxuYDtcblxuICAgICAgICAvLyBPcmdhbml6YXIgdGFyZWFzIHBvciB0aXBvIGRlIHZlbmNpbWllbnRvXG4gICAgICAgIGNvbnN0IHRhcmVhc1ZlbmNEdWUgPSB0YXJlYXMuZmlsdGVyKHQgPT4gdC50aXBvVmVuY2ltaWVudG8/LmluY2x1ZGVzKCdkdWUnKSk7XG4gICAgICAgIGNvbnN0IHRhcmVhc1ZlbmNTY2hlZHVsZWQgPSB0YXJlYXMuZmlsdGVyKHQgPT4gdC50aXBvVmVuY2ltaWVudG8/LmluY2x1ZGVzKCdzY2hlZHVsZWQnKSk7XG4gICAgICAgIGNvbnN0IHRhcmVhc1ZlbmNTdGFydCA9IHRhcmVhcy5maWx0ZXIodCA9PiB0LnRpcG9WZW5jaW1pZW50bz8uaW5jbHVkZXMoJ3N0YXJ0JykpO1xuXG4gICAgICAgIC8vIFNlY2NpXHUwMEYzbiBkZSB0YXJlYXMgY29uIGZlY2hhIGRlIHZlbmNpbWllbnRvIChkdWUpXG4gICAgICAgIGlmICh0YXJlYXNWZW5jRHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgIyMgVGFyZWFzIGNvbiBGZWNoYSBkZSBWZW5jaW1pZW50byBQYXNhZGEgKCR7dGFyZWFzVmVuY0R1ZS5sZW5ndGh9KVxcblxcbmA7XG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gdGhpcy5yZW5kZXJpemFyR3J1cG9UYXJlYXNWZW5jaWRhcyh0YXJlYXNWZW5jRHVlLCAnZHVlJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZWNjaVx1MDBGM24gZGUgdGFyZWFzIHNjaGVkdWxlZCB2ZW5jaWRhc1xuICAgICAgICBpZiAodGFyZWFzVmVuY1NjaGVkdWxlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gYCMjIFRhcmVhcyBTY2hlZHVsZWQgUmV0cmFzYWRhcyAoJHt0YXJlYXNWZW5jU2NoZWR1bGVkLmxlbmd0aH0pXFxuXFxuYDtcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSB0aGlzLnJlbmRlcml6YXJHcnVwb1RhcmVhc1ZlbmNpZGFzKHRhcmVhc1ZlbmNTY2hlZHVsZWQsICdzY2hlZHVsZWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNlY2NpXHUwMEYzbiBkZSB0YXJlYXMgc3RhcnQgdmVuY2lkYXNcbiAgICAgICAgaWYgKHRhcmVhc1ZlbmNTdGFydC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gYCMjIFRhcmVhcyBjb24gSW5pY2lvIFJldHJhc2FkbyAoJHt0YXJlYXNWZW5jU3RhcnQubGVuZ3RofSlcXG5cXG5gO1xuICAgICAgICAgICAgY29udGVuaWRvICs9IHRoaXMucmVuZGVyaXphckdydXBvVGFyZWFzVmVuY2lkYXModGFyZWFzVmVuY1N0YXJ0LCAnc3RhcnQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb250ZW5pZG87XG4gICAgfVxuXG4gICAgLy8gTVx1MDBFOXRvZG8gYXV4aWxpYXIgcGFyYSByZW5kZXJpemFyIGdydXBvcyBkZSB0YXJlYXMgdmVuY2lkYXNcbiAgICBwcml2YXRlIHJlbmRlcml6YXJHcnVwb1RhcmVhc1ZlbmNpZGFzKHRhcmVhczogVGFza1tdLCB0aXBvOiAnZHVlJyB8ICdzY2hlZHVsZWQnIHwgJ3N0YXJ0Jyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHRhcmVhc1BvckFyY2hpdm8gPSB0aGlzLmFncnVwYXJUYXJlYXNQb3JBcmNoaXZvKHRhcmVhcyk7XG4gICAgICAgIGxldCBjb250ZW5pZG8gPSAnJztcbiAgICAgICAgXG4gICAgICAgIGZvciAoY29uc3QgW3J1dGFBcmNoaXZvLCBpbmZvXSBvZiBPYmplY3QuZW50cmllcyh0YXJlYXNQb3JBcmNoaXZvKSkge1xuICAgICAgICAgICAgY29udGVuaWRvICs9IGAjIyMgW1ske3J1dGFBcmNoaXZvfXwke2luZm8udGl0dWxvfV1dXFxuXFxuYDtcbiAgICAgICAgICAgIGluZm8udGFyZWFzLmZvckVhY2godGFyZWEgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnRlbmlkbyArPSB0aGlzLnJlbmRlcml6YXJUYXJlYVZlbmNpZGEodGFyZWEsIHRpcG8pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gJ1xcbic7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBjb250ZW5pZG87XG4gICAgfVxuXG4gICAgLy8gTVx1MDBFOXRvZG8gYXV4aWxpYXIgcGFyYSByZW5kZXJpemFyIHVuYSB0YXJlYSB2ZW5jaWRhXG4gICAgcHJpdmF0ZSByZW5kZXJpemFyVGFyZWFWZW5jaWRhKHRhcmVhOiBUYXNrLCB0aXBvOiAnZHVlJyB8ICdzY2hlZHVsZWQnIHwgJ3N0YXJ0Jyk6IHN0cmluZyB7XG4gICAgICAgIGxldCBjb250ZW5pZG8gPSBgLSBbIF0gJHt0YXJlYS50ZXh0b31cXG5gO1xuICAgICAgICBcbiAgICAgICAgLy8gTW9zdHJhciBpbmZvcm1hY2lcdTAwRjNuIGRlIGZlY2hhcyByZWxldmFudGUgc2VnXHUwMEZBbiBlbCB0aXBvXG4gICAgICAgIHN3aXRjaCAodGlwbykge1xuICAgICAgICAgICAgY2FzZSAnZHVlJzpcbiAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICAtIFx1RDgzRFx1RENDNSAke3RoaXMuZm9ybWF0ZWFyRmVjaGFDb25Db250ZXh0byh0YXJlYS5mZWNoYVZlbmNpbWllbnRvISwgJ2R1ZScpfVxcbmA7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmVhLmZlY2hhU2NoZWR1bGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgICAgIC0gXHUyM0YzICR7dGhpcy5mb3JtYXRlYXJGZWNoYUNvbkNvbnRleHRvKHRhcmVhLmZlY2hhU2NoZWR1bGVkLCAnc2NoZWR1bGVkJyl9XFxuYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRhcmVhLmZlY2hhU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVuaWRvICs9IGAgICAgLSBcdUQ4M0RcdURFRUIgJHt0aGlzLmZvcm1hdGVhckZlY2hhQ29uQ29udGV4dG8odGFyZWEuZmVjaGFTdGFydCwgJ3N0YXJ0Jyl9XFxuYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNhc2UgJ3NjaGVkdWxlZCc6XG4gICAgICAgICAgICAgICAgY29udGVuaWRvICs9IGAgICAgLSBcdTIzRjMgJHt0aGlzLmZvcm1hdGVhckZlY2hhQ29uQ29udGV4dG8odGFyZWEuZmVjaGFTY2hlZHVsZWQhLCAnc2NoZWR1bGVkJyl9XFxuYDtcbiAgICAgICAgICAgICAgICBpZiAodGFyZWEuZmVjaGFWZW5jaW1pZW50bykge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICAtIFx1RDgzRFx1RENDNSAke3RoaXMuZm9ybWF0ZWFyRmVjaGFDb25Db250ZXh0byh0YXJlYS5mZWNoYVZlbmNpbWllbnRvLCAnZHVlJyl9XFxuYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRhcmVhLmZlY2hhU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVuaWRvICs9IGAgICAgLSBcdUQ4M0RcdURFRUIgJHt0aGlzLmZvcm1hdGVhckZlY2hhQ29uQ29udGV4dG8odGFyZWEuZmVjaGFTdGFydCwgJ3N0YXJ0Jyl9XFxuYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICAtIFx1RDgzRFx1REVFQiAke3RoaXMuZm9ybWF0ZWFyRmVjaGFDb25Db250ZXh0byh0YXJlYS5mZWNoYVN0YXJ0ISwgJ3N0YXJ0Jyl9XFxuYDtcbiAgICAgICAgICAgICAgICBpZiAodGFyZWEuZmVjaGFWZW5jaW1pZW50bykge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICAtIFx1RDgzRFx1RENDNSAke3RoaXMuZm9ybWF0ZWFyRmVjaGFDb25Db250ZXh0byh0YXJlYS5mZWNoYVZlbmNpbWllbnRvLCAnZHVlJyl9XFxuYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRhcmVhLmZlY2hhU2NoZWR1bGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgICAgIC0gXHUyM0YzICR7dGhpcy5mb3JtYXRlYXJGZWNoYUNvbkNvbnRleHRvKHRhcmVhLmZlY2hhU2NoZWR1bGVkLCAnc2NoZWR1bGVkJyl9XFxuYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW5kZXJpemFyIGhvcmFyaW9zIHNpIGV4aXN0ZW5cbiAgICAgICAgaWYgKHRhcmVhLmhvcmFJbmljaW8gfHwgdGFyZWEuaG9yYUZpbikge1xuICAgICAgICAgICAgY29udGVuaWRvICs9IGAgICAgLSBcdTIzRjAgSG9yYXJpbzogJHt0YXJlYS5ob3JhSW5pY2lvIHx8ICctLTotLSd9IC0gJHt0YXJlYS5ob3JhRmluIHx8ICctLTotLSd9XFxuYDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbmRlcml6YXIgZXRpcXVldGFzXG4gICAgICAgIGlmICh0YXJlYS5ldGlxdWV0YXMuY29udGV4dG9zPy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICAtIFx1RDgzRFx1RERDMlx1RkUwRiBDb250ZXh0b3M6ICR7dGFyZWEuZXRpcXVldGFzLmNvbnRleHRvcy5qb2luKCcgfCAnKX1cXG5gO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YXJlYS5ldGlxdWV0YXMucGVyc29uYXM/Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgICAgIC0gXHVEODNEXHVEQzY0OiAke3RhcmVhLmV0aXF1ZXRhcy5wZXJzb25hcy5qb2luKCcgfCAnKX1cXG5gO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YXJlYS5ldGlxdWV0YXMudG9kb2lzdD8ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29udGVuaWRvICs9IGAgICAgLSBcdUQ4M0RcdURDRjI6ICR7dGFyZWEuZXRpcXVldGFzLnRvZG9pc3Quam9pbignICcpfVxcbmA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhcmVhLmV0aXF1ZXRhcy5vdHJhcz8ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29udGVuaWRvICs9IGAgICAgLSBcdUQ4M0NcdURGRjdcdUZFMEYgT3RyYXM6ICR7dGFyZWEuZXRpcXVldGFzLm90cmFzLmpvaW4oJyAnKX1cXG5gO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbnRlbmlkbztcbiAgICB9XG5cbiAgICAgICAgLy8gTVx1MDBFOXRvZG8gcHJpbmNpcGFsIHBhcmEgb2J0ZW5lciB0YXJlYXMgY29uIGRlcGVuZGVuY2lhc1xuICAgICAgICBwdWJsaWMgYXN5bmMgZ2V0VGFyZWFzRGVwZW5kaWVudGVzKCk6IFByb21pc2U8e1xuICAgICAgICAgICAgZWplY3V0YWJsZXM6IFRhc2tbXSxcbiAgICAgICAgICAgIGJsb3F1ZWFkYXM6IFRhc2tbXVxuICAgICAgICB9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIj09PSBJbmljaWFuZG8gYlx1MDBGQXNxdWVkYSBkZSB0YXJlYXMgY29uIGRlcGVuZGVuY2lhcyA9PT1cIik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHRhcmVhcyA9IGF3YWl0IHRoaXMucHJvY2VzYXJUYXJlYXMoXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKSxcbiAgICAgICAgICAgICAgICBhc3luYyAodGFyZWEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJcXG5BbmFsaXphbmRvIHRhcmVhOlwiLCB0YXJlYS50ZXh0byk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRGVwZW5kZW5jeUlkOlwiLCB0YXJlYS5kZXBlbmRlbmN5SWQpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJlYS5kZXBlbmRlbmN5SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiLT4gSWdub3JhZGE6IE5vIHRpZW5lIGRlcGVuZGVuY2lhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHRhZG8gPSBhd2FpdCB0aGlzLnRhc2tVdGlscy52ZXJpZmljYXJFc3RhZG9UYXJlYSh0YXJlYS5kZXBlbmRlbmN5SWQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgLT4gRGVwZW5kZW5jaWEgJHt0YXJlYS5kZXBlbmRlbmN5SWR9IGNvbXBsZXRhZGE6YCwgcmVzdWx0YWRvLmNvbXBsZXRhZGEpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdGFyZWEuaXNCbG9ja2VkID0gIXJlc3VsdGFkby5jb21wbGV0YWRhO1xuICAgICAgICAgICAgICAgICAgICAvLyBBZ3JlZ2FyIGluZm9ybWFjaVx1MDBGM24gZGUgbGEgdWJpY2FjaVx1MDBGM24gZGUgbGEgdGFyZWEgZGVwZW5kaWVudGVcbiAgICAgICAgICAgICAgICAgICAgdGFyZWEuZGVwZW5kZW5jeUxvY2F0aW9uID0gcmVzdWx0YWRvLnJ1dGFBcmNoaXZvO1xuICAgICAgICAgICAgICAgICAgICB0YXJlYS5kZXBlbmRlbmN5VGl0bGUgPSByZXN1bHRhZG8udGl0dWxvQXJjaGl2bztcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBlamVjdXRhYmxlczogdGFyZWFzLmZpbHRlcih0ID0+ICF0LmlzQmxvY2tlZCksXG4gICAgICAgICAgICAgICAgYmxvcXVlYWRhczogdGFyZWFzLmZpbHRlcih0ID0+IHQuaXNCbG9ja2VkKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBNXHUwMEU5dG9kbyBwYXJhIG1vc3RyYXIgbGFzIHRhcmVhcyBkZXBlbmRpZW50ZXNcbiAgICAgICAgcHVibGljIGFzeW5jIG1vc3RyYXJUYXJlYXNEZXBlbmRpZW50ZXMoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZWplY3V0YWJsZXMsIGJsb3F1ZWFkYXMgfSA9IGF3YWl0IHRoaXMuZ2V0VGFyZWFzRGVwZW5kaWVudGVzKCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGVqZWN1dGFibGVzLmxlbmd0aCA9PT0gMCAmJiBibG9xdWVhZGFzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdObyBzZSBlbmNvbnRyYXJvbiB0YXJlYXMgY29uIGRlcGVuZGVuY2lhcy4nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW5pZG8gPSB0aGlzLmdlbmVyYXJWaXN0YURlcGVuZGVuY2lhcyhlamVjdXRhYmxlcywgYmxvcXVlYWRhcyk7XG4gICAgXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5ndWFyZGFyWUFicmlyQXJjaGl2byhcbiAgICAgICAgICAgICAgICAgICAgYCR7dGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX1Npc3RlbWFHVER9L1RhcmVhcyBjb24gRGVwZW5kZW5jaWFzLm1kYCxcbiAgICAgICAgICAgICAgICAgICAgY29udGVuaWRvXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBTZSBlbmNvbnRyYXJvbiAke2VqZWN1dGFibGVzLmxlbmd0aCArIGJsb3F1ZWFkYXMubGVuZ3RofSB0YXJlYXMgY29uIGRlcGVuZGVuY2lhc2ApO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZW4gbW9zdHJhclRhcmVhc0RlcGVuZGllbnRlczpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYEVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gTVx1MDBFOXRvZG8gcGFyYSBnZW5lcmFyIGxhIHZpc3RhIGRlIGRlcGVuZGVuY2lhc1xuICAgICAgICBwcml2YXRlIGdlbmVyYXJWaXN0YURlcGVuZGVuY2lhcyhlamVjdXRhYmxlczogVGFza1tdLCBibG9xdWVhZGFzOiBUYXNrW10pOiBzdHJpbmcge1xuICAgICAgICAgICAgY29uc3QgaG95ID0gdGhpcy50YXNrVXRpbHMub2J0ZW5lckZlY2hhTG9jYWwoKTtcbiAgICAgICAgICAgIGxldCBjb250ZW5pZG8gPSBgIyBUYXJlYXMgY29uIERlcGVuZGVuY2lhc1xcblxcbmA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSB0aGlzLmdlbmVyYXJCb3RvbkFjdHVhbGl6YWNpb24oXCJtb3N0cmFyVGFyZWFzRGVwZW5kaWVudGVzXCIpO1xuICAgICAgICAgICAgY29udGVuaWRvICs9IGA+IFshaW5mb10gQWN0dWFsaXphZG86ICR7aG95LnRvTG9jYWxlRGF0ZVN0cmluZygpfSAke25ldyBEYXRlKCkudG9Mb2NhbGVUaW1lU3RyaW5nKCl9XFxuYDtcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgPiBUb3RhbCBkZSB0YXJlYXMgY29uIGRlcGVuZGVuY2lhczogJHtlamVjdXRhYmxlcy5sZW5ndGggKyBibG9xdWVhZGFzLmxlbmd0aH1cXG5cXG5gO1xuICAgIFxuICAgICAgICAgICAgaWYgKGVqZWN1dGFibGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gYCMjIFRhcmVhcyBFamVjdXRhYmxlcyAoJHtlamVjdXRhYmxlcy5sZW5ndGh9KVxcbmA7XG4gICAgICAgICAgICAgICAgY29udGVuaWRvICs9IGA+IFshc3VjY2Vzc10gRXN0YXMgdGFyZWFzIHlhIHB1ZWRlbiBzZXIgZWplY3V0YWRhcyBwb3JxdWUgc3VzIGRlcGVuZGVuY2lhcyBlc3RcdTAwRTFuIGNvbXBsZXRhZGFzXFxuXFxuYDtcbiAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gdGhpcy5yZW5kZXJpemFyR3J1cG9EZXBlbmRlbmNpYXMoZWplY3V0YWJsZXMsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKGJsb3F1ZWFkYXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgXFxuIyMgVGFyZWFzIEJsb3F1ZWFkYXMgKCR7YmxvcXVlYWRhcy5sZW5ndGh9KVxcbmA7XG4gICAgICAgICAgICAgICAgY29udGVuaWRvICs9IGA+IFshd2FybmluZ10gRXN0YXMgdGFyZWFzIGVzdFx1MDBFMW4gZXNwZXJhbmRvIHF1ZSBzZSBjb21wbGV0ZW4gb3RyYXMgdGFyZWFzXFxuXFxuYDtcbiAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gdGhpcy5yZW5kZXJpemFyR3J1cG9EZXBlbmRlbmNpYXMoYmxvcXVlYWRhcywgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbmlkbztcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBNXHUwMEU5dG9kbyBwYXJhIHJlbmRlcml6YXIgZ3J1cG9zIGRlIHRhcmVhcyBjb24gZGVwZW5kZW5jaWFzXG4gICAgICAgIHByaXZhdGUgcmVuZGVyaXphckdydXBvRGVwZW5kZW5jaWFzKHRhcmVhczogVGFza1tdLCBlamVjdXRhYmxlczogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgICAgICAgICBjb25zdCB0YXJlYXNQb3JBcmNoaXZvID0gdGhpcy5hZ3J1cGFyVGFyZWFzUG9yQXJjaGl2byh0YXJlYXMpO1xuICAgICAgICAgICAgbGV0IGNvbnRlbmlkbyA9ICcnO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtydXRhQXJjaGl2bywgaW5mb10gb2YgT2JqZWN0LmVudHJpZXModGFyZWFzUG9yQXJjaGl2bykpIHtcbiAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gYCMjIyBbWyR7cnV0YUFyY2hpdm99fCR7aW5mby50aXR1bG99XV1cXG5cXG5gO1xuICAgICAgICAgICAgICAgIGluZm8udGFyZWFzLmZvckVhY2godGFyZWEgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gdGhpcy5yZW5kZXJpemFyVGFyZWFDb25EZXBlbmRlbmNpYSh0YXJlYSwgZWplY3V0YWJsZXMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnRlbmlkbyArPSAnXFxuJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbmlkbztcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBNXHUwMEU5dG9kbyBwYXJhIHJlbmRlcml6YXIgdW5hIHRhcmVhIGluZGl2aWR1YWwgY29uIGRlcGVuZGVuY2lhXG4gICAgICAgIHByaXZhdGUgcmVuZGVyaXphclRhcmVhQ29uRGVwZW5kZW5jaWEodGFyZWE6IFRhc2ssIGVzRWplY3V0YWJsZTogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlxcblJlbmRlcml6YW5kbyB0YXJlYTpcIiwgdGFyZWEudGV4dG8pO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcyBlamVjdXRhYmxlOlwiLCBlc0VqZWN1dGFibGUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgY29udGVuaWRvID0gYC0gWyBdICR7dGFyZWEudGV4dG99XFxuYDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gTW9zdHJhciBJRCBkZSBsYSB0YXJlYSBzaSBleGlzdGVcbiAgICAgICAgICAgIGlmICh0YXJlYS50YXNrSWQpIHtcbiAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICBcdUQ4M0NcdUREOTQgJHt0YXJlYS50YXNrSWR9XFxuYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICBcbiAgICAgICAgICAgIC8vIE1vc3RyYXIgZGV0YWxsZXMgZGUgbGEgZGVwZW5kZW5jaWFcbiAgICAgICAgICAgIGlmICh0YXJlYS5kZXBlbmRlbmN5SWQpIHtcbiAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICBcdTIxQjMgRGVwZW5kZSBkZTogJHt0YXJlYS5kZXBlbmRlbmN5VGl0bGUgPyBgW1ske3RhcmVhLmRlcGVuZGVuY3lMb2NhdGlvbn18JHt0YXJlYS5kZXBlbmRlbmN5VGl0bGV9XV1gIDogJ05vIGVuY29udHJhZGEnfWA7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmVhLmRlcGVuZGVuY3lUZXh0bykge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gYDogXCIke3RhcmVhLmRlcGVuZGVuY3lUZXh0b31cImA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRlbmlkbyArPSBlc0VqZWN1dGFibGUgPyAnIFx1MjcwNScgOiAnIFx1MjNGMyc7XG4gICAgICAgICAgICAgICAgY29udGVuaWRvICs9ICdcXG4nO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIC8vIFJlc3RvIGRlbCBjb250ZW5pZG8uLi5cbiAgICAgICAgICAgIGlmICh0YXJlYS5mZWNoYVZlbmNpbWllbnRvKSB7XG4gICAgICAgICAgICAgICAgY29udGVuaWRvICs9IGAgICAgXHVEODNEXHVEQ0M1ICR7dGhpcy5mb3JtYXRlYXJGZWNoYUNvbkNvbnRleHRvKHRhcmVhLmZlY2hhVmVuY2ltaWVudG8sICdkdWUnKX1cXG5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRhcmVhLmZlY2hhU2NoZWR1bGVkKSB7XG4gICAgICAgICAgICAgICAgY29udGVuaWRvICs9IGAgICAgXHUyM0YzICR7dGhpcy5mb3JtYXRlYXJGZWNoYUNvbkNvbnRleHRvKHRhcmVhLmZlY2hhU2NoZWR1bGVkLCAnc2NoZWR1bGVkJyl9XFxuYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0YXJlYS5mZWNoYVN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgY29udGVuaWRvICs9IGAgICAgXHVEODNEXHVERUVCICR7dGhpcy5mb3JtYXRlYXJGZWNoYUNvbkNvbnRleHRvKHRhcmVhLmZlY2hhU3RhcnQsICdzdGFydCcpfVxcbmA7XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgaWYgKHRhcmVhLmV0aXF1ZXRhcy5jb250ZXh0b3M/Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICBcdUQ4M0RcdUREQzJcdUZFMEYgJHt0YXJlYS5ldGlxdWV0YXMuY29udGV4dG9zLmpvaW4oJyB8ICcpfVxcbmA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGFyZWEuZXRpcXVldGFzLnBlcnNvbmFzPy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29udGVuaWRvICs9IGAgICAgXHVEODNEXHVEQzY0ICR7dGFyZWEuZXRpcXVldGFzLnBlcnNvbmFzLmpvaW4oJyB8ICcpfVxcbmA7XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbmlkbztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcHVibGljIGFzeW5jIG1vc3RyYXJUYXJlYXNQZXJzb25hcygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBwZXJzb25hc0NvblRhcmVhcywgdG90YWxQZXJzb25hcywgdG90YWxUYXJlYXMgfSA9IGF3YWl0IHRoaXMuZ2V0VGFyZWFzUGVyc29uYXMoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAodG90YWxQZXJzb25hcyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdObyBzZSBlbmNvbnRyYXJvbiB0YXJlYXMgYXNpZ25hZGFzIGEgcGVyc29uYXMuJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbmlkbyA9IHRoaXMuZ2VuZXJhclZpc3RhUGVyc29uYXMocGVyc29uYXNDb25UYXJlYXMsIHRvdGFsUGVyc29uYXMsIHRvdGFsVGFyZWFzKTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5ndWFyZGFyWUFicmlyQXJjaGl2byhcbiAgICAgICAgICAgICAgICAgICAgYCR7dGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX1Npc3RlbWFHVER9L1RhcmVhcyBwb3IgUGVyc29uYS5tZGAsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbmlkb1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShgU2UgZW5jb250cmFyb24gJHt0b3RhbFRhcmVhc30gdGFyZWFzIGFzaWduYWRhcyBhICR7dG90YWxQZXJzb25hc30gcGVyc29uYXNgKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGVuIG1vc3RyYXJUYXJlYXNQZXJzb25hczpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYEVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIGdlbmVyYXJWaXN0YVBlcnNvbmFzKFxuICAgICAgICAgICAgcGVyc29uYXNDb25UYXJlYXM6IE1hcDxzdHJpbmcsIFRhc2tbXT4sXG4gICAgICAgICAgICB0b3RhbFBlcnNvbmFzOiBudW1iZXIsXG4gICAgICAgICAgICB0b3RhbFRhcmVhczogbnVtYmVyXG4gICAgICAgICk6IHN0cmluZyB7XG4gICAgICAgICAgICBjb25zdCBob3kgPSB0aGlzLnRhc2tVdGlscy5vYnRlbmVyRmVjaGFMb2NhbCgpO1xuICAgICAgICAgICAgbGV0IGNvbnRlbmlkbyA9IGAjIFRhcmVhcyBBc2lnbmFkYXMgcG9yIFBlcnNvbmFcXG5cXG5gO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDYWJlY2VyYSB5IHJlc3VtZW5cbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSB0aGlzLmdlbmVyYXJCb3RvbkFjdHVhbGl6YWNpb24oXCJtb3N0cmFyVGFyZWFzUGVyc29uYXNcIik7XG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gYD4gWyFpbmZvXSBBY3R1YWxpemFkbzogJHtob3kudG9Mb2NhbGVEYXRlU3RyaW5nKCl9ICR7bmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoKX1cXG5gO1xuICAgICAgICAgICAgY29udGVuaWRvICs9IGA+IFRvdGFsIGRlIHBlcnNvbmFzIGNvbiB0YXJlYXM6ICR7dG90YWxQZXJzb25hc31cXG5gO1xuICAgICAgICAgICAgY29udGVuaWRvICs9IGA+IFRvdGFsIGRlIHRhcmVhcyBhc2lnbmFkYXM6ICR7dG90YWxUYXJlYXN9XFxuXFxuYDtcbiAgICAgICAgXG4gICAgICAgICAgICAvLyBSZXN1bWVuIGRlIGFzaWduYWNpb25lc1xuICAgICAgICAgICAgY29udGVuaWRvICs9IGAjIyBSZXN1bWVuIGRlIEFzaWduYWNpb25lc1xcbmA7XG4gICAgICAgICAgICBBcnJheS5mcm9tKHBlcnNvbmFzQ29uVGFyZWFzLmVudHJpZXMoKSlcbiAgICAgICAgICAgICAgICAuc29ydCgoWywgdGFyZWFzQV0sIFssIHRhcmVhc0JdKSA9PiB0YXJlYXNCLmxlbmd0aCAtIHRhcmVhc0EubGVuZ3RoKVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKChbcGVyc29uYSwgdGFyZWFzXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBub21icmVGb3JtYXRlYWRvID0gdGhpcy5mb3JtYXRlYXJOb21icmVQZXJzb25hKHBlcnNvbmEpO1xuICAgICAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gYC0gW1sjJHtub21icmVGb3JtYXRlYWRvfXwke25vbWJyZUZvcm1hdGVhZG99XV0gKCR7dGFyZWFzLmxlbmd0aH0gdGFyZWFzKVxcbmA7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gJ1xcbic7XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gRGV0YWxsZSBkZSB0YXJlYXMgcG9yIHBlcnNvbmFcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgIyMgVGFyZWFzIHBvciBQZXJzb25hXFxuXFxuYDtcbiAgICAgICAgICAgIEFycmF5LmZyb20ocGVyc29uYXNDb25UYXJlYXMuZW50cmllcygpKVxuICAgICAgICAgICAgICAgIC5zb3J0KChbLCB0YXJlYXNBXSwgWywgdGFyZWFzQl0pID0+IHRhcmVhc0IubGVuZ3RoIC0gdGFyZWFzQS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgLmZvckVhY2goKFtwZXJzb25hLCB0YXJlYXNdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgIyMjICR7dGhpcy5mb3JtYXRlYXJOb21icmVQZXJzb25hKHBlcnNvbmEpfVxcbltbI1Jlc3VtZW4gZGUgQXNpZ25hY2lvbmVzfFx1MkIwNlx1RkUwRl1dXFxuYDtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIE9yZGVuYXIgdGFyZWFzIHBvciBwZXNvIHkgbW9zdHJhcmxhcyBkaXJlY3RhbWVudGVcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZWFzT3JkZW5hZGFzID0gVGFza1dlaWdodENhbGN1bGF0b3Iuc29ydFRhc2tzKHRhcmVhcyk7XG4gICAgICAgICAgICAgICAgICAgIHRhcmVhc09yZGVuYWRhcy5mb3JFYWNoKHRhcmVhID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbmlkbyArPSB0aGlzLnJlbmRlcml6YXJUYXJlYVBlcnNvbmEodGFyZWEpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29udGVuaWRvICs9ICdcXG4nO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBjb250ZW5pZG87XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHByaXZhdGUgcmVuZGVyaXphclRhcmVhUGVyc29uYSh0YXJlYTogVGFzayk6IHN0cmluZyB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCBjb250ZW5pZG8gPSBgLSBbIF0gJHt0YXJlYS50ZXh0b31cXG5gO1xuICAgICAgICBcbiAgICAgICAgICAgIC8vIEFcdTAwRjFhZGlyIHViaWNhY2lcdTAwRjNuIGRlIGxhIHRhcmVhIGNvbiBuXHUwMEZBbWVybyBkZSBsXHUwMEVEbmVhIHNpIGVzdFx1MDBFMSBkaXNwb25pYmxlXG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICBcdUQ4M0RcdURDQ0QgW1ske3RhcmVhLnJ1dGFBcmNoaXZvfXwke3RhcmVhLnRpdHVsb31dXWA7XG4gICAgICAgICAgICBpZiAodGFyZWEubGluZUluZm8/Lm51bWVybykge1xuICAgICAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgIChsXHUwMEVEbmVhICR7dGFyZWEubGluZUluZm8ubnVtZXJvfSlgO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGVuaWRvICs9ICdcXG4nOyBcbiAgICAgICAgICAgIC8vIEZlY2hhc1xuICAgICAgICAgICAgY29uc3QgZmVjaGFzID0gW107XG4gICAgICAgICAgICBpZiAodGFyZWEuZmVjaGFWZW5jaW1pZW50bykge1xuICAgICAgICAgICAgICAgIGZlY2hhcy5wdXNoKGBcdUQ4M0RcdURDQzUgJHt0aGlzLmZvcm1hdGVhckZlY2hhQ29uQ29udGV4dG8odGFyZWEuZmVjaGFWZW5jaW1pZW50bywgJ2R1ZScpfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRhcmVhLmZlY2hhU2NoZWR1bGVkKSB7XG4gICAgICAgICAgICAgICAgZmVjaGFzLnB1c2goYFx1MjNGMyAke3RoaXMuZm9ybWF0ZWFyRmVjaGFDb25Db250ZXh0byh0YXJlYS5mZWNoYVNjaGVkdWxlZCwgJ3NjaGVkdWxlZCcpfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRhcmVhLmZlY2hhU3RhcnQpIHtcbiAgICAgICAgICAgICAgICBmZWNoYXMucHVzaChgXHVEODNEXHVERUVCICR7dGhpcy5mb3JtYXRlYXJGZWNoYUNvbkNvbnRleHRvKHRhcmVhLmZlY2hhU3RhcnQsICdzdGFydCcpfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZmVjaGFzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICBcdTIzRjAgRmVjaGFzOlxcbiAgICAgICAgJHtmZWNoYXMuam9pbignXFxuICAgICAgICAnKX1cXG5gO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIC8vIEhvcmFyaW9zXG4gICAgICAgICAgICBpZiAodGFyZWEuaG9yYUluaWNpbyB8fCB0YXJlYS5ob3JhRmluKSB7XG4gICAgICAgICAgICAgICAgY29udGVuaWRvICs9IGAgICAgXHUyMzFBIEhvcmFyaW86ICR7dGFyZWEuaG9yYUluaWNpbyB8fCAnLS06LS0nfSAtICR7dGFyZWEuaG9yYUZpbiB8fCAnLS06LS0nfVxcbmA7XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gQ29udGV4dG9zXG4gICAgICAgICAgICBpZiAodGFyZWEuZXRpcXVldGFzLmNvbnRleHRvcz8ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgICAgIFx1RDgzRFx1RERDMlx1RkUwRiBDb250ZXh0b3M6ICR7dGFyZWEuZXRpcXVldGFzLmNvbnRleHRvcy5qb2luKCcgfCAnKX1cXG5gO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIC8vIFBlc28geSBwcmlvcmlkYWRcbiAgICAgICAgICAgIGlmICh0YXJlYS53ZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmlvcmlkYWQgPSB0aGlzLm9idGVuZXJQcmlvcmlkYWRUYXJlYSh0YXJlYS50ZXh0byk7XG4gICAgICAgICAgICAgICAgaWYgKHByaW9yaWRhZCkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICAke3ByaW9yaWRhZC5lbW9qaX0gUHJpb3JpZGFkOiAke3ByaW9yaWRhZC5ub21icmV9XFxuYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbmlkbztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcHJpdmF0ZSBmb3JtYXRlYXJOb21icmVQZXJzb25hKHRhZzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgICAgIHJldHVybiB0YWcucmVwbGFjZSgnI3B4LScsICcnKVxuICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL18vZywgJyAnKVxuICAgICAgICAgICAgICAgICAgICAgLnNwbGl0KCcgJylcbiAgICAgICAgICAgICAgICAgICAgIC5tYXAod29yZCA9PiB3b3JkLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgd29yZC5zbGljZSgxKS50b0xvd2VyQ2FzZSgpKVxuICAgICAgICAgICAgICAgICAgICAgLmpvaW4oJyAnKTtcbiAgICAgICAgfVxuXG4gICAgXG4gICAgICAgIHByaXZhdGUgbm9ybWFsaXphckNvbnRleHRvKGNvbnRleHRvOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICAgICAgLy8gTm9ybWFsaXphciB0YW50byBmb3JtYXRvcyAjY3gtY29udGV4dG8gY29tbyAjY3gvY29udGV4dG9cbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0by5yZXBsYWNlKC9bLy1dL2csICcgXHUyMTkyICcpLnRyaW0oKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBwdWJsaWMgYXN5bmMgbW9zdHJhclRhcmVhc0NvbnRleHRvcygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBjb250ZXh0b3NDb25UYXJlYXMsIHRvdGFsQ29udGV4dG9zLCB0b3RhbFRhcmVhcyB9ID0gYXdhaXQgdGhpcy5nZXRUYXJlYXNDb250ZXh0b3MoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAodG90YWxDb250ZXh0b3MgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnTm8gc2UgZW5jb250cmFyb24gdGFyZWFzIGNvbiBjb250ZXh0b3MgYXNpZ25hZG9zLicpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbmlkbyA9IHRoaXMuZ2VuZXJhclZpc3RhQ29udGV4dG9zKGNvbnRleHRvc0NvblRhcmVhcywgdG90YWxDb250ZXh0b3MsIHRvdGFsVGFyZWFzKTtcbiAgICBcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmd1YXJkYXJZQWJyaXJBcmNoaXZvKFxuICAgICAgICAgICAgICAgICAgICBgJHt0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfU2lzdGVtYUdURH0vVGFyZWFzIHBvciBDb250ZXh0by5tZGAsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbmlkb1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShgU2UgZW5jb250cmFyb24gJHt0b3RhbFRhcmVhc30gdGFyZWFzIGVuICR7dG90YWxDb250ZXh0b3N9IGNvbnRleHRvc2ApO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZW4gbW9zdHJhclRhcmVhc0NvbnRleHRvczpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYEVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgcHJpdmF0ZSBnZW5lcmFyVmlzdGFDb250ZXh0b3MoXG4gICAgICAgICAgICBjb250ZXh0b3NDb25UYXJlYXM6IE1hcDxzdHJpbmcsIFRhc2tbXT4sXG4gICAgICAgICAgICB0b3RhbENvbnRleHRvczogbnVtYmVyLFxuICAgICAgICAgICAgdG90YWxUYXJlYXM6IG51bWJlclxuICAgICAgICApOiBzdHJpbmcge1xuICAgICAgICAgICAgY29uc3QgaG95ID0gdGhpcy50YXNrVXRpbHMub2J0ZW5lckZlY2hhTG9jYWwoKTtcbiAgICAgICAgICAgIGxldCBjb250ZW5pZG8gPSBgIyBUYXJlYXMgcG9yIENvbnRleHRvXFxuXFxuYDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2FiZWNlcmEgeSByZXN1bWVuXG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gdGhpcy5nZW5lcmFyQm90b25BY3R1YWxpemFjaW9uKFwibW9zdHJhclRhcmVhc0NvbnRleHRvc1wiKTtcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgPiBbIWluZm9dIEFjdHVhbGl6YWRvOiAke2hveS50b0xvY2FsZURhdGVTdHJpbmcoKX0gJHtuZXcgRGF0ZSgpLnRvTG9jYWxlVGltZVN0cmluZygpfVxcbmA7XG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gYD4gVG90YWwgZGUgY29udGV4dG9zIGNvbiB0YXJlYXM6ICR7dG90YWxDb250ZXh0b3N9XFxuYDtcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgPiBUb3RhbCBkZSB0YXJlYXMgZW5jb250cmFkYXM6ICR7dG90YWxUYXJlYXN9XFxuXFxuYDtcbiAgICBcbiAgICAgICAgICAgIC8vIENvbnN0cnVpciBcdTAwRTFyYm9sIGRlIGNvbnRleHRvc1xuICAgICAgICAgICAgY29uc3QgYXJib2xDb250ZXh0b3MgPSB0aGlzLmNvbnN0cnVpckFyYm9sQ29udGV4dG9zKGNvbnRleHRvc0NvblRhcmVhcyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFJlc3VtZW4gZGUgY29udGV4dG9zXG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gYCMjIFJlc3VtZW4gZGUgQ29udGV4dG9zXFxuYDtcbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhclJlc3VtZW5Db250ZXh0b3MoYXJib2xDb250ZXh0b3MsIDApLmZvckVhY2gobGluZWEgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnRlbmlkbyArPSBsaW5lYSArICdcXG4nO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gJ1xcbic7XG4gICAgXG4gICAgICAgICAgICAvLyBEZXRhbGxlIGRlIHRhcmVhcyBwb3IgY29udGV4dG9cbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgIyMgVGFyZWFzIHBvciBDb250ZXh0b1xcblxcbmA7XG4gICAgICAgICAgICB0aGlzLmdlbmVyYXJEZXRhbGxlQ29udGV4dG9zKGFyYm9sQ29udGV4dG9zLCBjb250ZXh0b3NDb25UYXJlYXMpLmZvckVhY2goYmxvcXVlID0+IHtcbiAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gYmxvcXVlO1xuICAgICAgICAgICAgfSk7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gY29udGVuaWRvO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHByaXZhdGUgY29uc3RydWlyQXJib2xDb250ZXh0b3MoY29udGV4dG9zQ29uVGFyZWFzOiBNYXA8c3RyaW5nLCBUYXNrW10+KTogTWFwPHN0cmluZywgYW55PiB7XG4gICAgICAgICAgICBjb25zdCBhcmJvbCA9IG5ldyBNYXA8c3RyaW5nLCBhbnk+KCk7XG4gICAgXG4gICAgICAgICAgICBBcnJheS5mcm9tKGNvbnRleHRvc0NvblRhcmVhcy5rZXlzKCkpLmZvckVhY2goY29udGV4dG8gPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5pdmVsZXMgPSBjb250ZXh0by5zcGxpdCgnIFx1MjE5MiAnKTtcbiAgICAgICAgICAgICAgICBsZXQgbm9kb0FjdHVhbCA9IGFyYm9sO1xuICAgIFxuICAgICAgICAgICAgICAgIG5pdmVsZXMuZm9yRWFjaCgobml2ZWwsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbm9kb0FjdHVhbC5oYXMobml2ZWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RvQWN0dWFsLnNldChuaXZlbCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmVhczogaW5kZXggPT09IG5pdmVsZXMubGVuZ3RoIC0gMSA/IGNvbnRleHRvc0NvblRhcmVhcy5nZXQoY29udGV4dG8pIDogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViY29udGV4dG9zOiBuZXcgTWFwKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnV0YUNvbXBsZXRhOiBuaXZlbGVzLnNsaWNlKDAsIGluZGV4ICsgMSkuam9pbignIFx1MjE5MiAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbm9kb0FjdHVhbCA9IG5vZG9BY3R1YWwuZ2V0KG5pdmVsKS5zdWJjb250ZXh0b3M7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiBhcmJvbDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBwcml2YXRlIGdlbmVyYXJSZXN1bWVuQ29udGV4dG9zKGFyYm9sOiBNYXA8c3RyaW5nLCBhbnk+LCBuaXZlbDogbnVtYmVyKTogc3RyaW5nW10ge1xuICAgICAgICAgICAgY29uc3QgbGluZWFzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBhcmJvbC5mb3JFYWNoKChub2RvLCBjb250ZXh0bykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGVudGFjaW9uID0gJyAgJy5yZXBlYXQobml2ZWwpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJ1dGFDb250ZXh0byA9IG5vZG8ucnV0YUNvbXBsZXRhO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhbnRpZGFkVGFyZWFzID0gbm9kby50YXJlYXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChjYW50aWRhZFRhcmVhcyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbGluZWFzLnB1c2goYCR7aW5kZW50YWNpb259LSBbWyMke3J1dGFDb250ZXh0b318JHtjb250ZXh0b31dXSAoJHtjYW50aWRhZFRhcmVhc30gdGFyZWFzKWApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVhcy5wdXNoKGAke2luZGVudGFjaW9ufS0gJHtjb250ZXh0b31gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gUHJvY2VzYXIgc3ViY29udGV4dG9zXG4gICAgICAgICAgICAgICAgaWYgKG5vZG8uc3ViY29udGV4dG9zLnNpemUgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVhcy5wdXNoKC4uLnRoaXMuZ2VuZXJhclJlc3VtZW5Db250ZXh0b3Mobm9kby5zdWJjb250ZXh0b3MsIG5pdmVsICsgMSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGxpbmVhcztcbiAgICAgICAgfVxuICAgIFxuXG4gICAgICAgIHByaXZhdGUgZ2VuZXJhckJsb3F1ZUNvbnRleHRvKGNvbnRleHRvOiBzdHJpbmcsIHRhcmVhczogVGFza1tdKTogc3RyaW5nIHtcbiAgICAgICAgICAgIGxldCBibG9xdWUgPSBgIyMjICR7Y29udGV4dG99XFxuW1sjUmVzdW1lbiBkZSBDb250ZXh0b3N8XHUyQjA2XHVGRTBGXV1cXG5gO1xuICAgIFxuICAgICAgICAgICAgLy8gVXNhciBkaXJlY3RhbWVudGUgbGFzIHRhcmVhcyBvcmRlbmFkYXMgcG9yIGVsIFRhc2tXZWlnaHRDYWxjdWxhdG9yXG4gICAgICAgICAgICB0YXJlYXMuZm9yRWFjaCh0YXJlYSA9PiB7XG4gICAgICAgICAgICAgICAgYmxvcXVlICs9IHRoaXMucmVuZGVyaXphclRhcmVhQ29udGV4dG8odGFyZWEpO1xuICAgICAgICAgICAgfSk7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gYmxvcXVlICsgJ1xcbic7XG4gICAgICAgIH1cbiAgICBcblxuICAgICAgICBwdWJsaWMgYXN5bmMgZ2V0VGFyZWFzUGVyc29uYXMoKTogUHJvbWlzZTx7XG4gICAgICAgICAgICBwZXJzb25hc0NvblRhcmVhczogTWFwPHN0cmluZywgVGFza1tdPixcbiAgICAgICAgICAgIHRvdGFsUGVyc29uYXM6IG51bWJlcixcbiAgICAgICAgICAgIHRvdGFsVGFyZWFzOiBudW1iZXJcbiAgICAgICAgfT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJcXG49PT0gSU5JQ0lBTkRPIEJcdTAwREFTUVVFREEgREUgVEFSRUFTIEFTSUdOQURBUyBBIFBFUlNPTkFTID09PVwiKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgcGVyc29uYXNDb25UYXJlYXMgPSBuZXcgTWFwPHN0cmluZywgVGFza1tdPigpO1xuICAgICAgICAgICAgY29uc3QgbGluZWFzUG9yQXJjaGl2byA9IG5ldyBNYXA8c3RyaW5nLCBNYXA8c3RyaW5nLCBMaW5lSW5mbz4+KCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHRhcmVhcyA9IGF3YWl0IHRoaXMucHJvY2VzYXJUYXJlYXMoXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKSxcbiAgICAgICAgICAgICAgICBhc3luYyAodGFyZWEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJlYS5ldGlxdWV0YXMucGVyc29uYXMgfHwgdGFyZWEuZXRpcXVldGFzLnBlcnNvbmFzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBPYnRlbmVyIGluZm9ybWFjaVx1MDBGM24gZGUgbFx1MDBFRG5lYXMgc29sbyBjdWFuZG8gc2VhIG5lY2VzYXJpb1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWxpbmVhc1BvckFyY2hpdm8uaGFzKHRhcmVhLnJ1dGFBcmNoaXZvKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZWFzUG9yQXJjaGl2by5zZXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZWEucnV0YUFyY2hpdm8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy50YXNrVXRpbHMuZW5jb250cmFyTGluZWFzVGFyZWEoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgodGFyZWEucnV0YUFyY2hpdm8pIGFzIFRGaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gQWdyZWdhciBpbmZvcm1hY2lcdTAwRjNuIGRlIGxcdTAwRURuZWEgYSBsYSB0YXJlYVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lYXNBcmNoaXZvID0gbGluZWFzUG9yQXJjaGl2by5nZXQodGFyZWEucnV0YUFyY2hpdm8pO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGluZWFzQXJjaGl2bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZUluZm8gPSBsaW5lYXNBcmNoaXZvLmdldCh0YXJlYS50ZXh0byk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGluZUluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJlYS5saW5lSW5mbyA9IGxpbmVJbmZvO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB0YXJlYS5ldGlxdWV0YXMucGVyc29uYXMuZm9yRWFjaCh0YWcgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGVyc29uYVRhZyA9IGAjcHgtJHt0YWd9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGVyc29uYXNDb25UYXJlYXMuaGFzKHBlcnNvbmFUYWcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyc29uYXNDb25UYXJlYXMuc2V0KHBlcnNvbmFUYWcsIFtdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBlcnNvbmFzQ29uVGFyZWFzLmdldChwZXJzb25hVGFnKSEucHVzaCh0YXJlYSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICBcbiAgICAgICAgICAgIC8vIE9yZGVuYXIgbGFzIHRhcmVhcyBkZSBjYWRhIHBlcnNvbmFcbiAgICAgICAgICAgIHBlcnNvbmFzQ29uVGFyZWFzLmZvckVhY2goKHRhcmVhcywgcGVyc29uYSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmVhc09yZGVuYWRhcyA9IFRhc2tXZWlnaHRDYWxjdWxhdG9yLnNvcnRUYXNrcyh0YXJlYXMpO1xuICAgICAgICAgICAgICAgIHBlcnNvbmFzQ29uVGFyZWFzLnNldChwZXJzb25hLCB0YXJlYXNPcmRlbmFkYXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHBlcnNvbmFzQ29uVGFyZWFzLFxuICAgICAgICAgICAgICAgIHRvdGFsUGVyc29uYXM6IHBlcnNvbmFzQ29uVGFyZWFzLnNpemUsXG4gICAgICAgICAgICAgICAgdG90YWxUYXJlYXM6IEFycmF5LmZyb20ocGVyc29uYXNDb25UYXJlYXMudmFsdWVzKCkpXG4gICAgICAgICAgICAgICAgICAgIC5yZWR1Y2UoKHN1bSwgdGFyZWFzKSA9PiBzdW0gKyB0YXJlYXMubGVuZ3RoLCAwKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBhc3luYyBnZXRUYXJlYXNDb250ZXh0b3MoKTogUHJvbWlzZTx7XG4gICAgICAgICAgICBjb250ZXh0b3NDb25UYXJlYXM6IE1hcDxzdHJpbmcsIFRhc2tbXT4sXG4gICAgICAgICAgICB0b3RhbENvbnRleHRvczogbnVtYmVyLFxuICAgICAgICAgICAgdG90YWxUYXJlYXM6IG51bWJlclxuICAgICAgICB9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlxcbj09PSBJTklDSUFORE8gQlx1MDBEQVNRVUVEQSBERSBUQVJFQVMgUE9SIENPTlRFWFRPID09PVwiKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgY29udGV4dG9zQ29uVGFyZWFzID0gbmV3IE1hcDxzdHJpbmcsIFRhc2tbXT4oKTtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVhc1BvckFyY2hpdm8gPSBuZXcgTWFwPHN0cmluZywgTWFwPHN0cmluZywgTGluZUluZm8+PigpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCB0YXJlYXMgPSBhd2FpdCB0aGlzLnByb2Nlc2FyVGFyZWFzKFxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCksXG4gICAgICAgICAgICAgICAgYXN5bmMgKHRhcmVhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiXFxuQW5hbGl6YW5kbyB0YXJlYTpcIiwgdGFyZWEudGV4dG8pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRhcmVhLmV0aXF1ZXRhcy5jb250ZXh0b3MgfHwgdGFyZWEuZXRpcXVldGFzLmNvbnRleHRvcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gT2J0ZW5lciBpbmZvcm1hY2lcdTAwRjNuIGRlIGxcdTAwRURuZWFzIG1hbnRlbmllbmRvIGxhIGxcdTAwRjNnaWNhIGV4aXN0ZW50ZVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWxpbmVhc1BvckFyY2hpdm8uaGFzKHRhcmVhLnJ1dGFBcmNoaXZvKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZWFzUG9yQXJjaGl2by5zZXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZWEucnV0YUFyY2hpdm8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy50YXNrVXRpbHMuZW5jb250cmFyTGluZWFzVGFyZWEoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgodGFyZWEucnV0YUFyY2hpdm8pIGFzIFRGaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZWFzQXJjaGl2byA9IGxpbmVhc1BvckFyY2hpdm8uZ2V0KHRhcmVhLnJ1dGFBcmNoaXZvKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVhc0FyY2hpdm8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVJbmZvID0gbGluZWFzQXJjaGl2by5nZXQodGFyZWEudGV4dG8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVJbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZWEubGluZUluZm8gPSBsaW5lSW5mbztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gTWFudGVuZXIgbGEgbFx1MDBGM2dpY2EgZXhpc3RlbnRlIGRlIHByb2Nlc2FtaWVudG8gZGUgY29udGV4dG9zXG4gICAgICAgICAgICAgICAgICAgIHRhcmVhLmV0aXF1ZXRhcy5jb250ZXh0b3MuZm9yRWFjaChjb250ZXh0byA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZXh0b05vcm1hbGl6YWRvID0gdGhpcy5ub3JtYWxpemFyQ29udGV4dG8oY29udGV4dG8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250ZXh0b3NDb25UYXJlYXMuaGFzKGNvbnRleHRvTm9ybWFsaXphZG8pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dG9zQ29uVGFyZWFzLnNldChjb250ZXh0b05vcm1hbGl6YWRvLCBbXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0b3NDb25UYXJlYXMuZ2V0KGNvbnRleHRvTm9ybWFsaXphZG8pIS5wdXNoKHRhcmVhKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgIFxuICAgICAgICAgICAgLy8gTWFudGVuZXIgbGEgb3JnYW5pemFjaVx1MDBGM24geSBwZXNvIGV4aXN0ZW50ZXNcbiAgICAgICAgICAgIGNvbnRleHRvc0NvblRhcmVhcy5mb3JFYWNoKCh0YXJlYXMsIGNvbnRleHRvKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gVXNhciBlbCBzaXN0ZW1hIGRlIHBlc29zIGV4aXN0ZW50ZVxuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmVhc09yZGVuYWRhcyA9IFRhc2tXZWlnaHRDYWxjdWxhdG9yLnNvcnRUYXNrcyh0YXJlYXMpO1xuICAgICAgICAgICAgICAgIGNvbnRleHRvc0NvblRhcmVhcy5zZXQoY29udGV4dG8sIHRhcmVhc09yZGVuYWRhcyk7XG4gICAgICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY29udGV4dG9zQ29uVGFyZWFzLFxuICAgICAgICAgICAgICAgIHRvdGFsQ29udGV4dG9zOiBjb250ZXh0b3NDb25UYXJlYXMuc2l6ZSxcbiAgICAgICAgICAgICAgICB0b3RhbFRhcmVhczogQXJyYXkuZnJvbShjb250ZXh0b3NDb25UYXJlYXMudmFsdWVzKCkpXG4gICAgICAgICAgICAgICAgICAgIC5yZWR1Y2UoKHN1bSwgdGFyZWFzKSA9PiBzdW0gKyB0YXJlYXMubGVuZ3RoLCAwKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBwcml2YXRlIGdlbmVyYXJEZXRhbGxlQ29udGV4dG9zKFxuICAgICAgICAgICAgYXJib2w6IE1hcDxzdHJpbmcsIGFueT4sIFxuICAgICAgICAgICAgY29udGV4dG9zQ29uVGFyZWFzOiBNYXA8c3RyaW5nLCBUYXNrW10+XG4gICAgICAgICk6IHN0cmluZ1tdIHtcbiAgICAgICAgICAgIGNvbnN0IGJsb3F1ZXM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIFxuICAgICAgICAgICAgY29uc3QgcHJvY2VzYXJOb2RvID0gKG5vZG86IE1hcDxzdHJpbmcsIGFueT4sIHJ1dGFBY3R1YWw6IHN0cmluZ1tdID0gW10pID0+IHtcbiAgICAgICAgICAgICAgICBub2RvLmZvckVhY2goKGluZm8sIGNvbnRleHRvKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJ1dGFDb21wbGV0YSA9IGluZm8ucnV0YUNvbXBsZXRhO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8udGFyZWFzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFzZWd1cmFyIHF1ZSBsYXMgdGFyZWFzIGVzdFx1MDBFOW4gb3JkZW5hZGFzIHBvciBlbCBzaXN0ZW1hIGRlIHBlc29zXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJlYXNPcmRlbmFkYXMgPSBUYXNrV2VpZ2h0Q2FsY3VsYXRvci5zb3J0VGFza3MoaW5mby50YXJlYXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmxvcXVlcy5wdXNoKHRoaXMuZ2VuZXJhckJsb3F1ZUNvbnRleHRvKHJ1dGFDb21wbGV0YSwgdGFyZWFzT3JkZW5hZGFzKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmZvLnN1YmNvbnRleHRvcy5zaXplID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2VzYXJOb2RvKGluZm8uc3ViY29udGV4dG9zLCBbLi4ucnV0YUFjdHVhbCwgY29udGV4dG9dKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgICAgICBwcm9jZXNhck5vZG8oYXJib2wpO1xuICAgICAgICAgICAgcmV0dXJuIGJsb3F1ZXM7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgcHJpdmF0ZSByZW5kZXJpemFyVGFyZWFDb250ZXh0byh0YXJlYTogVGFzayk6IHN0cmluZyB7XG4gICAgICAgICAgICBsZXQgY29udGVuaWRvID0gYC0gWyBdICR7dGFyZWEudGV4dG99XFxuYDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQVx1MDBGMWFkaXIgdWJpY2FjaVx1MDBGM24gY29uIG5cdTAwRkFtZXJvIGRlIGxcdTAwRURuZWFcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgICAgIFx1RDgzRFx1RENDRCBbWyR7dGFyZWEucnV0YUFyY2hpdm99fCR7dGFyZWEudGl0dWxvfV1dYDtcbiAgICAgICAgICAgIGlmICh0YXJlYS5saW5lSW5mbz8ubnVtZXJvKSB7XG4gICAgICAgICAgICAgICAgY29udGVuaWRvICs9IGAgKGxcdTAwRURuZWEgJHt0YXJlYS5saW5lSW5mby5udW1lcm99KWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gJ1xcbic7XG4gICAgXG4gICAgICAgICAgICAvLyBNb3N0cmFyIGVsIHBlc28geSBwcmlvcmlkYWQgcHJpbWVybyAobWFudGVuaWVuZG8gZWwgc2lzdGVtYSBleGlzdGVudGUpXG4gICAgICAgICAgICBjb25zdCBwcmlvcmlkYWQgPSB0aGlzLm9idGVuZXJQcmlvcmlkYWRUYXJlYSh0YXJlYS50ZXh0byk7XG4gICAgICAgICAgICBpZiAocHJpb3JpZGFkKSB7XG4gICAgICAgICAgICAgICAgY29udGVuaWRvICs9IGAgICAgJHtwcmlvcmlkYWQuZW1vaml9IFByaW9yaWRhZDogJHtwcmlvcmlkYWQubm9tYnJlfVxcbmA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGFyZWEud2VpZ2h0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBiYXNlV2VpZ2h0LCB0aW1lV2VpZ2h0LCBwcmlvcml0eVdlaWdodCB9ID0gdGFyZWEud2VpZ2h0O1xuICAgICAgICAgICAgICAgIGlmIChiYXNlV2VpZ2h0ICsgdGltZVdlaWdodCArIHByaW9yaXR5V2VpZ2h0ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICBcdTI2OTZcdUZFMEYgUGVzbyB0b3RhbDogJHt0YXJlYS53ZWlnaHQudG90YWxXZWlnaHR9XFxuYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEZlY2hhcyAobWFudGVuaWVuZG8gZWwgZm9ybWF0byBleGlzdGVudGUpXG4gICAgICAgICAgICBjb25zdCBmZWNoYXMgPSBbXTtcbiAgICAgICAgICAgIGlmICh0YXJlYS5mZWNoYVZlbmNpbWllbnRvKSB7XG4gICAgICAgICAgICAgICAgZmVjaGFzLnB1c2goYFx1RDgzRFx1RENDNSAke3RoaXMuZm9ybWF0ZWFyRmVjaGFDb25Db250ZXh0byh0YXJlYS5mZWNoYVZlbmNpbWllbnRvLCAnZHVlJyl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGFyZWEuZmVjaGFTY2hlZHVsZWQpIHtcbiAgICAgICAgICAgICAgICBmZWNoYXMucHVzaChgXHUyM0YzICR7dGhpcy5mb3JtYXRlYXJGZWNoYUNvbkNvbnRleHRvKHRhcmVhLmZlY2hhU2NoZWR1bGVkLCAnc2NoZWR1bGVkJyl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGFyZWEuZmVjaGFTdGFydCkge1xuICAgICAgICAgICAgICAgIGZlY2hhcy5wdXNoKGBcdUQ4M0RcdURFRUIgJHt0aGlzLmZvcm1hdGVhckZlY2hhQ29uQ29udGV4dG8odGFyZWEuZmVjaGFTdGFydCwgJ3N0YXJ0Jyl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChmZWNoYXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgICAgIFx1MjNGMCBGZWNoYXM6XFxuICAgICAgICAke2ZlY2hhcy5qb2luKCdcXG4gICAgICAgICcpfVxcbmA7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyBIb3Jhcmlvc1xuICAgICAgICAgICAgaWYgKHRhcmVhLmhvcmFJbmljaW8gfHwgdGFyZWEuaG9yYUZpbikge1xuICAgICAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgICAgIFx1MjMxQSBIb3JhcmlvOiAke3RhcmVhLmhvcmFJbmljaW8gfHwgJy0tOi0tJ30gLSAke3RhcmVhLmhvcmFGaW4gfHwgJy0tOi0tJ31cXG5gO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLy8gUGVyc29uYXMgYXNpZ25hZGFzXG4gICAgICAgICAgICBpZiAodGFyZWEuZXRpcXVldGFzLnBlcnNvbmFzPy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29udGVuaWRvICs9IGAgICAgXHVEODNEXHVEQzY0IEFzaWduYWRvIGE6ICR7dGFyZWEuZXRpcXVldGFzLnBlcnNvbmFzLm1hcChwID0+IFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm1hdGVhck5vbWJyZVBlcnNvbmEoYCNweC0ke3B9YClcbiAgICAgICAgICAgICAgICApLmpvaW4oJyB8ICcpfVxcbmA7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyBEZXBlbmRlbmNpYXNcbiAgICAgICAgICAgIGlmICh0YXJlYS5kZXBlbmRlbmN5SWQpIHtcbiAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gYCAgICBcdTIxQjMgRGVwZW5kZSBkZTogYDtcbiAgICAgICAgICAgICAgICBpZiAodGFyZWEuZGVwZW5kZW5jeVRpdGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbmlkbyArPSBgW1ske3RhcmVhLmRlcGVuZGVuY3lMb2NhdGlvbn18JHt0YXJlYS5kZXBlbmRlbmN5VGl0bGV9XV1gO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZWEuZGVwZW5kZW5jeVRleHRvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gYDogXCIke3RhcmVhLmRlcGVuZGVuY3lUZXh0b31cImA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGVuaWRvICs9IHRhcmVhLmlzQmxvY2tlZCA/ICcgXHUyM0YzJyA6ICcgXHUyNzA1JztcbiAgICAgICAgICAgICAgICBjb250ZW5pZG8gKz0gJ1xcbic7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gY29udGVuaWRvO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyAtLSBDb250ZXh0b3MgR1REXG5cbiAgICAgICAgLy8gQVx1MDBGMWFkaXIgZXN0ZSBtXHUwMEU5dG9kbyBhIGxhIGNsYXNlIFRhcmVhc0FQSSBlbiBzcmMvbW9kdWxlcy90YXNrTWFuYWdlci9hcGkvdGFyZWFzQVBJLnRzXG5cblxuLy8gTVx1MDBFOXRvZG8gcGFyYSB2ZXJpZmljYXIgc2kgdW4gbm9kbyBvIHN1cyBkZXNjZW5kaWVudGVzIHRpZW5lbiB0YXJlYXNcbnByaXZhdGUgdGllbmVBbGd1bmFUYXJlYShub2RvOiBNYXA8c3RyaW5nLCBhbnk+KTogYm9vbGVhbiB7XG4gICAgZm9yIChjb25zdCBbXywgaW5mb10gb2Ygbm9kby5lbnRyaWVzKCkpIHtcbiAgICAgICAgaWYgKGluZm8udGFyZWFzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoaW5mby5zdWJjb250ZXh0b3Muc2l6ZSA+IDAgJiYgdGhpcy50aWVuZUFsZ3VuYVRhcmVhKGluZm8uc3ViY29udGV4dG9zKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBNXHUwMEU5dG9kbyBwYXJhIGdlbmVyYXIgZWwgcmVzdW1lbiBkZSBjb250ZXh0b3MgY29uIGluZGVudGFjaVx1MDBGM25cbnByaXZhdGUgZ2VuZXJhclJlc3VtZW5Db250ZXh0b3NNYXJrZG93bihhcmJvbDogTWFwPHN0cmluZywgYW55Piwgbml2ZWw6IG51bWJlciwgcmVzdWx0YWRvOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGxldCByZXMgPSByZXN1bHRhZG87XG4gICAgXG4gICAgLy8gT3JkZW5hciBjb250ZXh0b3MgcG9yIGNhbnRpZGFkIGRlIHRhcmVhc1xuICAgIGNvbnN0IHNvcnRlZEtleXMgPSBBcnJheS5mcm9tKGFyYm9sLmtleXMoKSkuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBjb25zdCB0YXJlYXNBID0gYXJib2wuZ2V0KGEpLnRhcmVhcy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHRhcmVhc0IgPSBhcmJvbC5nZXQoYikudGFyZWFzLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHRhcmVhc0IgLSB0YXJlYXNBO1xuICAgIH0pO1xuICAgIFxuICAgIGZvciAoY29uc3QgY29udGV4dG8gb2Ygc29ydGVkS2V5cykge1xuICAgICAgICBjb25zdCBpbmZvID0gYXJib2wuZ2V0KGNvbnRleHRvKTtcbiAgICAgICAgY29uc3QgY2FudGlkYWRUYXJlYXMgPSBpbmZvLnRhcmVhcy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHJ1dGFDb21wbGV0YSA9IGluZm8ucnV0YUNvbXBsZXRhO1xuICAgICAgICBcbiAgICAgICAgLy8gSW5kZW50YWNpXHUwMEYzbiBjb24gZXNwYWNpb3NcbiAgICAgICAgY29uc3QgaW5kZW50YWNpb24gPSBcIiAgICBcIi5yZXBlYXQobml2ZWwpO1xuICAgICAgICBcbiAgICAgICAgLy8gRm9ybWF0byBkZSBlbGVtZW50byBkZSBsaXN0YVxuICAgICAgICBpZiAoY2FudGlkYWRUYXJlYXMgPiAwKSB7XG4gICAgICAgICAgICAvLyBDcmVhciBpZGVudGlmaWNhZG9yIGRlIGVuY2FiZXphZG8gdXNhbmRvIGxhIHJ1dGEgY29tcGxldGFcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlcklkID0gdGhpcy5jcmVhckhlYWRlcklkKHJ1dGFDb21wbGV0YSB8fCBjb250ZXh0byk7XG4gICAgICAgICAgICByZXMgKz0gYCR7aW5kZW50YWNpb259LSBbWyMke2hlYWRlcklkfXwke3RoaXMuZm9ybWF0ZWFyTm9tYnJlQ29udGV4dG8oY29udGV4dG8pfV1dICgke2NhbnRpZGFkVGFyZWFzfSB0YXJlYXMpXFxuYDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRpZW5lQWxndW5hVGFyZWEoaW5mby5zdWJjb250ZXh0b3MpKSB7XG4gICAgICAgICAgICByZXMgKz0gYCR7aW5kZW50YWNpb259LSAqKiR7dGhpcy5mb3JtYXRlYXJOb21icmVDb250ZXh0byhjb250ZXh0byl9KipcXG5gO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBQcm9jZXNhciBzdWJjb250ZXh0b3Mgc2kgdGllbmVuIHRhcmVhc1xuICAgICAgICBpZiAoaW5mby5zdWJjb250ZXh0b3Muc2l6ZSA+IDApIHtcbiAgICAgICAgICAgIHJlcyA9IHRoaXMuZ2VuZXJhclJlc3VtZW5Db250ZXh0b3NNYXJrZG93bihpbmZvLnN1YmNvbnRleHRvcywgbml2ZWwgKyAxLCByZXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiByZXM7XG59XG5cblxuLy8gTVx1MDBFOXRvZG8gcGFyYSBmb3JtYXRlYXIgZWwgbm9tYnJlIGRlbCBjb250ZXh0byBkZSBtYW5lcmEgbVx1MDBFMXMgbGVnaWJsZVxucHJpdmF0ZSBmb3JtYXRlYXJOb21icmVDb250ZXh0byhjb250ZXh0bzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAvLyBTaSBlcyB1biBjb250ZXh0byBjb24gamVyYXJxdVx1MDBFRGEgKHRpZW5lIFx1MjE5MiksIG9idGVuZXIgc29sbyBsYSBcdTAwRkFsdGltYSBwYXJ0ZVxuICAgIGlmIChjb250ZXh0by5pbmNsdWRlcygnIFx1MjE5MiAnKSkge1xuICAgICAgICByZXR1cm4gY29udGV4dG8uc3BsaXQoJyBcdTIxOTIgJykucG9wKCkgfHwgY29udGV4dG87XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0bztcbn1cblxuXG5cbi8vIC0tLS0tLS0tLS0gVGFlYXMgaHVlcmZhbmFzXG5cbi8vIE1cdTAwRTl0b2RvIHBhcmEgVGFyZWFzQVBJIHF1ZSBidXNjYSB0YXJlYXMgc2luIGNvbnRleHRvcywgcGVyc29uYXMsIGZlY2hhcyBvIGNsYXNpZmljYWNpXHUwMEYzbiBHVERcblxuLyoqXG4gKiBPYnRpZW5lIHRvZGFzIGxhcyB0YXJlYXMgcXVlIG5vIHRpZW5lbiBhc2lnbmFkbyBjb250ZXh0bywgcGVyc29uYSwgZmVjaGFzIG8gY2xhc2lmaWNhY2lcdTAwRjNuIEdURFxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gT2JqZXRvIGNvbiB0YXJlYXMgYWdydXBhZGFzIHBvciBub3RhIHkgY29udGFkb3Jlc1xuICovXG5wdWJsaWMgYXN5bmMgZ2V0VGFyZWFzU2luQ2xhc2lmaWNhcigpOiBQcm9taXNlPHtcbiAgICB0YXJlYXNQb3JOb3RhOiBNYXA8c3RyaW5nLCB7XG4gICAgICAgIHRpdHVsbzogc3RyaW5nLFxuICAgICAgICBydXRhOiBzdHJpbmcsXG4gICAgICAgIHRhcmVhczogVGFza1tdXG4gICAgfT4sXG4gICAgdG90YWxUYXJlYXM6IG51bWJlcixcbiAgICB0b3RhbE5vdGFzOiBudW1iZXJcbn0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlxcbj09PSBJTklDSUFORE8gQlx1MDBEQVNRVUVEQSBERSBUQVJFQVMgU0lOIENMQVNJRklDQVIgPT09XCIpO1xuICAgICAgICBcbiAgICAgICAgLy8gTWFwYSBwYXJhIGFncnVwYXIgdGFyZWFzIHBvciBhcmNoaXZvXG4gICAgICAgIGNvbnN0IHRhcmVhc1Bvck5vdGEgPSBuZXcgTWFwPHN0cmluZywge1xuICAgICAgICAgICAgdGl0dWxvOiBzdHJpbmcsXG4gICAgICAgICAgICBydXRhOiBzdHJpbmcsXG4gICAgICAgICAgICB0YXJlYXM6IFRhc2tbXVxuICAgICAgICB9PigpO1xuXG4gICAgICAgIC8vIE1hcGEgcGFyYSBndWFyZGFyIGluZm9ybWFjaVx1MDBGM24gZGUgbFx1MDBFRG5lYXMgcG9yIGFyY2hpdm8gKG9wdGltaXphY2lcdTAwRjNuKVxuICAgICAgICBjb25zdCBsaW5lYXNQb3JBcmNoaXZvID0gbmV3IE1hcDxzdHJpbmcsIE1hcDxzdHJpbmcsIExpbmVJbmZvPj4oKTtcbiAgICAgICAgXG4gICAgICAgIC8vIE9idGVuZXIgdG9kYXMgbGFzIHRhcmVhcyBzaW4gZmlsdHJvIGluaWNpYWxcbiAgICAgICAgY29uc3QgdGFyZWFzID0gYXdhaXQgdGhpcy5wcm9jZXNhclRhcmVhcyhcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCksXG4gICAgICAgICAgICBhc3luYyAodGFyZWEpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBWZXJpZmljYXIgcXVlIGxhIHRhcmVhIG5vIHRlbmdhOlxuICAgICAgICAgICAgICAgIC8vIDEuIENvbnRleHRvcyAoI2N4LSlcbiAgICAgICAgICAgICAgICBjb25zdCBzaW5Db250ZXh0b3MgPSAhdGFyZWEuZXRpcXVldGFzLmNvbnRleHRvcyB8fCB0YXJlYS5ldGlxdWV0YXMuY29udGV4dG9zLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyAyLiBQZXJzb25hcyBhc2lnbmFkYXMgKCNweC0pXG4gICAgICAgICAgICAgICAgY29uc3Qgc2luUGVyc29uYXMgPSAhdGFyZWEuZXRpcXVldGFzLnBlcnNvbmFzIHx8IHRhcmVhLmV0aXF1ZXRhcy5wZXJzb25hcy5sZW5ndGggPT09IDA7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gMy4gRmVjaGFzIChEdWUsIFN0YXJ0LCBTY2hlZHVsZWQpXG4gICAgICAgICAgICAgICAgY29uc3Qgc2luRmVjaGFzID0gIXRhcmVhLmZlY2hhVmVuY2ltaWVudG8gJiYgIXRhcmVhLmZlY2hhU3RhcnQgJiYgIXRhcmVhLmZlY2hhU2NoZWR1bGVkO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIDQuIENsYXNpZmljYWNpXHUwMEYzbiBHVEQgKCNHVEQtKVxuICAgICAgICAgICAgICAgIGNvbnN0IHNpbkdURCA9ICF0YXJlYS5ldGlxdWV0YXMudG9kYXMuc29tZSh0YWcgPT4gdGFnLnN0YXJ0c1dpdGgoJyNHVEQtJykpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIDUuIE5vIGVzdFx1MDBFMSBjbGFzaWZpY2FkYSBwYXJhIGluYm94ICgjaW5ib3gpXG4gICAgICAgICAgICAgICAgY29uc3Qgbm9JbmJveCA9ICF0YXJlYS5ldGlxdWV0YXMudG9kYXMuc29tZSh0YWcgPT4gdGFnLnRvTG93ZXJDYXNlKCkgPT09ICcjaW5ib3gnKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBDb21wcm9iYXIgc2kgY3VtcGxlIHRvZG9zIGxvcyBjcml0ZXJpb3MgKHNpbiBjbGFzaWZpY2FjaW9uZXMpXG4gICAgICAgICAgICAgICAgY29uc3Qgc2luQ2xhc2lmaWNhciA9IHNpbkNvbnRleHRvcyAmJiBzaW5QZXJzb25hcyAmJiBzaW5GZWNoYXMgJiYgc2luR1REICYmIG5vSW5ib3g7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gU2kgbGEgdGFyZWEgY3VtcGxlIGxvcyBjcml0ZXJpb3MsIGFncmVnYXIgaW5mb3JtYWNpXHUwMEYzbiBkZSBsXHUwMEVEbmVhXG4gICAgICAgICAgICAgICAgaWYgKHNpbkNsYXNpZmljYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gT3B0aW1pemFjaVx1MDBGM246IG9idGVuZXIgaW5mb3JtYWNpXHUwMEYzbiBkZSBsXHUwMEVEbmVhcyBzb2xvIGN1YW5kbyBzZWEgbmVjZXNhcmlvXG4gICAgICAgICAgICAgICAgICAgIGlmICghbGluZWFzUG9yQXJjaGl2by5oYXModGFyZWEucnV0YUFyY2hpdm8pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFyY2hpdm8gPSB0aGlzLnBsdWdpbi5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHRhcmVhLnJ1dGFBcmNoaXZvKSBhcyBURmlsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJjaGl2bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lYXNQb3JBcmNoaXZvLnNldChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmVhLnJ1dGFBcmNoaXZvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy50YXNrVXRpbHMuZW5jb250cmFyTGluZWFzVGFyZWEoYXJjaGl2bylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGFsIGJ1c2NhciBsXHUwMEVEbmVhcyBlbiAke3RhcmVhLnJ1dGFBcmNoaXZvfTpgLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIEFncmVnYXIgaW5mb3JtYWNpXHUwMEYzbiBkZSBsXHUwMEVEbmVhIGEgbGEgdGFyZWFcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZWFzQXJjaGl2byA9IGxpbmVhc1BvckFyY2hpdm8uZ2V0KHRhcmVhLnJ1dGFBcmNoaXZvKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVhc0FyY2hpdm8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVJbmZvID0gbGluZWFzQXJjaGl2by5nZXQodGFyZWEudGV4dG8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVJbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZWEubGluZUluZm8gPSBsaW5lSW5mbztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gQWdydXBhciBwb3IgYXJjaGl2b1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRhcmVhc1Bvck5vdGEuaGFzKHRhcmVhLnJ1dGFBcmNoaXZvKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZWFzUG9yTm90YS5zZXQodGFyZWEucnV0YUFyY2hpdm8sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXR1bG86IHRhcmVhLnRpdHVsbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydXRhOiB0YXJlYS5ydXRhQXJjaGl2byxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJlYXM6IFtdXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdGFyZWFzUG9yTm90YS5nZXQodGFyZWEucnV0YUFyY2hpdm8pLnRhcmVhcy5wdXNoKHRhcmVhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNpbkNsYXNpZmljYXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICAvLyBDb250YXIgdG90YWxlc1xuICAgICAgICBjb25zdCB0b3RhbFRhcmVhcyA9IHRhcmVhcy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHRvdGFsTm90YXMgPSB0YXJlYXNQb3JOb3RhLnNpemU7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhgPT09IEJcdTAwREFTUVVFREEgQ09NUExFVEFEQSA9PT1gKTtcbiAgICAgICAgY29uc29sZS5sb2coYFRvdGFsIGRlIHRhcmVhcyBzaW4gY2xhc2lmaWNhcjogJHt0b3RhbFRhcmVhc31gKTtcbiAgICAgICAgY29uc29sZS5sb2coYFRvdGFsIGRlIG5vdGFzIGNvbiB0YXJlYXMgc2luIGNsYXNpZmljYXI6ICR7dG90YWxOb3Rhc31gKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0YXJlYXNQb3JOb3RhLFxuICAgICAgICAgICAgdG90YWxUYXJlYXMsXG4gICAgICAgICAgICB0b3RhbE5vdGFzXG4gICAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGVuIGdldFRhcmVhc1NpbkNsYXNpZmljYXI6XCIsIGVycm9yKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxufVxuXG4vKipcbiAqIE11ZXN0cmEgdW5hIHZpc3RhIGNvbiB0b2RhcyBsYXMgdGFyZWFzIHNpbiBjbGFzaWZpY2FyIGFncnVwYWRhcyBwb3Igbm90YVxuICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gKi9cbnB1YmxpYyBhc3luYyBtb3N0cmFyVGFyZWFzU2luQ2xhc2lmaWNhcigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgICAvLyBPYnRlbmVyIHRhcmVhcyBzaW4gY2xhc2lmaWNhclxuICAgICAgICBjb25zdCB7IHRhcmVhc1Bvck5vdGEsIHRvdGFsVGFyZWFzLCB0b3RhbE5vdGFzIH0gPSBhd2FpdCB0aGlzLmdldFRhcmVhc1NpbkNsYXNpZmljYXIoKTtcbiAgICAgICAgXG4gICAgICAgIGlmICh0b3RhbFRhcmVhcyA9PT0gMCkge1xuICAgICAgICAgICAgbmV3IE5vdGljZSgnTm8gc2UgZW5jb250cmFyb24gdGFyZWFzIHNpbiBjbGFzaWZpY2FyLicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBHZW5lcmFyIGNvbnRlbmlkbyBkZWwgYXJjaGl2b1xuICAgICAgICBjb25zdCBjb250ZW5pZG8gPSB0aGlzLmdlbmVyYXJWaXN0YVRhcmVhc1NpbkNsYXNpZmljYXIodGFyZWFzUG9yTm90YSwgdG90YWxUYXJlYXMsIHRvdGFsTm90YXMpO1xuICAgICAgICBcbiAgICAgICAgLy8gR3VhcmRhciB5IGFicmlyIGFyY2hpdm9cbiAgICAgICAgYXdhaXQgdGhpcy5ndWFyZGFyWUFicmlyQXJjaGl2byhcbiAgICAgICAgICAgIGAke3RoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9TaXN0ZW1hR1REfS9UYXJlYXMgU2luIENsYXNpZmljYXIubWRgLFxuICAgICAgICAgICAgY29udGVuaWRvXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICBuZXcgTm90aWNlKGBTZSBlbmNvbnRyYXJvbiAke3RvdGFsVGFyZWFzfSB0YXJlYXMgc2luIGNsYXNpZmljYXIgZW4gJHt0b3RhbE5vdGFzfSBub3Rhc2ApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBlbiBtb3N0cmFyVGFyZWFzU2luQ2xhc2lmaWNhcjpcIiwgZXJyb3IpO1xuICAgICAgICBuZXcgTm90aWNlKGBFcnJvcjogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgIH1cbn1cblxuLyoqXG4gKiBHZW5lcmEgZWwgY29udGVuaWRvIGRlIGxhIHZpc3RhIGRlIHRhcmVhcyBzaW4gY2xhc2lmaWNhclxuICogQHBhcmFtIHtNYXB9IHRhcmVhc1Bvck5vdGEgLSBNYXBhIGNvbiBsYXMgdGFyZWFzIGFncnVwYWRhcyBwb3Igbm90YVxuICogQHBhcmFtIHtudW1iZXJ9IHRvdGFsVGFyZWFzIC0gVG90YWwgZGUgdGFyZWFzIHNpbiBjbGFzaWZpY2FyXG4gKiBAcGFyYW0ge251bWJlcn0gdG90YWxOb3RhcyAtIFRvdGFsIGRlIG5vdGFzIGNvbiB0YXJlYXMgc2luIGNsYXNpZmljYXJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gQ29udGVuaWRvIG1hcmtkb3duIHBhcmEgZWwgYXJjaGl2b1xuICovXG5wcml2YXRlIGdlbmVyYXJWaXN0YVRhcmVhc1NpbkNsYXNpZmljYXIoXG4gICAgdGFyZWFzUG9yTm90YTogTWFwPHN0cmluZywge1xuICAgICAgICB0aXR1bG86IHN0cmluZyxcbiAgICAgICAgcnV0YTogc3RyaW5nLFxuICAgICAgICB0YXJlYXM6IFRhc2tbXVxuICAgIH0+LFxuICAgIHRvdGFsVGFyZWFzOiBudW1iZXIsXG4gICAgdG90YWxOb3RhczogbnVtYmVyXG4pOiBzdHJpbmcge1xuICAgIGNvbnN0IGhveSA9IHRoaXMudGFza1V0aWxzLm9idGVuZXJGZWNoYUxvY2FsKCk7XG4gICAgbGV0IGNvbnRlbmlkbyA9IGAjIFRhcmVhcyBTaW4gQ2xhc2lmaWNhclxcblxcbmA7XG4gICAgXG4gICAgLy8gQWdyZWdhciBib3RcdTAwRjNuIGRlIGFjdHVhbGl6YWNpXHUwMEYzblxuICAgIGNvbnRlbmlkbyArPSB0aGlzLmdlbmVyYXJCb3RvbkFjdHVhbGl6YWNpb24oXCJtb3N0cmFyVGFyZWFzU2luQ2xhc2lmaWNhclwiKTtcbiAgICBcbiAgICAvLyBBXHUwMEYxYWRpciBpbmZvcm1hY2lcdTAwRjNuIGdlbmVyYWxcbiAgICBjb250ZW5pZG8gKz0gYD4gWyFpbmZvXSBBY3R1YWxpemFkbzogJHtob3kudG9Mb2NhbGVEYXRlU3RyaW5nKCl9ICR7bmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoKX1cXG5gO1xuICAgIGNvbnRlbmlkbyArPSBgPiBUb3RhbCBkZSB0YXJlYXMgc2luIGNsYXNpZmljYXI6ICR7dG90YWxUYXJlYXN9XFxuYDtcbiAgICBjb250ZW5pZG8gKz0gYD4gVG90YWwgZGUgbm90YXMgY29uIHRhcmVhcyBzaW4gY2xhc2lmaWNhcjogJHt0b3RhbE5vdGFzfVxcblxcbmA7XG4gICAgXG4gICAgLy8gT3JkZW5hciBub3RhcyBwb3IgY2FudGlkYWQgZGUgdGFyZWFzIChkZXNjZW5kZW50ZSlcbiAgICBjb25zdCBub3Rhc09yZGVuYWRhcyA9IEFycmF5LmZyb20odGFyZWFzUG9yTm90YS52YWx1ZXMoKSlcbiAgICAgICAgLnNvcnQoKGEsIGIpID0+IGIudGFyZWFzLmxlbmd0aCAtIGEudGFyZWFzLmxlbmd0aCk7XG4gICAgXG4gICAgLy8gR2VuZXJhciBzZWNjaW9uZXMgcG9yIG5vdGFcbiAgICBmb3IgKGNvbnN0IG5vdGFJbmZvIG9mIG5vdGFzT3JkZW5hZGFzKSB7XG4gICAgICAgIGNvbnRlbmlkbyArPSBgIyMgW1ske25vdGFJbmZvLnJ1dGF9fCR7bm90YUluZm8udGl0dWxvfV1dICgke25vdGFJbmZvLnRhcmVhcy5sZW5ndGh9KVxcblxcbmA7XG4gICAgICAgIFxuICAgICAgICAvLyBSZW5kZXJpemFyIGNhZGEgdGFyZWFcbiAgICAgICAgZm9yIChjb25zdCB0YXJlYSBvZiBub3RhSW5mby50YXJlYXMpIHtcbiAgICAgICAgICAgIGNvbnRlbmlkbyArPSB0aGlzLnJlbmRlcml6YXJUYXJlYVNpbkNsYXNpZmljYXIodGFyZWEpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb250ZW5pZG8gKz0gJ1xcbic7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBjb250ZW5pZG87XG59XG5cbi8qKlxuICogUmVuZGVyaXphIHVuYSB0YXJlYSBzaW4gY2xhc2lmaWNhciBlbiBmb3JtYXRvIG1hcmtkb3duXG4gKiBAcGFyYW0ge1Rhc2t9IHRhcmVhIC0gVGFyZWEgYSByZW5kZXJpemFyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIFJlcHJlc2VudGFjaVx1MDBGM24gbWFya2Rvd24gZGUgbGEgdGFyZWFcbiAqL1xucHJpdmF0ZSByZW5kZXJpemFyVGFyZWFTaW5DbGFzaWZpY2FyKHRhcmVhOiBUYXNrKTogc3RyaW5nIHtcbiAgICBsZXQgY29udGVuaWRvID0gYC0gWyBdICR7dGFyZWEudGV4dG99XFxuYDtcbiAgICBcbiAgICAvLyBBZ3JlZ2FyIG1ldGFpbmZvcm1hY2lcdTAwRjNuXG4gICAgaWYgKHRhcmVhLmxpbmVJbmZvPy5udW1lcm8pIHtcbiAgICAgICAgY29udGVuaWRvICs9IGAgICAgLSBcdUQ4M0RcdURDQ0QgTFx1MDBFRG5lYTogJHt0YXJlYS5saW5lSW5mby5udW1lcm99XFxuYDtcbiAgICB9XG4gICAgXG4gICAgLy8gQWdyZWdhciBldGlxdWV0YXMgc2kgdGllbmUgYWxndW5hIChhdW5xdWUgbm8gc2VhbiBkZSBsYXMgY2F0ZWdvclx1MDBFRGFzIGJ1c2NhZGFzKVxuICAgIGlmICh0YXJlYS5ldGlxdWV0YXMudG9kYXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb250ZW5pZG8gKz0gYCAgICAtIFx1RDgzQ1x1REZGN1x1RkUwRiBFdGlxdWV0YXM6ICR7dGFyZWEuZXRpcXVldGFzLnRvZGFzLmpvaW4oJyAnKX1cXG5gO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gY29udGVuaWRvO1xufVxuXG4vLyAtLSBUYXJlYXMgSW5ib3hcblxuLy8gQVx1MDBGMWFkaXIgYWwgYXJjaGl2byBzcmMvbW9kdWxlcy90YXNrTWFuYWdlci9hcGkvdGFyZWFzQVBJLnRzXG5cbi8qKlxuICogT2J0aWVuZSB0b2RhcyBsYXMgdGFyZWFzIHF1ZSB0aWVuZW4gbGEgZXRpcXVldGEgI2luYm94XG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBPYmpldG8gY29uIHRhcmVhcyBhZ3J1cGFkYXMgcG9yIG5vdGEgeSBjb250YWRvcmVzXG4gKi9cbnB1YmxpYyBhc3luYyBnZXRUYXJlYXNJbmJveCgpOiBQcm9taXNlPHtcbiAgICB0YXJlYXNQb3JOb3RhOiBNYXA8c3RyaW5nLCB7XG4gICAgICAgIHRpdHVsbzogc3RyaW5nLFxuICAgICAgICBydXRhOiBzdHJpbmcsXG4gICAgICAgIHRhcmVhczogVGFza1tdXG4gICAgfT4sXG4gICAgdG90YWxUYXJlYXM6IG51bWJlcixcbiAgICB0b3RhbE5vdGFzOiBudW1iZXJcbn0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlxcbj09PSBJTklDSUFORE8gQlx1MDBEQVNRVUVEQSBERSBUQVJFQVMgRU4gQkFOREVKQSBERSBFTlRSQURBICgjaW5ib3gpID09PVwiKTtcbiAgICAgICAgXG4gICAgICAgIC8vIE1hcGEgcGFyYSBhZ3J1cGFyIHRhcmVhcyBwb3IgYXJjaGl2b1xuICAgICAgICBjb25zdCB0YXJlYXNQb3JOb3RhID0gbmV3IE1hcDxzdHJpbmcsIHtcbiAgICAgICAgICAgIHRpdHVsbzogc3RyaW5nLFxuICAgICAgICAgICAgcnV0YTogc3RyaW5nLFxuICAgICAgICAgICAgdGFyZWFzOiBUYXNrW11cbiAgICAgICAgfT4oKTtcblxuICAgICAgICAvLyBNYXBhIHBhcmEgZ3VhcmRhciBpbmZvcm1hY2lcdTAwRjNuIGRlIGxcdTAwRURuZWFzIHBvciBhcmNoaXZvIChvcHRpbWl6YWNpXHUwMEYzbilcbiAgICAgICAgY29uc3QgbGluZWFzUG9yQXJjaGl2byA9IG5ldyBNYXA8c3RyaW5nLCBNYXA8c3RyaW5nLCBMaW5lSW5mbz4+KCk7XG4gICAgICAgIFxuICAgICAgICAvLyBPYnRlbmVyIHRvZGFzIGxhcyB0YXJlYXMgZmlsdHJhbmRvIGxhcyBxdWUgdGVuZ2FuICNpbmJveFxuICAgICAgICBjb25zdCB0YXJlYXMgPSBhd2FpdCB0aGlzLnByb2Nlc2FyVGFyZWFzKFxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKSxcbiAgICAgICAgICAgIGFzeW5jICh0YXJlYSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhciBzaSB0aWVuZSBsYSBldGlxdWV0YSAjaW5ib3hcbiAgICAgICAgICAgICAgICBjb25zdCB0aWVuZUluYm94ID0gdGFyZWEuZXRpcXVldGFzLnRvZGFzLnNvbWUodGFnID0+IFxuICAgICAgICAgICAgICAgICAgICB0YWcudG9Mb3dlckNhc2UoKSA9PT0gJyNpbmJveCcpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICh0aWVuZUluYm94KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9wdGltaXphY2lcdTAwRjNuOiBvYnRlbmVyIGluZm9ybWFjaVx1MDBGM24gZGUgbFx1MDBFRG5lYXMgc29sbyBjdWFuZG8gc2VhIG5lY2VzYXJpb1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWxpbmVhc1BvckFyY2hpdm8uaGFzKHRhcmVhLnJ1dGFBcmNoaXZvKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhcmNoaXZvID0gdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aCh0YXJlYS5ydXRhQXJjaGl2bykgYXMgVEZpbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyY2hpdm8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZWFzUG9yQXJjaGl2by5zZXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJlYS5ydXRhQXJjaGl2byxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudGFza1V0aWxzLmVuY29udHJhckxpbmVhc1RhcmVhKGFyY2hpdm8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBhbCBidXNjYXIgbFx1MDBFRG5lYXMgZW4gJHt0YXJlYS5ydXRhQXJjaGl2b306YCwgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBBZ3JlZ2FyIGluZm9ybWFjaVx1MDBGM24gZGUgbFx1MDBFRG5lYSBhIGxhIHRhcmVhXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVhc0FyY2hpdm8gPSBsaW5lYXNQb3JBcmNoaXZvLmdldCh0YXJlYS5ydXRhQXJjaGl2byk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW5lYXNBcmNoaXZvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lSW5mbyA9IGxpbmVhc0FyY2hpdm8uZ2V0KHRhcmVhLnRleHRvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaW5lSW5mbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmVhLmxpbmVJbmZvID0gbGluZUluZm87XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIEFncnVwYXIgcG9yIGFyY2hpdm9cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJlYXNQb3JOb3RhLmhhcyh0YXJlYS5ydXRhQXJjaGl2bykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmVhc1Bvck5vdGEuc2V0KHRhcmVhLnJ1dGFBcmNoaXZvLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0dWxvOiB0YXJlYS50aXR1bG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnV0YTogdGFyZWEucnV0YUFyY2hpdm8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZWFzOiBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRhcmVhc1Bvck5vdGEuZ2V0KHRhcmVhLnJ1dGFBcmNoaXZvKS50YXJlYXMucHVzaCh0YXJlYSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiB0aWVuZUluYm94O1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgLy8gQ29udGFyIHRvdGFsZXNcbiAgICAgICAgY29uc3QgdG90YWxUYXJlYXMgPSB0YXJlYXMubGVuZ3RoO1xuICAgICAgICBjb25zdCB0b3RhbE5vdGFzID0gdGFyZWFzUG9yTm90YS5zaXplO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coYD09PSBCXHUwMERBU1FVRURBIENPTVBMRVRBREEgPT09YCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBUb3RhbCBkZSB0YXJlYXMgZW4gYmFuZGVqYSBkZSBlbnRyYWRhICgjaW5ib3gpOiAke3RvdGFsVGFyZWFzfWApO1xuICAgICAgICBjb25zb2xlLmxvZyhgVG90YWwgZGUgbm90YXMgY29uIHRhcmVhcyBpbmJveDogJHt0b3RhbE5vdGFzfWApO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRhcmVhc1Bvck5vdGEsXG4gICAgICAgICAgICB0b3RhbFRhcmVhcyxcbiAgICAgICAgICAgIHRvdGFsTm90YXNcbiAgICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZW4gZ2V0VGFyZWFzSW5ib3g6XCIsIGVycm9yKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxufVxuXG4vKipcbiAqIE11ZXN0cmEgdW5hIHZpc3RhIGNvbiB0b2RhcyBsYXMgdGFyZWFzIGVuIGJhbmRlamEgZGUgZW50cmFkYSAoI2luYm94KSBhZ3J1cGFkYXMgcG9yIG5vdGFcbiAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICovXG5wdWJsaWMgYXN5bmMgbW9zdHJhclRhcmVhc0luYm94KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIE9idGVuZXIgdGFyZWFzIGRlIGxhIGJhbmRlamEgZGUgZW50cmFkYVxuICAgICAgICBjb25zdCB7IHRhcmVhc1Bvck5vdGEsIHRvdGFsVGFyZWFzLCB0b3RhbE5vdGFzIH0gPSBhd2FpdCB0aGlzLmdldFRhcmVhc0luYm94KCk7XG4gICAgICAgIFxuICAgICAgICBpZiAodG90YWxUYXJlYXMgPT09IDApIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoJ05vIHNlIGVuY29udHJhcm9uIHRhcmVhcyBlbiBsYSBiYW5kZWphIGRlIGVudHJhZGEgKCNpbmJveCkuJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEdlbmVyYXIgY29udGVuaWRvIGRlbCBhcmNoaXZvXG4gICAgICAgIGNvbnN0IGNvbnRlbmlkbyA9IHRoaXMuZ2VuZXJhclZpc3RhVGFyZWFzSW5ib3godGFyZWFzUG9yTm90YSwgdG90YWxUYXJlYXMsIHRvdGFsTm90YXMpO1xuICAgICAgICBcbiAgICAgICAgLy8gR3VhcmRhciB5IGFicmlyIGFyY2hpdm9cbiAgICAgICAgYXdhaXQgdGhpcy5ndWFyZGFyWUFicmlyQXJjaGl2byhcbiAgICAgICAgICAgIGAke3RoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9TaXN0ZW1hR1REfS9UYXJlYXMgQmFuZGVqYSBkZSBFbnRyYWRhLm1kYCxcbiAgICAgICAgICAgIGNvbnRlbmlkb1xuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgbmV3IE5vdGljZShgU2UgZW5jb250cmFyb24gJHt0b3RhbFRhcmVhc30gdGFyZWFzIGVuIGJhbmRlamEgZGUgZW50cmFkYSBlbiAke3RvdGFsTm90YXN9IG5vdGFzYCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGVuIG1vc3RyYXJUYXJlYXNJbmJveDpcIiwgZXJyb3IpO1xuICAgICAgICBuZXcgTm90aWNlKGBFcnJvcjogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgIH1cbn1cblxuLyoqXG4gKiBHZW5lcmEgZWwgY29udGVuaWRvIGRlIGxhIHZpc3RhIGRlIHRhcmVhcyBlbiBiYW5kZWphIGRlIGVudHJhZGFcbiAqIEBwYXJhbSB7TWFwfSB0YXJlYXNQb3JOb3RhIC0gTWFwYSBjb24gbGFzIHRhcmVhcyBhZ3J1cGFkYXMgcG9yIG5vdGFcbiAqIEBwYXJhbSB7bnVtYmVyfSB0b3RhbFRhcmVhcyAtIFRvdGFsIGRlIHRhcmVhcyBlbiBiYW5kZWphIGRlIGVudHJhZGFcbiAqIEBwYXJhbSB7bnVtYmVyfSB0b3RhbE5vdGFzIC0gVG90YWwgZGUgbm90YXMgY29uIHRhcmVhcyBlbiBiYW5kZWphIGRlIGVudHJhZGFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gQ29udGVuaWRvIG1hcmtkb3duIHBhcmEgZWwgYXJjaGl2b1xuICovXG5wcml2YXRlIGdlbmVyYXJWaXN0YVRhcmVhc0luYm94KFxuICAgIHRhcmVhc1Bvck5vdGE6IE1hcDxzdHJpbmcsIHtcbiAgICAgICAgdGl0dWxvOiBzdHJpbmcsXG4gICAgICAgIHJ1dGE6IHN0cmluZyxcbiAgICAgICAgdGFyZWFzOiBUYXNrW11cbiAgICB9PixcbiAgICB0b3RhbFRhcmVhczogbnVtYmVyLFxuICAgIHRvdGFsTm90YXM6IG51bWJlclxuKTogc3RyaW5nIHtcbiAgICBjb25zdCBob3kgPSB0aGlzLnRhc2tVdGlscy5vYnRlbmVyRmVjaGFMb2NhbCgpO1xuICAgIGxldCBjb250ZW5pZG8gPSBgIyBUYXJlYXMgZW4gQmFuZGVqYSBkZSBFbnRyYWRhICgjaW5ib3gpXFxuXFxuYDtcbiAgICBcbiAgICAvLyBBZ3JlZ2FyIGJvdFx1MDBGM24gZGUgYWN0dWFsaXphY2lcdTAwRjNuXG4gICAgY29udGVuaWRvICs9IHRoaXMuZ2VuZXJhckJvdG9uQWN0dWFsaXphY2lvbihcIm1vc3RyYXJUYXJlYXNJbmJveFwiKTtcbiAgICBcbiAgICAvLyBBXHUwMEYxYWRpciBpbmZvcm1hY2lcdTAwRjNuIGdlbmVyYWxcbiAgICBjb250ZW5pZG8gKz0gYD4gWyFpbmZvXSBBY3R1YWxpemFkbzogJHtob3kudG9Mb2NhbGVEYXRlU3RyaW5nKCl9ICR7bmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoKX1cXG5gO1xuICAgIGNvbnRlbmlkbyArPSBgPiBUb3RhbCBkZSB0YXJlYXMgZW4gYmFuZGVqYSBkZSBlbnRyYWRhOiAke3RvdGFsVGFyZWFzfVxcbmA7XG4gICAgY29udGVuaWRvICs9IGA+IFRvdGFsIGRlIG5vdGFzIGNvbiB0YXJlYXMgaW5ib3g6ICR7dG90YWxOb3Rhc31cXG5cXG5gO1xuICAgIFxuICAgIC8vIE9yZGVuYXIgbm90YXMgcG9yIGNhbnRpZGFkIGRlIHRhcmVhcyAoZGVzY2VuZGVudGUpXG4gICAgY29uc3Qgbm90YXNPcmRlbmFkYXMgPSBBcnJheS5mcm9tKHRhcmVhc1Bvck5vdGEudmFsdWVzKCkpXG4gICAgICAgIC5zb3J0KChhLCBiKSA9PiBiLnRhcmVhcy5sZW5ndGggLSBhLnRhcmVhcy5sZW5ndGgpO1xuICAgIFxuICAgIC8vIEdlbmVyYXIgc2VjY2lvbmVzIHBvciBub3RhXG4gICAgZm9yIChjb25zdCBub3RhSW5mbyBvZiBub3Rhc09yZGVuYWRhcykge1xuICAgICAgICBjb250ZW5pZG8gKz0gYCMjIFtbJHtub3RhSW5mby5ydXRhfXwke25vdGFJbmZvLnRpdHVsb31dXSAoJHtub3RhSW5mby50YXJlYXMubGVuZ3RofSlcXG5cXG5gO1xuICAgICAgICBcbiAgICAgICAgLy8gUmVuZGVyaXphciBjYWRhIHRhcmVhXG4gICAgICAgIGZvciAoY29uc3QgdGFyZWEgb2Ygbm90YUluZm8udGFyZWFzKSB7XG4gICAgICAgICAgICBjb250ZW5pZG8gKz0gdGhpcy5yZW5kZXJpemFyVGFyZWFJbmJveCh0YXJlYSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnRlbmlkbyArPSAnXFxuJztcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGNvbnRlbmlkbztcbn1cblxuLyoqXG4gKiBSZW5kZXJpemEgdW5hIHRhcmVhIGRlIGJhbmRlamEgZGUgZW50cmFkYSBlbiBmb3JtYXRvIG1hcmtkb3duXG4gKiBAcGFyYW0ge1Rhc2t9IHRhcmVhIC0gVGFyZWEgYSByZW5kZXJpemFyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIFJlcHJlc2VudGFjaVx1MDBGM24gbWFya2Rvd24gZGUgbGEgdGFyZWFcbiAqL1xucHJpdmF0ZSByZW5kZXJpemFyVGFyZWFJbmJveCh0YXJlYTogVGFzayk6IHN0cmluZyB7XG4gICAgbGV0IGNvbnRlbmlkbyA9IGAtIFsgXSAke3RhcmVhLnRleHRvfVxcbmA7XG4gICAgXG4gICAgLy8gRmVjaGFzXG4gICAgY29uc3QgZmVjaGFzID0gW107XG4gICAgaWYgKHRhcmVhLmZlY2hhVmVuY2ltaWVudG8pIHtcbiAgICAgICAgZmVjaGFzLnB1c2goYFx1RDgzRFx1RENDNSAke3RoaXMuZm9ybWF0ZWFyRmVjaGFDb25Db250ZXh0byh0YXJlYS5mZWNoYVZlbmNpbWllbnRvLCAnZHVlJyl9YCk7XG4gICAgfVxuICAgIGlmICh0YXJlYS5mZWNoYVNjaGVkdWxlZCkge1xuICAgICAgICBmZWNoYXMucHVzaChgXHUyM0YzICR7dGhpcy5mb3JtYXRlYXJGZWNoYUNvbkNvbnRleHRvKHRhcmVhLmZlY2hhU2NoZWR1bGVkLCAnc2NoZWR1bGVkJyl9YCk7XG4gICAgfVxuICAgIGlmICh0YXJlYS5mZWNoYVN0YXJ0KSB7XG4gICAgICAgIGZlY2hhcy5wdXNoKGBcdUQ4M0RcdURFRUIgJHt0aGlzLmZvcm1hdGVhckZlY2hhQ29uQ29udGV4dG8odGFyZWEuZmVjaGFTdGFydCwgJ3N0YXJ0Jyl9YCk7XG4gICAgfVxuICAgIFxuICAgIGlmIChmZWNoYXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb250ZW5pZG8gKz0gYCAgICAtIEZlY2hhczpcXG4gICAgICAgICR7ZmVjaGFzLmpvaW4oJ1xcbiAgICAgICAgJyl9XFxuYDtcbiAgICB9XG4gICAgXG4gICAgLy8gSG9yYXJpb3NcbiAgICBpZiAodGFyZWEuaG9yYUluaWNpbyB8fCB0YXJlYS5ob3JhRmluKSB7XG4gICAgICAgIGNvbnRlbmlkbyArPSBgICAgIC0gXHUyM0YwIEhvcmFyaW86ICR7dGFyZWEuaG9yYUluaWNpbyB8fCAnLS06LS0nfSAtICR7dGFyZWEuaG9yYUZpbiB8fCAnLS06LS0nfVxcbmA7XG4gICAgfVxuICAgIFxuICAgIC8vIEFncmVnYXIgdWJpY2FjaVx1MDBGM24gY29uIGluZm9ybWFjaVx1MDBGM24gZGUgbFx1MDBFRG5lYVxuICAgIGlmICh0YXJlYS5saW5lSW5mbz8ubnVtZXJvKSB7XG4gICAgICAgIGNvbnRlbmlkbyArPSBgICAgIC0gXHVEODNEXHVEQ0NEIExcdTAwRURuZWE6ICR7dGFyZWEubGluZUluZm8ubnVtZXJvfVxcbmA7XG4gICAgfVxuICAgIFxuICAgIC8vIEV0aXF1ZXRhc1xuICAgIGlmICh0YXJlYS5ldGlxdWV0YXMuY29udGV4dG9zPy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnRlbmlkbyArPSBgICAgIC0gXHVEODNEXHVEREMyXHVGRTBGIENvbnRleHRvczogJHt0YXJlYS5ldGlxdWV0YXMuY29udGV4dG9zLmpvaW4oJyB8ICcpfVxcbmA7XG4gICAgfVxuICAgIGlmICh0YXJlYS5ldGlxdWV0YXMucGVyc29uYXM/Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29udGVuaWRvICs9IGAgICAgLSBcdUQ4M0RcdURDNjQgUGVyc29uYXM6ICR7dGFyZWEuZXRpcXVldGFzLnBlcnNvbmFzLmpvaW4oJyB8ICcpfVxcbmA7XG4gICAgfVxuICAgIFxuICAgIC8vIE1vc3RyYXIgb3RyYXMgZXRpcXVldGFzLCBleGNsdXllbmRvICNpbmJveCBxdWUgeWEgc2FiZW1vcyBxdWUgdGllbmVcbiAgICBjb25zdCBvdHJhc0V0aXF1ZXRhcyA9IHRhcmVhLmV0aXF1ZXRhcy5vdHJhcy5maWx0ZXIodGFnID0+IHRhZy50b0xvd2VyQ2FzZSgpICE9PSAnI2luYm94Jyk7XG4gICAgaWYgKG90cmFzRXRpcXVldGFzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29udGVuaWRvICs9IGAgICAgLSBcdUQ4M0NcdURGRjdcdUZFMEYgT3RyYXMgZXRpcXVldGFzOiAke290cmFzRXRpcXVldGFzLmpvaW4oJyAnKX1cXG5gO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gY29udGVuaWRvO1xufVxuXG4gICAgIFxufSIsICIvLyBzcmMvbW9kdWxlcy90YXNrTWFuYWdlci91dGlscy90YXNrVXRpbHMudHNcblxuaW1wb3J0IHsgVEZpbGUgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgTXlQbHVnaW4gZnJvbSAnLi4vLi4vLi4vbWFpbic7XG5cbmV4cG9ydCBjbGFzcyBUYXNrVXRpbHMge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcGx1Z2luOiBNeVBsdWdpbikge31cbiAgICBcbiAgICBwdWJsaWMgY29tcGFyYXJGZWNoYXMoZmVjaGExOiBEYXRlIHwgbnVsbCwgZmVjaGEyOiBEYXRlIHwgbnVsbCk6IG51bWJlciB7XG4gICAgICAgIGlmICghZmVjaGExICYmICFmZWNoYTIpIHJldHVybiAwO1xuICAgICAgICBpZiAoIWZlY2hhMSkgcmV0dXJuIDE7ICAvLyBudWxsIHNlIGNvbnNpZGVyYSBtYXlvclxuICAgICAgICBpZiAoIWZlY2hhMikgcmV0dXJuIC0xOyAvLyBudWxsIHNlIGNvbnNpZGVyYSBtYXlvclxuICAgICAgICByZXR1cm4gZmVjaGExLmdldFRpbWUoKSAtIGZlY2hhMi5nZXRUaW1lKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBub3JtYWxpemFySG9yYShob3JhOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgICAgICAgY29uc3QgcGF0cm9uZXMgPSBbXG4gICAgICAgICAgICAvXihcXGR7MSwyfSkoPzo6KFxcZHsyfSkpP1xccyooYW18cG0pPyQvaSxcbiAgICAgICAgICAgIC9eKFxcZHsxLDJ9KTooXFxkezJ9KVxccyooYW18cG0pPyQvaSxcbiAgICAgICAgICAgIC9eKFxcZHsxLDJ9KTooXFxkezJ9KSQvXG4gICAgICAgIF07XG5cbiAgICAgICAgZm9yIChjb25zdCBwYXRyb24gb2YgcGF0cm9uZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gaG9yYS50b0xvd2VyQ2FzZSgpLm1hdGNoKHBhdHJvbik7XG4gICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICBsZXQgaG9yYXMgPSBwYXJzZUludChtYXRjaFsxXSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbWludXRvcyA9IG1hdGNoWzJdID8gbWF0Y2hbMl0gOiAnMDAnO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBlcmlvZG8gPSBtYXRjaFszXTtcblxuICAgICAgICAgICAgICAgIGlmIChwZXJpb2RvID09PSAncG0nICYmIGhvcmFzIDwgMTIpIGhvcmFzICs9IDEyO1xuICAgICAgICAgICAgICAgIGlmIChwZXJpb2RvID09PSAnYW0nICYmIGhvcmFzID09PSAxMikgaG9yYXMgPSAwO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke2hvcmFzLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKX06JHttaW51dG9zfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcHVibGljIGV4dHJhZXJGZWNoYXNZSG9yYXMobGluZWE6IHN0cmluZyk6IHtcbiAgICAgICAgZmVjaGFDcmVhY2lvbj86IHN0cmluZztcbiAgICAgICAgZmVjaGFTY2hlZHVsZWQ/OiBzdHJpbmc7XG4gICAgICAgIGZlY2hhU3RhcnQ/OiBzdHJpbmc7XG4gICAgICAgIGZlY2hhVmVuY2ltaWVudG8/OiBzdHJpbmc7XG4gICAgICAgIGhvcmFJbmljaW8/OiBzdHJpbmc7XG4gICAgICAgIGhvcmFGaW4/OiBzdHJpbmc7XG4gICAgfSB7XG4gICAgICAgIGNvbnN0IGhvcmFJbmljaW9NYXRjaCA9IGxpbmVhLm1hdGNoKC9cXFtoSTpcXHMqKFteXFxdXSspXFxdLyk7XG4gICAgICAgIGNvbnN0IGhvcmFGaW5NYXRjaCA9IGxpbmVhLm1hdGNoKC9cXFtoRjpcXHMqKFteXFxdXSspXFxdLyk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZlY2hhQ3JlYWNpb246IGxpbmVhLm1hdGNoKC9cdTI3OTUgKFxcZHs0fS1cXGR7Mn0tXFxkezJ9KS8pPy5bMV0sXG4gICAgICAgICAgICBmZWNoYVNjaGVkdWxlZDogbGluZWEubWF0Y2goL1x1MjNGMyAoXFxkezR9LVxcZHsyfS1cXGR7Mn0pLyk/LlsxXSxcbiAgICAgICAgICAgIGZlY2hhU3RhcnQ6IGxpbmVhLm1hdGNoKC9cdUQ4M0RcdURFRUIgKFxcZHs0fS1cXGR7Mn0tXFxkezJ9KS8pPy5bMV0sXG4gICAgICAgICAgICBmZWNoYVZlbmNpbWllbnRvOiBsaW5lYS5tYXRjaCgvXHVEODNEXHVEQ0M1IChcXGR7NH0tXFxkezJ9LVxcZHsyfSkvKT8uWzFdLFxuICAgICAgICAgICAgaG9yYUluaWNpbzogaG9yYUluaWNpb01hdGNoID8gdGhpcy5ub3JtYWxpemFySG9yYShob3JhSW5pY2lvTWF0Y2hbMV0udHJpbSgpKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGhvcmFGaW46IGhvcmFGaW5NYXRjaCA/IHRoaXMubm9ybWFsaXphckhvcmEoaG9yYUZpbk1hdGNoWzFdLnRyaW0oKSkgOiB1bmRlZmluZWRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb2J0ZW5lclRpdHVsb05vdGEoZmlsZTogVEZpbGUpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMucGx1Z2luLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXI7XG4gICAgICAgIFxuICAgICAgICBpZiAobWV0YWRhdGE/LmFsaWFzZXMpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG1ldGFkYXRhLmFsaWFzZXMpKSByZXR1cm4gbWV0YWRhdGEuYWxpYXNlc1swXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWV0YWRhdGEuYWxpYXNlcyA9PT0gJ3N0cmluZycpIHJldHVybiBtZXRhZGF0YS5hbGlhc2VzO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAobWV0YWRhdGE/LnRpdHVsbykgcmV0dXJuIG1ldGFkYXRhLnRpdHVsbztcblxuICAgICAgICBjb25zdCBjb2luY2lkZW5jaWEgPSBmaWxlLmJhc2VuYW1lLm1hdGNoKC8oPzpQR1REfFBRfEFJfEFWfEF4fFJSfERKfE9DQXxDQUMpIC0gKC4rKS8pO1xuICAgICAgICBpZiAoY29pbmNpZGVuY2lhICYmIGNvaW5jaWRlbmNpYVsxXSkgcmV0dXJuIGNvaW5jaWRlbmNpYVsxXTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBmaWxlLmJhc2VuYW1lO1xuICAgIH1cbiBcblxuXG4gICAgcHVibGljIGNhdGVnb3JpemFyRXRpcXVldGFzKGV0aXF1ZXRhczogc3RyaW5nW10pOiB7XG4gICAgICAgIHRvZG9pc3Q6IHN0cmluZ1tdLFxuICAgICAgICBjb250ZXh0b3M6IHN0cmluZ1tdLFxuICAgICAgICBwZXJzb25hczogc3RyaW5nW10sXG4gICAgICAgIG90cmFzOiBzdHJpbmdbXVxuICAgIH0ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9kb2lzdDogZXRpcXVldGFzLmZpbHRlcihlID0+IGUuc3RhcnRzV2l0aCgnI3RvZG9pc3QnKSksXG4gICAgICAgICAgICBjb250ZXh0b3M6IGV0aXF1ZXRhc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoZSA9PiBlLm1hdGNoKC8jY3goPzpbLy1dLispJC8pKVxuICAgICAgICAgICAgICAgIC5tYXAoZSA9PiB0aGlzLmxpbXBpYXJQcmVmaWpvKGUsICdjeCcpKSxcbiAgICAgICAgICAgIHBlcnNvbmFzOiBldGlxdWV0YXNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGUgPT4gZS5zdGFydHNXaXRoKCcjcHgtJykpXG4gICAgICAgICAgICAgICAgLm1hcChlID0+IHRoaXMuZm9ybWF0ZWFyRXRpcXVldGFQZXJzb25hKGUpKSxcbiAgICAgICAgICAgIG90cmFzOiBldGlxdWV0YXMuZmlsdGVyKGUgPT4gXG4gICAgICAgICAgICAgICAgIWUuc3RhcnRzV2l0aCgnI3RvZG9pc3QnKSAmJiBcbiAgICAgICAgICAgICAgICAhZS5tYXRjaCgvI2N4KD86Wy8tXXwkKS8pICYmIFxuICAgICAgICAgICAgICAgICFlLnN0YXJ0c1dpdGgoJyNweC0nKVxuICAgICAgICAgICAgKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIE51ZXZvIG1cdTAwRTl0b2RvIHBhcmEgZm9ybWF0ZWFyIGV0aXF1ZXRhcyBkZSBwZXJzb25hc1xuICAgIHByaXZhdGUgZm9ybWF0ZWFyRXRpcXVldGFQZXJzb25hKGV0aXF1ZXRhOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICAvLyBFbGltaW5hciBlbCBwcmVmaWpvICNweC1cbiAgICAgICAgY29uc3Qgbm9tYnJlID0gZXRpcXVldGEucmVwbGFjZSgnI3B4LScsICcnKTtcbiAgICAgICAgLy8gUmVlbXBsYXphciBndWlvbmVzIGJham9zIGNvbiBlc3BhY2lvcyBwYXJhIG1lam9yIGxlZ2liaWxpZGFkXG4gICAgICAgIHJldHVybiBub21icmUucmVwbGFjZSgvXy9nLCAnICcpO1xuICAgIH1cblxuICAgIHByaXZhdGUgbGltcGlhclByZWZpam8oZXRpcXVldGE6IHN0cmluZywgcHJlZmlqbzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3Qgc2luUHJlZmlqbyA9IGV0aXF1ZXRhLnJlcGxhY2UobmV3IFJlZ0V4cChgIyR7cHJlZmlqb31bLy1dYCksICcnKTtcbiAgICAgICAgcmV0dXJuIHNpblByZWZpam9cbiAgICAgICAgICAgIC5yZXBsYWNlKC8tL2csICcgXHUyMTkyICcpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwvL2csICcgXHUyMTkyICcpO1xuICAgIH1cblxuXG5cblxuICAgIHB1YmxpYyBsaW1waWFyVGV4dG9UYXJlYShsaW5lYTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IHRleHRvTGltcGlvID0gbGluZWFcbiAgICAgICAgICAgIC8vIEVsaW1pbmFyIGVsIGNoZWNrYm94IGRlIGxhIHRhcmVhXG4gICAgICAgICAgICAucmVwbGFjZSgvXi0gXFxbIFxcXS8sICcnKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBFbGltaW5hciBmZWNoYXMgY29uIGVtb2ppc1xuICAgICAgICAgICAgLnJlcGxhY2UoL1tcdTI3OTVcdUQ4M0RcdURDQzVcdTIzRjNcdUQ4M0RcdURFRUJdIFxcZHs0fS1cXGR7Mn0tXFxkezJ9L2csICcnKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBFbGltaW5hciBob3JhcyBkZSBpbmljaW8geSBmaW5cbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXFtoSTpbXlxcXV0rXFxdL2csICcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcW2hGOlteXFxdXStcXF0vZywgJycpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEVsaW1pbmFyIGVubGFjZXNcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXFtsaW5rXFxdXFwoW15cXCldK1xcKS9nLCAnJylcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRWxpbWluYXIgSURzIGRlIHRvZG9pc3RcbiAgICAgICAgICAgIC5yZXBsYWNlKC8lJVxcW3RvZG9pc3RfaWQ6OiBcXGQrXFxdJSUvZywgJycpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEVsaW1pbmFyIHRvZGFzIGxhcyBldGlxdWV0YXMgKGNvbnNpZGVyYW5kbyBsb3MgbnVldm9zIGZvcm1hdG9zKVxuICAgICAgICAgICAgLnJlcGxhY2UoLyNbXFx3LV0rKD86XFwvW1xcdy1dKykqXFxiL2csICcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLyNbXFx3LV0rKD86LVtcXHctXSspKlxcYi9nLCAnJyk7XG5cbiAgICAgICAgLy8gRWxpbWluYXIgbVx1MDBGQWx0aXBsZXMgZXNwYWNpb3MgeSBlc3BhY2lvcyBhbCBpbmljaW8vZmluYWxcbiAgICAgICAgdGV4dG9MaW1waW8gPSB0ZXh0b0xpbXBpb1xuICAgICAgICAgICAgLnJlcGxhY2UoL1xccysvZywgJyAnKVxuICAgICAgICAgICAgLnRyaW0oKTtcblxuICAgICAgICByZXR1cm4gdGV4dG9MaW1waW87XG4gICAgfVxuXG4gICBcbiAgICAvLyBNXHUwMEU5dG9kbyBkZSB1dGlsaWRhZCBwYXJhIG9idGVuZXIgdW5hIHJlcHJlc2VudGFjaVx1MDBGM24gamVyXHUwMEUxcnF1aWNhIGRlIGxhcyBldGlxdWV0YXNcbiAgICBwdWJsaWMgb2J0ZW5lckplcmFycXVpYUV0aXF1ZXRhcyhldGlxdWV0YXM6IHN0cmluZ1tdKTogTWFwPHN0cmluZywgU2V0PHN0cmluZz4+IHtcbiAgICAgICAgY29uc3QgamVyYXJxdWlhID0gbmV3IE1hcDxzdHJpbmcsIFNldDxzdHJpbmc+PigpO1xuXG4gICAgICAgIGV0aXF1ZXRhcy5mb3JFYWNoKGV0aXF1ZXRhID0+IHtcbiAgICAgICAgICAgIC8vIEVsaW1pbmFyIGVsICMgaW5pY2lhbFxuICAgICAgICAgICAgY29uc3QgcGFydGVzID0gZXRpcXVldGEuc2xpY2UoMSkuc3BsaXQoL1svLV0vKTtcbiAgICAgICAgICAgIGNvbnN0IGNhdGVnb3JpYSA9IHBhcnRlc1swXTtcblxuICAgICAgICAgICAgaWYgKCFqZXJhcnF1aWEuaGFzKGNhdGVnb3JpYSkpIHtcbiAgICAgICAgICAgICAgICBqZXJhcnF1aWEuc2V0KGNhdGVnb3JpYSwgbmV3IFNldCgpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBhcnRlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3ViZXRpcXVldGFzID0gcGFydGVzLnNsaWNlKDEpLmpvaW4oJy8nKTtcbiAgICAgICAgICAgICAgICBqZXJhcnF1aWEuZ2V0KGNhdGVnb3JpYSk/LmFkZChzdWJldGlxdWV0YXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gamVyYXJxdWlhO1xuICAgIH1cblxuXG4gICAgcHVibGljIG9idGVuZXJGZWNoYUxvY2FsKCk6IERhdGUge1xuICAgICAgICBjb25zdCBhaG9yYSA9IG5ldyBEYXRlKCk7XG5cbiAgICAgICAgLy8gQXNlZ3VyYXIgcXVlIGVzdGFtb3MgdHJhYmFqYW5kbyBjb24gbGEgZmVjaGEgbG9jYWxcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKFxuICAgICAgICAgICAgYWhvcmEuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICAgIGFob3JhLmdldE1vbnRoKCksXG4gICAgICAgICAgICBhaG9yYS5nZXREYXRlKCksXG4gICAgICAgICAgICAwLCAwLCAwXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIHBhcnNlYXJGZWNoYVZlbmNpbWllbnRvKGZlY2hhU3RyOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkKTogRGF0ZSB8IG51bGwge1xuICAgICAgICBpZiAoIWZlY2hhU3RyKSByZXR1cm4gbnVsbDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEFzZWd1cmFyIHF1ZSBpbnRlcnByZXRhbW9zIGxhIGZlY2hhIGVuIGxhIHpvbmEgaG9yYXJpYSBsb2NhbFxuICAgICAgICAgICAgY29uc3QgW2FcdTAwRjFvLCBtZXMsIGRpYV0gPSBmZWNoYVN0ci5zcGxpdCgnLScpLm1hcChudW0gPT4gcGFyc2VJbnQobnVtKSk7XG4gICAgICAgICAgICBpZiAoaXNOYU4oYVx1MDBGMW8pIHx8IGlzTmFOKG1lcykgfHwgaXNOYU4oZGlhKSkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENyZWFyIGxhIGZlY2hhIGVuIGxhIHpvbmEgaG9yYXJpYSBsb2NhbFxuICAgICAgICAgICAgY29uc3QgZmVjaGEgPSBuZXcgRGF0ZShhXHUwMEYxbywgbWVzIC0gMSwgZGlhLCAwLCAwLCAwKTtcbiAgICAgICAgICAgIHJldHVybiBmZWNoYTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHBhcnNlYW5kbyBmZWNoYTonLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBub3JtYWxpemFyRmVjaGFBU3RyaW5nKGZlY2hhOiBEYXRlKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgYVx1MDBGMW8gPSBmZWNoYS5nZXRGdWxsWWVhcigpO1xuICAgICAgICBjb25zdCBtZXMgPSBTdHJpbmcoZmVjaGEuZ2V0TW9udGgoKSArIDEpLnBhZFN0YXJ0KDIsICcwJyk7XG4gICAgICAgIGNvbnN0IGRpYSA9IFN0cmluZyhmZWNoYS5nZXREYXRlKCkpLnBhZFN0YXJ0KDIsICcwJyk7XG4gICAgICAgIHJldHVybiBgJHthXHUwMEYxb30tJHttZXN9LSR7ZGlhfWA7XG4gICAgfVxuXG4gICAgcHVibGljIGV4dHJhZXJEZXBlbmRlbmNpYXNZSWRzKGxpbmVhOiBzdHJpbmcpOiB7IHRhc2tJZD86IHN0cmluZzsgZGVwZW5kZW5jeUlkPzogc3RyaW5nIH0ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkFuYWxpemFuZG8gbFx1MDBFRG5lYSBwYXJhIElEczpcIiwgbGluZWEpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0YWRvID0ge1xuICAgICAgICAgICAgdGFza0lkOiB1bmRlZmluZWQgYXMgc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgZGVwZW5kZW5jeUlkOiB1bmRlZmluZWQgYXMgc3RyaW5nIHwgdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIC8vIEV4dHJhZXIgSUQgcHJvcGlvIGRlIGxhIHRhcmVhXG4gICAgICAgIGNvbnN0IHRhc2tJZE1hdGNoID0gbGluZWEubWF0Y2goL1x1RDgzQ1x1REQ5NFxccyooW2EtejAtOV17NSw3fSkvKTtcbiAgICAgICAgaWYgKHRhc2tJZE1hdGNoKSB7XG4gICAgICAgICAgICByZXN1bHRhZG8udGFza0lkID0gdGFza0lkTWF0Y2hbMV07XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIklEIGVuY29udHJhZG86XCIsIHJlc3VsdGFkby50YXNrSWQpO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8vIEV4dHJhZXIgSUQgZGUgZGVwZW5kZW5jaWFcbiAgICAgICAgY29uc3QgZGVwZW5kZW5jeU1hdGNoID0gbGluZWEubWF0Y2goL1x1MjZENFxccyooW2EtejAtOV17NSw3fSkvKTtcbiAgICAgICAgaWYgKGRlcGVuZGVuY3lNYXRjaCkge1xuICAgICAgICAgICAgcmVzdWx0YWRvLmRlcGVuZGVuY3lJZCA9IGRlcGVuZGVuY3lNYXRjaFsxXTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRGVwZW5kZW5jaWEgZW5jb250cmFkYTpcIiwgcmVzdWx0YWRvLmRlcGVuZGVuY3lJZCk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdGFkbztcbiAgICB9XG4gICAgXG4gICAgcHVibGljIGFzeW5jIHZlcmlmaWNhckVzdGFkb1RhcmVhKHRhc2tJZDogc3RyaW5nKTogUHJvbWlzZTx7XG4gICAgICAgIGNvbXBsZXRhZGE6IGJvb2xlYW47XG4gICAgICAgIHJ1dGFBcmNoaXZvPzogc3RyaW5nO1xuICAgICAgICB0aXR1bG9BcmNoaXZvPzogc3RyaW5nO1xuICAgICAgICB0ZXh0b1RhcmVhPzogc3RyaW5nO1xuICAgIH0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJcXG5WZXJpZmljYW5kbyBlc3RhZG8gZGUgdGFyZWE6XCIsIHRhc2tJZCk7XG4gICAgICAgIFxuICAgICAgICAvLyBPYnRlbmVyIHRvZG9zIGxvcyBhcmNoaXZvcyB5IGZpbHRyYXIgbG9zIGV4Y2x1aWRvc1xuICAgICAgICBjb25zdCB0b2Rvc0xvc0FyY2hpdm9zID0gdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcbiAgICAgICAgY29uc3QgZmlsZXNQYXJhUHJvY2VzYXIgPSB0b2Rvc0xvc0FyY2hpdm9zLmZpbHRlcihmaWxlID0+ICF0aGlzLmRlYmVFeGNsdWlyQXJjaGl2byhmaWxlKSk7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhgQnVzY2FuZG8gZW4gJHtmaWxlc1BhcmFQcm9jZXNhci5sZW5ndGh9IGFyY2hpdm9zIChleGNsdWlkb3M6ICR7dG9kb3NMb3NBcmNoaXZvcy5sZW5ndGggLSBmaWxlc1BhcmFQcm9jZXNhci5sZW5ndGh9KWApO1xuICAgICAgICBcbiAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzUGFyYVByb2Nlc2FyKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbmlkbyA9IGF3YWl0IHRoaXMucGx1Z2luLmFwcC52YXVsdC5jYWNoZWRSZWFkKGZpbGUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVhcyA9IGNvbnRlbmlkby5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBsaW5lYSBvZiBsaW5lYXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVhLmluY2x1ZGVzKGBcdUQ4M0NcdUREOTQgJHt0YXNrSWR9YCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVzdGFDb21wbGV0YWRhID0gbGluZWEudHJpbSgpLnN0YXJ0c1dpdGgoJy0gW3hdJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aXR1bG9BcmNoaXZvID0gdGhpcy5vYnRlbmVyVGl0dWxvTm90YShmaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHRvVGFyZWEgPSB0aGlzLmxpbXBpYXJUZXh0b1RhcmVhKGxpbmVhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVGFyZWEgZW5jb250cmFkYSBlbjpcIiwgZmlsZS5wYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXN0YWRvIGNvbXBsZXRhZGE6XCIsIGVzdGFDb21wbGV0YWRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVGV4dG8gZGUgbGEgdGFyZWE6XCIsIHRleHRvVGFyZWEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRhZGE6IGVzdGFDb21wbGV0YWRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1dGFBcmNoaXZvOiBmaWxlLnBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0dWxvQXJjaGl2bzogdGl0dWxvQXJjaGl2byxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0b1RhcmVhOiB0ZXh0b1RhcmVhXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBwcm9jZXNhbmRvIGFyY2hpdm8gJHtmaWxlLnBhdGh9OmAsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coXCJUYXJlYSBubyBlbmNvbnRyYWRhIGVuIGxvcyBhcmNoaXZvcyBwZXJtaXRpZG9zXCIpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29tcGxldGFkYTogZmFsc2VcbiAgICAgICAgfTtcbiAgICB9XG5cblxuICAgIC8vIEVuIGxhIGNsYXNlIFRhc2tVdGlsc1xuXG5wdWJsaWMgZXh0cmFlckV0aXF1ZXRhcyhsaW5lYTogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGV0aXF1ZXRhczogc3RyaW5nW10gPSBbXTtcbiAgICBcbiAgICAvLyBQYXRyb25lcyBwYXJhIGlkZW50aWZpY2FyIGRpZmVyZW50ZXMgZm9ybWF0b3MgZGUgZXRpcXVldGFzXG4gICAgY29uc3QgcGF0cm9uZXNFdGlxdWV0YXMgPSBbXG4gICAgICAgIC8vIEV0aXF1ZXRhcyBkZSBwZXJzb25hcyBjb24gZm9ybWF0byAjcHgtTm9tYnJlX0FwZWxsaWRvIFxuICAgICAgICAvI3B4LVtBLVphLXpdKyg/Ol9bQS1aYS16XSspKig/Ol9bQS1aYS16XSspP1xcYi9nLFxuICAgICAgICBcbiAgICAgICAgLy8gRXRpcXVldGFzIHNpbXBsZXM6ICN0b2RvaXN0XG4gICAgICAgIC8jW1xcdy1dK1xcYi9nLFxuICAgICAgICBcbiAgICAgICAgLy8gRXRpcXVldGFzIGNvbiBqZXJhcnF1XHUwMEVEYSB1c2FuZG8gXCIvXCI6ICNjeC9hbGd1bmEvY29zYVxuICAgICAgICAvI1tcXHctXSsoPzpcXC9bXFx3LV0rKStcXGIvZyxcbiAgICAgICAgXG4gICAgICAgIC8vIEV0aXF1ZXRhcyBjb24gamVyYXJxdVx1MDBFRGEgdXNhbmRvIFwiLVwiOiAjY3gtYWxndW5hLWNvc2FcbiAgICAgICAgLyNbXFx3LV0rKD86LVtcXHctXSspK1xcYi9nXG4gICAgXTtcblxuICAgIC8vIFByb2Nlc2FyIGNhZGEgcGF0clx1MDBGM25cbiAgICBwYXRyb25lc0V0aXF1ZXRhcy5mb3JFYWNoKHBhdHJvbiA9PiB7XG4gICAgICAgIGNvbnN0IGNvaW5jaWRlbmNpYXMgPSBsaW5lYS5tYXRjaChwYXRyb24pO1xuICAgICAgICBpZiAoY29pbmNpZGVuY2lhcykge1xuICAgICAgICAgICAgY29pbmNpZGVuY2lhcy5mb3JFYWNoKGV0aXF1ZXRhID0+IHtcbiAgICAgICAgICAgICAgICAvLyBFdml0YXIgZHVwbGljYWRvcyB5IGFzZWd1cmFyIHF1ZSBzZWEgdW5hIGV0aXF1ZXRhIHZcdTAwRTFsaWRhXG4gICAgICAgICAgICAgICAgaWYgKCFldGlxdWV0YXMuaW5jbHVkZXMoZXRpcXVldGEpICYmIHRoaXMuZXNFdGlxdWV0YVZhbGlkYShldGlxdWV0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZXRpcXVldGFzLnB1c2goZXRpcXVldGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcy5vcmdhbml6YXJFdGlxdWV0YXMoZXRpcXVldGFzKTtcbn1cblxucHJpdmF0ZSBlc0V0aXF1ZXRhVmFsaWRhKGV0aXF1ZXRhOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAvLyBWZXJpZmljYXIgcXVlIGxhIGV0aXF1ZXRhIGN1bXBsYSBjb24gZWwgZm9ybWF0byBiXHUwMEUxc2ljb1xuICAgIGlmICghZXRpcXVldGEuc3RhcnRzV2l0aCgnIycpKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBWYWxpZGFjaVx1MDBGM24gZXNwZWNcdTAwRURmaWNhIHBhcmEgZXRpcXVldGFzIGRlIHBlcnNvbmFzXG4gICAgaWYgKGV0aXF1ZXRhLnN0YXJ0c1dpdGgoJyNweC0nKSkge1xuICAgICAgICBjb25zdCBub21icmVDb21wbGV0byA9IGV0aXF1ZXRhLnNsaWNlKDQpOyAvLyBSZW1vdmVyICcjcHgtJ1xuICAgICAgICAvLyBWZXJpZmljYXIgZm9ybWF0byBOb21icmVfQXBlbGxpZG8oX0VtcHJlc2EpP1xuICAgICAgICByZXR1cm4gL15bQS1aYS16XSsoPzpfW0EtWmEtel0rKSokLy50ZXN0KG5vbWJyZUNvbXBsZXRvKTtcbiAgICB9XG5cbiAgICAvLyBWZXJpZmljYXIgcXVlIG5vIGNvbnRlbmdhIGNhcmFjdGVyZXMgaW52XHUwMEUxbGlkb3NcbiAgICBjb25zdCBjYXJhY3RlcmVzSW52YWxpZG9zID0gL1shQCQlXiYqKCkrPXt9XFxbXFxdOjtcIic8PiwuP35cXFxcfF0vO1xuICAgIGlmIChjYXJhY3RlcmVzSW52YWxpZG9zLnRlc3QoZXRpcXVldGEpKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBWZXJpZmljYXIgZXN0cnVjdHVyYSBwYXJhIGV0aXF1ZXRhcyBjb24gamVyYXJxdVx1MDBFRGFcbiAgICBjb25zdCBwYXJ0ZXNFdGlxdWV0YSA9IGV0aXF1ZXRhLnNsaWNlKDEpLnNwbGl0KC9bLy1dLyk7XG4gICAgcmV0dXJuIHBhcnRlc0V0aXF1ZXRhLmV2ZXJ5KHBhcnRlID0+IHBhcnRlLmxlbmd0aCA+IDApO1xufVxuXG5wcml2YXRlIG9yZ2FuaXphckV0aXF1ZXRhcyhldGlxdWV0YXM6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xuICAgIC8vIE9yZGVuYXIgZXRpcXVldGFzIHBvciBjYXRlZ29yXHUwMEVEYXMgY29ub2NpZGFzIHkgbHVlZ28gYWxmYWJcdTAwRTl0aWNhbWVudGVcbiAgICBjb25zdCBjYXRlZ29yaWFzQ29ub2NpZGFzID0ge1xuICAgICAgICB0b2RvaXN0OiBbXSBhcyBzdHJpbmdbXSxcbiAgICAgICAgY3g6IFtdIGFzIHN0cmluZ1tdLFxuICAgICAgICBweDogW10gYXMgc3RyaW5nW10sXG4gICAgICAgIG90cmFzOiBbXSBhcyBzdHJpbmdbXVxuICAgIH07XG5cbiAgICBldGlxdWV0YXMuZm9yRWFjaChldGlxdWV0YSA9PiB7XG4gICAgICAgIGlmIChldGlxdWV0YS5zdGFydHNXaXRoKCcjcHgtJykpIHtcbiAgICAgICAgICAgIGNhdGVnb3JpYXNDb25vY2lkYXMucHgucHVzaChldGlxdWV0YSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXRpcXVldGEuc3RhcnRzV2l0aCgnI3RvZG9pc3QnKSkge1xuICAgICAgICAgICAgY2F0ZWdvcmlhc0Nvbm9jaWRhcy50b2RvaXN0LnB1c2goZXRpcXVldGEpO1xuICAgICAgICB9IGVsc2UgaWYgKGV0aXF1ZXRhLm1hdGNoKC8jY3goPzpbLy1dfCQpLykpIHtcbiAgICAgICAgICAgIGNhdGVnb3JpYXNDb25vY2lkYXMuY3gucHVzaChldGlxdWV0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYXRlZ29yaWFzQ29ub2NpZGFzLm90cmFzLnB1c2goZXRpcXVldGEpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBPcmRlbmFyIGNhZGEgY2F0ZWdvclx1MDBFRGEgYWxmYWJcdTAwRTl0aWNhbWVudGVcbiAgICBPYmplY3QudmFsdWVzKGNhdGVnb3JpYXNDb25vY2lkYXMpLmZvckVhY2goY2F0ZWdvcmlhID0+IHtcbiAgICAgICAgY2F0ZWdvcmlhLnNvcnQoKGEsIGIpID0+IGEubG9jYWxlQ29tcGFyZShiKSk7XG4gICAgfSk7XG5cbiAgICAvLyBDb21iaW5hciB0b2RhcyBsYXMgY2F0ZWdvclx1MDBFRGFzIGVuIGVsIG9yZGVuIGRlc2VhZG9cbiAgICByZXR1cm4gW1xuICAgICAgICAuLi5jYXRlZ29yaWFzQ29ub2NpZGFzLnRvZG9pc3QsXG4gICAgICAgIC4uLmNhdGVnb3JpYXNDb25vY2lkYXMuY3gsXG4gICAgICAgIC4uLmNhdGVnb3JpYXNDb25vY2lkYXMucHgsXG4gICAgICAgIC4uLmNhdGVnb3JpYXNDb25vY2lkYXMub3RyYXNcbiAgICBdO1xufVxuXG4vLyBBZ3JlZ2FyIG1cdTAwRTl0b2RvIHBhcmEgdmVyaWZpY2FyIGV4Y2x1c2lvbmVzXG5wcml2YXRlIGRlYmVFeGNsdWlyQXJjaGl2byhmaWxlOiBURmlsZSk6IGJvb2xlYW4ge1xuICAgIC8vIEV4Y2x1aXIgbGEgY2FycGV0YSBQbGFudGlsbGFzIHkgc3VzIHN1YmNhcnBldGFzXG4gICAgaWYgKGZpbGUucGF0aC5zdGFydHNXaXRoKCdQbGFudGlsbGFzLycpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIEV4Y2x1aXIgbGEgY2FycGV0YSBkZWwgc2lzdGVtYSBHVEQgeSBzdXMgc3ViY2FycGV0YXNcbiAgICBpZiAoZmlsZS5wYXRoLnN0YXJ0c1dpdGgoYCR7dGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX1Npc3RlbWFHVER9L2ApKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIEV4Y2x1aXIgY2FycGV0YSBkZSBhcmNoaXZvcyAoc2kgZXhpc3RlKVxuICAgIGlmIChmaWxlLnBhdGguc3RhcnRzV2l0aCgnQXJjaGl2by8nKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbnB1YmxpYyBhc3luYyBlbmNvbnRyYXJMaW5lYXNUYXJlYShmaWxlOiBURmlsZSk6IFByb21pc2U8TWFwPHN0cmluZywgTGluZUluZm8+PiB7XG4gICAgY29uc3QgbGluZWFzVGFyZWFzID0gbmV3IE1hcDxzdHJpbmcsIExpbmVJbmZvPigpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbmlkbyA9IGF3YWl0IHRoaXMucGx1Z2luLmFwcC52YXVsdC5jYWNoZWRSZWFkKGZpbGUpO1xuICAgICAgICBjb25zdCBsaW5lYXMgPSBjb250ZW5pZG8uc3BsaXQoJ1xcbicpO1xuICAgICAgICBcbiAgICAgICAgbGluZWFzLmZvckVhY2goKGxpbmVhLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgLy8gQ3JlYXIgdW5hIGNsYXZlIFx1MDBGQW5pY2EgYmFzYWRhIGVuIGVsIHRleHRvIGRlIGxhIHRhcmVhXG4gICAgICAgICAgICBjb25zdCB0ZXh0b0xpbXBpbyA9IHRoaXMubGltcGlhclRleHRvVGFyZWEobGluZWEpO1xuICAgICAgICAgICAgaWYgKHRleHRvTGltcGlvICYmIGxpbmVhLnRyaW0oKS5zdGFydHNXaXRoKCctIFsnKSkge1xuICAgICAgICAgICAgICAgIGxpbmVhc1RhcmVhcy5zZXQodGV4dG9MaW1waW8sIHtcbiAgICAgICAgICAgICAgICAgICAgbnVtZXJvOiBpbmRleCArIDEsXG4gICAgICAgICAgICAgICAgICAgIHRleHRvOiBsaW5lYS50cmltKClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgcHJvY2VzYW5kbyBsXHUwMEVEbmVhcyBlbiAke2ZpbGUucGF0aH06YCwgZXJyb3IpO1xuICAgIH1cbiAgICByZXR1cm4gbGluZWFzVGFyZWFzO1xufVxuXG59IiwgIi8vIHNyYy9tb2R1bGVzL3Rhc2tNYW5hZ2VyL3V0aWxzL3Rhc2tXZWlnaHRDYWxjdWxhdG9yLnRzXG5cbmltcG9ydCB7IFRhc2ssIEVzdGFkb1RhcmVhIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy90YXNrSW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBUYXNrVXRpbHMgfSBmcm9tICcuL3Rhc2tVdGlscyc7XG5cbmV4cG9ydCBjbGFzcyBUYXNrV2VpZ2h0Q2FsY3VsYXRvciB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgdGFza1V0aWxzOiBUYXNrVXRpbHM7XG4gICAgXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgV0VJR0hUUyA9IHtcbiAgICAgICAgSE9SQV9GSU46IDUsXG4gICAgICAgIEhPUkFfSU5JQ0lPOiA1LFxuICAgICAgICBEVUVfREFURTogNSxcbiAgICAgICAgU0NIRURVTEVEOiA0LFxuICAgICAgICBTVEFSVDogMyxcbiAgICAgICAgUFJJT1JJVFk6IHtcbiAgICAgICAgICAgIEhJR0hFU1Q6IDQsXG4gICAgICAgICAgICBISUdIOiAzLFxuICAgICAgICAgICAgTUVESVVNOiAyLFxuICAgICAgICAgICAgTE9XOiAtMSxcbiAgICAgICAgICAgIExPV0VTVDogLTJcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwdWJsaWMgc3RhdGljIHNldFRhc2tVdGlscyh1dGlsczogVGFza1V0aWxzKSB7XG4gICAgICAgIFRhc2tXZWlnaHRDYWxjdWxhdG9yLnRhc2tVdGlscyA9IHV0aWxzO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0RmVjaGFQcmlvcml0YXJpYSh0YXNrOiBUYXNrLCB0aXBvRmVjaGE6ICdzdGFydCcgfCAnZHVlJyB8ICdzY2hlZHVsZWQnIHwgJ2FueScgPSAnYW55Jyk6IHN0cmluZyB8IG51bGwge1xuICAgICAgICBpZiAoIXRhc2spIHJldHVybiBudWxsO1xuXG4gICAgICAgIHN3aXRjaCAodGlwb0ZlY2hhKSB7XG4gICAgICAgICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhc2suZmVjaGFTdGFydCB8fCBudWxsO1xuICAgICAgICAgICAgY2FzZSAnZHVlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFzay5mZWNoYVZlbmNpbWllbnRvIHx8IG51bGw7XG4gICAgICAgICAgICBjYXNlICdzY2hlZHVsZWQnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0YXNrLmZlY2hhU2NoZWR1bGVkIHx8IG51bGw7XG4gICAgICAgICAgICBjYXNlICdhbnknOlxuICAgICAgICAgICAgICAgIHJldHVybiB0YXNrLmZlY2hhVmVuY2ltaWVudG8gfHwgdGFzay5mZWNoYVNjaGVkdWxlZCB8fCB0YXNrLmZlY2hhU3RhcnQgfHwgbnVsbDtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHNob3VsZEluY2x1ZGVUYXNrKHRhc2s6IFRhc2ssIHNlYXJjaFR5cGU6IHN0cmluZywgY3VycmVudERhdGU6IERhdGUpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCFUYXNrV2VpZ2h0Q2FsY3VsYXRvci50YXNrVXRpbHMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1Rhc2tVdGlscyBubyBpbmljaWFsaXphZG8gZW4gVGFza1dlaWdodENhbGN1bGF0b3InKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHNlYXJjaFR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzdGFydF92ZW5jaWRhcyc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmVjaGFTdGFydCA9IHRhc2suZmVjaGFTdGFydDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmZWNoYVN0YXJ0KSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmZWNoYVN0YXJ0T2JqID0gVGFza1dlaWdodENhbGN1bGF0b3IudGFza1V0aWxzLnBhcnNlYXJGZWNoYVZlbmNpbWllbnRvKGZlY2hhU3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmVjaGFTdGFydE9iaiAhPT0gbnVsbCAmJiBmZWNoYVN0YXJ0T2JqIDwgY3VycmVudERhdGU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2FzZSAndmVuY2lkYXMnOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZlY2hhVmVuY2ltaWVudG8gPSB0YXNrLmZlY2hhVmVuY2ltaWVudG87XG4gICAgICAgICAgICAgICAgICAgIGlmICghZmVjaGFWZW5jaW1pZW50bykgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZlY2hhVmVuY09iaiA9IFRhc2tXZWlnaHRDYWxjdWxhdG9yLnRhc2tVdGlscy5wYXJzZWFyRmVjaGFWZW5jaW1pZW50byhmZWNoYVZlbmNpbWllbnRvKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZlY2hhVmVuY09iaiAhPT0gbnVsbCAmJiBmZWNoYVZlbmNPYmogPCBjdXJyZW50RGF0ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjYXNlICdob3knOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZlY2hhcyA9IFt0YXNrLmZlY2hhVmVuY2ltaWVudG8sIHRhc2suZmVjaGFTY2hlZHVsZWQsIHRhc2suZmVjaGFTdGFydF0uZmlsdGVyKGYgPT4gZik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmZWNoYXMuc29tZShmZWNoYSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmZWNoYU9iaiA9IFRhc2tXZWlnaHRDYWxjdWxhdG9yLnRhc2tVdGlscy5wYXJzZWFyRmVjaGFWZW5jaW1pZW50byhmZWNoYSEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZlY2hhT2JqPy50b0RhdGVTdHJpbmcoKSA9PT0gY3VycmVudERhdGUudG9EYXRlU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNhc2UgJ3Byb3hpbWFzJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmZWNoYVZlbmNpbWllbnRvID0gdGFzay5mZWNoYVZlbmNpbWllbnRvO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWZlY2hhVmVuY2ltaWVudG8pIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmZWNoYVZlbmNPYmogPSBUYXNrV2VpZ2h0Q2FsY3VsYXRvci50YXNrVXRpbHMucGFyc2VhckZlY2hhVmVuY2ltaWVudG8oZmVjaGFWZW5jaW1pZW50byk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZmVjaGFWZW5jT2JqKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlhc0RpZmVyZW5jaWEgPSBNYXRoLmNlaWwoXG4gICAgICAgICAgICAgICAgICAgICAgICAoZmVjaGFWZW5jT2JqLmdldFRpbWUoKSAtIGN1cnJlbnREYXRlLmdldFRpbWUoKSkgLyAoMTAwMCAqIDYwICogNjAgKiAyNClcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRpYXNEaWZlcmVuY2lhID49IDAgJiYgZGlhc0RpZmVyZW5jaWEgPD0gNztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBlbiBzaG91bGRJbmNsdWRlVGFzazonLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGNhbGN1bGF0ZVdlaWdodCh0YXNrOiBUYXNrKTogeyBiYXNlV2VpZ2h0OiBudW1iZXI7IHRpbWVXZWlnaHQ6IG51bWJlcjsgcHJpb3JpdHlXZWlnaHQ6IG51bWJlcjsgdG90YWxXZWlnaHQ6IG51bWJlciB9IHtcbiAgICAgICAgbGV0IGJhc2VXZWlnaHQgPSAwO1xuICAgICAgICBsZXQgdGltZVdlaWdodCA9IDA7XG4gICAgICAgIGxldCBwcmlvcml0eVdlaWdodCA9IDA7XG5cbiAgICAgICAgLy8gUGVzb3MgcG9yIGZlY2hhc1xuICAgICAgICBpZiAodGFzay5mZWNoYVZlbmNpbWllbnRvKSBiYXNlV2VpZ2h0ICs9IHRoaXMuV0VJR0hUUy5EVUVfREFURTtcbiAgICAgICAgaWYgKHRhc2suZmVjaGFTY2hlZHVsZWQpIGJhc2VXZWlnaHQgKz0gdGhpcy5XRUlHSFRTLlNDSEVEVUxFRDtcbiAgICAgICAgaWYgKHRhc2suZmVjaGFTdGFydCkgYmFzZVdlaWdodCArPSB0aGlzLldFSUdIVFMuU1RBUlQ7XG5cbiAgICAgICAgLy8gUGVzb3MgcG9yIGhvcmFzXG4gICAgICAgIGlmICh0YXNrLmhvcmFGaW4pIHRpbWVXZWlnaHQgKz0gdGhpcy5XRUlHSFRTLkhPUkFfRklOO1xuICAgICAgICBpZiAodGFzay5ob3JhSW5pY2lvKSB0aW1lV2VpZ2h0ICs9IHRoaXMuV0VJR0hUUy5IT1JBX0lOSUNJTztcblxuICAgICAgICAvLyBQZXNvIHBvciBwcmlvcmlkYWRcbiAgICAgICAgY29uc3QgdGV4dG8gPSB0YXNrLnRleHRvLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICh0ZXh0by5pbmNsdWRlcygnXHVEODNEXHVERDNBJykpIHByaW9yaXR5V2VpZ2h0ICs9IHRoaXMuV0VJR0hUUy5QUklPUklUWS5ISUdIRVNUO1xuICAgICAgICBpZiAodGV4dG8uaW5jbHVkZXMoJ1x1MjNFQicpKSBwcmlvcml0eVdlaWdodCArPSB0aGlzLldFSUdIVFMuUFJJT1JJVFkuSElHSDtcbiAgICAgICAgaWYgKHRleHRvLmluY2x1ZGVzKCdcdUQ4M0RcdUREM0MnKSkgcHJpb3JpdHlXZWlnaHQgKz0gdGhpcy5XRUlHSFRTLlBSSU9SSVRZLk1FRElVTTtcbiAgICAgICAgaWYgKHRleHRvLmluY2x1ZGVzKCdcdUQ4M0RcdUREM0QnKSkgcHJpb3JpdHlXZWlnaHQgKz0gdGhpcy5XRUlHSFRTLlBSSU9SSVRZLkxPVztcbiAgICAgICAgaWYgKHRleHRvLmluY2x1ZGVzKCdcdTIzRUMnKSkgcHJpb3JpdHlXZWlnaHQgKz0gdGhpcy5XRUlHSFRTLlBSSU9SSVRZLkxPV0VTVDtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmFzZVdlaWdodCxcbiAgICAgICAgICAgIHRpbWVXZWlnaHQsXG4gICAgICAgICAgICBwcmlvcml0eVdlaWdodCxcbiAgICAgICAgICAgIHRvdGFsV2VpZ2h0OiBiYXNlV2VpZ2h0ICsgdGltZVdlaWdodCArIHByaW9yaXR5V2VpZ2h0XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBzb3J0VGFza3ModGFza3M6IFRhc2tbXSk6IFRhc2tbXSB7XG4gICAgICAgIGlmICghVGFza1dlaWdodENhbGN1bGF0b3IudGFza1V0aWxzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdUYXNrVXRpbHMgbm8gaW5pY2lhbGl6YWRvIGVuIFRhc2tXZWlnaHRDYWxjdWxhdG9yJyk7XG4gICAgICAgICAgICByZXR1cm4gdGFza3M7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFza3Muc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBQcmltZXJvIG9yZGVuYXIgcG9yIGZlY2hhXG4gICAgICAgICAgICAgICAgY29uc3QgZmVjaGFBID0gdGhpcy5nZXRGZWNoYVByaW9yaXRhcmlhKGEsICdhbnknKTtcbiAgICAgICAgICAgICAgICBjb25zdCBmZWNoYUIgPSB0aGlzLmdldEZlY2hhUHJpb3JpdGFyaWEoYiwgJ2FueScpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGZlY2hhQSAhPT0gZmVjaGFCKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVBID0gZmVjaGFBID8gVGFza1dlaWdodENhbGN1bGF0b3IudGFza1V0aWxzLnBhcnNlYXJGZWNoYVZlbmNpbWllbnRvKGZlY2hhQSkgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRlQiA9IGZlY2hhQiA/IFRhc2tXZWlnaHRDYWxjdWxhdG9yLnRhc2tVdGlscy5wYXJzZWFyRmVjaGFWZW5jaW1pZW50byhmZWNoYUIpIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRlQSAmJiBkYXRlQikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVBLmdldFRpbWUoKSAtIGRhdGVCLmdldFRpbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTaSBsYXMgZmVjaGFzIHNvbiBpZ3VhbGVzLCBvcmRlbmFyIHBvciBob3JhXG4gICAgICAgICAgICAgICAgaWYgKGEuaG9yYUluaWNpbyAmJiBiLmhvcmFJbmljaW8pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGEuaG9yYUluaWNpbyAhPT0gYi5ob3JhSW5pY2lvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5ob3JhSW5pY2lvLmxvY2FsZUNvbXBhcmUoYi5ob3JhSW5pY2lvKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYS5ob3JhSW5pY2lvKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGIuaG9yYUluaWNpbykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTaSBsYXMgaG9yYXMgc29uIGlndWFsZXMgbyBubyBleGlzdGVuLCBvcmRlbmFyIHBvciBwZXNvXG4gICAgICAgICAgICAgICAgY29uc3Qgd2VpZ2h0QSA9IGEud2VpZ2h0Py50b3RhbFdlaWdodCA/PyAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IHdlaWdodEIgPSBiLndlaWdodD8udG90YWxXZWlnaHQgPz8gMDtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2VpZ2h0QiAtIHdlaWdodEE7XG5cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igb3JkZW5hbmRvIHRhcmVhczonLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGNhbGN1bGF0ZUJhc2VXZWlnaHQodGFzazogVGFzayk6IG51bWJlciB7XG4gICAgICAgIGxldCB3ZWlnaHQgPSAwO1xuXG4gICAgICAgIC8vIFBlc29zIHBvciBmZWNoYXNcbiAgICAgICAgaWYgKHRhc2suZmVjaGFWZW5jaW1pZW50bykgd2VpZ2h0ICs9IHRoaXMuV0VJR0hUUy5EVUVfREFURTtcbiAgICAgICAgaWYgKHRhc2suZmVjaGFTY2hlZHVsZWQpIHdlaWdodCArPSB0aGlzLldFSUdIVFMuU0NIRURVTEVEO1xuICAgICAgICBpZiAodGFzay5mZWNoYVN0YXJ0KSB3ZWlnaHQgKz0gdGhpcy5XRUlHSFRTLlNUQVJUO1xuXG4gICAgICAgIHJldHVybiB3ZWlnaHQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgY2FsY3VsYXRlVGltZVdlaWdodCh0YXNrOiBUYXNrKTogbnVtYmVyIHtcbiAgICAgICAgbGV0IHdlaWdodCA9IDA7XG5cbiAgICAgICAgaWYgKHRhc2suaG9yYUZpbikgd2VpZ2h0ICs9IHRoaXMuV0VJR0hUUy5IT1JBX0ZJTjtcbiAgICAgICAgaWYgKHRhc2suaG9yYUluaWNpbykgd2VpZ2h0ICs9IHRoaXMuV0VJR0hUUy5IT1JBX0lOSUNJTztcblxuICAgICAgICByZXR1cm4gd2VpZ2h0O1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGNhbGN1bGF0ZVByaW9yaXR5V2VpZ2h0KHRhc2s6IFRhc2spOiBudW1iZXIge1xuICAgICAgICBjb25zdCB0ZXh0byA9IHRhc2sudGV4dG8udG9Mb3dlckNhc2UoKTtcblxuICAgICAgICBpZiAodGV4dG8uaW5jbHVkZXMoJ1x1RDgzRFx1REQzQScpKSByZXR1cm4gdGhpcy5XRUlHSFRTLlBSSU9SSVRZLkhJR0hFU1Q7XG4gICAgICAgIGlmICh0ZXh0by5pbmNsdWRlcygnXHUyM0VCJykpIHJldHVybiB0aGlzLldFSUdIVFMuUFJJT1JJVFkuSElHSDtcbiAgICAgICAgaWYgKHRleHRvLmluY2x1ZGVzKCdcdUQ4M0RcdUREM0MnKSkgcmV0dXJuIHRoaXMuV0VJR0hUUy5QUklPUklUWS5NRURJVU07XG4gICAgICAgIGlmICh0ZXh0by5pbmNsdWRlcygnXHVEODNEXHVERDNEJykpIHJldHVybiB0aGlzLldFSUdIVFMuUFJJT1JJVFkuTE9XO1xuICAgICAgICBpZiAodGV4dG8uaW5jbHVkZXMoJ1x1MjNFQycpKSByZXR1cm4gdGhpcy5XRUlHSFRTLlBSSU9SSVRZLkxPV0VTVDtcblxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG5cblxuICAgIHByaXZhdGUgc3RhdGljIGVzRmVjaGFWYWxpZGEoZmVjaGE6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZmVjaGFPYmogPSBuZXcgRGF0ZShmZWNoYSk7XG4gICAgICAgICAgICByZXR1cm4gZmVjaGFPYmoudG9TdHJpbmcoKSAhPT0gJ0ludmFsaWQgRGF0ZSc7XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn0iLCAiLy8gc3JjL21vZHVsZXMvbW9kdWxvVGFiVGl0bGUvaW5kZXgudHNcblxuaW1wb3J0IHsgUGx1Z2luLCBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IHJlZ2lzdGVyQ29tbWFuZHMgfSBmcm9tICcuL2NvbW1hbmRzJztcbmltcG9ydCB7IFRhYlRpdGxlTWFuYWdlciB9IGZyb20gJy4vVGFiVGl0bGVNYW5hZ2VyJztcbmltcG9ydCB7IFRhYlRpdGxlU2V0dGluZ3MgfSBmcm9tICcuL2ludGVyZmFjZXMvVGFiVGl0bGVTZXR0aW5ncyc7XG5pbXBvcnQgeyBERUZBVUxUX1RBQl9TRVRUSU5HUyB9IGZyb20gJy4vZGVmYXVsdHMvZGVmYXVsdFNldHRpbmdzJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vdXRpbHMvbG9nZ2VyJztcblxuZXhwb3J0IGNsYXNzIE1vZHVsb1RhYlRpdGxlIHtcbiAgICBwcml2YXRlIHBsdWdpbjogUGx1Z2luO1xuICAgIHByaXZhdGUgc2V0dGluZ3M6IFRhYlRpdGxlU2V0dGluZ3M7XG4gICAgcHJpdmF0ZSB0YWJNYW5hZ2VyOiBUYWJUaXRsZU1hbmFnZXIgfCBudWxsID0gbnVsbDtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IFBsdWdpbikge1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IERFRkFVTFRfVEFCX1NFVFRJTkdTO1xuICAgIH1cblxuICAgIGFzeW5jIGFjdGl2YXRlKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQ2FyZ2FyIGNvbmZpZ3VyYWNpXHUwMEYzblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQXNlZ3VyYXJzZSBkZSBxdWUgdGl0bGVEaXNwbGF5TW9kZSBlc3RcdTAwRTEgY29uZmlndXJhZG9cbiAgICAgICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy50aXRsZURpc3BsYXlNb2RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy50aXRsZURpc3BsYXlNb2RlID0gJ2FsaWFzJztcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbmljaWFsaXphciBlbCBtYW5lamFkb3IgZGUgdFx1MDBFRHR1bG9zXG4gICAgICAgICAgICB0aGlzLnRhYk1hbmFnZXIgPSBuZXcgVGFiVGl0bGVNYW5hZ2VyKHRoaXMucGx1Z2luLCB0aGlzLnNldHRpbmdzKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gUmVnaXN0cmFyIGxvcyBjb21hbmRvc1xuICAgICAgICAgICAgcmVnaXN0ZXJDb21tYW5kcyh0aGlzLnBsdWdpbiwgdGhpcy5zZXR0aW5ncyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFJlZ2lzdHJhciBldmVudG9zIHBhcmEgY2FtYmlvcyBkZSBsYXlvdXRcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnJlZ2lzdGVyRXZlbnQoXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uYXBwLndvcmtzcGFjZS5vbignbGF5b3V0LWNoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGFiTWFuYWdlcj8udXBkYXRlQWxsVGFicygpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLmVycm9yKCdFcnJvciB1cGRhdGluZyB0YWJzIG9uIGxheW91dCBjaGFuZ2U6JywgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIC8vIFJlZ2lzdHJhciBldmVudG8gcGFyYSBjdWFuZG8gc2UgYWJyYSB1biBhcmNoaXZvXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5yZWdpc3RlckV2ZW50KFxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2Uub24oJ2ZpbGUtb3BlbicsIChmaWxlOiBURmlsZSB8IG51bGwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlICYmIHRoaXMudGFiTWFuYWdlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGFiTWFuYWdlci51cGRhdGVUYWJGb3JGaWxlKGZpbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLmVycm9yKCdFcnJvciB1cGRhdGluZyB0YWIgb24gZmlsZSBvcGVuOicsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyBBY3R1YWxpemFjaVx1MDBGM24gaW5pY2lhbCBkZXNwdVx1MDBFOXMgZGUgdW4gYnJldmUgcmV0cmFzb1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy50YWJNYW5hZ2VyPy51cGRhdGVBbGxUYWJzKCk7XG4gICAgICAgICAgICB9LCAxMDAwKTtcblxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgTG9nZ2VyLmVycm9yKCdFcnJvciBhY3RpdmF0aW5nIFRhYlRpdGxlIG1vZHVsZTonLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWFjdGl2YXRlKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHRoaXMudGFiTWFuYWdlcikge1xuICAgICAgICAgICAgICAgIHRoaXMudGFiTWFuYWdlci5yZXN0b3JlRGVmYXVsdFRpdGxlcygpO1xuICAgICAgICAgICAgICAgIHRoaXMudGFiTWFuYWdlciA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBMb2dnZXIuZXJyb3IoJ0Vycm9yIGRlYWN0aXZhdGluZyBUYWJUaXRsZSBtb2R1bGU6JywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBsb2FkZWREYXRhID0gYXdhaXQgdGhpcy5wbHVnaW4ubG9hZERhdGEoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1RBQl9TRVRUSU5HUywgbG9hZGVkRGF0YSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBMb2dnZXIuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgVGFiVGl0bGUgc2V0dGluZ3M6JywgZXJyb3IpO1xuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncyA9IERFRkFVTFRfVEFCX1NFVFRJTkdTO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIExvZ2dlci5lcnJvcignRXJyb3Igc2F2aW5nIFRhYlRpdGxlIHNldHRpbmdzOicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCAiLy8gc3JjL21vZHVsZXMvbW9kdWxvVGFiVGl0bGUvY29tbWFuZHMudHNcbmltcG9ydCB7IFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IFRhYlRpdGxlU2V0dGluZ3MgfSBmcm9tICcuL2ludGVyZmFjZXMvVGFiVGl0bGVTZXR0aW5ncyc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckNvbW1hbmRzKHBsdWdpbjogUGx1Z2luLCBzZXR0aW5nczogVGFiVGl0bGVTZXR0aW5ncykge1xuICAgIHBsdWdpbi5hZGRDb21tYW5kKHtcbiAgICAgICAgaWQ6ICdzZXQtdGFiLXRpdGxlLWFsaWFzJyxcbiAgICAgICAgbmFtZTogJ01vc3RyYXIgYWxpYXMgZW4gcGVzdGFcdTAwRjFhcycsXG4gICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICBzZXR0aW5ncy50aXRsZURpc3BsYXlNb2RlID0gJ2FsaWFzJztcbiAgICAgICAgICAgIHBsdWdpbi5zYXZlRGF0YShzZXR0aW5ncyk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHBsdWdpbi5hZGRDb21tYW5kKHtcbiAgICAgICAgaWQ6ICdzZXQtdGFiLXRpdGxlLXRpdGxlJyxcbiAgICAgICAgbmFtZTogJ01vc3RyYXIgdFx1MDBFRHR1bG8gZW4gcGVzdGFcdTAwRjFhcycsXG4gICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICBzZXR0aW5ncy50aXRsZURpc3BsYXlNb2RlID0gJ3RpdGxlJztcbiAgICAgICAgICAgIHBsdWdpbi5zYXZlRGF0YShzZXR0aW5ncyk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHBsdWdpbi5hZGRDb21tYW5kKHtcbiAgICAgICAgaWQ6ICdzZXQtdGFiLXRpdGxlLWZpbGVuYW1lJyxcbiAgICAgICAgbmFtZTogJ01vc3RyYXIgbm9tYnJlIGRlIGFyY2hpdm8gZW4gcGVzdGFcdTAwRjFhcycsXG4gICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICBzZXR0aW5ncy50aXRsZURpc3BsYXlNb2RlID0gJ2ZpbGVuYW1lJztcbiAgICAgICAgICAgIHBsdWdpbi5zYXZlRGF0YShzZXR0aW5ncyk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0iLCAiLy8gc3JjL21vZHVsZXMvbW9kdWxvVGFiVGl0bGUvVGFiVGl0bGVNYW5hZ2VyLnRzXG5pbXBvcnQgeyBURmlsZSwgV29ya3NwYWNlTGVhZiwgTWFya2Rvd25WaWV3IH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgQ3VzdG9tTWFya2Rvd25WaWV3IH0gZnJvbSAnLi92aWV3cy9DdXN0b21NYXJrZG93blZpZXcnO1xuaW1wb3J0IHsgVGFiVGl0bGVTZXR0aW5ncyB9IGZyb20gJy4vaW50ZXJmYWNlcy9UYWJUaXRsZVNldHRpbmdzJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vdXRpbHMvbG9nZ2VyJztcblxuZXhwb3J0IGNsYXNzIFRhYlRpdGxlTWFuYWdlciB7XG4gICAgcHJpdmF0ZSBwbHVnaW46IFBsdWdpbjtcbiAgICBwcml2YXRlIHNldHRpbmdzOiBUYWJUaXRsZVNldHRpbmdzO1xuICAgIHByaXZhdGUgY3VzdG9tVmlld3M6IE1hcDxzdHJpbmcsIEN1c3RvbU1hcmtkb3duVmlldz47XG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IFBsdWdpbiwgc2V0dGluZ3M6IFRhYlRpdGxlU2V0dGluZ3MpIHtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICAgICAgdGhpcy5jdXN0b21WaWV3cyA9IG5ldyBNYXAoKTtcbiAgICAgICAgTG9nZ2VyLmluZm8oJ1RhYlRpdGxlTWFuYWdlciBpbml0aWFsaXplZCcpO1xuICAgIH1cblxuICAgIHVwZGF0ZUFsbFRhYnMoKSB7XG4gICAgICAgIGNvbnN0IGxlYXZlcyA9IHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKCdtYXJrZG93bicpO1xuICAgICAgICBmb3IgKGNvbnN0IGxlYWYgb2YgbGVhdmVzKSB7XG4gICAgICAgICAgICBpZiAobGVhZi52aWV3IGluc3RhbmNlb2YgTWFya2Rvd25WaWV3KSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVUYWIobGVhZik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyB1cGRhdGVUYWJGb3JGaWxlKGZpbGU6IFRGaWxlKSB7XG4gICAgICAgIGNvbnN0IGxlYXZlcyA9IHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKCdtYXJrZG93bicpO1xuICAgICAgICBmb3IgKGNvbnN0IGxlYWYgb2YgbGVhdmVzKSB7XG4gICAgICAgICAgICBpZiAobGVhZi52aWV3IGluc3RhbmNlb2YgTWFya2Rvd25WaWV3ICYmIGxlYWYudmlldy5maWxlPy5wYXRoID09PSBmaWxlLnBhdGgpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZVRhYihsZWFmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG5cbiAgICBhc3luYyBnZXRQcmVmZXJyZWRUaXRsZVdpdGhTb3VyY2UoZmlsZTogVEZpbGUpOiBQcm9taXNlPHsgZGlzcGxheVRpdGxlOiBzdHJpbmcgfCBudWxsOyBzb3VyY2U6IHN0cmluZyB9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBtZXRhZGF0YSA9IGF3YWl0IHRoaXMud2FpdEZvck1ldGFkYXRhKGZpbGUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBWZXJpZmljYXIgc2kgdGllbmUgYWxpYXNlc1xuICAgICAgICAgICAgaWYgKG1ldGFkYXRhPy5hbGlhc2VzKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2FzbyBlc3BlY2lhbDogMyBvIG1cdTAwRTFzIGFsaWFzZXMgLSBtb3N0cmFyIGFsaWFzZXNbMl0gLyBhbGlhc2VzWzBdXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWV0YWRhdGEuYWxpYXNlcykgJiYgbWV0YWRhdGEuYWxpYXNlcy5sZW5ndGggPj0gMykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlUaXRsZTogYCR7bWV0YWRhdGEuYWxpYXNlc1syXX0gLyAke21ldGFkYXRhLmFsaWFzZXNbMF19YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ2FsaWFzZXMtc3BlY2lhbCdcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQ29tcG9ydGFtaWVudG8gbm9ybWFsIHBhcmEgbWVub3MgZGUgMyBhbGlhc2VzXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShtZXRhZGF0YS5hbGlhc2VzKSAmJiBtZXRhZGF0YS5hbGlhc2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5VGl0bGU6IG1ldGFkYXRhLmFsaWFzZXNbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICdhbGlhc2VzJ1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgbWV0YWRhdGEuYWxpYXNlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5VGl0bGU6IG1ldGFkYXRhLmFsaWFzZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICdhbGlhc2VzJ1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gU2kgbm8gaGF5IGFsaWFzLCBpbnRlbnRhIG9idGVuZXIgZWwgdFx1MDBFRHR1bG9cbiAgICAgICAgICAgIGlmIChtZXRhZGF0YT8udGl0dWxvKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlUaXRsZTogbWV0YWRhdGEudGl0dWxvLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICd0aXR1bG8nXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gU2kgbm8gaGF5IGFsaWFzIG5pIHRcdTAwRUR0dWxvLCB1c2Egc29sbyBlbCBub21icmUgZGVsIGFyY2hpdm9cbiAgICAgICAgICAgIHJldHVybiB7IFxuICAgICAgICAgICAgICAgIGRpc3BsYXlUaXRsZTogbnVsbCxcbiAgICAgICAgICAgICAgICBzb3VyY2U6ICdiYXNlbmFtZSdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBMb2dnZXIuZXJyb3IoYEVycm9yIGdldHRpbmcgdGl0bGUgZm9yICR7ZmlsZS5wYXRofTpgLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAgICAgICBkaXNwbGF5VGl0bGU6IG51bGwsXG4gICAgICAgICAgICAgICAgc291cmNlOiAnZXJyb3InXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyB3YWl0Rm9yTWV0YWRhdGEoZmlsZTogVEZpbGUpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1heEF0dGVtcHRzID0gMTA7XG4gICAgICAgICAgICBsZXQgYXR0ZW1wdHMgPSAwO1xuXG4gICAgICAgICAgICBjb25zdCBjaGVja01ldGFkYXRhID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5wbHVnaW4uYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuICAgICAgICAgICAgICAgIGlmIChjYWNoZT8uZnJvbnRtYXR0ZXIgfHwgYXR0ZW1wdHMgPj0gbWF4QXR0ZW1wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShjYWNoZT8uZnJvbnRtYXR0ZXIgfHwge30pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGF0dGVtcHRzKys7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoY2hlY2tNZXRhZGF0YSwgMTAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjaGVja01ldGFkYXRhKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gIC8vIE1cdTAwRTl0b2RvIHBhcmEgYXBsaWNhciBzY3JvbGwgaG9yaXpvbnRhbCBhIHVuIGVsZW1lbnRvIGRlIHRcdTAwRUR0dWxvIGRlIHBlc3RhXHUwMEYxYVxuICBwcml2YXRlIGFwcGx5SG9yaXpvbnRhbFNjcm9sbFRvVGFiKHRhYkVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgLy8gQXNlZ3VyYXIgcXVlIHNvbG8gYXBsaWNhbW9zIHVuYSB2ZXpcbiAgICBpZiAodGFiRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2Nyb2xsLWVuYWJsZWQnKSA9PT0gJ3RydWUnKSByZXR1cm47XG4gICAgXG4gICAgLy8gQWxtYWNlbmFyIGVzdGlsb3Mgb3JpZ2luYWxlcyBwYXJhIHJlc3RhdXJhcmxvcyBhbCBkZXNhY3RpdmFyXG4gICAgY29uc3Qgb3JpZ2luYWxTdHlsZXMgPSB7XG4gICAgICAgIG92ZXJmbG93OiB0YWJFbGVtZW50LnN0eWxlLm92ZXJmbG93LFxuICAgICAgICB0ZXh0T3ZlcmZsb3c6IHRhYkVsZW1lbnQuc3R5bGUudGV4dE92ZXJmbG93LFxuICAgICAgICB3aGl0ZVNwYWNlOiB0YWJFbGVtZW50LnN0eWxlLndoaXRlU3BhY2UsXG4gICAgICAgIG1heFdpZHRoOiB0YWJFbGVtZW50LnN0eWxlLm1heFdpZHRoLFxuICAgICAgICB0cmFuc2l0aW9uOiB0YWJFbGVtZW50LnN0eWxlLnRyYW5zaXRpb25cbiAgICB9O1xuICAgIFxuICAgIC8vIEVzdGFibGVjZXIgZXN0aWxvcyBiYXNlXG4gICAgdGFiRWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG4gICAgdGFiRWxlbWVudC5zdHlsZS50ZXh0T3ZlcmZsb3cgPSBcImVsbGlwc2lzXCI7XG4gICAgdGFiRWxlbWVudC5zdHlsZS53aGl0ZVNwYWNlID0gXCJub3dyYXBcIjtcbiAgICB0YWJFbGVtZW50LnN0eWxlLm1heFdpZHRoID0gXCIxNTBweFwiOyAvLyBBanVzdGFibGUgc2VnXHUwMEZBbiBuZWNlc2lkYWRlc1xuICAgIHRhYkVsZW1lbnQuc3R5bGUudHJhbnNpdGlvbiA9IFwibWF4LXdpZHRoIDAuM3MgZWFzZS1pbi1vdXRcIjtcbiAgICBcbiAgICAvLyBDcmVhciBoYW5kbGVyIHBhcmEgbW91c2VlbnRlclxuICAgIGNvbnN0IG1vdXNlRW50ZXJIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBmdWxsV2lkdGggPSB0YWJFbGVtZW50LnNjcm9sbFdpZHRoO1xuICAgICAgICB0YWJFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gXCJhdXRvXCI7XG4gICAgICAgIHRhYkVsZW1lbnQuc3R5bGUudGV4dE92ZXJmbG93ID0gXCJjbGlwXCI7XG4gICAgICAgIHRhYkVsZW1lbnQuc3R5bGUubWF4V2lkdGggPSBNYXRoLm1pbihmdWxsV2lkdGgsIDMwMCkgKyBcInB4XCI7IC8vIExpbWl0YXIgZXhwYW5zaVx1MDBGM25cbiAgICB9O1xuICAgIFxuICAgIC8vIENyZWFyIGhhbmRsZXIgcGFyYSBtb3VzZWxlYXZlXG4gICAgY29uc3QgbW91c2VMZWF2ZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgIHRhYkVsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuICAgICAgICB0YWJFbGVtZW50LnN0eWxlLnRleHRPdmVyZmxvdyA9IFwiZWxsaXBzaXNcIjtcbiAgICAgICAgdGFiRWxlbWVudC5zdHlsZS5tYXhXaWR0aCA9IFwiMTUwcHhcIjtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7IHRhYkVsZW1lbnQuc2Nyb2xsTGVmdCA9IDA7IH0sIDMwMCk7IC8vIFJldHJhc2FyIHBhcmEgYW5pbWFjaVx1MDBGM25cbiAgICB9O1xuICAgIFxuICAgIC8vIEFzaWduYXIgZXZlbnQgbGlzdGVuZXJzXG4gICAgdGFiRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCBtb3VzZUVudGVySGFuZGxlcik7XG4gICAgdGFiRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCBtb3VzZUxlYXZlSGFuZGxlcik7XG4gICAgXG4gICAgLy8gTWFyY2FyIGVsZW1lbnRvIGNvbW8gY29uZmlndXJhZG9cbiAgICB0YWJFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1zY3JvbGwtZW5hYmxlZCcsICd0cnVlJyk7XG4gICAgXG4gICAgLy8gQWxtYWNlbmFyIHJlZmVyZW5jaWFzIHBhcmEgbGltcGllemFcbiAgICBpZiAoIXRoaXMuc2Nyb2xsRW5hYmxlZEVsZW1lbnRzKSB0aGlzLnNjcm9sbEVuYWJsZWRFbGVtZW50cyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLnNjcm9sbEVuYWJsZWRFbGVtZW50cy5zZXQodGFiRWxlbWVudCwge1xuICAgICAgICBtb3VzZUVudGVySGFuZGxlcixcbiAgICAgICAgbW91c2VMZWF2ZUhhbmRsZXIsXG4gICAgICAgIG9yaWdpbmFsU3R5bGVzXG4gICAgfSk7XG59XG5cbi8vIE1cdTAwRTl0b2RvIHBhcmEgbGltcGlhciBlbCBzY3JvbGwgZGUgdW4gZWxlbWVudG9cbnByaXZhdGUgcmVtb3ZlSG9yaXpvbnRhbFNjcm9sbEZyb21UYWIodGFiRWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICBpZiAoIXRhYkVsZW1lbnQgfHwgIXRoaXMuc2Nyb2xsRW5hYmxlZEVsZW1lbnRzKSByZXR1cm47XG4gICAgXG4gICAgY29uc3QgaGFuZGxlcnMgPSB0aGlzLnNjcm9sbEVuYWJsZWRFbGVtZW50cy5nZXQodGFiRWxlbWVudCk7XG4gICAgaWYgKCFoYW5kbGVycykgcmV0dXJuO1xuICAgIFxuICAgIC8vIEVsaW1pbmFyIGV2ZW50IGxpc3RlbmVyc1xuICAgIHRhYkVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgaGFuZGxlcnMubW91c2VFbnRlckhhbmRsZXIpO1xuICAgIHRhYkVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgaGFuZGxlcnMubW91c2VMZWF2ZUhhbmRsZXIpO1xuICAgIFxuICAgIC8vIFJlc3RhdXJhciBlc3RpbG9zIG9yaWdpbmFsZXNcbiAgICBPYmplY3QuYXNzaWduKHRhYkVsZW1lbnQuc3R5bGUsIGhhbmRsZXJzLm9yaWdpbmFsU3R5bGVzKTtcbiAgICBcbiAgICAvLyBMaW1waWFyIG1hcmNhXG4gICAgdGFiRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc2Nyb2xsLWVuYWJsZWQnKTtcbiAgICBcbiAgICAvLyBFbGltaW5hciBkZSBsYSBjb2xlY2NpXHUwMEYzblxuICAgIHRoaXMuc2Nyb2xsRW5hYmxlZEVsZW1lbnRzLmRlbGV0ZSh0YWJFbGVtZW50KTtcbn1cblxuLy8gU29icmVzY3JpdHVyYSBkZWwgbVx1MDBFOXRvZG8gdXBkYXRlVGFiXG5hc3luYyB1cGRhdGVUYWIobGVhZjogV29ya3NwYWNlTGVhZikge1xuICAgIGlmICghKGxlYWYudmlldyBpbnN0YW5jZW9mIE1hcmtkb3duVmlldykgfHwgIWxlYWYudmlldy5maWxlKSByZXR1cm47XG5cbiAgICBjb25zdCB7IGRpc3BsYXlUaXRsZSwgc291cmNlIH0gPSBhd2FpdCB0aGlzLmdldFByZWZlcnJlZFRpdGxlV2l0aFNvdXJjZShsZWFmLnZpZXcuZmlsZSk7XG4gICAgaWYgKGRpc3BsYXlUaXRsZSkge1xuICAgICAgICAvLyBEZXRlcm1pbmFyIGVsIGZvcm1hdG8gZGVsIHRcdTAwRUR0dWxvIHNlZ1x1MDBGQW4gbGEgbFx1MDBGM2dpY2EgZXhpc3RlbnRlXG4gICAgICAgIGxldCBmb3JtYXR0ZWRUaXRsZTtcbiAgICAgICAgaWYgKHNvdXJjZSA9PT0gJ2FsaWFzZXMtc3BlY2lhbCcgfHwgc291cmNlID09PSAnYWxpYXNlcy10d28nKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRUaXRsZSA9IGRpc3BsYXlUaXRsZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFRpdGxlID0gYCR7bGVhZi52aWV3LmZpbGUuYmFzZW5hbWV9IC8gJHtkaXNwbGF5VGl0bGV9YDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gRXN0YWJsZWNlciBlbCB0XHUwMEVEdHVsb1xuICAgICAgICBsZWFmLnZpZXcudGl0bGVFbC5pbm5lclRleHQgPSBmb3JtYXR0ZWRUaXRsZTtcbiAgICAgICAgXG4gICAgICAgIGlmIChsZWFmLnRhYkhlYWRlcklubmVyVGl0bGVFbCkge1xuICAgICAgICAgICAgbGVhZi50YWJIZWFkZXJJbm5lclRpdGxlRWwuaW5uZXJUZXh0ID0gZm9ybWF0dGVkVGl0bGU7XG4gICAgICAgICAgICAvLyBBcGxpY2FyIGNvbXBvcnRhbWllbnRvIGRlIHNjcm9sbCBob3Jpem9udGFsXG4gICAgICAgICAgICB0aGlzLmFwcGx5SG9yaXpvbnRhbFNjcm9sbFRvVGFiKGxlYWYudGFiSGVhZGVySW5uZXJUaXRsZUVsKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gTVx1MDBFOXRvZG8gcGFyYSBsaW1waWFyIHJlY3Vyc29zIGFsIGRlc2FjdGl2YXJcbmNsZWFudXBTY3JvbGxIYW5kbGVycygpIHtcbiAgICBpZiAoIXRoaXMuc2Nyb2xsRW5hYmxlZEVsZW1lbnRzKSByZXR1cm47XG4gICAgXG4gICAgdGhpcy5zY3JvbGxFbmFibGVkRWxlbWVudHMuZm9yRWFjaCgoaGFuZGxlcnMsIGVsZW1lbnQpID0+IHtcbiAgICAgICAgdGhpcy5yZW1vdmVIb3Jpem9udGFsU2Nyb2xsRnJvbVRhYihlbGVtZW50KTtcbiAgICB9KTtcbiAgICBcbiAgICB0aGlzLnNjcm9sbEVuYWJsZWRFbGVtZW50cy5jbGVhcigpO1xufVxuXG4vLyBTb2JyZXNjcmliaXIgcmVzdG9yZURlZmF1bHRUaXRsZXMgcGFyYSBpbmNsdWlyIGxhIGxpbXBpZXphXG5yZXN0b3JlRGVmYXVsdFRpdGxlcygpIHtcbiAgICAvLyBMaW1waWFyIG1hbmVqYWRvcmVzIGRlIHNjcm9sbFxuICAgIHRoaXMuY2xlYW51cFNjcm9sbEhhbmRsZXJzKCk7XG4gICAgXG4gICAgLy8gUmVzdGF1cmFyIHRcdTAwRUR0dWxvcyBjb21vIGFudGVzXG4gICAgY29uc3QgbGVhdmVzID0gdGhpcy5wbHVnaW4uYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoJ21hcmtkb3duJyk7XG4gICAgZm9yIChjb25zdCBsZWFmIG9mIGxlYXZlcykge1xuICAgICAgICBpZiAobGVhZi52aWV3IGluc3RhbmNlb2YgTWFya2Rvd25WaWV3ICYmIGxlYWYudmlldy5maWxlKSB7XG4gICAgICAgICAgICBsZWFmLnZpZXcudGl0bGVFbC5pbm5lclRleHQgPSBsZWFmLnZpZXcuZmlsZS5iYXNlbmFtZTtcbiAgICAgICAgICAgIGlmIChsZWFmLnRhYkhlYWRlcklubmVyVGl0bGVFbCkge1xuICAgICAgICAgICAgICAgIGxlYWYudGFiSGVhZGVySW5uZXJUaXRsZUVsLmlubmVyVGV4dCA9IGxlYWYudmlldy5maWxlLmJhc2VuYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuICAgIFxufSIsICIvLyBzcmMvbW9kdWxlcy9tb2R1bG9UYWJUaXRsZS92aWV3cy9DdXN0b21NYXJrZG93blZpZXcudHNcbmltcG9ydCB7IE1hcmtkb3duVmlldywgV29ya3NwYWNlTGVhZiB9IGZyb20gJ29ic2lkaWFuJztcblxuZXhwb3J0IGNsYXNzIEN1c3RvbU1hcmtkb3duVmlldyBleHRlbmRzIE1hcmtkb3duVmlldyB7XG4gICAgcHJpdmF0ZSBjdXN0b21UaXRsZTogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cbiAgICBnZXREaXNwbGF5VGV4dCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXN0b21UaXRsZSB8fCBzdXBlci5nZXREaXNwbGF5VGV4dCgpO1xuICAgIH1cblxuICAgIHNldEN1c3RvbVRpdGxlKHRpdGxlOiBzdHJpbmcgfCBudWxsKSB7XG4gICAgICAgIHRoaXMuY3VzdG9tVGl0bGUgPSB0aXRsZTtcbiAgICAgICAgdGhpcy5sZWFmLnRhYkhlYWRlcklubmVyVGl0bGVFbC50ZXh0Q29udGVudCA9IHRpdGxlIHx8IHRoaXMuZmlsZT8uYmFzZW5hbWUgfHwgJyc7XG4gICAgfVxufSIsICIvLyBzcmMvbW9kdWxlcy9tb2R1bG9UYWJUaXRsZS91dGlscy9sb2dnZXIudHNcbmV4cG9ydCBjbGFzcyBMb2dnZXIge1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFBSRUZJWCA9ICdcdUQ4M0NcdURGRjdcdUZFMEYgW1RhYlRpdGxlXSc7XG4gICAgXG4gICAgc3RhdGljIGRlYnVnKG1lc3NhZ2U6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhgJHt0aGlzLlBSRUZJWH0gJHttZXNzYWdlfWAsIC4uLmFyZ3MpO1xuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgaW5mbyhtZXNzYWdlOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgICAgIGNvbnNvbGUuaW5mbyhgJHt0aGlzLlBSRUZJWH0gJHttZXNzYWdlfWAsIC4uLmFyZ3MpO1xuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgZXJyb3IobWVzc2FnZTogc3RyaW5nLCBlcnJvcj86IGFueSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGAke3RoaXMuUFJFRklYfSAke21lc3NhZ2V9YCwgZXJyb3IgfHwgJycpO1xuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgd2FybihtZXNzYWdlOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgJHt0aGlzLlBSRUZJWH0gJHttZXNzYWdlfWAsIC4uLmFyZ3MpO1xuICAgIH1cbn0iLCAiLy8gc3JjL21vZHVsZXMvbW9kdWxvVGFiVGl0bGUvZGVmYXVsdHMvZGVmYXVsdFNldHRpbmdzLnRzXG5pbXBvcnQgeyBUYWJUaXRsZVNldHRpbmdzIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9UYWJUaXRsZVNldHRpbmdzJztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfVEFCX1NFVFRJTkdTOiBUYWJUaXRsZVNldHRpbmdzID0ge1xuICAgIHRpdGxlRGlzcGxheU1vZGU6ICdmaWxlbmFtZSdcbn07IiwgIi8vIHNyYy9tb2R1bGVzL3Rhc2tNYW5hZ2VyL2luZGV4LnRzXG5cbmltcG9ydCB7IFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IHJlZ2lzdGVyVGFza01hbmFnZXJDb21tYW5kcywgZGVhY3RpdmF0ZVRhc2tNYW5hZ2VyQ29tbWFuZHMgfSBmcm9tICcuL2NvbW1hbmRzJztcblxuZXhwb3J0IGNsYXNzIE1vZHVsb1Rhc2tNYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBsdWdpbjogUGx1Z2luKSB7fVxuXG4gICAgYWN0aXZhdGUoKSB7XG4gICAgICAgIHJlZ2lzdGVyVGFza01hbmFnZXJDb21tYW5kcyh0aGlzLnBsdWdpbik7XG4gICAgfVxuXG4gICAgZGVhY3RpdmF0ZSgpIHtcbiAgICAgICAgZGVhY3RpdmF0ZVRhc2tNYW5hZ2VyQ29tbWFuZHModGhpcy5wbHVnaW4pO1xuICAgIH1cbn0iLCAiLy8gc3JjL21vZHVsZXMvdGFza01hbmFnZXIvY29tbWFuZHMudHNcblxuaW1wb3J0IHsgUGx1Z2luLCBOb3RpY2UsIE1vZGFsLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IE15UGx1Z2luIGZyb20gJy4uLy4uL21haW4nO1xuXG5jbGFzcyBUYXNrRGF5c01vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIHByaXZhdGUgZGlhczogbnVtYmVyID0gNztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcGx1Z2luSW5zdGFuY2U6IE15UGx1Z2luKSB7XG4gICAgICAgIHN1cGVyKHBsdWdpbkluc3RhbmNlLmFwcCk7XG4gICAgfVxuXG4gICAgb25PcGVuKCkge1xuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcblxuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnTW9zdHJhciB0YXJlYXMgcHJcdTAwRjN4aW1hcycgfSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ05cdTAwRkFtZXJvIGRlIGRcdTAwRURhcycpXG4gICAgICAgICAgICAuc2V0RGVzYygnTW9zdHJhciB0YXJlYXMgcGFyYSBsb3MgcHJcdTAwRjN4aW1vcyBYIGRcdTAwRURhcycpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUoJzcnKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlhcyA9IHBhcnNlSW50KHZhbHVlKSB8fCA3O1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXG4gICAgICAgICAgICAuYWRkQnV0dG9uKGJ0biA9PiBidG5cbiAgICAgICAgICAgICAgICAuc2V0QnV0dG9uVGV4dCgnTW9zdHJhciB0YXJlYXMnKVxuICAgICAgICAgICAgICAgIC5zZXRDdGEoKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wbHVnaW5JbnN0YW5jZS50YXJlYXNBUEkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luSW5zdGFuY2UudGFyZWFzQVBJLm1vc3RyYXJUYXJlYXNQcm94aW1hcyh0aGlzLmRpYXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIG9uQ2xvc2UoKSB7XG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgICAgICBjb250ZW50RWwuZW1wdHkoKTtcbiAgICB9XG59XG5cbi8vIEFcdTAwRjFhZGlyIG51ZXZhIGNsYXNlIG1vZGFsIHBhcmEgY29uZmlndXJhciBkXHUwMEVEYXMgZnV0dXJvc1xuY2xhc3MgRnV0dXJlVGFza3NNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgICBwcml2YXRlIGRpYXM6IG51bWJlciA9IDc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwbHVnaW5JbnN0YW5jZTogTXlQbHVnaW4sXG4gICAgICAgIHByaXZhdGUgZGVmYXVsdERheXM6IG51bWJlciA9IDdcbiAgICApIHtcbiAgICAgICAgc3VwZXIocGx1Z2luSW5zdGFuY2UuYXBwKTtcbiAgICAgICAgdGhpcy5kaWFzID0gZGVmYXVsdERheXM7XG4gICAgfVxuXG4gICAgb25PcGVuKCkge1xuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcblxuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnTW9zdHJhciB0YXJlYXMgZnV0dXJhcycgfSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ05cdTAwRkFtZXJvIGRlIGRcdTAwRURhcyBoYWNpYSBhZGVsYW50ZScpXG4gICAgICAgICAgICAuc2V0RGVzYygnTW9zdHJhciB0YXJlYXMgcHJvZ3JhbWFkYXMgcGFyYSBsb3MgcHJcdTAwRjN4aW1vcyBYIGRcdTAwRURhcycpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5kZWZhdWx0RGF5cy50b1N0cmluZygpKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlhcyA9IHBhcnNlSW50KHZhbHVlKSB8fCA3O1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXG4gICAgICAgICAgICAuYWRkQnV0dG9uKGJ0biA9PiBidG5cbiAgICAgICAgICAgICAgICAuc2V0QnV0dG9uVGV4dCgnTW9zdHJhciB0YXJlYXMnKVxuICAgICAgICAgICAgICAgIC5zZXRDdGEoKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wbHVnaW5JbnN0YW5jZS50YXJlYXNBUEkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luSW5zdGFuY2UudGFyZWFzQVBJLm1vc3RyYXJUYXJlYXNGdXR1cmFzKHRoaXMuZGlhcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgb25DbG9zZSgpIHtcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xuICAgIH1cbn1cblxuY2xhc3MgU2NoZWR1bGVkVGFza0RheXNNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgICBwcml2YXRlIGRpYXM6IG51bWJlciA9IDc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwbHVnaW5JbnN0YW5jZTogTXlQbHVnaW4sIFxuICAgICAgICBwcml2YXRlIGRlZmF1bHREYXlzOiBudW1iZXIgPSA3XG4gICAgKSB7XG4gICAgICAgIHN1cGVyKHBsdWdpbkluc3RhbmNlLmFwcCk7XG4gICAgICAgIHRoaXMuZGlhcyA9IGRlZmF1bHREYXlzO1xuICAgIH1cblxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG5cbiAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ01vc3RyYXIgdGFyZWFzIHByb2dyYW1hZGFzIHByXHUwMEYzeGltYXMnIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdOXHUwMEZBbWVybyBkZSBkXHUwMEVEYXMnKVxuICAgICAgICAgICAgLnNldERlc2MoJ01vc3RyYXIgdGFyZWFzIHByb2dyYW1hZGFzIHBhcmEgbG9zIHByXHUwMEYzeGltb3MgWCBkXHUwMEVEYXMnKVxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMuZGVmYXVsdERheXMudG9TdHJpbmcoKSlcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UodmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpYXMgPSBwYXJzZUludCh2YWx1ZSkgfHwgNztcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxuICAgICAgICAgICAgLmFkZEJ1dHRvbihidG4gPT4gYnRuXG4gICAgICAgICAgICAgICAgLnNldEJ1dHRvblRleHQoJ01vc3RyYXIgdGFyZWFzJylcbiAgICAgICAgICAgICAgICAuc2V0Q3RhKClcbiAgICAgICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGx1Z2luSW5zdGFuY2UudGFyZWFzQVBJKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbkluc3RhbmNlLnRhcmVhc0FQSS5tb3N0cmFyVGFyZWFzU2NoZWR1bGVkUHJveGltYXModGhpcy5kaWFzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBvbkNsb3NlKCkge1xuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJUYXNrTWFuYWdlckNvbW1hbmRzKHBsdWdpbjogUGx1Z2luKTogdm9pZCB7XG4gICAgY29uc3QgbWFuYWdlbWVudFBsdWdpbiA9IHBsdWdpbiBhcyBNeVBsdWdpbjtcbiAgICBjb25zdCBjb21tYW5kSWRzOiBzdHJpbmdbXSA9IFtdO1xuXG5cbiAgICAvLyBDb21hbmRvIHBhcmEgbW9zdHJhciB0YXJlYXMgdmVuY2lkYXNcbiAgICBjb25zdCB0YXJlYXNWZW5jaWRhc0NvbW1hbmQgPSBwbHVnaW4uYWRkQ29tbWFuZCh7XG4gICAgICAgIGlkOiBcIm1vc3RyYXItdGFyZWFzLXZlbmNpZGFzXCIsXG4gICAgICAgIG5hbWU6IFwiTW9zdHJhciBUYXJlYXMgVmVuY2lkYXNcIixcbiAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGlmIChtYW5hZ2VtZW50UGx1Z2luLnRhcmVhc0FQSSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IG1hbmFnZW1lbnRQbHVnaW4udGFyZWFzQVBJLm1vc3RyYXJUYXJlYXNWZW5jaWRhcygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiRWwgbVx1MDBGM2R1bG8gZGUgdGFyZWFzIG5vIGVzdFx1MDBFMSBkaXNwb25pYmxlLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGNvbW1hbmRJZHMucHVzaCh0YXJlYXNWZW5jaWRhc0NvbW1hbmQuaWQpO1xuXG4gICAgLy8gQ29tYW5kbyBwYXJhIG1vc3RyYXIgdGFyZWFzIHByXHUwMEYzeGltYXNcbiAgICBjb25zdCB0YXJlYXNQcm94aW1hc0NvbW1hbmQgPSBwbHVnaW4uYWRkQ29tbWFuZCh7XG4gICAgICAgIGlkOiBcIm1vc3RyYXItdGFyZWFzLXByb3hpbWFzXCIsXG4gICAgICAgIG5hbWU6IFwiTW9zdHJhciBUYXJlYXMgUHJcdTAwRjN4aW1hc1wiLFxuICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKG1hbmFnZW1lbnRQbHVnaW4udGFyZWFzQVBJKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgbWFuYWdlbWVudFBsdWdpbi50YXJlYXNBUEkubW9zdHJhclRhcmVhc1Byb3hpbWFzKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJFbCBtXHUwMEYzZHVsbyBkZSB0YXJlYXMgbm8gZXN0XHUwMEUxIGRpc3BvbmlibGUuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgY29tbWFuZElkcy5wdXNoKHRhcmVhc1Byb3hpbWFzQ29tbWFuZC5pZCk7XG5cbiAgICAvLyBDb21hbmRvIHBhcmEgbW9zdHJhciB0YXJlYXMgcHJcdTAwRjN4aW1hcyBjb24gZFx1MDBFRGFzIHBlcnNvbmFsaXphZG9zXG4gICAgY29uc3QgdGFyZWFzUHJveGltYXNDdXN0b21Db21tYW5kID0gcGx1Z2luLmFkZENvbW1hbmQoe1xuICAgICAgICBpZDogXCJtb3N0cmFyLXRhcmVhcy1wcm94aW1hcy1jdXN0b21cIixcbiAgICAgICAgbmFtZTogXCJNb3N0cmFyIFRhcmVhcyBQclx1MDBGM3hpbWFzIChFc3BlY2lmaWNhciBkXHUwMEVEYXMpXCIsXG4gICAgICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBpZiAobWFuYWdlbWVudFBsdWdpbi50YXJlYXNBUEkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBUYXNrRGF5c01vZGFsKG1hbmFnZW1lbnRQbHVnaW4pO1xuICAgICAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIkVsIG1cdTAwRjNkdWxvIGRlIHRhcmVhcyBubyBlc3RcdTAwRTEgZGlzcG9uaWJsZS5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBjb21tYW5kSWRzLnB1c2godGFyZWFzUHJveGltYXNDdXN0b21Db21tYW5kLmlkKTtcblxuICAgIC8vIENvbWFuZG8gcGFyYSBtb3N0cmFyIHRhcmVhcyBkZSBob3lcbiAgICBjb25zdCB0YXJlYXNIb3lDb21tYW5kID0gcGx1Z2luLmFkZENvbW1hbmQoe1xuICAgICAgICBpZDogXCJtb3N0cmFyLXRhcmVhcy1ob3lcIixcbiAgICAgICAgbmFtZTogXCJNb3N0cmFyIFRhcmVhcyBwYXJhIEhveVwiLFxuICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKG1hbmFnZW1lbnRQbHVnaW4udGFyZWFzQVBJKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgbWFuYWdlbWVudFBsdWdpbi50YXJlYXNBUEkubW9zdHJhclRhcmVhc0hveSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiRWwgbVx1MDBGM2R1bG8gZGUgdGFyZWFzIG5vIGVzdFx1MDBFMSBkaXNwb25pYmxlLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGNvbW1hbmRJZHMucHVzaCh0YXJlYXNIb3lDb21tYW5kLmlkKTtcblxuICAgIC8vIENvbWFuZG8gcGFyYSBtb3N0cmFyIHRhcmVhcyBjb24gaW5pY2lvIHZlbmNpZG9cbiAgICBjb25zdCB0YXJlYXNTdGFydFZlbmNpZGFzQ29tbWFuZCA9IHBsdWdpbi5hZGRDb21tYW5kKHtcbiAgICAgICAgaWQ6IFwibW9zdHJhci10YXJlYXMtc3RhcnQtdmVuY2lkYXNcIixcbiAgICAgICAgbmFtZTogXCJNb3N0cmFyIFRhcmVhcyBQZW5kaWVudGVzIGRlIEluaWNpYXJcIixcbiAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGlmIChtYW5hZ2VtZW50UGx1Z2luLnRhcmVhc0FQSSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IG1hbmFnZW1lbnRQbHVnaW4udGFyZWFzQVBJLm1vc3RyYXJUYXJlYXNTdGFydFZlbmNpZGFzKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJFbCBtXHUwMEYzZHVsbyBkZSB0YXJlYXMgbm8gZXN0XHUwMEUxIGRpc3BvbmlibGUuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgY29tbWFuZElkcy5wdXNoKHRhcmVhc1N0YXJ0VmVuY2lkYXNDb21tYW5kLmlkKTtcblxuICAgIC8vIENvbWFuZG8gcGFyYSBtb3N0cmFyIHRhcmVhcyBwb3IgaW5pY2lhclxuICAgIGNvbnN0IHRhcmVhc1N0YXJ0UHJveGltYXNDb21tYW5kID0gcGx1Z2luLmFkZENvbW1hbmQoe1xuICAgICAgICBpZDogXCJtb3N0cmFyLXRhcmVhcy1zdGFydC1wcm94aW1hc1wiLFxuICAgICAgICBuYW1lOiBcIk1vc3RyYXIgVGFyZWFzIHBvciBJbmljaWFyIChWZW5jaWRhcyB5IFByXHUwMEYzeGltYXMpXCIsXG4gICAgICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBpZiAobWFuYWdlbWVudFBsdWdpbi50YXJlYXNBUEkpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBtYW5hZ2VtZW50UGx1Z2luLnRhcmVhc0FQSS5tb3N0cmFyVGFyZWFzU3RhcnRQcm94aW1hcygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiRWwgbVx1MDBGM2R1bG8gZGUgdGFyZWFzIG5vIGVzdFx1MDBFMSBkaXNwb25pYmxlLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGNvbW1hbmRJZHMucHVzaCh0YXJlYXNTdGFydFByb3hpbWFzQ29tbWFuZC5pZCk7XG5cbiAgICAgLy8gQVx1MDBGMWFkaXIgbnVldm8gY29tYW5kbyBwYXJhIHRhcmVhcyBmdXR1cmFzXG4gICAgIGNvbnN0IHRhcmVhc0Z1dHVyYXNDb21tYW5kID0gcGx1Z2luLmFkZENvbW1hbmQoe1xuICAgICAgICBpZDogXCJtb3N0cmFyLXRhcmVhcy1mdXR1cmFzXCIsXG4gICAgICAgIG5hbWU6IFwiTW9zdHJhciBUYXJlYXMgRnV0dXJhcyBQcm9ncmFtYWRhc1wiLFxuICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKG1hbmFnZW1lbnRQbHVnaW4udGFyZWFzQVBJKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgRnV0dXJlVGFza3NNb2RhbChtYW5hZ2VtZW50UGx1Z2luKTtcbiAgICAgICAgICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJFbCBtXHUwMEYzZHVsbyBkZSB0YXJlYXMgbm8gZXN0XHUwMEUxIGRpc3BvbmlibGUuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgY29tbWFuZElkcy5wdXNoKHRhcmVhc0Z1dHVyYXNDb21tYW5kLmlkKTtcblxuICAgICAgICAvLyBBXHUwMEYxYWRpciBudWV2byBjb21hbmRvIHBhcmEgdGFyZWFzIGVuIGVqZWN1Y2lcdTAwRjNuXG4gICAgICAgIGNvbnN0IHRhcmVhc0VuRWplY3VjaW9uQ29tbWFuZCA9IHBsdWdpbi5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiBcIm1vc3RyYXItdGFyZWFzLWVuLWVqZWN1Y2lvblwiLFxuICAgICAgICAgICAgbmFtZTogXCJNb3N0cmFyIFRhcmVhcyBlbiBFamVjdWNpXHUwMEYzblwiLFxuICAgICAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobWFuYWdlbWVudFBsdWdpbi50YXJlYXNBUEkpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgbWFuYWdlbWVudFBsdWdpbi50YXJlYXNBUEkubW9zdHJhclRhcmVhc0VuRWplY3VjaW9uKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIkVsIG1cdTAwRjNkdWxvIGRlIHRhcmVhcyBubyBlc3RcdTAwRTEgZGlzcG9uaWJsZS5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29tbWFuZElkcy5wdXNoKHRhcmVhc0VuRWplY3VjaW9uQ29tbWFuZC5pZCk7XG5cbiAgICAgICAgLy8gQ29tYW5kbyBwYXJhIHRhcmVhcyBzY2hlZHVsZWQgdmVuY2lkYXNcbiAgICBjb25zdCB0YXJlYXNTY2hlZHVsZWRWZW5jaWRhc0NvbW1hbmQgPSBwbHVnaW4uYWRkQ29tbWFuZCh7XG4gICAgICAgIGlkOiBcIm1vc3RyYXItdGFyZWFzLXNjaGVkdWxlZC12ZW5jaWRhc1wiLFxuICAgICAgICBuYW1lOiBcIk1vc3RyYXIgVGFyZWFzIFNjaGVkdWxlZCBWZW5jaWRhc1wiLFxuICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKG1hbmFnZW1lbnRQbHVnaW4udGFyZWFzQVBJKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgbWFuYWdlbWVudFBsdWdpbi50YXJlYXNBUEkubW9zdHJhclRhcmVhc1NjaGVkdWxlZFZlbmNpZGFzKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJFbCBtXHUwMEYzZHVsbyBkZSB0YXJlYXMgbm8gZXN0XHUwMEUxIGRpc3BvbmlibGUuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgY29tbWFuZElkcy5wdXNoKHRhcmVhc1NjaGVkdWxlZFZlbmNpZGFzQ29tbWFuZC5pZCk7XG5cbiAgICAvLyBDb21hbmRvIHBhcmEgdGFyZWFzIHNjaGVkdWxlZCBwclx1MDBGM3hpbWFzXG4gICAgY29uc3QgdGFyZWFzU2NoZWR1bGVkUHJveGltYXNDb21tYW5kID0gcGx1Z2luLmFkZENvbW1hbmQoe1xuICAgICAgICBpZDogXCJtb3N0cmFyLXRhcmVhcy1zY2hlZHVsZWQtcHJveGltYXNcIixcbiAgICAgICAgbmFtZTogXCJNb3N0cmFyIFRhcmVhcyBTY2hlZHVsZWQgUHJcdTAwRjN4aW1hc1wiLFxuICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKG1hbmFnZW1lbnRQbHVnaW4udGFyZWFzQVBJKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgU2NoZWR1bGVkVGFza0RheXNNb2RhbChtYW5hZ2VtZW50UGx1Z2luKTtcbiAgICAgICAgICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJFbCBtXHUwMEYzZHVsbyBkZSB0YXJlYXMgbm8gZXN0XHUwMEUxIGRpc3BvbmlibGUuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgY29tbWFuZElkcy5wdXNoKHRhcmVhc1NjaGVkdWxlZFByb3hpbWFzQ29tbWFuZC5pZCk7XG5cbiAgICAgIC8vIENvbWFuZG8gcGFyYSB0b2RhcyBsYXMgdGFyZWFzIHZlbmNpZGFzXG4gICAgICBjb25zdCB0b2Rhc1RhcmVhc1ZlbmNpZGFzQ29tbWFuZCA9IHBsdWdpbi5hZGRDb21tYW5kKHtcbiAgICAgICAgaWQ6IFwibW9zdHJhci10b2Rhcy10YXJlYXMtdmVuY2lkYXNcIixcbiAgICAgICAgbmFtZTogXCJNb3N0cmFyIFRvZGFzIGxhcyBUYXJlYXMgVmVuY2lkYXMgKER1ZSwgU2NoZWR1bGVkLCBTdGFydClcIixcbiAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGlmIChtYW5hZ2VtZW50UGx1Z2luLnRhcmVhc0FQSSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IG1hbmFnZW1lbnRQbHVnaW4udGFyZWFzQVBJLm1vc3RyYXJUb2Rhc1RhcmVhc1ZlbmNpZGFzKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJFbCBtXHUwMEYzZHVsbyBkZSB0YXJlYXMgbm8gZXN0XHUwMEUxIGRpc3BvbmlibGUuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgY29tbWFuZElkcy5wdXNoKHRvZGFzVGFyZWFzVmVuY2lkYXNDb21tYW5kLmlkKTtcblxuICAgICAgLy8gQ29tYW5kbyBwYXJhIG1vc3RyYXIgdGFyZWFzIGNvbiBkZXBlbmRlbmNpYXNcbiAgICAgIGNvbnN0IHRhcmVhc0RlcGVuZGllbnRlc0NvbW1hbmQgPSBwbHVnaW4uYWRkQ29tbWFuZCh7XG4gICAgICAgIGlkOiBcIm1vc3RyYXItdGFyZWFzLWRlcGVuZGllbnRlc1wiLFxuICAgICAgICBuYW1lOiBcIk1vc3RyYXIgVGFyZWFzIGNvbiBEZXBlbmRlbmNpYXNcIixcbiAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGlmIChtYW5hZ2VtZW50UGx1Z2luLnRhcmVhc0FQSSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IG1hbmFnZW1lbnRQbHVnaW4udGFyZWFzQVBJLm1vc3RyYXJUYXJlYXNEZXBlbmRpZW50ZXMoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIkVsIG1cdTAwRjNkdWxvIGRlIHRhcmVhcyBubyBlc3RcdTAwRTEgZGlzcG9uaWJsZS5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBjb21tYW5kSWRzLnB1c2godGFyZWFzRGVwZW5kaWVudGVzQ29tbWFuZC5pZCk7XG5cbiAgICBjb25zdCB0YXJlYXNQZXJzb25hc0NvbW1hbmQgPSBwbHVnaW4uYWRkQ29tbWFuZCh7XG4gICAgICAgIGlkOiBcIm1vc3RyYXItdGFyZWFzLXBlcnNvbmFzXCIsXG4gICAgICAgIG5hbWU6IFwiTW9zdHJhciBUYXJlYXMgcG9yIFBlcnNvbmFcIixcbiAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGlmIChtYW5hZ2VtZW50UGx1Z2luLnRhcmVhc0FQSSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IG1hbmFnZW1lbnRQbHVnaW4udGFyZWFzQVBJLm1vc3RyYXJUYXJlYXNQZXJzb25hcygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiRWwgbVx1MDBGM2R1bG8gZGUgdGFyZWFzIG5vIGVzdFx1MDBFMSBkaXNwb25pYmxlLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGNvbW1hbmRJZHMucHVzaCh0YXJlYXNQZXJzb25hc0NvbW1hbmQuaWQpO1xuXG5cbiAgICAgICAgLy8gQVx1MDBGMWFkaXIgbnVldm8gY29tYW5kbyBwYXJhIHRhcmVhcyBwb3IgY29udGV4dG9cbiAgICAgICAgY29uc3QgdGFyZWFzQ29udGV4dG9zQ29tbWFuZCA9IHBsdWdpbi5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiBcIm1vc3RyYXItdGFyZWFzLWNvbnRleHRvc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJNb3N0cmFyIFRhcmVhcyBwb3IgQ29udGV4dG9cIixcbiAgICAgICAgICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG1hbmFnZW1lbnRQbHVnaW4udGFyZWFzQVBJKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG1hbmFnZW1lbnRQbHVnaW4udGFyZWFzQVBJLm1vc3RyYXJUYXJlYXNDb250ZXh0b3MoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiRWwgbVx1MDBGM2R1bG8gZGUgdGFyZWFzIG5vIGVzdFx1MDBFMSBkaXNwb25pYmxlLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb21tYW5kSWRzLnB1c2godGFyZWFzQ29udGV4dG9zQ29tbWFuZC5pZCk7XG5cbiAgICAgICAgLy8gQVx1MDBGMWFkaXIgZXN0ZSBjb21hbmRvIGRlbnRybyBkZSBsYSBmdW5jaVx1MDBGM24gcmVnaXN0ZXJUYXNrTWFuYWdlckNvbW1hbmRzOlxuXG4gICAgICAgIC8vIENvbWFuZG8gcGFyYSBtb3N0cmFyIHRhcmVhcyBzaW4gY2xhc2lmaWNhclxuICAgICAgICBjb25zdCB0YXJlYXNTaW5DbGFzaWZpY2FyQ29tbWFuZCA9IHBsdWdpbi5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiBcIm1vc3RyYXItdGFyZWFzLXNpbi1jbGFzaWZpY2FyXCIsXG4gICAgICAgICAgICBuYW1lOiBcIk1vc3RyYXIgVGFyZWFzIFNpbiBDbGFzaWZpY2FyXCIsXG4gICAgICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChtYW5hZ2VtZW50UGx1Z2luLnRhcmVhc0FQSSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBtYW5hZ2VtZW50UGx1Z2luLnRhcmVhc0FQSS5tb3N0cmFyVGFyZWFzU2luQ2xhc2lmaWNhcigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJFbCBtXHUwMEYzZHVsbyBkZSB0YXJlYXMgbm8gZXN0XHUwMEUxIGRpc3BvbmlibGUuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbW1hbmRJZHMucHVzaCh0YXJlYXNTaW5DbGFzaWZpY2FyQ29tbWFuZC5pZCk7XG5cblxuXG4gICAgICAgIC8vIEFcdTAwRjFhZGlyIGVuIHNyYy9tb2R1bGVzL3Rhc2tNYW5hZ2VyL2NvbW1hbmRzLnRzLCBkZW50cm8gZGUgbGEgZnVuY2lcdTAwRjNuIHJlZ2lzdGVyVGFza01hbmFnZXJDb21tYW5kc1xuXG4gICAgICAgIC8vIENvbWFuZG8gcGFyYSBtb3N0cmFyIHRhcmVhcyBkZSBiYW5kZWphIGRlIGVudHJhZGEgKCNpbmJveClcbiAgICAgICAgY29uc3QgdGFyZWFzSW5ib3hDb21tYW5kID0gcGx1Z2luLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgaWQ6IFwibW9zdHJhci10YXJlYXMtaW5ib3hcIixcbiAgICAgICAgICAgIG5hbWU6IFwiTW9zdHJhciBUYXJlYXMgZW4gQmFuZGVqYSBkZSBFbnRyYWRhICgjaW5ib3gpXCIsXG4gICAgICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChtYW5hZ2VtZW50UGx1Z2luLnRhcmVhc0FQSSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBtYW5hZ2VtZW50UGx1Z2luLnRhcmVhc0FQSS5tb3N0cmFyVGFyZWFzSW5ib3goKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiRWwgbVx1MDBGM2R1bG8gZGUgdGFyZWFzIG5vIGVzdFx1MDBFMSBkaXNwb25pYmxlLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb21tYW5kSWRzLnB1c2godGFyZWFzSW5ib3hDb21tYW5kLmlkKTtcblxuXG4gICAgLy8gR3VhcmRhciBsb3MgSURzIGRlIGxvcyBjb21hbmRvcyBlbiBlbCBwbHVnaW5cbiAgICAocGx1Z2luIGFzIGFueSkucmVnaXN0ZXJlZFRhc2tNYW5hZ2VyQ29tbWFuZElkcyA9IGNvbW1hbmRJZHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWFjdGl2YXRlVGFza01hbmFnZXJDb21tYW5kcyhwbHVnaW46IFBsdWdpbik6IHZvaWQge1xuICAgIGNvbnN0IGNvbW1hbmRJZHMgPSAocGx1Z2luIGFzIGFueSkucmVnaXN0ZXJlZFRhc2tNYW5hZ2VyQ29tbWFuZElkcztcbiAgICBpZiAoIWNvbW1hbmRJZHMpIHJldHVybjtcbiAgICBcbiAgICBjb21tYW5kSWRzLmZvckVhY2goY29tbWFuZElkID0+IHtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHBsdWdpbi5hcHAuY29tbWFuZHMuY29tbWFuZHNbY29tbWFuZElkXTtcbiAgICAgICAgaWYgKGNvbW1hbmQpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuY2FsbGJhY2sgPSAoKSA9PiBuZXcgTm90aWNlKFwiRXN0ZSBjb21hbmRvIGhhIHNpZG8gZGVzYWN0aXZhZG8uXCIpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgLy8gTGltcGlhciBlbCBhcnJheSBkZSBjb21hbmRvcyByZWdpc3RyYWRvc1xuICAgIChwbHVnaW4gYXMgYW55KS5yZWdpc3RlcmVkVGFza01hbmFnZXJDb21tYW5kSWRzID0gW107XG59IiwgIi8vIHNyYy9tb2R1bGVzL2RhdGF2aWV3UXVlcmllcy9pbmRleC50c1xuaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgRGF0YXZpZXdRdWVyeU1hbmFnZXIgfSBmcm9tICcuL0RhdGF2aWV3UXVlcnlNYW5hZ2VyJztcbmltcG9ydCB7IHJlZ2lzdGVyQ29tbWFuZHMsIGRlYWN0aXZhdGVDb21tYW5kcyB9IGZyb20gJy4vY29tbWFuZHMnO1xuaW1wb3J0IHsgUXVlcnlSZW5kZXJlciB9IGZyb20gJy4vUXVlcnlSZW5kZXJlcic7XG5cbmV4cG9ydCBjbGFzcyBNb2R1bG9EYXRhdmlld1F1ZXJpZXMge1xuICAgIHByaXZhdGUgcGx1Z2luOiBQbHVnaW47XG4gICAgcHJpdmF0ZSBxdWVyeU1hbmFnZXI6IERhdGF2aWV3UXVlcnlNYW5hZ2VyO1xuICAgIHByaXZhdGUgcXVlcnlSZW5kZXJlcjogUXVlcnlSZW5kZXJlcjtcbiAgICBwcml2YXRlIF9pc0FjdGl2ZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgICAgY29uc29sZS5sb2coJ01vZHVsb0RhdGF2aWV3UXVlcmllczogSW5pY2lhbGl6YW5kby4uLicpO1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgICAgdGhpcy5xdWVyeU1hbmFnZXIgPSBuZXcgRGF0YXZpZXdRdWVyeU1hbmFnZXIocGx1Z2luKTtcbiAgICAgICAgdGhpcy5xdWVyeVJlbmRlcmVyID0gbmV3IFF1ZXJ5UmVuZGVyZXIoKTtcbiAgICB9XG5cbiAgICBhY3RpdmF0ZSgpOiB2b2lkIHtcbiAgICAgICAgY29uc29sZS5sb2coJ01vZHVsb0RhdGF2aWV3UXVlcmllczogSW5pY2lhbmRvIGFjdGl2YWNpXHUwMEYzbi4uLicpO1xuICAgICAgICBpZiAodGhpcy5faXNBY3RpdmUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdNb2R1bG9EYXRhdmlld1F1ZXJpZXM6IFlhIGVzdFx1MDBFMSBhY3Rpdm8nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZWdpc3RlckNvbW1hbmRzKHRoaXMucGx1Z2luKTtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJEYXRhdmlld0V4dGVuc2lvbnMoKTtcbiAgICAgICAgICAgIHRoaXMuX2lzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdNb2R1bG9EYXRhdmlld1F1ZXJpZXM6IEFjdGl2YWNpXHUwMEYzbiBleGl0b3NhJyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdNb2R1bG9EYXRhdmlld1F1ZXJpZXM6IEVycm9yIGVuIGFjdGl2YWNpXHUwMEYzbjonLCBlcnJvcik7XG4gICAgICAgICAgICB0aGlzLl9pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWFjdGl2YXRlKCk6IHZvaWQge1xuICAgICAgICBjb25zb2xlLmxvZygnTW9kdWxvRGF0YXZpZXdRdWVyaWVzOiBJbmljaWFuZG8gZGVzYWN0aXZhY2lcdTAwRjNuLi4uJyk7XG4gICAgICAgIGlmICghdGhpcy5faXNBY3RpdmUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdNb2R1bG9EYXRhdmlld1F1ZXJpZXM6IFlhIGVzdFx1MDBFMSBpbmFjdGl2bycpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRlYWN0aXZhdGVDb21tYW5kcyh0aGlzLnBsdWdpbik7XG4gICAgICAgICAgICB0aGlzLnVucmVnaXN0ZXJEYXRhdmlld0V4dGVuc2lvbnMoKTtcbiAgICAgICAgICAgIHRoaXMuX2lzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnTW9kdWxvRGF0YXZpZXdRdWVyaWVzOiBEZXNhY3RpdmFjaVx1MDBGM24gZXhpdG9zYScpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignTW9kdWxvRGF0YXZpZXdRdWVyaWVzOiBFcnJvciBlbiBkZXNhY3RpdmFjaVx1MDBGM246JywgZXJyb3IpO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc0FjdGl2ZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzQWN0aXZlO1xuICAgIH1cblxuICAgIGFzeW5jIHJlbmRlclF1ZXJ5KHF1ZXJ5VHlwZTogc3RyaW5nLCBwYXJhbXM6IHtcbiAgICAgICAgY29udGFpbmVyOiBIVE1MRWxlbWVudCxcbiAgICAgICAgZHY6IGFueSxcbiAgICAgICAgb3B0aW9ucz86IGFueVxuICAgIH0pIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc0FjdGl2ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbCBtXHUwMEYzZHVsbyBubyBlc3RcdTAwRTEgYWN0aXZvJyk7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHF1ZXJ5VHlwZSkge1xuICAgICAgICAgICAgY2FzZSAndGFza0J1dHRvbnMnOlxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucXVlcnlSZW5kZXJlci5yZW5kZXJUYXNrQnV0dG9ucyhwYXJhbXMuY29udGFpbmVyLCBwYXJhbXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGlwbyBkZSBjb25zdWx0YSBubyBzb3BvcnRhZG86ICR7cXVlcnlUeXBlfWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZWdpc3RlckRhdGF2aWV3RXh0ZW5zaW9ucygpIHtcbiAgICAgICAgLy8gQ3JlYXIgb2JqZXRvIGRlIGZ1bmNpb25lcyBhbnRlcyBkZSByZWdpc3RyYXJsYXNcbiAgICAgICAgY29uc3QgYm91bmRGdW5jdGlvbnMgPSB7XG4gICAgICAgICAgICByZW5kZXJUYXNrQnV0dG9uczogKGR2OiBhbnksIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIG9wdGlvbnM6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5UmVuZGVyZXIucmVuZGVyVGFza0J1dHRvbnMoY29udGFpbmVyLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZW5kZXJQcm9qZWN0SGllcmFyY2h5OiAoZHY6IGFueSwgY29udGFpbmVyOiBIVE1MRWxlbWVudCwgb3B0aW9uczogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucXVlcnlSZW5kZXJlci5yZW5kZXJQcm9qZWN0SGllcmFyY2h5KGNvbnRhaW5lciwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gUmVnaXN0cmFyIGxhcyBmdW5jaW9uZXMgZW4gZWwgZXNwYWNpbyBnbG9iYWxcbiAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmN1c3RvbVF1ZXJpZXMgPSBib3VuZEZ1bmN0aW9ucztcbiAgICAgICAgY29uc29sZS5sb2coJ01vZHVsb0RhdGF2aWV3UXVlcmllczogRXh0ZW5zaW9ucyByZWdpc3RyYWRhcycpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdW5yZWdpc3RlckRhdGF2aWV3RXh0ZW5zaW9ucygpIHtcbiAgICAgICAgZGVsZXRlICh3aW5kb3cgYXMgYW55KS5jdXN0b21RdWVyaWVzO1xuICAgICAgICBjb25zb2xlLmxvZygnTW9kdWxvRGF0YXZpZXdRdWVyaWVzOiBFeHRlbnNpb25zIGVsaW1pbmFkYXMnKTtcbiAgICB9XG59IiwgIi8vIHNyYy9tb2R1bGVzL2RhdGF2aWV3UXVlcmllcy9EYXRhdmlld1F1ZXJ5TWFuYWdlci50c1xuaW1wb3J0IHsgUGx1Z2luLCBDb21wb25lbnQgfSBmcm9tICdvYnNpZGlhbic7XG5cbmV4cG9ydCBjbGFzcyBEYXRhdmlld1F1ZXJ5TWFuYWdlciBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgfVxuXG4gICAgLy8gQ2FjaGUgcGFyYSBhbG1hY2VuYXIgcmVzdWx0YWRvcyBkZSBjb25zdWx0YXMgZnJlY3VlbnRlc1xuICAgIHByaXZhdGUgcXVlcnlDYWNoZSA9IG5ldyBNYXA8c3RyaW5nLCB7XG4gICAgICAgIGRhdGE6IGFueTtcbiAgICAgICAgdGltZXN0YW1wOiBudW1iZXI7XG4gICAgICAgIHR0bDogbnVtYmVyO1xuICAgIH0+KCk7XG5cbiAgICAvLyBNXHUwMEU5dG9kbyBwYXJhIGVqZWN1dGFyIGNvbnN1bHRhcyBjb24gY2FjaFx1MDBFOVxuICAgIGFzeW5jIGV4ZWN1dGVRdWVyeShxdWVyeUtleTogc3RyaW5nLCBxdWVyeUZuOiAoKSA9PiBQcm9taXNlPGFueT4sIHR0bCA9IDYwMDAwKSB7XG4gICAgICAgIGNvbnN0IGNhY2hlZCA9IHRoaXMucXVlcnlDYWNoZS5nZXQocXVlcnlLZXkpO1xuICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG4gICAgICAgIGlmIChjYWNoZWQgJiYgbm93IC0gY2FjaGVkLnRpbWVzdGFtcCA8IGNhY2hlZC50dGwpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWQuZGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHF1ZXJ5Rm4oKTtcbiAgICAgICAgdGhpcy5xdWVyeUNhY2hlLnNldChxdWVyeUtleSwge1xuICAgICAgICAgICAgZGF0YTogcmVzdWx0LFxuICAgICAgICAgICAgdGltZXN0YW1wOiBub3csXG4gICAgICAgICAgICB0dGxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBNXHUwMEU5dG9kbyBwYXJhIGxpbXBpYXIgY2FjaFx1MDBFOVxuICAgIGNsZWFyQ2FjaGUocXVlcnlLZXk/OiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHF1ZXJ5S2V5KSB7XG4gICAgICAgICAgICB0aGlzLnF1ZXJ5Q2FjaGUuZGVsZXRlKHF1ZXJ5S2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucXVlcnlDYWNoZS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgfVxufSIsICIvLyBzcmMvbW9kdWxlcy9kYXRhdmlld1F1ZXJpZXMvY29tbWFuZHMudHNcbmltcG9ydCB7IFBsdWdpbiwgTm90aWNlIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJDb21tYW5kcyhwbHVnaW46IFBsdWdpbik6IHZvaWQge1xuICAgIC8vIENvbWFuZG8gcGFyYSBsaW1waWFyIGVsIGNhY2hcdTAwRTkgZGUgY29uc3VsdGFzXG4gICAgY29uc3QgY2xlYXJDYWNoZUNvbW1hbmQgPSBwbHVnaW4uYWRkQ29tbWFuZCh7XG4gICAgICAgIGlkOiAnY2xlYXItZGF0YXZpZXctcXVlcmllcy1jYWNoZScsXG4gICAgICAgIG5hbWU6ICdMaW1waWFyIGNhY2hcdTAwRTkgZGUgY29uc3VsdGFzJyxcbiAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kdWxlSW5zdGFuY2UgPSAocGx1Z2luIGFzIGFueSkubW9kdWxvRGF0YXZpZXdRdWVyaWVzO1xuICAgICAgICAgICAgICAgIGlmIChtb2R1bGVJbnN0YW5jZT8ucXVlcnlNYW5hZ2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZUluc3RhbmNlLnF1ZXJ5TWFuYWdlci5jbGVhckNhY2hlKCk7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ0NhY2hcdTAwRTkgZGUgY29uc3VsdGFzIGxpbXBpYWRvJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBhbCBsaW1waWFyIGNhY2hcdTAwRTk6JywgZXJyb3IpO1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ0Vycm9yIGFsIGxpbXBpYXIgY2FjaFx1MDBFOSBkZSBjb25zdWx0YXMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gQ29tYW5kbyBwYXJhIHJlY2FyZ2FyIHRvZGFzIGxhcyBjb25zdWx0YXMgYWN0aXZhc1xuICAgIGNvbnN0IHJlbG9hZFF1ZXJpZXNDb21tYW5kID0gcGx1Z2luLmFkZENvbW1hbmQoe1xuICAgICAgICBpZDogJ3JlbG9hZC1kYXRhdmlldy1xdWVyaWVzJyxcbiAgICAgICAgbmFtZTogJ1JlY2FyZ2FyIGNvbnN1bHRhcyBhY3RpdmFzJyxcbiAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kdWxlSW5zdGFuY2UgPSAocGx1Z2luIGFzIGFueSkubW9kdWxvRGF0YXZpZXdRdWVyaWVzO1xuICAgICAgICAgICAgICAgIGlmIChtb2R1bGVJbnN0YW5jZT8ucXVlcnlNYW5hZ2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZUluc3RhbmNlLmNsZWFyQ2FjaGUoKTtcbiAgICAgICAgICAgICAgICAgICAgYXBwLndvcmtzcGFjZS50cmlnZ2VyKCdkYXRhdmlldzpyZWZyZXNoLXZpZXdzJyk7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ0NvbnN1bHRhcyByZWNhcmdhZGFzJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBhbCByZWNhcmdhciBjb25zdWx0YXM6JywgZXJyb3IpO1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ0Vycm9yIGFsIHJlY2FyZ2FyIGNvbnN1bHRhcycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBSZWdpc3RyYXIgbG9zIElEcyBkZSBsb3MgY29tYW5kb3MgcGFyYSBwb2RlciBkZXNhY3RpdmFybG9zIGRlc3B1XHUwMEU5c1xuICAgIChwbHVnaW4gYXMgYW55KS5yZWdpc3RlcmVkRGF0YXZpZXdRdWVyeUNvbW1hbmRJZHMgPSBbXG4gICAgICAgIGNsZWFyQ2FjaGVDb21tYW5kLmlkLFxuICAgICAgICByZWxvYWRRdWVyaWVzQ29tbWFuZC5pZFxuICAgIF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWFjdGl2YXRlQ29tbWFuZHMocGx1Z2luOiBQbHVnaW4pOiB2b2lkIHtcbiAgICBjb25zdCBjb21tYW5kSWRzID0gKHBsdWdpbiBhcyBhbnkpLnJlZ2lzdGVyZWREYXRhdmlld1F1ZXJ5Q29tbWFuZElkcztcbiAgICBpZiAoIWNvbW1hbmRJZHMpIHJldHVybjtcbiAgICBcbiAgICBjb21tYW5kSWRzLmZvckVhY2goKGNvbW1hbmRJZDogc3RyaW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBwbHVnaW4uYXBwLmNvbW1hbmRzLmNvbW1hbmRzW2NvbW1hbmRJZF07XG4gICAgICAgIGlmIChjb21tYW5kKSB7XG4gICAgICAgICAgICBjb21tYW5kLmNhbGxiYWNrID0gKCkgPT4gbmV3IE5vdGljZShcIkVzdGUgY29tYW5kbyBoYSBzaWRvIGRlc2FjdGl2YWRvLlwiKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIC8vIExpbXBpYXIgZWwgYXJyYXkgZGUgY29tYW5kb3MgcmVnaXN0cmFkb3NcbiAgICAocGx1Z2luIGFzIGFueSkucmVnaXN0ZXJlZERhdGF2aWV3UXVlcnlDb21tYW5kSWRzID0gW107XG59IiwgIi8vIHNyYy9tb2R1bGVzL2RhdGF2aWV3UXVlcmllcy9RdWVyeVJlbmRlcmVyLnRzXG5leHBvcnQgY2xhc3MgUXVlcnlSZW5kZXJlciB7XG4gICAgYXN5bmMgcmVuZGVyVGFza0J1dHRvbnMoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgb3B0aW9uczogYW55ID0ge30pIHtcbiAgICAgICAgY29uc3QgYnV0dG9uQ29udGFpbmVyID0gY29udGFpbmVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICAgICAgICBjbHM6ICd0YXNrLWJ1dHRvbnMtY29udGFpbmVyJyxcbiAgICAgICAgICAgIGF0dHI6IHsgc3R5bGU6ICdkaXNwbGF5OiBncmlkOyBncmlkLWdhcDogOHB4OyBwYWRkaW5nOiAxNnB4OyBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLXNlY29uZGFyeSk7IGJvcmRlci1yYWRpdXM6IDhweDsnIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2hvd1RpdGxlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgYnV0dG9uQ29udGFpbmVyLmNyZWF0ZUVsKCdoNCcsIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiAnXHVEODNEXHVEQ0NCIEdlc3RpXHUwMEYzbiBkZSBUYXJlYXMnLFxuICAgICAgICAgICAgICAgIGF0dHI6IHsgc3R5bGU6ICdtYXJnaW46IDAgMCAxMnB4IDA7JyB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGJ1dHRvbnMgPSBbXG4gICAgICAgICAgICB7IFxuICAgICAgICAgICAgICAgIGlkOiAndG9kYXknLCBcbiAgICAgICAgICAgICAgICB0ZXh0OiAnVGFyZWFzIGRlIEhveScsIFxuICAgICAgICAgICAgICAgIGljb246ICdcdUQ4M0RcdURDQzUnLCBcbiAgICAgICAgICAgICAgICBjb2xvcjogJyM0Q0FGNTAnLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogKCkgPT4gYXBwLnBsdWdpbnMucGx1Z2luc1snb2JzaWRpYW4tcGVyc29uYWwtbWFuYWdlbWVudCddLnRhcmVhc0FQSS5tb3N0cmFyVGFyZWFzSG95KClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7IFxuICAgICAgICAgICAgICAgIGlkOiAnb3ZlcmR1ZScsIFxuICAgICAgICAgICAgICAgIHRleHQ6ICdUYXJlYXMgVmVuY2lkYXMnLCBcbiAgICAgICAgICAgICAgICBpY29uOiAnXHUyNkEwXHVGRTBGJywgXG4gICAgICAgICAgICAgICAgY29sb3I6ICcjZjQ0MzM2JyxcbiAgICAgICAgICAgICAgICBhY3Rpb246ICgpID0+IGFwcC5wbHVnaW5zLnBsdWdpbnNbJ29ic2lkaWFuLXBlcnNvbmFsLW1hbmFnZW1lbnQnXS50YXJlYXNBUEkubW9zdHJhclRhcmVhc1ZlbmNpZGFzKClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7IFxuICAgICAgICAgICAgICAgIGlkOiAndXBjb21pbmcnLCBcbiAgICAgICAgICAgICAgICB0ZXh0OiAnVGFyZWFzIFByXHUwMEYzeGltYXMnLCBcbiAgICAgICAgICAgICAgICBpY29uOiAnXHVEODNDXHVERkFGJywgXG4gICAgICAgICAgICAgICAgY29sb3I6ICcjMjE5NkYzJyxcbiAgICAgICAgICAgICAgICBhY3Rpb246ICgpID0+IGFwcC5wbHVnaW5zLnBsdWdpbnNbJ29ic2lkaWFuLXBlcnNvbmFsLW1hbmFnZW1lbnQnXS50YXJlYXNBUEkubW9zdHJhclRhcmVhc1Byb3hpbWFzKClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7IFxuICAgICAgICAgICAgICAgIGlkOiAnc3RhcnQnLCBcbiAgICAgICAgICAgICAgICB0ZXh0OiAnVG9kYXMgbGFzIFZlbmNpZGFzJywgXG4gICAgICAgICAgICAgICAgaWNvbjogJ1x1RDgzQ1x1REYxMycsIFxuICAgICAgICAgICAgICAgIGNvbG9yOiAnI0ZGOTgwMCcsXG4gICAgICAgICAgICAgICAgYWN0aW9uOiAoKSA9PiBhcHAucGx1Z2lucy5wbHVnaW5zWydvYnNpZGlhbi1wZXJzb25hbC1tYW5hZ2VtZW50J10udGFyZWFzQVBJLm1vc3RyYXJUb2Rhc1RhcmVhc1ZlbmNpZGFzKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgXTtcblxuICAgICAgICBjb25zdCBidXR0b25HcmlkID0gYnV0dG9uQ29udGFpbmVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICAgICAgICBhdHRyOiB7IHN0eWxlOiAnZGlzcGxheTogZ3JpZDsgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsIG1pbm1heCgyMDBweCwgMWZyKSk7IGdhcDogOHB4OycgfVxuICAgICAgICB9KTtcblxuICAgICAgICBidXR0b25zLmZvckVhY2goYnRuID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvbiA9IGJ1dHRvbkdyaWQuY3JlYXRlRWwoJ2J1dHRvbicsIHtcbiAgICAgICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiBgXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2FwOiA4cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiA4cHggMTZweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7YnRuLmNvbG9yfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2U7XG4gICAgICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgYnV0dG9uLmNyZWF0ZUVsKCdzcGFuJywgeyB0ZXh0OiBidG4uaWNvbiB9KTtcbiAgICAgICAgICAgIGJ1dHRvbi5jcmVhdGVFbCgnc3BhbicsIHsgdGV4dDogYnRuLnRleHQgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEV2ZW50b3MgZGUgaG92ZXJcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5maWx0ZXIgPSAnYnJpZ2h0bmVzcygxLjEpJztcbiAgICAgICAgICAgICAgICBidXR0b24uc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoLTFweCknO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5maWx0ZXIgPSAnYnJpZ2h0bmVzcygxKSc7XG4gICAgICAgICAgICAgICAgYnV0dG9uLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKDApJztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBFdmVudG8gZGUgY2xpY2sgY29uIGZlZWRiYWNrIHZpc3VhbFxuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5vcGFjaXR5ID0gJzAuNyc7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ0FjdHVhbGl6YW5kbyB2aXN0YS4uLicpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBidG4uYWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZW4gYWNjaVx1MDBGM24gJHtidG4uaWR9OmAsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShgRXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBidXR0b24uc3R5bGUub3BhY2l0eSA9ICcxJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQWdyZWdhciB0aW1lc3RhbXAgc2kgZXN0XHUwMEUxIGhhYmlsaXRhZG9cbiAgICAgICAgaWYgKG9wdGlvbnMuc2hvd1RpbWVzdGFtcCkge1xuICAgICAgICAgICAgYnV0dG9uQ29udGFpbmVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICAgICAgICAgICAgdGV4dDogYFx1MDBEQWx0aW1hIGFjdHVhbGl6YWNpXHUwMEYzbjogJHtuZXcgRGF0ZSgpLnRvTG9jYWxlVGltZVN0cmluZygpfWAsXG4gICAgICAgICAgICAgICAgYXR0cjogeyBcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6ICdtYXJnaW4tdG9wOiA4cHg7IHRleHQtYWxpZ246IHJpZ2h0OyBmb250LXNpemU6IDAuOGVtOyBjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCk7J1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgcmVuZGVyUHJvamVjdEhpZXJhcmNoeShjb250YWluZXI6IEhUTUxFbGVtZW50LCBvcHRpb25zOiBhbnkgPSB7fSkge1xuICAgICAgICAvLyBJbXBsZW1lbnRhciBjdWFuZG8gc2VhIG5lY2VzYXJpb1xuICAgIH1cbn0iLCAiLypcbiAqIEZpbGVuYW1lOiAvc3JjL21vZHVsZXMvdGFza0V4ZWN1dGlvbk5hdmlnYXRvci9pbmRleC50c1xuICogQ3JlYXRlZCBEYXRlOiAyMDI1LTAyLTI2XG4gKiBBdXRob3I6IE1vZHVsZSBDcmVhdG9yXG4gKiAtLS0tLVxuICogQ29weXJpZ2h0IChjKSAyMDI1XG4gKi9cblxuaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyByZWdpc3RlckNvbW1hbmRzLCBkZWFjdGl2YXRlQ29tbWFuZHMgfSBmcm9tIFwiLi9jb21tYW5kc1wiO1xuXG5leHBvcnQgY2xhc3MgVGFza0V4ZWN1dGlvbk5hdmlnYXRvck1vZHVsZSB7XG4gICAgcGx1Z2luOiBQbHVnaW47XG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IFBsdWdpbikge1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBY3RpdmEgZWwgbVx1MDBGM2R1bG8gcmVnaXN0cmFuZG8gbG9zIGNvbWFuZG9zXG4gICAgICovXG4gICAgYWN0aXZhdGUoKSB7XG4gICAgICAgIHJlZ2lzdGVyQ29tbWFuZHModGhpcy5wbHVnaW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc2FjdGl2YSBlbCBtXHUwMEYzZHVsbywgYXNlZ3VyXHUwMEUxbmRvc2UgZGUgbGltcGlhciB0b2RvcyBsb3MgY29tYW5kb3MgcmVnaXN0cmFkb3NcbiAgICAgKi9cbiAgICBkZWFjdGl2YXRlKCkge1xuICAgICAgICBkZWFjdGl2YXRlQ29tbWFuZHModGhpcy5wbHVnaW4pO1xuICAgIH1cbn0iLCAiLypcbiAqIEZpbGVuYW1lOiAvc3JjL21vZHVsZXMvdGFza0V4ZWN1dGlvbk5hdmlnYXRvci9jb21tYW5kcy50c1xuICogQ3JlYXRlZCBEYXRlOiAyMDI1LTAyLTI2XG4gKiBBdXRob3I6IE1vZHVsZSBDcmVhdG9yXG4gKiAtLS0tLVxuICogQ29weXJpZ2h0IChjKSAyMDI1XG4gKi9cblxuaW1wb3J0IHsgUGx1Z2luLCBOb3RpY2UsIEVkaXRvciwgTWFya2Rvd25WaWV3IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBUYXNrRXhlY3V0aW9uTmF2aWdhdG9yIH0gZnJvbSBcIi4vdGFza0V4ZWN1dGlvbk5hdmlnYXRvclwiO1xuXG4vKipcbiAqIFJlZ2lzdHJhIGxvcyBjb21hbmRvcyByZWxhY2lvbmFkb3MgY29uIGxhIG5hdmVnYWNpXHUwMEYzbiBkZSB0YXJlYXMgZW4gZWplY3VjaVx1MDBGM25cbiAqIEBwYXJhbSBwbHVnaW4gSW5zdGFuY2lhIGRlbCBwbHVnaW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyQ29tbWFuZHMocGx1Z2luOiBQbHVnaW4pOiB2b2lkIHtcbiAgICBjb25zdCB0YXNrRXhlY3V0aW9uTmF2aWdhdG9yID0gbmV3IFRhc2tFeGVjdXRpb25OYXZpZ2F0b3IocGx1Z2luKTtcbiAgICBcbiAgICAvLyBDb21hbmRvIHByaW5jaXBhbCBwYXJhIG5hdmVnYXIgYSB0YXJlYXNcbiAgICBjb25zdCBuYXZpZ2F0b3JDb21tYW5kID0gcGx1Z2luLmFkZENvbW1hbmQoe1xuICAgICAgICBpZDogXCJuYXZpZ2F0ZS10by1leGVjdXRpb24tdGFza3NcIixcbiAgICAgICAgbmFtZTogXCJOYXZlZ2FyIGEgdGFyZWFzIGVuIGVqZWN1Y2lcdTAwRjNuXCIsXG4gICAgICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRhc2tFeGVjdXRpb25OYXZpZ2F0b3IubmF2aWdhdGVUb1Rhc2soKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIG5hdmVnYXIgYSBsYSB0YXJlYTpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJObyBzZSBwdWRvIG5hdmVnYXIgYSBsYSB0YXJlYSBzZWxlY2Npb25hZGEuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBBbG1hY2VuYXIgZWwgSUQgZGVsIGNvbWFuZG8gZW4gZWwgcGx1Z2luIHBhcmEgcG9kZXIgZGVzYWN0aXZhcmxvIGRlc3B1XHUwMEU5c1xuICAgIGlmICghcGx1Z2luLnJlZ2lzdGVyZWRUYXNrRXhlY3V0aW9uTmF2aWdhdG9ySURzKSB7XG4gICAgICAgIHBsdWdpbi5yZWdpc3RlcmVkVGFza0V4ZWN1dGlvbk5hdmlnYXRvcklEcyA9IFtdO1xuICAgIH1cbiAgICBwbHVnaW4ucmVnaXN0ZXJlZFRhc2tFeGVjdXRpb25OYXZpZ2F0b3JJRHMucHVzaChuYXZpZ2F0b3JDb21tYW5kLmlkKTtcbn1cblxuLyoqXG4gKiBEZXNhY3RpdmEgbG9zIGNvbWFuZG9zIHJlZ2lzdHJhZG9zXG4gKiBAcGFyYW0gcGx1Z2luIEluc3RhbmNpYSBkZWwgcGx1Z2luXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWFjdGl2YXRlQ29tbWFuZHMocGx1Z2luOiBQbHVnaW4pOiB2b2lkIHtcbiAgICBpZiAoIXBsdWdpbi5yZWdpc3RlcmVkVGFza0V4ZWN1dGlvbk5hdmlnYXRvcklEcykgcmV0dXJuO1xuICAgIFxuICAgIHBsdWdpbi5yZWdpc3RlcmVkVGFza0V4ZWN1dGlvbk5hdmlnYXRvcklEcy5mb3JFYWNoKGNvbW1hbmRJZCA9PiB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBwbHVnaW4uYXBwLmNvbW1hbmRzLmNvbW1hbmRzW2NvbW1hbmRJZF07XG4gICAgICAgIFxuICAgICAgICBpZiAoY29tbWFuZCkge1xuICAgICAgICAgICAgLy8gU29icmVzY3JpYmUgZWwgY2FsbGJhY2sgZGVsIGNvbWFuZG8gcGFyYSBxdWUgbm8gaGFnYSBuYWRhXG4gICAgICAgICAgICBjb21tYW5kLmNhbGxiYWNrID0gKCkgPT4gbmV3IE5vdGljZShcIkVzdGUgY29tYW5kbyBoYSBzaWRvIGRlc2FjdGl2YWRvLlwiKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIC8vIExpbXBpYSBlbCBhcnJheSBkZSBJRHMgcmVnaXN0cmFkb3NcbiAgICBwbHVnaW4ucmVnaXN0ZXJlZFRhc2tFeGVjdXRpb25OYXZpZ2F0b3JJRHMgPSBbXTtcbn0iLCAiLypcbiAqIEZpbGVuYW1lOiAvc3JjL21vZHVsZXMvdGFza0V4ZWN1dGlvbk5hdmlnYXRvci90YXNrRXhlY3V0aW9uTmF2aWdhdG9yLnRzXG4gKiBDcmVhdGVkIERhdGU6IDIwMjUtMDItMjZcbiAqIEF1dGhvcjogTW9kdWxlIENyZWF0b3JcbiAqIC0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjVcbiAqL1xuXG5pbXBvcnQgeyBBcHAsIFBsdWdpbiwgVEZpbGUsIE5vdGljZSwgRWRpdG9yLCBNYXJrZG93blZpZXcgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IFNlbGVjY2lvbk1vZGFsVGFyZWFzIH0gZnJvbSBcIi4uL21vZGFsZXMvc2VsZWNjaW9uTW9kYWxUYXJlYXNcIjtcblxuLyoqXG4gKiBJbnRlcmZheiBwYXJhIHJlcHJlc2VudGFyIHVuYSB0YXJlYSBjb24gc3UgaW5mb3JtYWNpXHUwMEYzbiBkZSB1YmljYWNpXHUwMEYzblxuICovXG5pbnRlcmZhY2UgVGFza0luZm8ge1xuICAgIHRleHQ6IHN0cmluZzsgICAgICAgICAgIC8vIFRleHRvIGRlIGxhIHRhcmVhXG4gICAgZmlsZTogVEZpbGU7ICAgICAgICAgICAgLy8gQXJjaGl2byBkb25kZSBzZSBlbmN1ZW50cmEgbGEgdGFyZWFcbiAgICBsaW5lTnVtYmVyOiBudW1iZXI7ICAgICAvLyBOXHUwMEZBbWVybyBkZSBsXHUwMEVEbmVhIGRvbmRlIHNlIGVuY3VlbnRyYSBsYSB0YXJlYVxuICAgIGRpc3BsYXlUZXh0OiBzdHJpbmc7ICAgIC8vIFRleHRvIGZvcm1hdGVhZG8gcGFyYSBtb3N0cmFyIChhbGlhcyArIHRleHRvIGRlIGxhIHRhcmVhKVxufVxuXG5leHBvcnQgY2xhc3MgVGFza0V4ZWN1dGlvbk5hdmlnYXRvciB7XG4gICAgcHJpdmF0ZSBhcHA6IEFwcDtcbiAgICBwcml2YXRlIHBsdWdpbjogUGx1Z2luO1xuXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgICAgIHRoaXMuYXBwID0gcGx1Z2luLmFwcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBOYXZlZ2EgYSBsYSB0YXJlYSBzZWxlY2Npb25hZGEgcG9yIGVsIHVzdWFyaW9cbiAgICAgKi9cbiAgICBhc3luYyBuYXZpZ2F0ZVRvVGFzaygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIDEuIEVuY3VlbnRyYSB0b2RhcyBsYXMgdGFyZWFzIGVuIGVqZWN1Y2lcdTAwRjNuXG4gICAgICAgICAgICBjb25zdCB0YXNrcyA9IGF3YWl0IHRoaXMuZmluZFBlbmRpbmdUYXNrcygpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodGFza3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIk5vIHNlIGVuY29udHJhcm9uIHRhcmVhcyBlbiBlamVjdWNpXHUwMEYzbi5cIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyAyLiBQcmVwYXJhIGxhcyBvcGNpb25lcyBwYXJhIGVsIG1vZGFsXG4gICAgICAgICAgICBjb25zdCBkaXNwbGF5T3B0aW9ucyA9IHRhc2tzLm1hcCh0YXNrID0+IHRhc2suZGlzcGxheVRleHQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyAzLiBNdWVzdHJhIGVsIG1vZGFsIHBhcmEgc2VsZWNjaW9uYXIgdW5hIHRhcmVhXG4gICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IFwiU2VsZWNjaW9uYSB1bmEgdGFyZWEgcGFyYSBuYXZlZ2FyXCI7XG4gICAgICAgICAgICBjb25zdCBtb2RhbE1lbnUgPSBuZXcgU2VsZWNjaW9uTW9kYWxUYXJlYXMoXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAsIFxuICAgICAgICAgICAgICAgIGRpc3BsYXlPcHRpb25zLCBcbiAgICAgICAgICAgICAgICB0YXNrcy5tYXAoKF8sIGluZGV4KSA9PiBpbmRleC50b1N0cmluZygpKSxcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZEluZGV4ID0gcGFyc2VJbnQoYXdhaXQgbW9kYWxNZW51Lm9wZW5BbmRBd2FpdFNlbGVjdGlvbigpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZFRhc2sgPSB0YXNrc1tzZWxlY3RlZEluZGV4XTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyA0LiBOYXZlZ2EgYWwgYXJjaGl2byB5IGxcdTAwRURuZWEgc2VsZWNjaW9uYWRhXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5vcGVuRmlsZUF0TGluZShzZWxlY3RlZFRhc2suZmlsZSwgc2VsZWN0ZWRUYXNrLmxpbmVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYE5hdmVnYW5kbyBhIGxhIHRhcmVhIGVuICR7c2VsZWN0ZWRUYXNrLmZpbGUuYmFzZW5hbWV9YCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIFVzdWFyaW8gY2Vyclx1MDBGMyBlbCBtb2RhbCBzaW4gc2VsZWNjaW9uYXJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNlbGVjY2lcdTAwRjNuIGRlIHRhcmVhIGNhbmNlbGFkYSBwb3IgZWwgdXN1YXJpb1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBlbiBuYXZlZ2FjaVx1MDBGM24gZGUgdGFyZWFzOlwiLCBlcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuY3VlbnRyYSB0b2RhcyBsYXMgdGFyZWFzIHBlbmRpZW50ZXMgKGNvbiBlc3RhZG8gWy9dKSBlbiBsb3MgYXJjaGl2b3NcbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIGZpbmRQZW5kaW5nVGFza3MoKTogUHJvbWlzZTxUYXNrSW5mb1tdPiB7XG4gICAgICAgIGNvbnN0IHRhc2tzOiBUYXNrSW5mb1tdID0gW107XG4gICAgICAgIGNvbnN0IGFyY2hpdm9zID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgICAgICBcbiAgICAgICAgLy8gRXhjbHVpciBhcmNoaXZvcyBlbiBjYXJwZXRhcyBlc3BlY1x1MDBFRGZpY2FzXG4gICAgICAgIGNvbnN0IGFyY2hpdm9zUmVsZXZhbnRlcyA9IGFyY2hpdm9zLmZpbHRlcihhcmNoaXZvID0+IHtcbiAgICAgICAgICAgIHJldHVybiAhYXJjaGl2by5wYXRoLmluY2x1ZGVzKFwiUGxhbnRpbGxhc1wiKSAmJiBcbiAgICAgICAgICAgICAgICAgICAhYXJjaGl2by5wYXRoLmluY2x1ZGVzKFwiRXN0cnVjdHVyYS9HVEQvU2lzdGVtYSBHVEQvU2lzdGVtYVwiKSAmJiBcbiAgICAgICAgICAgICAgICAgICAhYXJjaGl2by5wYXRoLmluY2x1ZGVzKFwiQXJjaGl2b1wiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yIChjb25zdCBhcmNoaXZvIG9mIGFyY2hpdm9zUmVsZXZhbnRlcykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW5pZG8gPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGFyY2hpdm8pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVhcyA9IGNvbnRlbmlkby5zcGxpdChcIlxcblwiKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBPYnRpZW5lIGxvcyBhbGlhcyBkZWwgYXJjaGl2byBwYXJhIG1vc3RyYXJsb3MganVudG8gY29uIGxhIHRhcmVhXG4gICAgICAgICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShhcmNoaXZvKTtcbiAgICAgICAgICAgICAgICBsZXQgYWxpYXNEaXNwbGF5ID0gXCJcIjtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAobWV0YWRhdGE/LmZyb250bWF0dGVyPy5hbGlhc2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBhbGlhc2VzID0gbWV0YWRhdGEuZnJvbnRtYXR0ZXIuYWxpYXNlcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGFsaWFzZXMpKSBhbGlhc2VzID0gW2FsaWFzZXNdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWxpYXNlcy5sZW5ndGggPj0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxpYXNEaXNwbGF5ID0gYWxpYXNlc1sxXTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhbGlhc2VzLmxlbmd0aCA+PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGlhc0Rpc3BsYXkgPSBhbGlhc2VzWzBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFNpIG5vIHNlIGVuY29udHJcdTAwRjMgYWxpYXMsIHVzYXIgZWwgbm9tYnJlIGRlbCBhcmNoaXZvXG4gICAgICAgICAgICAgICAgaWYgKCFhbGlhc0Rpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXNEaXNwbGF5ID0gYXJjaGl2by5iYXNlbmFtZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBCdXNjYXIgdGFyZWFzIHBlbmRpZW50ZXMgWy9dIGVuIGNhZGEgbFx1MDBFRG5lYVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZWFzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVhID0gbGluZWFzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGluZWEubWF0Y2goL14gKi0gXFxbXFwvXFxdIC4qLykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIExpbXBpYXIgZWwgdGV4dG8gZGUgbGEgdGFyZWFcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHRvVGFyZWEgPSBhd2FpdCB0aGlzLmxpbXBpYXJUZXh0b1RhcmVhKGxpbmVhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXIgZWwgdGV4dG8gZGUgdmlzdWFsaXphY2lcdTAwRjNuIGNvbWJpbmFuZG8gZWwgYWxpYXMgeSBsYSB0YXJlYVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlzcGxheVRleHQgPSBgJHthbGlhc0Rpc3BsYXl9IC8gJHt0ZXh0b1RhcmVhfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHRleHRvVGFyZWEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZTogYXJjaGl2byxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlUZXh0OiBkaXNwbGF5VGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGFsIHByb2Nlc2FyIGVsIGFyY2hpdm8gJHthcmNoaXZvLnBhdGh9OmAsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXNrcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaW1waWEgZWwgdGV4dG8gZGUgdW5hIHRhcmVhIHBhcmEgbW9zdHJhcmxhIGRlIGZvcm1hIGxlZ2libGVcbiAgICAgKiBAcGFyYW0gdGl0dWxvIFRleHRvIGNvbXBsZXRvIGRlIGxhIGxcdTAwRURuZWEgZGUgbGEgdGFyZWFcbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIGxpbXBpYXJUZXh0b1RhcmVhKHRpdHVsbzogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgLy8gU2UgdG9tYSBzb2xvIGxhIHByaW1lcmEgbFx1MDBFRG5lYVxuICAgICAgICAgICAgbGV0IHRleHRvTGltcGlvID0gdGl0dWxvLnNwbGl0KFwiXFxuXCIpWzBdO1xuXG4gICAgICAgICAgICAvLyBUcmFuc2Zvcm1hIGxhcyBzZWNjaW9uZXMgcXVlIGVtcGllemFuIHBvciBcIiNcIjpcbiAgICAgICAgICAgIC8vIFBvciBlamVtcGxvOiBcIiNjeC9HZXN0aVx1MDBGM25QZXJzb25hbC9QbGFuU2VtYW5hbFwiIHNlIHRyYW5zZm9ybWEgZW4gXCJjeF9HZXN0aW9uUGVyc29uYWxfUGxhblNlbWFuYWxcIlxuICAgICAgICAgICAgdGV4dG9MaW1waW8gPSB0ZXh0b0xpbXBpby5yZXBsYWNlKC8jKFtcXHctL10rKS9nLCAobWF0Y2gsIHAxKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHRyYW5zZm9ybWFkbyA9IHAxLnJlcGxhY2UoL1xcLy9nLCBcIl9cIik7XG4gICAgICAgICAgICAgICAgLy8gRWxpbWluYSBhY2VudG9zIHVzYW5kbyBub3JtYWxpemFjaVx1MDBGM24gVW5pY29kZVxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybWFkbyA9IHRyYW5zZm9ybWFkby5ub3JtYWxpemUoXCJORkRcIikucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgXCJcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWFkbztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBFbGltaW5hIGxvcyBjYW1wb3MgZGUgZXN0aWxvIERhdGF2aWV3LCBwb3IgZWplbXBsbyBbY2FtcG86OnZhbG9yXVxuICAgICAgICAgICAgdGV4dG9MaW1waW8gPSB0ZXh0b0xpbXBpby5yZXBsYWNlKC9cXFtcXHcrOjpbXlxcXV0rXFxdL2csIFwiXCIpO1xuXG4gICAgICAgICAgICAvLyBFbGltaW5hIGVsIHBhdHJcdTAwRjNuIFwiIC0gWy9dXCIgYWwgaW5pY2lvIGRlIGxhIGNhZGVuYSwgY29uIHBvc2libGVzIGVzcGFjaW9zXG4gICAgICAgICAgICB0ZXh0b0xpbXBpbyA9IHRleHRvTGltcGlvLnJlcGxhY2UoL15cXHMqLVxccypcXFtcXC9cXF1cXHMqLywgXCJcIik7XG5cbiAgICAgICAgICAgIC8vIEVsaW1pbmEgbG9zIGVtb2ppcyBkZSBUYXNrcyBqdW50byBjb24gbGEgZmVjaGEgcXVlIHZpZW5lIGlubWVkaWF0YW1lbnRlIGRlc3B1XHUwMEU5cy5cbiAgICAgICAgICAgIC8vIFNlIGFzdW1lIHF1ZSBsYSBmZWNoYSB0aWVuZSBmb3JtYXRvIFlZWVktTU0tREQsIG9wY2lvbmFsbWVudGUgc2VndWlkYSBkZSBob3JhLlxuICAgICAgICAgICAgdGV4dG9MaW1waW8gPSB0ZXh0b0xpbXBpby5yZXBsYWNlKFxuICAgICAgICAgICAgICAgIC9cXHB7RXh0ZW5kZWRfUGljdG9ncmFwaGljfVxccypcXGR7NH0tXFxkezJ9LVxcZHsyfSg/OlxccypcXGR7Mn06XFxkezJ9KD86OlxcZHsyfSk/KT8vZ3UsXG4gICAgICAgICAgICAgICAgXCJcIlxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgLy8gRWxpbWluYSBjdWFscXVpZXIgb3RybyBlbW9qaSBxdWUgcXVlZGVcbiAgICAgICAgICAgIHRleHRvTGltcGlvID0gdGV4dG9MaW1waW8ucmVwbGFjZSgvXFxwe0V4dGVuZGVkX1BpY3RvZ3JhcGhpY30vZ3UsIFwiXCIpO1xuXG4gICAgICAgICAgICAvLyBFbGltaW5hIGN1YWxxdWllciBjb250ZW5pZG8gcXVlIGVzdFx1MDBFOSBlbnRyZSBjb3JjaGV0ZXMgY3VhZHJhZG9zIChpbmNsdXllbmRvIGxvcyBjb3JjaGV0ZXMpXG4gICAgICAgICAgICB0ZXh0b0xpbXBpbyA9IHRleHRvTGltcGlvLnJlcGxhY2UoL1xcW1teXFxdXSpcXF0vZywgXCJcIik7XG5cbiAgICAgICAgICAgIC8vIFJlZW1wbGF6YSBjYXJhY3RlcmVzIG5vIHBlcm1pdGlkb3MgZW4gbm9tYnJlcyBkZSBhcmNoaXZvIGNvbiB1biBndWlvbiBiYWpvXG4gICAgICAgICAgICBjb25zdCBjYXJhY3RlcmVzTm9QZXJtaXRpZG9zID0gL1s8PjpcIlxcL1xcXFx8PypcXHgwMC1cXHgxRl0vZztcbiAgICAgICAgICAgIHRleHRvTGltcGlvID0gdGV4dG9MaW1waW8ucmVwbGFjZShjYXJhY3RlcmVzTm9QZXJtaXRpZG9zLCBcIl9cIik7XG5cbiAgICAgICAgICAgIC8vIFJlZW1wbGF6YSBlc3BhY2lvcyBtXHUwMEZBbHRpcGxlcyBwb3IgdW4gXHUwMEZBbmljbyBlc3BhY2lvXG4gICAgICAgICAgICB0ZXh0b0xpbXBpbyA9IHRleHRvTGltcGlvLnJlcGxhY2UoL1xccysvZywgXCIgXCIpO1xuXG4gICAgICAgICAgICByZXNvbHZlKHRleHRvTGltcGlvLnRyaW0oKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFicmUgdW4gYXJjaGl2byB5IG5hdmVnYSBhIHVuYSBsXHUwMEVEbmVhIGVzcGVjXHUwMEVEZmljYVxuICAgICAqIEBwYXJhbSBmaWxlIEFyY2hpdm8gYSBhYnJpclxuICAgICAqIEBwYXJhbSBsaW5lIE5cdTAwRkFtZXJvIGRlIGxcdTAwRURuZWEgYSBsYSBxdWUgbmF2ZWdhclxuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgb3BlbkZpbGVBdExpbmUoZmlsZTogVEZpbGUsIGxpbmU6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICAvLyBBYnJlIGVsIGFyY2hpdm8gZW4gdW5hIG51ZXZhIHBlc3RhXHUwMEYxYVxuICAgICAgICBjb25zdCBsZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYodHJ1ZSk7XG4gICAgICAgIGF3YWl0IGxlYWYub3BlbkZpbGUoZmlsZSk7XG4gICAgICAgIFxuICAgICAgICAvLyBCdXNjYSBsYSB2aXN0YSBkZWwgZWRpdG9yIHkgbmF2ZWdhIGEgbGEgbFx1MDBFRG5lYSBlc3BlY1x1MDBFRGZpY2FcbiAgICAgICAgY29uc3QgdmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG4gICAgICAgIGlmICh2aWV3KSB7XG4gICAgICAgICAgICBjb25zdCBlZGl0b3IgPSB2aWV3LmVkaXRvcjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gUG9zaWNpb25hIGVsIGN1cnNvciBlbiBsYSBsXHUwMEVEbmVhIGRlc2VhZGFcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0geyBsaW5lOiBsaW5lLCBjaDogMCB9O1xuICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcihwb3NpdGlvbik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEhhY2Ugc2Nyb2xsIGEgbGEgbFx1MDBFRG5lYSB5IGxhIHJlc2FsdGFcbiAgICAgICAgICAgIGVkaXRvci5zY3JvbGxJbnRvVmlldyh7IGZyb206IHBvc2l0aW9uLCB0bzogcG9zaXRpb24gfSwgdHJ1ZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFNlbGVjY2lvbmEgdG9kYSBsYSBsXHUwMEVEbmVhIHBhcmEgZGVzdGFjYXJsYSB2aXN1YWxtZW50ZVxuICAgICAgICAgICAgY29uc3QgbGluZUxlbmd0aCA9IGVkaXRvci5nZXRMaW5lKGxpbmUpLmxlbmd0aDtcbiAgICAgICAgICAgIGVkaXRvci5zZXRTZWxlY3Rpb24oXG4gICAgICAgICAgICAgICAgeyBsaW5lOiBsaW5lLCBjaDogMCB9LFxuICAgICAgICAgICAgICAgIHsgbGluZTogbGluZSwgY2g6IGxpbmVMZW5ndGggfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQXNlZ3VyYSBxdWUgZWwgZWRpdG9yIHRpZW5lIGVsIGZvY29cbiAgICAgICAgICAgIGVkaXRvci5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfVxufSIsICIvLyBzcmMvbW9kdWxlcy90YXNrTmF2aWdhdG9yL21vZHVsZS50c1xuXG5pbXBvcnQgeyBQbHVnaW4gfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBUYXNrTmF2aWdhdG9yVmlldyB9IGZyb20gJy4vdmlld3MvVGFza05hdmlnYXRvclZpZXcnO1xuaW1wb3J0IHsgVGFza0hpZXJhcmNoeUJ1aWxkZXIgfSBmcm9tICcuL3NlcnZpY2VzL1Rhc2tIaWVyYXJjaHlCdWlsZGVyJztcbmltcG9ydCB7IFRhc2tDbGFzc2lmaWVyIH0gZnJvbSAnLi9zZXJ2aWNlcy9UYXNrQ2xhc3NpZmllcic7XG5pbXBvcnQgeyBUYXNrUGFyc2VyIH0gZnJvbSAnLi9zZXJ2aWNlcy9UYXNrUGFyc2VyJztcbmltcG9ydCB7IEVudGl0eURldGVjdG9yIH0gZnJvbSAnLi9zZXJ2aWNlcy9FbnRpdHlEZXRlY3Rvcic7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uVXRpbHMgfSBmcm9tICcuL3V0aWxzL05hdmlnYXRpb25VdGlscyc7XG5pbXBvcnQgeyBUYXNrTWFuYWdlckludGVncmF0aW9uIH0gZnJvbSAnLi9zZXJ2aWNlcy9UYXNrTWFuYWdlckludGVncmF0aW9uJztcblxuLyoqXG4gKiBDbGFzZSBwcmluY2lwYWwgcGFyYSBlbCBtXHUwMEYzZHVsbyBkZSBuYXZlZ2FjaVx1MDBGM24gZGUgdGFyZWFzIEdURFxuICovXG5leHBvcnQgY2xhc3MgVGFza05hdmlnYXRvck1vZHVsZSB7XG4gICAgcHJpdmF0ZSBwbHVnaW46IFBsdWdpbjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IFZJRVdfVFlQRSA9ICd0YXNrLW5hdmlnYXRvci12aWV3JztcbiAgICBwcml2YXRlIGlzQWN0aXZhdGVkID0gZmFsc2U7XG4gICAgXG4gICAgLy8gU2VydmljaW9zXG4gICAgcHJpdmF0ZSBoaWVyYXJjaHlCdWlsZGVyOiBUYXNrSGllcmFyY2h5QnVpbGRlcjtcbiAgICBwcml2YXRlIHRhc2tDbGFzc2lmaWVyOiBUYXNrQ2xhc3NpZmllcjtcbiAgICBwcml2YXRlIHRhc2tQYXJzZXI6IFRhc2tQYXJzZXI7XG4gICAgcHJpdmF0ZSBlbnRpdHlEZXRlY3RvcjogRW50aXR5RGV0ZWN0b3I7XG4gICAgcHJpdmF0ZSBuYXZpZ2F0aW9uVXRpbHM6IE5hdmlnYXRpb25VdGlscztcbiAgICBwcml2YXRlIHRhc2tNYW5hZ2VySW50ZWdyYXRpb246IFRhc2tNYW5hZ2VySW50ZWdyYXRpb247XG4gICAgXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgICAgIFxuICAgICAgICAvLyBJbmljaWFsaXphciBzZXJ2aWNpb3NcbiAgICAgICAgdGhpcy50YXNrUGFyc2VyID0gbmV3IFRhc2tQYXJzZXIoKTtcbiAgICAgICAgdGhpcy5lbnRpdHlEZXRlY3RvciA9IG5ldyBFbnRpdHlEZXRlY3RvcihwbHVnaW4pO1xuICAgICAgICB0aGlzLmhpZXJhcmNoeUJ1aWxkZXIgPSBuZXcgVGFza0hpZXJhcmNoeUJ1aWxkZXIocGx1Z2luKTtcbiAgICAgICAgdGhpcy50YXNrQ2xhc3NpZmllciA9IG5ldyBUYXNrQ2xhc3NpZmllcigpO1xuICAgICAgICB0aGlzLm5hdmlnYXRpb25VdGlscyA9IG5ldyBOYXZpZ2F0aW9uVXRpbHMoKTtcbiAgICAgICAgdGhpcy50YXNrTWFuYWdlckludGVncmF0aW9uID0gbmV3IFRhc2tNYW5hZ2VySW50ZWdyYXRpb24ocGx1Z2luKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQWN0aXZhIGVsIG1cdTAwRjNkdWxvIFRhc2tOYXZpZ2F0b3JcbiAgICAgKi9cbiAgICBhY3RpdmF0ZSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmF0ZWQpIHJldHVybjtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKCdBY3RpdmFuZG8gbVx1MDBGM2R1bG8gVGFza05hdmlnYXRvcicpO1xuICAgICAgICBcbiAgICAgICAgLy8gUmVnaXN0cmFyIGxhIHZpc3RhXG4gICAgICAgIHRoaXMucGx1Z2luLnJlZ2lzdGVyVmlldyhcbiAgICAgICAgICAgIHRoaXMuVklFV19UWVBFLFxuICAgICAgICAgICAgKGxlYWYpID0+IG5ldyBUYXNrTmF2aWdhdG9yVmlldyhsZWFmLCB0aGlzLnBsdWdpbilcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFJlZ2lzdHJhciBjb21hbmRvc1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZHMoKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuaXNBY3RpdmF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBEZXNhY3RpdmEgZWwgbVx1MDBGM2R1bG8gVGFza05hdmlnYXRvclxuICAgICAqL1xuICAgIGRlYWN0aXZhdGUoKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5pc0FjdGl2YXRlZCkgcmV0dXJuO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coJ0Rlc2FjdGl2YW5kbyBtXHUwMEYzZHVsbyBUYXNrTmF2aWdhdG9yJyk7XG4gICAgICAgIFxuICAgICAgICAvLyBFbGltaW5hciBsYSB2aXN0YSByZWdpc3RyYWRhXG4gICAgICAgIHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZGV0YWNoTGVhdmVzT2ZUeXBlKHRoaXMuVklFV19UWVBFKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuaXNBY3RpdmF0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQ29tcHJ1ZWJhIHNpIGVsIG1cdTAwRjNkdWxvIGVzdFx1MDBFMSBhY3Rpdm9cbiAgICAgKi9cbiAgICBpc0FjdGl2ZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNBY3RpdmF0ZWQ7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFJlZ2lzdHJhIGxvcyBjb21hbmRvcyBwYXJhIGVsIG1cdTAwRjNkdWxvXG4gICAgICovXG4gICAgcHJpdmF0ZSByZWdpc3RlckNvbW1hbmRzKCk6IHZvaWQge1xuICAgICAgICAvLyBDb21hbmRvIHBhcmEgYWJyaXIgZWwgbmF2ZWdhZG9yIGRlIHRhcmVhc1xuICAgICAgICB0aGlzLnBsdWdpbi5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAnb3Blbi10YXNrLW5hdmlnYXRvcicsXG4gICAgICAgICAgICBuYW1lOiAnQWJyaXIgTmF2ZWdhZG9yIGRlIFRhcmVhcyBHVEQnLFxuICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHRoaXMub3BlblRhc2tOYXZpZ2F0b3JWaWV3KClcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBDb21hbmRvIHBhcmEgbW9zdHJhciB0YXJlYXMgZGUgbGEgbm90YSBhY3R1YWxcbiAgICAgICAgdGhpcy5wbHVnaW4uYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogJ3Nob3ctY3VycmVudC1ub3RlLXRhc2tzJyxcbiAgICAgICAgICAgIG5hbWU6ICdNb3N0cmFyIFRhcmVhcyBkZSBsYSBOb3RhIEFjdHVhbCcsXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4gdGhpcy5vcGVuVGFza05hdmlnYXRvcldpdGhDdXJyZW50Tm90ZSgpXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQ29tYW5kbyBwYXJhIG1vc3RyYXIgdGFyZWFzIHZlbmNpZGFzXG4gICAgICAgIHRoaXMucGx1Z2luLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgaWQ6ICdzaG93LW92ZXJkdWUtdGFza3MnLFxuICAgICAgICAgICAgbmFtZTogJ01vc3RyYXIgVGFyZWFzIFZlbmNpZGFzJyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5vcGVuVGFza05hdmlnYXRvclZpZXcoKTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgndGFzay1uYXZpZ2F0b3Itc2hvdy1vdmVyZHVlJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBDb21hbmRvIHBhcmEgZGVwdXJhY2lcdTAwRjNuIChzb2xvIGVuIG1vZG8gZGUgZGVzYXJyb2xsbylcbiAgICAgICAgdGhpcy5wbHVnaW4uYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogJ2RlYnVnLXRhc2stbmF2aWdhdG9yJyxcbiAgICAgICAgICAgIG5hbWU6ICdEZXB1cmFyIE5hdmVnYWRvciBkZSBUYXJlYXMgR1REJyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB0aGlzLmRlYnVnVGFza05hdmlnYXRvcigpXG4gICAgICAgIH0pO1xuXG4gICAgfVxuICAgIFxuIC8qKlxuICogQWJyZSBsYSB2aXN0YSBkZWwgbmF2ZWdhZG9yIGRlIHRhcmVhcyBjb21vIHVuYSBwZXN0YVx1MDBGMWEgbnVldmFcbiAqL1xuYXN5bmMgb3BlblRhc2tOYXZpZ2F0b3JWaWV3KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHdvcmtzcGFjZSA9IHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2U7XG4gICAgXG4gICAgLy8gVmVyaWZpY2FyIHNpIGxhIHZpc3RhIHlhIGVzdFx1MDBFMSBhYmllcnRhXG4gICAgY29uc3QgZXhpc3RpbmdMZWF2ZXMgPSB3b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKHRoaXMuVklFV19UWVBFKTtcbiAgICBpZiAoZXhpc3RpbmdMZWF2ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyBTaSB5YSBlc3RcdTAwRTEgYWJpZXJ0YSwgcmV2ZWxhcmxhXG4gICAgICAgIHdvcmtzcGFjZS5yZXZlYWxMZWFmKGV4aXN0aW5nTGVhdmVzWzBdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICAvLyBHdWFyZGFyIGxhIG5vdGEgYWN0aXZhIGFjdHVhbCBwYXJhIG1hbnRlbmVyIGVsIGNvbnRleHRvXG4gICAgY29uc3QgYWN0aXZlRmlsZSA9IHdvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG4gICAgXG4gICAgLy8gQ3JlYXIgdW5hIG51ZXZhIHBlc3RhXHUwMEYxYSBlbiBlbCBcdTAwRTFyZWEgcHJpbmNpcGFsXG4gICAgLy8gVXNhbW9zIGNyZWF0ZUxlYWZJblBhcmVudCBwYXJhIGNyZWFyIHVuYSBwZXN0YVx1MDBGMWEgZW4gZWwgXHUwMEUxcmVhIHByaW5jaXBhbFxuICAgIGNvbnN0IGxlYWYgPSB3b3Jrc3BhY2UuZ2V0TGVhZigndGFiJyk7XG4gICAgXG4gICAgLy8gQ29uZmlndXJhciBsYSBudWV2YSBwZXN0YVx1MDBGMWEgcGFyYSBtb3N0cmFyIG51ZXN0cmEgdmlzdGFcbiAgICBhd2FpdCBsZWFmLnNldFZpZXdTdGF0ZSh7XG4gICAgICAgIHR5cGU6IHRoaXMuVklFV19UWVBFLFxuICAgICAgICBhY3RpdmU6IHRydWUsXG4gICAgICAgIHN0YXRlOiB7XG4gICAgICAgICAgICBjb250ZXh0RmlsZTogYWN0aXZlRmlsZSA/IGFjdGl2ZUZpbGUucGF0aCA6IG51bGxcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIC8vIFJldmVsYXIgbGEgcGVzdGFcdTAwRjFhIHJlY2lcdTAwRTluIGNyZWFkYVxuICAgIHdvcmtzcGFjZS5yZXZlYWxMZWFmKGxlYWYpO1xufVxuICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogQWJyZSBsYSB2aXN0YSBkZWwgbmF2ZWdhZG9yIGNlbnRyYWRhIGVuIGxhIG5vdGEgYWN0dWFsXG4gICAgICAgICAqL1xuICAgICAgICBhc3luYyBvcGVuVGFza05hdmlnYXRvcldpdGhDdXJyZW50Tm90ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgICAgIGNvbnN0IHdvcmtzcGFjZSA9IHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2U7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIE9idGVuZW1vcyBsYSBub3RhIGFjdHVhbFxuICAgICAgICAgICAgY29uc3QgY3VycmVudEZpbGUgPSB3b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRGaWxlKSB7XG4gICAgICAgICAgICAgICAgLy8gU2kgbm8gaGF5IG5vdGEgYWN0aXZhLCBzaW1wbGVtZW50ZSBhYnJpbW9zIGxhIHZpc3RhIG5vcm1hbFxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMub3BlblRhc2tOYXZpZ2F0b3JWaWV3KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBWZXJpZmljYXIgc2kgbGEgdmlzdGEgeWEgZXN0XHUwMEUxIGFiaWVydGFcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nTGVhdmVzID0gd29ya3NwYWNlLmdldExlYXZlc09mVHlwZSh0aGlzLlZJRVdfVFlQRSk7XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdMZWF2ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIFNpIHlhIGVzdFx1MDBFMSBhYmllcnRhLCBhY3R1YWxpemFtb3Mgc3UgY29udGV4dG9cbiAgICAgICAgICAgICAgICB3b3Jrc3BhY2UucmV2ZWFsTGVhZihleGlzdGluZ0xlYXZlc1swXSk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ3Rhc2stbmF2aWdhdG9yLWZvY3VzLWVudGl0eScsIHtcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsOiB7IGZpbGVQYXRoOiBjdXJyZW50RmlsZS5wYXRoIH1cbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBTaSBubyBlc3RcdTAwRTEgYWJpZXJ0YSwgY3JlYW1vcyB1bmEgcGVzdGFcdTAwRjFhIG51ZXZhIGNvbiBlbCBjb250ZXh0byBkZSBsYSBub3RhIGFjdHVhbFxuICAgICAgICAgICAgY29uc3QgbGVhZiA9IHdvcmtzcGFjZS5nZXRMZWFmKCd0YWInKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ29uZmlndXJhciBsYSBudWV2YSBwZXN0YVx1MDBGMWEgcGFyYSBtb3N0cmFyIG51ZXN0cmEgdmlzdGFcbiAgICAgICAgICAgIGF3YWl0IGxlYWYuc2V0Vmlld1N0YXRlKHtcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLlZJRVdfVFlQRSxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgc3RhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dEZpbGU6IGN1cnJlbnRGaWxlLnBhdGhcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gUmV2ZWxhciBsYSBwZXN0YVx1MDBGMWEgcmVjaVx1MDBFOW4gY3JlYWRhXG4gICAgICAgICAgICB3b3Jrc3BhY2UucmV2ZWFsTGVhZihsZWFmKTtcbiAgICAgICAgfVxuICAgIFxuLyoqXG4gKiBNXHUwMEU5dG9kbyBkZSBkZXB1cmFjaVx1MDBGM24gcGFyYSBlbCBuYXZlZ2Fkb3IgZGUgdGFyZWFzXG4gKiBNdWVzdHJhIGluZm9ybWFjaVx1MDBGM24gZGV0YWxsYWRhIGVuIGxhIGNvbnNvbGFcbiAqL1xucHJpdmF0ZSBhc3luYyBkZWJ1Z1Rhc2tOYXZpZ2F0b3IoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVwiKTtcbiAgICBjb25zb2xlLmxvZyhcIltUYXNrTmF2aWdhdG9yXSBJTklDSUFORE8gREVQVVJBQ0lcdTAwRDNOIE1BTlVBTFwiKTtcbiAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XCIpO1xuICAgIFxuICAgIC8vIFZlcmlmaWNhciBzaSBsYSB2aXN0YSBlc3RcdTAwRTEgYWJpZXJ0YVxuICAgIGNvbnN0IHdvcmtzcGFjZSA9IHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2U7XG4gICAgY29uc3QgZXhpc3RpbmdMZWF2ZXMgPSB3b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKHRoaXMuVklFV19UWVBFKTtcbiAgICBcbiAgICBpZiAoZXhpc3RpbmdMZWF2ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIltUYXNrTmF2aWdhdG9yXSBWaXN0YSBlbmNvbnRyYWRhLCBhY2NlZGllbmRvIGFsIG1vZGVsby4uLlwiKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFjY2VkZXIgYSBsYSB2aXN0YSBwYXJhIG9idGVuZXIgZWwgbW9kZWxvXG4gICAgICAgIGNvbnN0IHZpZXcgPSBleGlzdGluZ0xlYXZlc1swXS52aWV3IGFzIGFueTsgLy8gVXNhciAnYW55JyBwYXJhIGFjY2VkZXIgYSBwcm9waWVkYWRlc1xuICAgICAgICBcbiAgICAgICAgaWYgKHZpZXcgJiYgdmlldy5jdXJyZW50TW9kZWwpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW1Rhc2tOYXZpZ2F0b3JdIE1vZGVsbyBlbmNvbnRyYWRvLCB2b2xjYW5kbyBpbmZvcm1hY2lcdTAwRjNuLi4uXCIpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBJbXBvcnRhbW9zIGRpblx1MDBFMW1pY2FtZW50ZSBsYSB1dGlsaWRhZCBkZSBkZXB1cmFjaVx1MDBGM25cbiAgICAgICAgICAgIC8vIEVzdG8gZXZpdGEgdGVuZXIgcXVlIGltcG9ydGFybGEgZW4gbGEgY2xhc2UgcHJpbmNpcGFsXG4gICAgICAgICAgICBjb25zdCB7IERlYnVnVXRpbHMgfSA9IHJlcXVpcmUoJy4vdXRpbHMvRGVidWdVdGlscycpO1xuICAgICAgICAgICAgRGVidWdVdGlscy5kdW1wTW9kZWxJbmZvKHZpZXcuY3VycmVudE1vZGVsKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gTW9zdHJhciBtZW5zYWplIGVuIGxhIGludGVyZmF6XG4gICAgICAgICAgICBuZXcgTm90aWNlKFwiSW5mb3JtYWNpXHUwMEYzbiBkZSBkZXB1cmFjaVx1MDBGM24gdm9sY2FkYSBhIGxhIGNvbnNvbGFcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIltUYXNrTmF2aWdhdG9yXSBObyBzZSBlbmNvbnRyXHUwMEYzIHVuIG1vZGVsbyB2XHUwMEUxbGlkbyBlbiBsYSB2aXN0YVwiKTtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJObyBzZSBlbmNvbnRyXHUwMEYzIHVuIG1vZGVsbyB2XHUwMEUxbGlkbyBwYXJhIGRlcHVyYXJcIik7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcIltUYXNrTmF2aWdhdG9yXSBObyBoYXkgbmluZ3VuYSB2aXN0YSBkZSBuYXZlZ2Fkb3IgYWJpZXJ0YVwiKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFNpIG5vIGhheSB2aXN0YSBhYmllcnRhLCBwb2RlbW9zIGFicmlyIHVuYSBjb24gcHJvcFx1MDBGM3NpdG8gZGUgZGVwdXJhY2lcdTAwRjNuXG4gICAgICAgIGNvbnN0IHNob3VsZE9wZW4gPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5vdGljZSA9IG5ldyBOb3RpY2UoXG4gICAgICAgICAgICAgICAgXCJObyBoYXkgbmluZ3VuYSB2aXN0YSBkZSBuYXZlZ2Fkb3IgYWJpZXJ0YS4gXHUwMEJGRGVzZWFzIGFicmlyIHVuYT9cIixcbiAgICAgICAgICAgICAgICAwIC8vIDAgc2lnbmlmaWNhIHF1ZSBubyBzZSBjaWVycmEgYXV0b21cdTAwRTF0aWNhbWVudGVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFcdTAwRjFhZGlyIGJvdG9uZXMgYSBsYSBub3RpZmljYWNpXHUwMEYzblxuICAgICAgICAgICAgY29uc3QgYnV0dG9uWWVzID0gY3JlYXRlRWwoXCJidXR0b25cIiwge3RleHQ6IFwiU1x1MDBFRFwifSk7XG4gICAgICAgICAgICBjb25zdCBidXR0b25ObyA9IGNyZWF0ZUVsKFwiYnV0dG9uXCIsIHt0ZXh0OiBcIk5vXCJ9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgYnV0dG9uWWVzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICBub3RpY2UuaGlkZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGJ1dHRvbk5vLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgbm90aWNlLmhpZGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIC0gQVx1MDBGMWFkaXIgYm90b25lcyBhIGxhIG5vdGlmaWNhY2lcdTAwRjNuXG4gICAgICAgICAgICBub3RpY2Uubm90aWNlRWwuYXBwZW5kQ2hpbGQoYnV0dG9uWWVzKTtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIG5vdGljZS5ub3RpY2VFbC5hcHBlbmRDaGlsZChidXR0b25Obyk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgaWYgKHNob3VsZE9wZW4pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW1Rhc2tOYXZpZ2F0b3JdIEFicmllbmRvIHZpc3RhIHBhcmEgZGVwdXJhY2lcdTAwRjNuXCIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5vcGVuVGFza05hdmlnYXRvclZpZXcoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRXNwZXJhciB1biBtb21lbnRvIHBhcmEgcXVlIHNlIGNhcmd1ZSBsYSB2aXN0YVxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWJ1Z1Rhc2tOYXZpZ2F0b3IoKTsgLy8gTGxhbWFkYSByZWN1cnNpdmEgZGVzcHVcdTAwRTlzIGRlIGFicmlyXG4gICAgICAgICAgICB9LCAyMDAwKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5cbiAgICAvKipcbiAgICAgKiBQcm9wb3JjaW9uYSBlbCBjb25zdHJ1Y3RvciBkZSBqZXJhcnF1XHUwMEVEYSBhIG90cm9zIGNvbXBvbmVudGVzXG4gICAgICovXG4gICAgZ2V0SGllcmFyY2h5QnVpbGRlcigpOiBUYXNrSGllcmFyY2h5QnVpbGRlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmhpZXJhcmNoeUJ1aWxkZXI7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFByb3BvcmNpb25hIGVsIGNsYXNpZmljYWRvciBkZSB0YXJlYXMgYSBvdHJvcyBjb21wb25lbnRlc1xuICAgICAqL1xuICAgIGdldFRhc2tDbGFzc2lmaWVyKCk6IFRhc2tDbGFzc2lmaWVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFza0NsYXNzaWZpZXI7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFByb3BvcmNpb25hIGVsIGFuYWxpemFkb3IgZGUgdGFyZWFzIGEgb3Ryb3MgY29tcG9uZW50ZXNcbiAgICAgKi9cbiAgICBnZXRUYXNrUGFyc2VyKCk6IFRhc2tQYXJzZXIge1xuICAgICAgICByZXR1cm4gdGhpcy50YXNrUGFyc2VyO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBQcm9wb3JjaW9uYSBlbCBkZXRlY3RvciBkZSBlbnRpZGFkZXMgYSBvdHJvcyBjb21wb25lbnRlc1xuICAgICAqL1xuICAgIGdldEVudGl0eURldGVjdG9yKCk6IEVudGl0eURldGVjdG9yIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW50aXR5RGV0ZWN0b3I7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFByb3BvcmNpb25hIGxhcyB1dGlsaWRhZGVzIGRlIG5hdmVnYWNpXHUwMEYzbiBhIG90cm9zIGNvbXBvbmVudGVzXG4gICAgICovXG4gICAgZ2V0TmF2aWdhdGlvblV0aWxzKCk6IE5hdmlnYXRpb25VdGlscyB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hdmlnYXRpb25VdGlscztcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogUHJvcG9yY2lvbmEgbGEgaW50ZWdyYWNpXHUwMEYzbiBjb24gZWwgZ2VzdG9yIGRlIHRhcmVhcyBhIG90cm9zIGNvbXBvbmVudGVzXG4gICAgICovXG4gICAgZ2V0VGFza01hbmFnZXJJbnRlZ3JhdGlvbigpOiBUYXNrTWFuYWdlckludGVncmF0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFza01hbmFnZXJJbnRlZ3JhdGlvbjtcbiAgICB9XG59IiwgIi8vIHNyYy9tb2R1bGVzL3Rhc2tOYXZpZ2F0b3Ivdmlld3MvVGFza05hdmlnYXRvclZpZXcudHNcbmltcG9ydCB7IEl0ZW1WaWV3LCBXb3Jrc3BhY2VMZWFmLCBQbHVnaW4sIFRGaWxlLCBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBUYXNrSGllcmFyY2h5QnVpbGRlciB9IGZyb20gJy4uL3NlcnZpY2VzL1Rhc2tIaWVyYXJjaHlCdWlsZGVyJztcbmltcG9ydCB7IFRhc2tDbGFzc2lmaWVyIH0gZnJvbSAnLi4vc2VydmljZXMvVGFza0NsYXNzaWZpZXInO1xuaW1wb3J0IHsgVGFza1BhcnNlciB9IGZyb20gJy4uL3NlcnZpY2VzL1Rhc2tQYXJzZXInO1xuaW1wb3J0IHsgRW50aXR5RGV0ZWN0b3IgfSBmcm9tICcuLi9zZXJ2aWNlcy9FbnRpdHlEZXRlY3Rvcic7XG5pbXBvcnQgeyBWaWV3UmVuZGVyZXIgfSBmcm9tICcuLi9jb21wb25lbnRzL1ZpZXdSZW5kZXJlcic7XG5pbXBvcnQgeyBGaWx0ZXJQYW5lbCB9IGZyb20gJy4uL2NvbXBvbmVudHMvRmlsdGVyUGFuZWwnO1xuaW1wb3J0IHsgSGllcmFyY2h5Vmlld01vZGVsLCBWaWV3TW9kZSB9IGZyb20gJy4uL21vZGVscy9IaWVyYXJjaHlWaWV3TW9kZWwnO1xuaW1wb3J0IHsgRGVidWdVdGlscyB9IGZyb20gJy4uL3V0aWxzL0RlYnVnVXRpbHMnO1xuaW1wb3J0IHsgSUVudGl0eSwgRW50aXR5VHlwZSwgRW50aXR5U3RhdGUgfSBmcm9tICcuLi9tb2RlbHMvRW50aXR5JztcbmltcG9ydCB7IFRhc2ssIFRhc2tMaXN0VHlwZSwgVGFza1ByaW9yaXR5IH0gZnJvbSAnLi4vbW9kZWxzL1Rhc2snO1xuXG5leHBvcnQgY2xhc3MgVGFza05hdmlnYXRvclZpZXcgZXh0ZW5kcyBJdGVtVmlldyB7XG4gICAgcHJpdmF0ZSBwbHVnaW46IFBsdWdpbjtcbiAgICBwcml2YXRlIGhpZXJhcmNoeUJ1aWxkZXI6IFRhc2tIaWVyYXJjaHlCdWlsZGVyO1xuICAgIHByaXZhdGUgdGFza0NsYXNzaWZpZXI6IFRhc2tDbGFzc2lmaWVyO1xuICAgIHByaXZhdGUgdGFza1BhcnNlcjogVGFza1BhcnNlcjtcbiAgICBwcml2YXRlIGVudGl0eURldGVjdG9yOiBFbnRpdHlEZXRlY3RvcjtcbiAgICBwcml2YXRlIHZpZXdSZW5kZXJlcjogVmlld1JlbmRlcmVyO1xuICAgIHByaXZhdGUgZmlsdGVyUGFuZWw6IEZpbHRlclBhbmVsO1xuICAgIHByaXZhdGUgY3VycmVudE1vZGVsOiBIaWVyYXJjaHlWaWV3TW9kZWwgfCBudWxsID0gbnVsbDtcbiAgICBwcml2YXRlIGNvbnRleHRGaWxlOiBURmlsZSB8IG51bGwgPSBudWxsOyAvLyBBcmNoaXZvIGRlIGNvbnRleHRvIGd1YXJkYWRvXG4gICAgcHJpdmF0ZSByZWZyZXNoSW50ZXJ2YWw6IG51bWJlciB8IG51bGwgPSBudWxsO1xuICAgIHByaXZhdGUgREVCVUcgPSB0cnVlOyAvLyBBY3RpdmFyIG1lbnNhamVzIGRlIGRlcHVyYWNpXHUwMEYzblxuICAgIFxuICAgIGNvbnN0cnVjdG9yKGxlYWY6IFdvcmtzcGFjZUxlYWYsIHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIHN1cGVyKGxlYWYpO1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgICAgXG4gICAgICAgIC8vIEluaWNpYWxpemFyIHNlcnZpY2lvc1xuICAgICAgICB0aGlzLmxvZyhcIkluaWNpYWxpemFuZG8gc2VydmljaW9zIGRlbCBuYXZlZ2Fkb3IgZGUgdGFyZWFzXCIpO1xuICAgICAgICB0aGlzLnRhc2tQYXJzZXIgPSBuZXcgVGFza1BhcnNlcigpO1xuICAgICAgICB0aGlzLmhpZXJhcmNoeUJ1aWxkZXIgPSBuZXcgVGFza0hpZXJhcmNoeUJ1aWxkZXIodGhpcy5wbHVnaW4pO1xuICAgICAgICB0aGlzLnRhc2tDbGFzc2lmaWVyID0gbmV3IFRhc2tDbGFzc2lmaWVyKCk7XG4gICAgICAgIHRoaXMuZW50aXR5RGV0ZWN0b3IgPSBuZXcgRW50aXR5RGV0ZWN0b3IodGhpcy5wbHVnaW4pO1xuICAgICAgICBcbiAgICAgICAgLy8gSW5pY2lhbGl6YXIgY29tcG9uZW50ZXMgZGUgVUlcbiAgICAgICAgdGhpcy5sb2coXCJJbmljaWFsaXphbmRvIGNvbXBvbmVudGVzIGRlIFVJXCIpO1xuICAgICAgICB0aGlzLnZpZXdSZW5kZXJlciA9IG5ldyBWaWV3UmVuZGVyZXIoKTtcbiAgICAgICAgdGhpcy5maWx0ZXJQYW5lbCA9IG5ldyBGaWx0ZXJQYW5lbCgoZmlsdGVycykgPT4gdGhpcy5hcHBseUZpbHRlcnMoZmlsdGVycykpO1xuICAgIH1cbiAgICBcbiAgICAvLyBNXHUwMEU5dG9kbyBwYXJhIG1vc3RyYXIgbWVuc2FqZXMgZGUgZGVwdXJhY2lcdTAwRjNuXG4gICAgcHJpdmF0ZSBsb2cobWVzc2FnZTogc3RyaW5nLCBkYXRhPzogYW55KTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLkRFQlVHKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgW1Rhc2tOYXZpZ2F0b3JdICR7bWVzc2FnZX1gLCBkYXRhIHx8ICcnKTtcbiAgICAgICAgICAgIC8vIE9wY2lvbmFsbWVudGUsIG1vc3RyYXIgdW5hIG5vdGlmaWNhY2lcdTAwRjNuIGVuIGxhIGludGVyZmF6XG4gICAgICAgICAgICAvLyBuZXcgTm90aWNlKGBbVGFza05hdmlnYXRvcl0gJHttZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIE1cdTAwRTl0b2RvIHBhcmEgbW9zdHJhciBhZHZlcnRlbmNpYXNcbiAgICBwcml2YXRlIHdhcm4obWVzc2FnZTogc3RyaW5nLCBkYXRhPzogYW55KTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLkRFQlVHKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFtUYXNrTmF2aWdhdG9yXSAke21lc3NhZ2V9YCwgZGF0YSB8fCAnJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8gTVx1MDBFOXRvZG8gcGFyYSBtb3N0cmFyIGVycm9yZXNcbiAgICBwcml2YXRlIGVycm9yKG1lc3NhZ2U6IHN0cmluZywgZXJyb3I/OiBhbnkpOiB2b2lkIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgW1Rhc2tOYXZpZ2F0b3JdICR7bWVzc2FnZX1gLCBlcnJvciB8fCAnJyk7XG4gICAgICAgIGlmICh0aGlzLkRFQlVHKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGBbVGFza05hdmlnYXRvcl0gRXJyb3I6ICR7bWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBnZXRWaWV3VHlwZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJ3Rhc2stbmF2aWdhdG9yLXZpZXcnO1xuICAgIH1cbiAgICBcbiAgICBnZXREaXNwbGF5VGV4dCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJ05hdmVnYWRvciBkZSBUYXJlYXMgR1REJztcbiAgICB9XG4gICAgXG4gICAgZ2V0SWNvbigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJ2NoZWNrbWFyayc7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIEd1YXJkYSBlbCBlc3RhZG8gZGUgbGEgdmlzdGFcbiAgICAgKi9cbiAgICBnZXRTdGF0ZSgpOiBhbnkge1xuICAgICAgICB0aGlzLmxvZyhcIkd1YXJkYW5kbyBlc3RhZG8gZGUgbGEgdmlzdGFcIik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb250ZXh0RmlsZTogdGhpcy5jb250ZXh0RmlsZSA/IHRoaXMuY29udGV4dEZpbGUucGF0aCA6IG51bGwsXG4gICAgICAgICAgICBjdXJyZW50RmlsdGVyczogdGhpcy5jdXJyZW50TW9kZWwgPyB0aGlzLmN1cnJlbnRNb2RlbC5maWx0ZXJzIDogbnVsbCxcbiAgICAgICAgICAgIHZpZXdNb2RlOiB0aGlzLmN1cnJlbnRNb2RlbCA/IHRoaXMuY3VycmVudE1vZGVsLnZpZXdNb2RlIDogbnVsbFxuICAgICAgICB9O1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBSZXN0YXVyYSBlbCBlc3RhZG8gZGUgbGEgdmlzdGFcbiAgICAgKi9cbiAgICBzZXRTdGF0ZShzdGF0ZTogYW55KTogdm9pZCB7XG4gICAgICAgIHRoaXMubG9nKFwiUmVzdGF1cmFuZG8gZXN0YWRvIGRlIGxhIHZpc3RhXCIsIHN0YXRlKTtcbiAgICAgICAgaWYgKHN0YXRlLmNvbnRleHRGaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHN0YXRlLmNvbnRleHRGaWxlKTtcbiAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHRGaWxlID0gZmlsZTtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZyhcIkNvbnRleHRvIHJlc3RhdXJhZG9cIiwgZmlsZS5wYXRoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy53YXJuKFwiTm8gc2UgcHVkbyByZXN0YXVyYXIgZWwgYXJjaGl2byBkZSBjb250ZXh0b1wiLCBzdGF0ZS5jb250ZXh0RmlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFJlc3RhdXJhbW9zIGxvcyBmaWx0cm9zIHkgZWwgbW9kbyBkZSB2aXN0YSBzaSBlc3RcdTAwRTFuIGRpc3BvbmlibGVzXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRNb2RlbCkge1xuICAgICAgICAgICAgaWYgKHN0YXRlLmN1cnJlbnRGaWx0ZXJzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50TW9kZWwuZmlsdGVycyA9IHN0YXRlLmN1cnJlbnRGaWx0ZXJzO1xuICAgICAgICAgICAgICAgIHRoaXMubG9nKFwiRmlsdHJvcyByZXN0YXVyYWRvc1wiLCBzdGF0ZS5jdXJyZW50RmlsdGVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChzdGF0ZS52aWV3TW9kZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudE1vZGVsLnZpZXdNb2RlID0gc3RhdGUudmlld01vZGU7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2coXCJNb2RvIGRlIHZpc3RhIHJlc3RhdXJhZG9cIiwgc3RhdGUudmlld01vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFNlIGVqZWN1dGEgY3VhbmRvIGxhIHZpc3RhIHNlIHJlY2FyZ2EgKHRyYXMgY2FtYmlhciBkZSBwZXN0YVx1MDBGMWEgeSB2b2x2ZXIpXG4gICAgICovXG4gICAgb25sb2FkKCk6IHZvaWQge1xuICAgICAgICBzdXBlci5vbmxvYWQoKTtcbiAgICAgICAgdGhpcy5sb2coXCJvbmxvYWQoKSBsbGFtYWRvIC0gVmlzdGEgcmVjYXJnYWRhXCIpO1xuICAgICAgICBcbiAgICAgICAgLy8gQWN0dWFsaXphciBsYSB2aXN0YSBjb24gZWwgY29udGV4dG8gZ3VhcmRhZG9cbiAgICAgICAgaWYgKHRoaXMuY29udGV4dEZpbGUpIHtcbiAgICAgICAgICAgIHRoaXMubG9nKFwiQWN0dWFsaXphbmRvIHZpc3RhIGNvbiBjb250ZXh0byBndWFyZGFkb1wiLCB0aGlzLmNvbnRleHRGaWxlLnBhdGgpO1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoVmlldygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy53YXJuKFwiTm8gaGF5IGFyY2hpdm8gZGUgY29udGV4dG8gZ3VhcmRhZG8gcGFyYSBhY3R1YWxpemFyIGxhIHZpc3RhXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuLyoqXG4gKiBTZSBlamVjdXRhIGN1YW5kbyBsYSB2aXN0YSBzZSBhYnJlXG4gKi9cbmFzeW5jIG9uT3BlbigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgICAvLyBNb3N0cmFyIHZlcnNpXHUwMEYzbiBkZXRhbGxhZGEgZW4gbGEgY29uc29sYVxuICAgICAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XCIpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIltUYXNrTmF2aWdhdG9yXSBBQlJJRU5ETyBWSVNUQSBERSBOQVZFR0FDSVx1MDBEM04gREUgVEFSRUFTXCIpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XCIpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuREVCVUcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW1Rhc2tOYXZpZ2F0b3JdIE1vZG8gZGUgZGVwdXJhY2lcdTAwRjNuIEFDVElWQURPXCIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJbVGFza05hdmlnYXRvcl0gSW5mb3JtYWNpXHUwMEYzbiBkZWwgZW50b3JubzpcIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIi0gT2JzaWRpYW4gQVBJIHZlcnNpb246XCIsIHRoaXMuYXBwLnZlcnNpb24pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBVc2FyIHRyeS9jYXRjaCBwYXJhIGV2aXRhciBlcnJvcmVzIGVuIGxhIG9idGVuY2lcdTAwRjNuIGRlIGxhIHJ1dGEgYmFzZVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIi0gUnV0YSBkZSBsYSBiXHUwMEYzdmVkYTpcIiwgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5iYXNlUGF0aCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCItIFJ1dGEgZGUgbGEgYlx1MDBGM3ZlZGE6IE5vIGRpc3BvbmlibGVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiLSBBcmNoaXZvcyBlbiBsYSBiXHUwMEYzdmVkYTpcIiwgdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpLmxlbmd0aCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFZlcmlmaWNhciBxdWUgRW50aXR5VHlwZSBlc3RcdTAwRTEgY29ycmVjdGFtZW50ZSBpbXBvcnRhZG8gYW50ZXMgZGUgdXNhcmxvXG4gICAgICAgICAgICBpZiAodHlwZW9mIEVudGl0eVR5cGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgLy8gTW9zdHJhciBpbmZvcm1hY2lcdTAwRjNuIGRlIGJpYmxpb3RlY2FzIGRpc3BvbmlibGVzXG4gICAgICAgICAgICAgICAgY29uc3QgZW50aXR5VHlwZXMgPSBPYmplY3QudmFsdWVzKEVudGl0eVR5cGUpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiLSBUaXBvcyBkZSBlbnRpZGFkIGRpc3BvbmlibGVzOlwiLCBlbnRpdHlUeXBlcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiLSBUaXBvcyBkZSBlbnRpZGFkIGRpc3BvbmlibGVzOiBObyBzZSBwdWRvIGFjY2VkZXIgYSBFbnRpdHlUeXBlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBWZXJpZmljYXIgaW50ZWdyYWNpXHUwMEYzbiBkZSBzZXJ2aWNpb3NcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiLSBTZXJ2aWNpb3MgaW5pY2lhbGl6YWRvczpcIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIiAgKiBFbnRpdHlEZXRlY3RvcjpcIiwgISF0aGlzLmVudGl0eURldGVjdG9yKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiICAqIFRhc2tQYXJzZXI6XCIsICEhdGhpcy50YXNrUGFyc2VyKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiICAqIEhpZXJhcmNoeUJ1aWxkZXI6XCIsICEhdGhpcy5oaWVyYXJjaHlCdWlsZGVyKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiICAqIFRhc2tDbGFzc2lmaWVyOlwiLCAhIXRoaXMudGFza0NsYXNzaWZpZXIpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBNb3N0cmFyIG5vdGlmaWNhY2lcdTAwRjNuIGVuIGxhIFVJXG4gICAgICAgICAgICBuZXcgTm90aWNlKFwiVGFza05hdmlnYXRvcjogTW9kbyBkZSBkZXB1cmFjaVx1MDBGM24gYWN0aXZhZG9cIik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMubG9nKFwib25PcGVuKCkgbGxhbWFkbyAtIEFicmllbmRvIHZpc3RhXCIpO1xuICAgICAgICAvLyBNb3N0cmFyIG1lbnNhamUgZGUgY2FyZ2EgaW5pY2lhbFxuICAgICAgICB0aGlzLmNvbnRlbnRFbC5lbXB0eSgpO1xuICAgICAgICB0aGlzLmNvbnRlbnRFbC5hZGRDbGFzcygndGFzay1uYXZpZ2F0b3ItY29udGFpbmVyJyk7XG4gICAgICAgIHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6ICdDYXJnYW5kbyBuYXZlZ2Fkb3IgZGUgdGFyZWFzLi4uJywgY2xzOiAndGFzay1uYXZpZ2F0b3ItbG9hZGluZycgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBPYnRlbmVyIGVsIGFyY2hpdm8gZGUgY29udGV4dG8gZGVzZGUgZWwgZXN0YWRvIG8gdXNhciBlbCBhcmNoaXZvIGFjdGl2byBhY3R1YWxcbiAgICAgICAgaWYgKHRoaXMubGVhZi5nZXRWaWV3U3RhdGUoKS5zdGF0ZT8uY29udGV4dEZpbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHRQYXRoID0gdGhpcy5sZWFmLmdldFZpZXdTdGF0ZSgpLnN0YXRlLmNvbnRleHRGaWxlO1xuICAgICAgICAgICAgdGhpcy5sb2coXCJPYnRlbmllbmRvIGFyY2hpdm8gZGUgY29udGV4dG8gZGVsIGVzdGFkb1wiLCBjb250ZXh0UGF0aCk7XG4gICAgICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGNvbnRleHRQYXRoKTtcbiAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHRGaWxlID0gZmlsZTtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZyhcIkFyY2hpdm8gZGUgY29udGV4dG8gZXN0YWJsZWNpZG8gZGVzZGUgZWwgZXN0YWRvXCIsIGZpbGUucGF0aCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMud2FybihcIk5vIHNlIHB1ZG8gb2J0ZW5lciBlbCBhcmNoaXZvIGRlIGNvbnRleHRvIGRlbCBlc3RhZG9cIiwgY29udGV4dFBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IFxuICAgICAgICBcbiAgICAgICAgLy8gU2kgbm8gaGF5IGFyY2hpdm8gZGUgY29udGV4dG8gZW4gZWwgZXN0YWRvLCB1c2FyIGVsIGFyY2hpdm8gYWN0aXZvIGFjdHVhbFxuICAgICAgICBpZiAoIXRoaXMuY29udGV4dEZpbGUpIHtcbiAgICAgICAgICAgIHRoaXMubG9nKFwiSW50ZW50YW5kbyB1c2FyIGVsIGFyY2hpdm8gYWN0aXZvIGNvbW8gY29udGV4dG9cIik7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHRGaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHRGaWxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2coXCJBcmNoaXZvIGFjdGl2byBlc3RhYmxlY2lkbyBjb21vIGNvbnRleHRvXCIsIHRoaXMuY29udGV4dEZpbGUucGF0aCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMud2FybihcIk5vIGhheSBhcmNoaXZvIGFjdGl2byBwYXJhIHVzYXIgY29tbyBjb250ZXh0b1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ29uc3RydWlyIGxhIHZpc3RhIGluaWNpYWwgYmFzYWRhIGVuIGVsIGFyY2hpdm8gZGUgY29udGV4dG9cbiAgICAgICAgYXdhaXQgdGhpcy5yZWZyZXNoVmlldygpO1xuICAgICAgICBcbiAgICAgICAgLy8gQ29uZmlndXJhciBhY3R1YWxpemFjaVx1MDBGM24gcGVyaVx1MDBGM2RpY2EgKGNhZGEgMiBtaW51dG9zKVxuICAgICAgICB0aGlzLmxvZyhcIkNvbmZpZ3VyYW5kbyBhY3R1YWxpemFjaVx1MDBGM24gcGVyaVx1MDBGM2RpY2EgKDIgbWludXRvcylcIik7XG4gICAgICAgIHRoaXMucmVmcmVzaEludGVydmFsID0gd2luZG93LnNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9nKFwiRWplY3V0YW5kbyBhY3R1YWxpemFjaVx1MDBGM24gcGVyaVx1MDBGM2RpY2FcIik7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hWaWV3KCk7XG4gICAgICAgIH0sIDEyMDAwMCk7XG4gICAgICAgIFxuICAgICAgICAvLyBSZWdpc3RyYXIgbGlzdGVuZXJzIHBhcmEgZXZlbnRvcyBwZXJzb25hbGl6YWRvc1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ3VzdG9tRXZlbnRzKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIltUYXNrTmF2aWdhdG9yXSBFcnJvciBjclx1MDBFRHRpY28gZW4gb25PcGVuOlwiLCBlcnJvcik7XG4gICAgICAgIC8vIE1vc3RyYXIgbWVuc2FqZSBhbWlnYWJsZSBhbCB1c3VhcmlvXG4gICAgICAgIHRoaXMuY29udGVudEVsLmVtcHR5KCk7XG4gICAgICAgIGNvbnN0IGVycm9yQ29udGFpbmVyID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAndGFzay1uYXZpZ2F0b3ItZXJyb3InIH0pO1xuICAgICAgICBlcnJvckNvbnRhaW5lci5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6ICdFcnJvciBhbCBpbmljaWFyIGVsIE5hdmVnYWRvciBkZSBUYXJlYXMnIH0pO1xuICAgICAgICBlcnJvckNvbnRhaW5lci5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1NlIGhhIHByb2R1Y2lkbyB1biBlcnJvciBhbCBpbmljaWFyIGVsIG5hdmVnYWRvciBkZSB0YXJlYXMuJyB9KTtcbiAgICAgICAgZXJyb3JDb250YWluZXIuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6IGBEZXRhbGxlczogJHtlcnJvci5tZXNzYWdlfWAgfSk7XG4gICAgICAgIGVycm9yQ29udGFpbmVyLmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnQ29uc3VsdGEgbGEgY29uc29sYSBkZSBkZXNhcnJvbGxhZG9yIHBhcmEgbVx1MDBFMXMgaW5mb3JtYWNpXHUwMEYzbiAoQ3RybCtTaGlmdCtJKS4nIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gU3VnZXJlbmNpYSBwYXJhIHJlc29sdmVyIGVsIHByb2JsZW1hXG4gICAgICAgIGNvbnN0IGhlbHBTZWN0aW9uID0gZXJyb3JDb250YWluZXIuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAndGFzay1uYXZpZ2F0b3ItaGVscC1zZWN0aW9uJyB9KTtcbiAgICAgICAgaGVscFNlY3Rpb24uY3JlYXRlRWwoJ2g0JywgeyB0ZXh0OiAnUG9zaWJsZXMgc29sdWNpb25lczonIH0pO1xuICAgICAgICBjb25zdCBzdWdnZXN0aW9uc0xpc3QgPSBoZWxwU2VjdGlvbi5jcmVhdGVFbCgndWwnKTtcbiAgICAgICAgc3VnZ2VzdGlvbnNMaXN0LmNyZWF0ZUVsKCdsaScsIHsgdGV4dDogJ1JlaW5pY2lhIE9ic2lkaWFuIGUgaW50ZW50YSBudWV2YW1lbnRlLicgfSk7XG4gICAgICAgIHN1Z2dlc3Rpb25zTGlzdC5jcmVhdGVFbCgnbGknLCB7IHRleHQ6ICdWZXJpZmljYSBxdWUgdGllbmVzIGxhcyBcdTAwRkFsdGltYXMgdmVyc2lvbmVzIGRlIGxvcyBtXHUwMEYzZHVsb3MuJyB9KTtcbiAgICAgICAgc3VnZ2VzdGlvbnNMaXN0LmNyZWF0ZUVsKCdsaScsIHsgdGV4dDogJ0NvbXBydWViYSBzaSBoYXkgdGFyZWFzIGVuIGxhIG5vdGEgYWN0dWFsIGVuIGZvcm1hdG8gY29ycmVjdG8gKC0gWyBdIFRleHRvIGRlIGxhIHRhcmVhKS4nIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQm90XHUwMEYzbiBwYXJhIHJlY2FyZ2FyXG4gICAgICAgIGNvbnN0IHJlbG9hZEJ1dHRvbiA9IGVycm9yQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IFxuICAgICAgICAgICAgdGV4dDogJ0ludGVudGFyIG51ZXZhbWVudGUnLCBcbiAgICAgICAgICAgIGNsczogJ3Rhc2stbmF2aWdhdG9yLXJlZnJlc2gtYnV0dG9uJyBcbiAgICAgICAgfSk7XG4gICAgICAgIHJlbG9hZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuICAgIFxuICAgIC8qKlxuICAgICAqIFJlZ2lzdHJhIGxpc3RlbmVycyBwYXJhIGV2ZW50b3MgcGVyc29uYWxpemFkb3NcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlZ2lzdGVyQ3VzdG9tRXZlbnRzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmxvZyhcIlJlZ2lzdHJhbmRvIGV2ZW50b3MgcGVyc29uYWxpemFkb3NcIik7XG4gICAgICAgIC8vIEV2ZW50byBwYXJhIGVuZm9jYXIgZW4gdW5hIGVudGlkYWQgZXNwZWNcdTAwRURmaWNhXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Rhc2stbmF2aWdhdG9yLWZvY3VzLWVudGl0eScsIHRoaXMuaGFuZGxlRm9jdXNFbnRpdHkpO1xuICAgICAgICBcbiAgICAgICAgLy8gRXZlbnRvIHBhcmEgbW9zdHJhciB0YXJlYXMgdmVuY2lkYXNcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndGFzay1uYXZpZ2F0b3Itc2hvdy1vdmVyZHVlJywgdGhpcy5oYW5kbGVTaG93T3ZlcmR1ZSk7XG4gICAgICAgIFxuICAgICAgICAvLyBFdmVudG8gcGFyYSBhY3R1YWxpemFyIGxhIHZpc3RhXG4gICAgICAgIHRoaXMuY29udGVudEVsLmFkZEV2ZW50TGlzdGVuZXIoJ3Rhc2stbmF2aWdhdG9yLXJlZnJlc2gnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmxvZyhcIkV2ZW50byB0YXNrLW5hdmlnYXRvci1yZWZyZXNoIHJlY2liaWRvXCIpO1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoVmlldygpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEV2ZW50byBwYXJhIGNhbWJpYXIgZWwgbW9kbyBkZSB2aXN0YVxuICAgICAgICB0aGlzLmNvbnRlbnRFbC5hZGRFdmVudExpc3RlbmVyKCd0YXNrLW5hdmlnYXRvci12aWV3LWNoYW5nZScsIChldmVudDogQ3VzdG9tRXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9nKFwiRXZlbnRvIHRhc2stbmF2aWdhdG9yLXZpZXctY2hhbmdlIHJlY2liaWRvXCIsIGV2ZW50LmRldGFpbCk7XG4gICAgICAgICAgICBpZiAoZXZlbnQuZGV0YWlsPy52aWV3TW9kZSAmJiB0aGlzLmN1cnJlbnRNb2RlbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudE1vZGVsLnZpZXdNb2RlID0gZXZlbnQuZGV0YWlsLnZpZXdNb2RlO1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyQ3VycmVudFZpZXcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFNlIGVqZWN1dGEgY3VhbmRvIGxhIHZpc3RhIHNlIGNpZXJyYVxuICAgICAqL1xuICAgIG9uQ2xvc2UoKTogdm9pZCB7XG4gICAgICAgIHRoaXMubG9nKFwib25DbG9zZSgpIGxsYW1hZG8gLSBDZXJyYW5kbyB2aXN0YVwiKTtcbiAgICAgICAgLy8gTGltcGlhciBlbCBpbnRlcnZhbG8gZGUgYWN0dWFsaXphY2lcdTAwRjNuXG4gICAgICAgIGlmICh0aGlzLnJlZnJlc2hJbnRlcnZhbCkge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnJlZnJlc2hJbnRlcnZhbCk7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hJbnRlcnZhbCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmxvZyhcIkludGVydmFsbyBkZSBhY3R1YWxpemFjaVx1MDBGM24gZWxpbWluYWRvXCIpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBMaW1waWFyIGxpc3RlbmVycyBwZXJzb25hbGl6YWRvc1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0YXNrLW5hdmlnYXRvci1mb2N1cy1lbnRpdHknLCB0aGlzLmhhbmRsZUZvY3VzRW50aXR5KTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGFzay1uYXZpZ2F0b3Itc2hvdy1vdmVyZHVlJywgdGhpcy5oYW5kbGVTaG93T3ZlcmR1ZSk7XG4gICAgICAgIHRoaXMubG9nKFwiRXZlbnRvcyBwZXJzb25hbGl6YWRvcyBlbGltaW5hZG9zXCIpO1xuICAgIH1cbiAgICBcbiAvKipcbiAqIEFjdHVhbGl6YSBsYSB2aXN0YSBjb24gbG9zIGRhdG9zIG1cdTAwRTFzIHJlY2llbnRlc1xuICovXG5hc3luYyByZWZyZXNoVmlldygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLmxvZyhcInJlZnJlc2hWaWV3KCkgbGxhbWFkbyAtIEFjdHVhbGl6YW5kbyB2aXN0YVwiKTtcbiAgICBcbiAgICAvLyBDb250ZW5lZG9yIHBhcmEgbWVuc2FqZXMgZGUgY2FyZ2FcbiAgICBjb25zdCBsb2FkaW5nSW5kaWNhdG9yID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRWwoJ2RpdicsIHsgXG4gICAgICAgIGNsczogJ3Rhc2stbmF2aWdhdG9yLWxvYWRpbmcnXG4gICAgfSk7XG4gICAgY29uc3QgbG9hZGluZ1NwaW5uZXIgPSBsb2FkaW5nSW5kaWNhdG9yLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICAgIGNsczogJ3Rhc2stbmF2aWdhdG9yLXNwaW5uZXInXG4gICAgfSk7XG4gICAgY29uc3QgbG9hZGluZ1RleHQgPSBsb2FkaW5nSW5kaWNhdG9yLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICAgIHRleHQ6ICdBY3R1YWxpemFuZG8gZGF0b3MuLi4nXG4gICAgfSk7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgICAgLy8gTW9zdHJhciBwcm9ncmVzb1xuICAgICAgICBjb25zdCB1cGRhdGVMb2FkaW5nVGV4dCA9ICh0ZXh0OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIGxvYWRpbmdUZXh0LnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIC8vIERldGVjdGFyIGVsIHRpcG8gZGUgZW50aWRhZCBkZWwgYXJjaGl2byBkZSBjb250ZXh0b1xuICAgICAgICBsZXQgZW50aXR5Q29udGV4dCA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLmNvbnRleHRGaWxlKSB7XG4gICAgICAgICAgICB1cGRhdGVMb2FkaW5nVGV4dChcIkRldGVjdGFuZG8gdGlwbyBkZSBlbnRpZGFkIGRlbCBhcmNoaXZvIGRlIGNvbnRleHRvLi4uXCIpO1xuICAgICAgICAgICAgdGhpcy5sb2coXCJEZXRlY3RhbmRvIHRpcG8gZGUgZW50aWRhZCBkZWwgYXJjaGl2byBkZSBjb250ZXh0b1wiLCB0aGlzLmNvbnRleHRGaWxlLnBhdGgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGVudGl0eUNvbnRleHQgPSBhd2FpdCB0aGlzLmVudGl0eURldGVjdG9yLmRldGVjdEVudGl0eUZyb21GaWxlKHRoaXMuY29udGV4dEZpbGUpO1xuICAgICAgICAgICAgICAgIGlmIChlbnRpdHlDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nKFwiRW50aWRhZCBkZSBjb250ZXh0byBkZXRlY3RhZGFcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZW50aXR5Q29udGV4dC50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGVudGl0eUNvbnRleHQudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlOiBlbnRpdHlDb250ZXh0LmZpbGUucGF0aFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlTG9hZGluZ1RleHQoYEVudGlkYWQgZGV0ZWN0YWRhOiAke2VudGl0eUNvbnRleHQudGl0bGV9ICgke2VudGl0eUNvbnRleHQudHlwZX0pYCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53YXJuKFwiTm8gc2UgcHVkbyBkZXRlY3RhciB1bmEgZW50aWRhZCBwYXJhIGVsIGFyY2hpdm8gZGUgY29udGV4dG9cIik7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUxvYWRpbmdUZXh0KFwiTm8gc2UgcHVkbyBkZXRlY3RhciB1bmEgZW50aWRhZCBlc3BlY1x1MDBFRGZpY2EuIE1vc3RyYW5kbyB2aXN0YSBnbG9iYWwuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yKFwiRXJyb3IgYWwgZGV0ZWN0YXIgZW50aWRhZFwiLCBlKTtcbiAgICAgICAgICAgICAgICB1cGRhdGVMb2FkaW5nVGV4dChcIkVycm9yIGFsIGRldGVjdGFyIGVudGlkYWQuIENvbnRpbnVhbmRvIGNvbiB2aXN0YSBnbG9iYWwuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy53YXJuKFwiTm8gaGF5IGFyY2hpdm8gZGUgY29udGV4dG8gcGFyYSBkZXRlY3RhciBlbnRpZGFkXCIpO1xuICAgICAgICAgICAgdXBkYXRlTG9hZGluZ1RleHQoXCJObyBoYXkgYXJjaGl2byBkZSBjb250ZXh0by4gTW9zdHJhbmRvIHZpc3RhIGdsb2JhbC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFZlcmlmaWNhY2lcdTAwRjNuIGRpcmVjdGEgZGUgdGFyZWFzIGVuIGVsIGFyY2hpdm8gZGUgY29udGV4dG8gYXVucXVlIG5vIHNlIGRldGVjdGUgY29tbyBlbnRpZGFkXG4gICAgICAgIGlmICh0aGlzLmNvbnRleHRGaWxlICYmICFlbnRpdHlDb250ZXh0KSB7XG4gICAgICAgICAgICB0aGlzLmxvZyhcIlZlcmlmaWNhbmRvIHRhcmVhcyBkaXJlY3RhbWVudGUgZW4gZWwgYXJjaGl2byBkZSBjb250ZXh0b1wiKTtcbiAgICAgICAgICAgIHVwZGF0ZUxvYWRpbmdUZXh0KFwiVmVyaWZpY2FuZG8gdGFyZWFzIGRpcmVjdGFtZW50ZSBlbiBlbCBhcmNoaXZvLi4uXCIpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhc2tzID0gYXdhaXQgdGhpcy50YXNrUGFyc2VyLmV4dHJhY3RUYXNrc0Zyb21GaWxlKHRoaXMuY29udGV4dEZpbGUpO1xuICAgICAgICAgICAgICAgIGlmICh0YXNrcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nKGBTZSBlbmNvbnRyYXJvbiAke3Rhc2tzLmxlbmd0aH0gdGFyZWFzIGRpcmVjdGFtZW50ZSBlbiBlbCBhcmNoaXZvYCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBDcmVhciB1bmEgZW50aWRhZCBnZW5cdTAwRTlyaWNhIHBhcmEgY29udGVuZXIgZXN0YXMgdGFyZWFzXG4gICAgICAgICAgICAgICAgICAgIC8vIEVzdG8gcGVybWl0aXJcdTAwRTEgbW9zdHJhciBsYXMgdGFyZWFzIGF1bnF1ZSBubyBzZSByZWNvbm96Y2EgZWwgdGlwbyBkZSBlbnRpZGFkXG4gICAgICAgICAgICAgICAgICAgIGVudGl0eUNvbnRleHQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogdGhpcy5jb250ZXh0RmlsZS5iYXNlbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEVudGl0eVR5cGUuVU5LTk9XTixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aGlzLmNvbnRleHRGaWxlLmJhc2VuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQXJjaGl2byBjb24gdGFyZWFzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlOiB0aGlzLmNvbnRleHRGaWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IEVudGl0eVN0YXRlLlVOS05PV04sXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrczogdGFza3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YToge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRUb3RhbFRhc2tDb3VudDogKCkgPT4gdGFza3MubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0UGVuZGluZ1Rhc2tDb3VudDogKCkgPT4gdGFza3MuZmlsdGVyKHQgPT4gIXQuY29tcGxldGVkKS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRUYXNrOiAodGFzaykgPT4geyAvKiBuby1vcCAqLyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2hpbGQ6IChjaGlsZCkgPT4geyAvKiBuby1vcCAqLyB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZyhcIkNyZWFkYSBlbnRpZGFkIGdlblx1MDBFOXJpY2EgY29uIHRhcmVhczpcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGVudGl0eUNvbnRleHQudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrczogZW50aXR5Q29udGV4dC50YXNrcy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53YXJuKFwiTm8gc2UgZW5jb250cmFyb24gdGFyZWFzIGRpcmVjdGFtZW50ZSBlbiBlbCBhcmNoaXZvXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yKFwiRXJyb3IgYWwgdmVyaWZpY2FyIHRhcmVhcyBkaXJlY3RhbWVudGVcIiwgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIENvbnN0cnVpciBlbCBtb2RlbG8gZGUgamVyYXJxdVx1MDBFRGFcbiAgICAgICAgdXBkYXRlTG9hZGluZ1RleHQoXCJDb25zdHJ1eWVuZG8gbW9kZWxvIGRlIGplcmFycXVcdTAwRURhLi4uXCIpO1xuICAgICAgICB0aGlzLmxvZyhcIkNvbnN0cnV5ZW5kbyBtb2RlbG8gZGUgamVyYXJxdVx1MDBFRGFcIik7XG4gICAgICAgIHRoaXMuY3VycmVudE1vZGVsID0gYXdhaXQgdGhpcy5oaWVyYXJjaHlCdWlsZGVyLmJ1aWxkSGllcmFyY2h5KGVudGl0eUNvbnRleHQpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudE1vZGVsKSB7XG4gICAgICAgICAgICB1cGRhdGVMb2FkaW5nVGV4dChgTW9kZWxvIGNvbnN0cnVpZG8gY29uICR7dGhpcy5jdXJyZW50TW9kZWwuYWxsRW50aXRpZXMubGVuZ3RofSBlbnRpZGFkZXMuYCk7XG4gICAgICAgICAgICB0aGlzLmxvZyhcIk1vZGVsbyBkZSBqZXJhcnF1XHUwMEVEYSBjb25zdHJ1aWRvXCIsIHtcbiAgICAgICAgICAgICAgICBlbnRpdGllc0NvdW50OiB0aGlzLmN1cnJlbnRNb2RlbC5hbGxFbnRpdGllcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgcm9vdEVudGl0aWVzQ291bnQ6IHRoaXMuY3VycmVudE1vZGVsLnJvb3RFbnRpdGllcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgZm9jdXNFbnRpdHk6IHRoaXMuY3VycmVudE1vZGVsLmZvY3VzRW50aXR5ID8gdGhpcy5jdXJyZW50TW9kZWwuZm9jdXNFbnRpdHkudGl0bGUgOiAnbmluZ3VuYSdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDbGFzaWZpY2FyIGxhcyB0YXJlYXMgc2VnXHUwMEZBbiByZWdsYXMgR1REXG4gICAgICAgICAgICB1cGRhdGVMb2FkaW5nVGV4dChcIkNsYXNpZmljYW5kbyB0YXJlYXMgc2VnXHUwMEZBbiByZWdsYXMgR1RELi4uXCIpO1xuICAgICAgICAgICAgdGhpcy5sb2coXCJDbGFzaWZpY2FuZG8gdGFyZWFzIHNlZ1x1MDBGQW4gcmVnbGFzIEdURFwiKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudGFza0NsYXNzaWZpZXIuY2xhc3NpZnlUYXNrcyh0aGlzLmN1cnJlbnRNb2RlbCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENvbXByb2JhciBzaSBoYXkgdGFyZWFzXG4gICAgICAgICAgICBjb25zdCB0b3RhbFRhc2tzID0gdGhpcy5jdXJyZW50TW9kZWwuYWxsVGFza3MubGVuZ3RoO1xuICAgICAgICAgICAgdXBkYXRlTG9hZGluZ1RleHQoYENsYXNpZmljYWNpXHUwMEYzbiBjb21wbGV0YWRhOiAke3RvdGFsVGFza3N9IHRhcmVhcyBlbmNvbnRyYWRhcy5gKTtcbiAgICAgICAgICAgIHRoaXMubG9nKFwiVGFyZWFzIGNsYXNpZmljYWRhc1wiLCB7XG4gICAgICAgICAgICAgICAgdG90YWxUYXNrczogdG90YWxUYXNrcyxcbiAgICAgICAgICAgICAgICBpbmJveFRhc2tzOiB0aGlzLmN1cnJlbnRNb2RlbC5ndGRMaXN0cy5nZXQoJ2luYm94Jyk/Lmxlbmd0aCB8fCAwLFxuICAgICAgICAgICAgICAgIG5leHRBY3Rpb25zVGFza3M6IHRoaXMuY3VycmVudE1vZGVsLmd0ZExpc3RzLmdldCgnbmV4dEFjdGlvbnMnKT8ubGVuZ3RoIHx8IDAsXG4gICAgICAgICAgICAgICAgLy8gTW9zdHJhciBvdHJhcyBsaXN0YXMgR1RELi4uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRGVidWc6IE1vc3RyYXIgdW5hIGFsZXJ0YSBzaSBubyBzZSBlbmN1ZW50cmFuIHRhcmVhc1xuICAgICAgICAgICAgaWYgKHRvdGFsVGFza3MgPT09IDAgJiYgdGhpcy5ERUJVRykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIltUYXNrTmF2aWdhdG9yXSBBTEVSVEE6IE5vIHNlIGVuY29udHJhcm9uIHRhcmVhcyBlbiBlbCBtb2RlbG9cIik7XG4gICAgICAgICAgICAgICAgaWYgKGVudGl0eUNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiW1Rhc2tOYXZpZ2F0b3JdIEFyY2hpdm8gZGUgY29udGV4dG86XCIsIGVudGl0eUNvbnRleHQuZmlsZS5wYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiW1Rhc2tOYXZpZ2F0b3JdIENvbnRlbmlkbyBkZSBsYSBlbnRpZGFkOlwiLCBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGVudGl0eUNvbnRleHQuZmlsZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVm9sY2FyIGluZm9ybWFjaVx1MDBGM24gZGV0YWxsYWRhIHBhcmEgZGVwdXJhY2lcdTAwRjNuXG4gICAgICAgICAgICBpZiAodGhpcy5ERUJVRykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiPT09IFZPTENBRE8gREVUQUxMQURPIERFTCBNT0RFTE8gREUgSkVSQVJRVVx1MDBDREEgPT09XCIpO1xuICAgICAgICAgICAgICAgIERlYnVnVXRpbHMuZHVtcE1vZGVsSW5mbyh0aGlzLmN1cnJlbnRNb2RlbCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCI9PT0gRklOIERFTCBWT0xDQURPID09PVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gTW9zdHJhciBpbmZvcm1hY2lcdTAwRjNuIGRlIHRhcmVhcyBwYXJhIGxhIGVudGlkYWQgZm9jYWxcbiAgICAgICAgICAgIGlmICh0aGlzLkRFQlVHICYmIGVudGl0eUNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIj09PSBUQVJFQVMgRU4gTEEgRU5USURBRCBGT0NBTCA9PT1cIik7XG4gICAgICAgICAgICAgICAgZW50aXR5Q29udGV4dC50YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVGFyZWE6IFwiJHt0YXNrLnRleHR9XCIsIENvbXBsZXRhZGE6ICR7dGFzay5jb21wbGV0ZWR9LCBMaXN0YTogJHt0YXNrLmxpc3RUeXBlIHx8ICdTaW4gY2xhc2lmaWNhcid9YCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCI9PT0gRklOIERFIFRBUkVBUyBFTiBFTlRJREFEIEZPQ0FMID09PVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gUmVzdGF1cmFyIGZpbHRyb3MgZGVsIGVzdGFkbyBzaSBleGlzdGVuXG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMubGVhZi5nZXRWaWV3U3RhdGUoKS5zdGF0ZTtcbiAgICAgICAgICAgIGlmIChzdGF0ZT8uY3VycmVudEZpbHRlcnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZyhcIlJlc3RhdXJhbmRvIGZpbHRyb3MgZGVsIGVzdGFkb1wiLCBzdGF0ZS5jdXJyZW50RmlsdGVycyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50TW9kZWwuZmlsdGVycyA9IHN0YXRlLmN1cnJlbnRGaWx0ZXJzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBTaSBubyBoYXkgZmlsdHJvcyBndWFyZGFkb3MsIGVzdGFibGVjZXIgZmlsdHJvcyBwb3IgZGVmZWN0b1xuICAgICAgICAgICAgICAgIC8vIHF1ZSBnYXJhbnRpY2VuIHF1ZSBzZSBtdWVzdHJlbiB0b2RhcyBsYXMgZW50aWRhZGVzIHkgdGFyZWFzXG4gICAgICAgICAgICAgICAgdGhpcy5sb2coXCJFc3RhYmxlY2llbmRvIGZpbHRyb3MgcG9yIGRlZmVjdG8gcGFyYSBtb3N0cmFyIHRvZG9cIik7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50TW9kZWwuZmlsdGVycyA9IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0NvbXBsZXRlZDogdHJ1ZSwgICAgICAgIC8vIE1vc3RyYXIgdGFyZWFzIGNvbXBsZXRhZGFzXG4gICAgICAgICAgICAgICAgICAgIHNob3dBY3RpdmU6IHRydWUsICAgICAgICAgICAvLyBNb3N0cmFyIGVudGlkYWRlcyBhY3RpdmFzXG4gICAgICAgICAgICAgICAgICAgIHNob3dQYXVzZWQ6IHRydWUsICAgICAgICAgICAvLyBNb3N0cmFyIGVudGlkYWRlcyBwYXVzYWRhc1xuICAgICAgICAgICAgICAgICAgICBzaG93U3RvcHBlZDogdHJ1ZSwgICAgICAgICAgLy8gTW9zdHJhciBlbnRpZGFkZXMgZGV0ZW5pZGFzXG4gICAgICAgICAgICAgICAgICAgIHNob3dBcmNoaXZlZDogdHJ1ZSwgICAgICAgICAvLyBNb3N0cmFyIGVudGlkYWRlcyBhcmNoaXZhZGFzXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBzaG93QXJlYXNWaWRhOiB0cnVlLCAgICAgICAgLy8gTW9zdHJhciBcdTAwQzFyZWFzIGRlIFZpZGFcbiAgICAgICAgICAgICAgICAgICAgc2hvd0FyZWFzSW50ZXJlczogdHJ1ZSwgICAgIC8vIE1vc3RyYXIgXHUwMEMxcmVhcyBkZSBJbnRlclx1MDBFOXMgXG4gICAgICAgICAgICAgICAgICAgIHNob3dQcm95ZWN0b3NROiB0cnVlLCAgICAgICAvLyBNb3N0cmFyIFByb3llY3RvcyBRXG4gICAgICAgICAgICAgICAgICAgIHNob3dQcm95ZWN0b3NHVEQ6IHRydWUsICAgICAvLyBNb3N0cmFyIFByb3llY3RvcyBHVERcbiAgICAgICAgICAgICAgICAgICAgc2hvd090aGVyRW50aXRpZXM6IHRydWUsICAgIC8vIE1vc3RyYXIgb3RyYXMgZW50aWRhZGVzXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0czogW10sICAgICAgICAgICAgICAgLy8gU2luIGZpbHRybyBkZSBjb250ZXh0b3MgZXNwZWNcdTAwRURmaWNvc1xuICAgICAgICAgICAgICAgICAgICBwZW9wbGU6IFtdLCAgICAgICAgICAgICAgICAgLy8gU2luIGZpbHRybyBkZSBwZXJzb25hcyBlc3BlY1x1MDBFRGZpY2FzXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkTGlzdHM6IE9iamVjdC52YWx1ZXMoVGFza0xpc3RUeXBlKSwgLy8gVG9kYXMgbGFzIGxpc3RhcyBHVERcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaFRleHQ6ICcnLCAgICAgICAgICAgICAvLyBTaW4gdGV4dG8gZGUgYlx1MDBGQXNxdWVkYVxuICAgICAgICAgICAgICAgICAgICBkYXlzUmFuZ2U6IDMwICAgICAgICAgICAgICAgLy8gTWF5b3IgcmFuZ28gZGUgZFx1MDBFRGFzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gUmVzdGF1cmFyIG1vZG8gZGUgdmlzdGFcbiAgICAgICAgICAgIGlmIChzdGF0ZT8udmlld01vZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZyhcIlJlc3RhdXJhbmRvIG1vZG8gZGUgdmlzdGEgZGVsIGVzdGFkb1wiLCBzdGF0ZS52aWV3TW9kZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50TW9kZWwudmlld01vZGUgPSBzdGF0ZS52aWV3TW9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQXBsaWNhciBmaWx0cm9zIHBhcmEgYWN0dWFsaXphciBlbCBtb2RlbG8gZmlsdHJhZG9cbiAgICAgICAgICAgIHRoaXMuY3VycmVudE1vZGVsLmFwcGx5RmlsdGVycyh0aGlzLmN1cnJlbnRNb2RlbC5maWx0ZXJzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMud2FybihcIk5vIHNlIHB1ZG8gY29uc3RydWlyIGVsIG1vZGVsbyBkZSBqZXJhcnF1XHUwMEVEYVwiKTtcbiAgICAgICAgICAgIHVwZGF0ZUxvYWRpbmdUZXh0KFwiRXJyb3IgYWwgY29uc3RydWlyIGVsIG1vZGVsbyBkZSBqZXJhcnF1XHUwMEVEYS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIExpbXBpYXIgbGEgdmlzdGEgYWN0dWFsXG4gICAgICAgIHRoaXMuY29udGVudEVsLmVtcHR5KCk7XG4gICAgICAgIFxuICAgICAgICAvLyBSZW5kZXJpemFyIGxhIG51ZXZhIHZpc3RhXG4gICAgICAgIHRoaXMucmVuZGVyQ3VycmVudFZpZXcoKTtcbiAgICAgICAgXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5lcnJvcignRXJyb3IgYWwgYWN0dWFsaXphciB2aXN0YSBkZSBUYXNrTmF2aWdhdG9yJywgZXJyb3IpO1xuICAgICAgICB0aGlzLmNvbnRlbnRFbC5lbXB0eSgpO1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXIgdW4gbWVuc2FqZSBkZSBlcnJvciBkZXRhbGxhZG9cbiAgICAgICAgY29uc3QgZXJyb3JFbCA9IHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICAgICAgICBjbHM6ICd0YXNrLW5hdmlnYXRvci1lcnJvcidcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBlcnJvckVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ0Vycm9yIGFsIGFjdHVhbGl6YXIgZWwgTmF2ZWdhZG9yIGRlIFRhcmVhcycgfSk7XG4gICAgICAgIGVycm9yRWwuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6IGBNZW5zYWplOiAke2Vycm9yLm1lc3NhZ2V9YCB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIE1vc3RyYXIgbGEgcGlsYSBkZSBsbGFtYWRhcyBzaSBlc3RcdTAwRTEgZGlzcG9uaWJsZVxuICAgICAgICBpZiAoZXJyb3Iuc3RhY2spIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrQ29udGFpbmVyID0gZXJyb3JFbC5jcmVhdGVFbCgnZGV0YWlscycpO1xuICAgICAgICAgICAgc3RhY2tDb250YWluZXIuY3JlYXRlRWwoJ3N1bW1hcnknLCB7IHRleHQ6ICdEZXRhbGxlcyB0XHUwMEU5Y25pY29zIChwYXJhIGRlc2Fycm9sbGFkb3JlcyknIH0pO1xuICAgICAgICAgICAgY29uc3QgcHJlID0gc3RhY2tDb250YWluZXIuY3JlYXRlRWwoJ3ByZScpO1xuICAgICAgICAgICAgcHJlLmNyZWF0ZUVsKCdjb2RlJywgeyB0ZXh0OiBlcnJvci5zdGFjayB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQm90XHUwMEYzbiBwYXJhIHJlaW50ZW50YXJcbiAgICAgICAgY29uc3QgcmV0cnlCdXR0b24gPSBlcnJvckVsLmNyZWF0ZUVsKCdidXR0b24nLCB7XG4gICAgICAgICAgICB0ZXh0OiAnUmVpbnRlbnRhcicsXG4gICAgICAgICAgICBjbHM6ICd0YXNrLW5hdmlnYXRvci1yZWZyZXNoLWJ1dHRvbidcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICByZXRyeUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuICAgIFxuICAgIC8qKlxuICAgICAqIFJlbmRlcml6YSBsYSB2aXN0YSBjb24gZWwgbW9kZWxvIGFjdHVhbFxuICAgICAqL1xuICAgIHByaXZhdGUgcmVuZGVyQ3VycmVudFZpZXcoKTogdm9pZCB7XG4gICAgICAgIHRoaXMubG9nKFwicmVuZGVyQ3VycmVudFZpZXcoKSBsbGFtYWRvIC0gUmVuZGVyaXphbmRvIHZpc3RhXCIpO1xuICAgICAgICBpZiAoIXRoaXMuY3VycmVudE1vZGVsKSB7XG4gICAgICAgICAgICB0aGlzLndhcm4oXCJObyBoYXkgbW9kZWxvIHBhcmEgcmVuZGVyaXphclwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gTGltcGlhciBsYSB2aXN0YSBhY3R1YWxcbiAgICAgICAgdGhpcy5jb250ZW50RWwuZW1wdHkoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFJlbmRlcml6YXIgbGEgbnVldmEgdmlzdGFcbiAgICAgICAgdGhpcy5sb2coXCJSZW5kZXJpemFuZG8gdmlzdGEgY29uIFZpZXdSZW5kZXJlclwiKTtcbiAgICAgICAgdGhpcy52aWV3UmVuZGVyZXIucmVuZGVyKHRoaXMuY29udGVudEVsLCB0aGlzLmN1cnJlbnRNb2RlbCwgdGhpcy5maWx0ZXJQYW5lbCk7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIEFwbGljYSBsb3MgZmlsdHJvcyBzZWxlY2Npb25hZG9zIHBvciBlbCB1c3VhcmlvXG4gICAgICovXG4gICAgcHJpdmF0ZSBhcHBseUZpbHRlcnMoZmlsdGVyczogYW55KTogdm9pZCB7XG4gICAgICAgIHRoaXMubG9nKFwiYXBwbHlGaWx0ZXJzKCkgbGxhbWFkbyAtIEFwbGljYW5kbyBmaWx0cm9zXCIsIGZpbHRlcnMpO1xuICAgICAgICBpZiAoIXRoaXMuY3VycmVudE1vZGVsKSB7XG4gICAgICAgICAgICB0aGlzLndhcm4oXCJObyBoYXkgbW9kZWxvIHBhcmEgYXBsaWNhciBmaWx0cm9zXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBBcGxpY2FyIGZpbHRyb3MgYWwgbW9kZWxvIGFjdHVhbFxuICAgICAgICB0aGlzLmN1cnJlbnRNb2RlbC5hcHBseUZpbHRlcnMoZmlsdGVycyk7XG4gICAgICAgIFxuICAgICAgICAvLyBSZS1yZW5kZXJpemFyIGxhIHZpc3RhIGNvbiBsb3MgZmlsdHJvcyBhcGxpY2Fkb3NcbiAgICAgICAgdGhpcy5yZW5kZXJDdXJyZW50VmlldygpO1xuICAgIH1cbiAgICBcbiAgICAvLyBIYW5kbGVycyBwYXJhIGV2ZW50b3MgcGVyc29uYWxpemFkb3MgKGRlZmluaWRvcyBjb21vIHByb3BpZWRhZGVzIGRlIGNsYXNlIHBhcmEgcG9kZXIgZWxpbWluYXJsb3MpXG4gICAgcHJpdmF0ZSBoYW5kbGVGb2N1c0VudGl0eSA9IChldmVudDogQ3VzdG9tRXZlbnQpID0+IHtcbiAgICAgICAgdGhpcy5sb2coXCJoYW5kbGVGb2N1c0VudGl0eSgpIGxsYW1hZG8gLSBFdmVudG8gcmVjaWJpZG9cIiwgZXZlbnQuZGV0YWlsKTtcbiAgICAgICAgaWYgKGV2ZW50LmRldGFpbD8uZmlsZVBhdGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZXZlbnQuZGV0YWlsLmZpbGVQYXRoKTtcbiAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZyhcIk51ZXZvIGFyY2hpdm8gZGUgY29udGV4dG8gZXN0YWJsZWNpZG9cIiwgZmlsZS5wYXRoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHRGaWxlID0gZmlsZTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hWaWV3KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMud2FybihcIk5vIHNlIHB1ZG8gZW5jb250cmFyIGVsIGFyY2hpdm8gcGFyYSBlbmZvY2FyXCIsIGV2ZW50LmRldGFpbC5maWxlUGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIHByaXZhdGUgaGFuZGxlU2hvd092ZXJkdWUgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIHRoaXMubG9nKFwiaGFuZGxlU2hvd092ZXJkdWUoKSBsbGFtYWRvIC0gTW9zdHJhbmRvIHRhcmVhcyB2ZW5jaWRhc1wiKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEFxdVx1MDBFRCBwb2RyXHUwMEVEYSBpbnRlZ3JhcnNlIGNvbiBlbCBUYXNrTWFuYWdlckludGVncmF0aW9uIHBhcmEgY2FyZ2FyIHRhcmVhcyB2ZW5jaWRhc1xuICAgICAgICAgICAgLy8gcG9yIGVqZW1wbG86XG4gICAgICAgICAgICAvLyBjb25zdCB0YXNrTWFuYWdlckludGVncmF0aW9uID0gdGhpcy5wbHVnaW4udGFza05hdmlnYXRvck1vZHVsZS5nZXRUYXNrTWFuYWdlckludGVncmF0aW9uKCk7XG4gICAgICAgICAgICAvLyBjb25zdCBvdmVyZHVlVGFza3MgPSBhd2FpdCB0YXNrTWFuYWdlckludGVncmF0aW9uLmxvYWRPdmVyZHVlVGFza3MoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gUG9yIGFob3JhLCBzaW1wbGVtZW50ZSBhY3R1YWxpemFtb3MgbGEgdmlzdGEgeSBhcGxpY2Ftb3MgdW4gZmlsdHJvXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnJlZnJlc2hWaWV3KCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRNb2RlbCkge1xuICAgICAgICAgICAgICAgIC8vIEZpbHRyYXIgcGFyYSBtb3N0cmFyIHNvbG8gdGFyZWFzIHZlbmNpZGFzXG4gICAgICAgICAgICAgICAgdGhpcy5sb2coXCJBcGxpY2FuZG8gZmlsdHJvIHBhcmEgdGFyZWFzIHZlbmNpZGFzXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudE1vZGVsLmFwcGx5RmlsdGVycyh7XG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaFRleHQ6IFwidmVuY2lkYVwiLCAvLyBFc3RvIGVzIHVuIGVqZW1wbG8gc2ltcGxlXG4gICAgICAgICAgICAgICAgICAgIC8vIE90cm9zIGZpbHRyb3MgbmVjZXNhcmlvcy4uLlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyQ3VycmVudFZpZXcoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy53YXJuKFwiTm8gaGF5IG1vZGVsbyBwYXJhIG1vc3RyYXIgdGFyZWFzIHZlbmNpZGFzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5lcnJvcihcIkVycm9yIGFsIG1vc3RyYXIgdGFyZWFzIHZlbmNpZGFzXCIsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH07XG59IiwgIi8vIHNyYy9tb2R1bGVzL3Rhc2tOYXZpZ2F0b3Ivc2VydmljZXMvVGFza0hpZXJhcmNoeUJ1aWxkZXIudHNcblxuaW1wb3J0IHsgUGx1Z2luLCBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IEVudGl0eURldGVjdG9yIH0gZnJvbSAnLi9FbnRpdHlEZXRlY3Rvcic7XG5pbXBvcnQgeyBUYXNrUGFyc2VyIH0gZnJvbSAnLi9UYXNrUGFyc2VyJztcbmltcG9ydCB7IElFbnRpdHksIEVudGl0eVR5cGUsIEVudGl0eSB9IGZyb20gJy4uL21vZGVscy9FbnRpdHknO1xuaW1wb3J0IHsgSGllcmFyY2h5Vmlld01vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL0hpZXJhcmNoeVZpZXdNb2RlbCc7XG5pbXBvcnQgeyBUYXNrIH0gZnJvbSAnLi4vbW9kZWxzL1Rhc2snO1xuXG4vKipcbiAqIFNlcnZpY2lvcyBwYXJhIGNvbnN0cnVpciBsYSBqZXJhcnF1XHUwMEVEYSBkZSBlbnRpZGFkZXMgeSB0YXJlYXNcbiAqL1xuZXhwb3J0IGNsYXNzIFRhc2tIaWVyYXJjaHlCdWlsZGVyIHtcbiAgICBwcml2YXRlIHBsdWdpbjogUGx1Z2luO1xuICAgIHByaXZhdGUgZW50aXR5RGV0ZWN0b3I6IEVudGl0eURldGVjdG9yO1xuICAgIHByaXZhdGUgdGFza1BhcnNlcjogVGFza1BhcnNlcjtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IFBsdWdpbikge1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgICAgdGhpcy5lbnRpdHlEZXRlY3RvciA9IG5ldyBFbnRpdHlEZXRlY3RvcihwbHVnaW4pO1xuICAgICAgICB0aGlzLnRhc2tQYXJzZXIgPSBuZXcgVGFza1BhcnNlcigpO1xuICAgIH1cbiAgICBcblxuICAgIC8vIE1vZGlmaWNhciBUYXNrSGllcmFyY2h5QnVpbGRlci50cyBwYXJhIGFcdTAwRjFhZGlyIG1lbnNhamVzIGRlIGRlcHVyYWNpXHUwMEYzblxuXG4vKipcbiAqIENvbnN0cnV5ZSBsYSBqZXJhcnF1XHUwMEVEYSBjb21wbGV0YSBkZSBlbnRpZGFkZXMgeSB0YXJlYXNcbiAqIEBwYXJhbSBmb2N1c0VudGl0eSBFbnRpZGFkIGVuIGxhIHF1ZSBjZW50cmFyIGxhIGplcmFycXVcdTAwRURhIChvcGNpb25hbClcbiAqL1xuYXN5bmMgYnVpbGRIaWVyYXJjaHkoZm9jdXNFbnRpdHk6IElFbnRpdHkgfCBudWxsID0gbnVsbCk6IFByb21pc2U8SGllcmFyY2h5Vmlld01vZGVsPiB7XG4gICAgY29uc3QgbW9kZWwgPSBuZXcgSGllcmFyY2h5Vmlld01vZGVsKCk7XG4gICAgY29uc29sZS5sb2coXCJbVGFza05hdmlnYXRvcl0gSW5pY2lhbmRvIGNvbnN0cnVjY2lcdTAwRjNuIGRlIGplcmFycXVcdTAwRURhXCIsIGZvY3VzRW50aXR5ID8gYGNvbiBmb2NvIGVuICR7Zm9jdXNFbnRpdHkudGl0bGV9YCA6IFwic2luIGVudGlkYWQgZm9jYWxcIik7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgICAgLy8gU2kgc2UgcHJvcG9yY2lvbmEgdW5hIGVudGlkYWQgZGUgZW5mb3F1ZSwgZXN0YWJsZWNlcmxhXG4gICAgICAgIG1vZGVsLmZvY3VzRW50aXR5ID0gZm9jdXNFbnRpdHk7XG4gICAgICAgIFxuICAgICAgICAvLyBQYXNvIDE6IFJlY29waWxhciB0b2RhcyBsYXMgZW50aWRhZGVzIHJlbGV2YW50ZXNcbiAgICAgICAgY29uc29sZS5sb2coXCJbVGFza05hdmlnYXRvcl0gUmVjb3BpbGFuZG8gZW50aWRhZGVzXCIpO1xuICAgICAgICBjb25zdCBlbnRpdGllcyA9IGF3YWl0IHRoaXMuY29sbGVjdEFsbEVudGl0aWVzKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBbVGFza05hdmlnYXRvcl0gUmVjb3BpbGFkYXMgJHtlbnRpdGllcy5sZW5ndGh9IGVudGlkYWRlc2ApO1xuICAgICAgICBtb2RlbC5hbGxFbnRpdGllcyA9IGVudGl0aWVzO1xuICAgICAgICBcbiAgICAgICAgLy8gUmVnaXN0cmFyIGxvcyB0aXBvcyBkZSBlbnRpZGFkZXMgZW5jb250cmFkYXMgcGFyYSBkZXB1cmFjaVx1MDBGM25cbiAgICAgICAgY29uc3QgZW50aXR5VHlwZUNvdW50ID0ge307XG4gICAgICAgIGVudGl0aWVzLmZvckVhY2goZW50aXR5ID0+IHtcbiAgICAgICAgICAgIGVudGl0eVR5cGVDb3VudFtlbnRpdHkudHlwZV0gPSAoZW50aXR5VHlwZUNvdW50W2VudGl0eS50eXBlXSB8fCAwKSArIDE7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLmxvZyhcIltUYXNrTmF2aWdhdG9yXSBEaXN0cmlidWNpXHUwMEYzbiBkZSB0aXBvcyBkZSBlbnRpZGFkZXM6XCIsIGVudGl0eVR5cGVDb3VudCk7XG4gICAgICAgIFxuICAgICAgICAvLyBQYXNvIDI6IENvbnN0cnVpciBsYXMgcmVsYWNpb25lcyBlbnRyZSBlbnRpZGFkZXNcbiAgICAgICAgY29uc29sZS5sb2coXCJbVGFza05hdmlnYXRvcl0gQ29uc3RydXllbmRvIHJlbGFjaW9uZXMgZW50cmUgZW50aWRhZGVzXCIpO1xuICAgICAgICB0aGlzLmJ1aWxkRW50aXR5UmVsYXRpb25zaGlwcyhlbnRpdGllcyk7XG4gICAgICAgIFxuICAgICAgICAvLyBQYXNvIDM6IERldGVybWluYXIgbGFzIGVudGlkYWRlcyByYVx1MDBFRHogc2VnXHUwMEZBbiBsYSBlbnRpZGFkIGRlIGVuZm9xdWVcbiAgICAgICAgY29uc29sZS5sb2coXCJbVGFza05hdmlnYXRvcl0gRGV0ZXJtaW5hbmRvIGVudGlkYWRlcyByYVx1MDBFRHpcIik7XG4gICAgICAgIG1vZGVsLnJvb3RFbnRpdGllcyA9IHRoaXMuZGV0ZXJtaW5lUm9vdEVudGl0aWVzKGVudGl0aWVzLCBmb2N1c0VudGl0eSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBbVGFza05hdmlnYXRvcl0gRGV0ZXJtaW5hZGFzICR7bW9kZWwucm9vdEVudGl0aWVzLmxlbmd0aH0gZW50aWRhZGVzIHJhXHUwMEVEemApO1xuICAgICAgICBcbiAgICAgICAgLy8gUGFzbyA0OiBFeHRyYWVyIHkgYXNpZ25hciB0YXJlYXMgYSBjYWRhIGVudGlkYWRcbiAgICAgICAgY29uc29sZS5sb2coXCJbVGFza05hdmlnYXRvcl0gRXh0cmF5ZW5kbyB5IGFzaWduYW5kbyB0YXJlYXNcIik7XG4gICAgICAgIGF3YWl0IHRoaXMuZXh0cmFjdEFuZEFzc2lnblRhc2tzKGVudGl0aWVzKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENvbnRhciB0YXJlYXMgdG90YWxlcyBwYXJhIGRlcHVyYWNpXHUwMEYzblxuICAgICAgICBsZXQgdG90YWxUYXNrcyA9IDA7XG4gICAgICAgIGVudGl0aWVzLmZvckVhY2goZW50aXR5ID0+IHtcbiAgICAgICAgICAgIHRvdGFsVGFza3MgKz0gZW50aXR5LnRhc2tzLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbVGFza05hdmlnYXRvcl0gRW50aWRhZCAke2VudGl0eS50aXRsZX0gKCR7ZW50aXR5LnR5cGV9KTogJHtlbnRpdHkudGFza3MubGVuZ3RofSB0YXJlYXNgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBbVGFza05hdmlnYXRvcl0gVG90YWwgZGUgdGFyZWFzIGVuY29udHJhZGFzOiAke3RvdGFsVGFza3N9YCk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbW9kZWw7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIltUYXNrTmF2aWdhdG9yXSBFcnJvciBhbCBjb25zdHJ1aXIgbGEgamVyYXJxdVx1MDBFRGE6XCIsIGVycm9yKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxufVxuXG4vKipcbiAqIFJlY29waWxhIHRvZGFzIGxhcyBlbnRpZGFkZXMgZGVsIHNpc3RlbWFcbiAqL1xucHJpdmF0ZSBhc3luYyBjb2xsZWN0QWxsRW50aXRpZXMoKTogUHJvbWlzZTxJRW50aXR5W10+IHtcbiAgICBjb25zdCBlbnRpdGllczogSUVudGl0eVtdID0gW107XG4gICAgXG4gICAgLy8gT2J0ZW5lciB0b2RvcyBsb3MgYXJjaGl2b3MgZGUgbWFya2Rvd25cbiAgICBjb25zdCBmaWxlcyA9IHRoaXMucGx1Z2luLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG4gICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBBbmFsaXphbmRvICR7ZmlsZXMubGVuZ3RofSBhcmNoaXZvcyBtYXJrZG93bmApO1xuICAgIFxuICAgIC8vIFByb2Nlc2FyIGNhZGEgYXJjaGl2b1xuICAgIGxldCBwcm9jZXNzZWRDb3VudCA9IDA7XG4gICAgbGV0IGVudGl0eUNvdW50ID0gMDtcbiAgICBsZXQgZXJyb3JDb3VudCA9IDA7XG4gICAgXG4gICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBEZXRlY3RhciBlbnRpZGFkIGRlbCBhcmNoaXZvXG4gICAgICAgICAgICBjb25zdCBlbnRpdHkgPSBhd2FpdCB0aGlzLmVudGl0eURldGVjdG9yLmRldGVjdEVudGl0eUZyb21GaWxlKGZpbGUpO1xuICAgICAgICAgICAgcHJvY2Vzc2VkQ291bnQrKztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGVudGl0eSkge1xuICAgICAgICAgICAgICAgIGVudGl0aWVzLnB1c2goZW50aXR5KTtcbiAgICAgICAgICAgICAgICBlbnRpdHlDb3VudCsrO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChlbnRpdHlDb3VudCAlIDUwID09PSAwIHx8IHByb2Nlc3NlZENvdW50ID09PSBmaWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBQcm9ncmVzbzogJHtwcm9jZXNzZWRDb3VudH0vJHtmaWxlcy5sZW5ndGh9IGFyY2hpdm9zIHByb2Nlc2Fkb3MsICR7ZW50aXR5Q291bnR9IGVudGlkYWRlcyBlbmNvbnRyYWRhc2ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGVycm9yQ291bnQrKztcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtUYXNrTmF2aWdhdG9yXSBFcnJvciBhbCBwcm9jZXNhciBhcmNoaXZvICR7ZmlsZS5wYXRofTpgLCBlcnJvcik7XG4gICAgICAgICAgICAvLyBDb250aW51YXIgY29uIGVsIHNpZ3VpZW50ZSBhcmNoaXZvXG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBBblx1MDBFMWxpc2lzIGNvbXBsZXRhZG86ICR7cHJvY2Vzc2VkQ291bnR9IGFyY2hpdm9zIHByb2Nlc2Fkb3MsICR7ZW50aXR5Q291bnR9IGVudGlkYWRlcyBlbmNvbnRyYWRhcywgJHtlcnJvckNvdW50fSBlcnJvcmVzYCk7XG4gICAgcmV0dXJuIGVudGl0aWVzO1xufVxuXG4vKipcbiAqIEV4dHJhZSB5IGFzaWduYSB0YXJlYXMgYSBjYWRhIGVudGlkYWRcbiAqL1xucHJpdmF0ZSBhc3luYyBleHRyYWN0QW5kQXNzaWduVGFza3MoZW50aXRpZXM6IElFbnRpdHlbXSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGxldCB0b3RhbFRhc2tzRm91bmQgPSAwO1xuICAgIGxldCBlbnRpdGllc1dpdGhUYXNrcyA9IDA7XG4gICAgXG4gICAgZm9yIChjb25zdCBlbnRpdHkgb2YgZW50aXRpZXMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEV4dHJhZXIgdGFyZWFzIGRlbCBhcmNoaXZvIGRlIGxhIGVudGlkYWRcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbVGFza05hdmlnYXRvcl0gRXh0cmF5ZW5kbyB0YXJlYXMgZGUgJHtlbnRpdHkuZmlsZS5wYXRofWApO1xuICAgICAgICAgICAgY29uc3QgdGFza3MgPSBhd2FpdCB0aGlzLnRhc2tQYXJzZXIuZXh0cmFjdFRhc2tzRnJvbUZpbGUoZW50aXR5LmZpbGUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodGFza3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGVudGl0aWVzV2l0aFRhc2tzKys7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBTZSBlbmNvbnRyYXJvbiAke3Rhc2tzLmxlbmd0aH0gdGFyZWFzIGVuICR7ZW50aXR5LmZpbGUucGF0aH1gKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBMb2cgZGUgbXVlc3RyYSBwYXJhIGxhcyBwcmltZXJhcyB0YXJlYXNcbiAgICAgICAgICAgICAgICBpZiAodGFza3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW1Rhc2tOYXZpZ2F0b3JdIEVqZW1wbG8gZGUgdGFyZWE6IFwiJHt0YXNrc1swXS50ZXh0fVwiIChjb21wbGV0YWRhOiAke3Rhc2tzWzBdLmNvbXBsZXRlZH0pYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0b3RhbFRhc2tzRm91bmQgKz0gdGFza3MubGVuZ3RoO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBBc2lnbmFyIGNhZGEgdGFyZWEgYSBsYSBlbnRpZGFkXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRhc2sgb2YgdGFza3MpIHtcbiAgICAgICAgICAgICAgICBlbnRpdHkuYWRkVGFzayh0YXNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtUYXNrTmF2aWdhdG9yXSBFcnJvciBhbCBleHRyYWVyIHRhcmVhcyBwYXJhICR7ZW50aXR5LmZpbGUucGF0aH06YCwgZXJyb3IpO1xuICAgICAgICAgICAgLy8gQ29udGludWFyIGNvbiBsYSBzaWd1aWVudGUgZW50aWRhZFxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGNvbnNvbGUubG9nKGBbVGFza05hdmlnYXRvcl0gRXh0cmFjY2lcdTAwRjNuIGRlIHRhcmVhcyBjb21wbGV0YWRhOiAke3RvdGFsVGFza3NGb3VuZH0gdGFyZWFzIGVuY29udHJhZGFzIGVuICR7ZW50aXRpZXNXaXRoVGFza3N9IGVudGlkYWRlc2ApO1xufVxuXG4gICAgXG4gICAgLyoqXG4gICAgICogQ29uc3RydXllIGxhcyByZWxhY2lvbmVzIGVudHJlIGVudGlkYWRlc1xuICAgICAqL1xuICAgIHByaXZhdGUgYnVpbGRFbnRpdHlSZWxhdGlvbnNoaXBzKGVudGl0aWVzOiBJRW50aXR5W10pOiB2b2lkIHtcbiAgICAgICAgLy8gQ3JlYXIgdW4gbWFwYSBwYXJhIGZhY2lsaXRhciBsYSBiXHUwMEZBc3F1ZWRhXG4gICAgICAgIGNvbnN0IGVudGl0eU1hcCA9IG5ldyBNYXA8c3RyaW5nLCBJRW50aXR5PigpO1xuICAgICAgICBcbiAgICAgICAgLy8gTWFwZWFyIGVudGlkYWRlcyBwb3IgcnV0YSBkZSBhcmNoaXZvXG4gICAgICAgIGZvciAoY29uc3QgZW50aXR5IG9mIGVudGl0aWVzKSB7XG4gICAgICAgICAgICBlbnRpdHlNYXAuc2V0KGVudGl0eS5maWxlLnBhdGgsIGVudGl0eSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFByb2Nlc2FyIGNhZGEgZW50aWRhZCBwYXJhIGVzdGFibGVjZXIgcmVsYWNpb25lc1xuICAgICAgICBmb3IgKGNvbnN0IGVudGl0eSBvZiBlbnRpdGllcykge1xuICAgICAgICAgICAgdGhpcy5lc3RhYmxpc2hFbnRpdHlSZWxhdGlvbnNoaXBzKGVudGl0eSwgZW50aXR5TWFwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBFc3RhYmxlY2UgbGFzIHJlbGFjaW9uZXMgZGUgdW5hIGVudGlkYWQgY29uIG90cmFzXG4gICAgICovXG4gICAgcHJpdmF0ZSBlc3RhYmxpc2hFbnRpdHlSZWxhdGlvbnNoaXBzKGVudGl0eTogSUVudGl0eSwgZW50aXR5TWFwOiBNYXA8c3RyaW5nLCBJRW50aXR5Pik6IHZvaWQge1xuICAgICAgICAvLyBQcm9jZXNhciBhc3VudG8gKHJlbGFjaVx1MDBGM24gZGlyZWN0YSBwYWRyZS1oaWpvKVxuICAgICAgICBpZiAoZW50aXR5Lm1ldGFkYXRhPy5hc3VudG8pIHtcbiAgICAgICAgICAgIGNvbnN0IGFzdW50byA9IGVudGl0eS5tZXRhZGF0YS5hc3VudG87XG4gICAgICAgICAgICBsZXQgcGFyZW50RW50aXR5ID0gbnVsbDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXN1bnRvKSkge1xuICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIGFycmF5LCB0b21hciBlbCBwcmltZXIgZWxlbWVudG8gY29tbyBwYWRyZSBwcmluY2lwYWxcbiAgICAgICAgICAgICAgICBpZiAoYXN1bnRvLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50RW50aXR5ID0gdGhpcy5maW5kRW50aXR5QnlQYXRoT3JOYW1lKGFzdW50b1swXSwgZW50aXR5TWFwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFNpIGVzIHVuIHN0cmluZywgYnVzY2FyIGxhIGVudGlkYWQgcGFkcmVcbiAgICAgICAgICAgICAgICBwYXJlbnRFbnRpdHkgPSB0aGlzLmZpbmRFbnRpdHlCeVBhdGhPck5hbWUoYXN1bnRvLCBlbnRpdHlNYXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAocGFyZW50RW50aXR5KSB7XG4gICAgICAgICAgICAgICAgLy8gRXN0YWJsZWNlciByZWxhY2lcdTAwRjNuIHBhZHJlLWhpam9cbiAgICAgICAgICAgICAgICBwYXJlbnRFbnRpdHkuYWRkQ2hpbGQoZW50aXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBTaSBubyBoYXkgYXN1bnRvIGV4cGxcdTAwRURjaXRvLCBpbnRlbnRhciBlc3RhYmxlY2VyIHJlbGFjaW9uZXMgYmFzYWRhcyBlbiBvdHJvcyBjYW1wb3NcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gUmVsYWNpXHUwMEYzbiBjb24gUHJveWVjdG8gR1REXG4gICAgICAgICAgICBpZiAoZW50aXR5LnByb3llY3RvR1REKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50RW50aXRpZXMgPSB0aGlzLmZpbmRFbnRpdGllc0J5UGF0aE9yTmFtZShlbnRpdHkucHJveWVjdG9HVEQsIGVudGl0eU1hcCwgRW50aXR5VHlwZS5QUk9ZRUNUT19HVEQpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGFyZW50RW50aXR5IG9mIHBhcmVudEVudGl0aWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnRFbnRpdHkgJiYgcGFyZW50RW50aXR5ICE9PSBlbnRpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudEVudGl0eS5hZGRDaGlsZChlbnRpdHkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBSZWxhY2lcdTAwRjNuIGNvbiBQcm95ZWN0byBRXG4gICAgICAgICAgICBpZiAoZW50aXR5LnByb3llY3RvUSAmJiAhZW50aXR5LnBhcmVudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudEVudGl0aWVzID0gdGhpcy5maW5kRW50aXRpZXNCeVBhdGhPck5hbWUoZW50aXR5LnByb3llY3RvUSwgZW50aXR5TWFwLCBFbnRpdHlUeXBlLlBST1lFQ1RPX1EpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGFyZW50RW50aXR5IG9mIHBhcmVudEVudGl0aWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnRFbnRpdHkgJiYgcGFyZW50RW50aXR5ICE9PSBlbnRpdHkgJiYgIWVudGl0eS5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudEVudGl0eS5hZGRDaGlsZChlbnRpdHkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBSZWxhY2lcdTAwRjNuIGNvbiBcdTAwQzFyZWEgZGUgSW50ZXJcdTAwRTlzXG4gICAgICAgICAgICBpZiAoZW50aXR5LmFyZWFJbnRlcmVzICYmICFlbnRpdHkucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50RW50aXRpZXMgPSB0aGlzLmZpbmRFbnRpdGllc0J5UGF0aE9yTmFtZShlbnRpdHkuYXJlYUludGVyZXMsIGVudGl0eU1hcCwgRW50aXR5VHlwZS5BUkVBX0lOVEVSRVMpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGFyZW50RW50aXR5IG9mIHBhcmVudEVudGl0aWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnRFbnRpdHkgJiYgcGFyZW50RW50aXR5ICE9PSBlbnRpdHkgJiYgIWVudGl0eS5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudEVudGl0eS5hZGRDaGlsZChlbnRpdHkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBSZWxhY2lcdTAwRjNuIGNvbiBcdTAwQzFyZWEgZGUgVmlkYVxuICAgICAgICAgICAgaWYgKGVudGl0eS5hcmVhVmlkYSAmJiAhZW50aXR5LnBhcmVudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudEVudGl0aWVzID0gdGhpcy5maW5kRW50aXRpZXNCeVBhdGhPck5hbWUoZW50aXR5LmFyZWFWaWRhLCBlbnRpdHlNYXAsIEVudGl0eVR5cGUuQVJFQV9WSURBKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhcmVudEVudGl0eSBvZiBwYXJlbnRFbnRpdGllcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFyZW50RW50aXR5ICYmIHBhcmVudEVudGl0eSAhPT0gZW50aXR5ICYmICFlbnRpdHkucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRFbnRpdHkuYWRkQ2hpbGQoZW50aXR5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBCdXNjYSB1bmEgZW50aWRhZCBwb3Igc3UgcnV0YSBvIG5vbWJyZVxuICAgICAqL1xuICAgIHByaXZhdGUgZmluZEVudGl0eUJ5UGF0aE9yTmFtZShwYXRoT3JOYW1lOiBzdHJpbmcsIGVudGl0eU1hcDogTWFwPHN0cmluZywgSUVudGl0eT4pOiBJRW50aXR5IHwgbnVsbCB7XG4gICAgICAgIC8vIENvbXByb2JhciBzaSBlcyB1bmEgcnV0YSBkaXJlY3RhXG4gICAgICAgIGlmIChlbnRpdHlNYXAuaGFzKHBhdGhPck5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZW50aXR5TWFwLmdldChwYXRoT3JOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ29tcHJvYmFyIHNpIGVzIHVuYSBydXRhIGNvbiAubWRcbiAgICAgICAgaWYgKGVudGl0eU1hcC5oYXMocGF0aE9yTmFtZSArICcubWQnKSkge1xuICAgICAgICAgICAgcmV0dXJuIGVudGl0eU1hcC5nZXQocGF0aE9yTmFtZSArICcubWQnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQnVzY2FyIHBvciBub21icmUgbyBhbGlhc1xuICAgICAgICBmb3IgKGNvbnN0IGVudGl0eSBvZiBlbnRpdHlNYXAudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIGlmIChlbnRpdHkuZmlsZS5iYXNlbmFtZSA9PT0gcGF0aE9yTmFtZSB8fCBcbiAgICAgICAgICAgICAgICBlbnRpdHkudGl0bGUgPT09IHBhdGhPck5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW50aXR5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDb21wcm9iYXIgc2kgaGF5IHVuIGFsaWFzIHF1ZSBjb2luY2lkYVxuICAgICAgICAgICAgaWYgKGVudGl0eS5tZXRhZGF0YT8uYWxpYXNlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFsaWFzZXMgPSBBcnJheS5pc0FycmF5KGVudGl0eS5tZXRhZGF0YS5hbGlhc2VzKSA/IFxuICAgICAgICAgICAgICAgICAgICBlbnRpdHkubWV0YWRhdGEuYWxpYXNlcyA6IFtlbnRpdHkubWV0YWRhdGEuYWxpYXNlc107XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGFsaWFzZXMuaW5jbHVkZXMocGF0aE9yTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVudGl0eTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBCdXNjYSBlbnRpZGFkZXMgcG9yIHN1IHJ1dGEgbyBub21icmUsIGNvbXBhdGlibGUgY29uIGFycmF5c1xuICAgICAqL1xuICAgIHByaXZhdGUgZmluZEVudGl0aWVzQnlQYXRoT3JOYW1lKHBhdGhzT3JOYW1lczogc3RyaW5nIHwgc3RyaW5nW10sIGVudGl0eU1hcDogTWFwPHN0cmluZywgSUVudGl0eT4sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRUeXBlPzogRW50aXR5VHlwZSk6IElFbnRpdHlbXSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdDogSUVudGl0eVtdID0gW107XG4gICAgICAgIGNvbnN0IHNlYXJjaFZhbHVlcyA9IEFycmF5LmlzQXJyYXkocGF0aHNPck5hbWVzKSA/IHBhdGhzT3JOYW1lcyA6IFtwYXRoc09yTmFtZXNdO1xuICAgICAgICBcbiAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBzZWFyY2hWYWx1ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGVudGl0eSA9IHRoaXMuZmluZEVudGl0eUJ5UGF0aE9yTmFtZSh2YWx1ZSwgZW50aXR5TWFwKTtcbiAgICAgICAgICAgIGlmIChlbnRpdHkgJiYgKCFyZXF1aXJlZFR5cGUgfHwgZW50aXR5LnR5cGUgPT09IHJlcXVpcmVkVHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChlbnRpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmEgbGFzIGVudGlkYWRlcyByYVx1MDBFRHogc2VnXHUwMEZBbiBsYSBlbnRpZGFkIGRlIGVuZm9xdWVcbiAgICAgKi9cbiAgICBwcml2YXRlIGRldGVybWluZVJvb3RFbnRpdGllcyhlbnRpdGllczogSUVudGl0eVtdLCBmb2N1c0VudGl0eTogSUVudGl0eSB8IG51bGwpOiBJRW50aXR5W10ge1xuICAgICAgICBpZiAoIWZvY3VzRW50aXR5KSB7XG4gICAgICAgICAgICAvLyBTaSBubyBoYXkgZW50aWRhZCBkZSBlbmZvcXVlLCBkZXZvbHZlciB0b2RhcyBsYXMgZW50aWRhZGVzIHNpbiBwYWRyZVxuICAgICAgICAgICAgcmV0dXJuIGVudGl0aWVzLmZpbHRlcihlbnRpdHkgPT4gIWVudGl0eS5wYXJlbnQpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBTaSBoYXkgdW5hIGVudGlkYWQgZGUgZW5mb3F1ZSwgZGV0ZXJtaW5hciBlbCBzdWJcdTAwRTFyYm9sXG4gICAgICAgIGNvbnN0IHJvb3RFbnRpdGllczogSUVudGl0eVtdID0gW107XG4gICAgICAgIFxuICAgICAgICAvLyBBXHUwMEYxYWRpciBsYSBlbnRpZGFkIGRlIGVuZm9xdWUgY29tbyByYVx1MDBFRHpcbiAgICAgICAgcm9vdEVudGl0aWVzLnB1c2goZm9jdXNFbnRpdHkpO1xuICAgICAgICBcbiAgICAgICAgLy8gT3BjaW9uYWxtZW50ZSwgYnVzY2FyIGVudGlkYWRlcyBoZXJtYW5hcyAoZW50aWRhZGVzIGNvbiBlbCBtaXNtbyBwYWRyZSlcbiAgICAgICAgaWYgKGZvY3VzRW50aXR5LnBhcmVudCkge1xuICAgICAgICAgICAgY29uc3Qgc2libGluZ3MgPSBlbnRpdGllcy5maWx0ZXIoZW50aXR5ID0+IFxuICAgICAgICAgICAgICAgIGVudGl0eSAhPT0gZm9jdXNFbnRpdHkgJiYgXG4gICAgICAgICAgICAgICAgZW50aXR5LnBhcmVudCA9PT0gZm9jdXNFbnRpdHkucGFyZW50KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQVx1MDBGMWFkaXIgbG9zIGhlcm1hbm9zIChvcGNpb25hbCwgc2VnXHUwMEZBbiBsb3MgcmVxdWlzaXRvcyBlc3BlY1x1MDBFRGZpY29zKVxuICAgICAgICAgICAgLy8gcm9vdEVudGl0aWVzLnB1c2goLi4uc2libGluZ3MpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcm9vdEVudGl0aWVzO1xuICAgIH1cbiAgICBcblxufVxuXG4vLyBERVZFTE9QTUVOVF9DSEVDS1BPSU5UOiBcImhpZXJhcmNoeV9idWlsZGVyXCJcbi8vIERlc2NyaXBjaVx1MDBGM246IFNlcnZpY2lvIHBhcmEgY29uc3RydWlyIGxhIGplcmFycXVcdTAwRURhIGRlIGVudGlkYWRlcyB5IHRhcmVhc1xuLy8gRXN0YWRvOiBDb21wbGV0byIsICIvLyBzcmMvbW9kdWxlcy90YXNrTmF2aWdhdG9yL3NlcnZpY2VzL0VudGl0eURldGVjdG9yLnRzXG5cbmltcG9ydCB7IFRGaWxlLCBQbHVnaW4gfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBFbnRpdHlUeXBlLCBFbnRpdHlTdGF0ZSwgSUVudGl0eSwgY3JlYXRlRW50aXR5IH0gZnJvbSAnLi4vbW9kZWxzL0VudGl0eSc7XG5cbi8qKlxuICogU2VydmljaW8gcGFyYSBkZXRlY3RhciBlbCB0aXBvIGRlIGVudGlkYWQgZGUgdW4gYXJjaGl2b1xuICogeSBleHRyYWVyIHN1cyBtZXRhZGF0b3MgcmVsZXZhbnRlc1xuICovXG5leHBvcnQgY2xhc3MgRW50aXR5RGV0ZWN0b3Ige1xuICAgIHByaXZhdGUgcGx1Z2luOiBQbHVnaW47XG4gICAgXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgfVxuICAgIFxuLy8gTW9kaWZpY2FyIEVudGl0eURldGVjdG9yLnRzIHBhcmEgYVx1MDBGMWFkaXIgbWVuc2FqZXMgZGUgZGVwdXJhY2lcdTAwRjNuXG5cbi8qKlxuICogRGV0ZWN0YSBlbCB0aXBvIGRlIGVudGlkYWQgZGUgdW4gYXJjaGl2byB5IGNyZWEgbGEgaW5zdGFuY2lhIGNvcnJlc3BvbmRpZW50ZVxuICovXG5hc3luYyBkZXRlY3RFbnRpdHlGcm9tRmlsZShmaWxlOiBURmlsZSk6IFByb21pc2U8SUVudGl0eSB8IG51bGw+IHtcbiAgICBjb25zb2xlLmxvZyhgW1Rhc2tOYXZpZ2F0b3JdIERldGVjdGFuZG8gZW50aWRhZCBwYXJhIGFyY2hpdm86ICR7ZmlsZS5wYXRofWApO1xuICAgIHRyeSB7XG4gICAgICAgIC8vIE9idGVuZXIgZWwgZnJvbnRtYXR0ZXIgZGVsIGFyY2hpdm9cbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLnBsdWdpbi5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk/LmZyb250bWF0dGVyO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFtZXRhZGF0YSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBObyBzZSBlbmNvbnRyXHUwMEYzIGZyb250bWF0dGVyIGVuICR7ZmlsZS5wYXRofWApO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlR2VuZXJpY0VudGl0eShmaWxlKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBGcm9udG1hdHRlciBlbmNvbnRyYWRvIGVuICR7ZmlsZS5wYXRofTpgLCBtZXRhZGF0YSk7XG4gICAgICAgIFxuICAgICAgICAvLyBEZXRlcm1pbmFyIGVsIHRpcG8gZGUgZW50aWRhZCB1c2FuZG8gZWwgY2FtcG8gJ3R5cGUnIGRlbCBmcm9udG1hdHRlclxuICAgICAgICBjb25zdCBlbnRpdHlUeXBlID0gdGhpcy5kZXRlcm1pbmVFbnRpdHlUeXBlKG1ldGFkYXRhLnR5cGUpO1xuICAgICAgICBjb25zb2xlLmxvZyhgW1Rhc2tOYXZpZ2F0b3JdIFRpcG8gZGUgZW50aWRhZCBkZXRlcm1pbmFkbzogJHtlbnRpdHlUeXBlfWApO1xuICAgICAgICBcbiAgICAgICAgLy8gRXh0cmFlciBlbCBpZGVudGlmaWNhZG9yIChwcmVmZXJpciAnaWQnIGRlbCBmcm9udG1hdHRlciBvIHVzYXIgZWwgbm9tYnJlIGRlbCBhcmNoaXZvKVxuICAgICAgICBjb25zdCBpZCA9IG1ldGFkYXRhLmlkIHx8IGZpbGUuYmFzZW5hbWU7XG4gICAgICAgIFxuICAgICAgICAvLyBFeHRyYWVyIGVsIHRcdTAwRUR0dWxvIChwcmVmZXJpciAndGl0dWxvJyBkZWwgZnJvbnRtYXR0ZXIsIGx1ZWdvICdhbGlhc2VzWzBdJywgbyB1c2FyIGVsIG5vbWJyZSBkZWwgYXJjaGl2bylcbiAgICAgICAgY29uc3QgdGl0bGUgPSBtZXRhZGF0YS50aXR1bG8gfHwgXG4gICAgICAgICAgICAgICAgICAgICAgKG1ldGFkYXRhLmFsaWFzZXMgJiYgbWV0YWRhdGEuYWxpYXNlcy5sZW5ndGggPiAwID8gbWV0YWRhdGEuYWxpYXNlc1swXSA6IGZpbGUuYmFzZW5hbWUpO1xuICAgICAgICBcbiAgICAgICAgLy8gRXh0cmFlciBsYSBkZXNjcmlwY2lcdTAwRjNuXG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gbWV0YWRhdGEuZGVzY3JpcGNpb24gfHwgJyc7XG4gICAgICAgIFxuICAgICAgICAvLyBEZXRlcm1pbmFyIGVsIGVzdGFkb1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuZGV0ZXJtaW5lRW50aXR5U3RhdGUobWV0YWRhdGEuZXN0YWRvKTtcbiAgICAgICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBFc3RhZG8gZGUgbGEgZW50aWRhZDogJHtzdGF0ZX1gKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEV4dHJhZXIgb3Ryb3MgbWV0YWRhdG9zIGVzcGVjXHUwMEVEZmljb3Mgc2VnXHUwMEZBbiBlbCB0aXBvXG4gICAgICAgIGNvbnN0IHNwZWNpZmljTWV0YWRhdGEgPSB0aGlzLmV4dHJhY3RTcGVjaWZpY01ldGFkYXRhKGVudGl0eVR5cGUsIG1ldGFkYXRhKTtcbiAgICAgICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBNZXRhZGF0b3MgZXNwZWNcdTAwRURmaWNvczpgLCBzcGVjaWZpY01ldGFkYXRhKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWFyIGxhIGVudGlkYWQgY29uIGxvcyBkYXRvcyBleHRyYVx1MDBFRGRvc1xuICAgICAgICBjb25zdCBlbnRpdHkgPSBjcmVhdGVFbnRpdHkoXG4gICAgICAgICAgICBlbnRpdHlUeXBlLFxuICAgICAgICAgICAgaWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgICBzcGVjaWZpY01ldGFkYXRhXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhgW1Rhc2tOYXZpZ2F0b3JdIEVudGlkYWQgY3JlYWRhOmAsIHtcbiAgICAgICAgICAgIGlkOiBlbnRpdHkuaWQsXG4gICAgICAgICAgICB0eXBlOiBlbnRpdHkudHlwZSxcbiAgICAgICAgICAgIHRpdGxlOiBlbnRpdHkudGl0bGUsXG4gICAgICAgICAgICBzdGF0ZTogZW50aXR5LnN0YXRlLFxuICAgICAgICAgICAgZmlsZTogZW50aXR5LmZpbGUucGF0aFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEV4dHJhZXIgcmVsYWNpb25lcyBqZXJcdTAwRTFycXVpY2FzXG4gICAgICAgIHRoaXMuZXh0cmFjdEhpZXJhcmNoaWNhbFJlbGF0aW9ucyhlbnRpdHksIG1ldGFkYXRhKTtcbiAgICAgICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBSZWxhY2lvbmVzIGplclx1MDBFMXJxdWljYXMgZXh0cmFcdTAwRURkYXMgcGFyYSAke2VudGl0eS50aXRsZX06YCwge1xuICAgICAgICAgICAgYXJlYVZpZGE6IGVudGl0eS5hcmVhVmlkYSxcbiAgICAgICAgICAgIGFyZWFJbnRlcmVzOiBlbnRpdHkuYXJlYUludGVyZXMsXG4gICAgICAgICAgICBwcm95ZWN0b1E6IGVudGl0eS5wcm95ZWN0b1EsXG4gICAgICAgICAgICBwcm95ZWN0b0dURDogZW50aXR5LnByb3llY3RvR1RELFxuICAgICAgICAgICAgYXN1bnRvOiBlbnRpdHkubWV0YWRhdGEuYXN1bnRvXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGVudGl0eTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBbVGFza05hdmlnYXRvcl0gRXJyb3IgYWwgZGV0ZWN0YXIgZW50aWRhZCBkZWwgYXJjaGl2byAke2ZpbGUucGF0aH06YCwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbi8qKlxuICogRGV0ZXJtaW5hIGVsIHRpcG8gZGUgZW50aWRhZCBzZWdcdTAwRkFuIGVsIGNhbXBvICd0eXBlJyBkZWwgZnJvbnRtYXR0ZXJcbiAqL1xucHJpdmF0ZSBkZXRlcm1pbmVFbnRpdHlUeXBlKHR5cGVTdHI6IHN0cmluZyB8IHVuZGVmaW5lZCk6IEVudGl0eVR5cGUge1xuICAgIGNvbnNvbGUubG9nKGBbVGFza05hdmlnYXRvcl0gRGV0ZXJtaW5hbmRvIHRpcG8gZGUgZW50aWRhZCBhIHBhcnRpciBkZTogXCIke3R5cGVTdHJ9XCJgKTtcbiAgICBpZiAoIXR5cGVTdHIpIHtcbiAgICAgICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBObyBzZSBlc3BlY2lmaWNcdTAwRjMgdGlwbywgdXNhbmRvIFVOS05PV05gKTtcbiAgICAgICAgcmV0dXJuIEVudGl0eVR5cGUuVU5LTk9XTjtcbiAgICB9XG4gICAgXG4gICAgLy8gTWFwZW8gZGlyZWN0byBkZSBsb3MgdGlwb3NcbiAgICBzd2l0Y2ggKHR5cGVTdHIpIHtcbiAgICAgICAgY2FzZSAnQVYnOlxuICAgICAgICAgICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBUaXBvIGlkZW50aWZpY2FkbzogXHUwMEMxcmVhIGRlIFZpZGFgKTtcbiAgICAgICAgICAgIHJldHVybiBFbnRpdHlUeXBlLkFSRUFfVklEQTtcbiAgICAgICAgY2FzZSAnQUknOlxuICAgICAgICAgICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBUaXBvIGlkZW50aWZpY2FkbzogXHUwMEMxcmVhIGRlIEludGVyXHUwMEU5c2ApO1xuICAgICAgICAgICAgcmV0dXJuIEVudGl0eVR5cGUuQVJFQV9JTlRFUkVTO1xuICAgICAgICBjYXNlICdQUSc6XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgW1Rhc2tOYXZpZ2F0b3JdIFRpcG8gaWRlbnRpZmljYWRvOiBQcm95ZWN0byBRYCk7XG4gICAgICAgICAgICByZXR1cm4gRW50aXR5VHlwZS5QUk9ZRUNUT19RO1xuICAgICAgICBjYXNlICdQR1REJzpcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbVGFza05hdmlnYXRvcl0gVGlwbyBpZGVudGlmaWNhZG86IFByb3llY3RvIEdURGApO1xuICAgICAgICAgICAgcmV0dXJuIEVudGl0eVR5cGUuUFJPWUVDVE9fR1REO1xuICAgICAgICBjYXNlICdBeCc6XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgW1Rhc2tOYXZpZ2F0b3JdIFRpcG8gaWRlbnRpZmljYWRvOiBBbm90YWNpXHUwMEYzbmApO1xuICAgICAgICAgICAgcmV0dXJuIEVudGl0eVR5cGUuQU5PVEFDSU9OO1xuICAgICAgICBjYXNlICdDcCc6XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgW1Rhc2tOYXZpZ2F0b3JdIFRpcG8gaWRlbnRpZmljYWRvOiBDYW1wYVx1MDBGMWFgKTtcbiAgICAgICAgICAgIHJldHVybiBFbnRpdHlUeXBlLkNBTVBBTkE7XG4gICAgICAgIGNhc2UgJ0VNa3QnOlxuICAgICAgICAgICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBUaXBvIGlkZW50aWZpY2FkbzogRW50cmVnYWJsZWApO1xuICAgICAgICAgICAgcmV0dXJuIEVudGl0eVR5cGUuRU5UUkVHQUJMRTtcbiAgICAgICAgY2FzZSAnUlQnOlxuICAgICAgICAgICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBUaXBvIGlkZW50aWZpY2FkbzogUmVnaXN0cm8gVGllbXBvYCk7XG4gICAgICAgICAgICByZXR1cm4gRW50aXR5VHlwZS5SRUdJU1RST19USUVNUE87XG4gICAgICAgIGNhc2UgJ1R4JzpcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbVGFza05hdmlnYXRvcl0gVGlwbyBpZGVudGlmaWNhZG86IFRyYW5zYWNjaVx1MDBGM25gKTtcbiAgICAgICAgICAgIHJldHVybiBFbnRpdHlUeXBlLlRSQU5TQUNDSU9OO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBUaXBvIGRlc2Nvbm9jaWRvIFwiJHt0eXBlU3RyfVwiLCB1c2FuZG8gT1RIRVJgKTtcbiAgICAgICAgICAgIHJldHVybiBFbnRpdHlUeXBlLk9USEVSO1xuICAgIH1cbn1cblxuLyoqXG4gKiBFeHRyYWUgbGFzIHJlbGFjaW9uZXMgamVyXHUwMEUxcnF1aWNhcyBkZSBsb3MgbWV0YWRhdG9zXG4gKi9cbnByaXZhdGUgZXh0cmFjdEhpZXJhcmNoaWNhbFJlbGF0aW9ucyhlbnRpdHk6IElFbnRpdHksIG1ldGFkYXRhOiBhbnkpOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZyhgW1Rhc2tOYXZpZ2F0b3JdIEV4dHJheWVuZG8gcmVsYWNpb25lcyBqZXJcdTAwRTFycXVpY2FzIHBhcmEgJHtlbnRpdHkudGl0bGV9YCk7XG4gICAgXG4gICAgLy8gRXh0cmFlciBcdTAwRTFyZWEgZGUgdmlkYVxuICAgIGlmIChtZXRhZGF0YS5hcmVhVmlkYSkge1xuICAgICAgICBlbnRpdHkuYXJlYVZpZGEgPSB0aGlzLm5vcm1hbGl6ZUZpZWxkKG1ldGFkYXRhLmFyZWFWaWRhKTtcbiAgICAgICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBcdTAwQzFyZWEgZGUgVmlkYSBlbmNvbnRyYWRhOiAke0pTT04uc3RyaW5naWZ5KGVudGl0eS5hcmVhVmlkYSl9YCk7XG4gICAgfVxuICAgIFxuICAgIC8vIEV4dHJhZXIgXHUwMEUxcmVhIGRlIGludGVyXHUwMEU5c1xuICAgIGlmIChtZXRhZGF0YS5hcmVhSW50ZXJlcykge1xuICAgICAgICBlbnRpdHkuYXJlYUludGVyZXMgPSB0aGlzLm5vcm1hbGl6ZUZpZWxkKG1ldGFkYXRhLmFyZWFJbnRlcmVzKTtcbiAgICAgICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBcdTAwQzFyZWEgZGUgSW50ZXJcdTAwRTlzIGVuY29udHJhZGE6ICR7SlNPTi5zdHJpbmdpZnkoZW50aXR5LmFyZWFJbnRlcmVzKX1gKTtcbiAgICB9XG4gICAgXG4gICAgLy8gRXh0cmFlciBwcm95ZWN0byBRXG4gICAgaWYgKG1ldGFkYXRhLnByb3llY3RvUSkge1xuICAgICAgICBlbnRpdHkucHJveWVjdG9RID0gdGhpcy5ub3JtYWxpemVGaWVsZChtZXRhZGF0YS5wcm95ZWN0b1EpO1xuICAgICAgICBjb25zb2xlLmxvZyhgW1Rhc2tOYXZpZ2F0b3JdIFByb3llY3RvIFEgZW5jb250cmFkbzogJHtKU09OLnN0cmluZ2lmeShlbnRpdHkucHJveWVjdG9RKX1gKTtcbiAgICB9XG4gICAgXG4gICAgLy8gRXh0cmFlciBwcm95ZWN0byBHVERcbiAgICBpZiAobWV0YWRhdGEucHJveWVjdG9HVEQpIHtcbiAgICAgICAgZW50aXR5LnByb3llY3RvR1REID0gdGhpcy5ub3JtYWxpemVGaWVsZChtZXRhZGF0YS5wcm95ZWN0b0dURCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBbVGFza05hdmlnYXRvcl0gUHJveWVjdG8gR1REIGVuY29udHJhZG86ICR7SlNPTi5zdHJpbmdpZnkoZW50aXR5LnByb3llY3RvR1REKX1gKTtcbiAgICB9XG4gICAgXG4gICAgLy8gRXh0cmFlciBhc3VudG8gKHJlbGFjaVx1MDBGM24gcGFkcmUtaGlqbylcbiAgICBpZiAobWV0YWRhdGEuYXN1bnRvKSB7XG4gICAgICAgIC8vIEVsIGFzdW50byBzZSBtYW5lamEgZGUgZm9ybWEgZGlmZXJlbnRlLCB5YSBxdWUgZXN0YWJsZWNlIGxhIHJlbGFjaVx1MDBGM24gZGlyZWN0YSBwYWRyZS1oaWpvXG4gICAgICAgIGVudGl0eS5tZXRhZGF0YS5hc3VudG8gPSB0aGlzLm5vcm1hbGl6ZUZpZWxkKG1ldGFkYXRhLmFzdW50byk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBbVGFza05hdmlnYXRvcl0gQXN1bnRvIGVuY29udHJhZG86ICR7SlNPTi5zdHJpbmdpZnkoZW50aXR5Lm1ldGFkYXRhLmFzdW50byl9YCk7XG4gICAgfVxufVxuICAgIFxuXG4gICAgXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5hIGVsIGVzdGFkbyBkZSBsYSBlbnRpZGFkIHNlZ1x1MDBGQW4gZWwgY2FtcG8gJ2VzdGFkbycgZGVsIGZyb250bWF0dGVyXG4gICAgICovXG4gICAgcHJpdmF0ZSBkZXRlcm1pbmVFbnRpdHlTdGF0ZShzdGF0ZVN0cjogc3RyaW5nIHwgdW5kZWZpbmVkKTogRW50aXR5U3RhdGUge1xuICAgICAgICBpZiAoIXN0YXRlU3RyKSB7XG4gICAgICAgICAgICByZXR1cm4gRW50aXR5U3RhdGUuVU5LTk9XTjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgc3dpdGNoIChzdGF0ZVN0cikge1xuICAgICAgICAgICAgY2FzZSAnXHVEODNEXHVERkUyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gRW50aXR5U3RhdGUuQUNUSVZFO1xuICAgICAgICAgICAgY2FzZSAnXHVEODNEXHVERkUxJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gRW50aXR5U3RhdGUuUEFVU0VEO1xuICAgICAgICAgICAgY2FzZSAnXHVEODNEXHVERDM0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gRW50aXR5U3RhdGUuU1RPUFBFRDtcbiAgICAgICAgICAgIGNhc2UgJ1x1RDgzRFx1REQzNSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEVudGl0eVN0YXRlLkFSQ0hJVkVEO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gRW50aXR5U3RhdGUuVU5LTk9XTjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBFeHRyYWUgbWV0YWRhdG9zIGVzcGVjXHUwMEVEZmljb3Mgc2VnXHUwMEZBbiBlbCB0aXBvIGRlIGVudGlkYWRcbiAgICAgKi9cbiAgICBwcml2YXRlIGV4dHJhY3RTcGVjaWZpY01ldGFkYXRhKGVudGl0eVR5cGU6IEVudGl0eVR5cGUsIG1ldGFkYXRhOiBhbnkpOiBSZWNvcmQ8c3RyaW5nLCBhbnk+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0OiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XG4gICAgICAgIFxuICAgICAgICBzd2l0Y2ggKGVudGl0eVR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgRW50aXR5VHlwZS5BUkVBX1ZJREE6XG4gICAgICAgICAgICAgICAgLy8gRXh0cmFlciB0cmltZXN0cmUgcGFyYSBBVlxuICAgICAgICAgICAgICAgIHJlc3VsdC50cmltZXN0cmUgPSBtZXRhZGF0YS50cmltZXN0cmUgfHwgJyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlIEVudGl0eVR5cGUuQVJFQV9JTlRFUkVTOlxuICAgICAgICAgICAgICAgIC8vIEV4dHJhZXIgbml2ZWwgcGFyYSBBSVxuICAgICAgICAgICAgICAgIHJlc3VsdC5uaXZlbEFJID0gbWV0YWRhdGEubml2ZWxBSSB8fCAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FzZSBFbnRpdHlUeXBlLlBST1lFQ1RPX1E6XG4gICAgICAgICAgICAgICAgLy8gRXh0cmFlciB0cmltZXN0cmVzIHBhcmEgUFFcbiAgICAgICAgICAgICAgICByZXN1bHQudHJpbWVzdHJlcyA9IHRoaXMubm9ybWFsaXplQXJyYXlGaWVsZChtZXRhZGF0YS50cmltZXN0cmUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FzZSBFbnRpdHlUeXBlLlBST1lFQ1RPX0dURDpcbiAgICAgICAgICAgICAgICAvLyBFeHRyYWVyIG5pdmVsIHBhcmEgUEdURFxuICAgICAgICAgICAgICAgIHJlc3VsdC5uaXZlbFAgPSBtZXRhZGF0YS5uaXZlbFAgfHwgMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEV4dHJhZXIgbWV0YWRhdG9zIGVzcGVjXHUwMEVEZmljb3MgcGFyYSBvdHJvcyB0aXBvcyBzZWdcdTAwRkFuIHNlYSBuZWNlc2FyaW9cbiAgICAgICAgICAgIGNhc2UgRW50aXR5VHlwZS5DQU1QQU5BOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5pbmRpY2Fkb3JlcyA9IG1ldGFkYXRhLmluZGljYWRvcmVzIHx8ICcnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FzZSBFbnRpdHlUeXBlLkVOVFJFR0FCTEU6XG4gICAgICAgICAgICAgICAgcmVzdWx0LnRpcG8gPSBtZXRhZGF0YS50aXBvIHx8ICcnO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5jYW5hbGVzID0gdGhpcy5ub3JtYWxpemVBcnJheUZpZWxkKG1ldGFkYXRhLmNhbmFsZXMpO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5lc3RhZG9FID0gbWV0YWRhdGEuZXN0YWRvRSB8fCAnJztcbiAgICAgICAgICAgICAgICByZXN1bHQucHJpb3JpZGFkID0gbWV0YWRhdGEucHJpb3JpZGFkIHx8ICcnO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdWJsaWNhY2lvbiA9IG1ldGFkYXRhLnB1YmxpY2FjaW9uIHx8ICcnO1xuICAgICAgICAgICAgICAgIHJlc3VsdC51cmxDYW52YSA9IG1ldGFkYXRhLnVybENhbnZhIHx8ICcnO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5oaXRzID0gbWV0YWRhdGEuaGl0cyB8fCAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBcblxuICAgIFxuICAgIC8qKlxuICAgICAqIE5vcm1hbGl6YSB1biBjYW1wbyBxdWUgcHVlZGUgc2VyIHVuIHN0cmluZyBvIHVuIGFycmF5XG4gICAgICovXG4gICAgcHJpdmF0ZSBub3JtYWxpemVGaWVsZChmaWVsZDogYW55KTogc3RyaW5nIHwgc3RyaW5nW10ge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmaWVsZCkpIHtcbiAgICAgICAgICAgIC8vIFNpIHlhIGVzIHVuIGFycmF5LCBub3JtYWxpemFtb3MgY2FkYSBlbGVtZW50b1xuICAgICAgICAgICAgcmV0dXJuIGZpZWxkLm1hcChpdGVtID0+IHRoaXMubm9ybWFsaXplV2lraUxpbmsoaXRlbSkpO1xuICAgICAgICB9IGVsc2UgaWYgKGZpZWxkKSB7XG4gICAgICAgICAgICAvLyBTaSBlcyB1biB2YWxvciBzaW1wbGUsIGxvIG5vcm1hbGl6YW1vc1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm9ybWFsaXplV2lraUxpbmsoZmllbGQpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIE5vcm1hbGl6YSB1biBjYW1wbyBxdWUgZGViZXJcdTAwRURhIHNlciB1biBhcnJheVxuICAgICAqL1xuICAgIHByaXZhdGUgbm9ybWFsaXplQXJyYXlGaWVsZChmaWVsZDogYW55KTogc3RyaW5nW10ge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmaWVsZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWVsZC5tYXAoaXRlbSA9PiB0aGlzLm5vcm1hbGl6ZVdpa2lMaW5rKGl0ZW0pKTtcbiAgICAgICAgfSBlbHNlIGlmIChmaWVsZCkge1xuICAgICAgICAgICAgcmV0dXJuIFt0aGlzLm5vcm1hbGl6ZVdpa2lMaW5rKGZpZWxkKV07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogTm9ybWFsaXphIHVuIFdpa2lMaW5rIChbW3RleHRvfGFsaWFzXV0pIGV4dHJheWVuZG8gc3UgY29udGVuaWRvXG4gICAgICovXG4gICAgcHJpdmF0ZSBub3JtYWxpemVXaWtpTGluayh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBpZiAodHlwZW9mIHRleHQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKHRleHQpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBSZWdleCBwYXJhIGRldGVjdGFyIHdpa2lsaW5rcyBbW3J1dGF8YWxpYXNdXVxuICAgICAgICBjb25zdCB3aWtpTGlua1JlZ2V4ID0gL1xcW1xcWyguKj8pKD86XFx8KC4qPykpP1xcXVxcXS87XG4gICAgICAgIGNvbnN0IG1hdGNoID0gdGV4dC5tYXRjaCh3aWtpTGlua1JlZ2V4KTtcbiAgICAgICAgXG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgLy8gU2kgZXMgdW4gd2lraWxpbmssIGV4dHJhZXIgbGEgcnV0YVxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoWzFdO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQ3JlYSB1bmEgZW50aWRhZCBnZW5cdTAwRTlyaWNhIGN1YW5kbyBubyBzZSBwdWVkZSBkZXRlcm1pbmFyIGVsIHRpcG9cbiAgICAgKi9cbiAgICBwcml2YXRlIGNyZWF0ZUdlbmVyaWNFbnRpdHkoZmlsZTogVEZpbGUpOiBJRW50aXR5IHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUVudGl0eShcbiAgICAgICAgICAgIEVudGl0eVR5cGUuVU5LTk9XTixcbiAgICAgICAgICAgIGZpbGUuYmFzZW5hbWUsXG4gICAgICAgICAgICBmaWxlLmJhc2VuYW1lLFxuICAgICAgICAgICAgJycsXG4gICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgRW50aXR5U3RhdGUuVU5LTk9XTlxuICAgICAgICApO1xuICAgIH1cbn1cblxuLy8gREVWRUxPUE1FTlRfQ0hFQ0tQT0lOVDogXCJlbnRpdHlfZGV0ZWN0b3JcIlxuLy8gRGVzY3JpcGNpXHUwMEYzbjogU2VydmljaW8gcGFyYSBsYSBkZXRlY2NpXHUwMEYzbiB5IGV4dHJhY2NpXHUwMEYzbiBkZSBtZXRhZGF0b3MgZGUgZW50aWRhZGVzXG4vLyBFc3RhZG86IENvbXBsZXRvIiwgIi8vIHNyYy9tb2R1bGVzL3Rhc2tOYXZpZ2F0b3Ivc2VydmljZXMvVGFza1BhcnNlci50c1xuXG5pbXBvcnQgeyBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IFRhc2ssIFRhc2tQcmlvcml0eSwgTGluZUluZm8gfSBmcm9tICcuLi9tb2RlbHMvVGFzayc7XG5cbi8qKlxuICogU2VydmljaW8gcGFyYSBhbmFsaXphciB5IGV4dHJhZXIgdGFyZWFzIGRlIGFyY2hpdm9zIG1hcmtkb3duXG4gKi9cbmV4cG9ydCBjbGFzcyBUYXNrUGFyc2VyIHtcblxuICAgIC8vIE1vZGlmaWNhciBUYXNrUGFyc2VyLnRzIHBhcmEgYVx1MDBGMWFkaXIgbWVuc2FqZXMgZGUgZGVwdXJhY2lcdTAwRjNuXG5cbi8qKlxuICogRXh0cmFlIHRvZGFzIGxhcyB0YXJlYXMgZGUgdW4gYXJjaGl2b1xuICovXG5hc3luYyBleHRyYWN0VGFza3NGcm9tRmlsZShmaWxlOiBURmlsZSk6IFByb21pc2U8VGFza1tdPiB7XG4gICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBFeHRyYXllbmRvIHRhcmVhcyBkZSBhcmNoaXZvOiAke2ZpbGUucGF0aH1gKTtcbiAgICB0cnkge1xuICAgICAgICAvLyBMZWVyIGVsIGNvbnRlbmlkbyBkZWwgYXJjaGl2b1xuICAgICAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgdGhpcy5yZWFkRmlsZShmaWxlKTtcbiAgICAgICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBDb250ZW5pZG8gbGVcdTAwRURkbzogJHtjb250ZW50Lmxlbmd0aH0gY2FyYWN0ZXJlc2ApO1xuICAgICAgICBcbiAgICAgICAgLy8gRGl2aWRpciBlbCBjb250ZW5pZG8gZW4gbFx1MDBFRG5lYXNcbiAgICAgICAgY29uc3QgbGluZXMgPSBjb250ZW50LnNwbGl0KCdcXG4nKTtcbiAgICAgICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBMXHUwMEVEbmVhcyBlbiBlbCBhcmNoaXZvOiAke2xpbmVzLmxlbmd0aH1gKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFycmF5IHBhcmEgYWxtYWNlbmFyIGxhcyB0YXJlYXMgZW5jb250cmFkYXNcbiAgICAgICAgY29uc3QgdGFza3M6IFRhc2tbXSA9IFtdO1xuICAgICAgICBcbiAgICAgICAgLy8gVGFyZWFzIHBhcmEgZGVwdXJhY2lcdTAwRjNuXG4gICAgICAgIGxldCB0YXNrTGluZXNGb3VuZCA9IDA7XG4gICAgICAgIFxuICAgICAgICAvLyBQcm9jZXNhciBjYWRhIGxcdTAwRURuZWFcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbGluZSA9IGxpbmVzW2ldO1xuICAgICAgICAgICAgY29uc3QgbGluZU51bWJlciA9IGkgKyAxO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDb21wcm9iYXIgc2kgbGEgbFx1MDBFRG5lYSBjb250aWVuZSB1bmEgdGFyZWFcbiAgICAgICAgICAgIGlmIChsaW5lLnRyaW0oKS5zdGFydHNXaXRoKCctIFsnKSkge1xuICAgICAgICAgICAgICAgIHRhc2tMaW5lc0ZvdW5kKys7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBMXHUwMEVEbmVhIHBvdGVuY2lhbCBkZSB0YXJlYSBlbmNvbnRyYWRhOiAke2xpbmV9YCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgdGFzayA9IHRoaXMucGFyc2VUYXNrTGluZShsaW5lLCBsaW5lTnVtYmVyLCBmaWxlKTtcbiAgICAgICAgICAgICAgICBpZiAodGFzaykge1xuICAgICAgICAgICAgICAgICAgICB0YXNrcy5wdXNoKHRhc2spO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW1Rhc2tOYXZpZ2F0b3JdIFRhcmVhIHZcdTAwRTFsaWRhIGV4dHJhXHUwMEVEZGE6IFwiJHt0YXNrLnRleHR9XCIsIGNvbXBsZXRhZGE6ICR7dGFzay5jb21wbGV0ZWR9YCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBMYSBsXHUwMEVEbmVhIG5vIGVzIHVuYSB0YXJlYSB2XHUwMEUxbGlkYTogJHtsaW5lfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBFeHRyYWNjaVx1MDBGM24gY29tcGxldGFkYTogJHt0YXNrcy5sZW5ndGh9IHRhcmVhcyBleHRyYVx1MDBFRGRhcyBkZSAke3Rhc2tMaW5lc0ZvdW5kfSBsXHUwMEVEbmVhcyBwb3RlbmNpYWxlc2ApO1xuICAgICAgICByZXR1cm4gdGFza3M7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgW1Rhc2tOYXZpZ2F0b3JdIEVycm9yIGFsIGV4dHJhZXIgdGFyZWFzIGRlbCBhcmNoaXZvICR7ZmlsZS5wYXRofTpgLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbi8qKlxuICogTGVlIGVsIGNvbnRlbmlkbyBkZSB1biBhcmNoaXZvXG4gKi9cbnByaXZhdGUgYXN5bmMgcmVhZEZpbGUoZmlsZTogVEZpbGUpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBhcHAudmF1bHQucmVhZChmaWxlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBbVGFza05hdmlnYXRvcl0gRXJyb3IgYWwgbGVlciBlbCBhcmNoaXZvICR7ZmlsZS5wYXRofTpgLCBlcnJvcik7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBbmFsaXphIHVuYSBsXHUwMEVEbmVhIHBhcmEgZGV0ZXJtaW5hciBzaSBjb250aWVuZSB1bmEgdGFyZWFcbiAqL1xucHJpdmF0ZSBwYXJzZVRhc2tMaW5lKGxpbmU6IHN0cmluZywgbGluZU51bWJlcjogbnVtYmVyLCBmaWxlOiBURmlsZSk6IFRhc2sgfCBudWxsIHtcbiAgICAvLyBSZWdleCBwYXJhIGRldGVjdGFyIHRhcmVhcyBkZSBPYnNpZGlhblxuICAgIC8vIENhcHR1cmEgZ3J1cG9zIHBhcmE6IGluZGVudGFjaVx1MDBGM24sIGVzdGFkbyAoY29tcGxldGFkbyBvIG5vKSwgdGV4dG8gZGUgbGEgdGFyZWFcbiAgICBjb25zdCB0YXNrUmVnZXggPSAvXihcXHMqKS1cXHMqXFxbKFsgeFgvXSlcXF1cXHMqKC4rKSQvO1xuICAgIGNvbnN0IG1hdGNoID0gbGluZS5tYXRjaCh0YXNrUmVnZXgpO1xuICAgIFxuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBMYSBsXHUwMEVEbmVhICR7bGluZU51bWJlcn0gbm8gY29pbmNpZGUgY29uIGVsIHBhdHJcdTAwRjNuIGRlIHRhcmVhYCk7XG4gICAgICAgIHJldHVybiBudWxsOyAvLyBObyBlcyB1bmEgdGFyZWFcbiAgICB9XG4gICAgXG4gICAgLy8gRXh0cmFlciBjb21wb25lbnRlcyBkZSBsYSB0YXJlYVxuICAgIGNvbnN0IGluZGVudGF0aW9uID0gbWF0Y2hbMV0ubGVuZ3RoO1xuICAgIGNvbnN0IGlzQ29tcGxldGVkID0gbWF0Y2hbMl0gIT09ICcgJzsgLy8gQ3VhbHF1aWVyIGNvc2EgZXhjZXB0byBlc3BhY2lvIGluZGljYSBjb21wbGV0YWRhXG4gICAgY29uc3QgdGFza1RleHQgPSBtYXRjaFszXTtcbiAgICBcbiAgICBjb25zb2xlLmxvZyhgW1Rhc2tOYXZpZ2F0b3JdIFRhcmVhIGVuY29udHJhZGEgZW4gbFx1MDBFRG5lYSAke2xpbmVOdW1iZXJ9OmApO1xuICAgIGNvbnNvbGUubG9nKGAgIC0gSW5kZW50YWNpXHUwMEYzbjogJHtpbmRlbnRhdGlvbn1gKTtcbiAgICBjb25zb2xlLmxvZyhgICAtIEVzdGFkbzogJHtpc0NvbXBsZXRlZCA/ICdDb21wbGV0YWRhJyA6ICdQZW5kaWVudGUnfWApO1xuICAgIGNvbnNvbGUubG9nKGAgIC0gVGV4dG86ICR7dGFza1RleHR9YCk7XG4gICAgXG4gICAgLy8gQ3JlYXIgaW5mb3JtYWNpXHUwMEYzbiBkZSBsXHUwMEVEbmVhXG4gICAgY29uc3QgbGluZUluZm86IExpbmVJbmZvID0ge1xuICAgICAgICBudW1iZXI6IGxpbmVOdW1iZXIsXG4gICAgICAgIHRleHQ6IGxpbmUsXG4gICAgICAgIGluZGVudGF0aW9uOiBpbmRlbnRhdGlvblxuICAgIH07XG4gICAgXG4gICAgLy8gR2VuZXJhciB1biBJRCBcdTAwRkFuaWNvIHBhcmEgbGEgdGFyZWEgKG8gZXh0cmFlcmxvIGRlbCB0ZXh0bylcbiAgICBjb25zdCB0YXNrSWQgPSB0aGlzLmV4dHJhY3RUYXNrSWQodGFza1RleHQpIHx8IHRoaXMuZ2VuZXJhdGVUYXNrSWQoZmlsZS5iYXNlbmFtZSwgbGluZU51bWJlcik7XG4gICAgY29uc29sZS5sb2coYFtUYXNrTmF2aWdhdG9yXSBJRCBkZSB0YXJlYTogJHt0YXNrSWR9YCk7XG4gICAgXG4gICAgLy8gQ3JlYXIgbGEgdGFyZWEgYlx1MDBFMXNpY2FcbiAgICBjb25zdCB0YXNrID0gbmV3IFRhc2soXG4gICAgICAgIHRhc2tJZCxcbiAgICAgICAgdGhpcy5jbGVhblRhc2tUZXh0KHRhc2tUZXh0KSxcbiAgICAgICAgdGFza1RleHQsXG4gICAgICAgIGlzQ29tcGxldGVkLFxuICAgICAgICBmaWxlLFxuICAgICAgICBsaW5lSW5mb1xuICAgICk7XG4gICAgXG4gICAgLy8gRXh0cmFlciBtZXRhZGF0b3MgYWRpY2lvbmFsZXNcbiAgICB0aGlzLmV4dHJhY3RUYXNrTWV0YWRhdGEodGFzayk7XG4gICAgXG4gICAgcmV0dXJuIHRhc2s7XG59XG5cbiAgICBcblxuICAgIFxuICAgIC8qKlxuICAgICAqIExpbXBpYSBlbCB0ZXh0byBkZSBsYSB0YXJlYSBlbGltaW5hbmRvIG1ldGFkYXRvcyB5IHRhZ3NcbiAgICAgKi9cbiAgICBwcml2YXRlIGNsZWFuVGFza1RleHQodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgLy8gRWxpbWluYXIgSUQgZGUgdGFyZWFcbiAgICAgICAgbGV0IGNsZWFuVGV4dCA9IHRleHQucmVwbGFjZSgvXHVEODNDXHVERDk0XFxzK1xcdysvZywgJycpLnRyaW0oKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEVsaW1pbmFyIGV0aXF1ZXRhc1xuICAgICAgICBjbGVhblRleHQgPSBjbGVhblRleHQucmVwbGFjZSgvI1thLXpBLVowLTlfLV0rL2csICcnKS50cmltKCk7XG4gICAgICAgIFxuICAgICAgICAvLyBFbGltaW5hciBmZWNoYXNcbiAgICAgICAgY2xlYW5UZXh0ID0gY2xlYW5UZXh0LnJlcGxhY2UoL1tcdUQ4M0RcdURDQzVcdTIzRjNcdUQ4M0RcdURFRUJdXFxzKlxcZHs0fS1cXGR7Mn0tXFxkezJ9L2csICcnKS50cmltKCk7XG4gICAgICAgIFxuICAgICAgICAvLyBFbGltaW5hciBkZXBlbmRlbmNpYXNcbiAgICAgICAgY2xlYW5UZXh0ID0gY2xlYW5UZXh0LnJlcGxhY2UoL1x1MjZENFxccypcXHcrL2csICcnKS50cmltKCk7XG4gICAgICAgIFxuICAgICAgICAvLyBFbGltaW5hciBtZXRhZGF0b3MgZW50cmUgY29yY2hldGVzXG4gICAgICAgIGNsZWFuVGV4dCA9IGNsZWFuVGV4dC5yZXBsYWNlKC9cXFsoW15cXF1dKylcXF0vZywgJycpLnRyaW0oKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEVsaW1pbmFyIHByaW9yaWRhZGVzXG4gICAgICAgIGNsZWFuVGV4dCA9IGNsZWFuVGV4dC5yZXBsYWNlKC9bXHUyM0VCXHVEODNEXHVERDNDXHVEODNEXHVERDNEXHUyM0VDXS9nLCAnJykudHJpbSgpO1xuICAgICAgICBcbiAgICAgICAgLy8gRWxpbWluYXIgZXNwYWNpb3MgbVx1MDBGQWx0aXBsZXNcbiAgICAgICAgY2xlYW5UZXh0ID0gY2xlYW5UZXh0LnJlcGxhY2UoL1xccysvZywgJyAnKS50cmltKCk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gY2xlYW5UZXh0O1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBFeHRyYWUgeSBwcm9jZXNhIGxvcyBtZXRhZGF0b3MgZGUgbGEgdGFyZWFcbiAgICAgKi9cbiAgICBwcml2YXRlIGV4dHJhY3RUYXNrTWV0YWRhdGEodGFzazogVGFzayk6IHZvaWQge1xuICAgICAgICBjb25zdCB0ZXh0ID0gdGFzay5yYXdUZXh0O1xuICAgICAgICBcbiAgICAgICAgLy8gRXh0cmFlciBwcmlvcmlkYWRcbiAgICAgICAgdGhpcy5leHRyYWN0UHJpb3JpdHkodGFzaywgdGV4dCk7XG4gICAgICAgIFxuICAgICAgICAvLyBFeHRyYWVyIGZlY2hhcyB5IGhvcmFyaW9zXG4gICAgICAgIHRoaXMuZXh0cmFjdERhdGVzKHRhc2ssIHRleHQpO1xuICAgICAgICBcbiAgICAgICAgLy8gRXh0cmFlciBldGlxdWV0YXNcbiAgICAgICAgdGhpcy5leHRyYWN0VGFncyh0YXNrLCB0ZXh0KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEV4dHJhZXIgZGVwZW5kZW5jaWFzXG4gICAgICAgIHRoaXMuZXh0cmFjdERlcGVuZGVuY2llcyh0YXNrLCB0ZXh0KTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogRXh0cmFlIGxhIHByaW9yaWRhZCBkZSBsYSB0YXJlYVxuICAgICAqL1xuICAgIHByaXZhdGUgZXh0cmFjdFByaW9yaXR5KHRhc2s6IFRhc2ssIHRleHQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAodGV4dC5pbmNsdWRlcygnXHUyM0VCJykpIHtcbiAgICAgICAgICAgIHRhc2sucHJpb3JpdHkgPSBUYXNrUHJpb3JpdHkuSElHSEVTVDtcbiAgICAgICAgfSBlbHNlIGlmICh0ZXh0LmluY2x1ZGVzKCdcdUQ4M0RcdUREM0MnKSkge1xuICAgICAgICAgICAgdGFzay5wcmlvcml0eSA9IFRhc2tQcmlvcml0eS5ISUdIO1xuICAgICAgICB9IGVsc2UgaWYgKHRleHQuaW5jbHVkZXMoJ1x1RDgzRFx1REQzRCcpKSB7XG4gICAgICAgICAgICB0YXNrLnByaW9yaXR5ID0gVGFza1ByaW9yaXR5LkxPVztcbiAgICAgICAgfSBlbHNlIGlmICh0ZXh0LmluY2x1ZGVzKCdcdTIzRUMnKSkge1xuICAgICAgICAgICAgdGFzay5wcmlvcml0eSA9IFRhc2tQcmlvcml0eS5MT1dFU1Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXNrLnByaW9yaXR5ID0gVGFza1ByaW9yaXR5Lk5PUk1BTDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBFeHRyYWUgbGFzIGZlY2hhcyB5IGhvcmFyaW9zIGRlIGxhIHRhcmVhXG4gICAgICovXG4gICAgcHJpdmF0ZSBleHRyYWN0RGF0ZXModGFzazogVGFzaywgdGV4dDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIC8vIEV4dHJhZXIgZmVjaGEgZGUgaW5pY2lvIChcdUQ4M0RcdURFRUIpXG4gICAgICAgIGNvbnN0IHN0YXJ0RGF0ZVJlZ2V4ID0gL1x1RDgzRFx1REVFQlxccyooXFxkezR9LVxcZHsyfS1cXGR7Mn0pLztcbiAgICAgICAgY29uc3Qgc3RhcnREYXRlTWF0Y2ggPSB0ZXh0Lm1hdGNoKHN0YXJ0RGF0ZVJlZ2V4KTtcbiAgICAgICAgaWYgKHN0YXJ0RGF0ZU1hdGNoKSB7XG4gICAgICAgICAgICB0YXNrLnRpbWluZy5zdGFydERhdGUgPSBzdGFydERhdGVNYXRjaFsxXTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gRXh0cmFlciBmZWNoYSBsXHUwMEVEbWl0ZSAoXHVEODNEXHVEQ0M1KVxuICAgICAgICBjb25zdCBkdWVEYXRlUmVnZXggPSAvXHVEODNEXHVEQ0M1XFxzKihcXGR7NH0tXFxkezJ9LVxcZHsyfSkvO1xuICAgICAgICBjb25zdCBkdWVEYXRlTWF0Y2ggPSB0ZXh0Lm1hdGNoKGR1ZURhdGVSZWdleCk7XG4gICAgICAgIGlmIChkdWVEYXRlTWF0Y2gpIHtcbiAgICAgICAgICAgIHRhc2sudGltaW5nLmR1ZURhdGUgPSBkdWVEYXRlTWF0Y2hbMV07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEV4dHJhZXIgZmVjaGEgcHJvZ3JhbWFkYSAoXHUyM0YzKVxuICAgICAgICBjb25zdCBzY2hlZHVsZWREYXRlUmVnZXggPSAvXHUyM0YzXFxzKihcXGR7NH0tXFxkezJ9LVxcZHsyfSkvO1xuICAgICAgICBjb25zdCBzY2hlZHVsZWREYXRlTWF0Y2ggPSB0ZXh0Lm1hdGNoKHNjaGVkdWxlZERhdGVSZWdleCk7XG4gICAgICAgIGlmIChzY2hlZHVsZWREYXRlTWF0Y2gpIHtcbiAgICAgICAgICAgIHRhc2sudGltaW5nLnNjaGVkdWxlZERhdGUgPSBzY2hlZHVsZWREYXRlTWF0Y2hbMV07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEV4dHJhZXIgaG9yYSBkZSBpbmljaW8gW2hJOjpdXG4gICAgICAgIGNvbnN0IHN0YXJ0VGltZVJlZ2V4ID0gL1xcW2hJOjpcXHMqKFteXFxdXSspXFxdLztcbiAgICAgICAgY29uc3Qgc3RhcnRUaW1lTWF0Y2ggPSB0ZXh0Lm1hdGNoKHN0YXJ0VGltZVJlZ2V4KTtcbiAgICAgICAgaWYgKHN0YXJ0VGltZU1hdGNoKSB7XG4gICAgICAgICAgICB0YXNrLnRpbWluZy5zdGFydFRpbWUgPSBzdGFydFRpbWVNYXRjaFsxXTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gRXh0cmFlciBob3JhIGRlIGZpbiBbaEY6Ol1cbiAgICAgICAgY29uc3QgZW5kVGltZVJlZ2V4ID0gL1xcW2hGOjpcXHMqKFteXFxdXSspXFxdLztcbiAgICAgICAgY29uc3QgZW5kVGltZU1hdGNoID0gdGV4dC5tYXRjaChlbmRUaW1lUmVnZXgpO1xuICAgICAgICBpZiAoZW5kVGltZU1hdGNoKSB7XG4gICAgICAgICAgICB0YXNrLnRpbWluZy5lbmRUaW1lID0gZW5kVGltZU1hdGNoWzFdO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBFeHRyYWVyIGR1cmFjaVx1MDBGM24gZW4gbWludXRvcyBbWG1pbl1cbiAgICAgICAgY29uc3QgZHVyYXRpb25NaW5SZWdleCA9IC9cXFsoXFxkKyltaW5cXF0vO1xuICAgICAgICBjb25zdCBkdXJhdGlvbk1pbk1hdGNoID0gdGV4dC5tYXRjaChkdXJhdGlvbk1pblJlZ2V4KTtcbiAgICAgICAgaWYgKGR1cmF0aW9uTWluTWF0Y2gpIHtcbiAgICAgICAgICAgIHRhc2sudGltaW5nLmR1cmF0aW9uID0gcGFyc2VJbnQoZHVyYXRpb25NaW5NYXRjaFsxXSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEV4dHJhZXIgZHVyYWNpXHUwMEYzbiBlbiBob3JhcyBbWGhdXG4gICAgICAgIGNvbnN0IGR1cmF0aW9uSG91clJlZ2V4ID0gL1xcWyhcXGQrKD86XFwuXFxkKyk/KWhcXF0vO1xuICAgICAgICBjb25zdCBkdXJhdGlvbkhvdXJNYXRjaCA9IHRleHQubWF0Y2goZHVyYXRpb25Ib3VyUmVnZXgpO1xuICAgICAgICBpZiAoZHVyYXRpb25Ib3VyTWF0Y2gpIHtcbiAgICAgICAgICAgIC8vIENvbnZlcnRpciBob3JhcyBhIG1pbnV0b3NcbiAgICAgICAgICAgIHRhc2sudGltaW5nLmR1cmF0aW9uID0gTWF0aC5yb3VuZChwYXJzZUZsb2F0KGR1cmF0aW9uSG91ck1hdGNoWzFdKSAqIDYwKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gRXh0cmFlciBzZW1hbmEgW3c6OiBbW1lZWVktV1hYXV1dXG4gICAgICAgIGNvbnN0IHdlZWtSZWdleCA9IC9cXFt3OjpcXHMqXFxbXFxbKFteXFxdXSspXFxdXFxdXFxdLztcbiAgICAgICAgY29uc3Qgd2Vla01hdGNoID0gdGV4dC5tYXRjaCh3ZWVrUmVnZXgpO1xuICAgICAgICBpZiAod2Vla01hdGNoKSB7XG4gICAgICAgICAgICB0YXNrLnRpbWluZy53ZWVrID0gd2Vla01hdGNoWzFdO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIEV4dHJhZSB0b2RhcyBsYXMgZXRpcXVldGFzIGRlIGxhIHRhcmVhXG4gICAgICovXG4gICAgLyoqXG4gICAgICogRXh0cmFlIHRvZGFzIGxhcyBldGlxdWV0YXMgZGUgbGEgdGFyZWFcbiAgICAgKi9cbiAgICBwcml2YXRlIGV4dHJhY3RUYWdzKHRhc2s6IFRhc2ssIHRleHQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICAvLyBJbmljaWFsaXphciBhcnJheXMgdmFjXHUwMEVEb3NcbiAgICAgICAgdGFzay50YWdzLmNvbnRleHRzID0gW107XG4gICAgICAgIHRhc2sudGFncy5wZW9wbGUgPSBbXTtcbiAgICAgICAgdGFzay50YWdzLmd0ZFRhZ3MgPSBbXTtcbiAgICAgICAgdGFzay50YWdzLm90aGVyVGFncyA9IFtdO1xuICAgICAgICB0YXNrLnRhZ3MuYWxsID0gW107XG4gICAgICAgIFxuICAgICAgICAvLyBSZWdleCBwYXJhIGRldGVjdGFyIGV0aXF1ZXRhcyAoI2FsZ28pXG4gICAgICAgIGNvbnN0IHRhZ1JlZ2V4ID0gLyMoW2EtekEtWjAtOV8tXSspL2c7XG4gICAgICAgIGxldCB0YWdNYXRjaDtcbiAgICAgICAgXG4gICAgICAgIHdoaWxlICgodGFnTWF0Y2ggPSB0YWdSZWdleC5leGVjKHRleHQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gdGFnTWF0Y2hbMV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFcdTAwRjFhZGlyIGFsIGFycmF5IGRlIHRvZG9zIGxvcyB0YWdzXG4gICAgICAgICAgICB0YXNrLnRhZ3MuYWxsLnB1c2godGFnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2xhc2lmaWNhciBlbCB0YWcgc2VnXHUwMEZBbiBzdSB0aXBvXG4gICAgICAgICAgICBpZiAodGFnLnN0YXJ0c1dpdGgoJ2N4LScpKSB7XG4gICAgICAgICAgICAgICAgLy8gQ29udGV4dG9cbiAgICAgICAgICAgICAgICB0YXNrLnRhZ3MuY29udGV4dHMucHVzaCh0YWcpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0YWcuc3RhcnRzV2l0aCgncHgtJykpIHtcbiAgICAgICAgICAgICAgICAvLyBQZXJzb25hIGFzaWduYWRhXG4gICAgICAgICAgICAgICAgdGFzay50YWdzLnBlb3BsZS5wdXNoKHRhZyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRhZy5zdGFydHNXaXRoKCdHVEQtJykpIHtcbiAgICAgICAgICAgICAgICAvLyBUYWcgcmVsYWNpb25hZG8gY29uIEdURFxuICAgICAgICAgICAgICAgIHRhc2sudGFncy5ndGRUYWdzLnB1c2godGFnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gT3RybyB0aXBvIGRlIHRhZ1xuICAgICAgICAgICAgICAgIHRhc2sudGFncy5vdGhlclRhZ3MucHVzaCh0YWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIEV4dHJhZSBsYXMgZGVwZW5kZW5jaWFzIGRlIGxhIHRhcmVhXG4gICAgICovXG4gICAgcHJpdmF0ZSBleHRyYWN0RGVwZW5kZW5jaWVzKHRhc2s6IFRhc2ssIHRleHQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICAvLyBSZWdleCBwYXJhIGRldGVjdGFyIGRlcGVuZGVuY2lhcyAoXHUyNkQ0IHNlZ3VpZG8gZGUgdW4gSUQpXG4gICAgICAgIGNvbnN0IGRlcGVuZGVuY3lSZWdleCA9IC9cdTI2RDRcXHMqKFxcdyspL2c7XG4gICAgICAgIGxldCBkZXBlbmRlbmN5TWF0Y2g7XG4gICAgICAgIFxuICAgICAgICB3aGlsZSAoKGRlcGVuZGVuY3lNYXRjaCA9IGRlcGVuZGVuY3lSZWdleC5leGVjKHRleHQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgZGVwZW5kZW5jeUlkID0gZGVwZW5kZW5jeU1hdGNoWzFdO1xuICAgICAgICAgICAgdGFzay5kZXBlbmRlbmNpZXMucHVzaChkZXBlbmRlbmN5SWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIEV4dHJhZSBlbCBJRCBkZSBsYSB0YXJlYSBkZWwgdGV4dG8gc2kgZXhpc3RlXG4gICAgICovXG4gICAgcHJpdmF0ZSBleHRyYWN0VGFza0lkKHRleHQ6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgICAgICAvLyBSZWdleCBwYXJhIGV4dHJhZXIgZWwgSUQgZGUgbGEgdGFyZWEgKFx1RDgzQ1x1REQ5NCBzZWd1aWRvIGRlIHVuIElEKVxuICAgICAgICBjb25zdCBpZFJlZ2V4ID0gL1x1RDgzQ1x1REQ5NFxccyooXFx3KykvO1xuICAgICAgICBjb25zdCBpZE1hdGNoID0gdGV4dC5tYXRjaChpZFJlZ2V4KTtcbiAgICAgICAgXG4gICAgICAgIGlmIChpZE1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gaWRNYXRjaFsxXTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIEdlbmVyYSB1biBJRCBcdTAwRkFuaWNvIHBhcmEgbGEgdGFyZWEgc2kgbm8gdGllbmUgdW5vIGV4cGxcdTAwRURjaXRvXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZVRhc2tJZChmaWxlUHJlZml4OiBzdHJpbmcsIGxpbmVOdW1iZXI6IG51bWJlcik6IHN0cmluZyB7XG4gICAgICAgIC8vIFVzYXIgdW4gcHJlZmlqbyBiYXNhZG8gZW4gZWwgYXJjaGl2byB5IGVsIG5cdTAwRkFtZXJvIGRlIGxcdTAwRURuZWFcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gRGF0ZS5ub3coKS50b1N0cmluZygzNik7XG4gICAgICAgIGNvbnN0IHJhbmRvbSA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA1KTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBgJHtmaWxlUHJlZml4LnN1YnN0cmluZygwLCAzKX0ke2xpbmVOdW1iZXJ9JHt0aW1lc3RhbXAuc3Vic3RyaW5nKHRpbWVzdGFtcC5sZW5ndGgtNCl9JHtyYW5kb219YC50b1VwcGVyQ2FzZSgpO1xuICAgIH1cbn1cblxuLy8gREVWRUxPUE1FTlRfQ0hFQ0tQT0lOVDogXCJ0YXNrX3BhcnNlclwiXG4vLyBEZXNjcmlwY2lcdTAwRjNuOiBTZXJ2aWNpbyBwYXJhIGFuYWxpemFyIHkgZXh0cmFlciB0YXJlYXMgZGUgYXJjaGl2b3Ncbi8vIEVzdGFkbzogQ29tcGxldG8iLCAiLy8gc3JjL21vZHVsZXMvdGFza05hdmlnYXRvci9zZXJ2aWNlcy9UYXNrQ2xhc3NpZmllci50c1xuXG5pbXBvcnQgeyBUYXNrLCBUYXNrTGlzdFR5cGUgfSBmcm9tICcuLi9tb2RlbHMvVGFzayc7XG5pbXBvcnQgeyBIaWVyYXJjaHlWaWV3TW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvSGllcmFyY2h5Vmlld01vZGVsJztcbmltcG9ydCB7IEVudGl0eVR5cGUgfSBmcm9tICcuLi9tb2RlbHMvRW50aXR5JztcblxuLyoqXG4gKiBTZXJ2aWNpbyBwYXJhIGNsYXNpZmljYXIgdGFyZWFzIHNlZ1x1MDBGQW4gbGFzIHJlZ2xhcyBkZWwgc2lzdGVtYSBHVERcbiAqL1xuZXhwb3J0IGNsYXNzIFRhc2tDbGFzc2lmaWVyIHtcbiAgICAvKipcbiAgICAgKiBDbGFzaWZpY2EgdG9kYXMgbGFzIHRhcmVhcyBlbiBlbCBtb2RlbG8gamVyXHUwMEUxcnF1aWNvXG4gICAgICovXG4gICAgYXN5bmMgY2xhc3NpZnlUYXNrcyhtb2RlbDogSGllcmFyY2h5Vmlld01vZGVsKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBJbmljaWFsaXphciBsYXMgbGlzdGFzIEdURFxuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplR1RETGlzdHMobW9kZWwpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBPYnRlbmVyIHRvZGFzIGxhcyB0YXJlYXMgZGVsIG1vZGVsb1xuICAgICAgICAgICAgY29uc3QgYWxsVGFza3MgPSB0aGlzLmdldEFsbFRhc2tzKG1vZGVsKTtcbiAgICAgICAgICAgIG1vZGVsLmFsbFRhc2tzID0gYWxsVGFza3M7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENsYXNpZmljYXIgY2FkYSB0YXJlYVxuICAgICAgICAgICAgZm9yIChjb25zdCB0YXNrIG9mIGFsbFRhc2tzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhc2suY29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIExhcyB0YXJlYXMgY29tcGxldGFkYXMgc2UgaWdub3JhbiBvIHNlIHBvZHJcdTAwRURhbiBjb2xvY2FyIGVuIHVuYSBsaXN0YSBzZXBhcmFkYVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gRGV0ZXJtaW5hciBhIHF1XHUwMEU5IGxpc3RhIEdURCBwZXJ0ZW5lY2VcbiAgICAgICAgICAgICAgICBjb25zdCBsaXN0VHlwZSA9IHRoaXMuZGV0ZXJtaW5lVGFza0xpc3QodGFzaywgYWxsVGFza3MpO1xuICAgICAgICAgICAgICAgIHRhc2subGlzdFR5cGUgPSBsaXN0VHlwZTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBBXHUwMEYxYWRpciBsYSB0YXJlYSBhIGxhIGxpc3RhIGNvcnJlc3BvbmRpZW50ZVxuICAgICAgICAgICAgICAgIGNvbnN0IHRhc2tzSW5MaXN0ID0gbW9kZWwuZ3RkTGlzdHMuZ2V0KGxpc3RUeXBlKSB8fCBbXTtcbiAgICAgICAgICAgICAgICB0YXNrc0luTGlzdC5wdXNoKHRhc2spO1xuICAgICAgICAgICAgICAgIG1vZGVsLmd0ZExpc3RzLnNldChsaXN0VHlwZSwgdGFza3NJbkxpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBBY3R1YWxpemFyIGxvcyByZXN1bHRhZG9zIGZpbHRyYWRvcyBpbmljaWFsZXMgKHNpbiBmaWx0cm9zIGFwbGljYWRvcylcbiAgICAgICAgICAgIG1vZGVsLmZpbHRlcmVkVGFza3MgPSBuZXcgTWFwKG1vZGVsLmd0ZExpc3RzKTtcbiAgICAgICAgICAgIFxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIGNsYXNpZmljYXIgdGFyZWFzOlwiLCBlcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBJbmljaWFsaXphIGxhcyBsaXN0YXMgR1REIHZhY1x1MDBFRGFzXG4gICAgICovXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplR1RETGlzdHMobW9kZWw6IEhpZXJhcmNoeVZpZXdNb2RlbCk6IHZvaWQge1xuICAgICAgICBtb2RlbC5ndGRMaXN0cy5jbGVhcigpO1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXIgdW5hIGVudHJhZGEgcGFyYSBjYWRhIHRpcG8gZGUgbGlzdGFcbiAgICAgICAgZm9yIChjb25zdCBsaXN0VHlwZSBvZiBPYmplY3QudmFsdWVzKFRhc2tMaXN0VHlwZSkpIHtcbiAgICAgICAgICAgIG1vZGVsLmd0ZExpc3RzLnNldChsaXN0VHlwZSwgW10pO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIE9idGllbmUgdG9kYXMgbGFzIHRhcmVhcyBkZWwgbW9kZWxvIGplclx1MDBFMXJxdWljb1xuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0QWxsVGFza3MobW9kZWw6IEhpZXJhcmNoeVZpZXdNb2RlbCk6IFRhc2tbXSB7XG4gICAgICAgIGNvbnN0IGFsbFRhc2tzOiBUYXNrW10gPSBbXTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHByb2Nlc3NFbnRpdHkgPSAoZW50aXR5KSA9PiB7XG4gICAgICAgICAgICAvLyBBXHUwMEYxYWRpciB0YXJlYXMgZGUgbGEgZW50aWRhZCBhY3R1YWxcbiAgICAgICAgICAgIGFsbFRhc2tzLnB1c2goLi4uZW50aXR5LnRhc2tzKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gUHJvY2VzYXIgZW50aWRhZGVzIGhpamFzIHJlY3Vyc2l2YW1lbnRlXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGVudGl0eS5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIHByb2Nlc3NFbnRpdHkoY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gUHJvY2VzYXIgdG9kYXMgbGFzIGVudGlkYWRlcyByYVx1MDBFRHpcbiAgICAgICAgZm9yIChjb25zdCByb290RW50aXR5IG9mIG1vZGVsLnJvb3RFbnRpdGllcykge1xuICAgICAgICAgICAgcHJvY2Vzc0VudGl0eShyb290RW50aXR5KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGFsbFRhc2tzO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmEgYSBxdVx1MDBFOSBsaXN0YSBHVEQgcGVydGVuZWNlIHVuYSB0YXJlYVxuICAgICAqL1xuICAgIHByaXZhdGUgZGV0ZXJtaW5lVGFza0xpc3QodGFzazogVGFzaywgYWxsVGFza3M6IFRhc2tbXSk6IFRhc2tMaXN0VHlwZSB7XG4gICAgICAgIC8vIENvbXByb2JhciBzaSBsYSB0YXJlYSBlcyBwYXJhIFwiQWxnXHUwMEZBbiBEXHUwMEVEYSAvIFRhbCBWZXpcIlxuICAgICAgICBpZiAodGFzay5oYXNHVERUYWcoJ0FsZ3VuRGlhJykpIHtcbiAgICAgICAgICAgIHJldHVybiBUYXNrTGlzdFR5cGUuU09NRURBWV9NQVlCRTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ29tcHJvYmFyIHNpIGxhIHRhcmVhIGVzIHBhcmEgXCJFc3RhIFNlbWFuYSBOb1wiXG4gICAgICAgIGlmICh0YXNrLmhhc0dURFRhZygnRXN0YVNlbWFuYU5vJykpIHtcbiAgICAgICAgICAgIHJldHVybiBUYXNrTGlzdFR5cGUuTk9UX1RISVNfV0VFSztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ29tcHJvYmFyIHNpIGxhIHRhcmVhIGVzIGRlIFwiUHJveWVjdG9zXCJcbiAgICAgICAgaWYgKHRhc2suaGFzQ29udGV4dCgnUHJveWVjdG9HVEQnKSB8fCB0YXNrLmhhc0NvbnRleHQoJ0VudHJlZ2FibGUnKSkge1xuICAgICAgICAgICAgcmV0dXJuIFRhc2tMaXN0VHlwZS5QUk9KRUNUUztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ29tcHJvYmFyIHNpIGxhIHRhcmVhIGVzIGRlIFwiQ2FsZW5kYXJpb1wiXG4gICAgICAgIGlmICh0YXNrLnRpbWluZy5kdWVEYXRlICYmIHRhc2sudGltaW5nLnN0YXJ0VGltZSkge1xuICAgICAgICAgICAgcmV0dXJuIFRhc2tMaXN0VHlwZS5DQUxFTkRBUjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ29tcHJvYmFyIHNpIGxhIHRhcmVhIGVzdFx1MDBFMSBlbiBwYXVzYVxuICAgICAgICBpZiAodGhpcy5pc1Rhc2tXYWl0aW5nKHRhc2ssIGFsbFRhc2tzKSkge1xuICAgICAgICAgICAgcmV0dXJuIFRhc2tMaXN0VHlwZS5XQUlUSU5HO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBDb21wcm9iYXIgc2kgbGEgdGFyZWEgZXMgZGUgXCJPamFsXHUwMEUxIEhveVwiXG4gICAgICAgIGlmICh0aGlzLmlzVGFza0ZvclRvZGF5KHRhc2spKSB7XG4gICAgICAgICAgICByZXR1cm4gVGFza0xpc3RUeXBlLkhPUEVGVUxMWV9UT0RBWTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ29tcHJvYmFyIHNpIGxhIHRhcmVhIGVzdFx1MDBFMSBcIkFzaWduYWRhXCJcbiAgICAgICAgaWYgKHRhc2sudGFncy5wZW9wbGUubGVuZ3RoID4gMCAmJiB0YXNrLnRhZ3MuY29udGV4dHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gVGFza0xpc3RUeXBlLkFTU0lHTkVEO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBDb21wcm9iYXIgc2kgbGEgdGFyZWEgZXMgZGUgXCJQclx1MDBGM3hpbWFzIEFjY2lvbmVzXCJcbiAgICAgICAgaWYgKHRhc2sudGFncy5jb250ZXh0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gVGFza0xpc3RUeXBlLk5FWFRfQUNUSU9OUztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gU2kgbm8gY3VtcGxlIG5pbmd1bm8gZGUgbG9zIGNyaXRlcmlvcyBhbnRlcmlvcmVzLCB2YSBhIFwiQmFuZGVqYSBkZSBFbnRyYWRhXCJcbiAgICAgICAgcmV0dXJuIFRhc2tMaXN0VHlwZS5JTkJPWDtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5hIHNpIHVuYSB0YXJlYSBlc3RcdTAwRTEgZW4gcGF1c2EgKGVuIGVzcGVyYSlcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzVGFza1dhaXRpbmcodGFzazogVGFzaywgYWxsVGFza3M6IFRhc2tbXSk6IGJvb2xlYW4ge1xuICAgICAgICAvLyAxLiBQb3IgZmVjaGEgZnV0dXJhXG4gICAgICAgIGlmICh0YXNrLnRpbWluZy5zdGFydERhdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKHRhc2sudGltaW5nLnN0YXJ0RGF0ZSk7XG4gICAgICAgICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICB0b2RheS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHN0YXJ0RGF0ZSA+IHRvZGF5KSB7XG4gICAgICAgICAgICAgICAgdGFzay5pc0Jsb2NrZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRhc2suYmxvY2tSZWFzb24gPSBgRXNwZXJhbmRvIGhhc3RhICR7dGFzay50aW1pbmcuc3RhcnREYXRlfWA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIDIuIFBvciBkZXBlbmRlbmNpYSBubyBjb21wbGV0YWRhXG4gICAgICAgIGlmICh0YXNrLmRlcGVuZGVuY2llcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBpbmNvbXBsZXRlRGVwZW5kZW5jaWVzID0gdGFzay5kZXBlbmRlbmNpZXMuZmlsdGVyKGRlcElkID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZXBlbmRlbmN5VGFzayA9IGFsbFRhc2tzLmZpbmQodCA9PiB0LnRhc2tJZCA9PT0gZGVwSWQgfHwgdC5pZCA9PT0gZGVwSWQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBkZXBlbmRlbmN5VGFzayAmJiAhZGVwZW5kZW5jeVRhc2suY29tcGxldGVkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChpbmNvbXBsZXRlRGVwZW5kZW5jaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0YXNrLmlzQmxvY2tlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGFzay5ibG9ja1JlYXNvbiA9IGBFc3BlcmFuZG8gYSBxdWUgc2UgY29tcGxldGVuICR7aW5jb21wbGV0ZURlcGVuZGVuY2llcy5sZW5ndGh9IHRhcmVhcyBkZXBlbmRpZW50ZXNgO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyAzLiBQb3Igc2VtYW5hIGZ1dHVyYVxuICAgICAgICBpZiAodGFzay50aW1pbmcud2Vlaykge1xuICAgICAgICAgICAgY29uc3Qgd2Vla1JlZ2V4ID0gLyhcXGR7NH0pLVcoXFxkezJ9KS87XG4gICAgICAgICAgICBjb25zdCBtYXRjaCA9IHRhc2sudGltaW5nLndlZWsubWF0Y2god2Vla1JlZ2V4KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeWVhciA9IHBhcnNlSW50KG1hdGNoWzFdKTtcbiAgICAgICAgICAgICAgICBjb25zdCB3ZWVrID0gcGFyc2VJbnQobWF0Y2hbMl0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIE9idGVuZXIgbGEgc2VtYW5hIGFjdHVhbFxuICAgICAgICAgICAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50WWVhciA9IHRvZGF5LmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFdlZWsgPSB0aGlzLmdldFdlZWtOdW1iZXIodG9kYXkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICh5ZWFyID4gY3VycmVudFllYXIgfHwgKHllYXIgPT09IGN1cnJlbnRZZWFyICYmIHdlZWsgPiBjdXJyZW50V2VlaykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFzay5pc0Jsb2NrZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0YXNrLmJsb2NrUmVhc29uID0gYFByb2dyYW1hZG8gcGFyYSBsYSBzZW1hbmEgJHt0YXNrLnRpbWluZy53ZWVrfWA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmEgc2kgdW5hIHRhcmVhIGVzIHBhcmEgXCJPamFsXHUwMEUxIEhveVwiXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc1Rhc2tGb3JUb2RheSh0YXNrOiBUYXNrKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgICAgdG9kYXkuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICAgIGNvbnN0IHRvZGF5U3RyID0gdG9kYXkudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdOyAvLyBZWVlZLU1NLUREXG4gICAgICAgIFxuICAgICAgICAvLyBDb21wcm9iYXIgc2kgbGEgdGFyZWEgdGllbmUgdW5hIGZlY2hhIGxcdTAwRURtaXRlIG8gcHJvZ3JhbWFkYSBwYXJhIGhveVxuICAgICAgICBpZiAoKHRhc2sudGltaW5nLmR1ZURhdGUgPT09IHRvZGF5U3RyIHx8IHRhc2sudGltaW5nLnNjaGVkdWxlZERhdGUgPT09IHRvZGF5U3RyKSAmJiAhdGFzay50aW1pbmcuc3RhcnRUaW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBPYnRpZW5lIGVsIG5cdTAwRkFtZXJvIGRlIHNlbWFuYSBkZWwgYVx1MDBGMW8gZGUgdW5hIGZlY2hhXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRXZWVrTnVtYmVyKGRhdGU6IERhdGUpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBmaXJzdERheU9mWWVhciA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgMCwgMSk7XG4gICAgICAgIGNvbnN0IHBhc3REYXlzT2ZZZWFyID0gKGRhdGUuZ2V0VGltZSgpIC0gZmlyc3REYXlPZlllYXIuZ2V0VGltZSgpKSAvIDg2NDAwMDAwO1xuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKChwYXN0RGF5c09mWWVhciArIGZpcnN0RGF5T2ZZZWFyLmdldERheSgpICsgMSkgLyA3KTtcbiAgICB9XG59XG5cbi8vIERFVkVMT1BNRU5UX0NIRUNLUE9JTlQ6IFwidGFza19jbGFzc2lmaWVyXCJcbi8vIERlc2NyaXBjaVx1MDBGM246IFNlcnZpY2lvIHBhcmEgY2xhc2lmaWNhciB0YXJlYXMgc2VnXHUwMEZBbiBsYXMgcmVnbGFzIEdURFxuLy8gRXN0YWRvOiBDb21wbGV0byIsICIvLyBzcmMvbW9kdWxlcy90YXNrTmF2aWdhdG9yL2NvbXBvbmVudHMvVmlld1JlbmRlcmVyLnRzXG5cbmltcG9ydCB7IEhpZXJhcmNoeVZpZXdNb2RlbCwgVmlld01vZGUsIEZpbHRlck9wdGlvbnMgfSBmcm9tICcuLi9tb2RlbHMvSGllcmFyY2h5Vmlld01vZGVsJztcbmltcG9ydCB7IEZpbHRlclBhbmVsIH0gZnJvbSAnLi9GaWx0ZXJQYW5lbCc7XG5pbXBvcnQgeyBJRW50aXR5LCBFbnRpdHlUeXBlLCBFbnRpdHlTdGF0ZSB9IGZyb20gJy4uL21vZGVscy9FbnRpdHknO1xuaW1wb3J0IHsgVGFzaywgVGFza0xpc3RUeXBlLCBUYXNrUHJpb3JpdHksIExpbmVJbmZvIH0gZnJvbSAnLi4vbW9kZWxzL1Rhc2snO1xuaW1wb3J0IHsgTmF2aWdhdGlvblV0aWxzIH0gZnJvbSAnLi4vdXRpbHMvTmF2aWdhdGlvblV0aWxzJztcblxuLyoqXG4gKiBDb21wb25lbnRlIHBhcmEgcmVuZGVyaXphciBsYSB2aXN0YSBkZSBuYXZlZ2FjaVx1MDBGM24gZGUgdGFyZWFzXG4gKi9cbmV4cG9ydCBjbGFzcyBWaWV3UmVuZGVyZXIge1xuICAgIHByaXZhdGUgbmF2aWdhdGlvblV0aWxzOiBOYXZpZ2F0aW9uVXRpbHM7XG4gICAgXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubmF2aWdhdGlvblV0aWxzID0gbmV3IE5hdmlnYXRpb25VdGlscygpO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBSZW5kZXJpemEgbGEgdmlzdGEgY29tcGxldGEgZGVsIG5hdmVnYWRvciBkZSB0YXJlYXNcbiAgICAgKi9cbi8vIE1vZGlmaWNhciBlbCBtXHUwMEU5dG9kbyByZW5kZXIgZGUgVmlld1JlbmRlcmVyIHBhcmEgYVx1MDBGMWFkaXIgbWFuZWpvIGRlIGV2ZW50b3NcblxuLyoqXG4gKiBSZW5kZXJpemEgbGEgdmlzdGEgY29tcGxldGEgZGVsIG5hdmVnYWRvciBkZSB0YXJlYXNcbiAqL1xucmVuZGVyKGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCwgbW9kZWw6IEhpZXJhcmNoeVZpZXdNb2RlbCwgZmlsdGVyUGFuZWw6IEZpbHRlclBhbmVsKTogdm9pZCB7XG4gICAgLy8gTGltcGlhciBlbCBjb250ZW5lZG9yXG4gICAgY29udGFpbmVyRWwuZW1wdHkoKTtcbiAgICBjb250YWluZXJFbC5hZGRDbGFzcygndGFzay1uYXZpZ2F0b3ItY29udGFpbmVyJyk7XG4gICAgXG4gICAgLy8gQ3JlYXIgbGEgZXN0cnVjdHVyYSBwcmluY2lwYWxcbiAgICBjb25zdCBoZWFkZXIgPSB0aGlzLmNyZWF0ZUhlYWRlcihjb250YWluZXJFbCwgbW9kZWwpO1xuICAgIGNvbnN0IHZpZXdPcHRpb25zID0gdGhpcy5jcmVhdGVWaWV3T3B0aW9ucyhjb250YWluZXJFbCwgbW9kZWwpO1xuICAgIGNvbnN0IGNvbnRlbnRDb250YWluZXIgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoeyBjbHM6ICd0YXNrLW5hdmlnYXRvci1jb250ZW50JyB9KTtcbiAgICBcbiAgICAvLyBSZW5kZXJpemFyIGVsIHBhbmVsIGRlIGZpbHRyb3NcbiAgICBjb25zdCBmaWx0ZXJDb250YWluZXIgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoeyBjbHM6ICd0YXNrLW5hdmlnYXRvci1maWx0ZXItY29udGFpbmVyJyB9KTtcbiAgICBmaWx0ZXJQYW5lbC5yZW5kZXIoZmlsdGVyQ29udGFpbmVyKTtcbiAgICBcbiAgICAvLyBBXHUwMEYxYWRpciBsaXN0ZW5lciBwYXJhIGVsIGV2ZW50byBkZSByZXN0YWJsZWNlciBmaWx0cm9zXG4gICAgY29udGFpbmVyRWwuYWRkRXZlbnRMaXN0ZW5lcigndGFzay1uYXZpZ2F0b3ItcmVzZXQtZmlsdGVycycsICgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJbVGFza05hdmlnYXRvcl0gRXZlbnRvIGRlIHJlc3RhYmxlY2VyIGZpbHRyb3MgcmVjaWJpZG9cIik7XG4gICAgICAgIFxuICAgICAgICAvLyBDb25maWd1cmFyIGZpbHRyb3MgcGFyYSBtb3N0cmFyIHRvZG9cbiAgICAgICAgY29uc3QgcmVzZXRGaWx0ZXJzID0ge1xuICAgICAgICAgICAgc2hvd0NvbXBsZXRlZDogdHJ1ZSwgICAgICAgIC8vIE1vc3RyYXIgdGFyZWFzIGNvbXBsZXRhZGFzXG4gICAgICAgICAgICBzaG93QWN0aXZlOiB0cnVlLCAgICAgICAgICAgLy8gTW9zdHJhciBlbnRpZGFkZXMgYWN0aXZhc1xuICAgICAgICAgICAgc2hvd1BhdXNlZDogdHJ1ZSwgICAgICAgICAgIC8vIE1vc3RyYXIgZW50aWRhZGVzIHBhdXNhZGFzXG4gICAgICAgICAgICBzaG93U3RvcHBlZDogdHJ1ZSwgICAgICAgICAgLy8gTW9zdHJhciBlbnRpZGFkZXMgZGV0ZW5pZGFzXG4gICAgICAgICAgICBzaG93QXJjaGl2ZWQ6IHRydWUsICAgICAgICAgLy8gTW9zdHJhciBlbnRpZGFkZXMgYXJjaGl2YWRhc1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBzaG93QXJlYXNWaWRhOiB0cnVlLCAgICAgICAgLy8gTW9zdHJhciBcdTAwQzFyZWFzIGRlIFZpZGFcbiAgICAgICAgICAgIHNob3dBcmVhc0ludGVyZXM6IHRydWUsICAgICAvLyBNb3N0cmFyIFx1MDBDMXJlYXMgZGUgSW50ZXJcdTAwRTlzIFxuICAgICAgICAgICAgc2hvd1Byb3llY3Rvc1E6IHRydWUsICAgICAgIC8vIE1vc3RyYXIgUHJveWVjdG9zIFFcbiAgICAgICAgICAgIHNob3dQcm95ZWN0b3NHVEQ6IHRydWUsICAgICAvLyBNb3N0cmFyIFByb3llY3RvcyBHVERcbiAgICAgICAgICAgIHNob3dPdGhlckVudGl0aWVzOiB0cnVlLCAgICAvLyBNb3N0cmFyIG90cmFzIGVudGlkYWRlc1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb250ZXh0czogW10sICAgICAgICAgICAgICAgLy8gU2luIGZpbHRybyBkZSBjb250ZXh0b3MgZXNwZWNcdTAwRURmaWNvc1xuICAgICAgICAgICAgcGVvcGxlOiBbXSwgICAgICAgICAgICAgICAgIC8vIFNpbiBmaWx0cm8gZGUgcGVyc29uYXMgZXNwZWNcdTAwRURmaWNhc1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBlbmFibGVkTGlzdHM6IE9iamVjdC52YWx1ZXMoVGFza0xpc3RUeXBlKSwgLy8gVG9kYXMgbGFzIGxpc3RhcyBHVERcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc2VhcmNoVGV4dDogJycsICAgICAgICAgICAgIC8vIFNpbiB0ZXh0byBkZSBiXHUwMEZBc3F1ZWRhXG4gICAgICAgICAgICBkYXlzUmFuZ2U6IDMwICAgICAgICAgICAgICAgLy8gTWF5b3IgcmFuZ28gZGUgZFx1MDBFRGFzXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAvLyBEaXNwYXJhciBldmVudG8gcGFyYSBxdWUgZWwgcGFuZWwgZGUgZmlsdHJvcyBhY3R1YWxpY2Ugc3UgVUlcbiAgICAgICAgY29udGFpbmVyRWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ3Rhc2stbmF2aWdhdG9yLXVwZGF0ZS1maWx0ZXJzJywge1xuICAgICAgICAgICAgZGV0YWlsOiB7IGZpbHRlcnM6IHJlc2V0RmlsdGVycyB9XG4gICAgICAgIH0pKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFjdHVhbGl6YXIgbW9kZWxvIGNvbiBsb3MgZmlsdHJvcyByZXN0YWJsZWNpZG9zXG4gICAgICAgIG1vZGVsLmZpbHRlcnMgPSByZXNldEZpbHRlcnM7XG4gICAgICAgIG1vZGVsLmFwcGx5RmlsdGVycyhyZXNldEZpbHRlcnMpO1xuICAgICAgICBcbiAgICAgICAgLy8gVm9sdmVyIGEgcmVuZGVyaXphciBlbCBjb250ZW5pZG9cbiAgICAgICAgY29udGVudENvbnRhaW5lci5lbXB0eSgpO1xuICAgICAgICBcbiAgICAgICAgLy8gUmVuZGVyaXphciBlbCBjb250ZW5pZG8gc2VnXHUwMEZBbiBlbCBtb2RvIGRlIHZpc3VhbGl6YWNpXHUwMEYzblxuICAgICAgICBzd2l0Y2ggKG1vZGVsLnZpZXdNb2RlKSB7XG4gICAgICAgICAgICBjYXNlIFZpZXdNb2RlLkhJRVJBUkNIWTpcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckhpZXJhcmNoeVZpZXcoY29udGVudENvbnRhaW5lciwgbW9kZWwpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBWaWV3TW9kZS5HVERfTElTVFM6XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJHVERMaXN0c1ZpZXcoY29udGVudENvbnRhaW5lciwgbW9kZWwpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBWaWV3TW9kZS5DT01CSU5FRDpcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckNvbWJpbmVkVmlldyhjb250ZW50Q29udGFpbmVyLCBtb2RlbCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICAvLyBSZW5kZXJpemFyIGVsIGNvbnRlbmlkbyBzZWdcdTAwRkFuIGVsIG1vZG8gZGUgdmlzdWFsaXphY2lcdTAwRjNuXG4gICAgc3dpdGNoIChtb2RlbC52aWV3TW9kZSkge1xuICAgICAgICBjYXNlIFZpZXdNb2RlLkhJRVJBUkNIWTpcbiAgICAgICAgICAgIHRoaXMucmVuZGVySGllcmFyY2h5Vmlldyhjb250ZW50Q29udGFpbmVyLCBtb2RlbCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBWaWV3TW9kZS5HVERfTElTVFM6XG4gICAgICAgICAgICB0aGlzLnJlbmRlckdURExpc3RzVmlldyhjb250ZW50Q29udGFpbmVyLCBtb2RlbCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBWaWV3TW9kZS5DT01CSU5FRDpcbiAgICAgICAgICAgIHRoaXMucmVuZGVyQ29tYmluZWRWaWV3KGNvbnRlbnRDb250YWluZXIsIG1vZGVsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cbiAgICBcbiAgICAvKipcbiAgICAgKiBDcmVhIGVsIGVuY2FiZXphZG8gZGUgbGEgdmlzdGFcbiAgICAgKi9cbiAgICBwcml2YXRlIGNyZWF0ZUhlYWRlcihjb250YWluZXJFbDogSFRNTEVsZW1lbnQsIG1vZGVsOiBIaWVyYXJjaHlWaWV3TW9kZWwpOiBIVE1MRWxlbWVudCB7XG4gICAgICAgIGNvbnN0IGhlYWRlciA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdih7IGNsczogJ3Rhc2stbmF2aWdhdG9yLWhlYWRlcicgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBUXHUwMEVEdHVsbyBwcmluY2lwYWxcbiAgICAgICAgaGVhZGVyLmNyZWF0ZUVsKCdoMScsIHsgXG4gICAgICAgICAgICB0ZXh0OiAnTmF2ZWdhZG9yIGRlIFRhcmVhcyBHVEQnLFxuICAgICAgICAgICAgY2xzOiAndGFzay1uYXZpZ2F0b3ItdGl0bGUnXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gU3VidFx1MDBFRHR1bG8gY29uIGNvbnRleHRvIGFjdHVhbFxuICAgICAgICBjb25zdCBzdWJ0aXRsZSA9IGhlYWRlci5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICd0YXNrLW5hdmlnYXRvci1zdWJ0aXRsZScgfSk7XG4gICAgICAgIFxuICAgICAgICBpZiAobW9kZWwuZm9jdXNFbnRpdHkpIHtcbiAgICAgICAgICAgIGNvbnN0IGVudGl0eU5hbWUgPSBtb2RlbC5mb2N1c0VudGl0eS50aXRsZTtcbiAgICAgICAgICAgIGNvbnN0IGVudGl0eVR5cGUgPSB0aGlzLmdldEVudGl0eVR5cGVMYWJlbChtb2RlbC5mb2N1c0VudGl0eS50eXBlKTtcbiAgICAgICAgICAgIHN1YnRpdGxlLmNyZWF0ZVNwYW4oeyB0ZXh0OiBgQ29udGV4dG86ICR7ZW50aXR5VHlwZX0gLSAke2VudGl0eU5hbWV9YCB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQm90XHUwMEYzbiBwYXJhIGFicmlyIGxhIGVudGlkYWQgZW4gZm9jb1xuICAgICAgICAgICAgY29uc3Qgb3BlbkJ1dHRvbiA9IHN1YnRpdGxlLmNyZWF0ZUVsKCdidXR0b24nLCB7XG4gICAgICAgICAgICAgICAgY2xzOiAndGFzay1uYXZpZ2F0b3Itb3Blbi1idXR0b24nLFxuICAgICAgICAgICAgICAgIHRleHQ6ICdBYnJpcidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgb3BlbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRpb25VdGlscy5vcGVuRW50aXR5SW5OZXdMZWFmKG1vZGVsLmZvY3VzRW50aXR5LmZpbGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdWJ0aXRsZS5jcmVhdGVTcGFuKHsgdGV4dDogJ01vc3RyYW5kbyB2aXN0YSBnbG9iYWwnIH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBFc3RhZFx1MDBFRHN0aWNhc1xuICAgICAgICBjb25zdCBzdGF0cyA9IGhlYWRlci5jcmVhdGVEaXYoeyBjbHM6ICd0YXNrLW5hdmlnYXRvci1zdGF0cycgfSk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB0b3RhbEVudGl0aWVzID0gbW9kZWwuYWxsRW50aXRpZXMubGVuZ3RoO1xuICAgICAgICBjb25zdCB0b3RhbFRhc2tzID0gbW9kZWwuYWxsVGFza3MubGVuZ3RoO1xuICAgICAgICBjb25zdCBjb21wbGV0ZWRUYXNrcyA9IG1vZGVsLmFsbFRhc2tzLmZpbHRlcih0YXNrID0+IHRhc2suY29tcGxldGVkKS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHBlbmRpbmdUYXNrcyA9IHRvdGFsVGFza3MgLSBjb21wbGV0ZWRUYXNrcztcbiAgICAgICAgXG4gICAgICAgIHN0YXRzLmNyZWF0ZUVsKCdzcGFuJywgeyBcbiAgICAgICAgICAgIHRleHQ6IGAke3RvdGFsRW50aXRpZXN9IGVudGlkYWRlcyB8ICR7cGVuZGluZ1Rhc2tzfS8ke3RvdGFsVGFza3N9IHRhcmVhcyBwZW5kaWVudGVzYCxcbiAgICAgICAgICAgIGNsczogJ3Rhc2stbmF2aWdhdG9yLXN0YXRzLXRleHQnXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQm90XHUwMEYzbiBkZSBhY3R1YWxpemFjaVx1MDBGM25cbiAgICAgICAgY29uc3QgcmVmcmVzaEJ1dHRvbiA9IGhlYWRlci5jcmVhdGVFbCgnYnV0dG9uJywge1xuICAgICAgICAgICAgY2xzOiAndGFzay1uYXZpZ2F0b3ItcmVmcmVzaC1idXR0b24nLFxuICAgICAgICAgICAgdGV4dDogJ0FjdHVhbGl6YXInXG4gICAgICAgIH0pO1xuICAgICAgICByZWZyZXNoQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgLy8gRXZlbnRvIHBlcnNvbmFsaXphZG8gcGFyYSBzb2xpY2l0YXIgYWN0dWFsaXphY2lcdTAwRjNuXG4gICAgICAgICAgICBjb250YWluZXJFbC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgndGFzay1uYXZpZ2F0b3ItcmVmcmVzaCcpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gaGVhZGVyO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBDcmVhIGxvcyBib3RvbmVzIGRlIG9wY2lvbmVzIGRlIHZpc3RhXG4gICAgICovXG4gICAgcHJpdmF0ZSBjcmVhdGVWaWV3T3B0aW9ucyhjb250YWluZXJFbDogSFRNTEVsZW1lbnQsIG1vZGVsOiBIaWVyYXJjaHlWaWV3TW9kZWwpOiBIVE1MRWxlbWVudCB7XG4gICAgICAgIGNvbnN0IHZpZXdPcHRpb25zID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KHsgY2xzOiAndGFzay1uYXZpZ2F0b3Itdmlldy1vcHRpb25zJyB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEJvdFx1MDBGM24gcGFyYSB2aXN0YSBqZXJcdTAwRTFycXVpY2FcbiAgICAgICAgY29uc3QgaGllcmFyY2h5QnV0dG9uID0gdmlld09wdGlvbnMuY3JlYXRlRWwoJ2J1dHRvbicsIHtcbiAgICAgICAgICAgIGNsczogYHRhc2stbmF2aWdhdG9yLXZpZXctYnV0dG9uICR7bW9kZWwudmlld01vZGUgPT09IFZpZXdNb2RlLkhJRVJBUkNIWSA/ICdhY3RpdmUnIDogJyd9YCxcbiAgICAgICAgICAgIHRleHQ6ICdWaXN0YSBKZXJcdTAwRTFycXVpY2EnXG4gICAgICAgIH0pO1xuICAgICAgICBoaWVyYXJjaHlCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBFdmVudG8gcGVyc29uYWxpemFkbyBwYXJhIGNhbWJpYXIgZWwgbW9kbyBkZSB2aXN0YVxuICAgICAgICAgICAgY29udGFpbmVyRWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ3Rhc2stbmF2aWdhdG9yLXZpZXctY2hhbmdlJywge1xuICAgICAgICAgICAgICAgIGRldGFpbDogeyB2aWV3TW9kZTogVmlld01vZGUuSElFUkFSQ0hZIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBCb3RcdTAwRjNuIHBhcmEgdmlzdGEgZGUgbGlzdGFzIEdURFxuICAgICAgICBjb25zdCBndGRMaXN0c0J1dHRvbiA9IHZpZXdPcHRpb25zLmNyZWF0ZUVsKCdidXR0b24nLCB7XG4gICAgICAgICAgICBjbHM6IGB0YXNrLW5hdmlnYXRvci12aWV3LWJ1dHRvbiAke21vZGVsLnZpZXdNb2RlID09PSBWaWV3TW9kZS5HVERfTElTVFMgPyAnYWN0aXZlJyA6ICcnfWAsXG4gICAgICAgICAgICB0ZXh0OiAnTGlzdGFzIEdURCdcbiAgICAgICAgfSk7XG4gICAgICAgIGd0ZExpc3RzQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgY29udGFpbmVyRWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ3Rhc2stbmF2aWdhdG9yLXZpZXctY2hhbmdlJywge1xuICAgICAgICAgICAgICAgIGRldGFpbDogeyB2aWV3TW9kZTogVmlld01vZGUuR1REX0xJU1RTIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBCb3RcdTAwRjNuIHBhcmEgdmlzdGEgY29tYmluYWRhXG4gICAgICAgIGNvbnN0IGNvbWJpbmVkQnV0dG9uID0gdmlld09wdGlvbnMuY3JlYXRlRWwoJ2J1dHRvbicsIHtcbiAgICAgICAgICAgIGNsczogYHRhc2stbmF2aWdhdG9yLXZpZXctYnV0dG9uICR7bW9kZWwudmlld01vZGUgPT09IFZpZXdNb2RlLkNPTUJJTkVEID8gJ2FjdGl2ZScgOiAnJ31gLFxuICAgICAgICAgICAgdGV4dDogJ1Zpc3RhIENvbWJpbmFkYSdcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbWJpbmVkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgY29udGFpbmVyRWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ3Rhc2stbmF2aWdhdG9yLXZpZXctY2hhbmdlJywge1xuICAgICAgICAgICAgICAgIGRldGFpbDogeyB2aWV3TW9kZTogVmlld01vZGUuQ09NQklORUQgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB2aWV3T3B0aW9ucztcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogUmVuZGVyaXphIGxhIHZpc3RhIGplclx1MDBFMXJxdWljYVxuICAgICAqL1xuICAgIHByaXZhdGUgcmVuZGVySGllcmFyY2h5Vmlldyhjb250YWluZXJFbDogSFRNTEVsZW1lbnQsIG1vZGVsOiBIaWVyYXJjaHlWaWV3TW9kZWwpOiB2b2lkIHtcbiAgICAgICAgLy8gQ29udGVuZWRvciBwYXJhIGVsIFx1MDBFMXJib2wgamVyXHUwMEUxcnF1aWNvXG4gICAgICAgIGNvbnN0IGhpZXJhcmNoeVRyZWUgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoeyBjbHM6ICdoaWVyYXJjaHktdHJlZS1jb250YWluZXInIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gU2kgbm8gaGF5IGVudGlkYWRlcyBmaWx0cmFkYXMsIG1vc3RyYXIgbWVuc2FqZSB5IGRpYWduXHUwMEYzc3RpY29cbiAgICAgICAgaWYgKG1vZGVsLmZpbHRlcmVkRW50aXRpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBoaWVyYXJjaHlUcmVlLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICAgICAgICAgICAgY2xzOiAnaGllcmFyY2h5LXRyZWUtZW1wdHknLFxuICAgICAgICAgICAgICAgIHRleHQ6ICdObyBoYXkgZW50aWRhZGVzIHF1ZSBjb2luY2lkYW4gY29uIGxvcyBmaWx0cm9zIGFwbGljYWRvcy4nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQVx1MDBGMWFkaXIgZGlhZ25cdTAwRjNzdGljbyBwYXJhIGF5dWRhciBhIGlkZW50aWZpY2FyIGVsIHByb2JsZW1hXG4gICAgICAgICAgICB0aGlzLnJlbmRlckRpYWdub3N0aWNJbmZvKGhpZXJhcmNoeVRyZWUsIG1vZGVsKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXIgZWwgXHUwMEUxcmJvbCBhIHBhcnRpciBkZSBsYXMgZW50aWRhZGVzIGZpbHRyYWRhc1xuICAgICAgICB0aGlzLnJlbmRlckVudGl0eVRyZWUoaGllcmFyY2h5VHJlZSwgbW9kZWwuZmlsdGVyZWRFbnRpdGllcywgMCk7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFJlbmRlcml6YSBsYSB2aXN0YSBkZSBsaXN0YXMgR1REXG4gICAgICovXG5cbiAgICBwcml2YXRlIHJlbmRlckdURExpc3RzVmlldyhjb250YWluZXJFbDogSFRNTEVsZW1lbnQsIG1vZGVsOiBIaWVyYXJjaHlWaWV3TW9kZWwpOiB2b2lkIHtcbiAgICAgICAgLy8gQ29udGVuZWRvciBwYXJhIGxhcyBsaXN0YXMgR1REXG4gICAgICAgIGNvbnN0IGd0ZExpc3RzQ29udGFpbmVyID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KHsgY2xzOiAnZ3RkLWxpc3RzLWNvbnRhaW5lcicgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBTaSBubyBoYXkgbGlzdGFzIGhhYmlsaXRhZGFzLCBtb3N0cmFyIG1lbnNhamUgeSBkaWFnblx1MDBGM3N0aWNvXG4gICAgICAgIGlmIChtb2RlbC5maWx0ZXJzLmVuYWJsZWRMaXN0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGd0ZExpc3RzQ29udGFpbmVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICAgICAgICAgICAgY2xzOiAnZ3RkLWxpc3RzLWVtcHR5JyxcbiAgICAgICAgICAgICAgICB0ZXh0OiAnTm8gaGF5IGxpc3RhcyBHVEQgaGFiaWxpdGFkYXMgZW4gbG9zIGZpbHRyb3MuJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFcdTAwRjFhZGlyIGRpYWduXHUwMEYzc3RpY28gcGFyYSBheXVkYXIgYSBpZGVudGlmaWNhciBlbCBwcm9ibGVtYVxuICAgICAgICAgICAgdGhpcy5yZW5kZXJEaWFnbm9zdGljSW5mbyhndGRMaXN0c0NvbnRhaW5lciwgbW9kZWwpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBWZXJpZmljYXIgc2kgaGF5IHRhcmVhcyBlbiBhbGd1bmEgbGlzdGFcbiAgICAgICAgbGV0IHRvdGFsVGFza3NJbkxpc3RzID0gMDtcbiAgICAgICAgbW9kZWwuZmlsdGVycy5lbmFibGVkTGlzdHMuZm9yRWFjaChsaXN0VHlwZSA9PiB7XG4gICAgICAgICAgICB0b3RhbFRhc2tzSW5MaXN0cyArPSBtb2RlbC5maWx0ZXJlZFRhc2tzLmdldChsaXN0VHlwZSk/Lmxlbmd0aCB8fCAwO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFNpIG5vIGhheSB0YXJlYXMgZW4gbmluZ3VuYSBsaXN0YSBoYWJpbGl0YWRhLCBtb3N0cmFyIG1lbnNhamUgeSBkaWFnblx1MDBGM3N0aWNvXG4gICAgICAgIGlmICh0b3RhbFRhc2tzSW5MaXN0cyA9PT0gMCkge1xuICAgICAgICAgICAgZ3RkTGlzdHNDb250YWluZXIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgICAgICAgICAgICBjbHM6ICdndGQtbGlzdHMtZW1wdHknLFxuICAgICAgICAgICAgICAgIHRleHQ6ICdObyBoYXkgdGFyZWFzIHF1ZSBjb2luY2lkYW4gY29uIGxvcyBmaWx0cm9zIGFwbGljYWRvcy4nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQVx1MDBGMWFkaXIgZGlhZ25cdTAwRjNzdGljbyBwYXJhIGF5dWRhciBhIGlkZW50aWZpY2FyIGVsIHByb2JsZW1hXG4gICAgICAgICAgICB0aGlzLnJlbmRlckRpYWdub3N0aWNJbmZvKGd0ZExpc3RzQ29udGFpbmVyLCBtb2RlbCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFJlbmRlcml6YXIgY2FkYSBsaXN0YSBHVEQgaGFiaWxpdGFkYVxuICAgICAgICBmb3IgKGNvbnN0IGxpc3RUeXBlIG9mIG1vZGVsLmZpbHRlcnMuZW5hYmxlZExpc3RzKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrcyA9IG1vZGVsLmZpbHRlcmVkVGFza3MuZ2V0KGxpc3RUeXBlKSB8fCBbXTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyR1RETGlzdChndGRMaXN0c0NvbnRhaW5lciwgbGlzdFR5cGUsIHRhc2tzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBSZW5kZXJpemEgbGEgdmlzdGEgY29tYmluYWRhIChqZXJhcnF1XHUwMEVEYSArIGxpc3RhcyBHVEQpXG4gICAgICovXG4gICAgcHJpdmF0ZSByZW5kZXJDb21iaW5lZFZpZXcoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50LCBtb2RlbDogSGllcmFyY2h5Vmlld01vZGVsKTogdm9pZCB7XG4gICAgICAgIC8vIENyZWFyIGNvbnRlbmVkb3IgZGUgZG9zIGNvbHVtbmFzXG4gICAgICAgIGNvbnN0IGNvbWJpbmVkQ29udGFpbmVyID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KHsgY2xzOiAnY29tYmluZWQtdmlldy1jb250YWluZXInIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQ29sdW1uYSBpenF1aWVyZGE6IFx1MDBDMXJib2wgamVyXHUwMEUxcnF1aWNvXG4gICAgICAgIGNvbnN0IGhpZXJhcmNoeUNvbHVtbiA9IGNvbWJpbmVkQ29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ2NvbWJpbmVkLXZpZXctY29sdW1uIGhpZXJhcmNoeS1jb2x1bW4nIH0pO1xuICAgICAgICBoaWVyYXJjaHlDb2x1bW4uY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnSmVyYXJxdVx1MDBFRGEnLCBjbHM6ICdjb21iaW5lZC12aWV3LXRpdGxlJyB9KTtcbiAgICAgICAgdGhpcy5yZW5kZXJIaWVyYXJjaHlWaWV3KGhpZXJhcmNoeUNvbHVtbiwgbW9kZWwpO1xuICAgICAgICBcbiAgICAgICAgLy8gQ29sdW1uYSBkZXJlY2hhOiBMaXN0YXMgR1REXG4gICAgICAgIGNvbnN0IGd0ZENvbHVtbiA9IGNvbWJpbmVkQ29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ2NvbWJpbmVkLXZpZXctY29sdW1uIGd0ZC1jb2x1bW4nIH0pO1xuICAgICAgICBndGRDb2x1bW4uY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnTGlzdGFzIEdURCcsIGNsczogJ2NvbWJpbmVkLXZpZXctdGl0bGUnIH0pO1xuICAgICAgICB0aGlzLnJlbmRlckdURExpc3RzVmlldyhndGRDb2x1bW4sIG1vZGVsKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogUmVuZGVyaXphIHJlY3Vyc2l2YW1lbnRlIGVsIFx1MDBFMXJib2wgZGUgZW50aWRhZGVzXG4gICAgICovXG4gICAgcHJpdmF0ZSByZW5kZXJFbnRpdHlUcmVlKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIGVudGl0aWVzOiBJRW50aXR5W10sIGxldmVsOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdHJlZUxpc3QgPSBjb250YWluZXIuY3JlYXRlRWwoJ3VsJywgeyBjbHM6IGBoaWVyYXJjaHktdHJlZS1saXN0IGxldmVsLSR7bGV2ZWx9YCB9KTtcbiAgICAgICAgXG4gICAgICAgIGZvciAoY29uc3QgZW50aXR5IG9mIGVudGl0aWVzKSB7XG4gICAgICAgICAgICAvLyBDcmVhciBlbCBlbGVtZW50byBkZSBsaXN0YSBwYXJhIGxhIGVudGlkYWRcbiAgICAgICAgICAgIGNvbnN0IHRyZWVJdGVtID0gdHJlZUxpc3QuY3JlYXRlRWwoJ2xpJywgeyBjbHM6ICdoaWVyYXJjaHktdHJlZS1pdGVtJyB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ29udGVuZWRvciBwYXJhIGVsIGVuY2FiZXphZG8gZGUgbGEgZW50aWRhZFxuICAgICAgICAgICAgY29uc3QgaGVhZGVyID0gdHJlZUl0ZW0uY3JlYXRlRGl2KHsgY2xzOiBgaGllcmFyY2h5LXRyZWUtZW50aXR5IGVudGl0eS10eXBlLSR7ZW50aXR5LnR5cGUudG9Mb3dlckNhc2UoKX1gIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBJbmZvcm1hY2lcdTAwRjNuIGJcdTAwRTFzaWNhIGRlIGxhIGVudGlkYWRcbiAgICAgICAgICAgIGNvbnN0IGVudGl0eUluZm8gPSBoZWFkZXIuY3JlYXRlRGl2KHsgY2xzOiAnaGllcmFyY2h5LXRyZWUtZW50aXR5LWluZm8nIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBJY29ubyBkZSBleHBhbnNpXHUwMEYzblxuICAgICAgICAgICAgY29uc3QgZXhwYW5kSWNvbiA9IGVudGl0eUluZm8uY3JlYXRlU3Bhbih7IGNsczogJ2hpZXJhcmNoeS10cmVlLWV4cGFuZC1pY29uJywgdGV4dDogJ1x1MjVCQycgfSk7XG4gICAgICAgICAgICBleHBhbmRJY29uLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICBleHBhbmRJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IGlzRXhwYW5kZWQgPSBleHBhbmRJY29uLmdldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcpID09PSAndHJ1ZSc7XG4gICAgICAgICAgICAgICAgZXhwYW5kSWNvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBpc0V4cGFuZGVkID8gJ2ZhbHNlJyA6ICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgZXhwYW5kSWNvbi50ZXh0Q29udGVudCA9IGlzRXhwYW5kZWQgPyAnXHUyNUI2JyA6ICdcdTI1QkMnO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIE1vc3RyYXIvb2N1bHRhciBjb250ZW5pZG9cbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gdHJlZUl0ZW0ucXVlcnlTZWxlY3RvcignLmhpZXJhcmNoeS10cmVlLWNvbnRlbnQnKTtcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50LnRvZ2dsZUNsYXNzKCdjb2xsYXBzZWQnLCAhaXNFeHBhbmRlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEVzdGFkbyBkZSBsYSBlbnRpZGFkXG4gICAgICAgICAgICBpZiAoZW50aXR5LnN0YXRlKSB7XG4gICAgICAgICAgICAgICAgZW50aXR5SW5mby5jcmVhdGVTcGFuKHsgXG4gICAgICAgICAgICAgICAgICAgIGNsczogYGVudGl0eS1zdGF0ZSBzdGF0ZS0ke3RoaXMuZ2V0RW50aXR5U3RhdGVDbGFzcyhlbnRpdHkuc3RhdGUpfWAsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IGVudGl0eS5zdGF0ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBUaXBvIGRlIGVudGlkYWRcbiAgICAgICAgICAgIGVudGl0eUluZm8uY3JlYXRlU3Bhbih7IFxuICAgICAgICAgICAgICAgIGNsczogJ2VudGl0eS10eXBlJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLmdldEVudGl0eVR5cGVMYWJlbChlbnRpdHkudHlwZSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBUXHUwMEVEdHVsbyBkZSBsYSBlbnRpZGFkIChjb24gZW5sYWNlKVxuICAgICAgICAgICAgY29uc3QgdGl0bGVMaW5rID0gZW50aXR5SW5mby5jcmVhdGVFbCgnYScsIHsgXG4gICAgICAgICAgICAgICAgY2xzOiAnZW50aXR5LXRpdGxlJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiBlbnRpdHkudGl0bGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGl0bGVMaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubmF2aWdhdGlvblV0aWxzLm9wZW5FbnRpdHlJbk5ld0xlYWYoZW50aXR5LmZpbGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENvbnRhZG9yIGRlIHRhcmVhc1xuICAgICAgICAgICAgY29uc3QgdGFza0NvdW50ID0gZW50aXR5LnRhc2tzLmZpbHRlcih0YXNrID0+ICF0YXNrLmNvbXBsZXRlZCkubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHRhc2tDb3VudCA+IDApIHtcbiAgICAgICAgICAgICAgICBlbnRpdHlJbmZvLmNyZWF0ZVNwYW4oeyBcbiAgICAgICAgICAgICAgICAgICAgY2xzOiAnZW50aXR5LXRhc2stY291bnQnLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBgJHt0YXNrQ291bnR9YFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDb250ZW5lZG9yIHBhcmEgbGFzIHRhcmVhcyB5IGVudGlkYWRlcyBoaWphc1xuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IHRyZWVJdGVtLmNyZWF0ZURpdih7IGNsczogJ2hpZXJhcmNoeS10cmVlLWNvbnRlbnQnIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBSZW5kZXJpemFyIHRhcmVhcyBkZSBsYSBlbnRpZGFkXG4gICAgICAgICAgICBpZiAoZW50aXR5LnRhc2tzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclRhc2tzTGlzdChjb250ZW50LCBlbnRpdHkudGFza3MsIGVudGl0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFJlbmRlcml6YXIgZW50aWRhZGVzIGhpamFzIChyZWN1cnNpdmFtZW50ZSlcbiAgICAgICAgICAgIGlmIChlbnRpdHkuY2hpbGRyZW4gJiYgZW50aXR5LmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckVudGl0eVRyZWUoY29udGVudCwgZW50aXR5LmNoaWxkcmVuLCBsZXZlbCArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFJlbmRlcml6YSB1bmEgbGlzdGEgZGUgdGFyZWFzIHBhcmEgdW5hIGVudGlkYWRcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlbmRlclRhc2tzTGlzdChjb250YWluZXI6IEhUTUxFbGVtZW50LCB0YXNrczogVGFza1tdLCBwYXJlbnRFbnRpdHk6IElFbnRpdHkpOiB2b2lkIHtcbiAgICAgICAgLy8gQ29udGVuZWRvciBwYXJhIGxhIGxpc3RhIGRlIHRhcmVhc1xuICAgICAgICBjb25zdCB0YXNrc0NvbnRhaW5lciA9IGNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdlbnRpdHktdGFza3MtY29udGFpbmVyJyB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFRcdTAwRUR0dWxvIGRlIGxhIHNlY2NpXHUwMEYzbiBkZSB0YXJlYXNcbiAgICAgICAgdGFza3NDb250YWluZXIuY3JlYXRlRWwoJ2gzJywgeyBcbiAgICAgICAgICAgIGNsczogJ2VudGl0eS10YXNrcy10aXRsZScsXG4gICAgICAgICAgICB0ZXh0OiAnVGFyZWFzJ1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEZpbHRyYXIgdGFyZWFzIGNvbXBsZXRhZGFzIHNlZ1x1MDBGQW4gY29uZmlndXJhY2lcdTAwRjNuXG4gICAgICAgIGNvbnN0IGZpbHRlcmVkVGFza3MgPSB0YXNrcy5maWx0ZXIodGFzayA9PiAhdGFzay5jb21wbGV0ZWQpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGZpbHRlcmVkVGFza3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0YXNrc0NvbnRhaW5lci5jcmVhdGVFbCgnZGl2JywgeyBcbiAgICAgICAgICAgICAgICBjbHM6ICdlbnRpdHktdGFza3MtZW1wdHknLFxuICAgICAgICAgICAgICAgIHRleHQ6ICdObyBoYXkgdGFyZWFzIHBlbmRpZW50ZXMnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gTGlzdGEgZGUgdGFyZWFzXG4gICAgICAgIGNvbnN0IHRhc2tzTGlzdCA9IHRhc2tzQ29udGFpbmVyLmNyZWF0ZUVsKCd1bCcsIHsgY2xzOiAnZW50aXR5LXRhc2tzLWxpc3QnIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gUmVuZGVyaXphciBjYWRhIHRhcmVhXG4gICAgICAgIGZvciAoY29uc3QgdGFzayBvZiBmaWx0ZXJlZFRhc2tzKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclRhc2tJdGVtKHRhc2tzTGlzdCwgdGFzaywgcGFyZW50RW50aXR5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBSZW5kZXJpemEgdW4gZWxlbWVudG8gZGUgdGFyZWFcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlbmRlclRhc2tJdGVtKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHRhc2s6IFRhc2ssIHBhcmVudEVudGl0eTogSUVudGl0eSk6IHZvaWQge1xuICAgICAgICBjb25zdCB0YXNrSXRlbSA9IGNvbnRhaW5lci5jcmVhdGVFbCgnbGknLCB7IFxuICAgICAgICAgICAgY2xzOiBgdGFzay1pdGVtICR7dGFzay5jb21wbGV0ZWQgPyAndGFzay1jb21wbGV0ZWQnIDogJyd9ICR7dGFzay5pc0Jsb2NrZWQgPyAndGFzay1ibG9ja2VkJyA6ICcnfWBcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBDb250ZW5lZG9yIGRlIGluZm9ybWFjaVx1MDBGM24gZGUgbGEgdGFyZWFcbiAgICAgICAgY29uc3QgdGFza0luZm8gPSB0YXNrSXRlbS5jcmVhdGVEaXYoeyBjbHM6ICd0YXNrLWluZm8nIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2tib3ggZGUgZXN0YWRvIChzb2xvIHZpc3VhbCwgbm8gZnVuY2lvbmFsKVxuICAgICAgICB0YXNrSW5mby5jcmVhdGVTcGFuKHsgXG4gICAgICAgICAgICBjbHM6IGB0YXNrLWNoZWNrYm94ICR7dGFzay5jb21wbGV0ZWQgPyAnY2hlY2tlZCcgOiAnJ31gLFxuICAgICAgICAgICAgdGV4dDogdGFzay5jb21wbGV0ZWQgPyAnXHUyNzEzJyA6ICcgJ1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEluZGljYWRvciBkZSBwcmlvcmlkYWRcbiAgICAgICAgaWYgKHRhc2sucHJpb3JpdHkgIT09IFRhc2tQcmlvcml0eS5OT1JNQUwpIHtcbiAgICAgICAgICAgIHRhc2tJbmZvLmNyZWF0ZVNwYW4oeyBcbiAgICAgICAgICAgICAgICBjbHM6IGB0YXNrLXByaW9yaXR5IHByaW9yaXR5LSR7dGFzay5wcmlvcml0eX1gLFxuICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMuZ2V0UHJpb3JpdHlJY29uKHRhc2sucHJpb3JpdHkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gVGV4dG8gZGUgbGEgdGFyZWFcbiAgICAgICAgY29uc3QgdGFza1RleHQgPSB0YXNrSW5mby5jcmVhdGVTcGFuKHsgXG4gICAgICAgICAgICBjbHM6ICd0YXNrLXRleHQnLFxuICAgICAgICAgICAgdGV4dDogdGFzay50ZXh0XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gSGFjZXIgY2xpYyBlbiBsYSB0YXJlYSBhYnJlIGVsIGFyY2hpdm8gZW4gbGEgcG9zaWNpXHUwMEYzblxuICAgICAgICB0YXNrSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubmF2aWdhdGlvblV0aWxzLm9wZW5UYXNrSW5FbnRpdHkodGFzay5maWxlLCB0YXNrLmxpbmVJbmZvLm51bWJlcik7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gSW5kaWNhZG9yZXMgZGUgZmVjaGFcbiAgICAgICAgaWYgKHRhc2sudGltaW5nLmR1ZURhdGUgfHwgdGFzay50aW1pbmcuc2NoZWR1bGVkRGF0ZSkge1xuICAgICAgICAgICAgY29uc3QgZGF0ZUNsYXNzID0gdGFzay5pc092ZXJkdWUoKSA/ICd0YXNrLWRhdGUtb3ZlcmR1ZScgOiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRhc2suaXNGb3JUb2RheSgpID8gJ3Rhc2stZGF0ZS10b2RheScgOiAndGFzay1kYXRlLWZ1dHVyZScpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgZGF0ZVRleHQgPSAnJztcbiAgICAgICAgICAgIGlmICh0YXNrLnRpbWluZy5kdWVEYXRlKSB7XG4gICAgICAgICAgICAgICAgZGF0ZVRleHQgPSBgXHVEODNEXHVEQ0M1ICR7dGFzay50aW1pbmcuZHVlRGF0ZX1gO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0YXNrLnRpbWluZy5zY2hlZHVsZWREYXRlKSB7XG4gICAgICAgICAgICAgICAgZGF0ZVRleHQgPSBgXHUyM0YzICR7dGFzay50aW1pbmcuc2NoZWR1bGVkRGF0ZX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0YXNrSW5mby5jcmVhdGVTcGFuKHsgXG4gICAgICAgICAgICAgICAgY2xzOiBgdGFzay1kYXRlICR7ZGF0ZUNsYXNzfWAsXG4gICAgICAgICAgICAgICAgdGV4dDogZGF0ZVRleHRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBDb250ZW5lZG9yIHBhcmEgbWV0YWRhdG9zIGFkaWNpb25hbGVzXG4gICAgICAgIGNvbnN0IHRhc2tNZXRhID0gdGFza0l0ZW0uY3JlYXRlRGl2KHsgY2xzOiAndGFzay1tZXRhJyB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIExpc3RhIEdURFxuICAgICAgICBpZiAodGFzay5saXN0VHlwZSkge1xuICAgICAgICAgICAgdGFza01ldGEuY3JlYXRlU3Bhbih7IFxuICAgICAgICAgICAgICAgIGNsczogYHRhc2stbGlzdC10eXBlIGxpc3QtJHt0YXNrLmxpc3RUeXBlfWAsXG4gICAgICAgICAgICAgICAgdGV4dDogdGhpcy5nZXRMaXN0VHlwZUxhYmVsKHRhc2subGlzdFR5cGUpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ29udGV4dG9zXG4gICAgICAgIGlmICh0YXNrLnRhZ3MuY29udGV4dHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgY29udGV4dHNDb250YWluZXIgPSB0YXNrTWV0YS5jcmVhdGVEaXYoeyBjbHM6ICd0YXNrLWNvbnRleHRzJyB9KTtcbiAgICAgICAgICAgIGNvbnRleHRzQ29udGFpbmVyLmNyZWF0ZVNwYW4oeyBjbHM6ICd0YXNrLW1ldGEtbGFiZWwnLCB0ZXh0OiAnQ29udGV4dG9zOicgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAoY29uc3QgY29udGV4dCBvZiB0YXNrLnRhZ3MuY29udGV4dHMpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0c0NvbnRhaW5lci5jcmVhdGVTcGFuKHsgXG4gICAgICAgICAgICAgICAgICAgIGNsczogJ3Rhc2stY29udGV4dC10YWcnLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBjb250ZXh0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFBlcnNvbmFzIGFzaWduYWRhc1xuICAgICAgICBpZiAodGFzay50YWdzLnBlb3BsZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBwZW9wbGVDb250YWluZXIgPSB0YXNrTWV0YS5jcmVhdGVEaXYoeyBjbHM6ICd0YXNrLXBlb3BsZScgfSk7XG4gICAgICAgICAgICBwZW9wbGVDb250YWluZXIuY3JlYXRlU3Bhbih7IGNsczogJ3Rhc2stbWV0YS1sYWJlbCcsIHRleHQ6ICdBc2lnbmFkYSBhOicgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGVyc29uIG9mIHRhc2sudGFncy5wZW9wbGUpIHtcbiAgICAgICAgICAgICAgICBwZW9wbGVDb250YWluZXIuY3JlYXRlU3Bhbih7IFxuICAgICAgICAgICAgICAgICAgICBjbHM6ICd0YXNrLXBlcnNvbi10YWcnLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBwZXJzb25cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gTWVuc2FqZSBkZSBibG9xdWVvIHNpIGNvcnJlc3BvbmRlXG4gICAgICAgIGlmICh0YXNrLmlzQmxvY2tlZCAmJiB0YXNrLmJsb2NrUmVhc29uKSB7XG4gICAgICAgICAgICB0YXNrTWV0YS5jcmVhdGVEaXYoeyBcbiAgICAgICAgICAgICAgICBjbHM6ICd0YXNrLWJsb2NrLXJlYXNvbicsXG4gICAgICAgICAgICAgICAgdGV4dDogdGFzay5ibG9ja1JlYXNvblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogUmVuZGVyaXphIHVuYSBsaXN0YSBHVERcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlbmRlckdURExpc3QoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgbGlzdFR5cGU6IFRhc2tMaXN0VHlwZSwgdGFza3M6IFRhc2tbXSk6IHZvaWQge1xuICAgICAgICAvLyBDb250ZW5lZG9yIHBhcmEgbGEgbGlzdGEgR1REXG4gICAgICAgIGNvbnN0IGxpc3RDb250YWluZXIgPSBjb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiBgZ3RkLWxpc3QgZ3RkLWxpc3QtJHtsaXN0VHlwZX1gIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gRW5jYWJlemFkbyBkZSBsYSBsaXN0YVxuICAgICAgICBjb25zdCBsaXN0SGVhZGVyID0gbGlzdENvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdndGQtbGlzdC1oZWFkZXInIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gVFx1MDBFRHR1bG8gY29uIGNvbnRhZG9yXG4gICAgICAgIGxpc3RIZWFkZXIuY3JlYXRlRWwoJ2gyJywgeyBcbiAgICAgICAgICAgIGNsczogJ2d0ZC1saXN0LXRpdGxlJyxcbiAgICAgICAgICAgIHRleHQ6IGAke3RoaXMuZ2V0TGlzdFR5cGVMYWJlbChsaXN0VHlwZSl9ICgke3Rhc2tzLmxlbmd0aH0pYFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIERlc2NyaXBjaVx1MDBGM24gZGUgbGEgbGlzdGFcbiAgICAgICAgbGlzdEhlYWRlci5jcmVhdGVFbCgnZGl2JywgeyBcbiAgICAgICAgICAgIGNsczogJ2d0ZC1saXN0LWRlc2NyaXB0aW9uJyxcbiAgICAgICAgICAgIHRleHQ6IHRoaXMuZ2V0TGlzdFR5cGVEZXNjcmlwdGlvbihsaXN0VHlwZSlcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBTaSBubyBoYXkgdGFyZWFzLCBtb3N0cmFyIG1lbnNhamVcbiAgICAgICAgaWYgKHRhc2tzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgbGlzdENvbnRhaW5lci5jcmVhdGVFbCgnZGl2JywgeyBcbiAgICAgICAgICAgICAgICBjbHM6ICdndGQtbGlzdC1lbXB0eScsXG4gICAgICAgICAgICAgICAgdGV4dDogJ05vIGhheSB0YXJlYXMgZW4gZXN0YSBsaXN0YSdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBMaXN0YSBkZSB0YXJlYXNcbiAgICAgICAgY29uc3QgdGFza3NMaXN0ID0gbGlzdENvbnRhaW5lci5jcmVhdGVFbCgndWwnLCB7IGNsczogJ2d0ZC10YXNrcy1saXN0JyB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIE9yZ2FuaXphciB0YXJlYXMgc2VnXHUwMEZBbiBsYSBsaXN0YVxuICAgICAgICBjb25zdCBzb3J0ZWRUYXNrcyA9IHRoaXMuc29ydFRhc2tzRm9yTGlzdCh0YXNrcywgbGlzdFR5cGUpO1xuICAgICAgICBcbiAgICAgICAgLy8gUmVuZGVyaXphciBjYWRhIHRhcmVhXG4gICAgICAgIGZvciAoY29uc3QgdGFzayBvZiBzb3J0ZWRUYXNrcykge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJHVERUYXNrSXRlbSh0YXNrc0xpc3QsIHRhc2spO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFJlbmRlcml6YSB1biBlbGVtZW50byBkZSB0YXJlYSBwYXJhIHVuYSBsaXN0YSBHVERcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlbmRlckdURFRhc2tJdGVtKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHRhc2s6IFRhc2spOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdGFza0l0ZW0gPSBjb250YWluZXIuY3JlYXRlRWwoJ2xpJywgeyBcbiAgICAgICAgICAgIGNsczogYGd0ZC10YXNrLWl0ZW0gJHt0YXNrLmNvbXBsZXRlZCA/ICd0YXNrLWNvbXBsZXRlZCcgOiAnJ30gJHt0YXNrLmlzQmxvY2tlZCA/ICd0YXNrLWJsb2NrZWQnIDogJyd9YFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEluZm9ybWFjaVx1MDBGM24gZGUgZW50aWRhZCBwYWRyZVxuICAgICAgICBpZiAodGFzay5wYXJlbnRFbnRpdHkpIHtcbiAgICAgICAgICAgIGNvbnN0IGVudGl0eUluZm8gPSB0YXNrSXRlbS5jcmVhdGVEaXYoeyBjbHM6ICdndGQtdGFzay1lbnRpdHktaW5mbycgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEVzdGFkbyBkZSBsYSBlbnRpZGFkXG4gICAgICAgICAgICBpZiAodGFzay5wYXJlbnRFbnRpdHkuc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBlbnRpdHlJbmZvLmNyZWF0ZVNwYW4oeyBcbiAgICAgICAgICAgICAgICAgICAgY2xzOiBgZW50aXR5LXN0YXRlIHN0YXRlLSR7dGhpcy5nZXRFbnRpdHlTdGF0ZUNsYXNzKHRhc2sucGFyZW50RW50aXR5LnN0YXRlKX1gLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0YXNrLnBhcmVudEVudGl0eS5zdGF0ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBUaXBvIHkgdFx1MDBFRHR1bG8gZGUgbGEgZW50aWRhZFxuICAgICAgICAgICAgY29uc3QgZW50aXR5TGluayA9IGVudGl0eUluZm8uY3JlYXRlRWwoJ2EnLCB7IFxuICAgICAgICAgICAgICAgIGNsczogJ2VudGl0eS1saW5rJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiBgJHt0aGlzLmdldEVudGl0eVR5cGVMYWJlbCh0YXNrLnBhcmVudEVudGl0eS50eXBlKX06ICR7dGFzay5wYXJlbnRFbnRpdHkudGl0bGV9YFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBlbnRpdHlMaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubmF2aWdhdGlvblV0aWxzLm9wZW5FbnRpdHlJbk5ld0xlYWYodGFzay5wYXJlbnRFbnRpdHkuZmlsZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ29udGVuZWRvciBkZSBpbmZvcm1hY2lcdTAwRjNuIGRlIGxhIHRhcmVhXG4gICAgICAgIGNvbnN0IHRhc2tJbmZvID0gdGFza0l0ZW0uY3JlYXRlRGl2KHsgY2xzOiAnZ3RkLXRhc2staW5mbycgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBDaGVja2JveCBkZSBlc3RhZG8gKHNvbG8gdmlzdWFsLCBubyBmdW5jaW9uYWwpXG4gICAgICAgIHRhc2tJbmZvLmNyZWF0ZVNwYW4oeyBcbiAgICAgICAgICAgIGNsczogYHRhc2stY2hlY2tib3ggJHt0YXNrLmNvbXBsZXRlZCA/ICdjaGVja2VkJyA6ICcnfWAsXG4gICAgICAgICAgICB0ZXh0OiB0YXNrLmNvbXBsZXRlZCA/ICdcdTI3MTMnIDogJyAnXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gSW5kaWNhZG9yIGRlIHByaW9yaWRhZFxuICAgICAgICBpZiAodGFzay5wcmlvcml0eSAhPT0gVGFza1ByaW9yaXR5Lk5PUk1BTCkge1xuICAgICAgICAgICAgdGFza0luZm8uY3JlYXRlU3Bhbih7IFxuICAgICAgICAgICAgICAgIGNsczogYHRhc2stcHJpb3JpdHkgcHJpb3JpdHktJHt0YXNrLnByaW9yaXR5fWAsXG4gICAgICAgICAgICAgICAgdGV4dDogdGhpcy5nZXRQcmlvcml0eUljb24odGFzay5wcmlvcml0eSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBUZXh0byBkZSBsYSB0YXJlYVxuICAgICAgICBjb25zdCB0YXNrVGV4dCA9IHRhc2tJbmZvLmNyZWF0ZVNwYW4oeyBcbiAgICAgICAgICAgIGNsczogJ3Rhc2stdGV4dCcsXG4gICAgICAgICAgICB0ZXh0OiB0YXNrLnRleHRcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBIYWNlciBjbGljIGVuIGxhIHRhcmVhIGFicmUgZWwgYXJjaGl2byBlbiBsYSBwb3NpY2lcdTAwRjNuXG4gICAgICAgIHRhc2tJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5uYXZpZ2F0aW9uVXRpbHMub3BlblRhc2tJbkVudGl0eSh0YXNrLmZpbGUsIHRhc2subGluZUluZm8ubnVtYmVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBGZWNoYXMgeSB0aWVtcG9zXG4gICAgICAgIGNvbnN0IHRpbWluZ0luZm8gPSB0YXNrSXRlbS5jcmVhdGVEaXYoeyBjbHM6ICdndGQtdGFzay10aW1pbmcnIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gRmVjaGEgbFx1MDBFRG1pdGVcbiAgICAgICAgaWYgKHRhc2sudGltaW5nLmR1ZURhdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGVDbGFzcyA9IHRhc2suaXNPdmVyZHVlKCkgPyAndGFzay1kYXRlLW92ZXJkdWUnIDogXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0YXNrLmlzRm9yVG9kYXkoKSA/ICd0YXNrLWRhdGUtdG9kYXknIDogJ3Rhc2stZGF0ZS1mdXR1cmUnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGltaW5nSW5mby5jcmVhdGVTcGFuKHsgXG4gICAgICAgICAgICAgICAgY2xzOiBgdGFzay1kYXRlICR7ZGF0ZUNsYXNzfWAsXG4gICAgICAgICAgICAgICAgdGV4dDogYFx1RDgzRFx1RENDNSAke3Rhc2sudGltaW5nLmR1ZURhdGV9YFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEZlY2hhIHByb2dyYW1hZGFcbiAgICAgICAgaWYgKHRhc2sudGltaW5nLnNjaGVkdWxlZERhdGUgJiYgIXRhc2sudGltaW5nLmR1ZURhdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGVDbGFzcyA9IHRhc2suaXNPdmVyZHVlKCkgPyAndGFzay1kYXRlLW92ZXJkdWUnIDogXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0YXNrLmlzRm9yVG9kYXkoKSA/ICd0YXNrLWRhdGUtdG9kYXknIDogJ3Rhc2stZGF0ZS1mdXR1cmUnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGltaW5nSW5mby5jcmVhdGVTcGFuKHsgXG4gICAgICAgICAgICAgICAgY2xzOiBgdGFzay1kYXRlICR7ZGF0ZUNsYXNzfWAsXG4gICAgICAgICAgICAgICAgdGV4dDogYFx1MjNGMyAke3Rhc2sudGltaW5nLnNjaGVkdWxlZERhdGV9YFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEhvcmEgZGUgaW5pY2lvXG4gICAgICAgIGlmICh0YXNrLnRpbWluZy5zdGFydFRpbWUpIHtcbiAgICAgICAgICAgIHRpbWluZ0luZm8uY3JlYXRlU3Bhbih7IFxuICAgICAgICAgICAgICAgIGNsczogJ3Rhc2stdGltZScsXG4gICAgICAgICAgICAgICAgdGV4dDogYCR7dGFzay50aW1pbmcuc3RhcnRUaW1lfSR7dGFzay50aW1pbmcuZW5kVGltZSA/IGAgLSAke3Rhc2sudGltaW5nLmVuZFRpbWV9YCA6ICcnfWBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBEdXJhY2lcdTAwRjNuXG4gICAgICAgIGlmICh0YXNrLnRpbWluZy5kdXJhdGlvbikge1xuICAgICAgICAgICAgbGV0IGR1cmF0aW9uVGV4dCA9ICcnO1xuICAgICAgICAgICAgaWYgKHRhc2sudGltaW5nLmR1cmF0aW9uID49IDYwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaG91cnMgPSBNYXRoLmZsb29yKHRhc2sudGltaW5nLmR1cmF0aW9uIC8gNjApO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pbnV0ZXMgPSB0YXNrLnRpbWluZy5kdXJhdGlvbiAlIDYwO1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uVGV4dCA9IGAke2hvdXJzfWgke21pbnV0ZXMgPiAwID8gYCAke21pbnV0ZXN9bWluYCA6ICcnfWA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uVGV4dCA9IGAke3Rhc2sudGltaW5nLmR1cmF0aW9ufW1pbmA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRpbWluZ0luZm8uY3JlYXRlU3Bhbih7IFxuICAgICAgICAgICAgICAgIGNsczogJ3Rhc2stZHVyYXRpb24nLFxuICAgICAgICAgICAgICAgIHRleHQ6IGR1cmF0aW9uVGV4dFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFNlbWFuYVxuICAgICAgICBpZiAodGFzay50aW1pbmcud2Vlaykge1xuICAgICAgICAgICAgdGltaW5nSW5mby5jcmVhdGVTcGFuKHsgXG4gICAgICAgICAgICAgICAgY2xzOiAndGFzay13ZWVrJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiBgU2VtYW5hOiAke3Rhc2sudGltaW5nLndlZWt9YFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEV0aXF1ZXRhcyB5IG1ldGFkYXRvc1xuICAgICAgICBjb25zdCB0YWdzSW5mbyA9IHRhc2tJdGVtLmNyZWF0ZURpdih7IGNsczogJ2d0ZC10YXNrLXRhZ3MnIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQ29udGV4dG9zXG4gICAgICAgIGZvciAoY29uc3QgY29udGV4dCBvZiB0YXNrLnRhZ3MuY29udGV4dHMpIHtcbiAgICAgICAgICAgIHRhZ3NJbmZvLmNyZWF0ZVNwYW4oeyBcbiAgICAgICAgICAgICAgICBjbHM6ICd0YXNrLWNvbnRleHQtdGFnJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiBjb250ZXh0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gUGVyc29uYXNcbiAgICAgICAgZm9yIChjb25zdCBwZXJzb24gb2YgdGFzay50YWdzLnBlb3BsZSkge1xuICAgICAgICAgICAgdGFnc0luZm8uY3JlYXRlU3Bhbih7IFxuICAgICAgICAgICAgICAgIGNsczogJ3Rhc2stcGVyc29uLXRhZycsXG4gICAgICAgICAgICAgICAgdGV4dDogcGVyc29uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gT3Ryb3MgdGFnc1xuICAgICAgICBmb3IgKGNvbnN0IHRhZyBvZiB0YXNrLnRhZ3MuZ3RkVGFncy5jb25jYXQodGFzay50YWdzLm90aGVyVGFncykpIHtcbiAgICAgICAgICAgIHRhZ3NJbmZvLmNyZWF0ZVNwYW4oeyBcbiAgICAgICAgICAgICAgICBjbHM6ICd0YXNrLW90aGVyLXRhZycsXG4gICAgICAgICAgICAgICAgdGV4dDogdGFnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gUmF6XHUwMEYzbiBkZSBibG9xdWVvXG4gICAgICAgIGlmICh0YXNrLmlzQmxvY2tlZCAmJiB0YXNrLmJsb2NrUmVhc29uKSB7XG4gICAgICAgICAgICB0YXNrSXRlbS5jcmVhdGVEaXYoeyBcbiAgICAgICAgICAgICAgICBjbHM6ICdndGQtdGFzay1ibG9jay1yZWFzb24nLFxuICAgICAgICAgICAgICAgIHRleHQ6IHRhc2suYmxvY2tSZWFzb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIE9yZGVuYSBsYXMgdGFyZWFzIHNlZ1x1MDBGQW4gZWwgdGlwbyBkZSBsaXN0YSBHVERcbiAgICAgKi9cbiAgICBwcml2YXRlIHNvcnRUYXNrc0Zvckxpc3QodGFza3M6IFRhc2tbXSwgbGlzdFR5cGU6IFRhc2tMaXN0VHlwZSk6IFRhc2tbXSB7XG4gICAgICAgIGNvbnN0IHRhc2tzQ29weSA9IFsuLi50YXNrc107XG4gICAgICAgIFxuICAgICAgICBzd2l0Y2ggKGxpc3RUeXBlKSB7XG4gICAgICAgICAgICBjYXNlIFRhc2tMaXN0VHlwZS5JTkJPWDpcbiAgICAgICAgICAgICAgICAvLyBTaW4gb3JkZW4gZXNwZWNcdTAwRURmaWNvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhc2tzQ29weTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGNhc2UgVGFza0xpc3RUeXBlLk5FWFRfQUNUSU9OUzpcbiAgICAgICAgICAgICAgICAvLyBPcmRlbmFyIHBvciBjb250ZXh0byB5IHByaW9yaWRhZFxuICAgICAgICAgICAgICAgIHJldHVybiB0YXNrc0NvcHkuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBQcmltZXJvIHBvciBjb250ZXh0b1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZXh0QSA9IGEudGFncy5jb250ZXh0c1swXSB8fCAnJztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGV4dEIgPSBiLnRhZ3MuY29udGV4dHNbMF0gfHwgJyc7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRleHRDb21wID0gY29udGV4dEEubG9jYWxlQ29tcGFyZShjb250ZXh0Qik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0Q29tcCAhPT0gMCkgcmV0dXJuIGNvbnRleHRDb21wO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gTHVlZ28gcG9yIHByaW9yaWRhZCAoZGUgbWF5b3IgYSBtZW5vcilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZVByaW9yaXRpZXMoYi5wcmlvcml0eSwgYS5wcmlvcml0eSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlIFRhc2tMaXN0VHlwZS5DQUxFTkRBUjpcbiAgICAgICAgICAgICAgICAvLyBPcmRlbmFyIHBvciBmZWNoYSB5IGhvcmFcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFza3NDb3B5LnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUHJpbWVybyBwb3IgZmVjaGFcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0ZUEgPSBhLnRpbWluZy5kdWVEYXRlIHx8ICcnO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRlQiA9IGIudGltaW5nLmR1ZURhdGUgfHwgJyc7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVDb21wID0gZGF0ZUEubG9jYWxlQ29tcGFyZShkYXRlQik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRlQ29tcCAhPT0gMCkgcmV0dXJuIGRhdGVDb21wO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gTHVlZ28gcG9yIGhvcmFcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGltZUEgPSBhLnRpbWluZy5zdGFydFRpbWUgfHwgJyc7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVCID0gYi50aW1pbmcuc3RhcnRUaW1lIHx8ICcnO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGltZUEubG9jYWxlQ29tcGFyZSh0aW1lQik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlIFRhc2tMaXN0VHlwZS5IT1BFRlVMTFlfVE9EQVk6XG4gICAgICAgICAgICAgICAgLy8gT3JkZW5hciBwb3IgdGlwbyBkZSBmZWNoYSB5IHByaW9yaWRhZFxuICAgICAgICAgICAgICAgIHJldHVybiB0YXNrc0NvcHkuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBQcmltZXJvIHRhcmVhcyBjb24gZmVjaGEgbFx1MDBFRG1pdGUgKFx1RDgzRFx1RENDNSlcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFzTGltaXRBID0gISFhLnRpbWluZy5kdWVEYXRlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBoYXNMaW1pdEIgPSAhIWIudGltaW5nLmR1ZURhdGU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNMaW1pdEEgIT09IGhhc0xpbWl0QikgcmV0dXJuIGhhc0xpbWl0QiA/IDEgOiAtMTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIEx1ZWdvIHBvciBwcmlvcmlkYWQgKGRlIG1heW9yIGEgbWVub3IpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmVQcmlvcml0aWVzKGIucHJpb3JpdHksIGEucHJpb3JpdHkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FzZSBUYXNrTGlzdFR5cGUuQVNTSUdORUQ6XG4gICAgICAgICAgICAgICAgLy8gT3JkZW5hciBwb3IgcGVyc29uYSBhc2lnbmFkYSB5IGZlY2hhXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhc2tzQ29weS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFByaW1lcm8gcG9yIHBlcnNvbmFcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGVyc29uQSA9IGEudGFncy5wZW9wbGVbMF0gfHwgJyc7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBlcnNvbkIgPSBiLnRhZ3MucGVvcGxlWzBdIHx8ICcnO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwZXJzb25Db21wID0gcGVyc29uQS5sb2NhbGVDb21wYXJlKHBlcnNvbkIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGVyc29uQ29tcCAhPT0gMCkgcmV0dXJuIHBlcnNvbkNvbXA7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBMdWVnbyBwb3IgZmVjaGEgbFx1MDBFRG1pdGUgKHNpIGV4aXN0ZSlcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0ZUEgPSBhLnRpbWluZy5kdWVEYXRlIHx8ICc5OTk5LTk5LTk5JztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0ZUIgPSBiLnRpbWluZy5kdWVEYXRlIHx8ICc5OTk5LTk5LTk5JztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVBLmxvY2FsZUNvbXBhcmUoZGF0ZUIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FzZSBUYXNrTGlzdFR5cGUuV0FJVElORzpcbiAgICAgICAgICAgICAgICAvLyBPcmRlbmFyIHBvciByYXpcdTAwRjNuIGRlIGJsb3F1ZW9cbiAgICAgICAgICAgICAgICByZXR1cm4gdGFza3NDb3B5LnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUHJpbWVybyBwb3IgdGlwbyBkZSBibG9xdWVvIChkZXBlbmRlbmNpYSwgZmVjaGEgZnV0dXJhLCBzZW1hbmEpXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrVHlwZUEgPSB0aGlzLmdldEJsb2NrVHlwZShhKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmxvY2tUeXBlQiA9IHRoaXMuZ2V0QmxvY2tUeXBlKGIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmxvY2tUeXBlQSAhPT0gYmxvY2tUeXBlQikgcmV0dXJuIGJsb2NrVHlwZUEgLSBibG9ja1R5cGVCO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gTHVlZ28gcG9yIGZlY2hhIChzaSBlcyBwb3IgZmVjaGEgbyBzZW1hbmEpXG4gICAgICAgICAgICAgICAgICAgIGlmIChibG9ja1R5cGVBID09PSAxKSB7IC8vIEZlY2hhIGZ1dHVyYVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0ZUEgPSBhLnRpbWluZy5zdGFydERhdGUgfHwgJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRlQiA9IGIudGltaW5nLnN0YXJ0RGF0ZSB8fCAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRlQS5sb2NhbGVDb21wYXJlKGRhdGVCKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChibG9ja1R5cGVBID09PSAzKSB7IC8vIFNlbWFuYSBmdXR1cmFcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdlZWtBID0gYS50aW1pbmcud2VlayB8fCAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdlZWtCID0gYi50aW1pbmcud2VlayB8fCAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3ZWVrQS5sb2NhbGVDb21wYXJlKHdlZWtCKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vIFBhcmEgb3RyYXMgbGlzdGFzLCBvcmRlbmFyIHBvciBwcmlvcmlkYWRcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFza3NDb3B5LnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZVByaW9yaXRpZXMoYi5wcmlvcml0eSwgYS5wcmlvcml0eSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogT2J0aWVuZSBlbCB0aXBvIGRlIGJsb3F1ZW8gcGFyYSBvcmRlbmFyIHRhcmVhcyBlbiBwYXVzYVxuICAgICAqIDE6IEZlY2hhIGZ1dHVyYSwgMjogRGVwZW5kZW5jaWEsIDM6IFNlbWFuYSBmdXR1cmFcbiAgICAgKi9cbiAgICBwcml2YXRlIGdldEJsb2NrVHlwZSh0YXNrOiBUYXNrKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRhc2sudGltaW5nLnN0YXJ0RGF0ZSkgcmV0dXJuIDE7XG4gICAgICAgIGlmICh0YXNrLmRlcGVuZGVuY2llcy5sZW5ndGggPiAwKSByZXR1cm4gMjtcbiAgICAgICAgaWYgKHRhc2sudGltaW5nLndlZWspIHJldHVybiAzO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQ29tcGFyYSBkb3MgcHJpb3JpZGFkZXMgcGFyYSBvcmRlbmFyIChkZWwgbVx1MDBFMXMgYWx0byBhbCBtXHUwMEUxcyBiYWpvKVxuICAgICAqL1xuICAgIHByaXZhdGUgY29tcGFyZVByaW9yaXRpZXMoYTogVGFza1ByaW9yaXR5LCBiOiBUYXNrUHJpb3JpdHkpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBwcmlvcml0eVZhbHVlcyA9IHtcbiAgICAgICAgICAgIFtUYXNrUHJpb3JpdHkuSElHSEVTVF06IDQsXG4gICAgICAgICAgICBbVGFza1ByaW9yaXR5LkhJR0hdOiAzLFxuICAgICAgICAgICAgW1Rhc2tQcmlvcml0eS5OT1JNQUxdOiAyLFxuICAgICAgICAgICAgW1Rhc2tQcmlvcml0eS5MT1ddOiAxLFxuICAgICAgICAgICAgW1Rhc2tQcmlvcml0eS5MT1dFU1RdOiAwXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcHJpb3JpdHlWYWx1ZXNbYV0gLSBwcmlvcml0eVZhbHVlc1tiXTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogT2J0aWVuZSBsYSBldGlxdWV0YSBwYXJhIHVuIHRpcG8gZGUgZW50aWRhZFxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0RW50aXR5VHlwZUxhYmVsKHR5cGU6IEVudGl0eVR5cGUpOiBzdHJpbmcge1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgRW50aXR5VHlwZS5BUkVBX1ZJREE6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdcdTAwQzFyZWEgZGUgVmlkYSc7XG4gICAgICAgICAgICBjYXNlIEVudGl0eVR5cGUuQVJFQV9JTlRFUkVTOlxuICAgICAgICAgICAgICAgIHJldHVybiAnXHUwMEMxcmVhIGRlIEludGVyXHUwMEU5cyc7XG4gICAgICAgICAgICBjYXNlIEVudGl0eVR5cGUuUFJPWUVDVE9fUTpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1Byb3llY3RvIFEnO1xuICAgICAgICAgICAgY2FzZSBFbnRpdHlUeXBlLlBST1lFQ1RPX0dURDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1Byb3llY3RvIEdURCc7XG4gICAgICAgICAgICBjYXNlIEVudGl0eVR5cGUuQU5PVEFDSU9OOlxuICAgICAgICAgICAgICAgIHJldHVybiAnQW5vdGFjaVx1MDBGM24nO1xuICAgICAgICAgICAgY2FzZSBFbnRpdHlUeXBlLkNBTVBBTkE6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdDYW1wYVx1MDBGMWEnO1xuICAgICAgICAgICAgY2FzZSBFbnRpdHlUeXBlLkVOVFJFR0FCTEU6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdFbnRyZWdhYmxlJztcbiAgICAgICAgICAgIGNhc2UgRW50aXR5VHlwZS5SRUdJU1RST19USUVNUE86XG4gICAgICAgICAgICAgICAgcmV0dXJuICdSZWdpc3RybyBUaWVtcG8nO1xuICAgICAgICAgICAgY2FzZSBFbnRpdHlUeXBlLlRSQU5TQUNDSU9OOlxuICAgICAgICAgICAgICAgIHJldHVybiAnVHJhbnNhY2NpXHUwMEYzbic7XG4gICAgICAgICAgICBjYXNlIEVudGl0eVR5cGUuT1RIRVI6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdPdHJhIEVudGlkYWQnO1xuICAgICAgICAgICAgY2FzZSBFbnRpdHlUeXBlLlVOS05PV046XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiAnRW50aWRhZCc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogT2J0aWVuZSBsYSBjbGFzZSBDU1MgcGFyYSB1biBlc3RhZG8gZGUgZW50aWRhZFxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0RW50aXR5U3RhdGVDbGFzcyhzdGF0ZTogRW50aXR5U3RhdGUpOiBzdHJpbmcge1xuICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlIEVudGl0eVN0YXRlLkFDVElWRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2FjdGl2ZSc7XG4gICAgICAgICAgICBjYXNlIEVudGl0eVN0YXRlLlBBVVNFRDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3BhdXNlZCc7XG4gICAgICAgICAgICBjYXNlIEVudGl0eVN0YXRlLlNUT1BQRUQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzdG9wcGVkJztcbiAgICAgICAgICAgIGNhc2UgRW50aXR5U3RhdGUuQVJDSElWRUQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdhcmNoaXZlZCc7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiAndW5rbm93bic7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogT2J0aWVuZSBlbCBpY29ubyBwYXJhIHVuYSBwcmlvcmlkYWRcbiAgICAgKi9cbiAgICBwcml2YXRlIGdldFByaW9yaXR5SWNvbihwcmlvcml0eTogVGFza1ByaW9yaXR5KTogc3RyaW5nIHtcbiAgICAgICAgc3dpdGNoIChwcmlvcml0eSkge1xuICAgICAgICAgICAgY2FzZSBUYXNrUHJpb3JpdHkuSElHSEVTVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1x1MjNFQic7XG4gICAgICAgICAgICBjYXNlIFRhc2tQcmlvcml0eS5ISUdIOlxuICAgICAgICAgICAgICAgIHJldHVybiAnXHVEODNEXHVERDNDJztcbiAgICAgICAgICAgIGNhc2UgVGFza1ByaW9yaXR5LkxPVzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1x1RDgzRFx1REQzRCc7XG4gICAgICAgICAgICBjYXNlIFRhc2tQcmlvcml0eS5MT1dFU1Q6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdcdTIzRUMnO1xuICAgICAgICAgICAgY2FzZSBUYXNrUHJpb3JpdHkuTk9STUFMOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogT2J0aWVuZSBsYSBldGlxdWV0YSBwYXJhIHVuIHRpcG8gZGUgbGlzdGEgR1REXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRMaXN0VHlwZUxhYmVsKGxpc3RUeXBlOiBUYXNrTGlzdFR5cGUpOiBzdHJpbmcge1xuICAgICAgICBzd2l0Y2ggKGxpc3RUeXBlKSB7XG4gICAgICAgICAgICBjYXNlIFRhc2tMaXN0VHlwZS5JTkJPWDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0JhbmRlamEgZGUgRW50cmFkYSc7XG4gICAgICAgICAgICBjYXNlIFRhc2tMaXN0VHlwZS5ORVhUX0FDVElPTlM6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdQclx1MDBGM3hpbWFzIEFjY2lvbmVzJztcbiAgICAgICAgICAgIGNhc2UgVGFza0xpc3RUeXBlLkNBTEVOREFSOlxuICAgICAgICAgICAgICAgIHJldHVybiAnQ2FsZW5kYXJpbyc7XG4gICAgICAgICAgICBjYXNlIFRhc2tMaXN0VHlwZS5IT1BFRlVMTFlfVE9EQVk6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdPamFsXHUwMEUxIEhveSc7XG4gICAgICAgICAgICBjYXNlIFRhc2tMaXN0VHlwZS5BU1NJR05FRDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0FzaWduYWRhcyc7XG4gICAgICAgICAgICBjYXNlIFRhc2tMaXN0VHlwZS5QUk9KRUNUUzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1Byb3llY3Rvcyc7XG4gICAgICAgICAgICBjYXNlIFRhc2tMaXN0VHlwZS5TT01FREFZX01BWUJFOlxuICAgICAgICAgICAgICAgIHJldHVybiAnQWxnXHUwMEZBbiBEXHUwMEVEYSAvIFRhbCBWZXonO1xuICAgICAgICAgICAgY2FzZSBUYXNrTGlzdFR5cGUuTk9UX1RISVNfV0VFSzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0VzdGEgU2VtYW5hIE5vJztcbiAgICAgICAgICAgIGNhc2UgVGFza0xpc3RUeXBlLldBSVRJTkc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdFbiBQYXVzYSc7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiAnTGlzdGEgRGVzY29ub2NpZGEnO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIE9idGllbmUgbGEgZGVzY3JpcGNpXHUwMEYzbiBwYXJhIHVuIHRpcG8gZGUgbGlzdGEgR1REXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRMaXN0VHlwZURlc2NyaXB0aW9uKGxpc3RUeXBlOiBUYXNrTGlzdFR5cGUpOiBzdHJpbmcge1xuICAgICAgICBzd2l0Y2ggKGxpc3RUeXBlKSB7XG4gICAgICAgICAgICBjYXNlIFRhc2tMaXN0VHlwZS5JTkJPWDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1RhcmVhcyBxdWUgbmVjZXNpdGFuIHNlciBwcm9jZXNhZGFzIG8gY2xhc2lmaWNhZGFzLic7XG4gICAgICAgICAgICBjYXNlIFRhc2tMaXN0VHlwZS5ORVhUX0FDVElPTlM6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdBY2Npb25lcyBsaXN0YXMgcGFyYSBlamVjdXRhciBlbiBjb250ZXh0b3MgZXNwZWNcdTAwRURmaWNvcy4nO1xuICAgICAgICAgICAgY2FzZSBUYXNrTGlzdFR5cGUuQ0FMRU5EQVI6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdDb21wcm9taXNvcyBjb24gZmVjaGEgeSBob3JhIGVzcGVjXHUwMEVEZmljYS4nO1xuICAgICAgICAgICAgY2FzZSBUYXNrTGlzdFR5cGUuSE9QRUZVTExZX1RPREFZOlxuICAgICAgICAgICAgICAgIHJldHVybiAnVGFyZWFzIHF1ZSBzZSBkZXNlYW4gY29tcGxldGFyIGhveSwgc2luIGhvcmEgZXNwZWNcdTAwRURmaWNhLic7XG4gICAgICAgICAgICBjYXNlIFRhc2tMaXN0VHlwZS5BU1NJR05FRDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1RhcmVhcyBkZWxlZ2FkYXMgYSBvdHJhcyBwZXJzb25hcy4nO1xuICAgICAgICAgICAgY2FzZSBUYXNrTGlzdFR5cGUuUFJPSkVDVFM6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdSZXN1bHRhZG9zIHF1ZSByZXF1aWVyZW4gbVx1MDBGQWx0aXBsZXMgYWNjaW9uZXMuJztcbiAgICAgICAgICAgIGNhc2UgVGFza0xpc3RUeXBlLlNPTUVEQVlfTUFZQkU6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdJZGVhcyBwYXJhIGNvbnNpZGVyYXIgZW4gZWwgZnV0dXJvLic7XG4gICAgICAgICAgICBjYXNlIFRhc2tMaXN0VHlwZS5OT1RfVEhJU19XRUVLOlxuICAgICAgICAgICAgICAgIHJldHVybiAnVGFyZWFzIHBvc3B1ZXN0YXMgcGFyYSBkZXNwdVx1MDBFOXMgZGUgZXN0YSBzZW1hbmEuJztcbiAgICAgICAgICAgIGNhc2UgVGFza0xpc3RUeXBlLldBSVRJTkc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdUYXJlYXMgYmxvcXVlYWRhcyBwb3IgZGVwZW5kZW5jaWFzIG8gZmVjaGFzIGZ1dHVyYXMuJztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQVx1MDBGMWFkaXIgZXN0ZSBtXHUwMEU5dG9kbyBhIGxhIGNsYXNlIFZpZXdSZW5kZXJlciBwYXJhIG1vc3RyYXIgaW5mb3JtYWNpXHUwMEYzbiBkZSBkaWFnblx1MDBGM3N0aWNvXG5cbi8qKlxuICogTXVlc3RyYSB1biBtZW5zYWplIGRlIGRpYWduXHUwMEYzc3RpY28gY3VhbmRvIG5vIGhheSBlbnRpZGFkZXMgbyB0YXJlYXNcbiAqL1xucHJpdmF0ZSByZW5kZXJEaWFnbm9zdGljSW5mbyhjb250YWluZXJFbDogSFRNTEVsZW1lbnQsIG1vZGVsOiBIaWVyYXJjaHlWaWV3TW9kZWwpOiB2b2lkIHtcbiAgICBjb25zdCBkaWFnbm9zdGljRWwgPSBjb250YWluZXJFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICd0YXNrLW5hdmlnYXRvci1kaWFnbm9zdGljJyB9KTtcbiAgICBcbiAgICAvLyBUXHUwMEVEdHVsb1xuICAgIGRpYWdub3N0aWNFbC5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6ICdJbmZvcm1hY2lcdTAwRjNuIGRlIGRpYWduXHUwMEYzc3RpY28nLCBjbHM6ICdkaWFnbm9zdGljLXRpdGxlJyB9KTtcbiAgICBcbiAgICAvLyBJbmZvcm1hY2lcdTAwRjNuIGdlbmVyYWxcbiAgICBjb25zdCBpbmZvU2VjdGlvbiA9IGRpYWdub3N0aWNFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdkaWFnbm9zdGljLXNlY3Rpb24nIH0pO1xuICAgIGluZm9TZWN0aW9uLmNyZWF0ZUVsKCdoNCcsIHsgdGV4dDogJ0RhdG9zIGdlbmVyYWxlcycgfSk7XG4gICAgXG4gICAgY29uc3QgaW5mb0xpc3QgPSBpbmZvU2VjdGlvbi5jcmVhdGVFbCgndWwnKTtcbiAgICBpbmZvTGlzdC5jcmVhdGVFbCgnbGknLCB7IHRleHQ6IGBUb3RhbCBkZSBlbnRpZGFkZXM6ICR7bW9kZWwuYWxsRW50aXRpZXMubGVuZ3RofWAgfSk7XG4gICAgaW5mb0xpc3QuY3JlYXRlRWwoJ2xpJywgeyB0ZXh0OiBgRW50aWRhZGVzIGZpbHRyYWRhczogJHttb2RlbC5maWx0ZXJlZEVudGl0aWVzLmxlbmd0aH1gIH0pO1xuICAgIGluZm9MaXN0LmNyZWF0ZUVsKCdsaScsIHsgdGV4dDogYFRvdGFsIGRlIHRhcmVhczogJHttb2RlbC5hbGxUYXNrcy5sZW5ndGh9YCB9KTtcbiAgICBcbiAgICAvLyBGaWx0cm9zIGFjdGl2b3NcbiAgICBjb25zdCBmaWx0ZXJzU2VjdGlvbiA9IGRpYWdub3N0aWNFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdkaWFnbm9zdGljLXNlY3Rpb24nIH0pO1xuICAgIGZpbHRlcnNTZWN0aW9uLmNyZWF0ZUVsKCdoNCcsIHsgdGV4dDogJ0ZpbHRyb3MgYWN0aXZvcycgfSk7XG4gICAgXG4gICAgY29uc3QgZmlsdGVyc0xpc3QgPSBmaWx0ZXJzU2VjdGlvbi5jcmVhdGVFbCgndWwnKTtcbiAgICBcbiAgICAvLyBFc3RhZG9zXG4gICAgbGV0IHN0YXRlc1RleHQgPSAnRXN0YWRvczogJztcbiAgICBpZiAobW9kZWwuZmlsdGVycy5zaG93QWN0aXZlKSBzdGF0ZXNUZXh0ICs9ICdcdUQ4M0RcdURGRTIgJztcbiAgICBpZiAobW9kZWwuZmlsdGVycy5zaG93UGF1c2VkKSBzdGF0ZXNUZXh0ICs9ICdcdUQ4M0RcdURGRTEgJztcbiAgICBpZiAobW9kZWwuZmlsdGVycy5zaG93U3RvcHBlZCkgc3RhdGVzVGV4dCArPSAnXHVEODNEXHVERDM0ICc7XG4gICAgaWYgKG1vZGVsLmZpbHRlcnMuc2hvd0FyY2hpdmVkKSBzdGF0ZXNUZXh0ICs9ICdcdUQ4M0RcdUREMzUgJztcbiAgICBmaWx0ZXJzTGlzdC5jcmVhdGVFbCgnbGknLCB7IHRleHQ6IHN0YXRlc1RleHQgfSk7XG4gICAgXG4gICAgLy8gVGlwb3NcbiAgICBsZXQgdHlwZXNUZXh0ID0gJ1RpcG9zOiAnO1xuICAgIGlmIChtb2RlbC5maWx0ZXJzLnNob3dBcmVhc1ZpZGEpIHR5cGVzVGV4dCArPSAnXHUwMEMxcmVhcyBkZSBWaWRhLCAnO1xuICAgIGlmIChtb2RlbC5maWx0ZXJzLnNob3dBcmVhc0ludGVyZXMpIHR5cGVzVGV4dCArPSAnXHUwMEMxcmVhcyBkZSBJbnRlclx1MDBFOXMsICc7XG4gICAgaWYgKG1vZGVsLmZpbHRlcnMuc2hvd1Byb3llY3Rvc1EpIHR5cGVzVGV4dCArPSAnUHJveWVjdG9zIFEsICc7XG4gICAgaWYgKG1vZGVsLmZpbHRlcnMuc2hvd1Byb3llY3Rvc0dURCkgdHlwZXNUZXh0ICs9ICdQcm95ZWN0b3MgR1RELCAnO1xuICAgIGlmIChtb2RlbC5maWx0ZXJzLnNob3dPdGhlckVudGl0aWVzKSB0eXBlc1RleHQgKz0gJ090cmFzIGVudGlkYWRlcywgJztcbiAgICB0eXBlc1RleHQgPSB0eXBlc1RleHQuZW5kc1dpdGgoJywgJykgPyB0eXBlc1RleHQuc2xpY2UoMCwgLTIpIDogdHlwZXNUZXh0O1xuICAgIGZpbHRlcnNMaXN0LmNyZWF0ZUVsKCdsaScsIHsgdGV4dDogdHlwZXNUZXh0IH0pO1xuICAgIFxuICAgIC8vIFRleHRvIGRlIGJcdTAwRkFzcXVlZGFcbiAgICBpZiAobW9kZWwuZmlsdGVycy5zZWFyY2hUZXh0KSB7XG4gICAgICAgIGZpbHRlcnNMaXN0LmNyZWF0ZUVsKCdsaScsIHsgdGV4dDogYFRleHRvIGRlIGJcdTAwRkFzcXVlZGE6IFwiJHttb2RlbC5maWx0ZXJzLnNlYXJjaFRleHR9XCJgIH0pO1xuICAgIH1cbiAgICBcbiAgICAvLyBDb250ZXh0b3MgZmlsdHJhZG9zXG4gICAgaWYgKG1vZGVsLmZpbHRlcnMuY29udGV4dHMubGVuZ3RoID4gMCkge1xuICAgICAgICBmaWx0ZXJzTGlzdC5jcmVhdGVFbCgnbGknLCB7IHRleHQ6IGBDb250ZXh0b3M6ICR7bW9kZWwuZmlsdGVycy5jb250ZXh0cy5qb2luKCcsICcpfWAgfSk7XG4gICAgfVxuICAgIFxuICAgIC8vIFBlcnNvbmFzIGZpbHRyYWRhc1xuICAgIGlmIChtb2RlbC5maWx0ZXJzLnBlb3BsZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZpbHRlcnNMaXN0LmNyZWF0ZUVsKCdsaScsIHsgdGV4dDogYFBlcnNvbmFzOiAke21vZGVsLmZpbHRlcnMucGVvcGxlLmpvaW4oJywgJyl9YCB9KTtcbiAgICB9XG4gICAgXG4gICAgLy8gRW50aWRhZCBmb2NhbFxuICAgIGlmIChtb2RlbC5mb2N1c0VudGl0eSkge1xuICAgICAgICBjb25zdCBmb2N1c1NlY3Rpb24gPSBkaWFnbm9zdGljRWwuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAnZGlhZ25vc3RpYy1zZWN0aW9uJyB9KTtcbiAgICAgICAgZm9jdXNTZWN0aW9uLmNyZWF0ZUVsKCdoNCcsIHsgdGV4dDogJ0VudGlkYWQgZm9jYWwnIH0pO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZm9jdXNMaXN0ID0gZm9jdXNTZWN0aW9uLmNyZWF0ZUVsKCd1bCcpO1xuICAgICAgICBmb2N1c0xpc3QuY3JlYXRlRWwoJ2xpJywgeyB0ZXh0OiBgVFx1MDBFRHR1bG86ICR7bW9kZWwuZm9jdXNFbnRpdHkudGl0bGV9YCB9KTtcbiAgICAgICAgZm9jdXNMaXN0LmNyZWF0ZUVsKCdsaScsIHsgdGV4dDogYFRpcG86ICR7bW9kZWwuZm9jdXNFbnRpdHkudHlwZX1gIH0pO1xuICAgICAgICBmb2N1c0xpc3QuY3JlYXRlRWwoJ2xpJywgeyB0ZXh0OiBgRXN0YWRvOiAke21vZGVsLmZvY3VzRW50aXR5LnN0YXRlfWAgfSk7XG4gICAgICAgIGZvY3VzTGlzdC5jcmVhdGVFbCgnbGknLCB7IHRleHQ6IGBBcmNoaXZvOiAke21vZGVsLmZvY3VzRW50aXR5LmZpbGUucGF0aH1gIH0pO1xuICAgICAgICBmb2N1c0xpc3QuY3JlYXRlRWwoJ2xpJywgeyB0ZXh0OiBgVGFyZWFzIGRpcmVjdGFzOiAke21vZGVsLmZvY3VzRW50aXR5LnRhc2tzLmxlbmd0aH1gIH0pO1xuICAgIH1cbiAgICBcbiAgICAvLyBTdWdlcmVuY2lhc1xuICAgIGNvbnN0IHN1Z2dlc3Rpb25zU2VjdGlvbiA9IGRpYWdub3N0aWNFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdkaWFnbm9zdGljLXNlY3Rpb24nIH0pO1xuICAgIHN1Z2dlc3Rpb25zU2VjdGlvbi5jcmVhdGVFbCgnaDQnLCB7IHRleHQ6ICdTdWdlcmVuY2lhcycgfSk7XG4gICAgXG4gICAgY29uc3Qgc3VnZ2VzdGlvbnNMaXN0ID0gc3VnZ2VzdGlvbnNTZWN0aW9uLmNyZWF0ZUVsKCd1bCcpO1xuICAgIHN1Z2dlc3Rpb25zTGlzdC5jcmVhdGVFbCgnbGknLCB7IHRleHQ6ICdWZXJpZmljYSBxdWUgbGFzIHRhcmVhcyBlc3RcdTAwRTluIGVuIGZvcm1hdG8gY29ycmVjdG86IFwiLSBbIF0gVGV4dG8gZGUgbGEgdGFyZWFcIicgfSk7XG4gICAgc3VnZ2VzdGlvbnNMaXN0LmNyZWF0ZUVsKCdsaScsIHsgdGV4dDogJ0FzZWdcdTAwRkFyYXRlIGRlIHF1ZSBlbCBhcmNoaXZvIHRlbmdhIGxhcyBwcm9waWVkYWRlcyBmcm9udG1hdHRlciBjb3JyZWN0YXMgKHR5cGUsIGVzdGFkbywgZXRjLiknIH0pO1xuICAgIHN1Z2dlc3Rpb25zTGlzdC5jcmVhdGVFbCgnbGknLCB7IHRleHQ6ICdSZXZpc2Egc2kgaGF5IGZpbHRyb3MgYXBsaWNhZG9zIHF1ZSBwdWVkYW4gZXN0YXIgb2N1bHRhbmRvIGxhcyB0YXJlYXMnIH0pO1xuICAgIHN1Z2dlc3Rpb25zTGlzdC5jcmVhdGVFbCgnbGknLCB7IHRleHQ6ICdQcnVlYmEgYSBhYnJpciBlbCBuYXZlZ2Fkb3IgZGVzZGUgdW5hIG5vdGEgcXVlIHNlcGFzIHF1ZSBjb250aWVuZSB0YXJlYXMnIH0pO1xuICAgIFxuICAgIC8vIEJvdFx1MDBGM24gcGFyYSBtb3N0cmFyIHRvZGFzIGxhcyBlbnRpZGFkZXMgeSB0YXJlYXNcbiAgICBjb25zdCBhY3Rpb25TZWN0aW9uID0gZGlhZ25vc3RpY0VsLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ2RpYWdub3N0aWMtYWN0aW9ucycgfSk7XG4gICAgXG4gICAgY29uc3QgcmVzZXRGaWx0ZXJzQnV0dG9uID0gYWN0aW9uU2VjdGlvbi5jcmVhdGVFbCgnYnV0dG9uJywge1xuICAgICAgICB0ZXh0OiAnTW9zdHJhciB0b2RvIChxdWl0YXIgZmlsdHJvcyknLFxuICAgICAgICBjbHM6ICd0YXNrLW5hdmlnYXRvci1yZWZyZXNoLWJ1dHRvbidcbiAgICB9KTtcbiAgICBcbiAgICByZXNldEZpbHRlcnNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIC8vIEV2ZW50byBwZXJzb25hbGl6YWRvIHBhcmEgcmVzZXRlYXIgZmlsdHJvc1xuICAgICAgICBjb250YWluZXJFbC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgndGFzay1uYXZpZ2F0b3ItcmVzZXQtZmlsdGVycycpKTtcbiAgICB9KTtcbn1cbn0iLCAiLy8gc3JjL21vZHVsZXMvdGFza05hdmlnYXRvci9jb21wb25lbnRzL0ZpbHRlclBhbmVsLnRzXG5cbmltcG9ydCB7IEZpbHRlck9wdGlvbnMgfSBmcm9tICcuLi9tb2RlbHMvSGllcmFyY2h5Vmlld01vZGVsJztcbmltcG9ydCB7IFRhc2tMaXN0VHlwZSB9IGZyb20gJy4uL21vZGVscy9UYXNrJztcblxuLyoqXG4gKiBDb21wb25lbnRlIHBhcmEgZWwgcGFuZWwgZGUgZmlsdHJvcyBkZSBsYSB2aXN0YSBkZSB0YXJlYXNcbiAqL1xuZXhwb3J0IGNsYXNzIEZpbHRlclBhbmVsIHtcbiAgICAvLyBDYWxsYmFjayBwYXJhIGN1YW5kbyBzZSBhcGxpY2FuIGZpbHRyb3NcbiAgICBwcml2YXRlIG9uQXBwbHlGaWx0ZXJzOiAoZmlsdGVyczogUGFydGlhbDxGaWx0ZXJPcHRpb25zPikgPT4gdm9pZDtcbiAgICBcbiAgICAvLyBFc3RhZG8gYWN0dWFsIGRlIGxvcyBmaWx0cm9zXG4gICAgcHJpdmF0ZSBjdXJyZW50RmlsdGVyczogRmlsdGVyT3B0aW9ucztcbiAgICBcbiAgICAvLyBFbGVtZW50b3MgRE9NXG4gICAgcHJpdmF0ZSBjb250YWluZXI6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgY29udGFpbmVyU2hvd246IGJvb2xlYW4gPSB0cnVlO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKG9uQXBwbHlGaWx0ZXJzOiAoZmlsdGVyczogUGFydGlhbDxGaWx0ZXJPcHRpb25zPikgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLm9uQXBwbHlGaWx0ZXJzID0gb25BcHBseUZpbHRlcnM7XG4gICAgICAgIFxuICAgICAgICAvLyBJbmljaWFsaXphciBmaWx0cm9zIGNvbiB2YWxvcmVzIHBvciBkZWZlY3RvXG4gICAgICAgIHRoaXMuY3VycmVudEZpbHRlcnMgPSB7XG4gICAgICAgICAgICBzaG93Q29tcGxldGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHNob3dBY3RpdmU6IHRydWUsXG4gICAgICAgICAgICBzaG93UGF1c2VkOiB0cnVlLFxuICAgICAgICAgICAgc2hvd1N0b3BwZWQ6IGZhbHNlLFxuICAgICAgICAgICAgc2hvd0FyY2hpdmVkOiBmYWxzZSxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc2hvd0FyZWFzVmlkYTogdHJ1ZSxcbiAgICAgICAgICAgIHNob3dBcmVhc0ludGVyZXM6IHRydWUsXG4gICAgICAgICAgICBzaG93UHJveWVjdG9zUTogdHJ1ZSxcbiAgICAgICAgICAgIHNob3dQcm95ZWN0b3NHVEQ6IHRydWUsXG4gICAgICAgICAgICBzaG93T3RoZXJFbnRpdGllczogdHJ1ZSxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29udGV4dHM6IFtdLFxuICAgICAgICAgICAgcGVvcGxlOiBbXSxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZW5hYmxlZExpc3RzOiBPYmplY3QudmFsdWVzKFRhc2tMaXN0VHlwZSksXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNlYXJjaFRleHQ6ICcnLFxuICAgICAgICAgICAgZGF5c1JhbmdlOiA3XG4gICAgICAgIH07XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFJlbmRlcml6YSBlbCBwYW5lbCBkZSBmaWx0cm9zIGVuIGVsIGNvbnRlbmVkb3IgcHJvcG9yY2lvbmFkb1xuICAgICAqL1xuICAgIHJlbmRlcihjb250YWluZXI6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXIgZWwgcGFuZWwgZGUgZmlsdHJvc1xuICAgICAgICBjb25zdCBmaWx0ZXJQYW5lbCA9IGNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICd0YXNrLW5hdmlnYXRvci1maWx0ZXItcGFuZWwnIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXIgZW5jYWJlemFkbyBjb24gYm90XHUwMEYzbiBwYXJhIGNvbGFwc2FyL2V4cGFuZGlyXG4gICAgICAgIGNvbnN0IGhlYWRlciA9IGZpbHRlclBhbmVsLmNyZWF0ZURpdih7IGNsczogJ2ZpbHRlci1wYW5lbC1oZWFkZXInIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gVFx1MDBFRHR1bG8gZGVsIHBhbmVsXG4gICAgICAgIGhlYWRlci5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6ICdGaWx0cm9zJywgY2xzOiAnZmlsdGVyLXBhbmVsLXRpdGxlJyB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEJvdFx1MDBGM24gcGFyYSBjb2xhcHNhci9leHBhbmRpclxuICAgICAgICBjb25zdCB0b2dnbGVCdXR0b24gPSBoZWFkZXIuY3JlYXRlRGl2KHsgY2xzOiAnZmlsdGVyLXBhbmVsLXRvZ2dsZScgfSk7XG4gICAgICAgIHRvZ2dsZUJ1dHRvbi5pbm5lckhUTUwgPSB0aGlzLmNvbnRhaW5lclNob3duID8gJ1x1MjVCQycgOiAnXHUyNUI2JztcbiAgICAgICAgdG9nZ2xlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy50b2dnbGVQYW5lbCh0b2dnbGVCdXR0b24pKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENvbnRlbmlkbyBkZWwgcGFuZWwgKGNvbGFwc2FibGUpXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBmaWx0ZXJQYW5lbC5jcmVhdGVEaXYoeyBjbHM6ICdmaWx0ZXItcGFuZWwtY29udGVudCcgfSk7XG4gICAgICAgIGlmICghdGhpcy5jb250YWluZXJTaG93bikge1xuICAgICAgICAgICAgY29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBDcmVhciBzZWNjaW9uZXMgZGUgZmlsdHJvc1xuICAgICAgICB0aGlzLmNyZWF0ZVNlYXJjaFNlY3Rpb24oY29udGVudCk7XG4gICAgICAgIHRoaXMuY3JlYXRlRW50aXR5U3RhdGVTZWN0aW9uKGNvbnRlbnQpO1xuICAgICAgICB0aGlzLmNyZWF0ZUVudGl0eVR5cGVTZWN0aW9uKGNvbnRlbnQpO1xuICAgICAgICB0aGlzLmNyZWF0ZUdURExpc3RzU2VjdGlvbihjb250ZW50KTtcbiAgICAgICAgdGhpcy5jcmVhdGVDb250ZXh0c1NlY3Rpb24oY29udGVudCk7XG4gICAgICAgIHRoaXMuY3JlYXRlUGVvcGxlU2VjdGlvbihjb250ZW50KTtcbiAgICAgICAgdGhpcy5jcmVhdGVEYXRlUmFuZ2VTZWN0aW9uKGNvbnRlbnQpO1xuICAgICAgICBcbiAgICAgICAgLy8gQm90b25lcyBkZSBhY2NpXHUwMEYzblxuICAgICAgICBjb25zdCBhY3Rpb25zRGl2ID0gY29udGVudC5jcmVhdGVEaXYoeyBjbHM6ICdmaWx0ZXItcGFuZWwtYWN0aW9ucycgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBCb3RcdTAwRjNuIHBhcmEgYXBsaWNhciBmaWx0cm9zXG4gICAgICAgIGNvbnN0IGFwcGx5QnV0dG9uID0gYWN0aW9uc0Rpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyBcbiAgICAgICAgICAgIHRleHQ6ICdBcGxpY2FyIEZpbHRyb3MnLFxuICAgICAgICAgICAgY2xzOiAnZmlsdGVyLWFwcGx5LWJ1dHRvbidcbiAgICAgICAgfSk7XG4gICAgICAgIGFwcGx5QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5hcHBseUZpbHRlcnMoKSk7XG4gICAgICAgIFxuICAgICAgICAvLyBCb3RcdTAwRjNuIHBhcmEgcmVzdGFibGVjZXIgZmlsdHJvc1xuICAgICAgICBjb25zdCByZXNldEJ1dHRvbiA9IGFjdGlvbnNEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgXG4gICAgICAgICAgICB0ZXh0OiAnUmVzdGFibGVjZXInLFxuICAgICAgICAgICAgY2xzOiAnZmlsdGVyLXJlc2V0LWJ1dHRvbidcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc2V0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5yZXNldEZpbHRlcnMoKSk7XG5cblxuICAgICAgICAvLyBBXHUwMEYxYWRpciBlc2N1Y2hhIHBhcmEgZWwgZXZlbnRvIGRlIGFjdHVhbGl6YWNpXHUwMEYzbiBkZSBmaWx0cm9zXG4gICAgICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCd0YXNrLW5hdmlnYXRvci11cGRhdGUtZmlsdGVycycsIChldmVudDogQ3VzdG9tRXZlbnQpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJbVGFza05hdmlnYXRvcl0gRXZlbnRvIGRlIGFjdHVhbGl6YWNpXHUwMEYzbiBkZSBmaWx0cm9zIHJlY2liaWRvXCIsIGV2ZW50LmRldGFpbCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoZXZlbnQuZGV0YWlsPy5maWx0ZXJzKSB7XG4gICAgICAgICAgICAvLyBBY3R1YWxpemFyIGZpbHRyb3MgY29uIGxvcyB2YWxvcmVzIG51ZXZvc1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50RmlsdGVycyA9IHsgLi4udGhpcy5jdXJyZW50RmlsdGVycywgLi4uZXZlbnQuZGV0YWlsLmZpbHRlcnMgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQWN0dWFsaXphciBsYSBVSSBwYXJhIHJlZmxlamFyIGxvcyBudWV2b3MgZmlsdHJvc1xuICAgICAgICAgICAgdGhpcy51cGRhdGVVSSgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBBcGxpY2FyIGxvcyBmaWx0cm9zXG4gICAgICAgICAgICB0aGlzLmFwcGx5RmlsdGVycygpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIENhbWJpYSBsYSB2aXNpYmlsaWRhZCBkZWwgcGFuZWwgZGUgZmlsdHJvc1xuICAgICAqL1xuICAgIHByaXZhdGUgdG9nZ2xlUGFuZWwodG9nZ2xlQnV0dG9uOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNvbnRhaW5lclNob3duID0gIXRoaXMuY29udGFpbmVyU2hvd247XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuZmlsdGVyLXBhbmVsLWNvbnRlbnQnKSBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLmNvbnRhaW5lclNob3duKSB7XG4gICAgICAgICAgICBjb250ZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgdG9nZ2xlQnV0dG9uLmlubmVySFRNTCA9ICdcdTI1QkMnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgdG9nZ2xlQnV0dG9uLmlubmVySFRNTCA9ICdcdTI1QjYnO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIENyZWEgbGEgc2VjY2lcdTAwRjNuIGRlIGJcdTAwRkFzcXVlZGEgZGUgdGV4dG9cbiAgICAgKi9cbiAgICBwcml2YXRlIGNyZWF0ZVNlYXJjaFNlY3Rpb24oY29udGFpbmVyOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgICAgICBjb25zdCBzZWN0aW9uID0gY29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ2ZpbHRlci1zZWN0aW9uJyB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFRcdTAwRUR0dWxvIGRlIGxhIHNlY2NpXHUwMEYzblxuICAgICAgICBzZWN0aW9uLmNyZWF0ZUVsKCdoNCcsIHsgdGV4dDogJ0JcdTAwRkFzcXVlZGEnLCBjbHM6ICdmaWx0ZXItc2VjdGlvbi10aXRsZScgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBJbnB1dCBkZSBiXHUwMEZBc3F1ZWRhXG4gICAgICAgIGNvbnN0IHNlYXJjaElucHV0ID0gc2VjdGlvbi5jcmVhdGVFbCgnaW5wdXQnLCB7XG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ0J1c2NhciB0YXJlYXMgbyBlbnRpZGFkZXMuLi4nLFxuICAgICAgICAgICAgY2xzOiAnZmlsdGVyLXNlYXJjaC1pbnB1dCdcbiAgICAgICAgfSk7XG4gICAgICAgIHNlYXJjaElucHV0LnZhbHVlID0gdGhpcy5jdXJyZW50RmlsdGVycy5zZWFyY2hUZXh0O1xuICAgICAgICBcbiAgICAgICAgLy8gRXZlbnQgbGlzdGVuZXIgcGFyYSBhY3R1YWxpemFyIGVsIGZpbHRybyBhbCBlc2NyaWJpclxuICAgICAgICBzZWFyY2hJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRGaWx0ZXJzLnNlYXJjaFRleHQgPSAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBDcmVhIGxhIHNlY2NpXHUwMEYzbiBkZSBmaWx0cm9zIHBvciBlc3RhZG8gZGUgZW50aWRhZFxuICAgICAqL1xuICAgIHByaXZhdGUgY3JlYXRlRW50aXR5U3RhdGVTZWN0aW9uKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgc2VjdGlvbiA9IGNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdmaWx0ZXItc2VjdGlvbicgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBUXHUwMEVEdHVsbyBkZSBsYSBzZWNjaVx1MDBGM25cbiAgICAgICAgc2VjdGlvbi5jcmVhdGVFbCgnaDQnLCB7IHRleHQ6ICdFc3RhZG9zJywgY2xzOiAnZmlsdGVyLXNlY3Rpb24tdGl0bGUnIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2tib3hlcyBwYXJhIGNhZGEgZXN0YWRvXG4gICAgICAgIHRoaXMuY3JlYXRlQ2hlY2tib3goc2VjdGlvbiwgJ3Nob3dBY3RpdmUnLCAnXHVEODNEXHVERkUyIEFjdGl2bycsIHRoaXMuY3VycmVudEZpbHRlcnMuc2hvd0FjdGl2ZSk7XG4gICAgICAgIHRoaXMuY3JlYXRlQ2hlY2tib3goc2VjdGlvbiwgJ3Nob3dQYXVzZWQnLCAnXHVEODNEXHVERkUxIEVuIFBhdXNhJywgdGhpcy5jdXJyZW50RmlsdGVycy5zaG93UGF1c2VkKTtcbiAgICAgICAgdGhpcy5jcmVhdGVDaGVja2JveChzZWN0aW9uLCAnc2hvd1N0b3BwZWQnLCAnXHVEODNEXHVERDM0IERldGVuaWRvJywgdGhpcy5jdXJyZW50RmlsdGVycy5zaG93U3RvcHBlZCk7XG4gICAgICAgIHRoaXMuY3JlYXRlQ2hlY2tib3goc2VjdGlvbiwgJ3Nob3dBcmNoaXZlZCcsICdcdUQ4M0RcdUREMzUgQXJjaGl2YWRvJywgdGhpcy5jdXJyZW50RmlsdGVycy5zaG93QXJjaGl2ZWQpO1xuICAgICAgICB0aGlzLmNyZWF0ZUNoZWNrYm94KHNlY3Rpb24sICdzaG93Q29tcGxldGVkJywgJ1x1MjcwNSBUYXJlYXMgQ29tcGxldGFkYXMnLCB0aGlzLmN1cnJlbnRGaWx0ZXJzLnNob3dDb21wbGV0ZWQpO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBDcmVhIGxhIHNlY2NpXHUwMEYzbiBkZSBmaWx0cm9zIHBvciB0aXBvIGRlIGVudGlkYWRcbiAgICAgKi9cbiAgICBwcml2YXRlIGNyZWF0ZUVudGl0eVR5cGVTZWN0aW9uKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgc2VjdGlvbiA9IGNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdmaWx0ZXItc2VjdGlvbicgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBUXHUwMEVEdHVsbyBkZSBsYSBzZWNjaVx1MDBGM25cbiAgICAgICAgc2VjdGlvbi5jcmVhdGVFbCgnaDQnLCB7IHRleHQ6ICdUaXBvcyBkZSBFbnRpZGFkJywgY2xzOiAnZmlsdGVyLXNlY3Rpb24tdGl0bGUnIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2tib3hlcyBwYXJhIGNhZGEgdGlwb1xuICAgICAgICB0aGlzLmNyZWF0ZUNoZWNrYm94KHNlY3Rpb24sICdzaG93QXJlYXNWaWRhJywgJ1x1MDBDMXJlYXMgZGUgVmlkYScsIHRoaXMuY3VycmVudEZpbHRlcnMuc2hvd0FyZWFzVmlkYSk7XG4gICAgICAgIHRoaXMuY3JlYXRlQ2hlY2tib3goc2VjdGlvbiwgJ3Nob3dBcmVhc0ludGVyZXMnLCAnXHUwMEMxcmVhcyBkZSBJbnRlclx1MDBFOXMnLCB0aGlzLmN1cnJlbnRGaWx0ZXJzLnNob3dBcmVhc0ludGVyZXMpO1xuICAgICAgICB0aGlzLmNyZWF0ZUNoZWNrYm94KHNlY3Rpb24sICdzaG93UHJveWVjdG9zUScsICdQcm95ZWN0b3MgUScsIHRoaXMuY3VycmVudEZpbHRlcnMuc2hvd1Byb3llY3Rvc1EpO1xuICAgICAgICB0aGlzLmNyZWF0ZUNoZWNrYm94KHNlY3Rpb24sICdzaG93UHJveWVjdG9zR1REJywgJ1Byb3llY3RvcyBHVEQnLCB0aGlzLmN1cnJlbnRGaWx0ZXJzLnNob3dQcm95ZWN0b3NHVEQpO1xuICAgICAgICB0aGlzLmNyZWF0ZUNoZWNrYm94KHNlY3Rpb24sICdzaG93T3RoZXJFbnRpdGllcycsICdPdHJhcyBFbnRpZGFkZXMnLCB0aGlzLmN1cnJlbnRGaWx0ZXJzLnNob3dPdGhlckVudGl0aWVzKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQ3JlYSBsYSBzZWNjaVx1MDBGM24gZGUgZmlsdHJvcyBwb3IgbGlzdGFzIEdURFxuICAgICAqL1xuICAgIHByaXZhdGUgY3JlYXRlR1RETGlzdHNTZWN0aW9uKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgc2VjdGlvbiA9IGNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdmaWx0ZXItc2VjdGlvbicgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBUXHUwMEVEdHVsbyBkZSBsYSBzZWNjaVx1MDBGM25cbiAgICAgICAgc2VjdGlvbi5jcmVhdGVFbCgnaDQnLCB7IHRleHQ6ICdMaXN0YXMgR1REJywgY2xzOiAnZmlsdGVyLXNlY3Rpb24tdGl0bGUnIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXIgY2hlY2tib3hlcyBwYXJhIGNhZGEgbGlzdGEgR1REXG4gICAgICAgIGNvbnN0IGxpc3RMYWJlbHMgPSB7XG4gICAgICAgICAgICBbVGFza0xpc3RUeXBlLklOQk9YXTogJ0JhbmRlamEgZGUgRW50cmFkYScsXG4gICAgICAgICAgICBbVGFza0xpc3RUeXBlLk5FWFRfQUNUSU9OU106ICdQclx1MDBGM3hpbWFzIEFjY2lvbmVzJyxcbiAgICAgICAgICAgIFtUYXNrTGlzdFR5cGUuQ0FMRU5EQVJdOiAnQ2FsZW5kYXJpbycsXG4gICAgICAgICAgICBbVGFza0xpc3RUeXBlLkhPUEVGVUxMWV9UT0RBWV06ICdPamFsXHUwMEUxIEhveScsXG4gICAgICAgICAgICBbVGFza0xpc3RUeXBlLkFTU0lHTkVEXTogJ0FzaWduYWRhcycsXG4gICAgICAgICAgICBbVGFza0xpc3RUeXBlLlBST0pFQ1RTXTogJ1Byb3llY3RvcycsXG4gICAgICAgICAgICBbVGFza0xpc3RUeXBlLlNPTUVEQVlfTUFZQkVdOiAnQWxnXHUwMEZBbiBEXHUwMEVEYSAvIFRhbCBWZXonLFxuICAgICAgICAgICAgW1Rhc2tMaXN0VHlwZS5OT1RfVEhJU19XRUVLXTogJ0VzdGEgU2VtYW5hIE5vJyxcbiAgICAgICAgICAgIFtUYXNrTGlzdFR5cGUuV0FJVElOR106ICdFbiBQYXVzYSdcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGZvciAoY29uc3QgbGlzdFR5cGUgb2YgT2JqZWN0LnZhbHVlcyhUYXNrTGlzdFR5cGUpKSB7XG4gICAgICAgICAgICBjb25zdCBpc0VuYWJsZWQgPSB0aGlzLmN1cnJlbnRGaWx0ZXJzLmVuYWJsZWRMaXN0cy5pbmNsdWRlcyhsaXN0VHlwZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrYm94RGl2ID0gc2VjdGlvbi5jcmVhdGVEaXYoeyBjbHM6ICdmaWx0ZXItY2hlY2tib3gtY29udGFpbmVyJyB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgY2hlY2tib3ggPSBjaGVja2JveERpdi5jcmVhdGVFbCgnaW5wdXQnLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2NoZWNrYm94JyxcbiAgICAgICAgICAgICAgICBjbHM6ICdmaWx0ZXItY2hlY2tib3gnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNoZWNrYm94LmlkID0gYGxpc3QtJHtsaXN0VHlwZX1gO1xuICAgICAgICAgICAgY2hlY2tib3guY2hlY2tlZCA9IGlzRW5hYmxlZDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGVja2VkID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNoZWNrZWQ7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQVx1MDBGMWFkaXIgbGEgbGlzdGEgYSBsYXMgaGFiaWxpdGFkYXMgc2kgbm8gZXN0XHUwMEUxIHlhXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jdXJyZW50RmlsdGVycy5lbmFibGVkTGlzdHMuaW5jbHVkZXMobGlzdFR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRGaWx0ZXJzLmVuYWJsZWRMaXN0cy5wdXNoKGxpc3RUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEVsaW1pbmFyIGxhIGxpc3RhIGRlIGxhcyBoYWJpbGl0YWRhc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRGaWx0ZXJzLmVuYWJsZWRMaXN0cyA9IHRoaXMuY3VycmVudEZpbHRlcnMuZW5hYmxlZExpc3RzLmZpbHRlcihcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPT4gdHlwZSAhPT0gbGlzdFR5cGVcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRXRpcXVldGEgZGVsIGNoZWNrYm94XG4gICAgICAgICAgICBjb25zdCBsYWJlbCA9IGNoZWNrYm94RGl2LmNyZWF0ZUVsKCdsYWJlbCcsIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBsaXN0TGFiZWxzW2xpc3RUeXBlXSB8fCBsaXN0VHlwZSxcbiAgICAgICAgICAgICAgICBjbHM6ICdmaWx0ZXItY2hlY2tib3gtbGFiZWwnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxhYmVsLmh0bWxGb3IgPSBjaGVja2JveC5pZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBDcmVhIGxhIHNlY2NpXHUwMEYzbiBkZSBmaWx0cm9zIHBvciBjb250ZXh0b3NcbiAgICAgKi9cbiAgICBwcml2YXRlIGNyZWF0ZUNvbnRleHRzU2VjdGlvbihjb250YWluZXI6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHNlY3Rpb24gPSBjb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiAnZmlsdGVyLXNlY3Rpb24nIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gVFx1MDBFRHR1bG8gZGUgbGEgc2VjY2lcdTAwRjNuXG4gICAgICAgIHNlY3Rpb24uY3JlYXRlRWwoJ2g0JywgeyB0ZXh0OiAnQ29udGV4dG9zICgjY3gpJywgY2xzOiAnZmlsdGVyLXNlY3Rpb24tdGl0bGUnIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gSW5wdXQgcGFyYSBhXHUwMEYxYWRpciBjb250ZXh0b3NcbiAgICAgICAgY29uc3QgY29udGV4dElucHV0ID0gc2VjdGlvbi5jcmVhdGVFbCgnaW5wdXQnLCB7XG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ0FcdTAwRjFhZGlyIGNvbnRleHRvIChjeC1ub21icmUpJyxcbiAgICAgICAgICAgIGNsczogJ2ZpbHRlci10ZXh0LWlucHV0J1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEJvdFx1MDBGM24gcGFyYSBhXHUwMEYxYWRpciBjb250ZXh0b1xuICAgICAgICBjb25zdCBhZGRCdXR0b24gPSBzZWN0aW9uLmNyZWF0ZUVsKCdidXR0b24nLCB7XG4gICAgICAgICAgICB0ZXh0OiAnQVx1MDBGMWFkaXInLFxuICAgICAgICAgICAgY2xzOiAnZmlsdGVyLWFkZC1idXR0b24nXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gRXZlbnQgbGlzdGVuZXIgcGFyYSBlbCBib3RcdTAwRjNuXG4gICAgICAgIGFkZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb250ZXh0SW5wdXQudmFsdWUudHJpbSgpO1xuICAgICAgICAgICAgaWYgKGNvbnRleHQgJiYgIXRoaXMuY3VycmVudEZpbHRlcnMuY29udGV4dHMuaW5jbHVkZXMoY29udGV4dCkpIHtcbiAgICAgICAgICAgICAgICAvLyBBXHUwMEYxYWRpciBwcmVmaWpvIGN4LSBzaSBubyBsbyB0aWVuZVxuICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZENvbnRleHQgPSBjb250ZXh0LnN0YXJ0c1dpdGgoJ2N4LScpID8gY29udGV4dCA6IGBjeC0ke2NvbnRleHR9YDtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRGaWx0ZXJzLmNvbnRleHRzLnB1c2goZm9ybWF0dGVkQ29udGV4dCk7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVDb250ZXh0VGFncyhzZWN0aW9uKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0SW5wdXQudmFsdWUgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBQZXJtaXRpciBhXHUwMEYxYWRpciBjb250ZXh0byBjb24gRW50ZXJcbiAgICAgICAgY29udGV4dElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgKGUpID0+IHtcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJykge1xuICAgICAgICAgICAgICAgIGFkZEJ1dHRvbi5jbGljaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIENvbnRlbmVkb3IgcGFyYSBtb3N0cmFyIGxvcyBjb250ZXh0b3Mgc2VsZWNjaW9uYWRvc1xuICAgICAgICBjb25zdCBjb250ZXh0VGFncyA9IHNlY3Rpb24uY3JlYXRlRGl2KHsgY2xzOiAnZmlsdGVyLXRhZ3MtY29udGFpbmVyJyB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFjdHVhbGl6YXIgbG9zIHRhZ3MgZGUgY29udGV4dG9cbiAgICAgICAgdGhpcy51cGRhdGVDb250ZXh0VGFncyA9IChwYXJlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKCcuZmlsdGVyLXRhZ3MtY29udGFpbmVyJyk7XG4gICAgICAgICAgICBjb250YWluZXIuZW1wdHkoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yIChjb25zdCBjb250ZXh0IG9mIHRoaXMuY3VycmVudEZpbHRlcnMuY29udGV4dHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YWcgPSBjb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiAnZmlsdGVyLXRhZycgfSk7XG4gICAgICAgICAgICAgICAgdGFnLmNyZWF0ZVNwYW4oeyB0ZXh0OiBjb250ZXh0IH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEJvdFx1MDBGM24gcGFyYSBlbGltaW5hciBlbCBjb250ZXh0b1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlbW92ZUJ1dHRvbiA9IHRhZy5jcmVhdGVTcGFuKHsgY2xzOiAnZmlsdGVyLXRhZy1yZW1vdmUnLCB0ZXh0OiAnXHUwMEQ3JyB9KTtcbiAgICAgICAgICAgICAgICByZW1vdmVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEZpbHRlcnMuY29udGV4dHMgPSB0aGlzLmN1cnJlbnRGaWx0ZXJzLmNvbnRleHRzLmZpbHRlcihjID0+IGMgIT09IGNvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbnRleHRUYWdzKHBhcmVudCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAvLyBJbmljaWFsaXphciBsb3MgdGFncyBkZSBjb250ZXh0b1xuICAgICAgICB0aGlzLnVwZGF0ZUNvbnRleHRUYWdzKHNlY3Rpb24pO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBDcmVhIGxhIHNlY2NpXHUwMEYzbiBkZSBmaWx0cm9zIHBvciBwZXJzb25hcyBhc2lnbmFkYXNcbiAgICAgKi9cbiAgICBwcml2YXRlIGNyZWF0ZVBlb3BsZVNlY3Rpb24oY29udGFpbmVyOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgICAgICBjb25zdCBzZWN0aW9uID0gY29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ2ZpbHRlci1zZWN0aW9uJyB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFRcdTAwRUR0dWxvIGRlIGxhIHNlY2NpXHUwMEYzblxuICAgICAgICBzZWN0aW9uLmNyZWF0ZUVsKCdoNCcsIHsgdGV4dDogJ1BlcnNvbmFzICgjcHgpJywgY2xzOiAnZmlsdGVyLXNlY3Rpb24tdGl0bGUnIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gSW5wdXQgcGFyYSBhXHUwMEYxYWRpciBwZXJzb25hc1xuICAgICAgICBjb25zdCBwZXJzb25JbnB1dCA9IHNlY3Rpb24uY3JlYXRlRWwoJ2lucHV0Jywge1xuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdBXHUwMEYxYWRpciBwZXJzb25hIChweC1ub21icmUpJyxcbiAgICAgICAgICAgIGNsczogJ2ZpbHRlci10ZXh0LWlucHV0J1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEJvdFx1MDBGM24gcGFyYSBhXHUwMEYxYWRpciBwZXJzb25hXG4gICAgICAgIGNvbnN0IGFkZEJ1dHRvbiA9IHNlY3Rpb24uY3JlYXRlRWwoJ2J1dHRvbicsIHtcbiAgICAgICAgICAgIHRleHQ6ICdBXHUwMEYxYWRpcicsXG4gICAgICAgICAgICBjbHM6ICdmaWx0ZXItYWRkLWJ1dHRvbidcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBFdmVudCBsaXN0ZW5lciBwYXJhIGVsIGJvdFx1MDBGM25cbiAgICAgICAgYWRkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGVyc29uID0gcGVyc29uSW5wdXQudmFsdWUudHJpbSgpO1xuICAgICAgICAgICAgaWYgKHBlcnNvbiAmJiAhdGhpcy5jdXJyZW50RmlsdGVycy5wZW9wbGUuaW5jbHVkZXMocGVyc29uKSkge1xuICAgICAgICAgICAgICAgIC8vIEFcdTAwRjFhZGlyIHByZWZpam8gcHgtIHNpIG5vIGxvIHRpZW5lXG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVkUGVyc29uID0gcGVyc29uLnN0YXJ0c1dpdGgoJ3B4LScpID8gcGVyc29uIDogYHB4LSR7cGVyc29ufWA7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RmlsdGVycy5wZW9wbGUucHVzaChmb3JtYXR0ZWRQZXJzb24pO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUGVvcGxlVGFncyhzZWN0aW9uKTtcbiAgICAgICAgICAgICAgICBwZXJzb25JbnB1dC52YWx1ZSA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFBlcm1pdGlyIGFcdTAwRjFhZGlyIHBlcnNvbmEgY29uIEVudGVyXG4gICAgICAgIHBlcnNvbklucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgKGUpID0+IHtcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJykge1xuICAgICAgICAgICAgICAgIGFkZEJ1dHRvbi5jbGljaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIENvbnRlbmVkb3IgcGFyYSBtb3N0cmFyIGxhcyBwZXJzb25hcyBzZWxlY2Npb25hZGFzXG4gICAgICAgIGNvbnN0IHBlb3BsZVRhZ3MgPSBzZWN0aW9uLmNyZWF0ZURpdih7IGNsczogJ2ZpbHRlci10YWdzLWNvbnRhaW5lcicgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBBY3R1YWxpemFyIGxvcyB0YWdzIGRlIHBlcnNvbmFzXG4gICAgICAgIHRoaXMudXBkYXRlUGVvcGxlVGFncyA9IChwYXJlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKCcuZmlsdGVyLXRhZ3MtY29udGFpbmVyJyk7XG4gICAgICAgICAgICBjb250YWluZXIuZW1wdHkoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yIChjb25zdCBwZXJzb24gb2YgdGhpcy5jdXJyZW50RmlsdGVycy5wZW9wbGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YWcgPSBjb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiAnZmlsdGVyLXRhZycgfSk7XG4gICAgICAgICAgICAgICAgdGFnLmNyZWF0ZVNwYW4oeyB0ZXh0OiBwZXJzb24gfSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQm90XHUwMEYzbiBwYXJhIGVsaW1pbmFyIGxhIHBlcnNvbmFcbiAgICAgICAgICAgICAgICBjb25zdCByZW1vdmVCdXR0b24gPSB0YWcuY3JlYXRlU3Bhbih7IGNsczogJ2ZpbHRlci10YWctcmVtb3ZlJywgdGV4dDogJ1x1MDBENycgfSk7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRGaWx0ZXJzLnBlb3BsZSA9IHRoaXMuY3VycmVudEZpbHRlcnMucGVvcGxlLmZpbHRlcihwID0+IHAgIT09IHBlcnNvbik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUGVvcGxlVGFncyhwYXJlbnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gSW5pY2lhbGl6YXIgbG9zIHRhZ3MgZGUgcGVyc29uYXNcbiAgICAgICAgdGhpcy51cGRhdGVQZW9wbGVUYWdzKHNlY3Rpb24pO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBDcmVhIGxhIHNlY2NpXHUwMEYzbiBkZSBmaWx0cm9zIHBvciByYW5nbyBkZSBmZWNoYXNcbiAgICAgKi9cbiAgICBwcml2YXRlIGNyZWF0ZURhdGVSYW5nZVNlY3Rpb24oY29udGFpbmVyOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgICAgICBjb25zdCBzZWN0aW9uID0gY29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ2ZpbHRlci1zZWN0aW9uJyB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFRcdTAwRUR0dWxvIGRlIGxhIHNlY2NpXHUwMEYzblxuICAgICAgICBzZWN0aW9uLmNyZWF0ZUVsKCdoNCcsIHsgdGV4dDogJ1JhbmdvIGRlIERcdTAwRURhcycsIGNsczogJ2ZpbHRlci1zZWN0aW9uLXRpdGxlJyB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFNsaWRlciBwYXJhIHNlbGVjY2lvbmFyIGVsIHJhbmdvIGRlIGRcdTAwRURhc1xuICAgICAgICBjb25zdCBzbGlkZXJDb250YWluZXIgPSBzZWN0aW9uLmNyZWF0ZURpdih7IGNsczogJ2ZpbHRlci1zbGlkZXItY29udGFpbmVyJyB9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHNsaWRlciA9IHNsaWRlckNvbnRhaW5lci5jcmVhdGVFbCgnaW5wdXQnLCB7XG4gICAgICAgICAgICB0eXBlOiAncmFuZ2UnLFxuICAgICAgICAgICAgY2xzOiAnZmlsdGVyLXNsaWRlcicsXG4gICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgbWluOiAnMScsXG4gICAgICAgICAgICAgICAgbWF4OiAnMzAnLFxuICAgICAgICAgICAgICAgIHN0ZXA6ICcxJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5jdXJyZW50RmlsdGVycy5kYXlzUmFuZ2UudG9TdHJpbmcoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHZhbHVlRGlzcGxheSA9IHNsaWRlckNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdmaWx0ZXItc2xpZGVyLXZhbHVlJyB9KTtcbiAgICAgICAgdmFsdWVEaXNwbGF5LnRleHRDb250ZW50ID0gYCR7dGhpcy5jdXJyZW50RmlsdGVycy5kYXlzUmFuZ2V9IGRcdTAwRURhc2A7XG4gICAgICAgIFxuICAgICAgICAvLyBFdmVudCBsaXN0ZW5lciBwYXJhIGFjdHVhbGl6YXIgZWwgdmFsb3IgbW9zdHJhZG9cbiAgICAgICAgc2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcGFyc2VJbnQoKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEZpbHRlcnMuZGF5c1JhbmdlID0gdmFsdWU7XG4gICAgICAgICAgICB2YWx1ZURpc3BsYXkudGV4dENvbnRlbnQgPSBgJHt2YWx1ZX0gZFx1MDBFRGFzYDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIENyZWEgdW4gY2hlY2tib3ggY29uIGV0aXF1ZXRhXG4gICAgICovXG4gICAgcHJpdmF0ZSBjcmVhdGVDaGVja2JveChjb250YWluZXI6IEhUTUxFbGVtZW50LCBmaWx0ZXJLZXk6IHN0cmluZywgbGFiZWw6IHN0cmluZywgaXNDaGVja2VkOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGNoZWNrYm94RGl2ID0gY29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ2ZpbHRlci1jaGVja2JveC1jb250YWluZXInIH0pO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgY2hlY2tib3ggPSBjaGVja2JveERpdi5jcmVhdGVFbCgnaW5wdXQnLCB7XG4gICAgICAgICAgICB0eXBlOiAnY2hlY2tib3gnLFxuICAgICAgICAgICAgY2xzOiAnZmlsdGVyLWNoZWNrYm94J1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tib3guaWQgPSBgZmlsdGVyLSR7ZmlsdGVyS2V5fWA7XG4gICAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSBpc0NoZWNrZWQ7XG4gICAgICAgIFxuICAgICAgICBjaGVja2JveC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50RmlsdGVyc1tmaWx0ZXJLZXldID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNoZWNrZWQ7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gRXRpcXVldGEgZGVsIGNoZWNrYm94XG4gICAgICAgIGNvbnN0IGxhYmVsRWwgPSBjaGVja2JveERpdi5jcmVhdGVFbCgnbGFiZWwnLCB7XG4gICAgICAgICAgICB0ZXh0OiBsYWJlbCxcbiAgICAgICAgICAgIGNsczogJ2ZpbHRlci1jaGVja2JveC1sYWJlbCdcbiAgICAgICAgfSk7XG4gICAgICAgIGxhYmVsRWwuaHRtbEZvciA9IGNoZWNrYm94LmlkO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBBcGxpY2EgbG9zIGZpbHRyb3MgYWN0dWFsZXNcbiAgICAgKi9cbiAgICBwcml2YXRlIGFwcGx5RmlsdGVycygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vbkFwcGx5RmlsdGVycyh7IC4uLnRoaXMuY3VycmVudEZpbHRlcnMgfSk7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFJlc3RhYmxlY2UgbG9zIGZpbHRyb3MgYSBzdXMgdmFsb3JlcyBwb3IgZGVmZWN0b1xuICAgICAqL1xuICAgIHByaXZhdGUgcmVzZXRGaWx0ZXJzKCk6IHZvaWQge1xuICAgICAgICAvLyBSZXN0YWJsZWNlciBmaWx0cm9zIGEgdmFsb3JlcyBwb3IgZGVmZWN0b1xuICAgICAgICB0aGlzLmN1cnJlbnRGaWx0ZXJzID0ge1xuICAgICAgICAgICAgc2hvd0NvbXBsZXRlZDogZmFsc2UsXG4gICAgICAgICAgICBzaG93QWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgc2hvd1BhdXNlZDogdHJ1ZSxcbiAgICAgICAgICAgIHNob3dTdG9wcGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHNob3dBcmNoaXZlZDogZmFsc2UsXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNob3dBcmVhc1ZpZGE6IHRydWUsXG4gICAgICAgICAgICBzaG93QXJlYXNJbnRlcmVzOiB0cnVlLFxuICAgICAgICAgICAgc2hvd1Byb3llY3Rvc1E6IHRydWUsXG4gICAgICAgICAgICBzaG93UHJveWVjdG9zR1REOiB0cnVlLFxuICAgICAgICAgICAgc2hvd090aGVyRW50aXRpZXM6IHRydWUsXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnRleHRzOiBbXSxcbiAgICAgICAgICAgIHBlb3BsZTogW10sXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGVuYWJsZWRMaXN0czogT2JqZWN0LnZhbHVlcyhUYXNrTGlzdFR5cGUpLFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBzZWFyY2hUZXh0OiAnJyxcbiAgICAgICAgICAgIGRheXNSYW5nZTogN1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gQWN0dWFsaXphciBsYSBVSSBwYXJhIHJlZmxlamFyIGxvcyB2YWxvcmVzIHBvciBkZWZlY3RvXG4gICAgICAgIHRoaXMudXBkYXRlVUkoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFwbGljYXIgbG9zIGZpbHRyb3MgcmVzdGFibGVjaWRvc1xuICAgICAgICB0aGlzLmFwcGx5RmlsdGVycygpO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBBY3R1YWxpemEgbGEgVUkgcGFyYSByZWZsZWphciBsb3MgdmFsb3JlcyBhY3R1YWxlcyBkZSBsb3MgZmlsdHJvc1xuICAgICAqL1xuICAgIHByaXZhdGUgdXBkYXRlVUkoKTogdm9pZCB7XG4gICAgICAgIC8vIEFjdHVhbGl6YXIgY2hlY2tib3ggZGUgZXN0YWRvc1xuICAgICAgICB0aGlzLnVwZGF0ZUNoZWNrYm94KCdzaG93QWN0aXZlJywgdGhpcy5jdXJyZW50RmlsdGVycy5zaG93QWN0aXZlKTtcbiAgICAgICAgdGhpcy51cGRhdGVDaGVja2JveCgnc2hvd1BhdXNlZCcsIHRoaXMuY3VycmVudEZpbHRlcnMuc2hvd1BhdXNlZCk7XG4gICAgICAgIHRoaXMudXBkYXRlQ2hlY2tib3goJ3Nob3dTdG9wcGVkJywgdGhpcy5jdXJyZW50RmlsdGVycy5zaG93U3RvcHBlZCk7XG4gICAgICAgIHRoaXMudXBkYXRlQ2hlY2tib3goJ3Nob3dBcmNoaXZlZCcsIHRoaXMuY3VycmVudEZpbHRlcnMuc2hvd0FyY2hpdmVkKTtcbiAgICAgICAgdGhpcy51cGRhdGVDaGVja2JveCgnc2hvd0NvbXBsZXRlZCcsIHRoaXMuY3VycmVudEZpbHRlcnMuc2hvd0NvbXBsZXRlZCk7XG4gICAgICAgIFxuICAgICAgICAvLyBBY3R1YWxpemFyIGNoZWNrYm94IGRlIHRpcG9zXG4gICAgICAgIHRoaXMudXBkYXRlQ2hlY2tib3goJ3Nob3dBcmVhc1ZpZGEnLCB0aGlzLmN1cnJlbnRGaWx0ZXJzLnNob3dBcmVhc1ZpZGEpO1xuICAgICAgICB0aGlzLnVwZGF0ZUNoZWNrYm94KCdzaG93QXJlYXNJbnRlcmVzJywgdGhpcy5jdXJyZW50RmlsdGVycy5zaG93QXJlYXNJbnRlcmVzKTtcbiAgICAgICAgdGhpcy51cGRhdGVDaGVja2JveCgnc2hvd1Byb3llY3Rvc1EnLCB0aGlzLmN1cnJlbnRGaWx0ZXJzLnNob3dQcm95ZWN0b3NRKTtcbiAgICAgICAgdGhpcy51cGRhdGVDaGVja2JveCgnc2hvd1Byb3llY3Rvc0dURCcsIHRoaXMuY3VycmVudEZpbHRlcnMuc2hvd1Byb3llY3Rvc0dURCk7XG4gICAgICAgIHRoaXMudXBkYXRlQ2hlY2tib3goJ3Nob3dPdGhlckVudGl0aWVzJywgdGhpcy5jdXJyZW50RmlsdGVycy5zaG93T3RoZXJFbnRpdGllcyk7XG4gICAgICAgIFxuICAgICAgICAvLyBBY3R1YWxpemFyIGNoZWNrYm94IGRlIGxpc3RhcyBHVERcbiAgICAgICAgZm9yIChjb25zdCBsaXN0VHlwZSBvZiBPYmplY3QudmFsdWVzKFRhc2tMaXN0VHlwZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrYm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGxpc3QtJHtsaXN0VHlwZX1gKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgICAgICAgICAgaWYgKGNoZWNrYm94KSB7XG4gICAgICAgICAgICAgICAgY2hlY2tib3guY2hlY2tlZCA9IHRoaXMuY3VycmVudEZpbHRlcnMuZW5hYmxlZExpc3RzLmluY2x1ZGVzKGxpc3RUeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQWN0dWFsaXphciBjYW1wb3MgZGUgdGV4dG9cbiAgICAgICAgY29uc3Qgc2VhcmNoSW5wdXQgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuZmlsdGVyLXNlYXJjaC1pbnB1dCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgIGlmIChzZWFyY2hJbnB1dCkge1xuICAgICAgICAgICAgc2VhcmNoSW5wdXQudmFsdWUgPSB0aGlzLmN1cnJlbnRGaWx0ZXJzLnNlYXJjaFRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEFjdHVhbGl6YXIgc2xpZGVyIGRlIHJhbmdvIGRlIGRcdTAwRURhc1xuICAgICAgICBjb25zdCBzbGlkZXIgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuZmlsdGVyLXNsaWRlcicpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IHZhbHVlRGlzcGxheSA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5maWx0ZXItc2xpZGVyLXZhbHVlJyk7XG4gICAgICAgIGlmIChzbGlkZXIgJiYgdmFsdWVEaXNwbGF5KSB7XG4gICAgICAgICAgICBzbGlkZXIudmFsdWUgPSB0aGlzLmN1cnJlbnRGaWx0ZXJzLmRheXNSYW5nZS50b1N0cmluZygpO1xuICAgICAgICAgICAgdmFsdWVEaXNwbGF5LnRleHRDb250ZW50ID0gYCR7dGhpcy5jdXJyZW50RmlsdGVycy5kYXlzUmFuZ2V9IGRcdTAwRURhc2A7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEFjdHVhbGl6YXIgdGFncyBkZSBjb250ZXh0b3MgeSBwZXJzb25hc1xuICAgICAgICBjb25zdCBjb250ZXh0U2VjdGlvbiA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5maWx0ZXItc2VjdGlvbicpWzVdOyAvLyBcdTAwQ0RuZGljZSBkZSBsYSBzZWNjaVx1MDBGM24gZGUgY29udGV4dG9zXG4gICAgICAgIGlmIChjb250ZXh0U2VjdGlvbikge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVDb250ZXh0VGFncyhjb250ZXh0U2VjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHBlb3BsZVNlY3Rpb24gPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcuZmlsdGVyLXNlY3Rpb24nKVs2XTsgLy8gXHUwMENEbmRpY2UgZGUgbGEgc2VjY2lcdTAwRjNuIGRlIHBlcnNvbmFzXG4gICAgICAgIGlmIChwZW9wbGVTZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVBlb3BsZVRhZ3MocGVvcGxlU2VjdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQWN0dWFsaXphIGVsIGVzdGFkbyBkZSB1biBjaGVja2JveFxuICAgICAqL1xuICAgIHByaXZhdGUgdXBkYXRlQ2hlY2tib3goZmlsdGVyS2V5OiBzdHJpbmcsIGlzQ2hlY2tlZDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBjb25zdCBjaGVja2JveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBmaWx0ZXItJHtmaWx0ZXJLZXl9YCkgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgICAgaWYgKGNoZWNrYm94KSB7XG4gICAgICAgICAgICBjaGVja2JveC5jaGVja2VkID0gaXNDaGVja2VkO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIE1cdTAwRTl0b2RvcyBwYXJhIGFjdHVhbGl6YXIgdGFncyBkZSBjb250ZXh0b3MgeSBwZXJzb25hcyAoZGVmaW5pZG9zIGRpblx1MDBFMW1pY2FtZW50ZSlcbiAgICBwcml2YXRlIHVwZGF0ZUNvbnRleHRUYWdzOiAocGFyZW50OiBIVE1MRWxlbWVudCkgPT4gdm9pZDtcbiAgICBwcml2YXRlIHVwZGF0ZVBlb3BsZVRhZ3M6IChwYXJlbnQ6IEhUTUxFbGVtZW50KSA9PiB2b2lkO1xufVxuXG4vLyBERVZFTE9QTUVOVF9DSEVDS1BPSU5UOiBcImZpbHRlcl9wYW5lbFwiXG4vLyBEZXNjcmlwY2lcdTAwRjNuOiBDb21wb25lbnRlIHBhcmEgZWwgcGFuZWwgZGUgZmlsdHJvcyBkZSBsYSB2aXN0YSBkZSB0YXJlYXNcbi8vIEVzdGFkbzogQ29tcGxldG8iLCAiLy8gc3JjL21vZHVsZXMvdGFza05hdmlnYXRvci91dGlscy9OYXZpZ2F0aW9uVXRpbHMudHNcblxuaW1wb3J0IHsgVEZpbGUgfSBmcm9tICdvYnNpZGlhbic7XG5cbi8qKlxuICogVXRpbGlkYWRlcyBwYXJhIG5hdmVnYXIgZW50cmUgZW50aWRhZGVzIHkgdGFyZWFzXG4gKi9cbmV4cG9ydCBjbGFzcyBOYXZpZ2F0aW9uVXRpbHMge1xuICAgIC8qKlxuICAgICAqIEFicmUgdW5hIGVudGlkYWQgZW4gdW5hIG51ZXZhIGhvamEgKHBlc3RhXHUwMEYxYSlcbiAgICAgKi9cbiAgICBvcGVuRW50aXR5SW5OZXdMZWFmKGZpbGU6IFRGaWxlKTogdm9pZCB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhcHAud29ya3NwYWNlLmdldExlYWYodHJ1ZSkub3BlbkZpbGUoZmlsZSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWwgYWJyaXIgZW50aWRhZDpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgbmV3IE5vdGljZShgRXJyb3IgYWwgYWJyaXIgYXJjaGl2bzogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIEFicmUgdW5hIGVudGlkYWQgeSBuYXZlZ2EgYSB1bmEgdGFyZWEgZXNwZWNcdTAwRURmaWNhXG4gICAgICovXG4gICAgb3BlblRhc2tJbkVudGl0eShmaWxlOiBURmlsZSwgbGluZU51bWJlcjogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBVc2Ftb3MgZVN0YXRlIHBhcmEgcG9zaWNpb25hciBlbCBjdXJzb3IgZW4gbGEgbFx1MDBFRG5lYSBkZSBsYSB0YXJlYVxuICAgICAgICAgICAgYXBwLndvcmtzcGFjZS5nZXRMZWFmKHRydWUpLm9wZW5GaWxlKGZpbGUsIHtcbiAgICAgICAgICAgICAgICBlU3RhdGU6IHsgbGluZTogbGluZU51bWJlciAtIDEgfVxuICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gUmVzYWx0YW1vcyBsYSBsXHUwMEVEbmVhIHBhcmEgbWVqb3IgdmlzaWJpbGlkYWRcbiAgICAgICAgICAgICAgICB0aGlzLmhpZ2hsaWdodExpbmUobGluZU51bWJlciAtIDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWwgYWJyaXIgdGFyZWE6XCIsIGVycm9yKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gSW50ZW50byBhbHRlcm5hdGl2byBzaW4gZVN0YXRlXG4gICAgICAgICAgICBhcHAud29ya3NwYWNlLmdldExlYWYodHJ1ZSkub3BlbkZpbGUoZmlsZSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmlldyA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZSgnbWFya2Rvd24nKTtcbiAgICAgICAgICAgICAgICBpZiAodmlldyAmJiB2aWV3LmVkaXRvcikge1xuICAgICAgICAgICAgICAgICAgICB2aWV3LmVkaXRvci5zZXRDdXJzb3IoeyBsaW5lOiBsaW5lTnVtYmVyIC0gMSwgY2g6IDAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHZpZXcuZWRpdG9yLnNjcm9sbEludG9WaWV3KHsgZnJvbTogeyBsaW5lOiBsaW5lTnVtYmVyIC0gMSwgY2g6IDAgfSwgdG86IHsgbGluZTogbGluZU51bWJlciAtIDEsIGNoOiAwIH0gfSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0TGluZShsaW5lTnVtYmVyIC0gMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogUmVzYWx0YSB2aXN1YWxtZW50ZSB1bmEgbFx1MDBFRG5lYSBlbiBlbCBlZGl0b3JcbiAgICAgKi9cbiAgICBwcml2YXRlIGhpZ2hsaWdodExpbmUobGluZU51bWJlcjogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmlldyA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZSgnbWFya2Rvd24nKTtcbiAgICAgICAgICAgIGlmICghdmlldyB8fCAhdmlldy5lZGl0b3IpIHJldHVybjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRW4gQ29kZU1pcnJvciA2IChPYnNpZGlhbiBtb2Rlcm5vKVxuICAgICAgICAgICAgaWYgKHZpZXcuZWRpdG9yLmNtICYmIHZpZXcuZWRpdG9yLmNtLmRvbSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVzID0gdmlldy5lZGl0b3IuY20uZG9tLnF1ZXJ5U2VsZWN0b3JBbGwoJy5jbS1saW5lJyk7XG4gICAgICAgICAgICAgICAgaWYgKGxpbmVzICYmIGxpbmVzLmxlbmd0aCA+IGxpbmVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IGxpbmVzW2xpbmVOdW1iZXJdO1xuICAgICAgICAgICAgICAgICAgICBsaW5lLmNsYXNzTGlzdC5hZGQoJ3Rhc2staGlnaGxpZ2h0ZWQtbGluZScpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gRWxpbWluYXIgbGEgY2xhc2UgZGVzcHVcdTAwRTlzIGRlIHVuIHRpZW1wb1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUuY2xhc3NMaXN0LnJlbW92ZSgndGFzay1oaWdobGlnaHRlZC1saW5lJyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDIwMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAvLyBFbiBDb2RlTWlycm9yIDUgKE9ic2lkaWFuIGFudGlndW8pXG4gICAgICAgICAgICBlbHNlIGlmICh2aWV3LmVkaXRvci5saW5lRGl2KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGluZXMgPSB2aWV3LmVkaXRvci5saW5lRGl2LnF1ZXJ5U2VsZWN0b3JBbGwoJy5Db2RlTWlycm9yLWxpbmUnKTtcbiAgICAgICAgICAgICAgICBpZiAobGluZXMgJiYgbGluZXMubGVuZ3RoID4gbGluZU51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gbGluZXNbbGluZU51bWJlcl07XG4gICAgICAgICAgICAgICAgICAgIGxpbmUuY2xhc3NMaXN0LmFkZCgndGFzay1oaWdobGlnaHRlZC1saW5lJyk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBFbGltaW5hciBsYSBjbGFzZSBkZXNwdVx1MDBFOXMgZGUgdW4gdGllbXBvXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZS5jbGFzc0xpc3QucmVtb3ZlKCd0YXNrLWhpZ2hsaWdodGVkLWxpbmUnKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMjAwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxMDApOyAvLyBQZXF1ZVx1MDBGMW8gcmV0cmFzbyBwYXJhIGFzZWd1cmFyIHF1ZSBlbCBlZGl0b3IgZXN0XHUwMEU5IGxpc3RvXG4gICAgfVxufVxuXG4vLyBERVZFTE9QTUVOVF9DSEVDS1BPSU5UOiBcIm5hdmlnYXRpb25fdXRpbHNcIlxuLy8gRGVzY3JpcGNpXHUwMEYzbjogVXRpbGlkYWRlcyBwYXJhIG5hdmVnYXIgZW50cmUgZW50aWRhZGVzIHkgdGFyZWFzXG4vLyBFc3RhZG86IENvbXBsZXRvIiwgIi8vIHNyYy9tb2R1bGVzL3Rhc2tOYXZpZ2F0b3Ivc2VydmljZXMvVGFza01hbmFnZXJJbnRlZ3JhdGlvbi50c1xuXG5pbXBvcnQgeyBUYXJlYXNBUEkgfSBmcm9tICcuLi8uLi90YXNrTWFuYWdlci9hcGkvdGFyZWFzQVBJJztcbmltcG9ydCB7IFRhc2ssIFRhc2tMaXN0VHlwZSB9IGZyb20gJy4uL21vZGVscy9UYXNrJztcbmltcG9ydCB7IFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJztcblxuLyoqXG4gKiBTZXJ2aWNpbyBwYXJhIGludGVncmFyIGVsIFRhc2tOYXZpZ2F0b3IgY29uIGVsIFRhc2tNYW5hZ2VyIGV4aXN0ZW50ZVxuICovXG5leHBvcnQgY2xhc3MgVGFza01hbmFnZXJJbnRlZ3JhdGlvbiB7XG4gICAgcHJpdmF0ZSBwbHVnaW46IFBsdWdpbjtcbiAgICBwcml2YXRlIHRhcmVhc0FQSTogVGFyZWFzQVBJO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgICAgICB0aGlzLnRhcmVhc0FQSSA9IHBsdWdpbi50YXJlYXNBUEk7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIENhcmdhIHRhcmVhcyB2ZW5jaWRhcyBkZXNkZSBlbCBUYXNrTWFuYWdlclxuICAgICAqL1xuICAgIGFzeW5jIGxvYWRPdmVyZHVlVGFza3MoKTogUHJvbWlzZTxUYXNrW10+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghdGhpcy50YXJlYXNBUEkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1RhcmVhc0FQSSBubyBlc3RcdTAwRTEgZGlzcG9uaWJsZScpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gT2J0ZW5lciB0YXJlYXMgdmVuY2lkYXMgYWJpZXJ0YXNcbiAgICAgICAgICAgIGNvbnN0IG92ZXJkdWVUYXNrcyA9IGF3YWl0IHRoaXMudGFyZWFzQVBJLmdldFRhcmVhc1ZlbmNpZGFzQWJpZXJ0YXMoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ29udmVydGlyIGFsIGZvcm1hdG8gVGFzayBkZWwgTmF2aWdhdG9yVGFza1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udmVydFRhcmVhc1RvTmF2aWdhdG9yVGFza3Mob3ZlcmR1ZVRhc2tzKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFsIGNhcmdhciB0YXJlYXMgdmVuY2lkYXM6JywgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIENvbnZpZXJ0ZSB0YXJlYXMgZGVsIGZvcm1hdG8gZGUgVGFyZWFzQVBJIGFsIGZvcm1hdG8gZGUgVGFza05hdmlnYXRvclxuICAgICAqL1xuICAgIHByaXZhdGUgY29udmVydFRhcmVhc1RvTmF2aWdhdG9yVGFza3ModGFyZWFzOiBhbnlbXSk6IFRhc2tbXSB7XG4gICAgICAgIGNvbnN0IHRhc2tzOiBUYXNrW10gPSBbXTtcbiAgICAgICAgXG4gICAgICAgIGZvciAoY29uc3QgdGFyZWEgb2YgdGFyZWFzKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIENyZWFyIHVuIG9iamV0byBMaW5lSW5mbyBiXHUwMEUxc2ljb1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVJbmZvID0ge1xuICAgICAgICAgICAgICAgICAgICBudW1iZXI6IHRhcmVhLmxpbmUgfHwgMCxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogdGFyZWEucmF3VGV4dCB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50YXRpb246IDBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIENyZWFyIHVuYSBpbnN0YW5jaWEgZGUgVGFza1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhc2sgPSBuZXcgVGFzayhcbiAgICAgICAgICAgICAgICAgICAgdGFyZWEuaWQgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgIHRhcmVhLnRleHQgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgIHRhcmVhLnJhd1RleHQgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgIGZhbHNlLCAvLyBBc3VtaW1vcyBxdWUgbm8gZXN0XHUwMEUxIGNvbXBsZXRhZGEgeWEgcXVlIHNvbiB0YXJlYXMgdmVuY2lkYXMgYWJpZXJ0YXNcbiAgICAgICAgICAgICAgICAgICAgdGFyZWEuZmlsZSwgLy8gVEZpbGVcbiAgICAgICAgICAgICAgICAgICAgbGluZUluZm9cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEVzdGFibGVjZXIgcHJvcGllZGFkZXMgYWRpY2lvbmFsZXNcbiAgICAgICAgICAgICAgICB0YXNrLnRpbWluZy5kdWVEYXRlID0gdGFyZWEuZHVlRGF0ZSB8fCAnJztcbiAgICAgICAgICAgICAgICB0YXNrLnRpbWluZy5zY2hlZHVsZWREYXRlID0gdGFyZWEuc2NoZWR1bGVkRGF0ZSB8fCAnJztcbiAgICAgICAgICAgICAgICB0YXNrLnRpbWluZy5zdGFydERhdGUgPSB0YXJlYS5zdGFydERhdGUgfHwgJyc7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQ2xhc2lmaWNhciBzZWdcdTAwRkFuIGNyaXRlcmlvcyBHVERcbiAgICAgICAgICAgICAgICBpZiAodGFyZWEuY29udGV4dHMgJiYgdGFyZWEuY29udGV4dHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0YXNrLnRhZ3MuY29udGV4dHMgPSB0YXJlYS5jb250ZXh0cztcbiAgICAgICAgICAgICAgICAgICAgdGFzay5saXN0VHlwZSA9IFRhc2tMaXN0VHlwZS5ORVhUX0FDVElPTlM7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJlYS5wZW9wbGUgJiYgdGFyZWEucGVvcGxlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGFzay50YWdzLnBlb3BsZSA9IHRhcmVhLnBlb3BsZTtcbiAgICAgICAgICAgICAgICAgICAgdGFzay5saXN0VHlwZSA9IFRhc2tMaXN0VHlwZS5BU1NJR05FRDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXNrLmxpc3RUeXBlID0gVGFza0xpc3RUeXBlLklOQk9YO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBNYXJjYXIgY29tbyB2ZW5jaWRhXG4gICAgICAgICAgICAgICAgaWYgKHRhcmVhLmR1ZURhdGUgfHwgdGFyZWEuc2NoZWR1bGVkRGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0YXNrLmlzT3ZlcmR1ZSA9ICgpID0+IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRhc2tzLnB1c2godGFzayk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFsIGNvbnZlcnRpciB0YXJlYTonLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgLy8gQ29udGludWFyIGNvbiBsYSBzaWd1aWVudGUgdGFyZWFcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRhc2tzO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBBY3R1YWxpemEgZWwgZXN0YWRvIGRlIHVuYSB0YXJlYSBlbiBlbCBzaXN0ZW1hXG4gICAgICovXG4gICAgYXN5bmMgdXBkYXRlVGFza1N0YXR1cyh0YXNrOiBUYXNrLCBjb21wbGV0ZWQ6IGJvb2xlYW4pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghdGhpcy50YXJlYXNBUEkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1RhcmVhc0FQSSBubyBlc3RcdTAwRTEgZGlzcG9uaWJsZScpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVXNhciBlbCBBUEkgZGUgdGFyZWFzIHBhcmEgYWN0dWFsaXphciBlbCBlc3RhZG9cbiAgICAgICAgICAgIC8vIEVzdGUgZXMgdW4gZWplbXBsbywgbGEgaW1wbGVtZW50YWNpXHUwMEYzbiByZWFsIGRlcGVuZGVyXHUwMEUxIGRlIGxhIEFQSSBkaXNwb25pYmxlXG4gICAgICAgICAgICAvLyBhd2FpdCB0aGlzLnRhcmVhc0FQSS51cGRhdGVUYXNrU3RhdHVzKHRhc2suZmlsZS5wYXRoLCB0YXNrLmxpbmVJbmZvLm51bWJlciwgY29tcGxldGVkKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gUG9yIGFob3JhLCBkZXZvbHZlciB0cnVlIGluZGljYW5kbyBcdTAwRTl4aXRvXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFsIGFjdHVhbGl6YXIgZXN0YWRvIGRlIHRhcmVhOicsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBPYnRpZW5lIGVzdGFkXHUwMEVEc3RpY2FzIGRlIHRhcmVhcyBkZXNkZSBlbCBUYXNrTWFuYWdlclxuICAgICAqL1xuICAgIGFzeW5jIGdldFRhc2tTdGF0cygpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnRhcmVhc0FQSSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignVGFyZWFzQVBJIG5vIGVzdFx1MDBFMSBkaXNwb25pYmxlJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBFc3RvIGVzIHVuIHBsYWNlaG9sZGVyLCBUYXJlYXNBUEkgZGViZXJcdTAwRURhIHByb3BvcmNpb25hciB1biBtXHUwMEU5dG9kbyBwYXJhIGVzdG9cbiAgICAgICAgICAgIC8vIGNvbnN0IHN0YXRzID0gYXdhaXQgdGhpcy50YXJlYXNBUEkuZ2V0VGFza1N0YXRzKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFBvciBhaG9yYSwgZGV2b2x2ZXIgdW4gb2JqZXRvIHZhY1x1MDBFRG9cbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFsIG9idGVuZXIgZXN0YWRcdTAwRURzdGljYXMgZGUgdGFyZWFzOicsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgIH1cbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUNBQSxtQkFHYTtBQUpiO0FBQUE7QUFBQTtBQUNBLElBQUFBLG9CQUErQztBQUd4QyxJQUFNLGlCQUFOLGNBQTZCLG9DQUEwQjtBQUFBO0FBQUE7QUFBQSxNQU8xRCxZQUFZQyxNQUFVLFFBQWtCLFFBQWtCLGFBQXFCO0FBQzNFLGNBQU1BLElBQUc7QUFKYjtBQUFBLGFBQVEsaUJBQTBCO0FBSzlCLGFBQUssU0FBUztBQUNkLGFBQUssU0FBUztBQUVkLGFBQUssV0FBVyxPQUFPLE9BQU8sQ0FBQyxLQUFLLE9BQU8sVUFBVTtBQUNqRCxjQUFJLEtBQUssSUFBSSxPQUFPLEtBQUs7QUFDekIsaUJBQU87QUFBQSxRQUNYLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsYUFBSyxlQUFlLFdBQVc7QUFBQSxNQUNuQztBQUFBO0FBQUEsTUFHQSxXQUFxQjtBQUNqQixlQUFPLEtBQUs7QUFBQSxNQUNoQjtBQUFBO0FBQUEsTUFHQSxZQUFZLE1BQXNCO0FBQzlCLGVBQU87QUFBQSxNQUNYO0FBQUE7QUFBQSxNQUdBLFVBQWdCO0FBRVosWUFBSSxDQUFDLEtBQUssZ0JBQWdCO0FBQ3RCLGVBQUssT0FBTyxJQUFJLE1BQU0sZ0NBQTZCLENBQUM7QUFBQSxRQUN4RDtBQUFBLE1BQ0o7QUFBQTtBQUFBLE1BR0EsaUJBQWlCLE1BQWMsS0FBdUM7QUFDbEUsYUFBSyxpQkFBaUI7QUFDdEIsY0FBTSxpQkFBaUIsTUFBTSxHQUFHO0FBQUEsTUFDcEM7QUFBQTtBQUFBLE1BR0EsYUFBYSxNQUFjLEtBQXVDO0FBQzlELGNBQU0sUUFBUSxLQUFLLFNBQVMsSUFBSTtBQUNoQyxhQUFLLFFBQVEsS0FB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QUEsRUFDekI7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUVuQixTQUFLLFdBQVcsT0FBTyxPQUFPLENBQUMsR0FBRyxrQkFBa0IsTUFBTSxLQUFLLFNBQVMsQ0FBQztBQUFBLEVBRTNFO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFFbkIsVUFBTSxLQUFLLFNBQVMsS0FBSyxRQUFRO0FBR2pDLFNBQUssbUJBQW1CO0FBQUEsRUFFMUI7QUFBQSxFQUVBLFFBQVE7QUFDTixRQUNFLENBQUMsS0FBSyxPQUNOLENBQUMsS0FBSyxJQUFJLFFBQVEsZUFBZSxJQUFJLG9CQUFvQixHQUN6RDtBQUNBLGNBQVEsTUFBTSw0Q0FBeUM7QUFDdkQ7QUFBQSxJQUNGO0FBS0EsUUFBSSxRQUFRLEtBQUssSUFBSSxRQUFRLFFBQVEsb0JBQW9CLEVBQUU7QUFDM0QsWUFBUSxNQUFNLG9CQUFvQixtQkFBbUI7QUFDckQsUUFBSSxLQUFLLENBQUM7QUFFVixPQUFHLE9BQU8sTUFBTSxLQUFLLENBQUMsTUFBTSxFQUFFLFFBQVEsTUFBTTtBQUM1QyxPQUFHLFNBQVMsTUFBTSxLQUFLLENBQUMsTUFBTSxFQUFFLFFBQVEsUUFBUTtBQUVoRCxRQUFJLENBQUMsR0FBRyxRQUFRO0FBQ2QsY0FBUTtBQUFBLFFBQ047QUFBQSxNQUNGO0FBQ0E7QUFBQSxJQUNGO0FBQ0EsWUFBUSxJQUFJLHNEQUFzRDtBQUNsRSxXQUFPO0FBQUEsRUFDVDtBQUNGOyIsCiAgIm5hbWVzIjogWyJpbXBvcnRfb2JzaWRpYW4iLCAiYXBwIiwgImltcG9ydF9vYnNpZGlhbiIsICJhcHAiLCAiaW1wb3J0X29ic2lkaWFuIiwgImFwcCIsICJtZW51T3RybyIsICJ0aXBvIiwgInR5cGUiLCAicyIsICJzaW5nbGV0b24iLCAib2Zmc2V0IiwgInMiLCAiZGVmYXVsdFpvbmUiLCAib2Zmc2V0IiwgIm4iLCAibiIsICJvZmZzZXQiLCAicyIsICJuIiwgImZvcm1hdE9mZnNldCIsICJzIiwgIm1hdGNoIiwgIm9mZnNldCIsICJsIiwgIm4iLCAicyIsICJJTlZBTElEIiwgInMiLCAiZSIsICJzIiwgInR5cGUiLCAiY2xvbmUiLCAib2Zmc2V0IiwgIm9yZGVyZWRVbml0cyIsICJJTlZBTElEIiwgImltcG9ydF9vYnNpZGlhbiIsICJhcHAiLCAiYWxpYXMiLCAiZm9sZGVyIiwgInNhbWVOYW1lIiwgIm5hbWVGaWxlIiwgImltcG9ydF9vYnNpZGlhbiIsICJhcHAiLCAib2Zmc2V0IiwgIm1hdGNoIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbml0X1Nlc2lvbkxlY3R1cmEiLCAiX2EiLCAiX2IiLCAiaW1wb3J0X29ic2lkaWFuIiwgIlNlc2lvbkxlY3R1cmEiLCAicmVnaXN0cm8iLCAiaW1wb3J0X29ic2lkaWFuIiwgInF1aXRhckRvYmxlQ29yY2hldGUiLCAibm9ybWFsaXphckFycmF5IiwgInJlZ2lzdHJvIiwgImltcG9ydF9vYnNpZGlhbiIsICJUYXNrIiwgIlRhc2tMaXN0VHlwZSIsICJ0eXBlIiwgImltcG9ydF9vYnNpZGlhbiIsICJFbnRpdHlUeXBlIiwgInR5cGUiLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImFwcCIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiYXBwIiwgIm9mZnNldCIsICJyZWdpc3RlclJpYmJvbk1lbnUiLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJhcHAiLCAicmVnaXN0ZXJDb21tYW5kcyIsICJkZWFjdGl2YXRlQ29tbWFuZHMiLCAicmVnaXN0ZXJSaWJib25NZW51IiwgInJlZ2lzdGVyQ29tbWFuZHMiLCAiZGVhY3RpdmF0ZUNvbW1hbmRzIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJuaXZlbCIsICJpbXBvcnRfb2JzaWRpYW4iLCAibml2ZWwiLCAiaW1wb3J0X29ic2lkaWFuIiwgImNsYXNpZmljYWNpb24iLCAidGFnQ2xhc2lmaWNhY2lvbiIsICJudWV2YUNsYXNpZmljYWNpb24iLCAiZnJvbnRtYXR0ZXIiLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiYXBwIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgInllYXIiLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImFwcCIsICJpbXBvcnRfb2JzaWRpYW4iLCAiYXBwIiwgImltcG9ydF9vYnNpZGlhbiIsICJhcHAiLCAiaW1wb3J0X29ic2lkaWFuIiwgImFwcCIsICJhY3RpdmVSZXNvdXJjZXMiLCAiZHYiLCAiX2EiLCAiZHYiLCAiX2EiLCAiY29pbmNpZGVQb3JQYXRoIiwgImNvaW5jaWRlUG9yTm9tYnJlIiwgImNvaW5jaWRlUG9yVGl0dWxvIiwgImR2IiwgIm1hdGNoIiwgImFob3JhIiwgInRhcmVhcyIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgIllBTUxVcGRhdGVyQVBJIiwgIm9mZnNldCIsICJjbGFzaWZpY2FjaW9uIiwgInRhZ0NsYXNpZmljYWNpb24iLCAibnVldmFDbGFzaWZpY2FjaW9uIiwgImZyb250bWF0dGVyIiwgImltcG9ydF9vYnNpZGlhbiIsICJkdiIsICJtYXRjaCIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgIl9hIiwgInRpdHVsbyIsICJkdiIsICJtYXRjaCIsICJpbXBvcnRfb2JzaWRpYW4iLCAiX2EiLCAibWF0Y2giLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImFwcCIsICJyZWdpc3RlckNvbW1hbmRzIiwgImRlYWN0aXZhdGVDb21tYW5kcyIsICJyZWdpc3RlckNvbW1hbmRzIiwgImRlYWN0aXZhdGVDb21tYW5kcyIsICJpbXBvcnRfb2JzaWRpYW4iLCAiZHYiLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJhcHAiLCAibm93IiwgImltcG9ydF9vYnNpZGlhbiIsICJkdiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiWUFNTFVwZGF0ZXJBUEkiLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJtYXRjaCIsICJ0YXJlYXMiLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJyZWdpc3RlckNvbW1hbmRzIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAicmVnaXN0ZXJDb21tYW5kcyIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAibm93IiwgImltcG9ydF9vYnNpZGlhbiIsICJyZWdpc3RlckNvbW1hbmRzIiwgImRlYWN0aXZhdGVDb21tYW5kcyIsICJyZWdpc3RlckNvbW1hbmRzIiwgImRlYWN0aXZhdGVDb21tYW5kcyIsICJkdiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJtYXRjaCIsICJyZWdpc3RlckNvbW1hbmRzIiwgImRlYWN0aXZhdGVDb21tYW5kcyIsICJyZWdpc3RlckNvbW1hbmRzIiwgImRlYWN0aXZhdGVDb21tYW5kcyIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAibWF0Y2giLCAiaW1wb3J0X29ic2lkaWFuIiwgIm1hdGNoIiwgIlRhc2siLCAibWF0Y2giLCAidHlwZSIsICJjb250YWluZXIiLCAiaW1wb3J0X29ic2lkaWFuIiwgIk5hdmlnYXRpb25VdGlscyIsICJOYXZpZ2F0aW9uVXRpbHMiLCAiY29udGVudCIsICJ0eXBlIiwgImltcG9ydF9vYnNpZGlhbiIsICJUYXNrIiwgIk5hdmlnYXRpb25VdGlscyIsICJEZWJ1Z1V0aWxzIiwgIllBTUxVcGRhdGVyQVBJIl0KfQo=
