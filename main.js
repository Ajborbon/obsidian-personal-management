/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ManagementPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian21 = require("obsidian");

// src/settingsTab.ts
var import_obsidian = require("obsidian");
var PluginMainSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Configuraci\xF3n del plugin de Gesti\xF3n Personal" });
    const tabContainer = containerEl.createDiv({ cls: "tab-container" });
    const tabContentContainer = containerEl.createDiv({ cls: "tab-content-container" });
    const tabTitles = ["Activar M\xF3dulos", "Directorios Subsistemas", "Pesta\xF1a 3"];
    tabTitles.forEach((title, index) => {
      const tabButton = document.createElement("button");
      tabButton.textContent = title;
      tabButton.classList.add("tab-link");
      tabButton.dataset.tab = `tab${index}`;
      tabButton.onclick = () => this.openTab(`tab${index}`);
      tabContainer.appendChild(tabButton);
      const tabContent = document.createElement("div");
      tabContent.id = `tab${index}`;
      tabContent.classList.add("tab-content");
      tabContentContainer.appendChild(tabContent);
      if (index > 0)
        tabContent.style.display = "none";
      if (index === 0) {
        new import_obsidian.Setting(tabContent).setName("Ver Alias en el Status Bar").setDesc("Elige si deseas ver el Aliases de las notas en el Status Bar.").addToggle((toggle) => toggle.setValue(this.plugin.settings.moduloAliasStatusBar).onChange(async (value) => {
          this.plugin.settings.moduloAliasStatusBar = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(tabContent).setName("Activar M\xF3dulo Registro Tiempo").setDesc("Activa o desactiva el m\xF3dulo de registro de tiempo.").addToggle((toggle) => toggle.setValue(this.plugin.settings.moduloRegistroTiempo).onChange(async (value) => {
          this.plugin.settings.moduloRegistroTiempo = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(tabContent).setName("Activar M\xF3dulo Base - Pruebas").setDesc("Activa o desactiva el m\xF3dulo de pruebas.").addToggle((toggle) => toggle.setValue(this.plugin.settings.moduloBase).onChange(async (value) => {
          this.plugin.settings.moduloBase = value;
          await this.plugin.saveSettings();
        }));
      }
      if (index === 1) {
        const toggleCollapse = (event) => {
          const nextElement = event.target.nextElementSibling;
          if (nextElement.style.display === "none") {
            nextElement.style.display = "block";
            event.target.innerHTML = "&#9660; " + event.target.getAttribute("data-title");
          } else {
            nextElement.style.display = "none";
            event.target.innerHTML = "&#9654; " + event.target.getAttribute("data-title");
          }
        };
        const anotacionesTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Anotaciones"' });
        anotacionesTitle.setAttribute("data-title", 'Subsistema de "Anotaciones"');
        anotacionesTitle.style.cursor = "pointer";
        const anotacionesContent = tabContent.createDiv();
        anotacionesContent.style.display = "none";
        anotacionesTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(anotacionesContent).setName("Carpeta de Anotaciones").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n todas las Anotaciones.").addText((text) => text.setValue(this.plugin.settings.folder_Anotaciones).onChange(async (value) => {
          this.plugin.settings.folder_Anotaciones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(anotacionesContent).setName("Indice de Anotaciones").setDesc("Establece la ruta del \xEDndice de las Anotaciones.").addText((text) => text.setValue(this.plugin.settings.indice_Anotaciones).onChange(async (value) => {
          this.plugin.settings.indice_Anotaciones = value;
          await this.plugin.saveSettings();
        }));
        const blogTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Art\xEDculos de Blog"' });
        blogTitle.setAttribute("data-title", 'Subsistema de "Art\xEDculos de Blog"');
        blogTitle.style.cursor = "pointer";
        const blogContent = tabContent.createDiv();
        blogContent.style.display = "none";
        blogTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(blogContent).setName("Carpeta de Art\xEDculos del Blog").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los art\xEDculos del blog.").addText((text) => text.setValue(this.plugin.settings.folder_ABlog).onChange(async (value) => {
          this.plugin.settings.folder_ABlog = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(blogContent).setName("Indice de Art\xEDculos del Blog").setDesc("Establece la ruta del \xEDndice de los art\xEDculos del blog.").addText((text) => text.setValue(this.plugin.settings.indice_ABlog).onChange(async (value) => {
          this.plugin.settings.indice_ABlog = value;
          await this.plugin.saveSettings();
        }));
        const desarrollosTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Desarrollos y c\xF3digos"' });
        desarrollosTitle.setAttribute("data-title", 'Subsistema de "Desarrollos y c\xF3digos"');
        desarrollosTitle.style.cursor = "pointer";
        const desarrollosContent = tabContent.createDiv();
        desarrollosContent.style.display = "none";
        desarrollosTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(desarrollosContent).setName("Carpeta de Desarrollos y C\xF3digos").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los desarrollos y c\xF3digos.").addText((text) => text.setValue(this.plugin.settings.folder_Desarrollos).onChange(async (value) => {
          this.plugin.settings.folder_Desarrollos = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(desarrollosContent).setName("\xCDndice de Desarrollos y C\xF3digos").setDesc("Establece la ruta del \xEDndice de los desarrollos y c\xF3digos.").addText((text) => text.setValue(this.plugin.settings.indice_Desarrollos).onChange(async (value) => {
          this.plugin.settings.indice_Desarrollos = value;
          await this.plugin.saveSettings();
        }));
        const estudioTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Estudio"' });
        estudioTitle.setAttribute("data-title", 'Subsistema de "Estudio"');
        estudioTitle.style.cursor = "pointer";
        const estudioContent = tabContent.createDiv();
        estudioContent.style.display = "none";
        estudioTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(estudioContent).setName("Carpeta de Temas de Estudio").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los temas de estudio.").addText((text) => text.setValue(this.plugin.settings.folder_Estudio).onChange(async (value) => {
          this.plugin.settings.folder_Estudio = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(estudioContent).setName("\xCDndice de Estudio").setDesc("Establece la ruta del \xEDndice de los temas de estudio.").addText((text) => text.setValue(this.plugin.settings.indice_Estudio).onChange(async (value) => {
          this.plugin.settings.indice_Estudio = value;
          await this.plugin.saveSettings();
        }));
        const gtdTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "GTD"' });
        gtdTitle.setAttribute("data-title", 'Subsistema de "GTD"');
        gtdTitle.style.cursor = "pointer";
        const gtdContent = tabContent.createDiv();
        gtdContent.style.display = "none";
        gtdTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(gtdContent).setName("Carpeta de Proyectos GTD").setDesc("Establece la ruta de la carpeta para proyectos GTD.").addText((text) => text.setValue(this.plugin.settings.folder_ProyectosGTD).onChange(async (value) => {
          this.plugin.settings.folder_ProyectosGTD = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(gtdContent).setName("\xCDndice de Proyectos GTD").setDesc("Establece la ruta del \xEDndice para proyectos GTD.").addText((text) => text.setValue(this.plugin.settings.indice_ProyectosGTD).onChange(async (value) => {
          this.plugin.settings.indice_ProyectosGTD = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(gtdContent).setName("Carpeta de Revisiones Semanales GTD").setDesc("Establece la ruta de la carpeta para las revisiones semanales GTD.").addText((text) => text.setValue(this.plugin.settings.folder_RSGTD).onChange(async (value) => {
          this.plugin.settings.folder_RSGTD = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(gtdContent).setName("\xCDndice de Revisiones Semanales GTD").setDesc("Establece la ruta del \xEDndice para las revisiones semanales GTD.").addText((text) => text.setValue(this.plugin.settings.indice_RSGTD).onChange(async (value) => {
          this.plugin.settings.indice_RSGTD = value;
          await this.plugin.saveSettings();
        }));
        const lecturaTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Lectura"' });
        lecturaTitle.setAttribute("data-title", 'Subsistema de "Lectura"');
        lecturaTitle.style.cursor = "pointer";
        const lecturaContent = tabContent.createDiv();
        lecturaContent.style.display = "none";
        lecturaTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(lecturaContent).setName("Carpeta de Sesiones de Lectura").setDesc("Establece la ruta de la carpeta para las sesiones de lectura.").addText((text) => text.setValue(this.plugin.settings.folder_LecturaSesiones).onChange(async (value) => {
          this.plugin.settings.folder_LecturaSesiones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(lecturaContent).setName("\xCDndice de Sesiones de Lectura").setDesc("Establece la ruta del \xEDndice para las sesiones de lectura.").addText((text) => text.setValue(this.plugin.settings.indice_LecturaSesiones).onChange(async (value) => {
          this.plugin.settings.indice_LecturaSesiones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(lecturaContent).setName("Carpeta de Res\xFAmenes de Libros").setDesc("Establece la ruta de la carpeta para los res\xFAmenes de libros.").addText((text) => text.setValue(this.plugin.settings.folder_LecturaResumenes).onChange(async (value) => {
          this.plugin.settings.folder_LecturaResumenes = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(lecturaContent).setName("\xCDndice de Res\xFAmenes de Libros").setDesc("Establece la ruta del \xEDndice para los res\xFAmenes de libros.").addText((text) => text.setValue(this.plugin.settings.indice_LecturaResumenes).onChange(async (value) => {
          this.plugin.settings.indice_LecturaResumenes = value;
          await this.plugin.saveSettings();
        }));
        const mentoriasTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Mentor\xEDas"' });
        mentoriasTitle.setAttribute("data-title", 'Subsistema de "Mentor\xEDas"');
        mentoriasTitle.style.cursor = "pointer";
        const mentoriasContent = tabContent.createDiv();
        mentoriasContent.style.display = "none";
        mentoriasTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(mentoriasContent).setName("Carpeta de Sesiones de Mentor\xEDa").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las sesiones de mentor\xEDa.").addText((text) => text.setValue(this.plugin.settings.folder_Mentorias).onChange(async (value) => {
          this.plugin.settings.folder_Mentorias = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(mentoriasContent).setName("\xCDndice de Mentor\xEDas").setDesc("Establece la ruta del \xEDndice de las sesiones de mentor\xEDa.").addText((text) => text.setValue(this.plugin.settings.indice_Mentorias).onChange(async (value) => {
          this.plugin.settings.indice_Mentorias = value;
          await this.plugin.saveSettings();
        }));
        const mercadoTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Mercado"' });
        mercadoTitle.setAttribute("data-title", 'Subsistema de "Mercado"');
        mercadoTitle.style.cursor = "pointer";
        const mercadoContent = tabContent.createDiv();
        mercadoContent.style.display = "none";
        mercadoTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(mercadoContent).setName("Carpeta de Listados de Mercado").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las listas de mercado.").addText((text) => text.setValue(this.plugin.settings.folder_Mercado).onChange(async (value) => {
          this.plugin.settings.folder_Mercado = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(mercadoContent).setName("\xCDndice de listados de mercado").setDesc("Establece la ruta del \xEDndice de los listados de mercado.").addText((text) => text.setValue(this.plugin.settings.indice_Mercado).onChange(async (value) => {
          this.plugin.settings.indice_Mercado = value;
          await this.plugin.saveSettings();
        }));
        const modulosTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "M\xF3dulos Sistema Gesti\xF3n"' });
        modulosTitle.setAttribute("data-title", 'Subsistema de "M\xF3dulos Sistema Gesti\xF3n"');
        modulosTitle.style.cursor = "pointer";
        const modulosContent = tabContent.createDiv();
        modulosContent.style.display = "none";
        modulosTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(modulosContent).setName("Carpeta de Modulos del Sistema de Gestion").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los m\xF3dulos del Sistema de Gesti\xF3n.").addText((text) => text.setValue(this.plugin.settings.folder_ModulosSistema).onChange(async (value) => {
          this.plugin.settings.folder_ModulosSistema = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(modulosContent).setName("\xCDndice de los Modulos del sistema de Gestion").setDesc("Establece la ruta del \xEDndice de los M\xF3dulos del sistema de Gesti\xF3n.").addText((text) => text.setValue(this.plugin.settings.indice_ModulosSistema).onChange(async (value) => {
          this.plugin.settings.indice_ModulosSistema = value;
          await this.plugin.saveSettings();
        }));
        const pagosTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Pagos"' });
        pagosTitle.setAttribute("data-title", 'Subsistema de "Pagos"');
        pagosTitle.style.cursor = "pointer";
        const pagosContent = tabContent.createDiv();
        pagosContent.style.display = "none";
        pagosTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(pagosContent).setName("Carpeta de Modulos del Sistema de Pagos").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los comprobantes de pagos.").addText((text) => text.setValue(this.plugin.settings.folder_Pagos).onChange(async (value) => {
          this.plugin.settings.folder_Pagos = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(pagosContent).setName("\xCDndice de Pagos").setDesc("Establece la ruta del \xEDndice de Pagos.").addText((text) => text.setValue(this.plugin.settings.indice_Pagos).onChange(async (value) => {
          this.plugin.settings.indice_Pagos = value;
          await this.plugin.saveSettings();
        }));
        const presentacionesTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Presentaciones"' });
        presentacionesTitle.setAttribute("data-title", 'Subsistema de "Presentaciones"');
        presentacionesTitle.style.cursor = "pointer";
        const presentacionesContent = tabContent.createDiv();
        presentacionesContent.style.display = "none";
        presentacionesTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(presentacionesContent).setName("Carpeta de Notas de Presentaciones").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las notas de presentaciones.").addText((text) => text.setValue(this.plugin.settings.folder_Presentaciones).onChange(async (value) => {
          this.plugin.settings.folder_Presentaciones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(presentacionesContent).setName("\xCDndice de Presentaciones").setDesc("Establece la ruta del \xEDndice de presentaciones.").addText((text) => text.setValue(this.plugin.settings.indice_Presentaciones).onChange(async (value) => {
          this.plugin.settings.indice_Presentaciones = value;
          await this.plugin.saveSettings();
        }));
        const proyectosQTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Proyectos de Q"' });
        proyectosQTitle.setAttribute("data-title", 'Subsistema de "Proyectos de Q"');
        proyectosQTitle.style.cursor = "pointer";
        const proyectosQContent = tabContent.createDiv();
        proyectosQContent.style.display = "none";
        proyectosQTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(proyectosQContent).setName("Carpeta de Proyectos de Q").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los proyectos de Q.").addText((text) => text.setValue(this.plugin.settings.folder_ProyectosQ).onChange(async (value) => {
          this.plugin.settings.folder_ProyectosQ = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(proyectosQContent).setName("\xCDndice de Proyectos de Q").setDesc("Establece la ruta del \xEDndice de proyectos de Q.").addText((text) => text.setValue(this.plugin.settings.indice_ProyectosQ).onChange(async (value) => {
          this.plugin.settings.indice_ProyectosQ = value;
          await this.plugin.saveSettings();
        }));
        const publicacionesTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Publicaciones"' });
        publicacionesTitle.setAttribute("data-title", 'Subsistema de "Publicaciones"');
        publicacionesTitle.style.cursor = "pointer";
        const publicacionesContent = tabContent.createDiv();
        publicacionesContent.style.display = "none";
        publicacionesTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(publicacionesContent).setName("Carpeta de Piezas de Publicaciones").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las piezas de publicaciones.").addText((text) => text.setValue(this.plugin.settings.folder_Publicaciones).onChange(async (value) => {
          this.plugin.settings.folder_Publicaciones = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(publicacionesContent).setName("\xCDndice de Publicaciones").setDesc("Establece la ruta del \xEDndice de publicaciones.").addText((text) => text.setValue(this.plugin.settings.indice_Publicaciones).onChange(async (value) => {
          this.plugin.settings.indice_Publicaciones = value;
          await this.plugin.saveSettings();
        }));
        const recetasTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Recetas"' });
        recetasTitle.setAttribute("data-title", 'Subsistema de "Recetas"');
        recetasTitle.style.cursor = "pointer";
        const recetasContent = tabContent.createDiv();
        recetasContent.style.display = "none";
        recetasTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(recetasContent).setName("Carpeta de Recetas").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n las recetas.").addText((text) => text.setValue(this.plugin.settings.folder_Recetas).onChange(async (value) => {
          this.plugin.settings.folder_Recetas = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(recetasContent).setName("\xCDndice de Recetas").setDesc("Establece la ruta del \xEDndice de recetas.").addText((text) => text.setValue(this.plugin.settings.indice_Recetas).onChange(async (value) => {
          this.plugin.settings.indice_Recetas = value;
          await this.plugin.saveSettings();
        }));
        const recursosRecurrentesTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Recursos Recurrentes"' });
        recursosRecurrentesTitle.setAttribute("data-title", 'Subsistema de "Recursos Recurrentes"');
        recursosRecurrentesTitle.style.cursor = "pointer";
        const recursosRecurrentesContent = tabContent.createDiv();
        recursosRecurrentesContent.style.display = "none";
        recursosRecurrentesTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(recursosRecurrentesContent).setName("Carpeta de Recursos Recurrentes").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los recursos recurrentes.").addText((text) => text.setValue(this.plugin.settings.folder_RecursosRecurrentes).onChange(async (value) => {
          this.plugin.settings.folder_RecursosRecurrentes = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(recursosRecurrentesContent).setName("\xCDndice de Recursos Recurrentes").setDesc("Establece la ruta del \xEDndice de recursos recurrentes.").addText((text) => text.setValue(this.plugin.settings.indice_RecursosRecurrentes).onChange(async (value) => {
          this.plugin.settings.indice_RecursosRecurrentes = value;
          await this.plugin.saveSettings();
        }));
        const registroTiempoTitle = tabContent.createEl("p", { text: '\u25B6 Subsistema de "Registro Tiempo"' });
        registroTiempoTitle.setAttribute("data-title", 'Subsistema de "Registro Tiempo"');
        registroTiempoTitle.style.cursor = "pointer";
        const registroTiempoContent = tabContent.createDiv();
        registroTiempoContent.style.display = "none";
        registroTiempoTitle.onclick = toggleCollapse;
        new import_obsidian.Setting(registroTiempoContent).setName("Carpeta de Registros de Tiempo").setDesc("Establece la ruta de la carpeta donde se guardar\xE1n los registros de tiempo.").addText((text) => text.setValue(this.plugin.settings.folder_RegistroTiempo).onChange(async (value) => {
          this.plugin.settings.folder_RegistroTiempo = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(registroTiempoContent).setName("\xCDndice de Registro de Tiempo").setDesc("Establece la ruta del \xEDndice de registros de tiempo.").addText((text) => text.setValue(this.plugin.settings.indice_RegistroTiempo).onChange(async (value) => {
          this.plugin.settings.indice_RegistroTiempo = value;
          await this.plugin.saveSettings();
        }));
      }
      if (index === 2) {
        const dateLabel = tabContent.createEl("label");
        dateLabel.textContent = "Fecha";
        const dateInput = tabContent.createEl("input");
        dateInput.type = "datetime-local";
      }
    });
    containerEl.createEl("style", {
      text: `
                .tab-content { display: none; padding-top: 20px; } // A\xF1adido padding-top para el espacio
                .tab-content.active { display: block; }
                .tab-link { cursor: pointer; padding: 5px 10px; margin-right: 5px; background: #f0f0f0; border: 1px solid #ddd; border-radius: 5px; }
                .tab-link.active { background: #e0e0e0; }
                .setting-item { margin-bottom: 10px; }
            `
    });
    this.openTab = (tabName) => {
      document.querySelectorAll(".tab-content").forEach((content) => {
        content.style.display = "none";
        content.classList.remove("active");
      });
      document.querySelectorAll(".tab-link").forEach((link) => {
        link.classList.remove("active");
      });
      const activeTabContent = document.getElementById(tabName);
      const activeTabLink = document.querySelector(`[data-tab="${tabName}"]`);
      if (activeTabContent)
        activeTabContent.style.display = "block";
      if (activeTabLink)
        activeTabLink.classList.add("active");
    };
    this.openTab("tab0");
  }
  openTab(arg0) {
    throw new Error("Method not implemented.");
  }
};

// src/modules/moduloBase/index.ts
var import_obsidian5 = require("obsidian");

// src/modules/moduloBase/utils/crearCarpeta.ts
async function crearCarpeta(rutaCarpeta) {
  try {
    debugger;
    const carpetaExistente = app.vault.getAbstractFileByPath(rutaCarpeta);
    if (carpetaExistente) {
      console.log(`La carpeta '${rutaCarpeta}' ya existe.`);
      return;
    }
    debugger;
    await app.vault.createFolder(rutaCarpeta);
    console.log(`Carpeta '${rutaCarpeta}' creada exitosamente.`);
  } catch (error) {
    console.error(`Error al crear la carpeta '${rutaCarpeta}':`, error);
  }
}

// src/plantillas/Anotaciones/Plt - Anotaciones.ts
var plantilla = `<%*
debugger
const dv = this.DataviewAPI;
const {update} = this.app.plugins.plugins["metaedit"].api
const fileCampos =dv.page("Estructura/Campos Sistema Gestion/Campos Sistema Central")
let clasificacionAX = fileCampos.tituloClasificacionAX
let tagsClasificacionAX = fileCampos.tagsClasificacionAX
let activo = app.workspace.getActiveFile();
let idAux = dv.pages('"Anotaciones/Notas"').file.frontmatter.sort(b=> b.id , 'desc').id;

// Comprueba si idAux tiene al menos un elemento y asigna a 'id' el siguiente valor en la secuencia o 1 si no hay elementos.
let id = idAux.length > 0 ? (idAux[0] + 1) : 1;

let newName, titulo, existe, asunto, nombre
	titulo = await tp.system.prompt("\xBFSobre que es esta anotaci\xF3n?", "A-"+ id, true)
	// Verificar si el usuario presion\xF3 Esc.
    if (titulo === null) {
    new Notice("Creaci\xF3n de nota cancelada por el usuario.");
    return; // Termina la ejecuci\xF3n de la funci\xF3n aqu\xED.
	}
	if (activo != null){ 
		nombre = activo.basename;
		const nota = app.metadataCache.getFileCache(activo); 
		asunto = await tp.system.suggester(["Si","No"],[true, false], true, nombre + " es origen de " + titulo + "?")
		}
	newName = "Anotaciones/Notas/A - " + id  
await tp.file.move(newName);
let clasificacion, descripcion, estado
let tagClasificacion = await tp.system.suggester(clasificacionAX, tagsClasificacionAX, false, "\xBFClasificar\xEDas esta nota bajo alguna de las siguientes categor\xEDas?")
	// Verificar si el usuario presion\xF3 Esc.
    if (tagClasificacion === null) {
    new Notice("Creaci\xF3n de nota cancelada por el usuario.");
    return; // Termina la ejecuci\xF3n de la funci\xF3n aqu\xED.
	}
let nuevaClasificacion = false
if(tagClasificacion=="Nuevo"){
	clasificacion = await tp.system.prompt("\xBFCual es el nombre de la nueva clasificaci\xF3n que vas a ingresar?", "MiClasificaci\xF3n", true)
	// Verificar si el usuario presion\xF3 Esc.
    if (clasificacion === null) {
    new Notice("Creaci\xF3n de nota cancelada por el usuario.");
    return; // Termina la ejecuci\xF3n de la funci\xF3n aqu\xED.
	}
	tagClasificacion = await tp.system.prompt("\xBFCual es el tag que utilizaras para " + clasificacion + "?. No utilices espacios en la definici\xF3n del tag.", "nuevoTag", true)
	// Verificar si el usuario presion\xF3 Esc.
    if (tagClasificacion === null) {
    new Notice("Creaci\xF3n de nota cancelada por el usuario.");
    return; // Termina la ejecuci\xF3n de la funci\xF3n aqu\xED.
	}
	nuevaClasificacion = true
// --> Validar que el nombre del grupo no sea igual al nombre de ninguna area de Vida.
}else if(tagClasificacion=="Ninguna"){
	tagClasificacion = ""
	clasificacion = ""	
}else {
	let indice = tagsClasificacionAX.indexOf(tagClasificacion)
	clasificacion = clasificacionAX[indice]
}
if (nuevaClasificacion) {
    let nuevoC = clasificacionAX.pop(); // \xDAltima clasificaci\xF3n
    let ningunoC = clasificacionAX.pop(); // Pen\xFAltima clasificaci\xF3n

    clasificacionAX.push(clasificacion);
    clasificacionAX.push(ningunoC);
    clasificacionAX.push(nuevoC);

    await update("tituloClasificacionAX", clasificacionAX, fileCampos.file.path);
	await new Promise(resolve => setTimeout(resolve, 1000));

    let nuevoTagC = tagsClasificacionAX.pop(); // \xDAltimo tag
    let ningunoTagC = tagsClasificacionAX.pop(); // Pen\xFAltimo tag

    tagsClasificacionAX.push(tagClasificacion);
    tagsClasificacionAX.push(ningunoTagC);
    tagsClasificacionAX.push(nuevoTagC);

    await update("tagsClasificacionAX", tagsClasificacionAX, fileCampos.file.path);
}


if (tagClasificacion != ""){
tagClasificacion = "cl/" + tagClasificacion 
}
if (clasificacion == "Feedback Semanal"){
	descripcion = []
	let aux = 0
	let otra
	do{
		descripcion[aux] = await tp.system.prompt("Escribe tu feedback de "+ titulo, "P" + aux, false, true)
		aux += 1
		otra = await tp.system.suggester(["Si","No"],[true,false], true, "\xBFAgregar otro parrafo?" )
	}while(otra)
}else{
	descripcion = await tp.system.prompt("\xBFQuieres agregar una descripci\xF3n?", " " + titulo, false, true )
	// Verificar si el usuario presion\xF3 Esc.
    if (descripcion === null) {
    new Notice("Creaci\xF3n de nota cancelada por el usuario.");
    return; // Termina la ejecuci\xF3n de la funci\xF3n aqu\xED.
	}
}
estado = await tp.system.suggester(["\u{1F535} -> Completado - Informaci\xF3n", "\u{1F7E2} -> Finalizado","\u{1F7E1} -> En ejecuci\xF3n", "\u{1F534} -> Detenido"],["\u{1F535}", "\u{1F7E2}","\u{1F7E1}", "\u{1F534}"], false, "Cual es el estado de esta anotaci\xF3n?")
// Verificar si el usuario presion\xF3 Esc.
    if (estado === null) {
    new Notice("Creaci\xF3n de nota cancelada por el usuario.");
    return; // Termina la ejecuci\xF3n de la funci\xF3n aqu\xED.
	}
-%>
---
tipo: Anotaci\xF3n
idq: 6
id: <% id %> 
idManual:
aliases: 
- <%titulo%>
descripcion: <%*if (clasificacion != "Feedback Semanal"){%> <%descripcion%><%* }else{%>>-  <%* for (let a=0; a<descripcion.length;a++){%>
   <%descripcion[a]%> 
<%*}}%>
tema: <%clasificacion%> 
estado: <% estado %> 
fecha: <% tp.date.now("YYYY-MM-DD dddd HH:mm") %>
hora: <% tp.date.now("HHmm", 0,)%>
valor:  
tags: <%tagClasificacion%> 
asunto: <%* if(asunto){ %> 
- "[[<%nombre%>]]" <%*}%>
related:
---
# \`VIEW[{aliases}]\` 
>[!info]- Descripcion
>\`VIEW[{descripcion}]\`
> 

Plantilla oculta
<%* if(clasificacion=="Meditaciones de alteraci\xF3n de futuro"){ -%>
## Objetivo 

## Evento imaginario que seguir\xEDa al cumplimiento del deseo

### Que es lo que siento?

### Detalles para la visualizaci\xF3n.
## Premisas que alimenten el deseo cumplido
_Frases que apoyan mi objetivo_
## Tareas de seguimiento de la meditaci\xF3n
- [ ] Total de meditaciones de <% titulo %> 
	- [ ] Meditaci\xF3n de <% titulo %> #cx/Meditacion \u{1F501} every day when done \u{1F4C5} <% tp.date.now("YYYY-MM-DD") %>
<%*}else if(clasificacion =="Feedback Semanal"){-%>
## Feedback
\`\`\`dataviewjs
dv.paragraph(dv.current().descripcion)
\`\`\`
<%*}else if(clasificacion =="Video Youtube"){-%>
## Video

> [!tip]- Como crear el link del video?
>Estamos utilizando el plugin TimeStamp Notes. Para crear el link aqu\xED, solamente debes pegar el link de youtube, seleccionarlo y utilizar el comando Open Video Player, o el shortcut  \u2325 ^ O
### Timestamps
> [!important]- Crear los timestamps del video
> Para crear los timestamps del video, en el momento en el que llegues al video, solo debes pulsar el shortcut \u2325 ^ 0, o buscar el comando Insert Timestamp. 
 

## Comentarios Personales

## Hitos del video.

## Resumen IA

<%*}else if(clasificacion =="Grupo de Hojas de Trabajo"){-%>

## [[Comentarios a las plantillas#Temas relacionados a este grupo de hojas de trabajo|Temas relacionados a este grupo de hojas de trabajo:]]
\`\`\`dataviewjs
const {crearAx} = customJS
let hijos = dv.pages().filter(b=> dv.func.contains(b.asunto, dv.current().file.link))
let totalHijos = 
dv.table(["Tema","Tipo","Fecha Modificaci\xF3n", "Pendientes","Hijos"], hijos.map(b=> [b.file.link, b.tema, b.fecha, b.file.tasks.filter(b=> b.status == ' ' || b.status == '/').length, crearAx.paginasHijos(dv,b).length-1]))
\`\`\`


<%*}%>


# Fin
- [/] Finalizado el desarrollo de Anotaci\xF3n <%id%> #cx/Computador/OrganizarNotas  
Estado de la nota:  \`INPUT[estadoNota][:estado]\`
\`\`\`dataviewjs
const {callDV} = customJS
callDV.CambiarTituloDescripcion(dv)
\`\`\`
---
\`\`\`dataviewjs
const {callDV} = customJS
callDV.CarruselAnotaciones(dv)
\`\`\`
\`\`\`dataviewjs
const {callDV} = customJS
callDV.BotonesStandar(dv)
\`\`\`

`;

// src/modules/moduloBase/utils/crearPlantilla.ts
var import_obsidian2 = require("obsidian");
async function crearPlantilla(contenido) {
  const folder = "Plantillas";
  let filename = "Archivo De Plantilla";
  let pathTemporal = folder + "/" + filename + ".md";
  const archivoCreado = await app.vault.create(pathTemporal, contenido);
  return archivoCreado;
}

// src/modules/moduloBase/commands.ts
var import_obsidian4 = require("obsidian");

// src/modules/moduloBase/utils/createNoteFromTemplate.ts
var import_obsidian3 = require("obsidian");
async function createNoteFromTemplate(plugin, template, folder, filename, openNewNote = true) {
  if (!plugin || !plugin.app.plugins.enabledPlugins.has("templater-obsidian")) {
    console.error("El plugin Templater no est\xE1 habilitado.");
    return;
  }
  const templaterPlugin = plugin.app.plugins.plugins["templater-obsidian"];
  const tp = templaterPlugin.templater.current_functions_object;
  if (!tp) {
    console.error("No se pudo acceder al objeto de funciones actuales de Templater.");
    return;
  }
  debugger;
  let templateFile = tp.file.find_tfile(template);
  try {
    const newNote = await tp.file.create_new(templateFile, filename, openNewNote, folder);
    return newNote;
  } catch (error) {
    console.error("Error al crear la nota desde la plantilla:", error);
    return;
  }
}

// src/modules/moduloBase/commands.ts
function registerCommands(plugin) {
  const comando1 = plugin.addCommand({
    id: "Creacion-Carpeta",
    name: "Creaci\xF3n de Carpeta",
    callback: async () => {
      debugger;
      await crearCarpeta("Mi Carpeta de plugin");
    }
  });
  plugin.registeredCommandIdsMB.push(comando1.id);
  const comando2 = plugin.addCommand({
    id: "crear-template",
    name: "Crear un archivo template",
    callback: async () => {
      const archivo = await crearPlantilla(plantilla);
      if (!archivo) {
        new Notice("No se pudo crear el archivo.");
        return;
      }
    }
  });
  plugin.registeredCommandIdsMB.push(comando2.id);
  const comando3 = plugin.addCommand({
    id: "crear-archivo-template",
    name: "Crear archivo desde template",
    callback: async () => {
      const pluginId = "templater-obsidian";
      const isPluginInstalled = plugin.app.plugins.enabledPlugins.has(pluginId);
      let template = "Plantillas/Anotaciones/Plt - Anotaciones.md";
      let folderObj = plugin.app.vault.getAbstractFileByPath("Inbox");
      if (!(folderObj instanceof import_obsidian4.TFolder)) {
        new Notice("La carpeta especificada no existe o no es una carpeta.");
        return;
      }
      let fileName = "toDefine";
      let openNote = true;
      debugger;
      const archivo = await createNoteFromTemplate(plugin, template, folderObj, fileName, openNote);
      if (!archivo) {
        new Notice("No se pudo crear el archivo.");
        return;
      }
    }
  });
  plugin.registeredCommandIdsMB.push(comando3.id);
}
function deactivateCommands(plugin) {
  if (!plugin.registeredCommandIdsMB)
    return;
  plugin.registeredCommandIdsMB.forEach((commandId) => {
    const command = plugin.app.commands.commands[commandId];
    if (command) {
      command.callback = () => new Notice("Este comando ha sido desactivado.");
    }
  });
}

// src/modules/moduloBase/index.ts
var ModuloBase = class {
  constructor(plugin) {
    this.moduloBase = null;
    this.plugin = plugin;
  }
  activate() {
    if (this.moduloBase)
      return;
    registerCommands(this.plugin);
  }
  deactivate() {
    if (!this.statusBar)
      return;
    deactivateCommands(this.plugin);
  }
};

// src/modules/M_busquedaAvanzada/activadores.ts
var import_obsidian9 = require("obsidian");

// src/modules/M_busquedaAvanzada/ui/ribbonButton.ts
var import_obsidian8 = require("obsidian");

// src/modules/M_busquedaAvanzada/ui/modal.ts
var import_obsidian7 = require("obsidian");

// src/modules/M_busquedaAvanzada/search/FuzzyNoteSuggester.ts
var import_obsidian6 = require("obsidian");

// src/modules/moduloAliasStatusBar/statusBar.ts
var import_obsidian10 = require("obsidian");
var StatusBarExtension = class {
  constructor(plugin) {
    this.statusBar = null;
    this.plugin = plugin;
  }
  activate() {
    if (this.statusBar)
      return;
    this.statusBar = this.plugin.addStatusBarItem();
    this.updateStatusBar();
    this.plugin.registerEvent(
      this.plugin.app.workspace.on("file-open", (file) => {
        this.updateStatusBar(file);
      })
    );
  }
  deactivate() {
    if (!this.statusBar)
      return;
    this.statusBar.remove();
    this.statusBar = null;
  }
  updateStatusBar(file) {
    var _a, _b;
    const currentFile = file || this.plugin.app.workspace.getActiveFile();
    if (!currentFile || !this.statusBar) {
      (_a = this.statusBar) == null ? void 0 : _a.setText("");
      return;
    }
    const fileCache = this.plugin.app.metadataCache.getFileCache(currentFile);
    const aliases = ((_b = fileCache.frontmatter) == null ? void 0 : _b.aliases) || [];
    this.statusBar.setText(aliases.length > 0 ? `Alias: ${aliases[0]}` : "No Alias");
  }
};

// src/modules/moduloRegistroTiempo/index.ts
var import_obsidian16 = require("obsidian");

// src/modules/moduloRegistroTiempo/ribbonMenu.ts
var import_obsidian13 = require("obsidian");

// src/modules/moduloRegistroTiempo/utils.ts
var import_obsidian12 = require("obsidian");

// src/modules/modales/seleccionModal.ts
var import_obsidian11 = require("obsidian");
var SeleccionModal = class extends import_obsidian11.FuzzySuggestModal {
  // Flag para determinar si se ha hecho una selección.
  // Constructor de la clase.
  constructor(app2, titles, values, placeholder) {
    super(app2);
    // Objeto para mapear títulos a valores.
    this.seleccionHecha = false;
    this.titles = titles;
    this.values = values;
    this.valueMap = titles.reduce((acc, title, index) => {
      acc[title] = values[index];
      return acc;
    }, {});
    this.setPlaceholder(placeholder);
  }
  // Método para obtener los ítems (títulos) que se mostrarán en el modal.
  getItems() {
    return this.titles;
  }
  // Método para obtener el texto que se mostrará para cada ítem en el modal.
  getItemText(item) {
    return item;
  }
  // Método que se llama al cerrar el modal.
  onClose() {
    if (!this.seleccionHecha) {
      this.reject(new Error("Modal cerrado sin selecci\xF3n"));
    }
  }
  // Método para manejar la selección de un ítem.
  selectSuggestion(item, evt) {
    this.seleccionHecha = true;
    super.selectSuggestion(item, evt);
  }
  // Método que se llama al elegir un ítem, donde se resuelve la promesa con el valor asociado al ítem seleccionado.
  onChooseItem(item, evt) {
    const value = this.valueMap[item];
    this.resolve(value);
  }
  // Método para abrir el modal y esperar a que el usuario haga una selección, devolviendo una promesa con el valor seleccionado.
  openAndAwaitSelection() {
    return new Promise((resolve, reject) => {
      this.resolve = resolve;
      this.reject = reject;
      this.open();
    });
  }
};

// src/modules/moduloRegistroTiempo/utils.ts
async function cumpleCondicion(app2) {
  var _a;
  const files = app2.vault.getMarkdownFiles();
  for (let file of files) {
    if (file.path.startsWith("Estructura/Registro Tiempo")) {
      const metadata = app2.metadataCache.getFileCache(file);
      if (((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.estado) === "\u{1F7E2}") {
        return true;
      }
    }
  }
  return false;
}
async function buscarRegistrosActivos(app2) {
  var _a;
  const files = app2.vault.getMarkdownFiles();
  for (let file of files) {
    if (file.path.startsWith("Subsistemas/Registro Tiempo/Registros")) {
      const metadata = app2.metadataCache.getFileCache(file);
      if (((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.estado) === "\u{1F7E2}") {
        return file;
      }
    }
  }
  return;
}
async function crearObjetoRegistro(plugin) {
  const activo = plugin.app.workspace.getActiveFile();
  if (!activo) {
    console.error("No hay un archivo activo para la creaci\xF3n de registro de tiempo. Se descarta para la creaci\xF3n de registro de tiempo.");
    return null;
  }
  const folder = plugin.settings.folder_RegistroTiempo;
  const indice = plugin.settings.indice_RegistroTiempo;
  let maxId = 0;
  const files = app.vault.getMarkdownFiles();
  const registrosExistentes = files.filter((file) => file.path.startsWith(folder));
  registrosExistentes.forEach((file) => {
    var _a;
    const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    if (metadata && metadata.id && !isNaN(metadata.id)) {
      const id = parseInt(metadata.id);
      if (id > maxId)
        maxId = id;
    }
  });
  const nextId = maxId + 1;
  const fechaCompleta = formatearFecha(/* @__PURE__ */ new Date());
  return {
    activo,
    nombre: activo.basename,
    folder,
    indice,
    id: nextId,
    fecha: fechaCompleta,
    indice_DVJS: `"${indice}"`
  };
}
function formatearFecha(fecha) {
  const offset = fecha.getTimezoneOffset() * 6e4;
  const fechaLocal = new Date(fecha.getTime() - offset);
  const fechaFormato = fechaLocal.toISOString().split("T")[0];
  const dias = ["Domingo", "Lunes", "Martes", "Mi\xE9rcoles", "Jueves", "Viernes", "S\xE1bado"];
  const diaSemana = dias[fecha.getDay()];
  const horaFormato = fecha.toTimeString().split(" ")[0].substring(0, 5);
  return `${fechaFormato} ${diaSemana} ${horaFormato}`;
}
async function verificarTareasActivas(registro, app2) {
  var _a;
  const files = app2.vault.getMarkdownFiles();
  const tareasActivas = [];
  for (let file of files) {
    if (file.path.startsWith(registro.folder)) {
      const metadata = (_a = app2.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if ((metadata == null ? void 0 : metadata.estado) === "\u{1F7E2}") {
        tareasActivas.push({ file, aliases: metadata.aliases || file.basename });
      }
    }
  }
  if (tareasActivas.length === 1) {
    const tareaActiva = tareasActivas[0];
    debugger;
    const deseaDetener = await mostrarSugerencia(`La tarea ${tareaActiva.aliases} est\xE1 corriendo. \xBFDesea detenerla?`);
    if (deseaDetener === void 0) {
      new import_obsidian12.Notice(`Creaci\xF3n de registro cancelado por el usuario.`);
      registro.detener = true;
      return;
    }
    if (deseaDetener) {
      await detenerTarea(tareaActiva, app2);
      registro.detener = false;
    } else {
      new import_obsidian12.Notice(`La tarea ${tareaActiva.aliases} seguir\xE1 registr\xE1ndose.`);
      registro.detener = true;
      return;
    }
  } else if (tareasActivas.length > 1) {
    new import_obsidian12.Notice("Hay un error con la cantidad de tareas corriendo en este momento.");
    registro.detener = true;
  } else {
    console.log("No hay m\xE1s tareas corriendo.");
    registro.detener = false;
  }
}
function mostrarSugerencia(mensaje) {
  return new Promise((resolve) => {
    let seleccionado = false;
    const modal = new import_obsidian12.Modal(app);
    modal.contentEl.createEl("h1", { text: mensaje });
    const buttonsContainer = modal.contentEl.createEl("div");
    const yesButton = buttonsContainer.createEl("button", {
      text: "S\xED"
    });
    yesButton.addEventListener("click", () => {
      seleccionado = true;
      modal.close();
      resolve(true);
    });
    const noButton = buttonsContainer.createEl("button", {
      text: "No"
    });
    noButton.addEventListener("click", () => {
      seleccionado = true;
      modal.close();
      resolve(false);
    });
    modal.onClose = () => {
      if (!seleccionado) {
        resolve(void 0);
      }
    };
    modal.open();
  });
}
async function definirTipoRegistro(registro, app2) {
  const totTareas = await encontrarTareasPendientes(app2);
  let opcionesTitulo, valoresOpcion;
  if (totTareas.length > 0) {
    opcionesTitulo = [registro.nombre, "Alguna tarea en Ejecuci\xF3n", "Otro"];
    valoresOpcion = ["Nota", "Tarea", "Otro"];
  } else {
    opcionesTitulo = [registro.nombre, "Otro"];
    valoresOpcion = ["Nota", "Otro"];
  }
  const placeholder = "\xBFSobre qu\xE9 es el registro de tiempo?";
  const modalMenu1 = new SeleccionModal(app2, opcionesTitulo, valoresOpcion, placeholder);
  try {
    const selection = await modalMenu1.openAndAwaitSelection();
    registro.tipoRegistro = selection;
    switch (registro.tipoRegistro) {
      case "Nota":
        registro.titulo = registro.nombre;
        registro.siAsunto = true;
        break;
      case "Tarea":
        await elegirTareaParaRegistro(app2, registro, totTareas);
        break;
      default:
        registro.siAsunto = registro.tituloDefinido !== "Otro";
        break;
    }
  } catch (error) {
    console.error("Error o modal cerrado sin selecci\xF3n:", error);
  }
}
async function encontrarTareasPendientes(app2) {
  let tareasPendientes = [];
  const archivos = app2.vault.getMarkdownFiles();
  const archivosRelevantes = archivos.filter((archivo) => !archivo.path.includes("Plantillas"));
  for (const archivo of archivosRelevantes) {
    const contenido = await app2.vault.read(archivo);
    const coincidencias = contenido.match(/^ *- \[\/\] .*/gm) || [];
    const tareasLimpias = coincidencias.map((tarea) => tarea.trim());
    tareasPendientes = tareasPendientes.concat(tareasLimpias);
  }
  return tareasPendientes;
}
async function elegirTareaParaRegistro(app2, registro, tareasPendientes) {
  const placeholder = "Elige la tarea que vas a registrar.";
  let promesasLimpias = tareasPendientes.map((tarea) => limpiarTextoTarea(tarea));
  Promise.all(promesasLimpias).then((tareasLimpias) => {
    const modalMenu = new SeleccionModal(app2, tareasLimpias, tareasLimpias, placeholder);
    modalMenu.openAndAwaitSelection().then((selection) => {
      debugger;
      registro.titulo = limpiarTextoTarea(selection);
    }).catch((error) => {
      registro.detener = true;
      console.error("Error o modal cerrado sin selecci\xF3n:", error);
    });
  }).catch((error) => {
    console.error("Hubo un error al limpiar las tareas:", error);
  });
}
function limpiarTextoTarea(titulo) {
  return new Promise((resolve) => {
    let textoLimpio = titulo.split("\n")[0];
    textoLimpio = textoLimpio.replace(/#[\w-/]+/g, "");
    textoLimpio = textoLimpio.replace(/\[\w+::[^\]]+\]/g, "");
    textoLimpio = textoLimpio.replace(/^\s*-\s*\[\/\]\s*/, "");
    const caracteresNoPermitidos = /[<>:"\/\\|?*\x00-\x1F]/g;
    textoLimpio = textoLimpio.replace(caracteresNoPermitidos, "_");
    textoLimpio = textoLimpio.replace(/\s+/g, " ");
    resolve(textoLimpio.trim());
  });
}
async function detenerTarea(tareaActiva, app2) {
  console.log(`Deteniendo la tarea: ${tareaActiva.titulo}`);
  const fileContents = await app2.vault.read(tareaActiva.file);
  const newContents = fileContents.replace("estado: \u{1F7E2}", "estado: \u{1F535}");
  await app2.vault.modify(tareaActiva.file, newContents);
}

// src/modules/moduloRegistroTiempo/ribbonMenu.ts
function registerRibbonMenu2(plugin) {
  plugin.ribbonButtonRT = plugin.addRibbonIcon("clock", "Registro de Tiempo", async (event) => {
    const menu = new import_obsidian13.Menu(plugin.app);
    if (await cumpleCondicion(plugin.app)) {
      menu.addItem((item) => item.setTitle("Ahora").onClick(() => {
        console.log("Ahora");
      }));
    }
    menu.addItem((item) => item.setTitle("Registrar Tiempo").onClick(() => {
      console.log("Registrar Tiempo");
    }));
    if (await cumpleCondicion(plugin.app)) {
      menu.addItem((item) => item.setTitle("Detener Registro").onClick(() => {
        console.log("Detener Registro");
      }));
    }
    menu.addItem((item) => item.setTitle("Tareas en progreso").onClick(() => {
      console.log("Tareas en progreso");
    }));
    menu.addItem((item) => item.setTitle("Registros de hoy").onClick(() => {
      console.log("Registros de hoy");
    }));
    menu.showAtPosition({ x: event.pageX, y: event.pageY });
  });
}
function deactivateRibbonMenu(plugin) {
  if (plugin.ribbonButtonRT) {
    plugin.ribbonButtonRT.remove();
    plugin.ribbonButtonRT = null;
  }
}

// src/modules/moduloRegistroTiempo/commands.ts
var import_obsidian15 = require("obsidian");

// src/modules/moduloRegistroTiempo/modals/modal_Ahora.ts
var import_obsidian14 = require("obsidian");
var modal_Ahora = class extends import_obsidian14.Modal {
  constructor(app2, file) {
    super(app2);
    this.app = app2;
    this.file = file;
  }
  async onOpen() {
    var _a, _b;
    const { contentEl } = this;
    const metadata = this.app.metadataCache.getFileCache(this.file);
    const aliases = ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.aliases) || "Actividad sin alias";
    const horaInicioStr = ((_b = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _b.horaInicio) ? window.moment(metadata.frontmatter.horaInicio, "YYYY-MM-DD dddd HH:mm").format("YYYY-MM-DDTHH:mm") : "";
    contentEl.createEl("h2", { text: `Registro de actividad.` });
    contentEl.createEl("p", { text: `Tarea: "${aliases}"` });
    if (horaInicioStr) {
      const horaInicio = window.moment(horaInicioStr, "YYYY-MM-DD dddd HH:mm");
      const ahora = window.moment();
      const diff = ahora.diff(horaInicio);
      const duracion = window.moment.duration(diff);
      const diffFormatted = `${duracion.hours()}h ${duracion.minutes()}m`;
      contentEl.createEl("p", { text: `Esta actividad lleva ${diffFormatted} en ejecuci\xF3n.` });
    } else {
      contentEl.createEl("p", { text: "No se pudo determinar el tiempo de inicio de la actividad." });
    }
    contentEl.createEl("p", { text: "Hora de inicio:" });
    this.horaInicioInput = contentEl.createEl("input", {
      type: "datetime-local",
      value: horaInicioStr
    });
    const saveButton = contentEl.createEl("button", { text: "Guardar cambios" });
    saveButton.onclick = () => this.guardarCambios();
  }
  async guardarCambios() {
    const nuevaHoraInicioLocal = this.horaInicioInput.value;
    if (!nuevaHoraInicioLocal) {
      new import_obsidian14.Notice("Por favor, seleccione una hora de inicio.");
      return;
    }
    const nuevaHoraInicio = window.moment(nuevaHoraInicioLocal).format("YYYY-MM-DD dddd HH:mm");
    try {
      const contenidoOriginal = await this.app.vault.read(this.file);
      const contenidoActualizado = contenidoOriginal.replace(/(horaInicio: ).*/, `$1${nuevaHoraInicio}`);
      await this.app.vault.modify(this.file, contenidoActualizado);
      this.close();
      new import_obsidian14.Notice("Hora de inicio actualizada correctamente.");
    } catch (error) {
      console.error("Error al guardar cambios en la nota:", error);
      new import_obsidian14.Notice("Error al guardar los cambios en la nota.");
    }
  }
};

// src/modules/moduloRegistroTiempo/commands.ts
function registerCommands2(plugin) {
  const id1 = plugin.addCommand({
    id: "registros-de-tiempo-del-dia",
    name: "Registros de tiempo del d\xEDa",
    checkCallback: (checking) => {
      var _a;
      const activeLeaf = plugin.app.workspace.activeLeaf;
      if (activeLeaf) {
        const filePath = ((_a = activeLeaf.view.file) == null ? void 0 : _a.path) || "";
        if (filePath.startsWith("Estructura/Periodos/Diario/")) {
          if (!checking) {
            console.log("Registros de tiempo del d\xEDa");
          }
          return true;
        }
      }
      return false;
    }
  });
  plugin.registeredCommandIdsRT.push(id1.id);
  const id2 = plugin.addCommand({
    id: "ahora-RegistroTiempo",
    name: "Tarea activa en registro de tiempo",
    callback: async () => {
      const activa = await buscarRegistrosActivos(plugin.app);
      if (!activa) {
        new import_obsidian15.Notice("No hay notas activas");
      } else {
        let modal = new modal_Ahora(plugin.app, activa);
        modal.open();
      }
    }
  });
  plugin.registeredCommandIdsRT.push(id2.id);
  const id3 = plugin.addCommand({
    id: "crear-registro-tiempo",
    name: "Crear Registro de Tiempo",
    callback: async () => {
      const registro = await crearObjetoRegistro(plugin);
      if (!registro) {
        new import_obsidian15.Notice("No se pudo crear el objeto de registro.");
        return;
      }
      await verificarTareasActivas(registro, plugin.app);
      await definirTipoRegistro(registro, plugin.app);
    }
  });
  plugin.registeredCommandIdsRT.push(id3.id);
}
function deactivateCommands2(plugin) {
  if (!plugin.registeredCommandIdsRT)
    return;
  plugin.registeredCommandIdsRT.forEach((commandId) => {
    const command = plugin.app.commands.commands[commandId];
    if (command) {
      command.callback = () => new import_obsidian15.Notice("Este comando ha sido desactivado.");
    }
  });
}

// src/modules/moduloRegistroTiempo/index.ts
var ModuloRegistroTiempo = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  activate() {
    if (!this.plugin.ribbonButtonRT) {
      registerRibbonMenu2(this.plugin);
    }
    registerCommands2(this.plugin);
  }
  deactivate() {
    deactivateRibbonMenu(this.plugin);
    deactivateCommands2(this.plugin);
  }
};

// src/defaults/defaultSettings.ts
var DEFAULT_SETTINGS = {
  moduloRegistroTiempo: true,
  moduloAliasStatusBar: true,
  moduloBase: true,
  file_camposCentral: "Estructura/Campos Sistema Gestion/Campos Sistema Central",
  folder_Anotaciones: "Anotaciones/Notas",
  indice_Anotaciones: "Anotaciones/Indice Anotaciones",
  folder_ABlog: "Subsistemas/Articulos Blog/Articulos",
  indice_ABlog: "Subsistemas/Articulos Blog/Indice Articulos Blog",
  folder_Desarrollos: "Subsistemas/Desarrollos/Codigos",
  indice_Desarrollos: "Subsistemas/Desarrollos/Indice Desarrollo",
  folder_Estudio: "Subsistemas/Estudio/Temas",
  indice_Estudio: "Subsistemas/Estudio/Indice Estudio",
  folder_ProyectosGTD: "Subsistemas/GTD/Proyectos GTD/Proyectos",
  indice_ProyectosGTD: "Subsistemas/GTD/Proyectos GTD/Indice Proyectos GTD",
  folder_RSGTD: "Subsistemas/GTD/Revision Semanal/Revisiones",
  indice_RSGTD: "Subsistemas/GTD/Revision Semanal/Indice Revision Semanal",
  folder_LecturaSesiones: "Subsistemas/Lectura/Sesiones de Lectura/Sesiones",
  indice_LecturaSesiones: "Subsistemas/Lectura/Sesiones de Lectura/Indice Sesiones Lectura",
  folder_LecturaResumenes: "Subsistemas/Lectura/Libros/Resumenes",
  indice_LecturaResumenes: "Subsistemas/Lectura/Libros/Indice Resumenes",
  folder_Mentorias: "Subsistemas/Mentorias/Sesiones Mentoria",
  indice_Mentorias: "Subsistemas/Mentorias/Indice Mentorias",
  folder_Mercado: "Subsistemas/Mercado/Listas",
  indice_Mercado: "Subsistemas/Mercado/Indice Mercado",
  folder_ModulosSistema: "Subsistemas/Modulos Sistema Gestion/Modulos",
  indice_ModulosSistema: "Subsistemas/Modulos Sistema Gestion/Indice Modulos",
  folder_Pagos: "Subsistemas/Pagos/Notas",
  indice_Pagos: "Subsistemas/Pagos/Indice Pagos",
  folder_Presentaciones: "Subsistemas/Presentaciones/Notas",
  indice_Presentaciones: "Subsistemas/Presentaciones/Indice Presentaciones",
  folder_ProyectosQ: "Subsistemas/Proyectos de Q/Proyectos",
  indice_ProyectosQ: "Subsistemas/Proyectos de Q/Indice Proyectos de Q",
  folder_Publicaciones: "Subsistemas/Publicaciones/Piezas",
  indice_Publicaciones: "Subsistemas/Publicaciones/Indice Publicaciones",
  folder_Recetas: "Subsistemas/Recetas/Recetas",
  indice_Recetas: "Subsistemas/Recetas/Indice Recetas",
  folder_RecursosRecurrentes: "Subsistemas/Recursos Recurrentes/Recursos",
  indice_RecursosRecurrentes: "Subsistemas/Recursos Recurrentes/Indice Recursos Recurrentes",
  folder_RegistroTiempo: "Subsistemas/Registro Tiempo/Registros",
  indice_RegistroTiempo: "Subsistemas/Registro Tiempo/Indice Registro Tiempo",
  // Estructura
  folder_AreasVida: "Estructura/Areas de Vida",
  indice_AreasVida: "Estructura/Areas de Vida/Indice Areas de Vida",
  nameFile_AreasVida: "indexAV",
  folder_AreasInteres: "Estructura/Areas de Interes",
  indice_AreasInteres: "Estructura/Areas de Interes/Indice Areas de Interes",
  nameFile_AreasInteres: "indexAI",
  folder_TemasInteres: "Estructura/Temas de Interes",
  indice_TemasInteres: "Estructura/Temas de Interes/Indice Temas de Interes"
};

// src/modules/moduloRegistroTiempo/API/utilsAPI.ts
var import_obsidian19 = require("obsidian");

// src/modules/moduloRegistroTiempo/API/menuOtro.ts
var import_obsidian18 = require("obsidian");

// src/modules/modales/fuzzySelectOrCreate.ts
var import_obsidian17 = require("obsidian");
var fuzzySelectOrCreate = class {
  constructor(app2, plugin) {
    this.pathCampos = "Estructura/Campos Sistema Gestion/Campos Registro Tiempo.md";
    this.app = app2;
    this.plugin = plugin;
  }
  createModal() {
    const modal = document.createElement("div");
    modal.setAttribute("id", "fuzzySearchModal");
    modal.style.position = "fixed";
    modal.style.top = "50%";
    modal.style.left = "50%";
    modal.style.transform = "translate(-50%, -50%)";
    modal.style.zIndex = "1000";
    modal.style.padding = "20px";
    modal.style.backgroundColor = "white";
    modal.style.border = "1px solid #ccc";
    modal.style.borderRadius = "5px";
    modal.style.boxShadow = "0 4px 6px rgba(0,0,0,.1)";
    modal.style.width = "300px";
    const closeButton = document.createElement("button");
    closeButton.textContent = "\xD7";
    closeButton.style.position = "absolute";
    closeButton.style.top = "5px";
    closeButton.style.right = "5px";
    closeButton.style.border = "none";
    closeButton.style.background = "none";
    closeButton.style.cursor = "pointer";
    closeButton.style.fontSize = "16px";
    closeButton.style.fontWeight = "bold";
    closeButton.style.padding = "0px 4px";
    closeButton.style.borderRadius = "10px";
    closeButton.style.outline = "none";
    closeButton.style.boxShadow = "none";
    closeButton.onclick = () => modal.remove();
    modal.appendChild(closeButton);
    return modal;
  }
  filterItems(query, items) {
    return items.filter(
      (item) => item.value.toLowerCase().includes(query.toLowerCase())
    );
  }
  async updateYAMLFields(tipo, selectedValue, selectedGroup) {
    try {
      debugger;
      const file = app.vault.getAbstractFileByPath(this.pathCampos);
      await app.fileManager.processFrontMatter(file, (frontmatter) => {
        debugger;
        let currentActs = frontmatter[tipo] || [];
        let newValueForActs = [...currentActs, [selectedGroup, selectedValue]];
        frontmatter[tipo] = newValueForActs;
      });
      console.log("Frontmatter actualizado con \xE9xito");
    } catch (err) {
      console.error("Error al actualizar el frontmatter", err);
    }
  }
  async showFuzzySearchModal(items, groups, tipo) {
    return new Promise((resolve, reject) => {
      let selectedValue = "";
      let selectedGroup = "";
      const modal = this.createModal();
      const title = document.createElement("h2");
      title.textContent = "Busca o crea tu actividad";
      title.style.textAlign = "center";
      modal.appendChild(title);
      const input = document.createElement("input");
      input.type = "text";
      input.placeholder = "Escribe tu actividad...";
      input.style.width = "80%";
      input.style.textAlign = "center";
      modal.style.display = "flex";
      modal.style.flexDirection = "column";
      modal.style.alignItems = "center";
      modal.appendChild(input);
      const spacer = document.createElement("div");
      spacer.style.height = "16px";
      modal.appendChild(spacer);
      const resultsDiv = document.createElement("div");
      modal.appendChild(resultsDiv);
      function updateResultsDisplay(filteredResults, menuOtro2) {
        resultsDiv.innerHTML = "";
        filteredResults.forEach((result) => {
          const div = document.createElement("div");
          div.textContent = result.value;
          div.style.cursor = "pointer";
          div.onmouseover = () => div.style.backgroundColor = "#f0f0f0";
          div.onmouseout = () => div.style.backgroundColor = "transparent";
          div.onclick = () => {
            selectedValue = result.activity;
            selectedGroup = result.group;
            modal.remove();
            resolve([selectedValue, selectedGroup]);
          };
          resultsDiv.appendChild(div);
        });
        if (filteredResults.length === 0 && input.value.trim() !== "") {
          const createNewDiv = document.createElement("div");
          createNewDiv.textContent = `Crear nueva actividad: "${input.value}"`;
          createNewDiv.style.cursor = "pointer";
          createNewDiv.style.color = "blue";
          createNewDiv.onclick = () => {
            selectedValue = input.value;
            debugger;
            if (tipo == void 0) {
              tipo = "actsTemas";
            }
            selectGroupForNewActivity(menuOtro2, tipo);
          };
          resultsDiv.appendChild(createNewDiv);
        }
      }
      function selectGroupForNewActivity(menuOtro2, tipo2) {
        resultsDiv.innerHTML = "";
        input.remove();
        spacer.remove();
        title.remove();
        const texto = document.createElement("p");
        texto.textContent = `Vamos a crear la actividad: "${selectedValue}". Selecciona un grupo:`;
        ;
        texto.style.textAlign = "center";
        resultsDiv.appendChild(texto);
        groups.forEach((group) => {
          const groupDiv = document.createElement("div");
          groupDiv.textContent = group;
          groupDiv.style.cursor = "pointer";
          groupDiv.onmouseover = () => groupDiv.style.backgroundColor = "#f0f0f0";
          groupDiv.onmouseout = () => groupDiv.style.backgroundColor = "transparent";
          groupDiv.onclick = async () => {
            selectedGroup = group;
            modal.remove();
            let recurrente = await menuOtro2.esRecurrente(selectedValue);
            if (recurrente) {
              await menuOtro2.updateYAMLFields(tipo2, selectedValue, selectedGroup);
            }
            resolve([selectedValue, selectedGroup]);
          };
          resultsDiv.appendChild(groupDiv);
        });
      }
      function displaySelectedValue(activity, group) {
        resultsDiv.innerHTML = `Seleccionado: ${activity} / ${group}`;
      }
      input.oninput = () => {
        const filteredItems = this.filterItems(input.value, items);
        updateResultsDisplay(filteredItems, this);
      };
      document.body.appendChild(modal);
    });
  }
  async esRecurrente(tarea) {
    const opciones = ["Si", "No"];
    const valores = [true, false];
    const placeholder = `${tarea} es tarea recurrente?`;
    const modal = new SeleccionModal(app, opciones, valores, placeholder);
    try {
      return await modal.openAndAwaitSelection();
    } catch (error) {
      console.error("Error o modal cerrado sin selecci\xF3n:", error);
      return false;
    }
  }
};

// src/modules/moduloRegistroTiempo/API/menuOtro.ts
var menuOtro = class {
  constructor(plugin) {
    this.pathCampos = "Estructura/Campos Sistema Gestion/Campos Registro Tiempo.md";
    this.selectedActivity = "";
    this.selectedGroup = "";
    this.plugin = plugin;
    this.fuzzySelectOrC = new fuzzySelectOrCreate(this.app, plugin);
  }
  async menuOtro(app2, registro) {
    const opcionesOtro = ["Propias", "Areas de Vida", "Areas de Inter\xE9s", "Proyectos de Q", "Proyectos GTD", "Tema de Inter\xE9s", "Recurso Recurrente"];
    const valoresOtro = ["hab", "actsAV", "actsAI", "actsPQ", "actsPGTD", "actsTI", "actsRR"];
    const placeholderOtro = "\xBFQue categoria?";
    const modalOtro = new SeleccionModal(app2, opcionesOtro, valoresOtro, placeholderOtro);
    let temaOtro;
    let siAsunto = false;
    try {
      const selectionOtro = await modalOtro.openAndAwaitSelection();
      switch (selectionOtro) {
        case "hab":
          temaOtro = await this.habitual(app2);
          break;
        case "actsAV":
        case "actsAI":
        case "actsPQ":
        case "actsPGTD":
        case "actsTI":
        case "actsRR":
          temaOtro = await this.elemSG(app2, selectionOtro);
          siAsunto = true;
          break;
        case "bus":
          break;
      }
    } catch (error) {
      console.error("Error o modal cerrado sin selecci\xF3n:", error);
      registro.detener = true;
      return error;
    }
    return { titulo: temaOtro.actividad + " / " + temaOtro.grupo, siAsunto, nombre: temaOtro.nombre };
  }
  async habitual(app2) {
    const grupos = await this.getFrontmatterField(app2, this.pathCampos, "temas");
    const actsGrupos = await this.resultYaml(app2, "actsTemas");
    let itemsForSearch = actsGrupos.filter((item) => grupos.includes(item.grupo)).map((item) => ({
      value: `${item.actividad} / ${item.grupo}`,
      // Cambia el orden si es necesario
      activity: item.actividad,
      // Usa la propiedad 'actividad' en lugar de item[1]
      group: item.grupo
      // Usa la propiedad 'grupo' en lugar de item[0]
    }));
    let eleccion = await this.fuzzySelectOrC.showFuzzySearchModal(itemsForSearch, grupos);
    let objEleccion = { grupo: eleccion[1], actividad: eleccion[0], nombre: "" };
    return objEleccion;
  }
  async ninguno(app2) {
  }
  async elemSG(app2, tipo) {
    const actividades = await this.resultYaml(app2, tipo);
    debugger;
    const activeSG = await this.findMainFilesWithState(app2, tipo);
    const groups = activeSG.map((page) => page.frontmatter.aliases ? page.frontmatter.aliases[0] : null).filter((alias2) => alias2 !== null);
    let itemsForSearch = actividades.filter((item) => groups.includes(item.grupo)).map((item) => ({
      value: `${item.actividad} / ${item.grupo}`,
      // Cambia el orden si es necesario
      activity: item.actividad,
      // Usa la propiedad 'actividad' en lugar de item[1]
      group: item.grupo
      // Usa la propiedad 'grupo' en lugar de item[0]
    }));
    let eleccion = await this.fuzzySelectOrC.showFuzzySearchModal(itemsForSearch, groups, tipo);
    const foundElement = activeSG.find((b) => b.frontmatter.aliases[0] === eleccion[1]);
    let alias = foundElement == null ? void 0 : foundElement.file.path;
    let objEleccion = { grupo: eleccion[1], actividad: eleccion[0], nombre: alias };
    return objEleccion;
  }
  async buscar(app2) {
  }
  async resultYaml(app2, tema) {
    var _a;
    const file = app2.vault.getAbstractFileByPath(this.pathCampos);
    try {
      if (file instanceof import_obsidian18.TFile) {
        const metadata = app2.metadataCache.getFileCache(file);
        const arregloResult = ((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a[tema]) || [];
        const resultado = [];
        if (Array.isArray(arregloResult)) {
          arregloResult.forEach((item) => {
            if (Array.isArray(item) && item.length >= 2) {
              resultado.push({ grupo: item[0], actividad: item[1] });
            }
          });
        }
        return resultado;
      }
    } catch (error) {
      console.error("Error obteniendo el archivo de campos:", error);
      throw error;
    }
    return [];
  }
  async getFrontmatterField(app2, file, field) {
    try {
      const tFile = app2.vault.getAbstractFileByPath(file);
      if (tFile instanceof import_obsidian18.TFile) {
        const cache = app2.metadataCache.getFileCache(tFile);
        const frontmatter = cache == null ? void 0 : cache.frontmatter;
        if (frontmatter && frontmatter.hasOwnProperty(field)) {
          const fieldValue = frontmatter[field];
          if (fieldValue === void 0 || fieldValue === null || fieldValue === "") {
            console.log("El campo est\xE1 vac\xEDo o no existe.");
            return null;
          } else {
            console.log("Frontmatter consultado con \xE9xito");
            return fieldValue;
          }
        } else {
          console.log("El campo no existe en el frontmatter.");
          return null;
        }
      } else {
        console.error("El archivo no existe o no es un archivo de texto.");
        return null;
      }
    } catch (err) {
      console.error("Error al consultar el frontmatter", err);
      return null;
    }
  }
  // Esta función encuentra los archivos de subsistemas y cuyo estado es 🟢
  async findMainFilesWithState(app2, tipo) {
    const propertiesTipo = {
      actsAV: {
        folder: this.plugin.settings.folder_AreasVida,
        sameName: true,
        nameFile: this.plugin.settings.nameFile_AreasVida
      },
      actsAI: {
        folder: this.plugin.settings.folder_AreasInteres,
        sameName: true,
        nameFile: this.plugin.settings.nameFile_AreasInteres
      },
      actsPQ: {
        folder: this.plugin.settings.folder_ProyectosQ,
        sameName: false,
        nameFile: ""
      },
      actsPGTD: {
        folder: this.plugin.settings.folder_ProyectosGTD,
        sameName: false,
        nameFile: ""
      },
      actsTI: {
        folder: this.plugin.settings.folder_TemasInteres,
        sameName: false,
        nameFile: ""
      },
      actsRR: {
        folder: this.plugin.settings.folder_RecursosRecurrentes,
        sameName: false,
        nameFile: ""
      }
      // Puedes continuar añadiendo más casos aquí
    };
    if (propertiesTipo.hasOwnProperty(tipo)) {
      const { folder, sameName, nameFile } = propertiesTipo[tipo];
      const filesInFolder = app2.vault.getFiles().filter((file) => file.path.startsWith(folder));
      const filesWithFrontmatter = [];
      for (const file of filesInFolder) {
        if (sameName && file.basename === nameFile || !sameName) {
          const metadata = app2.metadataCache.getFileCache(file);
          if (metadata.frontmatter && metadata.frontmatter.estado === "\u{1F7E2}") {
            filesWithFrontmatter.push({ file, frontmatter: metadata.frontmatter });
          }
        }
      }
      return filesWithFrontmatter;
    } else {
      console.log("Selecci\xF3n no reconocida:", tipo);
      return [];
    }
  }
};

// src/modules/moduloRegistroTiempo/API/utilsAPI.ts
var utilsAPI = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.menuOtro = new menuOtro(plugin);
  }
  async buscarRegistrosActivos(app2, registro) {
    var _a;
    const files = app2.vault.getMarkdownFiles();
    for (let file of files) {
      if (file.path.startsWith(registro.folder)) {
        const metadata = app2.metadataCache.getFileCache(file);
        if (((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a.estado) === "\u{1F7E2}") {
          return file;
        }
      }
    }
    return;
  }
  // Suponemos que esta función se ubicará en algún lugar donde pueda acceder a `app` de Obsidian.
  async crearObjetoRegistro(plugin) {
    const activo = plugin.app.workspace.getActiveFile();
    if (!activo) {
      console.error("No hay un archivo activo para la creaci\xF3n de registro de tiempo. Se descarta para la creaci\xF3n de registro de tiempo.");
      return null;
    }
    const folder = plugin.settings.folder_RegistroTiempo;
    const indice = plugin.settings.indice_RegistroTiempo;
    let maxId = 0;
    const files = app.vault.getMarkdownFiles();
    const registrosExistentes = files.filter((file) => file.path.startsWith(folder));
    registrosExistentes.forEach((file) => {
      var _a;
      const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if (metadata && metadata.id && !isNaN(metadata.id)) {
        const id = parseInt(metadata.id);
        if (id > maxId)
          maxId = id;
      }
    });
    const nextId = maxId + 1;
    const fechaCompleta = this.formatearFecha(/* @__PURE__ */ new Date());
    return {
      activo,
      nombre: activo.basename,
      folder,
      indice,
      id: nextId,
      fecha: fechaCompleta,
      indice_DVJS: `"${indice}"`
    };
  }
  formatearFecha(fecha) {
    const offset = fecha.getTimezoneOffset() * 6e4;
    const fechaLocal = new Date(fecha.getTime() - offset);
    const fechaFormato = fechaLocal.toISOString().split("T")[0];
    const dias = ["Domingo", "Lunes", "Martes", "Mi\xE9rcoles", "Jueves", "Viernes", "S\xE1bado"];
    const diaSemana = dias[fecha.getDay()];
    const horaFormato = fecha.toTimeString().split(" ")[0].substring(0, 5);
    return `${fechaFormato} ${diaSemana} ${horaFormato}`;
  }
  async verificarTareasActivas(registro, app2) {
    var _a;
    const files = app2.vault.getMarkdownFiles();
    const tareasActivas = [];
    for (let file of files) {
      if (file.path.startsWith(registro.folder)) {
        const metadata = (_a = app2.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
        if ((metadata == null ? void 0 : metadata.estado) === "\u{1F7E2}") {
          tareasActivas.push({ file, titulo: metadata.titulo, aliases: metadata.aliases || file.basename });
        }
      }
    }
    if (tareasActivas.length === 1) {
      const tareaActiva = tareasActivas[0];
      const deseaDetener = await this.mostrarSugerencia(`La tarea ${tareaActiva.aliases} est\xE1 corriendo. \xBFDesea detenerla?`);
      debugger;
      if (deseaDetener === void 0) {
        new import_obsidian19.Notice(`Creaci\xF3n de registro cancelado por el usuario.`);
        registro.detener = true;
        return;
      }
      if (deseaDetener) {
        await this.detenerTarea(tareaActiva, app2);
        registro.detener = false;
      } else {
        new import_obsidian19.Notice(`La tarea ${tareaActiva.aliases} seguir\xE1 registr\xE1ndose.`);
        registro.detener = true;
        return;
      }
    } else if (tareasActivas.length > 1) {
      new import_obsidian19.Notice("Hay un error con la cantidad de tareas corriendo en este momento.");
      registro.detener = true;
    } else {
      console.log("No hay m\xE1s tareas corriendo.");
      registro.detener = false;
    }
  }
  mostrarSugerencia(mensaje) {
    return new Promise((resolve, reject) => {
      let seleccionado = false;
      const modal = new import_obsidian19.Modal(app);
      modal.contentEl.createEl("h1", { text: mensaje });
      const buttonsContainer = modal.contentEl.createEl("div");
      const hacerSeleccion = (seleccion) => {
        seleccionado = true;
        modal.close();
        resolve(seleccion);
      };
      const yesButton = buttonsContainer.createEl("button", {
        text: "S\xED"
      });
      yesButton.addEventListener("click", () => hacerSeleccion(true));
      const noButton = buttonsContainer.createEl("button", {
        text: "No"
      });
      noButton.addEventListener("click", () => hacerSeleccion(false));
      modal.onClose = () => {
        if (!seleccionado) {
          reject(new Error("Modal cerrado sin selecci\xF3n"));
        }
      };
      modal.contentEl.addEventListener("keydown", (e) => {
        var _a;
        switch (e.key) {
          case "ArrowLeft":
            yesButton.focus();
            break;
          case "ArrowRight":
            noButton.focus();
            break;
          case "Enter":
            (_a = document.activeElement) == null ? void 0 : _a.click();
            break;
        }
      });
      yesButton.focus();
      modal.open();
    });
  }
  async definirTipoRegistro(registro, app2) {
    const totTareas = await this.encontrarTareasPendientes(app2);
    let opcionesTitulo, valoresOpcion;
    if (totTareas.length > 0) {
      opcionesTitulo = [registro.nombre, "Alguna tarea en Ejecuci\xF3n", "Otro"];
      valoresOpcion = ["Nota", "Tarea", "Otro"];
    } else {
      opcionesTitulo = [registro.nombre, "Otro"];
      valoresOpcion = ["Nota", "Otro"];
    }
    const placeholder = "\xBFSobre qu\xE9 es el registro de tiempo?";
    const modalMenu1 = new SeleccionModal(app2, opcionesTitulo, valoresOpcion, placeholder);
    try {
      const selection = await modalMenu1.openAndAwaitSelection();
      registro.tipoRegistro = selection;
      switch (registro.tipoRegistro) {
        case "Nota":
          registro.titulo = registro.nombre;
          registro.siAsunto = true;
          break;
        case "Tarea":
          await this.elegirTareaParaRegistro(app2, registro, totTareas);
          break;
        default:
          let respuesta = await this.menuOtro.menuOtro(app2, registro);
          debugger;
          Object.assign(registro, respuesta);
          break;
      }
    } catch (error) {
      console.error("Error o modal cerrado sin selecci\xF3n:", error);
    }
  }
  async encontrarTareasPendientes(app2) {
    let tareasPendientes = [];
    const archivos = app2.vault.getMarkdownFiles();
    const archivosRelevantes = archivos.filter((archivo) => !archivo.path.includes("Plantillas"));
    for (const archivo of archivosRelevantes) {
      const contenido = await app2.vault.read(archivo);
      const coincidencias = contenido.match(/^ *- \[\/\] .*/gm) || [];
      const tareasConArchivo = coincidencias.map((tarea) => {
        return { tarea: tarea.trim(), archivo };
      });
      tareasPendientes = tareasPendientes.concat(tareasConArchivo);
    }
    return tareasPendientes;
  }
  async elegirTareaParaRegistro(app2, registro, tareasPendientes) {
    const placeholder = "Elige la tarea que vas a registrar.";
    let promesasLimpias = tareasPendientes.map((tareaObj) => this.limpiarTextoTarea(tareaObj.tarea));
    try {
      const tareasLimpias = await Promise.all(promesasLimpias);
      const tareasLimpiasConArchivo = tareasPendientes.map((tareaObj, index) => {
        return {
          tarea: tareasLimpias[index],
          // Tarea limpia
          archivo: tareaObj.archivo
          // Referencia al archivo original
        };
      });
      const longitud = tareasLimpiasConArchivo.length;
      const arregloDeIndices = Array.from({ length: longitud }, (_, indice) => indice);
      const modalMenu = new SeleccionModal(app2, tareasLimpiasConArchivo.map((b) => b.tarea), arregloDeIndices, placeholder);
      try {
        const selectedIndex = await modalMenu.openAndAwaitSelection();
        const seleccion = tareasLimpiasConArchivo[selectedIndex];
        registro.titulo = seleccion.tarea;
        registro.nombre = seleccion.archivo.basename;
        registro.siAsunto = true;
      } catch (error) {
        registro.detener = true;
        console.error("Error o modal cerrado sin selecci\xF3n:", error);
      }
    } catch (error) {
      console.error("Hubo un error al limpiar las tareas:", error);
    }
  }
  limpiarTextoTarea(titulo) {
    return new Promise((resolve) => {
      let textoLimpio = titulo.split("\n")[0];
      textoLimpio = textoLimpio.replace(/#[\w-/]+/g, "");
      textoLimpio = textoLimpio.replace(/\[\w+::[^\]]+\]/g, "");
      textoLimpio = textoLimpio.replace(/^\s*-\s*\[\/\]\s*/, "");
      const caracteresNoPermitidos = /[<>:"\/\\|?*\x00-\x1F]/g;
      textoLimpio = textoLimpio.replace(caracteresNoPermitidos, "_");
      textoLimpio = textoLimpio.replace(/\s+/g, " ");
      resolve(textoLimpio.trim());
    });
  }
  async construirNombreyAlias(registro, app2) {
    let nombreBase = `${registro.folder}/RT - ${registro.id}`;
    let aliasLimpio = this.limpiarAlias(registro.titulo);
    aliasLimpio = aliasLimpio.length > 195 ? aliasLimpio.slice(0, 195) : aliasLimpio;
    const archivos = app2.vault.getFiles();
    let registrosConMismoTitulo = [];
    for (const archivo of archivos) {
      if (archivo.path.startsWith(registro.folder)) {
        const metadatos = app2.metadataCache.getFileCache(archivo);
        if (metadatos && metadatos.frontmatter && metadatos.frontmatter.titulo === registro.titulo) {
          const idSec = metadatos.frontmatter.idSec;
          if (idSec !== void 0) {
            registrosConMismoTitulo.push({ archivo, idSec });
          }
        }
      }
    }
    debugger;
    registrosConMismoTitulo.sort((b) => b.idSec, "desc");
    registro.idSec = registrosConMismoTitulo.length > 0 ? parseInt(registrosConMismoTitulo[0].idSec) + 1 : 1;
    if (registro.idSec > 1) {
      aliasLimpio += ` - ${registro.idSec}`;
    }
    registro.aliases = [];
    registro.aliases.push(`RT - ${aliasLimpio}`);
    if (registro.tipoRegistro === "Nota") {
      const archivoActivo = app2.workspace.getActiveFile();
      if (!archivoActivo)
        return;
      const metadatosActivo = app2.metadataCache.getFileCache(archivoActivo);
      const aliasesActivo = metadatosActivo && metadatosActivo.frontmatter ? metadatosActivo.frontmatter.aliases : void 0;
      if (aliasesActivo) {
        const additionalAliases = Array.isArray(aliasesActivo) ? aliasesActivo : [aliasesActivo];
        additionalAliases.forEach((alias) => {
          registro.aliases.push(`RT - ${alias}`);
        });
      }
    }
    registro.nameFile = nombreBase;
  }
  limpiarAlias(titulo) {
    const caracteresNoPermitidos = /[<>:"\/\\|?*\x00-\x1F]/g;
    let tituloLimpio = titulo.replace(caracteresNoPermitidos, "_");
    tituloLimpio = tituloLimpio.replace(/\s+/g, " ");
    return tituloLimpio.trim();
  }
  async detenerTarea(tareaActiva, app2) {
    console.log(`Deteniendo la tarea: ${tareaActiva.titulo}`);
    const fileContents = await app2.vault.read(tareaActiva.file);
    const newContents = fileContents.replace("estado: \u{1F7E2}", "estado: \u{1F535}");
    await app2.vault.modify(tareaActiva.file, newContents);
  }
};

// src/modules/moduloRegistroTiempo/API/registroTiempoAPI.ts
var registroTiempoAPI = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.plugin = plugin;
    this.utilsApi = new utilsAPI(plugin);
  }
  async iniciarRegistro() {
    try {
      debugger;
      const registro = await this.utilsApi.crearObjetoRegistro(this.plugin);
      await this.utilsApi.verificarTareasActivas(registro, this.plugin.app);
      if (registro.detener) {
        return registro;
      }
      await this.utilsApi.definirTipoRegistro(registro, this.plugin.app);
      if (registro.detener) {
        return registro;
      }
      await this.utilsApi.construirNombreyAlias(registro, this.plugin.app);
      return registro;
    } catch (error) {
      new Notice("No se pudo crear el objeto de registro.");
      return null;
    }
  }
  miMetodo() {
    return "Resultado de mi Metodo";
  }
  otroMetodo(param) {
    return `Resultado de otroMetodo con ${param}`;
  }
};

// src/modules/noteLifecycleManager/API/starterAPI.ts
var starterAPI = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.infoSubsistema = {};
    this.nota = {};
    this.tp = this.getTp();
    this.pathCampos = this.plugin.settings.file_camposCentral + ".md";
  }
  async crearNota(infoSubsistema, campos) {
    let nota = {};
    Object.assign(this.infoSubsistema, infoSubsistema);
    if (this.infoSubsistema.defined) {
      this.infoSubsistema.folder = this.plugin.settings[infoSubsistema.folder];
      this.infoSubsistema.indice = this.plugin.settings[infoSubsistema.indice];
    }
    debugger;
    try {
      for (let campo of campos) {
        const functionName = `get${campo.charAt(0).toUpperCase() + campo.slice(1)}`;
        if (typeof this[functionName] === "function") {
          nota[campo] = await this[functionName]();
        } else {
          console.error(`La funci\xF3n ${functionName} no est\xE1 definida.`);
        }
      }
    } catch (error) {
      console.error("No se pudo crear el objeto de registro.", error);
      new Notice("No se pudo crear el objeto de registro.");
      return null;
    }
    return nota;
  }
  getTp() {
    if (!this.plugin || !this.plugin.app.plugins.enabledPlugins.has("templater-obsidian")) {
      console.error("El plugin Templater no est\xE1 habilitado.");
      return;
    }
    let tpGen = this.plugin.app.plugins.plugins["templater-obsidian"].templater;
    tpGen = tpGen.functions_generator.internal_functions.modules_array;
    let tp = {};
    tp.system = tpGen.find((m) => m.name == "system");
    if (!tp.system) {
      console.error("No se pudo acceder al objeto de funciones actuales de Templater.");
      return;
    }
    console.log("tp en YAMLUpdaterAPI se ha cargado satisfactoriamente");
    return tp;
  }
  // Ejemplo de función getCampo simulada. Debes definir funciones similares para 'id', 'fecha', etc.
  async getId() {
    let maxId = 0;
    const files = app.vault.getMarkdownFiles();
    const registrosExistentes = files.filter((file) => file.path.startsWith(this.infoSubsistema.folder));
    registrosExistentes.forEach((file) => {
      var _a;
      const metadata = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      if (metadata && metadata.id && !isNaN(metadata.id)) {
        const id = parseInt(metadata.id);
        if (id > maxId)
          maxId = id;
      }
    });
    const nextId = maxId + 1;
    this.nota.id = nextId;
    return nextId;
  }
  async getFecha() {
    return this.formatearFecha(/* @__PURE__ */ new Date());
  }
  formatearFecha(fecha) {
    const offset = fecha.getTimezoneOffset() * 6e4;
    const fechaLocal = new Date(fecha.getTime() - offset);
    const fechaFormato = fechaLocal.toISOString().split("T")[0];
    const dias = ["Domingo", "Lunes", "Martes", "Mi\xE9rcoles", "Jueves", "Viernes", "S\xE1bado"];
    const diaSemana = dias[fecha.getDay()];
    const horaFormato = fecha.toTimeString().split(" ")[0].substring(0, 5);
    return `${fechaFormato} ${diaSemana} ${horaFormato}`;
  }
  async getSecId() {
  }
  async getTitulo() {
    let prompt = this.tp.system.static_functions.get("prompt");
    let titulo = await prompt(`Titulo de este(a) ${this.infoSubsistema.name}`, `${this.infoSubsistema.name} - ${this.nota.id}`, true);
    if (titulo === null) {
      new Notice("Creaci\xF3n de nota cancelada por el usuario.");
      return;
    }
    this.nota.titulo = titulo;
    return titulo;
  }
  async getDescripcion() {
    let prompt = this.tp.system.static_functions.get("prompt");
    let descripcion = await prompt("\xBFQuieres agregar una descripci\xF3n?", ` Esta nota es sobre ${this.nota.titulo}`, false, true);
    if (descripcion === null) {
      new Notice("Creaci\xF3n de nota cancelada por el usuario.");
      return;
    }
    this.nota.descripcion = descripcion;
    return descripcion;
  }
  async getAliases() {
    this.nota.aliases = [];
    switch (this.infoSubsistema.type) {
      case "Ax":
        this.nota.aliases.push(`${this.nota.titulo}`);
        this.nota.aliases.push(`${this.infoSubsistema.type} - ${this.nota.titulo}`);
        break;
      case "AV":
      case "AI":
        break;
    }
    return this.nota.aliases;
  }
  async getAsunto() {
    let siAsunto, nombre;
    let activo = app.workspace.getActiveFile();
    if (activo != null) {
      nombre = activo.basename;
      const nota = app.metadataCache.getFileCache(activo);
      let suggester = this.tp.system.static_functions.get("suggester");
      siAsunto = await suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
    } else {
      siAsunto = false;
      nombre = "";
    }
    this.nota.asunto = {};
    this.nota.asunto.siAsunto = siAsunto;
    this.nota.asunto.nombre = nombre;
    return { siAsunto, nombre };
  }
  async getClasificacion() {
    var _a;
    let clasificacion, tagClasificacion, clasificacionAX, tagsClasificacionAX;
    let nuevaClasificacion = false;
    const file = app.vault.getAbstractFileByPath(this.pathCampos);
    const frontmatter = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    if (frontmatter) {
      clasificacionAX = frontmatter.tituloClasificacionAX || [];
      tagsClasificacionAX = frontmatter.tagsClasificacionAX || [];
      let suggester = this.tp.system.static_functions.get("suggester");
      tagClasificacion = await suggester(clasificacionAX, tagsClasificacionAX, false, "\xBFClasificar\xEDas esta nota bajo alguna de las siguientes categor\xEDas?");
      if (tagClasificacion === null) {
        new Notice("Creaci\xF3n de nota cancelada por el usuario.");
        return;
      } else if (tagClasificacion == "Nuevo") {
        let prompt = this.tp.system.static_functions.get("prompt");
        clasificacion = await prompt("\xBFCual es el nombre de la nueva clasificaci\xF3n que vas a ingresar?", "MiClasificaci\xF3n", true);
        if (clasificacion === null) {
          new Notice("Creaci\xF3n de nota cancelada por el usuario.");
          return;
        }
        tagClasificacion = await prompt("\xBFCual es el tag que utilizaras para " + clasificacion + "?. No utilices espacios en la definici\xF3n del tag.", "nuevoTag", true);
        if (tagClasificacion === null) {
          new Notice("Creaci\xF3n de nota cancelada por el usuario.");
          return;
        }
        nuevaClasificacion = true;
      } else if (tagClasificacion == "Ninguna") {
        tagClasificacion = "";
        clasificacion = "";
      } else {
        let indice = tagsClasificacionAX.indexOf(tagClasificacion);
        clasificacion = clasificacionAX[indice];
      }
    }
    if (nuevaClasificacion) {
      try {
        await app.fileManager.processFrontMatter(file, (frontmatter2) => {
          let newClasificacion = [...clasificacionAX, clasificacion];
          let newTagClasificacion = [...tagsClasificacionAX, tagClasificacion];
          frontmatter2.tituloClasificacionAX = newClasificacion;
          frontmatter2.tagsClasificacionAX = newTagClasificacion;
          console.log("Frontmatter actualizado con \xE9xito");
        });
      } catch (err) {
        console.error("Error al actualizar el frontmatter", err);
      }
    }
    if (tagClasificacion != "") {
      tagClasificacion = "cl/" + tagClasificacion;
    }
    this.nota.clasificacionAX = clasificacion;
    this.nota.tagClasificacionAX = tagClasificacion;
    return { clase: clasificacion, tag: tagClasificacion };
  }
  // ->
  async getEstado() {
    let suggester = this.tp.system.static_functions.get("suggester");
    let campo = await suggester(["\u{1F535} -> Completado - Informaci\xF3n", "\u{1F7E2} -> Finalizado", "\u{1F7E1} -> En ejecuci\xF3n", "\u{1F534} -> Detenido"], ["\u{1F535}", "\u{1F7E2}", "\u{1F7E1}", "\u{1F534}"], false, "Seleccione el nuevo estado:");
    if (campo === null) {
      new Notice("Modificaci\xF3n de nota cancelada por el usuario.");
      return;
    }
    this.nota.estado = campo;
    return campo;
  }
  async getFilename() {
    switch (this.infoSubsistema.type) {
      case "AV":
      case "AI":
        this.nota.fileName = `${this.infoSubsistema.folder}/${this.nota.titulo}/index${this.infoSubsistema.type}`;
        break;
      case "Ax":
        this.nota.fileName = `${this.infoSubsistema.folder}/${this.infoSubsistema.type} - ${this.nota.id}`;
        break;
    }
    return this.nota.fileName;
  }
};

// src/modules/noteLifecycleManager/API/YAMLUpdaterAPI.ts
var import_obsidian20 = require("obsidian");
var YAMLUpdaterAPI = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.infoNota = {};
    this.nota = {};
    this.tp = this.getTp();
    this.pathCampos = this.plugin.settings.file_camposCentral + ".md";
  }
  async actualizarNota(infoNota, campos) {
    let nota = {};
    Object.assign(this.infoNota, infoNota);
    try {
      for (let campo of campos) {
        const functionName = `get${campo.charAt(0).toUpperCase() + campo.slice(1)}`;
        if (typeof this[functionName] === "function") {
          nota[campo] = await this[functionName]();
        } else {
          console.error(`La funci\xF3n ${functionName} no est\xE1 definida.`);
        }
      }
      if (Object.keys(nota).length > 0) {
        await this.updateYAMLFields(nota, infoNota.file.path);
      } else {
      }
    } catch (error) {
      console.error("No se pudo crear el objeto de registro.", error);
      new import_obsidian20.Notice("No se pudo crear el objeto de registro.");
      return null;
    }
    return nota;
  }
  async updateYAMLFields(nota, ruta) {
    try {
      const file = app.vault.getAbstractFileByPath(ruta);
      await app.fileManager.processFrontMatter(file, (frontmatter) => {
        for (const campo in nota) {
          if (frontmatter.hasOwnProperty(campo)) {
            frontmatter[campo] = nota[campo];
          }
        }
      });
      console.log("Frontmatter actualizado con \xE9xito");
    } catch (err) {
      console.error("Error al actualizar el frontmatter", err);
    }
  }
  getTp() {
    if (!this.plugin || !this.plugin.app.plugins.enabledPlugins.has("templater-obsidian")) {
      console.error("El plugin Templater no est\xE1 habilitado.");
      return;
    }
    let tpGen = this.plugin.app.plugins.plugins["templater-obsidian"].templater;
    tpGen = tpGen.functions_generator.internal_functions.modules_array;
    let tp = {};
    tp.system = tpGen.find((m) => m.name == "system");
    if (!tp.system) {
      console.error("No se pudo acceder al objeto de funciones actuales de Templater.");
      return;
    }
    console.log("tp en YAMLUpdaterAPI se ha cargado satisfactoriamente");
    return tp;
  }
  async getFecha() {
    return this.formatearFecha(/* @__PURE__ */ new Date());
  }
  formatearFecha(fecha) {
    const offset = fecha.getTimezoneOffset() * 6e4;
    const fechaLocal = new Date(fecha.getTime() - offset);
    const fechaFormato = fechaLocal.toISOString().split("T")[0];
    const dias = ["Domingo", "Lunes", "Martes", "Mi\xE9rcoles", "Jueves", "Viernes", "S\xE1bado"];
    const diaSemana = dias[fecha.getDay()];
    const horaFormato = fecha.toTimeString().split(" ")[0].substring(0, 5);
    return `${fechaFormato} ${diaSemana} ${horaFormato}`;
  }
  async getHoraFinal() {
    return this.formatearFecha(/* @__PURE__ */ new Date());
  }
  async getTiempoTrabajado() {
    debugger;
    let horaInicioStr = this.infoNota.horaInicio;
    let [fecha, , hora] = horaInicioStr.split(" ");
    let fechaHoraISO = `${fecha}T${hora}`;
    let horaInicio = new Date(fechaHoraISO);
    let ahora = /* @__PURE__ */ new Date();
    let diferenciaEnMilisegundos = ahora - horaInicio;
    return diferenciaEnMilisegundos;
  }
  async getSecId() {
  }
  async getTitulo() {
    let titulo = await this.tp.system.prompt(`Titulo de este(a) ${this.infoSubsistema.name}`, `${this.infoSubsistema.name} - ${this.nota.id}`, true);
    if (titulo === null) {
      new import_obsidian20.Notice("Creaci\xF3n de nota cancelada por el usuario.");
      return;
    }
    this.nota.titulo = titulo;
    return titulo;
  }
  async getDescripcion() {
    let descripcion = await this.tp.system.prompt("\xBFQuieres agregar una descripci\xF3n?", ` Esta nota es sobre ${this.nota.titulo}`, false, true);
    if (descripcion === null) {
      new import_obsidian20.Notice("Creaci\xF3n de nota cancelada por el usuario.");
      return;
    }
    this.nota.descripcion = descripcion;
    return descripcion;
  }
  async getAliases() {
    this.nota.aliases = [];
    switch (this.infoSubsistema.type) {
      case "Ax":
        this.nota.aliases.push(`${this.nota.titulo}`);
        this.nota.aliases.push(`${this.infoSubsistema.type} - ${this.nota.titulo}`);
        break;
      case "AV":
      case "AI":
        break;
    }
    return this.nota.aliases;
  }
  async getAsunto() {
    let siAsunto, nombre;
    let activo = app.workspace.getActiveFile();
    if (activo != null) {
      nombre = activo.basename;
      const nota = app.metadataCache.getFileCache(activo);
      siAsunto = await this.tp.system.suggester(["Si", "No"], [true, false], true, nombre + " es origen de " + this.nota.titulo + "?");
    } else {
      siAsunto = false;
      nombre = "";
    }
    this.nota.asunto = {};
    this.nota.asunto.siAsunto = siAsunto;
    this.nota.asunto.nombre = nombre;
    return { siAsunto, nombre };
  }
  async getClasificacion() {
    var _a;
    let clasificacion, tagClasificacion, clasificacionAX, tagsClasificacionAX;
    let nuevaClasificacion = false;
    const file = app.vault.getAbstractFileByPath(this.pathCampos);
    const frontmatter = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    if (frontmatter) {
      clasificacionAX = frontmatter.tituloClasificacionAX || [];
      tagsClasificacionAX = frontmatter.tagsClasificacionAX || [];
      tagClasificacion = await this.tp.system.suggester(clasificacionAX, tagsClasificacionAX, false, "\xBFClasificar\xEDas esta nota bajo alguna de las siguientes categor\xEDas?");
      if (tagClasificacion === null) {
        new import_obsidian20.Notice("Creaci\xF3n de nota cancelada por el usuario.");
        return;
      } else if (tagClasificacion == "Nuevo") {
        clasificacion = await this.tp.system.prompt("\xBFCual es el nombre de la nueva clasificaci\xF3n que vas a ingresar?", "MiClasificaci\xF3n", true);
        if (clasificacion === null) {
          new import_obsidian20.Notice("Creaci\xF3n de nota cancelada por el usuario.");
          return;
        }
        tagClasificacion = await this.tp.system.prompt("\xBFCual es el tag que utilizaras para " + clasificacion + "?. No utilices espacios en la definici\xF3n del tag.", "nuevoTag", true);
        if (tagClasificacion === null) {
          new import_obsidian20.Notice("Creaci\xF3n de nota cancelada por el usuario.");
          return;
        }
        nuevaClasificacion = true;
      } else if (tagClasificacion == "Ninguna") {
        tagClasificacion = "";
        clasificacion = "";
      } else {
        let indice = tagsClasificacionAX.indexOf(tagClasificacion);
        clasificacion = clasificacionAX[indice];
      }
    }
    if (nuevaClasificacion) {
      try {
        await app.fileManager.processFrontMatter(file, (frontmatter2) => {
          let newClasificacion = [...clasificacionAX, clasificacion];
          let newTagClasificacion = [...tagsClasificacionAX, tagClasificacion];
          frontmatter2.tituloClasificacionAX = newClasificacion;
          frontmatter2.tagsClasificacionAX = newTagClasificacion;
          console.log("Frontmatter actualizado con \xE9xito");
        });
      } catch (err) {
        console.error("Error al actualizar el frontmatter", err);
      }
    }
    if (tagClasificacion != "") {
      tagClasificacion = "cl/" + tagClasificacion;
    }
    this.nota.clasificacionAX = clasificacion;
    this.nota.tagClasificacionAX = tagClasificacion;
    return { clase: clasificacion, tag: tagClasificacion };
  }
  // ->
  async getEstado() {
    let suggester = this.tp.system.static_functions.get("suggester");
    let campo = await suggester(["\u{1F535} -> Completado - Informaci\xF3n", "\u{1F7E2} -> Finalizado", "\u{1F7E1} -> En ejecuci\xF3n", "\u{1F534} -> Detenido"], ["\u{1F535}", "\u{1F7E2}", "\u{1F7E1}", "\u{1F534}"], false, "Seleccione el nuevo estado:");
    if (campo === null) {
      new import_obsidian20.Notice("Modificaci\xF3n de nota cancelada por el usuario.");
      return;
    }
    this.nota.estado = campo;
    return campo;
  }
  async getFilename() {
    switch (this.infoSubsistema.type) {
      case "AV":
      case "AI":
        this.nota.fileName = `${this.infoSubsistema.folder}/${this.nota.titulo}/index${this.infoSubsistema.type}`;
        break;
      case "Ax":
        this.nota.fileName = `${this.infoSubsistema.folder}/${this.infoSubsistema.type} - ${this.nota.id}`;
        break;
    }
    return this.nota.fileName;
  }
};

// src/main.ts
var ManagementPlugin = class extends import_obsidian21.Plugin {
  constructor() {
    super(...arguments);
    // Declara una propiedad `settings` para almacenar la configuración del plugin.
    this.statusBarExtension = null;
    this.moduloRegistroTiempo = null;
    this.moduloBase = null;
    this.registeredCommandIdsRT = [];
    this.registeredCommandIdsMB = [];
    this.ribbonButtonRT = null;
  }
  // Declara una propiedad para mantener una instancia de `StatusBarExtension`.
  async onload() {
    await this.loadSettings();
    this.registroTiempoAPI = new registroTiempoAPI(this);
    this.starterAPI = new starterAPI(this);
    this.YAMLUpdaterAPI = new YAMLUpdaterAPI(this);
    this.addSettingTab(new PluginMainSettingsTab(this));
    this.statusBarExtension = new StatusBarExtension(this);
    this.moduloRegistroTiempo = new ModuloRegistroTiempo(this);
    this.moduloBase = new ModuloBase(this);
    this.applyConfiguration();
    console.log("Iniciando carga de plugin de Gesti\xF3n Personal");
  }
  addSettingTab(arg0) {
    throw new Error("Method not implemented.");
  }
  applyConfiguration() {
    var _a, _b, _c, _d, _e, _f;
    if (this.settings.moduloBase) {
      (_a = this.moduloBase) == null ? void 0 : _a.activate(this);
    } else {
      (_b = this.moduloBase) == null ? void 0 : _b.deactivate(this);
    }
    if (this.settings.moduloRegistroTiempo) {
      (_c = this.moduloRegistroTiempo) == null ? void 0 : _c.activate(this);
    } else {
      (_d = this.moduloRegistroTiempo) == null ? void 0 : _d.deactivate(this);
    }
    if (this.settings.moduloAliasStatusBar) {
      (_e = this.statusBarExtension) == null ? void 0 : _e.activate();
    } else {
      (_f = this.statusBarExtension) == null ? void 0 : _f.deactivate();
    }
  }
  async onunload() {
    console.log("Descargando plugin Gesti\xF3n Personal");
    return Promise.resolve();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.applyConfiguration();
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3NldHRpbmdzVGFiLnRzIiwgInNyYy9tb2R1bGVzL21vZHVsb0Jhc2UvaW5kZXgudHMiLCAic3JjL21vZHVsZXMvbW9kdWxvQmFzZS91dGlscy9jcmVhckNhcnBldGEudHMiLCAic3JjL3BsYW50aWxsYXMvQW5vdGFjaW9uZXMvUGx0IC0gQW5vdGFjaW9uZXMudHMiLCAic3JjL21vZHVsZXMvbW9kdWxvQmFzZS91dGlscy9jcmVhclBsYW50aWxsYS50cyIsICJzcmMvbW9kdWxlcy9tb2R1bG9CYXNlL2NvbW1hbmRzLnRzIiwgInNyYy9tb2R1bGVzL21vZHVsb0Jhc2UvdXRpbHMvY3JlYXRlTm90ZUZyb21UZW1wbGF0ZS50cyIsICJzcmMvbW9kdWxlcy9NX2J1c3F1ZWRhQXZhbnphZGEvYWN0aXZhZG9yZXMudHMiLCAic3JjL21vZHVsZXMvTV9idXNxdWVkYUF2YW56YWRhL3VpL3JpYmJvbkJ1dHRvbi50cyIsICJzcmMvbW9kdWxlcy9NX2J1c3F1ZWRhQXZhbnphZGEvdWkvbW9kYWwudHMiLCAic3JjL21vZHVsZXMvTV9idXNxdWVkYUF2YW56YWRhL3NlYXJjaC9GdXp6eU5vdGVTdWdnZXN0ZXIudHMiLCAic3JjL21vZHVsZXMvbW9kdWxvQWxpYXNTdGF0dXNCYXIvc3RhdHVzQmFyLnRzIiwgInNyYy9tb2R1bGVzL21vZHVsb1JlZ2lzdHJvVGllbXBvL2luZGV4LnRzIiwgInNyYy9tb2R1bGVzL21vZHVsb1JlZ2lzdHJvVGllbXBvL3JpYmJvbk1lbnUudHMiLCAic3JjL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG8vdXRpbHMudHMiLCAic3JjL21vZHVsZXMvbW9kYWxlcy9zZWxlY2Npb25Nb2RhbC50cyIsICJzcmMvbW9kdWxlcy9tb2R1bG9SZWdpc3Ryb1RpZW1wby9jb21tYW5kcy50cyIsICJzcmMvbW9kdWxlcy9tb2R1bG9SZWdpc3Ryb1RpZW1wby9tb2RhbHMvbW9kYWxfQWhvcmEudHMiLCAic3JjL2RlZmF1bHRzL2RlZmF1bHRTZXR0aW5ncy50cyIsICJzcmMvbW9kdWxlcy9tb2R1bG9SZWdpc3Ryb1RpZW1wby9BUEkvdXRpbHNBUEkudHMiLCAic3JjL21vZHVsZXMvbW9kdWxvUmVnaXN0cm9UaWVtcG8vQVBJL21lbnVPdHJvLnRzIiwgInNyYy9tb2R1bGVzL21vZGFsZXMvZnV6enlTZWxlY3RPckNyZWF0ZS50cyIsICJzcmMvbW9kdWxlcy9tb2R1bG9SZWdpc3Ryb1RpZW1wby9BUEkvcmVnaXN0cm9UaWVtcG9BUEkudHMiLCAic3JjL21vZHVsZXMvbm90ZUxpZmVjeWNsZU1hbmFnZXIvQVBJL3N0YXJ0ZXJBUEkudHMiLCAic3JjL21vZHVsZXMvbm90ZUxpZmVjeWNsZU1hbmFnZXIvQVBJL1lBTUxVcGRhdGVyQVBJLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIgIGltcG9ydCB7IFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJztcbiAgaW1wb3J0IHsgUGx1Z2luTWFpblNldHRpbmdzVGFiIH0gZnJvbSAnLi9zZXR0aW5nc1RhYic7XG4gIGltcG9ydCB7IE1vZHVsb0Jhc2UgfSBmcm9tIFwiLi9tb2R1bGVzL21vZHVsb0Jhc2UvaW5kZXhcIjtcbiAgaW1wb3J0IHthY3RpdmF0ZU1vZHVsb0J1c3F1ZWRhQXZhbnphZGF9IGZyb20gXCIuL21vZHVsZXMvTV9idXNxdWVkYUF2YW56YWRhL2FjdGl2YWRvcmVzXCJcbiAgaW1wb3J0IHsgU3RhdHVzQmFyRXh0ZW5zaW9uIH0gZnJvbSBcIi4vbW9kdWxlcy9tb2R1bG9BbGlhc1N0YXR1c0Jhci9zdGF0dXNCYXJcIjtcbiAgaW1wb3J0IHsgTW9kdWxvUmVnaXN0cm9UaWVtcG8gfSBmcm9tIFwiLi9tb2R1bGVzL21vZHVsb1JlZ2lzdHJvVGllbXBvL2luZGV4XCI7XG4gIGltcG9ydCB0eXBlIHsgUGx1Z2luTWFpblNldHRpbmdzIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BsdWdpbk1haW5TZXR0aW5ncyc7XG4gIGltcG9ydCB7IERFRkFVTFRfU0VUVElOR1MgfSBmcm9tICcuL2RlZmF1bHRzL2RlZmF1bHRTZXR0aW5ncyc7XG4gIGltcG9ydCB7cmVnaXN0cm9UaWVtcG9BUEl9IGZyb20gJy4vbW9kdWxlcy9tb2R1bG9SZWdpc3Ryb1RpZW1wby9BUEkvcmVnaXN0cm9UaWVtcG9BUEknXG4gIGltcG9ydCB7IHN0YXJ0ZXJBUEl9IGZyb20gJy4vbW9kdWxlcy9ub3RlTGlmZWN5Y2xlTWFuYWdlci9BUEkvc3RhcnRlckFQSSc7XG4gIGltcG9ydCB7IFlBTUxVcGRhdGVyQVBJIH0gZnJvbSAnLi9tb2R1bGVzL25vdGVMaWZlY3ljbGVNYW5hZ2VyL0FQSS9ZQU1MVXBkYXRlckFQSSc7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYW5hZ2VtZW50UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgc2V0dGluZ3M6IFBsdWdpbk1haW5TZXR0aW5ncyB8IHVuZGVmaW5lZDtcbiAgLy8gRGVjbGFyYSB1bmEgcHJvcGllZGFkIGBzZXR0aW5nc2AgcGFyYSBhbG1hY2VuYXIgbGEgY29uZmlndXJhY2lcdTAwRjNuIGRlbCBwbHVnaW4uXG4gIHN0YXR1c0JhckV4dGVuc2lvbjogU3RhdHVzQmFyRXh0ZW5zaW9uIHwgbnVsbCA9IG51bGw7XG4gIG1vZHVsb1JlZ2lzdHJvVGllbXBvOiBNb2R1bG9SZWdpc3Ryb1RpZW1wbyB8IG51bGwgPSBudWxsO1xuICBtb2R1bG9CYXNlOiBNb2R1bG9CYXNlIHwgbnVsbCA9IG51bGw7XG4gIHJlZ2lzdGVyZWRDb21tYW5kSWRzUlQ6IHN0cmluZ1tdID0gW107XG4gIHJlZ2lzdGVyZWRDb21tYW5kSWRzTUI6IHN0cmluZ1tdID0gW107XG4gIHJpYmJvbkJ1dHRvblJUOiBSZXR1cm5UeXBlPFBsdWdpblsnYWRkUmliYm9uSWNvbiddPiB8IG51bGwgPSBudWxsO1xuICBhcHA6IGFueTtcbiAgcmVnaXN0cm9UaWVtcG9BUEk6IHJlZ2lzdHJvVGllbXBvQVBJIHwgdW5kZWZpbmVkO1xuICBzdGFydGVyQVBJOiBzdGFydGVyQVBJIHwgdW5kZWZpbmVkO1xuICAvLyBEZWNsYXJhIHVuYSBwcm9waWVkYWQgcGFyYSBtYW50ZW5lciB1bmEgaW5zdGFuY2lhIGRlIGBTdGF0dXNCYXJFeHRlbnNpb25gLlxuICBcblxuICAgIGFzeW5jIG9ubG9hZCgpIHsgXG4gICAgICAgIFxuICAgICAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuICAgICAgICAvLyBjYXJnYXIgQVBJIHJlZ2lzdHJvIFRpZW1wb1xuICAgICAgICB0aGlzLnJlZ2lzdHJvVGllbXBvQVBJID0gbmV3IHJlZ2lzdHJvVGllbXBvQVBJKHRoaXMpO1xuICAgICAgICB0aGlzLnN0YXJ0ZXJBUEkgPSBuZXcgc3RhcnRlckFQSSh0aGlzKTtcbiAgICAgICAgdGhpcy5ZQU1MVXBkYXRlckFQSSA9IG5ldyBZQU1MVXBkYXRlckFQSSh0aGlzKTtcbiAgICAgICAgLy8gQVx1MDBGMWFkZSBsYSBwZXN0YVx1MDBGMWEgZGUgY29uZmlndXJhY2lcdTAwRjNuIC0gXG4gICAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgUGx1Z2luTWFpblNldHRpbmdzVGFiKHRoaXMpKTtcbiAgICAgICAgLy8gSW5pY2lhbGl6YSBsYXMgaW5zdGFuY2lhcyBkZSBsb3MgbVx1MDBGM2R1bG9zXG4gICAgICAgIHRoaXMuc3RhdHVzQmFyRXh0ZW5zaW9uID0gbmV3IFN0YXR1c0JhckV4dGVuc2lvbih0aGlzKTtcbiAgICAgICAgdGhpcy5tb2R1bG9SZWdpc3Ryb1RpZW1wbyA9IG5ldyBNb2R1bG9SZWdpc3Ryb1RpZW1wbyh0aGlzKTtcbiAgICAgICAgdGhpcy5tb2R1bG9CYXNlID0gbmV3IE1vZHVsb0Jhc2UodGhpcyk7XG4gICAgICAgIHRoaXMuYXBwbHlDb25maWd1cmF0aW9uKCk7XG4gICAgICAgIC8vIEFwbGljYSBsYSBjb25maWd1cmFjaVx1MDBGM24gaW5pY2lhbCBiYXNhZGEgZW4gbG9zIGFqdXN0ZXMgY2FyZ2Fkb3MgbyBwcmVkZXRlcm1pbmFkb3MuXG4gICAgICAgIGNvbnNvbGUubG9nKCdJbmljaWFuZG8gY2FyZ2EgZGUgcGx1Z2luIGRlIEdlc3RpXHUwMEYzbiBQZXJzb25hbCcpO1xuICAgICAgXG4gICAgICB9XG4gIGFkZFNldHRpbmdUYWIoYXJnMDogUGx1Z2luTWFpblNldHRpbmdzVGFiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICB9XG5cbiAgICAgIGFwcGx5Q29uZmlndXJhdGlvbigpIHtcbiAgICAgICAgLy8gTW9kdWxvIEJhc2UgZXMgZWwgbVx1MDBGM2R1bG8gc29icmUgZWwgcXVlIGVzdG95IGhhY2llbmRvIHBydWViYXMgZGUgZGVzYXJyb2xsby5cbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubW9kdWxvQmFzZSkge1xuICAgICAgICAgIHRoaXMubW9kdWxvQmFzZT8uYWN0aXZhdGUodGhpcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubW9kdWxvQmFzZT8uZGVhY3RpdmF0ZSh0aGlzKTtcbiAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubW9kdWxvUmVnaXN0cm9UaWVtcG8pIHtcbiAgICAgICAgICAgIHRoaXMubW9kdWxvUmVnaXN0cm9UaWVtcG8/LmFjdGl2YXRlKHRoaXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tb2R1bG9SZWdpc3Ryb1RpZW1wbz8uZGVhY3RpdmF0ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubW9kdWxvQWxpYXNTdGF0dXNCYXIpIHtcbiAgICAgICAgICB0aGlzLnN0YXR1c0JhckV4dGVuc2lvbj8uYWN0aXZhdGUoKTtcbiAgICAgICAgICAvLyBTaSBsYSBjb25maWd1cmFjaVx1MDBGM24gcGFyYSBgbW9kdWxvQWxpYXNTdGF0dXNCYXJgIGVzIHZlcmRhZGVyYSwgYWN0aXZhIGVsIG1cdTAwRjNkdWxvLlxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc3RhdHVzQmFyRXh0ZW5zaW9uPy5kZWFjdGl2YXRlKCk7XG4gICAgICAgICAgLy8gU2kgZXMgZmFsc2EsIGRlc2FjdGl2YSBlbCBtXHUwMEYzZHVsby5cbiAgICAgICAgfVxuXG4gICAgfVxuICAgIFxuICAgICAgYXN5bmMgb251bmxvYWQoKSB7XG4gICAgICAgICAgLy8gQ1x1MDBGM2RpZ28gZGUgbGltcGllemEgYXF1XHUwMEVEXG4gICAgICAgICAgY29uc29sZS5sb2coJ0Rlc2NhcmdhbmRvIHBsdWdpbiBHZXN0aVx1MDBGM24gUGVyc29uYWwnKTtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB9XG5cbiAgICAgIGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcbiAgICAgICAgLy8gTVx1MDBFOXRvZG8gcGFyYSBjYXJnYXIgbGEgY29uZmlndXJhY2lcdTAwRjNuIGRlc2RlIGVsIGFsbWFjZW5hbWllbnRvIGRlIE9ic2lkaWFuLlxuICAgICAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcbiAgICAgICAgLy8gSW50ZW50YSBjYXJnYXIgbGEgY29uZmlndXJhY2lcdTAwRjNuIHkgbWV6Y2xhIGxvcyB2YWxvcmVzIGNhcmdhZG9zIGNvbiBsb3MgcHJlZGV0ZXJtaW5hZG9zLlxuICAgICAgfVxuXG4gICAgICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG4gICAgICAgIC8vIE1cdTAwRTl0b2RvIHBhcmEgZ3VhcmRhciBsYSBjb25maWd1cmFjaVx1MDBGM24gYWN0dWFsIGVuIGVsIGFsbWFjZW5hbWllbnRvIGRlIE9ic2lkaWFuLlxuICAgICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuICAgICAgICAvLyBHdWFyZGEgbGEgY29uZmlndXJhY2lcdTAwRjNuIGFjdHVhbC5cbiAgICAgICAgXG4gICAgICAgIHRoaXMuYXBwbHlDb25maWd1cmF0aW9uKCk7XG4gICAgICAgIC8vIFZ1ZWx2ZSBhIGFwbGljYXIgbGEgY29uZmlndXJhY2lcdTAwRjNuIHBhcmEgYXNlZ3VyYXJzZSBkZSBxdWUgbG9zIGNhbWJpb3MgcmVjaWVudGVzIHNlIHJlZmxlamVuIGlubWVkaWF0YW1lbnRlLlxuICAgICAgfVxuICB9XG4iLCAiaW1wb3J0IHsgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5leHBvcnQgY2xhc3MgUGx1Z2luTWFpblNldHRpbmdzVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gICAgcGx1Z2luOiBQbHVnaW47XG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IFBsdWdpbikge1xuICAgICAgICBzdXBlcihwbHVnaW4uYXBwLCBwbHVnaW4pO1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICB9XG5cbiAgICBkaXNwbGF5KCk6IHZvaWQge1xuICAgICAgICBjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xuICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdDb25maWd1cmFjaVx1MDBGM24gZGVsIHBsdWdpbiBkZSBHZXN0aVx1MDBGM24gUGVyc29uYWwnIH0pO1xuXG4gICAgICAgIC8vIENyZWFyIGNvbnRlbmVkb3JlcyBwYXJhIGxhcyBwZXN0YVx1MDBGMWFzIHkgZWwgY29udGVuaWRvIGRlIGxhcyBwZXN0YVx1MDBGMWFzXG4gICAgICAgIGNvbnN0IHRhYkNvbnRhaW5lciA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdih7IGNsczogJ3RhYi1jb250YWluZXInIH0pO1xuICAgICAgICBjb25zdCB0YWJDb250ZW50Q29udGFpbmVyID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KHsgY2xzOiAndGFiLWNvbnRlbnQtY29udGFpbmVyJyB9KTtcblxuICAgICAgICAvLyBEZWZpbmUgbG9zIHRcdTAwRUR0dWxvcyBkZSBsYXMgcGVzdGFcdTAwRjFhc1xuICAgICAgICBjb25zdCB0YWJUaXRsZXMgPSBbJ0FjdGl2YXIgTVx1MDBGM2R1bG9zJywgJ0RpcmVjdG9yaW9zIFN1YnNpc3RlbWFzJywgJ1Blc3RhXHUwMEYxYSAzJ107XG5cbiAgICAgICAgLy8gQ3JlYXIgcGVzdGFcdTAwRjFhcyB5IGNvbnRlbmlkbyBlc3BlY1x1MDBFRGZpY29cbiAgICAgICAgdGFiVGl0bGVzLmZvckVhY2goKHRpdGxlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgLy8gQ3JlYXIgYm90b25lcyBkZSBwZXN0YVx1MDBGMWFcbiAgICAgICAgICAgIGNvbnN0IHRhYkJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICAgICAgdGFiQnV0dG9uLnRleHRDb250ZW50ID0gdGl0bGU7XG4gICAgICAgICAgICB0YWJCdXR0b24uY2xhc3NMaXN0LmFkZCgndGFiLWxpbmsnKTtcbiAgICAgICAgICAgIHRhYkJ1dHRvbi5kYXRhc2V0LnRhYiA9IGB0YWIke2luZGV4fWA7XG4gICAgICAgICAgICB0YWJCdXR0b24ub25jbGljayA9ICgpID0+IHRoaXMub3BlblRhYihgdGFiJHtpbmRleH1gKTtcbiAgICAgICAgICAgIHRhYkNvbnRhaW5lci5hcHBlbmRDaGlsZCh0YWJCdXR0b24pO1xuXG4gICAgICAgICAgICAvLyBDcmVhciBjb250ZW5pZG8gZGUgcGVzdGFcdTAwRjFhXG4gICAgICAgICAgICBjb25zdCB0YWJDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICB0YWJDb250ZW50LmlkID0gYHRhYiR7aW5kZXh9YDtcbiAgICAgICAgICAgIHRhYkNvbnRlbnQuY2xhc3NMaXN0LmFkZCgndGFiLWNvbnRlbnQnKTtcbiAgICAgICAgICAgIHRhYkNvbnRlbnRDb250YWluZXIuYXBwZW5kQ2hpbGQodGFiQ29udGVudCk7XG5cbiAgICAgICAgICAgIC8vIEluaWNpYWxtZW50ZSBvY3VsdGFyIGVsIGNvbnRlbmlkbyBkZSBsYSBwZXN0YVx1MDBGMWEsIGV4Y2VwdG8gZWwgcHJpbWVyb1xuICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkgdGFiQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgICAgICAgICAvLyBDb250ZW5pZG8gcGFyYSBsYSBwcmltZXJhIHBlc3RhXHUwMEYxYVxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcodGFiQ29udGVudClcbiAgICAgICAgICAgICAgICAuc2V0TmFtZSgnVmVyIEFsaWFzIGVuIGVsIFN0YXR1cyBCYXInKVxuICAgICAgICAgICAgICAgIC5zZXREZXNjKCdFbGlnZSBzaSBkZXNlYXMgdmVyIGVsIEFsaWFzZXMgZGUgbGFzIG5vdGFzIGVuIGVsIFN0YXR1cyBCYXIuJylcbiAgICAgICAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGU6IHsgc2V0VmFsdWU6IChhcmcwOiBhbnkpID0+IHsgKCk6IGFueTsgbmV3KCk6IGFueTsgb25DaGFuZ2U6IHsgKGFyZzA6ICh2YWx1ZTogYW55KSA9PiBQcm9taXNlPHZvaWQ+KTogYW55OyBuZXcoKTogYW55OyB9OyB9OyB9KSA9PiB0b2dnbGVcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm1vZHVsb0FsaWFzU3RhdHVzQmFyKVxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm1vZHVsb0FsaWFzU3RhdHVzQmFyID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKHRhYkNvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdBY3RpdmFyIE1cdTAwRjNkdWxvIFJlZ2lzdHJvIFRpZW1wbycpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKCdBY3RpdmEgbyBkZXNhY3RpdmEgZWwgbVx1MDBGM2R1bG8gZGUgcmVnaXN0cm8gZGUgdGllbXBvLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZTogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRvZ2dsZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm1vZHVsb1JlZ2lzdHJvVGllbXBvKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubW9kdWxvUmVnaXN0cm9UaWVtcG8gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyh0YWJDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnQWN0aXZhciBNXHUwMEYzZHVsbyBCYXNlIC0gUHJ1ZWJhcycpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKCdBY3RpdmEgbyBkZXNhY3RpdmEgZWwgbVx1MDBGM2R1bG8gZGUgcHJ1ZWJhcy4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGU6IHsgc2V0VmFsdWU6IChhcmcwOiBhbnkpID0+IHsgKCk6IGFueTsgbmV3KCk6IGFueTsgb25DaGFuZ2U6IHsgKGFyZzA6ICh2YWx1ZTogYW55KSA9PiBQcm9taXNlPHZvaWQ+KTogYW55OyBuZXcoKTogYW55OyB9OyB9OyB9KSA9PiB0b2dnbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5tb2R1bG9CYXNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubW9kdWxvQmFzZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICBcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDb250ZW5pZG8gcGFyYSBsYSBzZWd1bmRhIHBlc3RhXHUwMEYxYVxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gRnVuY2lcdTAwRjNuIHBhcmEgbWFuZWphciBlbCBjbGljIGVuIGVsIHRcdTAwRUR0dWxvIGRlbCBibG9xdWUgZGVzcGxlZ2FibGVcbiAgICAgICAgICAgICAgICBjb25zdCB0b2dnbGVDb2xsYXBzZSA9IChldmVudDogeyB0YXJnZXQ6IHsgbmV4dEVsZW1lbnRTaWJsaW5nOiBhbnk7IGlubmVySFRNTDogc3RyaW5nOyBnZXRBdHRyaWJ1dGU6IChhcmcwOiBzdHJpbmcpID0+IHN0cmluZzsgfTsgfSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0RWxlbWVudCA9IGV2ZW50LnRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0RWxlbWVudC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LmlubmVySFRNTCA9ICcmIzk2NjA7ICcgKyBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXRpdGxlJyk7IC8vIENhbWJpYSBlbCBpY29ubyBhIFwiYWJham9cIlxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC5pbm5lckhUTUwgPSAnJiM5NjU0OyAnICsgZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS10aXRsZScpOyAvLyBDYW1iaWEgZWwgaWNvbm8gYSBcImRlcmVjaGFcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgLy8gQmxvcXVlIGRlc3BsZWdhYmxlIHBhcmEgXCJBbm90YWNpb25lc1wiXG4gICAgICAgICAgICAgICAgY29uc3QgYW5vdGFjaW9uZXNUaXRsZSA9IHRhYkNvbnRlbnQuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdcdTI1QjYgU3Vic2lzdGVtYSBkZSBcIkFub3RhY2lvbmVzXCInIH0pO1xuICAgICAgICAgICAgICAgIGFub3RhY2lvbmVzVGl0bGUuc2V0QXR0cmlidXRlKCdkYXRhLXRpdGxlJywgJ1N1YnNpc3RlbWEgZGUgXCJBbm90YWNpb25lc1wiJyk7XG4gICAgICAgICAgICAgICAgYW5vdGFjaW9uZXNUaXRsZS5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XG4gICAgICAgICAgICAgICAgY29uc3QgYW5vdGFjaW9uZXNDb250ZW50ID0gdGFiQ29udGVudC5jcmVhdGVEaXYoKTtcbiAgICAgICAgICAgICAgICBhbm90YWNpb25lc0NvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJzsgLy8gT2N1bHRhIGluaWNpYWxtZW50ZSBsb3MgYWp1c3Rlc1xuICAgICAgICAgICAgICAgIGFub3RhY2lvbmVzVGl0bGUub25jbGljayA9IHRvZ2dsZUNvbGxhcHNlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoYW5vdGFjaW9uZXNDb250ZW50KSAvLyBVc2Ftb3MgYGJsb2dDb250ZW50YCBlbiBsdWdhciBkZSBgdGFiQ29udGVudGBcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ0NhcnBldGEgZGUgQW5vdGFjaW9uZXMnKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGUgbGEgY2FycGV0YSBkb25kZSBzZSBndWFyZGFyXHUwMEUxbiB0b2RhcyBsYXMgQW5vdGFjaW9uZXMuJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQ6IHsgc2V0VmFsdWU6IChhcmcwOiBhbnkpID0+IHsgKCk6IGFueTsgbmV3KCk6IGFueTsgb25DaGFuZ2U6IHsgKGFyZzA6ICh2YWx1ZTogYW55KSA9PiBQcm9taXNlPHZvaWQ+KTogYW55OyBuZXcoKTogYW55OyB9OyB9OyB9KSA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX0Fub3RhY2lvbmVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX0Fub3RhY2lvbmVzID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhhbm90YWNpb25lc0NvbnRlbnQpIC8vIFVzYW1vcyBgYmxvZ0NvbnRlbnRgIGVuIGx1Z2FyIGRlIGB0YWJDb250ZW50YFxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnSW5kaWNlIGRlIEFub3RhY2lvbmVzJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlbCBcdTAwRURuZGljZSBkZSBsYXMgQW5vdGFjaW9uZXMuJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQ6IHsgc2V0VmFsdWU6IChhcmcwOiBhbnkpID0+IHsgKCk6IGFueTsgbmV3KCk6IGFueTsgb25DaGFuZ2U6IHsgKGFyZzA6ICh2YWx1ZTogYW55KSA9PiBQcm9taXNlPHZvaWQ+KTogYW55OyBuZXcoKTogYW55OyB9OyB9OyB9KSA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX0Fub3RhY2lvbmVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX0Fub3RhY2lvbmVzID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAvLyBCbG9xdWUgZGVzcGxlZ2FibGUgcGFyYSBcIkFydFx1MDBFRGN1bG9zIGRlIEJsb2dcIlxuICAgICAgICAgICAgICAgIGNvbnN0IGJsb2dUaXRsZSA9IHRhYkNvbnRlbnQuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdcdTI1QjYgU3Vic2lzdGVtYSBkZSBcIkFydFx1MDBFRGN1bG9zIGRlIEJsb2dcIicgfSk7XG4gICAgICAgICAgICAgICAgYmxvZ1RpdGxlLnNldEF0dHJpYnV0ZSgnZGF0YS10aXRsZScsICdTdWJzaXN0ZW1hIGRlIFwiQXJ0XHUwMEVEY3Vsb3MgZGUgQmxvZ1wiJyk7XG4gICAgICAgICAgICAgICAgYmxvZ1RpdGxlLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICAgICAgICAgICAgICBjb25zdCBibG9nQ29udGVudCA9IHRhYkNvbnRlbnQuY3JlYXRlRGl2KCk7XG4gICAgICAgICAgICAgICAgYmxvZ0NvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJzsgLy8gT2N1bHRhIGluaWNpYWxtZW50ZSBsb3MgYWp1c3Rlc1xuICAgICAgICAgICAgICAgIGJsb2dUaXRsZS5vbmNsaWNrID0gdG9nZ2xlQ29sbGFwc2U7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhibG9nQ29udGVudCkgLy8gVXNhbW9zIGBibG9nQ29udGVudGAgZW4gbHVnYXIgZGUgYHRhYkNvbnRlbnRgXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdDYXJwZXRhIGRlIEFydFx1MDBFRGN1bG9zIGRlbCBCbG9nJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlIGxhIGNhcnBldGEgZG9uZGUgc2UgZ3VhcmRhclx1MDBFMW4gbG9zIGFydFx1MDBFRGN1bG9zIGRlbCBibG9nLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9BQmxvZylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9BQmxvZyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoYmxvZ0NvbnRlbnQpIC8vIFVzYW1vcyBgYmxvZ0NvbnRlbnRgIGVuIGx1Z2FyIGRlIGB0YWJDb250ZW50YFxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnSW5kaWNlIGRlIEFydFx1MDBFRGN1bG9zIGRlbCBCbG9nJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlbCBcdTAwRURuZGljZSBkZSBsb3MgYXJ0XHUwMEVEY3Vsb3MgZGVsIGJsb2cuJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQ6IHsgc2V0VmFsdWU6IChhcmcwOiBhbnkpID0+IHsgKCk6IGFueTsgbmV3KCk6IGFueTsgb25DaGFuZ2U6IHsgKGFyZzA6ICh2YWx1ZTogYW55KSA9PiBQcm9taXNlPHZvaWQ+KTogYW55OyBuZXcoKTogYW55OyB9OyB9OyB9KSA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX0FCbG9nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX0FCbG9nID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBCbG9xdWUgZGVzcGxlZ2FibGUgcGFyYSBcIkRlc2Fycm9sbG9zIHkgY1x1MDBGM2RpZ29zXCJcbiAgICAgICAgICAgICAgICBjb25zdCBkZXNhcnJvbGxvc1RpdGxlID0gdGFiQ29udGVudC5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1x1MjVCNiBTdWJzaXN0ZW1hIGRlIFwiRGVzYXJyb2xsb3MgeSBjXHUwMEYzZGlnb3NcIicgfSk7XG4gICAgICAgICAgICAgICAgZGVzYXJyb2xsb3NUaXRsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGl0bGUnLCAnU3Vic2lzdGVtYSBkZSBcIkRlc2Fycm9sbG9zIHkgY1x1MDBGM2RpZ29zXCInKTtcbiAgICAgICAgICAgICAgICBkZXNhcnJvbGxvc1RpdGxlLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICAgICAgICAgICAgICBjb25zdCBkZXNhcnJvbGxvc0NvbnRlbnQgPSB0YWJDb250ZW50LmNyZWF0ZURpdigpO1xuICAgICAgICAgICAgICAgIGRlc2Fycm9sbG9zQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOyAvLyBPY3VsdGEgaW5pY2lhbG1lbnRlIGxvcyBhanVzdGVzXG4gICAgICAgICAgICAgICAgZGVzYXJyb2xsb3NUaXRsZS5vbmNsaWNrID0gdG9nZ2xlQ29sbGFwc2U7XG5cbiAgICAgICAgICAgICAgICAvLyBDb25maWd1cmFjaVx1MDBGM24gcGFyYSBDYXJwZXRhIGRlIERlc2Fycm9sbG9zIHkgQ1x1MDBGM2RpZ29zXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoZGVzYXJyb2xsb3NDb250ZW50KSAvLyBVc2Ftb3MgYGRlc2Fycm9sbG9zQ29udGVudGAgZW4gbHVnYXIgZGUgYHRhYkNvbnRlbnRgXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdDYXJwZXRhIGRlIERlc2Fycm9sbG9zIHkgQ1x1MDBGM2RpZ29zJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlIGxhIGNhcnBldGEgZG9uZGUgc2UgZ3VhcmRhclx1MDBFMW4gbG9zIGRlc2Fycm9sbG9zIHkgY1x1MDBGM2RpZ29zLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9EZXNhcnJvbGxvcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9EZXNhcnJvbGxvcyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ29uZmlndXJhY2lcdTAwRjNuIHBhcmEgXHUwMENEbmRpY2UgZGUgRGVzYXJyb2xsb3MgeSBDXHUwMEYzZGlnb3NcbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhkZXNhcnJvbGxvc0NvbnRlbnQpIC8vIFVzYW1vcyBgZGVzYXJyb2xsb3NDb250ZW50YCBlbiBsdWdhciBkZSBgdGFiQ29udGVudGBcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ1x1MDBDRG5kaWNlIGRlIERlc2Fycm9sbG9zIHkgQ1x1MDBGM2RpZ29zJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlbCBcdTAwRURuZGljZSBkZSBsb3MgZGVzYXJyb2xsb3MgeSBjXHUwMEYzZGlnb3MuJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQ6IHsgc2V0VmFsdWU6IChhcmcwOiBhbnkpID0+IHsgKCk6IGFueTsgbmV3KCk6IGFueTsgb25DaGFuZ2U6IHsgKGFyZzA6ICh2YWx1ZTogYW55KSA9PiBQcm9taXNlPHZvaWQ+KTogYW55OyBuZXcoKTogYW55OyB9OyB9OyB9KSA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX0Rlc2Fycm9sbG9zKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX0Rlc2Fycm9sbG9zID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAvLyBCbG9xdWUgZGVzcGxlZ2FibGUgcGFyYSBcIkVzdHVkaW9cIlxuICAgICAgICAgICAgICAgIGNvbnN0IGVzdHVkaW9UaXRsZSA9IHRhYkNvbnRlbnQuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdcdTI1QjYgU3Vic2lzdGVtYSBkZSBcIkVzdHVkaW9cIicgfSk7XG4gICAgICAgICAgICAgICAgZXN0dWRpb1RpdGxlLnNldEF0dHJpYnV0ZSgnZGF0YS10aXRsZScsICdTdWJzaXN0ZW1hIGRlIFwiRXN0dWRpb1wiJyk7XG4gICAgICAgICAgICAgICAgZXN0dWRpb1RpdGxlLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICAgICAgICAgICAgICBjb25zdCBlc3R1ZGlvQ29udGVudCA9IHRhYkNvbnRlbnQuY3JlYXRlRGl2KCk7XG4gICAgICAgICAgICAgICAgZXN0dWRpb0NvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICBlc3R1ZGlvVGl0bGUub25jbGljayA9IHRvZ2dsZUNvbGxhcHNlO1xuXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoZXN0dWRpb0NvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdDYXJwZXRhIGRlIFRlbWFzIGRlIEVzdHVkaW8nKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGUgbGEgY2FycGV0YSBkb25kZSBzZSBndWFyZGFyXHUwMEUxbiBsb3MgdGVtYXMgZGUgZXN0dWRpby4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfRXN0dWRpbylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9Fc3R1ZGlvID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhlc3R1ZGlvQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ1x1MDBDRG5kaWNlIGRlIEVzdHVkaW8nKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGVsIFx1MDBFRG5kaWNlIGRlIGxvcyB0ZW1hcyBkZSBlc3R1ZGlvLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9Fc3R1ZGlvKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX0VzdHVkaW8gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgIC8vIEJsb3F1ZSBkZXNwbGVnYWJsZSBwYXJhIFwiR1REXCJcbiAgICAgICAgICAgICAgICBjb25zdCBndGRUaXRsZSA9IHRhYkNvbnRlbnQuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdcdTI1QjYgU3Vic2lzdGVtYSBkZSBcIkdURFwiJyB9KTtcbiAgICAgICAgICAgICAgICBndGRUaXRsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGl0bGUnLCAnU3Vic2lzdGVtYSBkZSBcIkdURFwiJyk7XG4gICAgICAgICAgICAgICAgZ3RkVGl0bGUuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuICAgICAgICAgICAgICAgIGNvbnN0IGd0ZENvbnRlbnQgPSB0YWJDb250ZW50LmNyZWF0ZURpdigpO1xuICAgICAgICAgICAgICAgIGd0ZENvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICBndGRUaXRsZS5vbmNsaWNrID0gdG9nZ2xlQ29sbGFwc2U7XG5cbiAgICAgICAgICAgICAgICAvLyBQcm95ZWN0b3MgR1REXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoZ3RkQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ0NhcnBldGEgZGUgUHJveWVjdG9zIEdURCcpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKCdFc3RhYmxlY2UgbGEgcnV0YSBkZSBsYSBjYXJwZXRhIHBhcmEgcHJveWVjdG9zIEdURC4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfUHJveWVjdG9zR1REKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX1Byb3llY3Rvc0dURCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoZ3RkQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ1x1MDBDRG5kaWNlIGRlIFByb3llY3RvcyBHVEQnKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGVsIFx1MDBFRG5kaWNlIHBhcmEgcHJveWVjdG9zIEdURC4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfUHJveWVjdG9zR1REKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX1Byb3llY3Rvc0dURCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmV2aXNpXHUwMEYzbiBTZW1hbmFsXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoZ3RkQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ0NhcnBldGEgZGUgUmV2aXNpb25lcyBTZW1hbmFsZXMgR1REJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlIGxhIGNhcnBldGEgcGFyYSBsYXMgcmV2aXNpb25lcyBzZW1hbmFsZXMgR1RELicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9SU0dURClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9SU0dURCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoZ3RkQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ1x1MDBDRG5kaWNlIGRlIFJldmlzaW9uZXMgU2VtYW5hbGVzIEdURCcpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKCdFc3RhYmxlY2UgbGEgcnV0YSBkZWwgXHUwMEVEbmRpY2UgcGFyYSBsYXMgcmV2aXNpb25lcyBzZW1hbmFsZXMgR1RELicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9SU0dURClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9SU0dURCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgLy8gQmxvcXVlIGRlc3BsZWdhYmxlIHBhcmEgXCJMZWN0dXJhXCJcbiAgICAgICAgICAgICAgICBjb25zdCBsZWN0dXJhVGl0bGUgPSB0YWJDb250ZW50LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnXHUyNUI2IFN1YnNpc3RlbWEgZGUgXCJMZWN0dXJhXCInIH0pO1xuICAgICAgICAgICAgICAgIGxlY3R1cmFUaXRsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGl0bGUnLCAnU3Vic2lzdGVtYSBkZSBcIkxlY3R1cmFcIicpO1xuICAgICAgICAgICAgICAgIGxlY3R1cmFUaXRsZS5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVjdHVyYUNvbnRlbnQgPSB0YWJDb250ZW50LmNyZWF0ZURpdigpO1xuICAgICAgICAgICAgICAgIGxlY3R1cmFDb250ZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgbGVjdHVyYVRpdGxlLm9uY2xpY2sgPSB0b2dnbGVDb2xsYXBzZTtcblxuICAgICAgICAgICAgICAgIC8vIFNlc2lvbmVzIGRlIExlY3R1cmFcbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhsZWN0dXJhQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ0NhcnBldGEgZGUgU2VzaW9uZXMgZGUgTGVjdHVyYScpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKCdFc3RhYmxlY2UgbGEgcnV0YSBkZSBsYSBjYXJwZXRhIHBhcmEgbGFzIHNlc2lvbmVzIGRlIGxlY3R1cmEuJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQ6IHsgc2V0VmFsdWU6IChhcmcwOiBhbnkpID0+IHsgKCk6IGFueTsgbmV3KCk6IGFueTsgb25DaGFuZ2U6IHsgKGFyZzA6ICh2YWx1ZTogYW55KSA9PiBQcm9taXNlPHZvaWQ+KTogYW55OyBuZXcoKTogYW55OyB9OyB9OyB9KSA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX0xlY3R1cmFTZXNpb25lcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9MZWN0dXJhU2VzaW9uZXMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKGxlY3R1cmFDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnXHUwMENEbmRpY2UgZGUgU2VzaW9uZXMgZGUgTGVjdHVyYScpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKCdFc3RhYmxlY2UgbGEgcnV0YSBkZWwgXHUwMEVEbmRpY2UgcGFyYSBsYXMgc2VzaW9uZXMgZGUgbGVjdHVyYS4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfTGVjdHVyYVNlc2lvbmVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX0xlY3R1cmFTZXNpb25lcyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgLy8gTGlicm9zIHkgUmVzXHUwMEZBbWVuZXNcbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhsZWN0dXJhQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ0NhcnBldGEgZGUgUmVzXHUwMEZBbWVuZXMgZGUgTGlicm9zJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlIGxhIGNhcnBldGEgcGFyYSBsb3MgcmVzXHUwMEZBbWVuZXMgZGUgbGlicm9zLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9MZWN0dXJhUmVzdW1lbmVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX0xlY3R1cmFSZXN1bWVuZXMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKGxlY3R1cmFDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnXHUwMENEbmRpY2UgZGUgUmVzXHUwMEZBbWVuZXMgZGUgTGlicm9zJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlbCBcdTAwRURuZGljZSBwYXJhIGxvcyByZXNcdTAwRkFtZW5lcyBkZSBsaWJyb3MuJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQ6IHsgc2V0VmFsdWU6IChhcmcwOiBhbnkpID0+IHsgKCk6IGFueTsgbmV3KCk6IGFueTsgb25DaGFuZ2U6IHsgKGFyZzA6ICh2YWx1ZTogYW55KSA9PiBQcm9taXNlPHZvaWQ+KTogYW55OyBuZXcoKTogYW55OyB9OyB9OyB9KSA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX0xlY3R1cmFSZXN1bWVuZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfTGVjdHVyYVJlc3VtZW5lcyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBc3VtaWVuZG8gcXVlIGVzdGFtb3MgZGVudHJvIGRlIGlmIChpbmRleCA9PT0gMSkgeyAuLi4gfVxuXG4gICAgICAgICAgICAgICAgLy8gQmxvcXVlIGRlc3BsZWdhYmxlIHBhcmEgXCJNZW50b3JcdTAwRURhc1wiXG4gICAgICAgICAgICAgICAgY29uc3QgbWVudG9yaWFzVGl0bGUgPSB0YWJDb250ZW50LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnXHUyNUI2IFN1YnNpc3RlbWEgZGUgXCJNZW50b3JcdTAwRURhc1wiJyB9KTtcbiAgICAgICAgICAgICAgICBtZW50b3JpYXNUaXRsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGl0bGUnLCAnU3Vic2lzdGVtYSBkZSBcIk1lbnRvclx1MDBFRGFzXCInKTtcbiAgICAgICAgICAgICAgICBtZW50b3JpYXNUaXRsZS5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XG4gICAgICAgICAgICAgICAgY29uc3QgbWVudG9yaWFzQ29udGVudCA9IHRhYkNvbnRlbnQuY3JlYXRlRGl2KCk7XG4gICAgICAgICAgICAgICAgbWVudG9yaWFzQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIG1lbnRvcmlhc1RpdGxlLm9uY2xpY2sgPSB0b2dnbGVDb2xsYXBzZTtcblxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKG1lbnRvcmlhc0NvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdDYXJwZXRhIGRlIFNlc2lvbmVzIGRlIE1lbnRvclx1MDBFRGEnKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGUgbGEgY2FycGV0YSBkb25kZSBzZSBndWFyZGFyXHUwMEUxbiBsYXMgc2VzaW9uZXMgZGUgbWVudG9yXHUwMEVEYS4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfTWVudG9yaWFzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX01lbnRvcmlhcyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcobWVudG9yaWFzQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ1x1MDBDRG5kaWNlIGRlIE1lbnRvclx1MDBFRGFzJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlbCBcdTAwRURuZGljZSBkZSBsYXMgc2VzaW9uZXMgZGUgbWVudG9yXHUwMEVEYS4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfTWVudG9yaWFzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX01lbnRvcmlhcyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVwaXRlIGVsIHBhdHJcdTAwRjNuIHBhcmEgXCJNZXJjYWRvXCIsIFwiTVx1MDBGM2R1bG9zIFNpc3RlbWEgR2VzdGlcdTAwRjNuXCIsIHkgXCJQYWdvc1wiXG5cbiAgICAgICAgICAgICAgICAvLyBCbG9xdWUgZGVzcGxlZ2FibGUgcGFyYSBcIk1lcmNhZG9cIlxuICAgICAgICAgICAgICAgIGNvbnN0IG1lcmNhZG9UaXRsZSA9IHRhYkNvbnRlbnQuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdcdTI1QjYgU3Vic2lzdGVtYSBkZSBcIk1lcmNhZG9cIicgfSk7XG4gICAgICAgICAgICAgICAgbWVyY2Fkb1RpdGxlLnNldEF0dHJpYnV0ZSgnZGF0YS10aXRsZScsICdTdWJzaXN0ZW1hIGRlIFwiTWVyY2Fkb1wiJyk7XG4gICAgICAgICAgICAgICAgbWVyY2Fkb1RpdGxlLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICAgICAgICAgICAgICBjb25zdCBtZXJjYWRvQ29udGVudCA9IHRhYkNvbnRlbnQuY3JlYXRlRGl2KCk7XG4gICAgICAgICAgICAgICAgbWVyY2Fkb0NvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICBtZXJjYWRvVGl0bGUub25jbGljayA9IHRvZ2dsZUNvbGxhcHNlO1xuXG4gICAgICAgICAgICAgICAgLy8gQWdyZWdhIGFxdVx1MDBFRCBsYXMgY29uZmlndXJhY2lvbmVzIGVzcGVjXHUwMEVEZmljYXMgcGFyYSBcIk1lcmNhZG9cIiwgc2lndWllbmRvIGVsIHBhdHJcdTAwRjNuIGRlIGxhcyBtZW50b3JcdTAwRURhc1xuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKG1lcmNhZG9Db250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnQ2FycGV0YSBkZSBMaXN0YWRvcyBkZSBNZXJjYWRvJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlIGxhIGNhcnBldGEgZG9uZGUgc2UgZ3VhcmRhclx1MDBFMW4gbGFzIGxpc3RhcyBkZSBtZXJjYWRvLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9NZXJjYWRvKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX01lcmNhZG8gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKG1lcmNhZG9Db250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnXHUwMENEbmRpY2UgZGUgbGlzdGFkb3MgZGUgbWVyY2FkbycpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKCdFc3RhYmxlY2UgbGEgcnV0YSBkZWwgXHUwMEVEbmRpY2UgZGUgbG9zIGxpc3RhZG9zIGRlIG1lcmNhZG8uJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQ6IHsgc2V0VmFsdWU6IChhcmcwOiBhbnkpID0+IHsgKCk6IGFueTsgbmV3KCk6IGFueTsgb25DaGFuZ2U6IHsgKGFyZzA6ICh2YWx1ZTogYW55KSA9PiBQcm9taXNlPHZvaWQ+KTogYW55OyBuZXcoKTogYW55OyB9OyB9OyB9KSA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX01lcmNhZG8pXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfTWVyY2FkbyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEJsb3F1ZSBkZXNwbGVnYWJsZSBwYXJhIFwiTVx1MDBGM2R1bG9zIFNpc3RlbWEgR2VzdGlcdTAwRjNuXCJcbiAgICAgICAgICAgICAgICBjb25zdCBtb2R1bG9zVGl0bGUgPSB0YWJDb250ZW50LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnXHUyNUI2IFN1YnNpc3RlbWEgZGUgXCJNXHUwMEYzZHVsb3MgU2lzdGVtYSBHZXN0aVx1MDBGM25cIicgfSk7XG4gICAgICAgICAgICAgICAgbW9kdWxvc1RpdGxlLnNldEF0dHJpYnV0ZSgnZGF0YS10aXRsZScsICdTdWJzaXN0ZW1hIGRlIFwiTVx1MDBGM2R1bG9zIFNpc3RlbWEgR2VzdGlcdTAwRjNuXCInKTtcbiAgICAgICAgICAgICAgICBtb2R1bG9zVGl0bGUuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vZHVsb3NDb250ZW50ID0gdGFiQ29udGVudC5jcmVhdGVEaXYoKTtcbiAgICAgICAgICAgICAgICBtb2R1bG9zQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIG1vZHVsb3NUaXRsZS5vbmNsaWNrID0gdG9nZ2xlQ29sbGFwc2U7XG5cbiAgICAgICAgICAgICAgICAvLyBBZ3JlZ2EgYXF1XHUwMEVEIGxhcyBjb25maWd1cmFjaW9uZXMgZXNwZWNcdTAwRURmaWNhcyBwYXJhIFwiTVx1MDBGM2R1bG9zIFNpc3RlbWEgR2VzdGlcdTAwRjNuXCJcblxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKG1vZHVsb3NDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnQ2FycGV0YSBkZSBNb2R1bG9zIGRlbCBTaXN0ZW1hIGRlIEdlc3Rpb24nKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGUgbGEgY2FycGV0YSBkb25kZSBzZSBndWFyZGFyXHUwMEUxbiBsb3MgbVx1MDBGM2R1bG9zIGRlbCBTaXN0ZW1hIGRlIEdlc3RpXHUwMEYzbi4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfTW9kdWxvc1Npc3RlbWEpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfTW9kdWxvc1Npc3RlbWEgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKG1vZHVsb3NDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnXHUwMENEbmRpY2UgZGUgbG9zIE1vZHVsb3MgZGVsIHNpc3RlbWEgZGUgR2VzdGlvbicpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKCdFc3RhYmxlY2UgbGEgcnV0YSBkZWwgXHUwMEVEbmRpY2UgZGUgbG9zIE1cdTAwRjNkdWxvcyBkZWwgc2lzdGVtYSBkZSBHZXN0aVx1MDBGM24uJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQ6IHsgc2V0VmFsdWU6IChhcmcwOiBhbnkpID0+IHsgKCk6IGFueTsgbmV3KCk6IGFueTsgb25DaGFuZ2U6IHsgKGFyZzA6ICh2YWx1ZTogYW55KSA9PiBQcm9taXNlPHZvaWQ+KTogYW55OyBuZXcoKTogYW55OyB9OyB9OyB9KSA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX01vZHVsb3NTaXN0ZW1hKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX01vZHVsb3NTaXN0ZW1hID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgLy8gQmxvcXVlIGRlc3BsZWdhYmxlIHBhcmEgXCJQYWdvc1wiXG4gICAgICAgICAgICAgICAgY29uc3QgcGFnb3NUaXRsZSA9IHRhYkNvbnRlbnQuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdcdTI1QjYgU3Vic2lzdGVtYSBkZSBcIlBhZ29zXCInIH0pO1xuICAgICAgICAgICAgICAgIHBhZ29zVGl0bGUuc2V0QXR0cmlidXRlKCdkYXRhLXRpdGxlJywgJ1N1YnNpc3RlbWEgZGUgXCJQYWdvc1wiJyk7XG4gICAgICAgICAgICAgICAgcGFnb3NUaXRsZS5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFnb3NDb250ZW50ID0gdGFiQ29udGVudC5jcmVhdGVEaXYoKTtcbiAgICAgICAgICAgICAgICBwYWdvc0NvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICBwYWdvc1RpdGxlLm9uY2xpY2sgPSB0b2dnbGVDb2xsYXBzZTtcblxuICAgICAgICAgICAgICAgIC8vIEFncmVnYSBhcXVcdTAwRUQgbGFzIGNvbmZpZ3VyYWNpb25lcyBlc3BlY1x1MDBFRGZpY2FzIHBhcmEgXCJQYWdvc1wiXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcocGFnb3NDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnQ2FycGV0YSBkZSBNb2R1bG9zIGRlbCBTaXN0ZW1hIGRlIFBhZ29zJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlIGxhIGNhcnBldGEgZG9uZGUgc2UgZ3VhcmRhclx1MDBFMW4gbG9zIGNvbXByb2JhbnRlcyBkZSBwYWdvcy4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfUGFnb3MpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfUGFnb3MgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKHBhZ29zQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ1x1MDBDRG5kaWNlIGRlIFBhZ29zJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlbCBcdTAwRURuZGljZSBkZSBQYWdvcy4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfUGFnb3MpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfUGFnb3MgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBCbG9xdWUgZGVzcGxlZ2FibGUgcGFyYSBcIlByZXNlbnRhY2lvbmVzXCJcbiAgICAgICAgICAgICAgICBjb25zdCBwcmVzZW50YWNpb25lc1RpdGxlID0gdGFiQ29udGVudC5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1x1MjVCNiBTdWJzaXN0ZW1hIGRlIFwiUHJlc2VudGFjaW9uZXNcIicgfSk7XG4gICAgICAgICAgICAgICAgcHJlc2VudGFjaW9uZXNUaXRsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGl0bGUnLCAnU3Vic2lzdGVtYSBkZSBcIlByZXNlbnRhY2lvbmVzXCInKTtcbiAgICAgICAgICAgICAgICBwcmVzZW50YWNpb25lc1RpdGxlLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICAgICAgICAgICAgICBjb25zdCBwcmVzZW50YWNpb25lc0NvbnRlbnQgPSB0YWJDb250ZW50LmNyZWF0ZURpdigpO1xuICAgICAgICAgICAgICAgIHByZXNlbnRhY2lvbmVzQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOyAvLyBJbmljaWFsbWVudGUgb2N1bHRvXG4gICAgICAgICAgICAgICAgcHJlc2VudGFjaW9uZXNUaXRsZS5vbmNsaWNrID0gdG9nZ2xlQ29sbGFwc2U7XG5cbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhwcmVzZW50YWNpb25lc0NvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdDYXJwZXRhIGRlIE5vdGFzIGRlIFByZXNlbnRhY2lvbmVzJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlIGxhIGNhcnBldGEgZG9uZGUgc2UgZ3VhcmRhclx1MDBFMW4gbGFzIG5vdGFzIGRlIHByZXNlbnRhY2lvbmVzLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9QcmVzZW50YWNpb25lcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9QcmVzZW50YWNpb25lcyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcocHJlc2VudGFjaW9uZXNDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnXHUwMENEbmRpY2UgZGUgUHJlc2VudGFjaW9uZXMnKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGVsIFx1MDBFRG5kaWNlIGRlIHByZXNlbnRhY2lvbmVzLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9QcmVzZW50YWNpb25lcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9QcmVzZW50YWNpb25lcyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgLy8gQmxvcXVlIGRlc3BsZWdhYmxlIHBhcmEgXCJQcm95ZWN0b3MgZGUgUVwiXG4gICAgICAgICAgICAgICAgY29uc3QgcHJveWVjdG9zUVRpdGxlID0gdGFiQ29udGVudC5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1x1MjVCNiBTdWJzaXN0ZW1hIGRlIFwiUHJveWVjdG9zIGRlIFFcIicgfSk7XG4gICAgICAgICAgICAgICAgcHJveWVjdG9zUVRpdGxlLnNldEF0dHJpYnV0ZSgnZGF0YS10aXRsZScsICdTdWJzaXN0ZW1hIGRlIFwiUHJveWVjdG9zIGRlIFFcIicpO1xuICAgICAgICAgICAgICAgIHByb3llY3Rvc1FUaXRsZS5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJveWVjdG9zUUNvbnRlbnQgPSB0YWJDb250ZW50LmNyZWF0ZURpdigpO1xuICAgICAgICAgICAgICAgIHByb3llY3Rvc1FDb250ZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7IC8vIEluaWNpYWxtZW50ZSBvY3VsdG9cbiAgICAgICAgICAgICAgICBwcm95ZWN0b3NRVGl0bGUub25jbGljayA9IHRvZ2dsZUNvbGxhcHNlO1xuXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcocHJveWVjdG9zUUNvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdDYXJwZXRhIGRlIFByb3llY3RvcyBkZSBRJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlIGxhIGNhcnBldGEgZG9uZGUgc2UgZ3VhcmRhclx1MDBFMW4gbG9zIHByb3llY3RvcyBkZSBRLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9Qcm95ZWN0b3NRKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX1Byb3llY3Rvc1EgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKHByb3llY3Rvc1FDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnXHUwMENEbmRpY2UgZGUgUHJveWVjdG9zIGRlIFEnKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGVsIFx1MDBFRG5kaWNlIGRlIHByb3llY3RvcyBkZSBRLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9Qcm95ZWN0b3NRKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX1Byb3llY3Rvc1EgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgIC8vIEFzZWdcdTAwRkFyYXRlIGRlIHF1ZSBsYSBmdW5jaVx1MDBGM24gdG9nZ2xlQ29sbGFwc2UgZXN0XHUwMEUxIGRlZmluaWRhIGNvbW8gc2UgaW5kaWNcdTAwRjMgYW50ZXJpb3JtZW50ZS5cblxuICAgICAgICAgICAgICAgIC8vIEJsb3F1ZSBkZXNwbGVnYWJsZSBwYXJhIFwiUHVibGljYWNpb25lc1wiXG4gICAgICAgICAgICAgICAgY29uc3QgcHVibGljYWNpb25lc1RpdGxlID0gdGFiQ29udGVudC5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1x1MjVCNiBTdWJzaXN0ZW1hIGRlIFwiUHVibGljYWNpb25lc1wiJyB9KTtcbiAgICAgICAgICAgICAgICBwdWJsaWNhY2lvbmVzVGl0bGUuc2V0QXR0cmlidXRlKCdkYXRhLXRpdGxlJywgJ1N1YnNpc3RlbWEgZGUgXCJQdWJsaWNhY2lvbmVzXCInKTtcbiAgICAgICAgICAgICAgICBwdWJsaWNhY2lvbmVzVGl0bGUuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuICAgICAgICAgICAgICAgIGNvbnN0IHB1YmxpY2FjaW9uZXNDb250ZW50ID0gdGFiQ29udGVudC5jcmVhdGVEaXYoKTtcbiAgICAgICAgICAgICAgICBwdWJsaWNhY2lvbmVzQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOyAvLyBJbmljaWFsbWVudGUgb2N1bHRvXG4gICAgICAgICAgICAgICAgcHVibGljYWNpb25lc1RpdGxlLm9uY2xpY2sgPSB0b2dnbGVDb2xsYXBzZTtcblxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKHB1YmxpY2FjaW9uZXNDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnQ2FycGV0YSBkZSBQaWV6YXMgZGUgUHVibGljYWNpb25lcycpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKCdFc3RhYmxlY2UgbGEgcnV0YSBkZSBsYSBjYXJwZXRhIGRvbmRlIHNlIGd1YXJkYXJcdTAwRTFuIGxhcyBwaWV6YXMgZGUgcHVibGljYWNpb25lcy4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfUHVibGljYWNpb25lcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9QdWJsaWNhY2lvbmVzID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhwdWJsaWNhY2lvbmVzQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ1x1MDBDRG5kaWNlIGRlIFB1YmxpY2FjaW9uZXMnKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGVsIFx1MDBFRG5kaWNlIGRlIHB1YmxpY2FjaW9uZXMuJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQ6IHsgc2V0VmFsdWU6IChhcmcwOiBhbnkpID0+IHsgKCk6IGFueTsgbmV3KCk6IGFueTsgb25DaGFuZ2U6IHsgKGFyZzA6ICh2YWx1ZTogYW55KSA9PiBQcm9taXNlPHZvaWQ+KTogYW55OyBuZXcoKTogYW55OyB9OyB9OyB9KSA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX1B1YmxpY2FjaW9uZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfUHVibGljYWNpb25lcyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgLy8gQmxvcXVlIGRlc3BsZWdhYmxlIHBhcmEgXCJSZWNldGFzXCJcbiAgICAgICAgICAgICAgICBjb25zdCByZWNldGFzVGl0bGUgPSB0YWJDb250ZW50LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnXHUyNUI2IFN1YnNpc3RlbWEgZGUgXCJSZWNldGFzXCInIH0pO1xuICAgICAgICAgICAgICAgIHJlY2V0YXNUaXRsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGl0bGUnLCAnU3Vic2lzdGVtYSBkZSBcIlJlY2V0YXNcIicpO1xuICAgICAgICAgICAgICAgIHJlY2V0YXNUaXRsZS5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVjZXRhc0NvbnRlbnQgPSB0YWJDb250ZW50LmNyZWF0ZURpdigpO1xuICAgICAgICAgICAgICAgIHJlY2V0YXNDb250ZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7IC8vIEluaWNpYWxtZW50ZSBvY3VsdG9cbiAgICAgICAgICAgICAgICByZWNldGFzVGl0bGUub25jbGljayA9IHRvZ2dsZUNvbGxhcHNlO1xuXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcocmVjZXRhc0NvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdDYXJwZXRhIGRlIFJlY2V0YXMnKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGUgbGEgY2FycGV0YSBkb25kZSBzZSBndWFyZGFyXHUwMEUxbiBsYXMgcmVjZXRhcy4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dDogeyBzZXRWYWx1ZTogKGFyZzA6IGFueSkgPT4geyAoKTogYW55OyBuZXcoKTogYW55OyBvbkNoYW5nZTogeyAoYXJnMDogKHZhbHVlOiBhbnkpID0+IFByb21pc2U8dm9pZD4pOiBhbnk7IG5ldygpOiBhbnk7IH07IH07IH0pID0+IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfUmVjZXRhcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9SZWNldGFzID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhyZWNldGFzQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ1x1MDBDRG5kaWNlIGRlIFJlY2V0YXMnKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGVsIFx1MDBFRG5kaWNlIGRlIHJlY2V0YXMuJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQ6IHsgc2V0VmFsdWU6IChhcmcwOiBhbnkpID0+IHsgKCk6IGFueTsgbmV3KCk6IGFueTsgb25DaGFuZ2U6IHsgKGFyZzA6ICh2YWx1ZTogYW55KSA9PiBQcm9taXNlPHZvaWQ+KTogYW55OyBuZXcoKTogYW55OyB9OyB9OyB9KSA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX1JlY2V0YXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfUmVjZXRhcyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgLy8gQmxvcXVlIGRlc3BsZWdhYmxlIHBhcmEgXCJSZWN1cnNvcyBSZWN1cnJlbnRlc1wiXG4gICAgICAgICAgICAgICAgY29uc3QgcmVjdXJzb3NSZWN1cnJlbnRlc1RpdGxlID0gdGFiQ29udGVudC5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1x1MjVCNiBTdWJzaXN0ZW1hIGRlIFwiUmVjdXJzb3MgUmVjdXJyZW50ZXNcIicgfSk7XG4gICAgICAgICAgICAgICAgcmVjdXJzb3NSZWN1cnJlbnRlc1RpdGxlLnNldEF0dHJpYnV0ZSgnZGF0YS10aXRsZScsICdTdWJzaXN0ZW1hIGRlIFwiUmVjdXJzb3MgUmVjdXJyZW50ZXNcIicpO1xuICAgICAgICAgICAgICAgIHJlY3Vyc29zUmVjdXJyZW50ZXNUaXRsZS5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVjdXJzb3NSZWN1cnJlbnRlc0NvbnRlbnQgPSB0YWJDb250ZW50LmNyZWF0ZURpdigpO1xuICAgICAgICAgICAgICAgIHJlY3Vyc29zUmVjdXJyZW50ZXNDb250ZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7IC8vIEluaWNpYWxtZW50ZSBvY3VsdG9cbiAgICAgICAgICAgICAgICByZWN1cnNvc1JlY3VycmVudGVzVGl0bGUub25jbGljayA9IHRvZ2dsZUNvbGxhcHNlO1xuXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcocmVjdXJzb3NSZWN1cnJlbnRlc0NvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdDYXJwZXRhIGRlIFJlY3Vyc29zIFJlY3VycmVudGVzJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlIGxhIGNhcnBldGEgZG9uZGUgc2UgZ3VhcmRhclx1MDBFMW4gbG9zIHJlY3Vyc29zIHJlY3VycmVudGVzLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9SZWN1cnNvc1JlY3VycmVudGVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX1JlY3Vyc29zUmVjdXJyZW50ZXMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKHJlY3Vyc29zUmVjdXJyZW50ZXNDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnXHUwMENEbmRpY2UgZGUgUmVjdXJzb3MgUmVjdXJyZW50ZXMnKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnRXN0YWJsZWNlIGxhIHJ1dGEgZGVsIFx1MDBFRG5kaWNlIGRlIHJlY3Vyc29zIHJlY3VycmVudGVzLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9SZWN1cnNvc1JlY3VycmVudGVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kaWNlX1JlY3Vyc29zUmVjdXJyZW50ZXMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgIC8vIEJsb3F1ZSBkZXNwbGVnYWJsZSBwYXJhIFwiUmVnaXN0cm8gVGllbXBvXCJcbiAgICAgICAgICAgICAgICBjb25zdCByZWdpc3Ryb1RpZW1wb1RpdGxlID0gdGFiQ29udGVudC5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1x1MjVCNiBTdWJzaXN0ZW1hIGRlIFwiUmVnaXN0cm8gVGllbXBvXCInIH0pO1xuICAgICAgICAgICAgICAgIHJlZ2lzdHJvVGllbXBvVGl0bGUuc2V0QXR0cmlidXRlKCdkYXRhLXRpdGxlJywgJ1N1YnNpc3RlbWEgZGUgXCJSZWdpc3RybyBUaWVtcG9cIicpO1xuICAgICAgICAgICAgICAgIHJlZ2lzdHJvVGllbXBvVGl0bGUuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2lzdHJvVGllbXBvQ29udGVudCA9IHRhYkNvbnRlbnQuY3JlYXRlRGl2KCk7XG4gICAgICAgICAgICAgICAgcmVnaXN0cm9UaWVtcG9Db250ZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7IC8vIEluaWNpYWxtZW50ZSBvY3VsdG9cbiAgICAgICAgICAgICAgICByZWdpc3Ryb1RpZW1wb1RpdGxlLm9uY2xpY2sgPSB0b2dnbGVDb2xsYXBzZTtcblxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKHJlZ2lzdHJvVGllbXBvQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ0NhcnBldGEgZGUgUmVnaXN0cm9zIGRlIFRpZW1wbycpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKCdFc3RhYmxlY2UgbGEgcnV0YSBkZSBsYSBjYXJwZXRhIGRvbmRlIHNlIGd1YXJkYXJcdTAwRTFuIGxvcyByZWdpc3Ryb3MgZGUgdGllbXBvLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9SZWdpc3Ryb1RpZW1wbylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9SZWdpc3Ryb1RpZW1wbyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcocmVnaXN0cm9UaWVtcG9Db250ZW50KVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZSgnXHUwMENEbmRpY2UgZGUgUmVnaXN0cm8gZGUgVGllbXBvJylcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoJ0VzdGFibGVjZSBsYSBydXRhIGRlbCBcdTAwRURuZGljZSBkZSByZWdpc3Ryb3MgZGUgdGllbXBvLicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0OiB7IHNldFZhbHVlOiAoYXJnMDogYW55KSA9PiB7ICgpOiBhbnk7IG5ldygpOiBhbnk7IG9uQ2hhbmdlOiB7IChhcmcwOiAodmFsdWU6IGFueSkgPT4gUHJvbWlzZTx2b2lkPik6IGFueTsgbmV3KCk6IGFueTsgfTsgfTsgfSkgPT4gdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9SZWdpc3Ryb1RpZW1wbylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGljZV9SZWdpc3Ryb1RpZW1wbyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuXG5cblxuICAgICAgICAgICAgLy8gQ29udGVuaWRvIHBhcmEgbGEgdGVyY2VyYSBwZXN0YVx1MDBGMWFcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVMYWJlbCA9IHRhYkNvbnRlbnQuY3JlYXRlRWwoJ2xhYmVsJyk7XG4gICAgICAgICAgICAgICAgZGF0ZUxhYmVsLnRleHRDb250ZW50ID0gJ0ZlY2hhJztcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRlSW5wdXQgPSB0YWJDb250ZW50LmNyZWF0ZUVsKCdpbnB1dCcpO1xuICAgICAgICAgICAgICAgIGRhdGVJbnB1dC50eXBlID0gJ2RhdGV0aW1lLWxvY2FsJztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQVx1MDBGMWFkaXIgZXN0aWxvcyBDU1MgcGFyYSBlc3BhY2lhZG8geSBvcmdhbml6YWNpXHUwMEYzblxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnc3R5bGUnLCB7XG4gICAgICAgICAgICB0ZXh0OiBgXG4gICAgICAgICAgICAgICAgLnRhYi1jb250ZW50IHsgZGlzcGxheTogbm9uZTsgcGFkZGluZy10b3A6IDIwcHg7IH0gLy8gQVx1MDBGMWFkaWRvIHBhZGRpbmctdG9wIHBhcmEgZWwgZXNwYWNpb1xuICAgICAgICAgICAgICAgIC50YWItY29udGVudC5hY3RpdmUgeyBkaXNwbGF5OiBibG9jazsgfVxuICAgICAgICAgICAgICAgIC50YWItbGluayB7IGN1cnNvcjogcG9pbnRlcjsgcGFkZGluZzogNXB4IDEwcHg7IG1hcmdpbi1yaWdodDogNXB4OyBiYWNrZ3JvdW5kOiAjZjBmMGYwOyBib3JkZXI6IDFweCBzb2xpZCAjZGRkOyBib3JkZXItcmFkaXVzOiA1cHg7IH1cbiAgICAgICAgICAgICAgICAudGFiLWxpbmsuYWN0aXZlIHsgYmFja2dyb3VuZDogI2UwZTBlMDsgfVxuICAgICAgICAgICAgICAgIC5zZXR0aW5nLWl0ZW0geyBtYXJnaW4tYm90dG9tOiAxMHB4OyB9XG4gICAgICAgICAgICBgXG4gICAgICAgIH0pO1xuICAgICAgICBcblxuICAgICAgICAvLyBGdW5jaVx1MDBGM24gcGFyYSBjYW1iaWFyIGxhIHBlc3RhXHUwMEYxYSBhY3RpdmFcbiAgICAgICAgdGhpcy5vcGVuVGFiID0gKHRhYk5hbWUpID0+IHtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50YWItY29udGVudCcpLmZvckVhY2goY29udGVudCA9PiB7XG4gICAgICAgICAgICAgICAgY29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIGNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50YWItbGluaycpLmZvckVhY2gobGluayA9PiB7XG4gICAgICAgICAgICAgICAgbGluay5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgYWN0aXZlVGFiQ29udGVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhYk5hbWUpO1xuICAgICAgICAgICAgY29uc3QgYWN0aXZlVGFiTGluayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRhYj1cIiR7dGFiTmFtZX1cIl1gKTtcbiAgICAgICAgICAgIGlmIChhY3RpdmVUYWJDb250ZW50KSBhY3RpdmVUYWJDb250ZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgaWYgKGFjdGl2ZVRhYkxpbmspIGFjdGl2ZVRhYkxpbmsuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBYnJpciBsYSBwcmltZXJhIHBlc3RhXHUwMEYxYSBwb3IgZGVmZWN0b1xuICAgICAgICB0aGlzLm9wZW5UYWIoJ3RhYjAnKTtcbiAgICB9XG4gICAgb3BlblRhYihhcmcwOiBzdHJpbmcpOiBhbnkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IFBsdWdpbiwgVEZpbGUgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyByZWdpc3RlckNvbW1hbmRzLCBkZWFjdGl2YXRlQ29tbWFuZHMgfSBmcm9tIFwiLi9jb21tYW5kc1wiO1xuXG5leHBvcnQgY2xhc3MgTW9kdWxvQmFzZSB7XG4gICAgcGx1Z2luOiBQbHVnaW47XG4gICAgbW9kdWxvQmFzZTogTW9kdWxvQmFzZSB8IG51bGwgPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgfVxuXG4gICAgYWN0aXZhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLm1vZHVsb0Jhc2UpIHJldHVybjsgLy8gU2kgeWEgZXN0XHUwMEUxIGFjdGl2bywgbm8gaGFjZXIgbmFkYVxuXG4gICAgICAgIHJlZ2lzdGVyQ29tbWFuZHModGhpcy5wbHVnaW4pO1xuICAgIH1cblxuICAgIGRlYWN0aXZhdGUoKSB7XG4gICAgICAgIGlmICghdGhpcy5zdGF0dXNCYXIpIHJldHVybjsgLy8gU2kgeWEgZXN0XHUwMEUxIGRlc2FjdGl2YWRvLCBubyBoYWNlciBuYWRhXG4gICAgICAgIGRlYWN0aXZhdGVDb21tYW5kcyh0aGlzLnBsdWdpbik7XG4gICAgICAgXG4gICAgfVxuXG5cbn0iLCAiXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXJDYXJwZXRhKHJ1dGFDYXJwZXRhOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFZlcmlmaWNhIHNpIGxhIGNhcnBldGEgeWEgZXhpc3RlXG4gICAgICAgICAgICBkZWJ1Z2dlclxuICAgICAgICAgICAgY29uc3QgY2FycGV0YUV4aXN0ZW50ZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgocnV0YUNhcnBldGEpO1xuICAgICAgICAgICAgaWYgKGNhcnBldGFFeGlzdGVudGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgTGEgY2FycGV0YSAnJHtydXRhQ2FycGV0YX0nIHlhIGV4aXN0ZS5gKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWJ1Z2dlclxuICAgICAgICAgICAgLy8gQ3JlYSBsYSBjYXJwZXRhXG4gICAgICAgICAgICBhd2FpdCBhcHAudmF1bHQuY3JlYXRlRm9sZGVyKHJ1dGFDYXJwZXRhKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBDYXJwZXRhICcke3J1dGFDYXJwZXRhfScgY3JlYWRhIGV4aXRvc2FtZW50ZS5gKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGFsIGNyZWFyIGxhIGNhcnBldGEgJyR7cnV0YUNhcnBldGF9JzpgLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiIsICJleHBvcnQgY29uc3QgcGxhbnRpbGxhID0gYDwlKlxuZGVidWdnZXJcbmNvbnN0IGR2ID0gdGhpcy5EYXRhdmlld0FQSTtcbmNvbnN0IHt1cGRhdGV9ID0gdGhpcy5hcHAucGx1Z2lucy5wbHVnaW5zW1wibWV0YWVkaXRcIl0uYXBpXG5jb25zdCBmaWxlQ2FtcG9zID1kdi5wYWdlKFwiRXN0cnVjdHVyYS9DYW1wb3MgU2lzdGVtYSBHZXN0aW9uL0NhbXBvcyBTaXN0ZW1hIENlbnRyYWxcIilcbmxldCBjbGFzaWZpY2FjaW9uQVggPSBmaWxlQ2FtcG9zLnRpdHVsb0NsYXNpZmljYWNpb25BWFxubGV0IHRhZ3NDbGFzaWZpY2FjaW9uQVggPSBmaWxlQ2FtcG9zLnRhZ3NDbGFzaWZpY2FjaW9uQVhcbmxldCBhY3Rpdm8gPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcbmxldCBpZEF1eCA9IGR2LnBhZ2VzKCdcIkFub3RhY2lvbmVzL05vdGFzXCInKS5maWxlLmZyb250bWF0dGVyLnNvcnQoYj0+IGIuaWQgLCAnZGVzYycpLmlkO1xuXG4vLyBDb21wcnVlYmEgc2kgaWRBdXggdGllbmUgYWwgbWVub3MgdW4gZWxlbWVudG8geSBhc2lnbmEgYSAnaWQnIGVsIHNpZ3VpZW50ZSB2YWxvciBlbiBsYSBzZWN1ZW5jaWEgbyAxIHNpIG5vIGhheSBlbGVtZW50b3MuXG5sZXQgaWQgPSBpZEF1eC5sZW5ndGggPiAwID8gKGlkQXV4WzBdICsgMSkgOiAxO1xuXG5sZXQgbmV3TmFtZSwgdGl0dWxvLCBleGlzdGUsIGFzdW50bywgbm9tYnJlXG5cdHRpdHVsbyA9IGF3YWl0IHRwLnN5c3RlbS5wcm9tcHQoXCJcdTAwQkZTb2JyZSBxdWUgZXMgZXN0YSBhbm90YWNpXHUwMEYzbj9cIiwgXCJBLVwiKyBpZCwgdHJ1ZSlcblx0Ly8gVmVyaWZpY2FyIHNpIGVsIHVzdWFyaW8gcHJlc2lvblx1MDBGMyBFc2MuXG4gICAgaWYgKHRpdHVsbyA9PT0gbnVsbCkge1xuICAgIG5ldyBOb3RpY2UoXCJDcmVhY2lcdTAwRjNuIGRlIG5vdGEgY2FuY2VsYWRhIHBvciBlbCB1c3VhcmlvLlwiKTtcbiAgICByZXR1cm47IC8vIFRlcm1pbmEgbGEgZWplY3VjaVx1MDBGM24gZGUgbGEgZnVuY2lcdTAwRjNuIGFxdVx1MDBFRC5cblx0fVxuXHRpZiAoYWN0aXZvICE9IG51bGwpeyBcblx0XHRub21icmUgPSBhY3Rpdm8uYmFzZW5hbWU7XG5cdFx0Y29uc3Qgbm90YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShhY3Rpdm8pOyBcblx0XHRhc3VudG8gPSBhd2FpdCB0cC5zeXN0ZW0uc3VnZ2VzdGVyKFtcIlNpXCIsXCJOb1wiXSxbdHJ1ZSwgZmFsc2VdLCB0cnVlLCBub21icmUgKyBcIiBlcyBvcmlnZW4gZGUgXCIgKyB0aXR1bG8gKyBcIj9cIilcblx0XHR9XG5cdG5ld05hbWUgPSBcIkFub3RhY2lvbmVzL05vdGFzL0EgLSBcIiArIGlkICBcbmF3YWl0IHRwLmZpbGUubW92ZShuZXdOYW1lKTtcbmxldCBjbGFzaWZpY2FjaW9uLCBkZXNjcmlwY2lvbiwgZXN0YWRvXG5sZXQgdGFnQ2xhc2lmaWNhY2lvbiA9IGF3YWl0IHRwLnN5c3RlbS5zdWdnZXN0ZXIoY2xhc2lmaWNhY2lvbkFYLCB0YWdzQ2xhc2lmaWNhY2lvbkFYLCBmYWxzZSwgXCJcdTAwQkZDbGFzaWZpY2FyXHUwMEVEYXMgZXN0YSBub3RhIGJham8gYWxndW5hIGRlIGxhcyBzaWd1aWVudGVzIGNhdGVnb3JcdTAwRURhcz9cIilcblx0Ly8gVmVyaWZpY2FyIHNpIGVsIHVzdWFyaW8gcHJlc2lvblx1MDBGMyBFc2MuXG4gICAgaWYgKHRhZ0NsYXNpZmljYWNpb24gPT09IG51bGwpIHtcbiAgICBuZXcgTm90aWNlKFwiQ3JlYWNpXHUwMEYzbiBkZSBub3RhIGNhbmNlbGFkYSBwb3IgZWwgdXN1YXJpby5cIik7XG4gICAgcmV0dXJuOyAvLyBUZXJtaW5hIGxhIGVqZWN1Y2lcdTAwRjNuIGRlIGxhIGZ1bmNpXHUwMEYzbiBhcXVcdTAwRUQuXG5cdH1cbmxldCBudWV2YUNsYXNpZmljYWNpb24gPSBmYWxzZVxuaWYodGFnQ2xhc2lmaWNhY2lvbj09XCJOdWV2b1wiKXtcblx0Y2xhc2lmaWNhY2lvbiA9IGF3YWl0IHRwLnN5c3RlbS5wcm9tcHQoXCJcdTAwQkZDdWFsIGVzIGVsIG5vbWJyZSBkZSBsYSBudWV2YSBjbGFzaWZpY2FjaVx1MDBGM24gcXVlIHZhcyBhIGluZ3Jlc2FyP1wiLCBcIk1pQ2xhc2lmaWNhY2lcdTAwRjNuXCIsIHRydWUpXG5cdC8vIFZlcmlmaWNhciBzaSBlbCB1c3VhcmlvIHByZXNpb25cdTAwRjMgRXNjLlxuICAgIGlmIChjbGFzaWZpY2FjaW9uID09PSBudWxsKSB7XG4gICAgbmV3IE5vdGljZShcIkNyZWFjaVx1MDBGM24gZGUgbm90YSBjYW5jZWxhZGEgcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgIHJldHVybjsgLy8gVGVybWluYSBsYSBlamVjdWNpXHUwMEYzbiBkZSBsYSBmdW5jaVx1MDBGM24gYXF1XHUwMEVELlxuXHR9XG5cdHRhZ0NsYXNpZmljYWNpb24gPSBhd2FpdCB0cC5zeXN0ZW0ucHJvbXB0KFwiXHUwMEJGQ3VhbCBlcyBlbCB0YWcgcXVlIHV0aWxpemFyYXMgcGFyYSBcIiArIGNsYXNpZmljYWNpb24gKyBcIj8uIE5vIHV0aWxpY2VzIGVzcGFjaW9zIGVuIGxhIGRlZmluaWNpXHUwMEYzbiBkZWwgdGFnLlwiLCBcIm51ZXZvVGFnXCIsIHRydWUpXG5cdC8vIFZlcmlmaWNhciBzaSBlbCB1c3VhcmlvIHByZXNpb25cdTAwRjMgRXNjLlxuICAgIGlmICh0YWdDbGFzaWZpY2FjaW9uID09PSBudWxsKSB7XG4gICAgbmV3IE5vdGljZShcIkNyZWFjaVx1MDBGM24gZGUgbm90YSBjYW5jZWxhZGEgcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgIHJldHVybjsgLy8gVGVybWluYSBsYSBlamVjdWNpXHUwMEYzbiBkZSBsYSBmdW5jaVx1MDBGM24gYXF1XHUwMEVELlxuXHR9XG5cdG51ZXZhQ2xhc2lmaWNhY2lvbiA9IHRydWVcbi8vIC0tPiBWYWxpZGFyIHF1ZSBlbCBub21icmUgZGVsIGdydXBvIG5vIHNlYSBpZ3VhbCBhbCBub21icmUgZGUgbmluZ3VuYSBhcmVhIGRlIFZpZGEuXG59ZWxzZSBpZih0YWdDbGFzaWZpY2FjaW9uPT1cIk5pbmd1bmFcIil7XG5cdHRhZ0NsYXNpZmljYWNpb24gPSBcIlwiXG5cdGNsYXNpZmljYWNpb24gPSBcIlwiXHRcbn1lbHNlIHtcblx0bGV0IGluZGljZSA9IHRhZ3NDbGFzaWZpY2FjaW9uQVguaW5kZXhPZih0YWdDbGFzaWZpY2FjaW9uKVxuXHRjbGFzaWZpY2FjaW9uID0gY2xhc2lmaWNhY2lvbkFYW2luZGljZV1cbn1cbmlmIChudWV2YUNsYXNpZmljYWNpb24pIHtcbiAgICBsZXQgbnVldm9DID0gY2xhc2lmaWNhY2lvbkFYLnBvcCgpOyAvLyBcdTAwREFsdGltYSBjbGFzaWZpY2FjaVx1MDBGM25cbiAgICBsZXQgbmluZ3Vub0MgPSBjbGFzaWZpY2FjaW9uQVgucG9wKCk7IC8vIFBlblx1MDBGQWx0aW1hIGNsYXNpZmljYWNpXHUwMEYzblxuXG4gICAgY2xhc2lmaWNhY2lvbkFYLnB1c2goY2xhc2lmaWNhY2lvbik7XG4gICAgY2xhc2lmaWNhY2lvbkFYLnB1c2gobmluZ3Vub0MpO1xuICAgIGNsYXNpZmljYWNpb25BWC5wdXNoKG51ZXZvQyk7XG5cbiAgICBhd2FpdCB1cGRhdGUoXCJ0aXR1bG9DbGFzaWZpY2FjaW9uQVhcIiwgY2xhc2lmaWNhY2lvbkFYLCBmaWxlQ2FtcG9zLmZpbGUucGF0aCk7XG5cdGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSk7XG5cbiAgICBsZXQgbnVldm9UYWdDID0gdGFnc0NsYXNpZmljYWNpb25BWC5wb3AoKTsgLy8gXHUwMERBbHRpbW8gdGFnXG4gICAgbGV0IG5pbmd1bm9UYWdDID0gdGFnc0NsYXNpZmljYWNpb25BWC5wb3AoKTsgLy8gUGVuXHUwMEZBbHRpbW8gdGFnXG5cbiAgICB0YWdzQ2xhc2lmaWNhY2lvbkFYLnB1c2godGFnQ2xhc2lmaWNhY2lvbik7XG4gICAgdGFnc0NsYXNpZmljYWNpb25BWC5wdXNoKG5pbmd1bm9UYWdDKTtcbiAgICB0YWdzQ2xhc2lmaWNhY2lvbkFYLnB1c2gobnVldm9UYWdDKTtcblxuICAgIGF3YWl0IHVwZGF0ZShcInRhZ3NDbGFzaWZpY2FjaW9uQVhcIiwgdGFnc0NsYXNpZmljYWNpb25BWCwgZmlsZUNhbXBvcy5maWxlLnBhdGgpO1xufVxuXG5cbmlmICh0YWdDbGFzaWZpY2FjaW9uICE9IFwiXCIpe1xudGFnQ2xhc2lmaWNhY2lvbiA9IFwiY2wvXCIgKyB0YWdDbGFzaWZpY2FjaW9uIFxufVxuaWYgKGNsYXNpZmljYWNpb24gPT0gXCJGZWVkYmFjayBTZW1hbmFsXCIpe1xuXHRkZXNjcmlwY2lvbiA9IFtdXG5cdGxldCBhdXggPSAwXG5cdGxldCBvdHJhXG5cdGRve1xuXHRcdGRlc2NyaXBjaW9uW2F1eF0gPSBhd2FpdCB0cC5zeXN0ZW0ucHJvbXB0KFwiRXNjcmliZSB0dSBmZWVkYmFjayBkZSBcIisgdGl0dWxvLCBcIlBcIiArIGF1eCwgZmFsc2UsIHRydWUpXG5cdFx0YXV4ICs9IDFcblx0XHRvdHJhID0gYXdhaXQgdHAuc3lzdGVtLnN1Z2dlc3RlcihbXCJTaVwiLFwiTm9cIl0sW3RydWUsZmFsc2VdLCB0cnVlLCBcIlx1MDBCRkFncmVnYXIgb3RybyBwYXJyYWZvP1wiIClcblx0fXdoaWxlKG90cmEpXG59ZWxzZXtcblx0ZGVzY3JpcGNpb24gPSBhd2FpdCB0cC5zeXN0ZW0ucHJvbXB0KFwiXHUwMEJGUXVpZXJlcyBhZ3JlZ2FyIHVuYSBkZXNjcmlwY2lcdTAwRjNuP1wiLCBcIiBcIiArIHRpdHVsbywgZmFsc2UsIHRydWUgKVxuXHQvLyBWZXJpZmljYXIgc2kgZWwgdXN1YXJpbyBwcmVzaW9uXHUwMEYzIEVzYy5cbiAgICBpZiAoZGVzY3JpcGNpb24gPT09IG51bGwpIHtcbiAgICBuZXcgTm90aWNlKFwiQ3JlYWNpXHUwMEYzbiBkZSBub3RhIGNhbmNlbGFkYSBwb3IgZWwgdXN1YXJpby5cIik7XG4gICAgcmV0dXJuOyAvLyBUZXJtaW5hIGxhIGVqZWN1Y2lcdTAwRjNuIGRlIGxhIGZ1bmNpXHUwMEYzbiBhcXVcdTAwRUQuXG5cdH1cbn1cbmVzdGFkbyA9IGF3YWl0IHRwLnN5c3RlbS5zdWdnZXN0ZXIoW1wiXHVEODNEXHVERDM1IC0+IENvbXBsZXRhZG8gLSBJbmZvcm1hY2lcdTAwRjNuXCIsIFwiXHVEODNEXHVERkUyIC0+IEZpbmFsaXphZG9cIixcIlx1RDgzRFx1REZFMSAtPiBFbiBlamVjdWNpXHUwMEYzblwiLCBcIlx1RDgzRFx1REQzNCAtPiBEZXRlbmlkb1wiXSxbXCJcdUQ4M0RcdUREMzVcIiwgXCJcdUQ4M0RcdURGRTJcIixcIlx1RDgzRFx1REZFMVwiLCBcIlx1RDgzRFx1REQzNFwiXSwgZmFsc2UsIFwiQ3VhbCBlcyBlbCBlc3RhZG8gZGUgZXN0YSBhbm90YWNpXHUwMEYzbj9cIilcbi8vIFZlcmlmaWNhciBzaSBlbCB1c3VhcmlvIHByZXNpb25cdTAwRjMgRXNjLlxuICAgIGlmIChlc3RhZG8gPT09IG51bGwpIHtcbiAgICBuZXcgTm90aWNlKFwiQ3JlYWNpXHUwMEYzbiBkZSBub3RhIGNhbmNlbGFkYSBwb3IgZWwgdXN1YXJpby5cIik7XG4gICAgcmV0dXJuOyAvLyBUZXJtaW5hIGxhIGVqZWN1Y2lcdTAwRjNuIGRlIGxhIGZ1bmNpXHUwMEYzbiBhcXVcdTAwRUQuXG5cdH1cbi0lPlxuLS0tXG50aXBvOiBBbm90YWNpXHUwMEYzblxuaWRxOiA2XG5pZDogPCUgaWQgJT4gXG5pZE1hbnVhbDpcbmFsaWFzZXM6IFxuLSA8JXRpdHVsbyU+XG5kZXNjcmlwY2lvbjogPCUqaWYgKGNsYXNpZmljYWNpb24gIT0gXCJGZWVkYmFjayBTZW1hbmFsXCIpeyU+IDwlZGVzY3JpcGNpb24lPjwlKiB9ZWxzZXslPj4tICA8JSogZm9yIChsZXQgYT0wOyBhPGRlc2NyaXBjaW9uLmxlbmd0aDthKyspeyU+XG4gICA8JWRlc2NyaXBjaW9uW2FdJT4gXG48JSp9fSU+XG50ZW1hOiA8JWNsYXNpZmljYWNpb24lPiBcbmVzdGFkbzogPCUgZXN0YWRvICU+IFxuZmVjaGE6IDwlIHRwLmRhdGUubm93KFwiWVlZWS1NTS1ERCBkZGRkIEhIOm1tXCIpICU+XG5ob3JhOiA8JSB0cC5kYXRlLm5vdyhcIkhIbW1cIiwgMCwpJT5cbnZhbG9yOiAgXG50YWdzOiA8JXRhZ0NsYXNpZmljYWNpb24lPiBcbmFzdW50bzogPCUqIGlmKGFzdW50byl7ICU+IFxuLSBcIltbPCVub21icmUlPl1dXCIgPCUqfSU+XG5yZWxhdGVkOlxuLS0tXG4jIFxcYFZJRVdbe2FsaWFzZXN9XVxcYCBcbj5bIWluZm9dLSBEZXNjcmlwY2lvblxuPlxcYFZJRVdbe2Rlc2NyaXBjaW9ufV1cXGBcbj4gXG5cblBsYW50aWxsYSBvY3VsdGFcbjwlKiBpZihjbGFzaWZpY2FjaW9uPT1cIk1lZGl0YWNpb25lcyBkZSBhbHRlcmFjaVx1MDBGM24gZGUgZnV0dXJvXCIpeyAtJT5cbiMjIE9iamV0aXZvIFxuXG4jIyBFdmVudG8gaW1hZ2luYXJpbyBxdWUgc2VndWlyXHUwMEVEYSBhbCBjdW1wbGltaWVudG8gZGVsIGRlc2VvXG5cbiMjIyBRdWUgZXMgbG8gcXVlIHNpZW50bz9cblxuIyMjIERldGFsbGVzIHBhcmEgbGEgdmlzdWFsaXphY2lcdTAwRjNuLlxuIyMgUHJlbWlzYXMgcXVlIGFsaW1lbnRlbiBlbCBkZXNlbyBjdW1wbGlkb1xuX0ZyYXNlcyBxdWUgYXBveWFuIG1pIG9iamV0aXZvX1xuIyMgVGFyZWFzIGRlIHNlZ3VpbWllbnRvIGRlIGxhIG1lZGl0YWNpXHUwMEYzblxuLSBbIF0gVG90YWwgZGUgbWVkaXRhY2lvbmVzIGRlIDwlIHRpdHVsbyAlPiBcblx0LSBbIF0gTWVkaXRhY2lcdTAwRjNuIGRlIDwlIHRpdHVsbyAlPiAjY3gvTWVkaXRhY2lvbiBcdUQ4M0RcdUREMDEgZXZlcnkgZGF5IHdoZW4gZG9uZSBcdUQ4M0RcdURDQzUgPCUgdHAuZGF0ZS5ub3coXCJZWVlZLU1NLUREXCIpICU+XG48JSp9ZWxzZSBpZihjbGFzaWZpY2FjaW9uID09XCJGZWVkYmFjayBTZW1hbmFsXCIpey0lPlxuIyMgRmVlZGJhY2tcblxcYFxcYFxcYGRhdGF2aWV3anNcbmR2LnBhcmFncmFwaChkdi5jdXJyZW50KCkuZGVzY3JpcGNpb24pXG5cXGBcXGBcXGBcbjwlKn1lbHNlIGlmKGNsYXNpZmljYWNpb24gPT1cIlZpZGVvIFlvdXR1YmVcIil7LSU+XG4jIyBWaWRlb1xuXG4+IFshdGlwXS0gQ29tbyBjcmVhciBlbCBsaW5rIGRlbCB2aWRlbz9cbj5Fc3RhbW9zIHV0aWxpemFuZG8gZWwgcGx1Z2luIFRpbWVTdGFtcCBOb3Rlcy4gUGFyYSBjcmVhciBlbCBsaW5rIGFxdVx1MDBFRCwgc29sYW1lbnRlIGRlYmVzIHBlZ2FyIGVsIGxpbmsgZGUgeW91dHViZSwgc2VsZWNjaW9uYXJsbyB5IHV0aWxpemFyIGVsIGNvbWFuZG8gT3BlbiBWaWRlbyBQbGF5ZXIsIG8gZWwgc2hvcnRjdXQgIFx1MjMyNSBeIE9cbiMjIyBUaW1lc3RhbXBzXG4+IFshaW1wb3J0YW50XS0gQ3JlYXIgbG9zIHRpbWVzdGFtcHMgZGVsIHZpZGVvXG4+IFBhcmEgY3JlYXIgbG9zIHRpbWVzdGFtcHMgZGVsIHZpZGVvLCBlbiBlbCBtb21lbnRvIGVuIGVsIHF1ZSBsbGVndWVzIGFsIHZpZGVvLCBzb2xvIGRlYmVzIHB1bHNhciBlbCBzaG9ydGN1dCBcdTIzMjUgXiAwLCBvIGJ1c2NhciBlbCBjb21hbmRvIEluc2VydCBUaW1lc3RhbXAuIFxuIFxuXG4jIyBDb21lbnRhcmlvcyBQZXJzb25hbGVzXG5cbiMjIEhpdG9zIGRlbCB2aWRlby5cblxuIyMgUmVzdW1lbiBJQVxuXG48JSp9ZWxzZSBpZihjbGFzaWZpY2FjaW9uID09XCJHcnVwbyBkZSBIb2phcyBkZSBUcmFiYWpvXCIpey0lPlxuXG4jIyBbW0NvbWVudGFyaW9zIGEgbGFzIHBsYW50aWxsYXMjVGVtYXMgcmVsYWNpb25hZG9zIGEgZXN0ZSBncnVwbyBkZSBob2phcyBkZSB0cmFiYWpvfFRlbWFzIHJlbGFjaW9uYWRvcyBhIGVzdGUgZ3J1cG8gZGUgaG9qYXMgZGUgdHJhYmFqbzpdXVxuXFxgXFxgXFxgZGF0YXZpZXdqc1xuY29uc3Qge2NyZWFyQXh9ID0gY3VzdG9tSlNcbmxldCBoaWpvcyA9IGR2LnBhZ2VzKCkuZmlsdGVyKGI9PiBkdi5mdW5jLmNvbnRhaW5zKGIuYXN1bnRvLCBkdi5jdXJyZW50KCkuZmlsZS5saW5rKSlcbmxldCB0b3RhbEhpam9zID0gXG5kdi50YWJsZShbXCJUZW1hXCIsXCJUaXBvXCIsXCJGZWNoYSBNb2RpZmljYWNpXHUwMEYzblwiLCBcIlBlbmRpZW50ZXNcIixcIkhpam9zXCJdLCBoaWpvcy5tYXAoYj0+IFtiLmZpbGUubGluaywgYi50ZW1hLCBiLmZlY2hhLCBiLmZpbGUudGFza3MuZmlsdGVyKGI9PiBiLnN0YXR1cyA9PSAnICcgfHwgYi5zdGF0dXMgPT0gJy8nKS5sZW5ndGgsIGNyZWFyQXgucGFnaW5hc0hpam9zKGR2LGIpLmxlbmd0aC0xXSkpXG5cXGBcXGBcXGBcblxuXG48JSp9JT5cblxuXG4jIEZpblxuLSBbL10gRmluYWxpemFkbyBlbCBkZXNhcnJvbGxvIGRlIEFub3RhY2lcdTAwRjNuIDwlaWQlPiAjY3gvQ29tcHV0YWRvci9Pcmdhbml6YXJOb3RhcyAgXG5Fc3RhZG8gZGUgbGEgbm90YTogIFxcYElOUFVUW2VzdGFkb05vdGFdWzplc3RhZG9dXFxgXG5cXGBcXGBcXGBkYXRhdmlld2pzXG5jb25zdCB7Y2FsbERWfSA9IGN1c3RvbUpTXG5jYWxsRFYuQ2FtYmlhclRpdHVsb0Rlc2NyaXBjaW9uKGR2KVxuXFxgXFxgXFxgXG4tLS1cblxcYFxcYFxcYGRhdGF2aWV3anNcbmNvbnN0IHtjYWxsRFZ9ID0gY3VzdG9tSlNcbmNhbGxEVi5DYXJydXNlbEFub3RhY2lvbmVzKGR2KVxuXFxgXFxgXFxgXG5cXGBcXGBcXGBkYXRhdmlld2pzXG5jb25zdCB7Y2FsbERWfSA9IGN1c3RvbUpTXG5jYWxsRFYuQm90b25lc1N0YW5kYXIoZHYpXG5cXGBcXGBcXGBcblxuYCIsICJpbXBvcnQge3BsYW50aWxsYX0gZnJvbSAnLi4vLi4vLi4vcGxhbnRpbGxhcy9Bbm90YWNpb25lcy9QbHQgLSBBbm90YWNpb25lcyc7XG5pbXBvcnQgeyBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWFyUGxhbnRpbGxhKGNvbnRlbmlkbzogc3RyaW5nKTogUHJvbWlzZTxURmlsZT4ge1xuICAgIC8vIERlZmluZSBsYSBydXRhIHkgZWwgbm9tYnJlIGRlbCBhcmNoaXZvIHRlbXBvcmFsXG4gICAgY29uc3QgZm9sZGVyID0gJ1BsYW50aWxsYXMnO1xuICAgIGxldCBmaWxlbmFtZSA9IFwiQXJjaGl2byBEZSBQbGFudGlsbGFcIlxuICAgIGxldCBwYXRoVGVtcG9yYWwgPSBmb2xkZXIgKyBcIi9cIiArIGZpbGVuYW1lICsgXCIubWRcIjtcblxuICAgIC8vIENyZWEgZWwgYXJjaGl2byBlbiBsYSBiXHUwMEYzdmVkYSB5IGd1YXJkYSBlbCBhcmNoaXZvIGNyZWFkbyBlbiB1bmEgdmFyaWFibGVcbiAgICBjb25zdCBhcmNoaXZvQ3JlYWRvOiBURmlsZSA9IGF3YWl0IGFwcC52YXVsdC5jcmVhdGUocGF0aFRlbXBvcmFsLCBjb250ZW5pZG8pO1xuXG4gICAgLy8gQXF1XHUwMEVEIG5lY2VzaXRhclx1MDBFRGFzIHByb2Nlc2FyIGVsIGFyY2hpdm8gY29uIFRlbXBsYXRlciBzaSBlcyBuZWNlc2FyaW9cbiAgICAvLyBFc3RvIGRlcGVuZGUgZGUgY1x1MDBGM21vIFRlbXBsYXRlciBleHBvbmdhIHN1IGZ1bmNpb25hbGlkYWQgYSBvdHJvcyBwbHVnaW5zXG4gICAgLy8gUG9yIGVqZW1wbG8sIHNpIFRlbXBsYXRlciB0aWVuZSB1biBtXHUwMEU5dG9kbyBwYXJhIHByb2Nlc2FyIGFyY2hpdm9zLCBsbyB1c2FyXHUwMEVEYXMgYXF1XHUwMEVEXG5cbiAgICAvLyAoT3BjaW9uYWwpIEVsaW1pbmEgZWwgYXJjaGl2byBkZXNwdVx1MDBFOXMgZGUgcHJvY2VzYXJsbyBzaSBubyBkZXNlYXMgY29uc2VydmFybG9cbiAgICAvLyBhd2FpdCBhcHAudmF1bHQuZGVsZXRlKGFyY2hpdm9DcmVhZG8pO1xuXG4gICAgLy8gUmV0b3JuYSBlbCBhcmNoaXZvIGNyZWFkb1xuICAgIHJldHVybiBhcmNoaXZvQ3JlYWRvO1xufVxuIiwgImltcG9ydCB7Y3JlYXJDYXJwZXRhfSBmcm9tIFwiLi91dGlscy9jcmVhckNhcnBldGFcIlxuaW1wb3J0IHtjcmVhclBsYW50aWxsYX0gZnJvbSBcIi4vdXRpbHMvY3JlYXJQbGFudGlsbGFcIlxuaW1wb3J0IHtwbGFudGlsbGF9IGZyb20gXCIuLi8uLi9wbGFudGlsbGFzL0Fub3RhY2lvbmVzL1BsdCAtIEFub3RhY2lvbmVzXCJcbmltcG9ydCB7VEZpbGUsIFRGb2xkZXJ9IGZyb20gXCJvYnNpZGlhblwiXG5pbXBvcnQge2NyZWF0ZU5vdGVGcm9tVGVtcGxhdGV9IGZyb20gXCIuL3V0aWxzL2NyZWF0ZU5vdGVGcm9tVGVtcGxhdGVcIlxuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJDb21tYW5kcyhwbHVnaW46IFBsdWdpbik6IHZvaWQge1xuXG5cbiAgICBjb25zdCBjb21hbmRvMSA9IHBsdWdpbi5hZGRDb21tYW5kKHtcbiAgICAgICAgaWQ6IFwiQ3JlYWNpb24tQ2FycGV0YVwiLFxuICAgICAgICBuYW1lOiBcIkNyZWFjaVx1MDBGM24gZGUgQ2FycGV0YVwiLFxuICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgZGVidWdnZXJcbiAgICAgICAgICAgIGF3YWl0IGNyZWFyQ2FycGV0YSgnTWkgQ2FycGV0YSBkZSBwbHVnaW4nKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHBsdWdpbi5yZWdpc3RlcmVkQ29tbWFuZElkc01CLnB1c2goY29tYW5kbzEuaWQpO1xuXG4gICAgY29uc3QgY29tYW5kbzIgPSBwbHVnaW4uYWRkQ29tbWFuZCh7XG4gICAgICAgIGlkOiBcImNyZWFyLXRlbXBsYXRlXCIsXG4gICAgICAgIG5hbWU6IFwiQ3JlYXIgdW4gYXJjaGl2byB0ZW1wbGF0ZVwiLFxuICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgYXJjaGl2byA9IGF3YWl0IGNyZWFyUGxhbnRpbGxhKHBsYW50aWxsYSk7XG4gICAgICAgICAgICBpZiAoIWFyY2hpdm8pIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiTm8gc2UgcHVkbyBjcmVhciBlbCBhcmNoaXZvLlwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICBcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICAvLyBBbG1hY2VuYXIgZWwgSUQgZGVsIGNvbWFuZG8gZW4gcmVnaXN0ZXJlZENvbW1hbmRJZHMuXG4gICAgcGx1Z2luLnJlZ2lzdGVyZWRDb21tYW5kSWRzTUIucHVzaChjb21hbmRvMi5pZCk7XG5cblxuICAgIGNvbnN0IGNvbWFuZG8zID0gcGx1Z2luLmFkZENvbW1hbmQoe1xuICAgICAgICBpZDogXCJjcmVhci1hcmNoaXZvLXRlbXBsYXRlXCIsXG4gICAgICAgIG5hbWU6IFwiQ3JlYXIgYXJjaGl2byBkZXNkZSB0ZW1wbGF0ZVwiLFxuICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBwbHVnaW5JZCA9ICd0ZW1wbGF0ZXItb2JzaWRpYW4nO1xuICAgICAgICAgICAgY29uc3QgaXNQbHVnaW5JbnN0YWxsZWQgPSBwbHVnaW4uYXBwLnBsdWdpbnMuZW5hYmxlZFBsdWdpbnMuaGFzKHBsdWdpbklkKTtcbiAgICAgICAgICAgIC8vY29uc3QgdGVtcGxhdGVyUGx1Z2luID0gcGx1Z2luLmFwcC5wbHVnaW5zLnBsdWdpbnNbcGx1Z2luSWRdO1xuICAgICAgICAgICAgLy8gSW50ZW50YSBvYnRlbmVyIGxhIHBsYW50aWxsYSBjb21vIFRGaWxlXG4gICAgICAgICAgICBsZXQgdGVtcGxhdGUgPSBcIlBsYW50aWxsYXMvQW5vdGFjaW9uZXMvUGx0IC0gQW5vdGFjaW9uZXMubWRcIjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gSW50ZW50YSBvYnRlbmVyIGxhIGNhcnBldGEgY29tbyBURm9sZGVyXG4gICAgICAgICAgICBsZXQgZm9sZGVyT2JqID0gcGx1Z2luLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoXCJJbmJveFwiKTtcbiAgICAgICAgICAgIGlmICghKGZvbGRlck9iaiBpbnN0YW5jZW9mIFRGb2xkZXIpKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIkxhIGNhcnBldGEgZXNwZWNpZmljYWRhIG5vIGV4aXN0ZSBvIG5vIGVzIHVuYSBjYXJwZXRhLlwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47IC8vIFNhbGlyIHNpIG5vIHNlIGVuY3VlbnRyYSBsYSBjYXJwZXRhIG8gbm8gZXMgdW5hIGNhcnBldGFcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGZpbGVOYW1lID0gXCJ0b0RlZmluZVwiXG4gICAgICAgICAgICBsZXQgb3Blbk5vdGUgPSB0cnVlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRlYnVnZ2VyXG4gICAgICAgICAgICBjb25zdCBhcmNoaXZvID0gYXdhaXQgY3JlYXRlTm90ZUZyb21UZW1wbGF0ZShwbHVnaW4sIHRlbXBsYXRlLCBmb2xkZXJPYmosIGZpbGVOYW1lLCBvcGVuTm90ZSk7XG5cbiAgICAgICAgICAgIGlmICghYXJjaGl2bykge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJObyBzZSBwdWRvIGNyZWFyIGVsIGFyY2hpdm8uXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgIFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIC8vIEFsbWFjZW5hciBlbCBJRCBkZWwgY29tYW5kbyBlbiByZWdpc3RlcmVkQ29tbWFuZElkcy5cbiAgICBwbHVnaW4ucmVnaXN0ZXJlZENvbW1hbmRJZHNNQi5wdXNoKGNvbWFuZG8zLmlkKTtcblxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkZWFjdGl2YXRlQ29tbWFuZHMocGx1Z2luOiBQbHVnaW4pOiB2b2lkIHtcbiAgICBcbiAgICBpZiAoIXBsdWdpbi5yZWdpc3RlcmVkQ29tbWFuZElkc01CKSByZXR1cm47XG4gICAgLy8gRWplbXBsbyBkZSBjXHUwMEYzbW8gcG9kclx1MDBFRGFzIG1hbmVqYXIgbGEgXCJkZXNhY3RpdmFjaVx1MDBGM25cIiBkZSBjb21hbmRvcy5cbiAgICBwbHVnaW4ucmVnaXN0ZXJlZENvbW1hbmRJZHNNQi5mb3JFYWNoKGNvbW1hbmRJZCA9PiB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBwbHVnaW4uYXBwLmNvbW1hbmRzLmNvbW1hbmRzW2NvbW1hbmRJZF07XG4gICAgICAgIFxuICAgICAgICBpZiAoY29tbWFuZCkge1xuICAgICAgICAgICAgLy8gU29icmVzY3JpYmlyIGVsIGNhbGxiYWNrIGRlbCBjb21hbmRvIHBhcmEgcXVlIG5vIGhhZ2EgbmFkYS5cbiAgICAgICAgICAgIGNvbW1hbmQuY2FsbGJhY2sgPSAoKSA9PiBuZXcgTm90aWNlKFwiRXN0ZSBjb21hbmRvIGhhIHNpZG8gZGVzYWN0aXZhZG8uXCIpO1xuICAgICAgICAgICAgLy8gTyBzaW1wbGVtZW50ZSBlbGltaW5hciBlbCBjYWxsYmFjayBzaSBlc28gc2UgYWp1c3RhIGEgdHUgbFx1MDBGM2dpY2EgZGUgYXBsaWNhY2lcdTAwRjNuLlxuICAgICAgICAgICAgLy8gZGVsZXRlIGNvbW1hbmQuY2FsbGJhY2s7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbiIsICJpbXBvcnQge1RGaWxlLCBURm9sZGVyfSBmcm9tIFwib2JzaWRpYW5cIlxuLyoqXG4gKiBDcmVhIHVuYSBudWV2YSBub3RhIGEgcGFydGlyIGRlIHVuYSBwbGFudGlsbGEgdXRpbGl6YW5kbyBlbCBwbHVnaW4gVGVtcGxhdGVyLlxuICogQHBhcmFtIHRlbXBsYXRlclBsdWdpbiBSZWZlcmVuY2lhIGFsIHBsdWdpbiBUZW1wbGF0ZXIuXG4gKiBAcGFyYW0gdGVtcGxhdGUgTGEgcGxhbnRpbGxhIGEgdXRpbGl6YXIsIHB1ZWRlIHNlciB1biBURmlsZSBvIGVsIHBhdGggY29tbyBzdHJpbmcuXG4gKiBAcGFyYW0gZm9sZGVyIEVsIGZvbGRlciBkb25kZSBzZSBjcmVhclx1MDBFMSBsYSBudWV2YSBub3RhLiBPcGNpb25hbC5cbiAqIEBwYXJhbSBmaWxlbmFtZSBFbCBub21icmUgZGVsIGFyY2hpdm8gZGUgbGEgbnVldmEgbm90YS4gT3BjaW9uYWwuXG4gKiBAcGFyYW0gb3Blbk5ld05vdGUgU2kgc2UgZGViZSBhYnJpciBsYSBudWV2YSBub3RhIHRyYXMgY3JlYXJsYS4gUG9yIGRlZmVjdG8gZXMgdHJ1ZS5cbiAqIEByZXR1cm5zIFByb21pc2UgcXVlIHJlc3VlbHZlIGEgVEZpbGUgc2kgbGEgbm90YSBmdWUgY3JlYWRhLCB1bmRlZmluZWQgZW4gY2FzbyBjb250cmFyaW8uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVOb3RlRnJvbVRlbXBsYXRlKFxuICAgIHBsdWdpbjogUGx1Z2luLCAvLyBFc3RhIGVzIHVuYSBzdXBvc2ljaVx1MDBGM24sIG5lY2VzaXRhclx1MDBFMXMgYWp1c3RhciBzZWdcdTAwRkFuIGNcdTAwRjNtbyBhY2NlZGFzIGEgVGVtcGxhdGVyIGVuIHR1IHBsdWdpblxuICAgIHRlbXBsYXRlOiBURmlsZSB8IHN0cmluZyxcbiAgICBmb2xkZXI/OiBURm9sZGVyLFxuICAgIGZpbGVuYW1lPzogc3RyaW5nLFxuICAgIG9wZW5OZXdOb3RlOiBib29sZWFuID0gdHJ1ZVxuKTogUHJvbWlzZTxURmlsZSB8IHVuZGVmaW5lZD4ge1xuICAgIC8vIEFzZWd1cmFyc2UgZGUgcXVlIGVsIHBsdWdpbiBUZW1wbGF0ZXIgZXN0XHUwMEUxIGluc3RhbGFkbyB5IGhhYmlsaXRhZG9cbiAgICBpZiAoIXBsdWdpbiB8fCAhcGx1Z2luLmFwcC5wbHVnaW5zLmVuYWJsZWRQbHVnaW5zLmhhcygndGVtcGxhdGVyLW9ic2lkaWFuJykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRWwgcGx1Z2luIFRlbXBsYXRlciBubyBlc3RcdTAwRTEgaGFiaWxpdGFkby4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBGb3JtYSBkZSBhY2NlZGVyIGFsIG9iamV0byB0cCBub3JtYWwgcXVlIGhlIHVzYWRvIGRlc2RlIERWSlNcbiAgICBjb25zdCB0ZW1wbGF0ZXJQbHVnaW4gPSBwbHVnaW4uYXBwLnBsdWdpbnMucGx1Z2luc1sndGVtcGxhdGVyLW9ic2lkaWFuJ107XG4gICAgY29uc3QgdHAgPSB0ZW1wbGF0ZXJQbHVnaW4udGVtcGxhdGVyLmN1cnJlbnRfZnVuY3Rpb25zX29iamVjdDtcbiAgICBcblxuICAgIGlmICghdHApIHtcbiAgICBjb25zb2xlLmVycm9yKFwiTm8gc2UgcHVkbyBhY2NlZGVyIGFsIG9iamV0byBkZSBmdW5jaW9uZXMgYWN0dWFsZXMgZGUgVGVtcGxhdGVyLlwiKTtcbiAgICByZXR1cm47XG59XG4gICAgLy8gdGVtcGxhdGVGaWxlIHB1ZWRlIHNlciB1biBzdHJpbmcgbyBlbCB0ZmlsZSBvYnRlbmlkbyBkZSBlc3RhIG1hbmVyYSBvIGNvbiBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKClcbiAgICBkZWJ1Z2dlclxuICAgIGxldCB0ZW1wbGF0ZUZpbGUgPSB0cC5maWxlLmZpbmRfdGZpbGUodGVtcGxhdGUpO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG5ld05vdGUgPSBhd2FpdCB0cC5maWxlLmNyZWF0ZV9uZXcodGVtcGxhdGVGaWxlLCBmaWxlbmFtZSwgb3Blbk5ld05vdGUsIGZvbGRlcik7XG4gICAgICAgIHJldHVybiBuZXdOb3RlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFsIGNyZWFyIGxhIG5vdGEgZGVzZGUgbGEgcGxhbnRpbGxhOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbn0iLCAiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyByZWdpc3RlclJpYmJvbk1lbnUgfSBmcm9tIFwiLi91aS9yaWJib25CdXR0b25cIjtcblxuXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZhdGVNb2R1bG9CdXNxdWVkYUF2YW56YWRhKHBsdWdpbjogUGx1Z2luKTogdm9pZCB7XG4gICAgcmVnaXN0ZXJSaWJib25NZW51KHBsdWdpbik7XG59IiwgImltcG9ydCB7IEFwcCwgTWVudSwgUGx1Z2luLCBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgU2VhcmNoQXJlYXNEZVZpZGFNb2RhbCB9IGZyb20gXCIuL21vZGFsXCI7IC8vIEFzZWdcdTAwRkFyYXRlIGRlIHRlbmVyIGVsIGltcG9ydCBjb3JyZWN0byBwYXJhIHR1IG1vZGFsXG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlclJpYmJvbk1lbnUocGx1Z2luOiBQbHVnaW4pOiB2b2lkIHtcbiAgICAvLyBFc3RlIGVzIGVsIFx1MDBFRGNvbm8gZGVsIG1lblx1MDBGQSBlbiBlbCByaWJib24sIGNhbWJpYSBcImRpY2VcIiBwb3IgZWwgXHUwMEVEY29ubyBxdWUgcHJlZmllcmFzXG4gICAgcGx1Z2luLmFkZFJpYmJvbkljb24oXCJmb2xkZXItc2VhcmNoLTJcIiwgXCJCXHUwMEZBc3F1ZWRhIEF2YW56YWRhXCIsIGFzeW5jIChldmVudCkgPT4ge1xuICAgICAgICAvLyBDcmVhciBlbCBtZW5cdTAwRkEgYWwgaGFjZXIgY2xpYyBlbiBlbCBcdTAwRURjb25vXG4gICAgICAgIGNvbnN0IG1lbnUgPSBuZXcgTWVudShwbHVnaW4uYXBwKTtcblxuICAgICAgICAvLyBBZ3JlZ2FyIG9wY2lvbmVzIGFsIG1lblx1MDBGQVxuXG4gICAgICAgIC8vIFx1MDBDMXJlYXMgZGUgVmlkYVxuICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+XG4gICAgICAgICAgICBpdGVtLnNldFRpdGxlKFwiXHUwMEMxcmVhcyBkZSBWaWRhXCIpXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBDb3JyZWNjaVx1MDBGM246IEFzZWdcdTAwRkFyYXRlIGRlIGFicmlyIGVsIG1vZGFsIGNvcnJlY3RhbWVudGVcbiAgICAgICAgICAgICAgICAgICAgbmV3IFNlYXJjaEFyZWFzRGVWaWRhTW9kYWwocGx1Z2luLmFwcCwgKGVzdGFkb1NlbGVjY2lvbmFkbykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJFc3RhZG8gc2VsZWNjaW9uYWRvOlwiLCBlc3RhZG9TZWxlY2Npb25hZG8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXF1XHUwMEVEIHB1ZWRlcyBjb250aW51YXIgY29uIGxhIGxcdTAwRjNnaWNhIHBhcmEgbWFuZWphciBlbCBlc3RhZG8gc2VsZWNjaW9uYWRvXG4gICAgICAgICAgICAgICAgICAgIH0pLm9wZW4oKTsgLy8gQ29ycmVnaWRvOiBBXHUwMEYxYWRpZG8gLm9wZW4oKSBwYXJhIGFicmlyIGVsIG1vZGFsXG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIC8vIFx1MDBDMXJlYXMgZGUgSW50ZXJcdTAwRTlzXG4gICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT5cbiAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoXCJcdTAwQzFyZWFzIGRlIEludGVyXHUwMEU5c1wiKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXF1XHUwMEVEIGxhIGxcdTAwRjNnaWNhIHBhcmEgbGEgYlx1MDBGQXNxdWVkYSBkZSBcIlx1MDBDMXJlYXMgZGUgSW50ZXJcdTAwRTlzXCJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJcdTAwQzFyZWFzIGRlIEludGVyXHUwMEU5c1wiKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgLy8gQW5vdGFjaVx1MDBGM25cbiAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PlxuICAgICAgICAgICAgaXRlbS5zZXRUaXRsZShcIkFub3RhY2lcdTAwRjNuXCIpXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBBcXVcdTAwRUQgbGEgbFx1MDBGM2dpY2EgcGFyYSBsYSBiXHUwMEZBc3F1ZWRhIGRlIFwiQW5vdGFjaVx1MDBGM25cIlxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFub3RhY2lcdTAwRjNuXCIpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAvLyBSZWN1cnNvIFJlY3VycmVudGVcbiAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PlxuICAgICAgICAgICAgaXRlbS5zZXRUaXRsZShcIlJlY3Vyc28gUmVjdXJyZW50ZVwiKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXF1XHUwMEVEIGxhIGxcdTAwRjNnaWNhIHBhcmEgbGEgYlx1MDBGQXNxdWVkYSBkZSBcIlJlY3Vyc28gUmVjdXJyZW50ZVwiXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmVjdXJzbyBSZWN1cnJlbnRlXCIpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAvLyBHZXN0aVx1MDBGM24gRGlhcmlhXG4gICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT5cbiAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoXCJHZXN0aVx1MDBGM24gRGlhcmlhXCIpXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBBcXVcdTAwRUQgbGEgbFx1MDBGM2dpY2EgcGFyYSBsYSBiXHUwMEZBc3F1ZWRhIGRlIFwiR2VzdGlcdTAwRjNuIERpYXJpYVwiXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiR2VzdGlcdTAwRjNuIERpYXJpYVwiKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgLy8gUmVnaXN0cm8gZGUgVGllbXBvXG4gICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT5cbiAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoXCJSZWdpc3RybyBkZSBUaWVtcG9cIilcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFxdVx1MDBFRCBsYSBsXHUwMEYzZ2ljYSBwYXJhIGxhIGJcdTAwRkFzcXVlZGEgZGUgXCJSZWdpc3RybyBkZSBUaWVtcG9cIlxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJlZ2lzdHJvIGRlIFRpZW1wb1wiKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgLy8gTW9zdHJhciBlbCBtZW5cdTAwRkEgZW4gbGEgcG9zaWNpXHUwMEYzbiBkZWwgY3Vyc29yXG4gICAgICAgIG1lbnUuc2hvd0F0UG9zaXRpb24oeyB4OiBldmVudC5wYWdlWCwgeTogZXZlbnQucGFnZVkgfSk7XG4gICAgfSk7XG59XG4iLCAiaW1wb3J0IHsgQXBwLCBNb2RhbCwgU2V0dGluZywgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IEZ1enp5Tm90ZVN1Z2dlc3RlciB9IGZyb20gXCIuLi9zZWFyY2gvRnV6enlOb3RlU3VnZ2VzdGVyXCI7IC8vIEFzZWdcdTAwRkFyYXRlIGRlIHF1ZSBsYSBydXRhIGRlIGltcG9ydGFjaVx1MDBGM24gc2VhIGNvcnJlY3RhXG5cbmV4cG9ydCBjbGFzcyBTZWFyY2hBcmVhc0RlVmlkYU1vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIG9uU2VsZWN0RXN0YWRvOiAoZXN0YWRvOiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgZXN0YWRvU2VsZWNjaW9uYWRvOiBzdHJpbmcgPSBcIlx1RDgzRFx1REZFMlwiOyAvLyBFc3RhZG8gcG9yIGRlZmVjdG8gY29tbyBlbW9qaSBkaXJlY3RhbWVudGVcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBvblNlbGVjdEVzdGFkbzogKGVzdGFkbzogc3RyaW5nKSA9PiB2b2lkKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgICAgIHRoaXMub25TZWxlY3RFc3RhZG8gPSBvblNlbGVjdEVzdGFkbztcbiAgICB9XG5cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIGxldCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XG5cbiAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKFwiaDNcIiwgeyB0ZXh0OiBcIkJ1c2NhciBcdTAwQzFyZWFzIGRlIFZpZGFcIiB9KTtcblxuICAgICAgICAvLyBVc2FuZG8gU2V0dGluZyBwYXJhIGNyZWFyIGVsIERyb3Bkb3duXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgICAgIC5zZXROYW1lKFwiRXN0YWRvXCIpXG4gICAgICAgICAgICAuc2V0RGVzYyhcIkVsaWdlIGVsIGVzdGFkbzpcIilcbiAgICAgICAgICAgIC5hZGREcm9wZG93bihkcm9wZG93biA9PiB7XG4gICAgICAgICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9ucyh7IFwiXHVEODNEXHVERkUyXCI6IFwiVmVyZGVcIiwgXCJcdUQ4M0RcdUREMzVcIjogXCJBenVsXCIsIFwiXHVEODNEXHVERkUxXCI6IFwiQW1hcmlsbG9cIiwgXCJcdUQ4M0RcdUREMzRcIjogXCJSb2pvXCIgfSk7XG4gICAgICAgICAgICAgICAgZHJvcGRvd24uc2V0VmFsdWUodGhpcy5lc3RhZG9TZWxlY2Npb25hZG8pOyAvLyBFc3RhYmxlY2UgZWwgdmFsb3IgcG9yIGRlZmVjdG9cbiAgICAgICAgICAgICAgICBkcm9wZG93bi5vbkNoYW5nZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXN0YWRvU2VsZWNjaW9uYWRvID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBCb3RcdTAwRjNuIGRlIGJcdTAwRkFzcXVlZGFcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxuICAgICAgICAgICAgLmFkZEJ1dHRvbihidXR0b24gPT4ge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRCdXR0b25UZXh0KFwiQnVzY2FyXCIpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vdGFzRmlsdHJhZGFzID0gYXdhaXQgdGhpcy5maWx0cmFyTm90YXNQb3JFc3RhZG9ZRGlyZWN0b3JpbyhcIkVzdHJ1Y3R1cmEvQXJlYXMgZGUgVmlkYVwiLCB0aGlzLmVzdGFkb1NlbGVjY2lvbmFkbyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIk5vdGFzIGZpbHRyYWRhczpcIiwgbm90YXNGaWx0cmFkYXMubGVuZ3RoLCBub3Rhc0ZpbHRyYWRhcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgRnV6enlOb3RlU3VnZ2VzdGVyKHRoaXMuYXBwLCBub3Rhc0ZpbHRyYWRhcykub3BlbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIE1cdTAwRTl0b2RvIHBhcmEgZmlsdHJhciBub3RhcyBwb3IgZXN0YWRvIHkgZGlyZWN0b3Jpb1xuICAgIGFzeW5jIGZpbHRyYXJOb3Rhc1BvckVzdGFkb1lEaXJlY3RvcmlvKGRpcmVjdG9yaW86IHN0cmluZywgZXN0YWRvOiBzdHJpbmcpOiBQcm9taXNlPFRGaWxlW10+IHtcbiAgICAgICAgY29uc3QgYXJjaGl2b3MgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG4gICAgICAgIGxldCBub3Rhc0ZpbHRyYWRhcyA9IGFyY2hpdm9zLmZpbHRlcihhcmNoaXZvID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBhcmNoaXZvLnBhdGg7XG4gICAgICAgICAgICBpZiAoIXBhdGguc3RhcnRzV2l0aChkaXJlY3RvcmlvKSkgcmV0dXJuIGZhbHNlOyAvLyBGaWx0cmEgcG9yIGRpcmVjdG9yaW9cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZGF0b3MgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShhcmNoaXZvKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQXJjaGl2byBwcm9jZXNhZG86XCIsIGFyY2hpdm8ucGF0aCk7XG4gICAgICAgICAgICAvLyBBc2VnXHUwMEZBcmF0ZSBkZSBxdWUgZWwgZXN0YWRvIGRlbCBmcm9udG1hdHRlciBjb2luY2lkZSBjb24gZWwgZXN0YWRvIHByb3BvcmNpb25hZG9cbiAgICAgICAgICAgIGlmIChkYXRvcy5mcm9udG1hdHRlciAmJiBkYXRvcy5mcm9udG1hdHRlci5lc3RhZG8gPT09IGVzdGFkbykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQXJjaGl2byBpbmNsdWlkbzpcIiwgYXJjaGl2by5wYXRoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgXG4gICAgICAgIC8vIE9yZGVuYSBsYXMgbm90YXMgZmlsdHJhZGFzIHBvciBmZWNoYSBkZSBtb2RpZmljYWNpXHUwMEYzbiwgZGUgbGEgbVx1MDBFMXMgcmVjaWVudGUgYSBsYSBtXHUwMEUxcyBhbnRpZ3VhXG4gICAgICAgIG5vdGFzRmlsdHJhZGFzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBiLnN0YXQubXRpbWUgLSBhLnN0YXQubXRpbWU7IC8vIERlc2NlbmRlbnRlXG4gICAgICAgIH0pO1xuICAgIFxuICAgICAgICByZXR1cm4gbm90YXNGaWx0cmFkYXM7XG4gICAgfVxuICAgIFxufVxuIiwgIi8vIEVuIGFsZ1x1MDBGQW4gbHVnYXIgZGUgdHUgbVx1MDBGM2R1bG8sIGNvbW8gc2VhcmNoL0Z1enp5Tm90ZVN1Z2dlc3Rlci50c1xuaW1wb3J0IHsgQXBwLCBGdXp6eVN1Z2dlc3RNb2RhbCwgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuZXhwb3J0IGNsYXNzIEZ1enp5Tm90ZVN1Z2dlc3RlciBleHRlbmRzIEZ1enp5U3VnZ2VzdE1vZGFsPFRGaWxlPiB7XG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHByaXZhdGUgbm90YXM6IFRGaWxlW10pIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICB9XG5cbiAgICBnZXRJdGVtcygpOiBURmlsZVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm90YXM7XG4gICAgfVxuXG4gICAgZ2V0SXRlbVRleHQoaXRlbTogVEZpbGUpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gaXRlbS5iYXNlbmFtZTsgLy8gTyBjdWFscXVpZXIgb3RybyBmb3JtYXRvIHF1ZSBwcmVmaWVyYXNcbiAgICB9XG5cbiAgICBvbkNob29zZUl0ZW0oaXRlbTogVEZpbGUsIGV2dDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgLy8gQXF1XHUwMEVEIGRlZmluZXMgcXVcdTAwRTkgaGFjZXIgY3VhbmRvIHNlIHNlbGVjY2lvbmEgdW5hIG5vdGEuIFBvciBlamVtcGxvLCBhYnJpciBsYSBub3RhOlxuICAgICAgICBjb25zdCBsZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYodHJ1ZSk7XG4gICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5zZXRBY3RpdmVMZWFmKGxlYWYsIGZhbHNlKTtcbiAgICAgICAgbGVhZi5vcGVuRmlsZShpdGVtKTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgUGx1Z2luLCBTdGF0dXNCYXIsIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5leHBvcnQgY2xhc3MgU3RhdHVzQmFyRXh0ZW5zaW9uIHtcbiAgICBwbHVnaW46IFBsdWdpbjtcbiAgICBzdGF0dXNCYXI6IFN0YXR1c0JhciB8IG51bGwgPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgfVxuXG4gICAgYWN0aXZhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXR1c0JhcikgcmV0dXJuOyAvLyBTaSB5YSBlc3RcdTAwRTEgYWN0aXZvLCBubyBoYWNlciBuYWRhXG5cbiAgICAgICAgdGhpcy5zdGF0dXNCYXIgPSB0aGlzLnBsdWdpbi5hZGRTdGF0dXNCYXJJdGVtKCk7XG4gICAgICAgIHRoaXMudXBkYXRlU3RhdHVzQmFyKCk7XG4gICAgICAgIC8vIFJlZ2lzdHJhciBldmVudG8gZmlsZS1vcGVuXG4gICAgICAgIHRoaXMucGx1Z2luLnJlZ2lzdGVyRXZlbnQoXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5hcHAud29ya3NwYWNlLm9uKFwiZmlsZS1vcGVuXCIsIChmaWxlOiBURmlsZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdHVzQmFyKGZpbGUpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBkZWFjdGl2YXRlKCkge1xuICAgICAgICBpZiAoIXRoaXMuc3RhdHVzQmFyKSByZXR1cm47IC8vIFNpIHlhIGVzdFx1MDBFMSBkZXNhY3RpdmFkbywgbm8gaGFjZXIgbmFkYVxuXG4gICAgICAgIHRoaXMuc3RhdHVzQmFyLnJlbW92ZSgpO1xuICAgICAgICB0aGlzLnN0YXR1c0JhciA9IG51bGw7XG4gICAgICAgIC8vIE5vIG5lY2VzaXRhcyBkZXN1c2NyaWJpciBlbCBldmVudG8gYXF1XHUwMEVEIHNpIHVzYXMgcmVnaXN0ZXJFdmVudCwgT2JzaWRpYW4gbG8gbWFuZWphIGF1dG9tXHUwMEUxdGljYW1lbnRlLlxuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlU3RhdHVzQmFyKGZpbGU/OiBURmlsZSkge1xuICAgICAgICBjb25zdCBjdXJyZW50RmlsZSA9IGZpbGUgfHwgdGhpcy5wbHVnaW4uYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG4gICAgICAgIGlmICghY3VycmVudEZpbGUgfHwgIXRoaXMuc3RhdHVzQmFyKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXR1c0Jhcj8uc2V0VGV4dCgnJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmaWxlQ2FjaGUgPSB0aGlzLnBsdWdpbi5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoY3VycmVudEZpbGUpO1xuICAgICAgICBjb25zdCBhbGlhc2VzID0gZmlsZUNhY2hlLmZyb250bWF0dGVyPy5hbGlhc2VzIHx8IFtdO1xuICAgICAgICB0aGlzLnN0YXR1c0Jhci5zZXRUZXh0KGFsaWFzZXMubGVuZ3RoID4gMCA/IGBBbGlhczogJHthbGlhc2VzWzBdfWAgOiAnTm8gQWxpYXMnKTtcbiAgICB9XG59XG4iLCAiLy8gTW9kdWxvUmVnaXN0cm9UaWVtcG8udHNcblxuaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyByZWdpc3RlclJpYmJvbk1lbnUsIGRlYWN0aXZhdGVSaWJib25NZW51IH0gZnJvbSBcIi4vcmliYm9uTWVudVwiO1xuaW1wb3J0IHsgcmVnaXN0ZXJDb21tYW5kcywgZGVhY3RpdmF0ZUNvbW1hbmRzIH0gZnJvbSBcIi4vY29tbWFuZHNcIjtcblxuZXhwb3J0IGNsYXNzIE1vZHVsb1JlZ2lzdHJvVGllbXBvIHtcbiAgICBwbHVnaW46IFBsdWdpbjtcblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgIH1cblxuICAgIGFjdGl2YXRlKCkge1xuICAgICAgICAvLyBBc2VnXHUwMEZBcmF0ZSBkZSBxdWUgZWwgcmliYm9uIHNvbG8gc2UgcmVnaXN0cmUgc2kgYVx1MDBGQW4gbm8gaGEgc2lkbyByZWdpc3RyYWRvXG4gICAgICAgIGlmICghdGhpcy5wbHVnaW4ucmliYm9uQnV0dG9uUlQpIHtcbiAgICAgICAgICAgIHJlZ2lzdGVyUmliYm9uTWVudSh0aGlzLnBsdWdpbik7XG4gICAgICAgIH1cbiAgICAgICAgcmVnaXN0ZXJDb21tYW5kcyh0aGlzLnBsdWdpbik7XG4gICAgfVxuXG4gICAgZGVhY3RpdmF0ZSgpIHtcbiAgICAgICAgZGVhY3RpdmF0ZVJpYmJvbk1lbnUodGhpcy5wbHVnaW4pO1xuICAgICAgICBkZWFjdGl2YXRlQ29tbWFuZHModGhpcy5wbHVnaW4pO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBBcHAsIE1lbnUsIFBsdWdpbiwgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IGN1bXBsZUNvbmRpY2lvbiB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlclJpYmJvbk1lbnUocGx1Z2luOiBQbHVnaW4pOiB2b2lkIHtcbiAgICAvLyBFc3RlIGVzIGVsIFx1MDBFRGNvbm8gZGVsIG1lblx1MDBGQSBlbiBlbCByaWJib24sIGNhbWJpYSBcImRpY2VcIiBwb3IgZWwgXHUwMEVEY29ubyBxdWUgcHJlZmllcmFzXG4gICAgXG4gICAgcGx1Z2luLnJpYmJvbkJ1dHRvblJUID0gcGx1Z2luLmFkZFJpYmJvbkljb24oXCJjbG9ja1wiLCBcIlJlZ2lzdHJvIGRlIFRpZW1wb1wiLCBhc3luYyAoZXZlbnQpID0+IHtcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWFyIGVsIG1lblx1MDBGQSBhbCBoYWNlciBjbGljIGVuIGVsIFx1MDBFRGNvbm9cbiAgICAgICAgY29uc3QgbWVudSA9IG5ldyBNZW51KHBsdWdpbi5hcHApO1xuXG4gICAgICAgIC8vIEFncmVnYXIgb3BjaW9uZXMgYWwgbWVuXHUwMEZBXG4gICAgICAgIC8vIExhIG9wY2lcdTAwRjNuIGFob3JhLCBzb2xvIHNlIGFjdGl2YSBzaSBoYXkgYWxnXHUwMEZBbiByZWdpc3RybyBkZSB0aWVtcG8gZW4gZWplY3VjaVx1MDBGM24uXG4gICAgICAgIGlmIChhd2FpdCBjdW1wbGVDb25kaWNpb24ocGx1Z2luLmFwcCkpIHtcbiAgICAgICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT5cbiAgICAgICAgICAgICAgICBpdGVtLnNldFRpdGxlKFwiQWhvcmFcIilcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBaG9yYVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG5cblxuICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+XG4gICAgICAgICAgICBpdGVtLnNldFRpdGxlKFwiUmVnaXN0cmFyIFRpZW1wb1wiKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXF1XHUwMEVEIGxhIGxcdTAwRjNnaWNhIHBhcmEgXCJSZWdpc3RyYXIgVGllbXBvXCJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJSZWdpc3RyYXIgVGllbXBvXCIpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuXG4gICAgICAgIC8vIExhIG9wY2lcdTAwRjNuIERldGVuZXIgUmVnaXN0cm8sIHNvbG8gc2UgYWN0aXZhIHNpIGhheSBhbGdcdTAwRkFuIHJlZ2lzdHJvIGRlIHRpZW1wbyBlbiBlamVjdWNpXHUwMEYzbi5cbiAgICAgICAgaWYgKGF3YWl0IGN1bXBsZUNvbmRpY2lvbihwbHVnaW4uYXBwKSkge1xuICAgICAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PlxuICAgICAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoXCJEZXRlbmVyIFJlZ2lzdHJvXCIpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFxdVx1MDBFRCBsYSBsXHUwMEYzZ2ljYSBwYXJhIFwiRGV0ZW5lciBSZWdpc3Ryb1wiXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkRldGVuZXIgUmVnaXN0cm9cIik7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT5cbiAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoXCJUYXJlYXMgZW4gcHJvZ3Jlc29cIilcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFxdVx1MDBFRCBsYSBsXHUwMEYzZ2ljYSBwYXJhIFwiVGFyZWFzIGVuIHByb2dyZXNvXCJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJUYXJlYXMgZW4gcHJvZ3Jlc29cIik7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT5cbiAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoXCJSZWdpc3Ryb3MgZGUgaG95XCIpXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBBcXVcdTAwRUQgbGEgbFx1MDBGM2dpY2EgcGFyYSBcIlJlZ2lzdHJvcyBkZSBob3lcIlxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJlZ2lzdHJvcyBkZSBob3lcIik7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIC8vIE1vc3RyYXIgZWwgbWVuXHUwMEZBIGVuIGxhIHBvc2ljaVx1MDBGM24gZGVsIGN1cnNvclxuICAgICAgICBtZW51LnNob3dBdFBvc2l0aW9uKHsgeDogZXZlbnQucGFnZVgsIHk6IGV2ZW50LnBhZ2VZIH0pO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVhY3RpdmF0ZVJpYmJvbk1lbnUocGx1Z2luOiBQbHVnaW4pOiB2b2lkIHtcbiAgICBpZiAocGx1Z2luLnJpYmJvbkJ1dHRvblJUKSB7XG4gICAgICAgIHBsdWdpbi5yaWJib25CdXR0b25SVC5yZW1vdmUoKTtcbiAgICAgICAgcGx1Z2luLnJpYmJvbkJ1dHRvblJUID0gbnVsbDtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgQXBwLCBURmlsZSwgVEZvbGRlciwgTW9kYWwsIEZ1enp5U3VnZ2VzdE1vZGFsLCBGdXp6eU1hdGNoLCBOb3RpY2UgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7U2VsZWNjaW9uTW9kYWx9IGZyb20gXCIuLi9tb2RhbGVzL3NlbGVjY2lvbk1vZGFsXCJcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGN1bXBsZUNvbmRpY2lvbihhcHA6IEFwcCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IGZpbGVzID0gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcbiAgICBcbiAgICBmb3IgKGxldCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgICAgIGlmIChmaWxlLnBhdGguc3RhcnRzV2l0aChcIkVzdHJ1Y3R1cmEvUmVnaXN0cm8gVGllbXBvXCIpKSB7XG4gICAgICAgICAgICAvLyBPYnRlbmVyIGxvcyBtZXRhZGF0b3MgZGVsIGFyY2hpdm8gZGVzZGUgbWV0YWRhdGFDYWNoZVxuICAgICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFZlcmlmaWNhciBzaSBlbCBmcm9udG1hdHRlciBjb250aWVuZSBlbCBjYW1wbyBcImVzdGFkb1wiIGNvbiBlbCB2YWxvciBcIlx1RDgzRFx1REZFMlwiXG4gICAgICAgICAgICBpZiAobWV0YWRhdGE/LmZyb250bWF0dGVyPy5lc3RhZG8gPT09IFwiXHVEODNEXHVERkUyXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbiBleHBvcnQgYXN5bmMgZnVuY3Rpb24gYnVzY2FyUmVnaXN0cm9zQWN0aXZvcyhhcHA6IEFwcCk6IFByb21pc2U8VEZpbGUgfCBudWxsPiB7XG4gICAgXG4gICAgY29uc3QgZmlsZXMgPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgICBcbiAgICAgZm9yIChsZXQgZmlsZSBvZiBmaWxlcykge1xuICAgICAgICAgaWYgKGZpbGUucGF0aC5zdGFydHNXaXRoKFwiU3Vic2lzdGVtYXMvUmVnaXN0cm8gVGllbXBvL1JlZ2lzdHJvc1wiKSkge1xuICAgICAgICAgICAgIC8vIE9idGVuZXIgbG9zIG1ldGFkYXRvcyBkZWwgYXJjaGl2byBkZXNkZSBtZXRhZGF0YUNhY2hlXG4gICAgICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XG4gICAgICAgICAgICAgXG4gICAgICAgICAgICAgLy8gVmVyaWZpY2FyIHNpIGVsIGZyb250bWF0dGVyIGNvbnRpZW5lIGVsIGNhbXBvIFwiZXN0YWRvXCIgY29uIGVsIHZhbG9yIFwiXHVEODNEXHVERkUyXCJcbiAgICAgICAgICAgICBpZiAobWV0YWRhdGE/LmZyb250bWF0dGVyPy5lc3RhZG8gPT09IFwiXHVEODNEXHVERkUyXCIpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsZTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgIH1cbiAgICAgXG4gICAgIHJldHVybiA7XG4gfVxuXG5cbiAvLyBTdXBvbmVtb3MgcXVlIGVzdGEgZnVuY2lcdTAwRjNuIHNlIHViaWNhclx1MDBFMSBlbiBhbGdcdTAwRkFuIGx1Z2FyIGRvbmRlIHB1ZWRhIGFjY2VkZXIgYSBgYXBwYCBkZSBPYnNpZGlhbi5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhck9iamV0b1JlZ2lzdHJvKHBsdWdpbikge1xuICAgIFxuICAgIGNvbnN0IGFjdGl2byA9IHBsdWdpbi5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcbiAgICBpZiAoIWFjdGl2bykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTm8gaGF5IHVuIGFyY2hpdm8gYWN0aXZvIHBhcmEgbGEgY3JlYWNpXHUwMEYzbiBkZSByZWdpc3RybyBkZSB0aWVtcG8uIFNlIGRlc2NhcnRhIHBhcmEgbGEgY3JlYWNpXHUwMEYzbiBkZSByZWdpc3RybyBkZSB0aWVtcG8uXCIpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgZm9sZGVyID0gcGx1Z2luLnNldHRpbmdzLmZvbGRlcl9SZWdpc3Ryb1RpZW1wb1xuICAgIGNvbnN0IGluZGljZSA9IHBsdWdpbi5zZXR0aW5ncy5pbmRpY2VfUmVnaXN0cm9UaWVtcG9cbiAgICBcbiAgICBsZXQgbWF4SWQgPSAwO1xuXG4gICAgLy8gT2J0XHUwMEU5biB0b2RvcyBsb3MgYXJjaGl2b3MgTWFya2Rvd25cbiAgICBjb25zdCBmaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG5cbiAgICAvLyBGaWx0cmEgcG9yIGxvcyBhcmNoaXZvcyBlbiBsYSBjYXJwZXRhIGRlc2VhZGFcbiAgICBjb25zdCByZWdpc3Ryb3NFeGlzdGVudGVzID0gZmlsZXMuZmlsdGVyKGZpbGUgPT4gZmlsZS5wYXRoLnN0YXJ0c1dpdGgoZm9sZGVyKSk7XG4gICAgIFxuICAgIC8vIFVzYSBtZXRhZGF0YUNhY2hlIHBhcmEgYnVzY2FyIGxvcyBJRHMgZW4gZWwgZnJvbnRtYXR0ZXJcbiAgICAgcmVnaXN0cm9zRXhpc3RlbnRlcy5mb3JFYWNoKGZpbGUgPT4ge1xuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXI7XG4gICAgICAgIGlmIChtZXRhZGF0YSAmJiBtZXRhZGF0YS5pZCAmJiAhaXNOYU4obWV0YWRhdGEuaWQpKSB7XG4gICAgICAgICAgICBjb25zdCBpZCA9IHBhcnNlSW50KG1ldGFkYXRhLmlkKTtcbiAgICAgICAgICAgIGlmIChpZCA+IG1heElkKSBtYXhJZCA9IGlkO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBFbCBwclx1MDBGM3hpbW8gSUQgZGlzcG9uaWJsZVxuICAgIGNvbnN0IG5leHRJZCA9IG1heElkICsgMTtcblxuICAgIC8vIEZvcm1hdGVhciBsYSBmZWNoYSBhY3R1YWxcbiAgICBjb25zdCBmZWNoYUNvbXBsZXRhID0gZm9ybWF0ZWFyRmVjaGEobmV3IERhdGUoKSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBhY3Rpdm8sXG4gICAgICAgIG5vbWJyZTogYWN0aXZvLmJhc2VuYW1lLFxuICAgICAgICBmb2xkZXIsXG4gICAgICAgIGluZGljZSxcbiAgICAgICAgaWQ6IG5leHRJZCxcbiAgICAgICAgZmVjaGE6IGZlY2hhQ29tcGxldGEsXG4gICAgICAgIGluZGljZV9EVkpTOiBgXCIke2luZGljZX1cImAsXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0ZWFyRmVjaGEoZmVjaGE6IERhdGUpOiBzdHJpbmcge1xuICAgIGNvbnN0IG9mZnNldCA9IGZlY2hhLmdldFRpbWV6b25lT2Zmc2V0KCkgKiA2MDAwMDtcbiAgICBjb25zdCBmZWNoYUxvY2FsID0gbmV3IERhdGUoZmVjaGEuZ2V0VGltZSgpIC0gb2Zmc2V0KTtcbiAgICBjb25zdCBmZWNoYUZvcm1hdG8gPSBmZWNoYUxvY2FsLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcbiAgICBjb25zdCBkaWFzID0gWydEb21pbmdvJywgJ0x1bmVzJywgJ01hcnRlcycsICdNaVx1MDBFOXJjb2xlcycsICdKdWV2ZXMnLCAnVmllcm5lcycsICdTXHUwMEUxYmFkbyddO1xuICAgIGNvbnN0IGRpYVNlbWFuYSA9IGRpYXNbZmVjaGEuZ2V0RGF5KCldO1xuICAgIGNvbnN0IGhvcmFGb3JtYXRvID0gZmVjaGEudG9UaW1lU3RyaW5nKCkuc3BsaXQoJyAnKVswXS5zdWJzdHJpbmcoMCwgNSk7XG4gICAgcmV0dXJuIGAke2ZlY2hhRm9ybWF0b30gJHtkaWFTZW1hbmF9ICR7aG9yYUZvcm1hdG99YDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHZlcmlmaWNhclRhcmVhc0FjdGl2YXMocmVnaXN0cm86IGFueSwgYXBwOiBBcHApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBcbiAgICBjb25zdCBmaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG4gICAgY29uc3QgdGFyZWFzQWN0aXZhcyA9IFtdO1xuXG4gICAgZm9yIChsZXQgZmlsZSBvZiBmaWxlcykge1xuICAgICAgICBpZiAoZmlsZS5wYXRoLnN0YXJ0c1dpdGgocmVnaXN0cm8uZm9sZGVyKSkge1xuICAgICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk/LmZyb250bWF0dGVyO1xuICAgICAgICAgICAgaWYgKG1ldGFkYXRhPy5lc3RhZG8gPT09IFwiXHVEODNEXHVERkUyXCIpIHtcbiAgICAgICAgICAgICAgICB0YXJlYXNBY3RpdmFzLnB1c2goeyBmaWxlLCBhbGlhc2VzOiBtZXRhZGF0YS5hbGlhc2VzIHx8IGZpbGUuYmFzZW5hbWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGFyZWFzQWN0aXZhcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgY29uc3QgdGFyZWFBY3RpdmEgPSB0YXJlYXNBY3RpdmFzWzBdO1xuICAgICAgICBkZWJ1Z2dlclxuICAgICAgICBjb25zdCBkZXNlYURldGVuZXIgPSBhd2FpdCBtb3N0cmFyU3VnZXJlbmNpYShgTGEgdGFyZWEgJHt0YXJlYUFjdGl2YS5hbGlhc2VzfSBlc3RcdTAwRTEgY29ycmllbmRvLiBcdTAwQkZEZXNlYSBkZXRlbmVybGE/YCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoZGVzZWFEZXRlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYENyZWFjaVx1MDBGM24gZGUgcmVnaXN0cm8gY2FuY2VsYWRvIHBvciBlbCB1c3VhcmlvLmApO1xuICAgICAgICAgICAgcmVnaXN0cm8uZGV0ZW5lciA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChkZXNlYURldGVuZXIpIHtcbiAgICAgICAgICAgIGF3YWl0IGRldGVuZXJUYXJlYSh0YXJlYUFjdGl2YSwgYXBwKTtcbiAgICAgICAgICAgIHJlZ2lzdHJvLmRldGVuZXIgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYExhIHRhcmVhICR7dGFyZWFBY3RpdmEuYWxpYXNlc30gc2VndWlyXHUwMEUxIHJlZ2lzdHJcdTAwRTFuZG9zZS5gKTtcbiAgICAgICAgICAgIHJlZ2lzdHJvLmRldGVuZXIgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmICh0YXJlYXNBY3RpdmFzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgbmV3IE5vdGljZShcIkhheSB1biBlcnJvciBjb24gbGEgY2FudGlkYWQgZGUgdGFyZWFzIGNvcnJpZW5kbyBlbiBlc3RlIG1vbWVudG8uXCIpO1xuICAgICAgICByZWdpc3Ryby5kZXRlbmVyID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcIk5vIGhheSBtXHUwMEUxcyB0YXJlYXMgY29ycmllbmRvLlwiKTtcbiAgICAgICAgcmVnaXN0cm8uZGV0ZW5lciA9IGZhbHNlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbW9zdHJhclN1Z2VyZW5jaWEobWVuc2FqZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuIHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGxldCBzZWxlY2Npb25hZG8gPSBmYWxzZTsgLy8gUmFzdHJlYSBzaSBzZSBoYSBoZWNobyB1bmEgc2VsZWNjaVx1MDBGM25cblxuICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBNb2RhbChhcHApO1xuICAgICAgICBtb2RhbC5jb250ZW50RWwuY3JlYXRlRWwoJ2gxJywgeyB0ZXh0OiBtZW5zYWplIH0pO1xuXG4gICAgICAgIC8vIENyZWFyIGNvbnRlbmVkb3IgcGFyYSBib3RvbmVzXG4gICAgICAgIGNvbnN0IGJ1dHRvbnNDb250YWluZXIgPSBtb2RhbC5jb250ZW50RWwuY3JlYXRlRWwoJ2RpdicpO1xuXG4gICAgICAgIC8vIEJvdFx1MDBGM24gU1x1MDBFRFxuICAgICAgICBjb25zdCB5ZXNCdXR0b24gPSBidXR0b25zQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7XG4gICAgICAgICAgICB0ZXh0OiAnU1x1MDBFRCcsXG4gICAgICAgIH0pO1xuICAgICAgICB5ZXNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBzZWxlY2Npb25hZG8gPSB0cnVlOyAvLyBBY3R1YWxpemEgcXVlIHNlIGhhIGhlY2hvIHVuYSBzZWxlY2NpXHUwMEYzblxuICAgICAgICAgICAgbW9kYWwuY2xvc2UoKTtcbiAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEJvdFx1MDBGM24gTm9cbiAgICAgICAgY29uc3Qgbm9CdXR0b24gPSBidXR0b25zQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7XG4gICAgICAgICAgICB0ZXh0OiAnTm8nLFxuICAgICAgICB9KTtcbiAgICAgICAgbm9CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBzZWxlY2Npb25hZG8gPSB0cnVlOyAvLyBBY3R1YWxpemEgcXVlIHNlIGhhIGhlY2hvIHVuYSBzZWxlY2NpXHUwMEYzblxuICAgICAgICAgICAgbW9kYWwuY2xvc2UoKTtcbiAgICAgICAgICAgIHJlc29sdmUoZmFsc2UpO1xuICAgICAgICB9KTtcblxuICAgICAgICBtb2RhbC5vbkNsb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFzZWxlY2Npb25hZG8pIHtcbiAgICAgICAgICAgICAgICAvLyBTaSBzZSBjaWVycmEgZWwgbW9kYWwgc2luIGhhY2VyIHVuYSBzZWxlY2NpXHUwMEYzbiwgcmVzdWVsdmUgY29uIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIHJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgfSk7XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlZmluaXJUaXBvUmVnaXN0cm8ocmVnaXN0cm86IGFueSwgYXBwOiBBcHApIHtcbiAgICBjb25zdCB0b3RUYXJlYXMgPSBhd2FpdCBlbmNvbnRyYXJUYXJlYXNQZW5kaWVudGVzKGFwcCk7IC8vIFBhc28gYGFwcGAgY29tbyBhcmd1bWVudG9cbiAgICBsZXQgb3BjaW9uZXNUaXR1bG8sIHZhbG9yZXNPcGNpb247XG4gICAgaWYgKHRvdFRhcmVhcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIG9wY2lvbmVzVGl0dWxvID0gW3JlZ2lzdHJvLm5vbWJyZSwgXCJBbGd1bmEgdGFyZWEgZW4gRWplY3VjaVx1MDBGM25cIiwgXCJPdHJvXCJdO1xuICAgICAgICB2YWxvcmVzT3BjaW9uID0gW1wiTm90YVwiLCBcIlRhcmVhXCIsIFwiT3Ryb1wiXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvcGNpb25lc1RpdHVsbyA9IFtyZWdpc3Ryby5ub21icmUsIFwiT3Ryb1wiXTtcbiAgICAgICAgdmFsb3Jlc09wY2lvbiA9IFtcIk5vdGFcIiwgXCJPdHJvXCJdO1xuICAgIH1cbiAgICBjb25zdCBwbGFjZWhvbGRlciA9IFwiXHUwMEJGU29icmUgcXVcdTAwRTkgZXMgZWwgcmVnaXN0cm8gZGUgdGllbXBvP1wiO1xuICAgIFxuICAgIGNvbnN0IG1vZGFsTWVudTEgPSBuZXcgU2VsZWNjaW9uTW9kYWwoYXBwLCBvcGNpb25lc1RpdHVsbywgdmFsb3Jlc09wY2lvbiwgcGxhY2Vob2xkZXIpO1xuICAgIFxuICAgIC8vIEVzcGVyYSBhc2luY3JcdTAwRjNuaWNhbWVudGUgbGEgc2VsZWNjaVx1MDBGM24gZGVsIHVzdWFyaW8gYW50ZXMgZGUgY29udGludWFyLlxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IGF3YWl0IG1vZGFsTWVudTEub3BlbkFuZEF3YWl0U2VsZWN0aW9uKCk7XG4gICAgICAgIHJlZ2lzdHJvLnRpcG9SZWdpc3RybyA9IHNlbGVjdGlvbjtcbiAgICAgICAgLy8gUHJvY2VzYXIgbGEgc2VsZWNjaVx1MDBGM24gZGVsIHVzdWFyaW8gYXF1XHUwMEVELlxuICAgICAgICAvLyBFbCBjXHUwMEYzZGlnbyBzdWJzaWd1aWVudGUgZGVwZW5kZSBkZWwgdGlwbyBkZSByZWdpc3RybyBzZWxlY2Npb25hZG8uXG4gICAgICAgIHN3aXRjaChyZWdpc3Ryby50aXBvUmVnaXN0cm8pIHtcbiAgICAgICAgICAgIGNhc2UgXCJOb3RhXCI6XG4gICAgICAgICAgICAgICAgcmVnaXN0cm8udGl0dWxvID0gcmVnaXN0cm8ubm9tYnJlOyAvLyBFbCB0XHUwMEVEdHVsbyBlcyBlbCBub21icmUgZGUgbGEgbm90YSBhY3R1YWwuXG4gICAgICAgICAgICAgICAgcmVnaXN0cm8uc2lBc3VudG8gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIlRhcmVhXCI6XG4gICAgICAgICAgICAgICAgLy8gTFx1MDBGM2dpY2EgcGFyYSBwZXJtaXRpciBhbCB1c3VhcmlvIGVsZWdpciB1bmEgdGFyZWEgZXNwZWNcdTAwRURmaWNhLlxuICAgICAgICAgICAgICAgIGF3YWl0IGVsZWdpclRhcmVhUGFyYVJlZ2lzdHJvKGFwcCwgcmVnaXN0cm8sIHRvdFRhcmVhcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vIFNpIGVsIHVzdWFyaW8gZWxpZ2UgXCJPdHJvXCIgbyBjdWFscXVpZXIgb3RyYSBvcGNpXHUwMEYzbi5cbiAgICAgICAgICAgICAgICByZWdpc3Ryby5zaUFzdW50byA9IHJlZ2lzdHJvLnRpdHVsb0RlZmluaWRvICE9PSBcIk90cm9cIjsgLy8gQXN1bWUgcXVlIHNpIG5vIGVzIFwiT3Ryb1wiLCBlcyB1biBhc3VudG8gZXNwZWNcdTAwRURmaWNvLlxuICAgICAgICAgICAgICAgIC8vIExcdTAwRjNnaWNhIGFkaWNpb25hbCBwYXJhIG1hbmVqYXIgXCJPdHJvXCIgbyBjYXNvcyBubyBlc3BlY2lmaWNhZG9zLlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIG8gbW9kYWwgY2VycmFkbyBzaW4gc2VsZWNjaVx1MDBGM246XCIsIGVycm9yKTtcbiAgICAgICAgLy8gTWFuZWpvIGRlIGVycm9yZXMgbyBjaWVycmUgZGVsIG1vZGFsIHNpbiBzZWxlY2NpXHUwMEYzbi5cbiAgICAgICAgLy8gUG9yIGVqZW1wbG8sIHBvZHJcdTAwRURhcyBlc3RhYmxlY2VyIHVuIHZhbG9yIHByZWRldGVybWluYWRvIHBhcmEgcmVnaXN0cm8uZGV0ZW5lciBhcXVcdTAwRUQuXG4gICAgfVxufVxuXG5cbiAgICBhc3luYyBmdW5jdGlvbiBlbmNvbnRyYXJUYXJlYXNQZW5kaWVudGVzKGFwcDogQXBwKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgICAgICBsZXQgdGFyZWFzUGVuZGllbnRlczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgY29uc3QgYXJjaGl2b3MgPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgICAgICBjb25zdCBhcmNoaXZvc1JlbGV2YW50ZXMgPSBhcmNoaXZvcy5maWx0ZXIoYXJjaGl2byA9PiAhYXJjaGl2by5wYXRoLmluY2x1ZGVzKFwiUGxhbnRpbGxhc1wiKSk7XG4gICAgXG4gICAgICAgIGZvciAoY29uc3QgYXJjaGl2byBvZiBhcmNoaXZvc1JlbGV2YW50ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbmlkbyA9IGF3YWl0IGFwcC52YXVsdC5yZWFkKGFyY2hpdm8pO1xuICAgICAgICAgICAgY29uc3QgY29pbmNpZGVuY2lhcyA9IGNvbnRlbmlkby5tYXRjaCgvXiAqLSBcXFtcXC9cXF0gLiovZ20pIHx8IFtdO1xuICAgIFxuICAgICAgICAgICAgLy8gRWxpbWluYSBsb3MgZXNwYWNpb3MgYWwgaW5pY2lvIGRlIGNhZGEgY29pbmNpZGVuY2lhIGFudGVzIGRlIGFncmVnYXJsYSBhbCBhcnJlZ2xvXG4gICAgICAgICAgICBjb25zdCB0YXJlYXNMaW1waWFzID0gY29pbmNpZGVuY2lhcy5tYXAodGFyZWEgPT4gdGFyZWEudHJpbSgpKTtcbiAgICAgICAgICAgIHRhcmVhc1BlbmRpZW50ZXMgPSB0YXJlYXNQZW5kaWVudGVzLmNvbmNhdCh0YXJlYXNMaW1waWFzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZWFzUGVuZGllbnRlcztcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBlbGVnaXJUYXJlYVBhcmFSZWdpc3RybyhhcHA6IEFwcCwgcmVnaXN0cm86IGFueSwgdGFyZWFzUGVuZGllbnRlczogc3RyaW5nW10pIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gXCJFbGlnZSBsYSB0YXJlYSBxdWUgdmFzIGEgcmVnaXN0cmFyLlwiO1xuICAgICAgICAgICAgXG4gICAgICAgIC8vIENyZWFyIHVuIGFycmVnbG8gZGUgcHJvbWVzYXMgdXNhbmRvIG1hcCBwYXJhIHBhc2FyIGNhZGEgdGFyZWEgcG9yIGxpbXBpYXJUZXh0b1RhcmVhXG4gICAgICAgIGxldCBwcm9tZXNhc0xpbXBpYXMgPSB0YXJlYXNQZW5kaWVudGVzLm1hcCh0YXJlYSA9PiBsaW1waWFyVGV4dG9UYXJlYSh0YXJlYSkpO1xuXG4gICAgICAgIC8vIFVzYXIgUHJvbWlzZS5hbGwgcGFyYSBlc3BlcmFyIGEgcXVlIHRvZGFzIGxhcyB0YXJlYXMgc2VhbiBwcm9jZXNhZGFzXG4gICAgICAgIFByb21pc2UuYWxsKHByb21lc2FzTGltcGlhcykudGhlbih0YXJlYXNMaW1waWFzID0+IHtcbiAgICAgICAgICAgIC8vIEVuIGVzdGUgcHVudG8sIHRhcmVhc0xpbXBpYXMgZXMgdW4gYXJyZWdsbyBjb24gdG9kYXMgbGFzIHRhcmVhcyBkZXNwdVx1MDBFOXMgZGUgc2VyIGxpbXBpYWRhc1xuICAgICAgICAgICAgLy8gQWhvcmEgcHVlZGVzIHVzYXIgdGFyZWFzTGltcGlhcyBlbiBvdHJhIGZ1bmNpXHUwMEYzblxuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBtb2RhbE1lbnUgPSBuZXcgU2VsZWNjaW9uTW9kYWwoYXBwLCB0YXJlYXNMaW1waWFzLCB0YXJlYXNMaW1waWFzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgICAgICBtb2RhbE1lbnUub3BlbkFuZEF3YWl0U2VsZWN0aW9uKCkudGhlbihzZWxlY3Rpb24gPT4ge1xuICAgICAgICAgICAgICAgIGRlYnVnZ2VyXG4gICAgICAgICAgICAgICAgcmVnaXN0cm8udGl0dWxvID0gbGltcGlhclRleHRvVGFyZWEgKHNlbGVjdGlvbilcbiAgICAgICAgICAgICAgICAvL25ldyBOb3RpY2Uoc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICByZWdpc3Ryby5kZXRlbmVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgbyBtb2RhbCBjZXJyYWRvIHNpbiBzZWxlY2NpXHUwMEYzbjpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIC8vIE1hbmVqYXIgcG9zaWJsZXMgZXJyb3Jlc1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkh1Ym8gdW4gZXJyb3IgYWwgbGltcGlhciBsYXMgdGFyZWFzOlwiLCBlcnJvcik7XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGltcGlhclRleHRvVGFyZWEodGl0dWxvOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAvLyBFbGltaW5hIHRvZG8gZGVzcHVcdTAwRTlzIGRlbCBwcmltZXIgc2FsdG8gZGUgbFx1MDBFRG5lYS5cbiAgICAgICAgICAgIGxldCB0ZXh0b0xpbXBpbyA9IHRpdHVsby5zcGxpdCgnXFxuJylbMF07XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gRWxpbWluYSBsb3MgdGFncyBkZSBlc3RpbG8gTWFya2Rvd24uXG4gICAgICAgICAgICB0ZXh0b0xpbXBpbyA9IHRleHRvTGltcGlvLnJlcGxhY2UoLyNbXFx3LS9dKy9nLCAnJyk7XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gRWxpbWluYSBsb3MgY2FtcG9zIGRlIGVzdGlsbyBEYXRhdmlldy5cbiAgICAgICAgICAgIHRleHRvTGltcGlvID0gdGV4dG9MaW1waW8ucmVwbGFjZSgvXFxbXFx3Kzo6W15cXF1dK1xcXS9nLCAnJyk7XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gRWxpbWluYSBlbCBwYXRyXHUwMEYzbiBcIiAtIFsvXVwiIGFsIGluaWNpbyBkZSBsYSBjYWRlbmEsIGluY2x1eWVuZG8gcG9zaWJsZXMgZXNwYWNpb3MgYW50ZXMgbyBkZXNwdVx1MDBFOXMuXG4gICAgICAgICAgICB0ZXh0b0xpbXBpbyA9IHRleHRvTGltcGlvLnJlcGxhY2UoL15cXHMqLVxccypcXFtcXC9cXF1cXHMqLywgJycpO1xuXG4gICAgICAgICAgICAvLyBSZWVtcGxhemEgY2FyYWN0ZXJlcyBubyBwZXJtaXRpZG9zIGVuIG5vbWJyZXMgZGUgYXJjaGl2byBjb24gdW4gZ3Vpb24gYmFqbyBvIGFsZ1x1MDBGQW4gb3RybyBjYXJhY3RlciBzZWd1cm8uICAgIFxuICAgICAgICAgICAgY29uc3QgY2FyYWN0ZXJlc05vUGVybWl0aWRvcyA9IC9bPD46XCJcXC9cXFxcfD8qXFx4MDAtXFx4MUZdL2c7XG4gICAgICAgICAgICB0ZXh0b0xpbXBpbyA9IHRleHRvTGltcGlvLnJlcGxhY2UoY2FyYWN0ZXJlc05vUGVybWl0aWRvcywgJ18nKTtcbiAgICAgICAgXG4gICAgICAgICAgICAvLyBSZWVtcGxhemEgZXNwYWNpb3MgbVx1MDBGQWx0aXBsZXMgcG9yIHVuIFx1MDBGQW5pY28gZXNwYWNpbyBwYXJhIGV2aXRhciBub21icmVzIGRlIGFyY2hpdm8gZXhjZXNpdmFtZW50ZSBsYXJnb3MuXG4gICAgICAgICAgICB0ZXh0b0xpbXBpbyA9IHRleHRvTGltcGlvLnJlcGxhY2UoL1xccysvZywgJyAnKTtcbiAgICAgICAgXG4gICAgICAgICAgICAvLyBSZXRvcm5hIGVsIHRleHRvIGxpbXBpbywgYWhvcmEgZW52dWVsdG8gZW4gdW5hIHByb21lc2EuXG4gICAgICAgICAgICByZXNvbHZlKHRleHRvTGltcGlvLnRyaW0oKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBcbiAgICAgICAgXG5cbmFzeW5jIGZ1bmN0aW9uIGRldGVuZXJUYXJlYSh0YXJlYUFjdGl2YTogeyBmaWxlOiBURmlsZTsgdGl0dWxvOiBzdHJpbmcgfSwgYXBwOiBBcHApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBBcXVcdTAwRUQgaXJcdTAwRURhIGxhIGxcdTAwRjNnaWNhIHBhcmEgbWFyY2FyIGxhIHRhcmVhIGNvbW8gbm8gYWN0aXZhLCBwcm9iYWJsZW1lbnRlIGFjdHVhbGl6YW5kbyBzdSBmcm9udG1hdHRlclxuICAgIGNvbnNvbGUubG9nKGBEZXRlbmllbmRvIGxhIHRhcmVhOiAke3RhcmVhQWN0aXZhLnRpdHVsb31gKTtcbiAgICAvLyBFamVtcGxvIGRlIGNcdTAwRjNtbyBzZSBwb2RyXHUwMEVEYSBhY3R1YWxpemFyIGVsIGZyb250bWF0dGVyIHBhcmEgZGV0ZW5lciBsYSB0YXJlYVxuICAgIC8vIEVzdGEgZXMgdW5hIHNpbXBsaWZpY2FjaVx1MDBGM247IGxhIGltcGxlbWVudGFjaVx1MDBGM24gcmVhbCBkZXBlbmRlclx1MDBFRGEgZGUgY1x1MDBGM21vIGVzdFx1MDBFOXMgbWFuZWphbmRvIGVsIGNvbnRlbmlkbyBkZWwgYXJjaGl2b1xuICAgIGNvbnN0IGZpbGVDb250ZW50cyA9IGF3YWl0IGFwcC52YXVsdC5yZWFkKHRhcmVhQWN0aXZhLmZpbGUpO1xuICAgIGNvbnN0IG5ld0NvbnRlbnRzID0gZmlsZUNvbnRlbnRzLnJlcGxhY2UoJ2VzdGFkbzogXHVEODNEXHVERkUyJywgJ2VzdGFkbzogXHVEODNEXHVERDM1Jyk7IC8vIENhbWJpYXIgYSBlc3RhZG8gbm8gYWN0aXZvXG4gICAgYXdhaXQgYXBwLnZhdWx0Lm1vZGlmeSh0YXJlYUFjdGl2YS5maWxlLCBuZXdDb250ZW50cyk7XG59XG5cblxuXG5cblxuXG4gXG4iLCAiLy8gSW1wb3J0YWNpXHUwMEYzbiBkZSBjbGFzZXMgbmVjZXNhcmlhcyBkZXNkZSBsYSBsaWJyZXJcdTAwRURhIGRlIE9ic2lkaWFuLlxuaW1wb3J0IHsgQXBwLCBGdXp6eVN1Z2dlc3RNb2RhbCwgTm90aWNlIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG4vLyBEZWZpbmljaVx1MDBGM24gZGUgbGEgY2xhc2UgU2VsZWNjaW9uTW9kYWwgcXVlIGV4dGllbmRlIGRlIEZ1enp5U3VnZ2VzdE1vZGFsIHBhcmEgbWFuZWphciBzZWxlY2Npb25lcyBkZSBzdHJpbmdzLlxuZXhwb3J0IGNsYXNzIFNlbGVjY2lvbk1vZGFsIGV4dGVuZHMgRnV6enlTdWdnZXN0TW9kYWw8c3RyaW5nPiB7XG4gICAgdGl0bGVzOiBzdHJpbmdbXTsgLy8gQXJyYXkgZGUgdFx1MDBFRHR1bG9zIHBhcmEgbGFzIG9wY2lvbmVzIGRlbCBtb2RhbC5cbiAgICB2YWx1ZXM6IHN0cmluZ1tdOyAvLyBBcnJheSBkZSB2YWxvcmVzIGFzb2NpYWRvcyBhIGNhZGEgdFx1MDBFRHR1bG8uXG4gICAgdmFsdWVNYXA6IFJlY29yZDxzdHJpbmcsIHN0cmluZz47IC8vIE9iamV0byBwYXJhIG1hcGVhciB0XHUwMEVEdHVsb3MgYSB2YWxvcmVzLlxuICAgIHByaXZhdGUgc2VsZWNjaW9uSGVjaGE6IGJvb2xlYW4gPSBmYWxzZTsgLy8gRmxhZyBwYXJhIGRldGVybWluYXIgc2kgc2UgaGEgaGVjaG8gdW5hIHNlbGVjY2lcdTAwRjNuLlxuXG4gICAgLy8gQ29uc3RydWN0b3IgZGUgbGEgY2xhc2UuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHRpdGxlczogc3RyaW5nW10sIHZhbHVlczogc3RyaW5nW10sIHBsYWNlaG9sZGVyOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoYXBwKTsgLy8gTGxhbWFkYSBhbCBjb25zdHJ1Y3RvciBkZSBsYSBjbGFzZSBiYXNlIGNvbiBsYSBpbnN0YW5jaWEgZGUgQXBwIGRlIE9ic2lkaWFuLlxuICAgICAgICB0aGlzLnRpdGxlcyA9IHRpdGxlczsgLy8gSW5pY2lhbGl6YWNpXHUwMEYzbiBkZWwgYXJyYXkgZGUgdFx1MDBFRHR1bG9zLlxuICAgICAgICB0aGlzLnZhbHVlcyA9IHZhbHVlczsgLy8gSW5pY2lhbGl6YWNpXHUwMEYzbiBkZWwgYXJyYXkgZGUgdmFsb3Jlcy5cbiAgICAgICAgLy8gQ3JlYWNpXHUwMEYzbiBkZWwgbWFwZW8gZGUgdFx1MDBFRHR1bG9zIGEgdmFsb3Jlcy5cbiAgICAgICAgdGhpcy52YWx1ZU1hcCA9IHRpdGxlcy5yZWR1Y2UoKGFjYywgdGl0bGUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBhY2NbdGl0bGVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0sIHt9KTtcbiAgICAgICAgdGhpcy5zZXRQbGFjZWhvbGRlcihwbGFjZWhvbGRlcik7IC8vIEVzdGFibGVjaW1pZW50byBkZWwgdGV4dG8gZGUgcGxhY2Vob2xkZXIgcGFyYSBlbCBjYW1wbyBkZSBiXHUwMEZBc3F1ZWRhIGVuIGVsIG1vZGFsLlxuICAgIH1cblxuICAgIC8vIE1cdTAwRTl0b2RvIHBhcmEgb2J0ZW5lciBsb3MgXHUwMEVEdGVtcyAodFx1MDBFRHR1bG9zKSBxdWUgc2UgbW9zdHJhclx1MDBFMW4gZW4gZWwgbW9kYWwuXG4gICAgZ2V0SXRlbXMoKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gdGhpcy50aXRsZXM7XG4gICAgfVxuXG4gICAgLy8gTVx1MDBFOXRvZG8gcGFyYSBvYnRlbmVyIGVsIHRleHRvIHF1ZSBzZSBtb3N0cmFyXHUwMEUxIHBhcmEgY2FkYSBcdTAwRUR0ZW0gZW4gZWwgbW9kYWwuXG4gICAgZ2V0SXRlbVRleHQoaXRlbTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuXG4gICAgLy8gTVx1MDBFOXRvZG8gcXVlIHNlIGxsYW1hIGFsIGNlcnJhciBlbCBtb2RhbC5cbiAgICBvbkNsb3NlKCk6IHZvaWQge1xuICAgICAgICAvLyBTaSBlbCBtb2RhbCBzZSBjaWVycmEgc2luIHF1ZSBzZSBoYXlhIGhlY2hvIHVuYSBzZWxlY2NpXHUwMEYzbiwgc2UgcmVjaGF6YSBsYSBwcm9tZXNhLlxuICAgICAgICBpZiAoIXRoaXMuc2VsZWNjaW9uSGVjaGEpIHtcbiAgICAgICAgICAgIHRoaXMucmVqZWN0KG5ldyBFcnJvcignTW9kYWwgY2VycmFkbyBzaW4gc2VsZWNjaVx1MDBGM24nKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNXHUwMEU5dG9kbyBwYXJhIG1hbmVqYXIgbGEgc2VsZWNjaVx1MDBGM24gZGUgdW4gXHUwMEVEdGVtLlxuICAgIHNlbGVjdFN1Z2dlc3Rpb24oaXRlbTogc3RyaW5nLCBldnQ6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2VsZWNjaW9uSGVjaGEgPSB0cnVlOyAvLyBNYXJjYXIgcXVlIHNlIGhhIGhlY2hvIHVuYSBzZWxlY2NpXHUwMEYzbi5cbiAgICAgICAgc3VwZXIuc2VsZWN0U3VnZ2VzdGlvbihpdGVtLCBldnQpOyAvLyBMbGFtYXIgYWwgbVx1MDBFOXRvZG8gY29ycmVzcG9uZGllbnRlIGRlIGxhIGNsYXNlIGJhc2UgcGFyYSBtYW5lamFyIGxhIHNlbGVjY2lcdTAwRjNuLlxuICAgIH1cblxuICAgIC8vIE1cdTAwRTl0b2RvIHF1ZSBzZSBsbGFtYSBhbCBlbGVnaXIgdW4gXHUwMEVEdGVtLCBkb25kZSBzZSByZXN1ZWx2ZSBsYSBwcm9tZXNhIGNvbiBlbCB2YWxvciBhc29jaWFkbyBhbCBcdTAwRUR0ZW0gc2VsZWNjaW9uYWRvLlxuICAgIG9uQ2hvb3NlSXRlbShpdGVtOiBzdHJpbmcsIGV2dDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnZhbHVlTWFwW2l0ZW1dOyAvLyBPYnRlbmVyIGVsIHZhbG9yIGFzb2NpYWRvIGFsIFx1MDBFRHRlbSBzZWxlY2Npb25hZG8uXG4gICAgICAgIHRoaXMucmVzb2x2ZSh2YWx1ZSk7IC8vIFJlc29sdmVyIGxhIHByb21lc2EgY29uIGVsIHZhbG9yIHNlbGVjY2lvbmFkby5cbiAgICB9XG5cbiAgICAvLyBNXHUwMEU5dG9kbyBwYXJhIGFicmlyIGVsIG1vZGFsIHkgZXNwZXJhciBhIHF1ZSBlbCB1c3VhcmlvIGhhZ2EgdW5hIHNlbGVjY2lcdTAwRjNuLCBkZXZvbHZpZW5kbyB1bmEgcHJvbWVzYSBjb24gZWwgdmFsb3Igc2VsZWNjaW9uYWRvLlxuICAgIG9wZW5BbmRBd2FpdFNlbGVjdGlvbigpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmUgPSByZXNvbHZlOyAvLyBHdWFyZGFyIGxhIGZ1bmNpXHUwMEYzbiByZXNvbHZlIGRlIGxhIHByb21lc2EgcGFyYSB1c2FybGEgYWwgc2VsZWNjaW9uYXIgdW4gXHUwMEVEdGVtLlxuICAgICAgICAgICAgdGhpcy5yZWplY3QgPSByZWplY3Q7IC8vIEd1YXJkYXIgbGEgZnVuY2lcdTAwRjNuIHJlamVjdCBkZSBsYSBwcm9tZXNhIHBhcmEgdXNhcmxhIHNpIHNlIGNpZXJyYSBlbCBtb2RhbCBzaW4gc2VsZWNjaVx1MDBGM24uXG4gICAgICAgICAgICB0aGlzLm9wZW4oKTsgLy8gQWJyaXIgZWwgbW9kYWwuXG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCAiaW1wb3J0IHsgUGx1Z2luLCBOb3RpY2UsIE1vZGFsLCBURmlsZSwgVEZvbGRlciB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgYnVzY2FyUmVnaXN0cm9zQWN0aXZvcywgY3JlYXJPYmpldG9SZWdpc3RybywgdmVyaWZpY2FyVGFyZWFzQWN0aXZhcywgZGVmaW5pclRpcG9SZWdpc3RybyB9IGZyb20gXCIuL3V0aWxzXCJcbmltcG9ydCB7bW9kYWxfQWhvcmF9IGZyb20gXCIuL21vZGFscy9tb2RhbF9BaG9yYVwiXG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckNvbW1hbmRzKHBsdWdpbjogUGx1Z2luKTogdm9pZCB7XG4gICAgXG4gICAgY29uc3QgaWQxID0gcGx1Z2luLmFkZENvbW1hbmQoe1xuICAgICAgICBpZDogXCJyZWdpc3Ryb3MtZGUtdGllbXBvLWRlbC1kaWFcIixcbiAgICAgICAgbmFtZTogXCJSZWdpc3Ryb3MgZGUgdGllbXBvIGRlbCBkXHUwMEVEYVwiLFxuICAgICAgICBjaGVja0NhbGxiYWNrOiAoY2hlY2tpbmc6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUxlYWYgPSBwbHVnaW4uYXBwLndvcmtzcGFjZS5hY3RpdmVMZWFmO1xuICAgICAgICAgICAgaWYgKGFjdGl2ZUxlYWYpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlUGF0aCA9IGFjdGl2ZUxlYWYudmlldy5maWxlPy5wYXRoIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgaWYgKGZpbGVQYXRoLnN0YXJ0c1dpdGgoXCJFc3RydWN0dXJhL1BlcmlvZG9zL0RpYXJpby9cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGVja2luZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXF1XHUwMEVEIGlyXHUwMEVEYSBsYSBsXHUwMEYzZ2ljYSBkZWwgY29tYW5kb1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJSZWdpc3Ryb3MgZGUgdGllbXBvIGRlbCBkXHUwMEVEYVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBBbG1hY2VuYXIgZWwgSUQgZGVsIGNvbWFuZG8gZW4gcmVnaXN0ZXJlZENvbW1hbmRJZHMuXG5cbiAgICBwbHVnaW4ucmVnaXN0ZXJlZENvbW1hbmRJZHNSVC5wdXNoKGlkMS5pZCk7XG5cbiAgICBjb25zdCBpZDIgPSBwbHVnaW4uYWRkQ29tbWFuZCh7XG4gICAgICAgIGlkOiBcImFob3JhLVJlZ2lzdHJvVGllbXBvXCIsXG4gICAgICAgIG5hbWU6IFwiVGFyZWEgYWN0aXZhIGVuIHJlZ2lzdHJvIGRlIHRpZW1wb1wiLFxuICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYWN0aXZhID0gYXdhaXQgYnVzY2FyUmVnaXN0cm9zQWN0aXZvcyhwbHVnaW4uYXBwKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFhY3RpdmEpIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiTm8gaGF5IG5vdGFzIGFjdGl2YXNcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIENyZWEgeSBtdWVzdHJhIGVsIG1vZGFsIHBlcnNvbmFsaXphZG8gY29uIGxhIG5vdGEgYWN0aXZhXG4gICAgICAgICAgICAgICAgbGV0IG1vZGFsID0gbmV3IG1vZGFsX0Fob3JhKHBsdWdpbi5hcHAsIGFjdGl2YSk7XG4gICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIC8vIEFsbWFjZW5hciBlbCBJRCBkZWwgY29tYW5kbyBlbiByZWdpc3RlcmVkQ29tbWFuZElkcy5cbiAgICBwbHVnaW4ucmVnaXN0ZXJlZENvbW1hbmRJZHNSVC5wdXNoKGlkMi5pZCk7XG4gICAgXG4gICAgY29uc3QgaWQzID0gcGx1Z2luLmFkZENvbW1hbmQoe1xuICAgICAgICBpZDogXCJjcmVhci1yZWdpc3Ryby10aWVtcG9cIixcbiAgICAgICAgbmFtZTogXCJDcmVhciBSZWdpc3RybyBkZSBUaWVtcG9cIixcbiAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlZ2lzdHJvID0gYXdhaXQgY3JlYXJPYmpldG9SZWdpc3RybyhwbHVnaW4pO1xuICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghcmVnaXN0cm8pIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiTm8gc2UgcHVkbyBjcmVhciBlbCBvYmpldG8gZGUgcmVnaXN0cm8uXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHZlcmlmaWNhclRhcmVhc0FjdGl2YXMocmVnaXN0cm8sIHBsdWdpbi5hcHApXG4gICAgICAgICAgICBhd2FpdCBkZWZpbmlyVGlwb1JlZ2lzdHJvKHJlZ2lzdHJvLHBsdWdpbi5hcHApXG4gICAgICAgICAgICAvLyBBc3VtaWVuZG8gcXVlIHNlIHRpZW5lIHVuYSBmdW5jaVx1MDBGM24gbyBtXHUwMEU5dG9kbyBwYXJhIHByb2Nlc2FyIGVsIG9iamV0byBgcmVnaXN0cm9gXG4gICAgICAgICAgICAvLyBQb3IgZWplbXBsbywgcG9kclx1MDBFRGEgc2VyIGNyZWFyIHVuYSBudWV2YSBub3RhIGNvbiBsYSBpbmZvcm1hY2lcdTAwRjNuIGRlIGByZWdpc3Ryb2BcbiAgICAgICAgICAgIFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIC8vIEFsbWFjZW5hciBlbCBJRCBkZWwgY29tYW5kbyBlbiByZWdpc3RlcmVkQ29tbWFuZElkcy5cbiAgICBwbHVnaW4ucmVnaXN0ZXJlZENvbW1hbmRJZHNSVC5wdXNoKGlkMy5pZCk7XG5cbn1cblxuXG4vLyBFc3RhIHBhcnRlIGRlbCBjXHUwMEYzZGlnbyBzZXJcdTAwRURhIGhpcG90XHUwMEU5dGljYSB5IGRlcGVuZGUgZGUgY1x1MDBGM21vIGdlc3Rpb25hcyBlbCBlc3RhZG8geSBlbCBjaWNsbyBkZSB2aWRhIGRlIGxvcyBjb21hbmRvcyBlbiB0dSBwbHVnaW4uXG5leHBvcnQgZnVuY3Rpb24gZGVhY3RpdmF0ZUNvbW1hbmRzKHBsdWdpbjogUGx1Z2luKTogdm9pZCB7XG4gICAgXG4gICAgaWYgKCFwbHVnaW4ucmVnaXN0ZXJlZENvbW1hbmRJZHNSVCkgcmV0dXJuO1xuICAgIC8vIEVqZW1wbG8gZGUgY1x1MDBGM21vIHBvZHJcdTAwRURhcyBtYW5lamFyIGxhIFwiZGVzYWN0aXZhY2lcdTAwRjNuXCIgZGUgY29tYW5kb3MuXG4gICAgcGx1Z2luLnJlZ2lzdGVyZWRDb21tYW5kSWRzUlQuZm9yRWFjaCgoY29tbWFuZElkOiBzdHJpbmcgfCBudW1iZXIpID0+IHtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHBsdWdpbi5hcHAuY29tbWFuZHMuY29tbWFuZHNbY29tbWFuZElkXTtcbiAgICAgICAgXG4gICAgICAgIGlmIChjb21tYW5kKSB7XG4gICAgICAgICAgICAvLyBTb2JyZXNjcmliaXIgZWwgY2FsbGJhY2sgZGVsIGNvbWFuZG8gcGFyYSBxdWUgbm8gaGFnYSBuYWRhLlxuICAgICAgICAgICAgY29tbWFuZC5jYWxsYmFjayA9ICgpID0+IG5ldyBOb3RpY2UoXCJFc3RlIGNvbWFuZG8gaGEgc2lkbyBkZXNhY3RpdmFkby5cIik7XG4gICAgICAgICAgICAvLyBPIHNpbXBsZW1lbnRlIGVsaW1pbmFyIGVsIGNhbGxiYWNrIHNpIGVzbyBzZSBhanVzdGEgYSB0dSBsXHUwMEYzZ2ljYSBkZSBhcGxpY2FjaVx1MDBGM24uXG4gICAgICAgICAgICAvLyBkZWxldGUgY29tbWFuZC5jYWxsYmFjaztcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG4iLCAiaW1wb3J0IHsgTW9kYWwsIEFwcCwgVEZpbGUsIE5vdGljZSB9IGZyb20gJ29ic2lkaWFuJztcblxuZXhwb3J0IGNsYXNzIG1vZGFsX0Fob3JhIGV4dGVuZHMgTW9kYWwge1xuICAgIGZpbGU6IFRGaWxlO1xuICAgIGFwcDogQXBwO1xuICAgIGhvcmFJbmljaW9JbnB1dDogSFRNTElucHV0RWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBmaWxlOiBURmlsZSkge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcbiAgICAgICAgdGhpcy5maWxlID0gZmlsZTtcbiAgICB9XG5cbiAgICBhc3luYyBvbk9wZW4oKSB7XG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKHRoaXMuZmlsZSk7XG4gICAgICAgIGNvbnN0IGFsaWFzZXMgPSBtZXRhZGF0YT8uZnJvbnRtYXR0ZXI/LmFsaWFzZXMgfHwgXCJBY3RpdmlkYWQgc2luIGFsaWFzXCI7XG4gICAgICAgIC8vIENvbnZlcnRpciBob3JhSW5pY2lvU3RyIGEgZm9ybWF0byBcIllZWVktTU0tRERUSEg6TU1cIiBwYXJhIGRhdGV0aW1lLWxvY2FsXG4gICAgICAgIGNvbnN0IGhvcmFJbmljaW9TdHIgPSBtZXRhZGF0YT8uZnJvbnRtYXR0ZXI/LmhvcmFJbmljaW8gPyB3aW5kb3cubW9tZW50KG1ldGFkYXRhLmZyb250bWF0dGVyLmhvcmFJbmljaW8sIFwiWVlZWS1NTS1ERCBkZGRkIEhIOm1tXCIpLmZvcm1hdChcIllZWVktTU0tRERUSEg6bW1cIikgOiAnJztcblxuICAgICAgICAvLyBDb25maWd1cmEgZWwgdFx1MDBFRHR1bG8gZGVsIG1vZGFsIHkgbXVlc3RyYSBlbCBhbGlhcyBkZSBsYSB0YXJlYVxuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiBgUmVnaXN0cm8gZGUgYWN0aXZpZGFkLmAgfSk7XG4gICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgncCcsIHsgdGV4dDogYFRhcmVhOiBcIiR7YWxpYXNlc31cImAgfSk7XG4gICAgICAgIGlmIChob3JhSW5pY2lvU3RyKSB7XG4gICAgICAgICAgICAvLyBVc2FyIG1vbWVudCBwYXJhIHBhcnNlYXIgbGEgZmVjaGEgZGUgaW5pY2lvIHkgY2FsY3VsYXIgbGEgZGlmZXJlbmNpYVxuICAgICAgICAgICAgY29uc3QgaG9yYUluaWNpbyA9IHdpbmRvdy5tb21lbnQoaG9yYUluaWNpb1N0ciwgXCJZWVlZLU1NLUREIGRkZGQgSEg6bW1cIik7XG4gICAgICAgICAgICBjb25zdCBhaG9yYSA9IHdpbmRvdy5tb21lbnQoKTtcbiAgICAgICAgICAgIGNvbnN0IGRpZmYgPSBhaG9yYS5kaWZmKGhvcmFJbmljaW8pO1xuICAgICAgICAgICAgY29uc3QgZHVyYWNpb24gPSB3aW5kb3cubW9tZW50LmR1cmF0aW9uKGRpZmYpO1xuICAgICAgICAgICAgY29uc3QgZGlmZkZvcm1hdHRlZCA9IGAke2R1cmFjaW9uLmhvdXJzKCl9aCAke2R1cmFjaW9uLm1pbnV0ZXMoKX1tYDtcblxuICAgICAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiBgRXN0YSBhY3RpdmlkYWQgbGxldmEgJHtkaWZmRm9ybWF0dGVkfSBlbiBlamVjdWNpXHUwMEYzbi5gIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiBcIk5vIHNlIHB1ZG8gZGV0ZXJtaW5hciBlbCB0aWVtcG8gZGUgaW5pY2lvIGRlIGxhIGFjdGl2aWRhZC5cIiB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJbnB1dCBwYXJhIGxhIGhvcmEgZGUgaW5pY2lvIGNvbiB0aXBvIGRhdGV0aW1lLWxvY2FsXG4gICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ0hvcmEgZGUgaW5pY2lvOicgfSk7XG4gICAgICAgIHRoaXMuaG9yYUluaWNpb0lucHV0ID0gY29udGVudEVsLmNyZWF0ZUVsKCdpbnB1dCcsIHtcbiAgICAgICAgICAgIHR5cGU6ICdkYXRldGltZS1sb2NhbCcsXG4gICAgICAgICAgICB2YWx1ZTogaG9yYUluaWNpb1N0clxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBCb3RcdTAwRjNuIHBhcmEgZ3VhcmRhciBjYW1iaW9zXG4gICAgICAgIGNvbnN0IHNhdmVCdXR0b24gPSBjb250ZW50RWwuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ0d1YXJkYXIgY2FtYmlvcycgfSk7XG4gICAgICAgIHNhdmVCdXR0b24ub25jbGljayA9ICgpID0+IHRoaXMuZ3VhcmRhckNhbWJpb3MoKTtcbiAgICB9XG5cbiAgICBhc3luYyBndWFyZGFyQ2FtYmlvcygpIHtcbiAgICAgICAgY29uc3QgbnVldmFIb3JhSW5pY2lvTG9jYWwgPSB0aGlzLmhvcmFJbmljaW9JbnB1dC52YWx1ZTtcbiAgICAgICAgLy8gQXNlZ3VyYXIgcXVlIGxhIG51ZXZhIGhvcmEgdGllbmUgdmFsb3IgYW50ZXMgZGUgaW50ZW50YXIgZm9ybWF0ZWFyXG4gICAgICAgIGlmICghbnVldmFIb3JhSW5pY2lvTG9jYWwpIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJQb3IgZmF2b3IsIHNlbGVjY2lvbmUgdW5hIGhvcmEgZGUgaW5pY2lvLlwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbnZlcnRpciBkZSBcIllZWVktTU0tRERUSEg6TU1cIiBhIFwiWVlZWS1NTS1ERCBkZGRkIEhIOm1tXCJcbiAgICAgICAgY29uc3QgbnVldmFIb3JhSW5pY2lvID0gd2luZG93Lm1vbWVudChudWV2YUhvcmFJbmljaW9Mb2NhbCkuZm9ybWF0KFwiWVlZWS1NTS1ERCBkZGRkIEhIOm1tXCIpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBMZWVyIGVsIGNvbnRlbmlkbyBhY3R1YWwgZGVsIGFyY2hpdm9cbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbmlkb09yaWdpbmFsID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZCh0aGlzLmZpbGUpO1xuICAgICAgICAgICAgLy8gUmVlbXBsYXphciBsYSBsXHUwMEVEbmVhIGRlIGhvcmFJbmljaW8gY29uIGVsIG51ZXZvIHZhbG9yIGZvcm1hdGVhZG9cbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbmlkb0FjdHVhbGl6YWRvID0gY29udGVuaWRvT3JpZ2luYWwucmVwbGFjZSgvKGhvcmFJbmljaW86ICkuKi8sIGAkMSR7bnVldmFIb3JhSW5pY2lvfWApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBHdWFyZGFyIGxvcyBjYW1iaW9zIGVuIGVsIGFyY2hpdm9cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0Lm1vZGlmeSh0aGlzLmZpbGUsIGNvbnRlbmlkb0FjdHVhbGl6YWRvKTtcblxuICAgICAgICAgICAgLy8gQ2VycmFyIGVsIG1vZGFsIGRlc3B1XHUwMEU5cyBkZSBndWFyZGFyIGxvcyBjYW1iaW9zXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICBuZXcgTm90aWNlKFwiSG9yYSBkZSBpbmljaW8gYWN0dWFsaXphZGEgY29ycmVjdGFtZW50ZS5cIik7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWwgZ3VhcmRhciBjYW1iaW9zIGVuIGxhIG5vdGE6XCIsIGVycm9yKTtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJFcnJvciBhbCBndWFyZGFyIGxvcyBjYW1iaW9zIGVuIGxhIG5vdGEuXCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwgIi8vIHNyYy9kZWZhdWx0cy9kZWZhdWx0U2V0dGluZ3MudHNcbmltcG9ydCB0eXBlIHsgUGx1Z2luTWFpblNldHRpbmdzIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9wbHVnaW5NYWluU2V0dGluZ3MnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9TRVRUSU5HUzogUGx1Z2luTWFpblNldHRpbmdzID0ge1xuICBtb2R1bG9SZWdpc3Ryb1RpZW1wbzogdHJ1ZSxcbiAgbW9kdWxvQWxpYXNTdGF0dXNCYXI6IHRydWUsXG4gIG1vZHVsb0Jhc2U6IHRydWUsXG4gIGZpbGVfY2FtcG9zQ2VudHJhbCA6XCJFc3RydWN0dXJhL0NhbXBvcyBTaXN0ZW1hIEdlc3Rpb24vQ2FtcG9zIFNpc3RlbWEgQ2VudHJhbFwiLCBcbiAgZm9sZGVyX0Fub3RhY2lvbmVzOiBcIkFub3RhY2lvbmVzL05vdGFzXCIsXG4gIGluZGljZV9Bbm90YWNpb25lczogXCJBbm90YWNpb25lcy9JbmRpY2UgQW5vdGFjaW9uZXNcIixcbiAgZm9sZGVyX0FCbG9nOiBcIlN1YnNpc3RlbWFzL0FydGljdWxvcyBCbG9nL0FydGljdWxvc1wiLFxuICBpbmRpY2VfQUJsb2c6IFwiU3Vic2lzdGVtYXMvQXJ0aWN1bG9zIEJsb2cvSW5kaWNlIEFydGljdWxvcyBCbG9nXCIsXG4gIGZvbGRlcl9EZXNhcnJvbGxvczogXCJTdWJzaXN0ZW1hcy9EZXNhcnJvbGxvcy9Db2RpZ29zXCIsXG4gIGluZGljZV9EZXNhcnJvbGxvczogXCJTdWJzaXN0ZW1hcy9EZXNhcnJvbGxvcy9JbmRpY2UgRGVzYXJyb2xsb1wiLFxuICBmb2xkZXJfRXN0dWRpbzogXCJTdWJzaXN0ZW1hcy9Fc3R1ZGlvL1RlbWFzXCIsXG4gIGluZGljZV9Fc3R1ZGlvOiBcIlN1YnNpc3RlbWFzL0VzdHVkaW8vSW5kaWNlIEVzdHVkaW9cIixcbiAgZm9sZGVyX1Byb3llY3Rvc0dURDogXCJTdWJzaXN0ZW1hcy9HVEQvUHJveWVjdG9zIEdURC9Qcm95ZWN0b3NcIixcbiAgaW5kaWNlX1Byb3llY3Rvc0dURDogXCJTdWJzaXN0ZW1hcy9HVEQvUHJveWVjdG9zIEdURC9JbmRpY2UgUHJveWVjdG9zIEdURFwiLFxuICBmb2xkZXJfUlNHVEQ6IFwiU3Vic2lzdGVtYXMvR1REL1JldmlzaW9uIFNlbWFuYWwvUmV2aXNpb25lc1wiLFxuICBpbmRpY2VfUlNHVEQ6IFwiU3Vic2lzdGVtYXMvR1REL1JldmlzaW9uIFNlbWFuYWwvSW5kaWNlIFJldmlzaW9uIFNlbWFuYWxcIixcbiAgZm9sZGVyX0xlY3R1cmFTZXNpb25lczogXCJTdWJzaXN0ZW1hcy9MZWN0dXJhL1Nlc2lvbmVzIGRlIExlY3R1cmEvU2VzaW9uZXNcIixcbiAgaW5kaWNlX0xlY3R1cmFTZXNpb25lczogXCJTdWJzaXN0ZW1hcy9MZWN0dXJhL1Nlc2lvbmVzIGRlIExlY3R1cmEvSW5kaWNlIFNlc2lvbmVzIExlY3R1cmFcIixcbiAgZm9sZGVyX0xlY3R1cmFSZXN1bWVuZXM6IFwiU3Vic2lzdGVtYXMvTGVjdHVyYS9MaWJyb3MvUmVzdW1lbmVzXCIsXG4gIGluZGljZV9MZWN0dXJhUmVzdW1lbmVzOiBcIlN1YnNpc3RlbWFzL0xlY3R1cmEvTGlicm9zL0luZGljZSBSZXN1bWVuZXNcIixcbiAgZm9sZGVyX01lbnRvcmlhczogXCJTdWJzaXN0ZW1hcy9NZW50b3JpYXMvU2VzaW9uZXMgTWVudG9yaWFcIixcbiAgaW5kaWNlX01lbnRvcmlhczogXCJTdWJzaXN0ZW1hcy9NZW50b3JpYXMvSW5kaWNlIE1lbnRvcmlhc1wiLFxuICBmb2xkZXJfTWVyY2FkbzogXCJTdWJzaXN0ZW1hcy9NZXJjYWRvL0xpc3Rhc1wiLFxuICBpbmRpY2VfTWVyY2FkbzogXCJTdWJzaXN0ZW1hcy9NZXJjYWRvL0luZGljZSBNZXJjYWRvXCIsXG4gIGZvbGRlcl9Nb2R1bG9zU2lzdGVtYTogXCJTdWJzaXN0ZW1hcy9Nb2R1bG9zIFNpc3RlbWEgR2VzdGlvbi9Nb2R1bG9zXCIsXG4gIGluZGljZV9Nb2R1bG9zU2lzdGVtYTogXCJTdWJzaXN0ZW1hcy9Nb2R1bG9zIFNpc3RlbWEgR2VzdGlvbi9JbmRpY2UgTW9kdWxvc1wiLFxuICBmb2xkZXJfUGFnb3M6IFwiU3Vic2lzdGVtYXMvUGFnb3MvTm90YXNcIixcbiAgaW5kaWNlX1BhZ29zOiBcIlN1YnNpc3RlbWFzL1BhZ29zL0luZGljZSBQYWdvc1wiLFxuICBmb2xkZXJfUHJlc2VudGFjaW9uZXM6IFwiU3Vic2lzdGVtYXMvUHJlc2VudGFjaW9uZXMvTm90YXNcIixcbiAgaW5kaWNlX1ByZXNlbnRhY2lvbmVzOiBcIlN1YnNpc3RlbWFzL1ByZXNlbnRhY2lvbmVzL0luZGljZSBQcmVzZW50YWNpb25lc1wiLFxuICBmb2xkZXJfUHJveWVjdG9zUTogXCJTdWJzaXN0ZW1hcy9Qcm95ZWN0b3MgZGUgUS9Qcm95ZWN0b3NcIixcbiAgaW5kaWNlX1Byb3llY3Rvc1E6IFwiU3Vic2lzdGVtYXMvUHJveWVjdG9zIGRlIFEvSW5kaWNlIFByb3llY3RvcyBkZSBRXCIsXG4gIGZvbGRlcl9QdWJsaWNhY2lvbmVzOiBcIlN1YnNpc3RlbWFzL1B1YmxpY2FjaW9uZXMvUGllemFzXCIsXG4gIGluZGljZV9QdWJsaWNhY2lvbmVzOiBcIlN1YnNpc3RlbWFzL1B1YmxpY2FjaW9uZXMvSW5kaWNlIFB1YmxpY2FjaW9uZXNcIixcbiAgZm9sZGVyX1JlY2V0YXM6IFwiU3Vic2lzdGVtYXMvUmVjZXRhcy9SZWNldGFzXCIsXG4gIGluZGljZV9SZWNldGFzOiBcIlN1YnNpc3RlbWFzL1JlY2V0YXMvSW5kaWNlIFJlY2V0YXNcIixcbiAgZm9sZGVyX1JlY3Vyc29zUmVjdXJyZW50ZXM6IFwiU3Vic2lzdGVtYXMvUmVjdXJzb3MgUmVjdXJyZW50ZXMvUmVjdXJzb3NcIixcbiAgaW5kaWNlX1JlY3Vyc29zUmVjdXJyZW50ZXM6IFwiU3Vic2lzdGVtYXMvUmVjdXJzb3MgUmVjdXJyZW50ZXMvSW5kaWNlIFJlY3Vyc29zIFJlY3VycmVudGVzXCIsXG4gIGZvbGRlcl9SZWdpc3Ryb1RpZW1wbzogXCJTdWJzaXN0ZW1hcy9SZWdpc3RybyBUaWVtcG8vUmVnaXN0cm9zXCIsXG4gIGluZGljZV9SZWdpc3Ryb1RpZW1wbzogXCJTdWJzaXN0ZW1hcy9SZWdpc3RybyBUaWVtcG8vSW5kaWNlIFJlZ2lzdHJvIFRpZW1wb1wiLFxuICAvLyBFc3RydWN0dXJhXG4gIGZvbGRlcl9BcmVhc1ZpZGE6IFwiRXN0cnVjdHVyYS9BcmVhcyBkZSBWaWRhXCIsXG4gIGluZGljZV9BcmVhc1ZpZGE6IFwiRXN0cnVjdHVyYS9BcmVhcyBkZSBWaWRhL0luZGljZSBBcmVhcyBkZSBWaWRhXCIsXG4gIG5hbWVGaWxlX0FyZWFzVmlkYSA6IFwiaW5kZXhBVlwiLFxuICBmb2xkZXJfQXJlYXNJbnRlcmVzOiBcIkVzdHJ1Y3R1cmEvQXJlYXMgZGUgSW50ZXJlc1wiLFxuICBpbmRpY2VfQXJlYXNJbnRlcmVzOiBcIkVzdHJ1Y3R1cmEvQXJlYXMgZGUgSW50ZXJlcy9JbmRpY2UgQXJlYXMgZGUgSW50ZXJlc1wiLFxuICBuYW1lRmlsZV9BcmVhc0ludGVyZXM6IFwiaW5kZXhBSVwiLFxuICBmb2xkZXJfVGVtYXNJbnRlcmVzOiBcIkVzdHJ1Y3R1cmEvVGVtYXMgZGUgSW50ZXJlc1wiLFxuICBpbmRpY2VfVGVtYXNJbnRlcmVzOiBcIkVzdHJ1Y3R1cmEvVGVtYXMgZGUgSW50ZXJlcy9JbmRpY2UgVGVtYXMgZGUgSW50ZXJlc1wiLFxufTtcblxuIiwgImltcG9ydCB7IEFwcCwgVEZpbGUsIFRGb2xkZXIsIE1vZGFsLCBGdXp6eVN1Z2dlc3RNb2RhbCwgRnV6enlNYXRjaCwgTm90aWNlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQge1NlbGVjY2lvbk1vZGFsfSBmcm9tIFwiLi4vLi4vbW9kYWxlcy9zZWxlY2Npb25Nb2RhbFwiXG5pbXBvcnQge21lbnVPdHJvfSBmcm9tICcuL21lbnVPdHJvJ1xuXG5leHBvcnQgY2xhc3MgdXRpbHNBUEkge1xuICAgIHByaXZhdGUgbWVudU90cm86IG1lbnVPdHJvO1xuICAgIHBsdWdpbjogUGx1Z2luO1xuXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgICAgdGhpcy5tZW51T3RybyA9IG5ldyBtZW51T3RybyhwbHVnaW4pO1xuICAgIH1cblxuICAgIGFzeW5jIGJ1c2NhclJlZ2lzdHJvc0FjdGl2b3MoYXBwOiBBcHAsIHJlZ2lzdHJvOiBhbnkpOiBQcm9taXNlPFRGaWxlIHwgbnVsbD4ge1xuICAgIFxuICAgIGNvbnN0IGZpbGVzID0gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcbiAgICAgXG4gICAgIGZvciAobGV0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgICAgIGlmIChmaWxlLnBhdGguc3RhcnRzV2l0aChyZWdpc3Ryby5mb2xkZXIpKSB7XG4gICAgICAgICAgICAgLy8gT2J0ZW5lciBsb3MgbWV0YWRhdG9zIGRlbCBhcmNoaXZvIGRlc2RlIG1ldGFkYXRhQ2FjaGVcbiAgICAgICAgICAgICBjb25zdCBtZXRhZGF0YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICAgICAgICAgICBcbiAgICAgICAgICAgICAvLyBWZXJpZmljYXIgc2kgZWwgZnJvbnRtYXR0ZXIgY29udGllbmUgZWwgY2FtcG8gXCJlc3RhZG9cIiBjb24gZWwgdmFsb3IgXCJcdUQ4M0RcdURGRTJcIlxuICAgICAgICAgICAgIGlmIChtZXRhZGF0YT8uZnJvbnRtYXR0ZXI/LmVzdGFkbyA9PT0gXCJcdUQ4M0RcdURGRTJcIikge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBmaWxlO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgfVxuICAgICBcbiAgICAgcmV0dXJuIDtcbiAgICB9XG5cbiAvLyBTdXBvbmVtb3MgcXVlIGVzdGEgZnVuY2lcdTAwRjNuIHNlIHViaWNhclx1MDBFMSBlbiBhbGdcdTAwRkFuIGx1Z2FyIGRvbmRlIHB1ZWRhIGFjY2VkZXIgYSBgYXBwYCBkZSBPYnNpZGlhbi5cbiAgICBhc3luYyBjcmVhck9iamV0b1JlZ2lzdHJvKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBhY3Rpdm8gPSBwbHVnaW4uYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG4gICAgICAgIGlmICghYWN0aXZvKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTm8gaGF5IHVuIGFyY2hpdm8gYWN0aXZvIHBhcmEgbGEgY3JlYWNpXHUwMEYzbiBkZSByZWdpc3RybyBkZSB0aWVtcG8uIFNlIGRlc2NhcnRhIHBhcmEgbGEgY3JlYWNpXHUwMEYzbiBkZSByZWdpc3RybyBkZSB0aWVtcG8uXCIpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGZvbGRlciA9IHBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfUmVnaXN0cm9UaWVtcG9cbiAgICAgICAgY29uc3QgaW5kaWNlID0gcGx1Z2luLnNldHRpbmdzLmluZGljZV9SZWdpc3Ryb1RpZW1wb1xuICAgICAgICBcbiAgICAgICAgbGV0IG1heElkID0gMDtcblxuICAgICAgICAvLyBPYnRcdTAwRTluIHRvZG9zIGxvcyBhcmNoaXZvcyBNYXJrZG93blxuICAgICAgICBjb25zdCBmaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG5cbiAgICAgICAgLy8gRmlsdHJhIHBvciBsb3MgYXJjaGl2b3MgZW4gbGEgY2FycGV0YSBkZXNlYWRhXG4gICAgICAgIGNvbnN0IHJlZ2lzdHJvc0V4aXN0ZW50ZXMgPSBmaWxlcy5maWx0ZXIoKGZpbGU6IHsgcGF0aDogc3RyaW5nOyB9KSA9PiBmaWxlLnBhdGguc3RhcnRzV2l0aChmb2xkZXIpKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFVzYSBtZXRhZGF0YUNhY2hlIHBhcmEgYnVzY2FyIGxvcyBJRHMgZW4gZWwgZnJvbnRtYXR0ZXJcbiAgICAgICAgcmVnaXN0cm9zRXhpc3RlbnRlcy5mb3JFYWNoKChmaWxlOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpPy5mcm9udG1hdHRlcjtcbiAgICAgICAgICAgIGlmIChtZXRhZGF0YSAmJiBtZXRhZGF0YS5pZCAmJiAhaXNOYU4obWV0YWRhdGEuaWQpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBwYXJzZUludChtZXRhZGF0YS5pZCk7XG4gICAgICAgICAgICAgICAgaWYgKGlkID4gbWF4SWQpIG1heElkID0gaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEVsIHByXHUwMEYzeGltbyBJRCBkaXNwb25pYmxlXG4gICAgICAgIGNvbnN0IG5leHRJZCA9IG1heElkICsgMTtcblxuICAgICAgICAvLyBGb3JtYXRlYXIgbGEgZmVjaGEgYWN0dWFsXG4gICAgICAgIGNvbnN0IGZlY2hhQ29tcGxldGEgPSB0aGlzLmZvcm1hdGVhckZlY2hhKG5ldyBEYXRlKCkpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhY3Rpdm8sXG4gICAgICAgICAgICBub21icmU6IGFjdGl2by5iYXNlbmFtZSxcbiAgICAgICAgICAgIGZvbGRlcixcbiAgICAgICAgICAgIGluZGljZSxcbiAgICAgICAgICAgIGlkOiBuZXh0SWQsXG4gICAgICAgICAgICBmZWNoYTogZmVjaGFDb21wbGV0YSxcbiAgICAgICAgICAgIGluZGljZV9EVkpTOiBgXCIke2luZGljZX1cImAsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZm9ybWF0ZWFyRmVjaGEoZmVjaGE6IERhdGUpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBmZWNoYS5nZXRUaW1lem9uZU9mZnNldCgpICogNjAwMDA7XG4gICAgICAgIGNvbnN0IGZlY2hhTG9jYWwgPSBuZXcgRGF0ZShmZWNoYS5nZXRUaW1lKCkgLSBvZmZzZXQpO1xuICAgICAgICBjb25zdCBmZWNoYUZvcm1hdG8gPSBmZWNoYUxvY2FsLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcbiAgICAgICAgY29uc3QgZGlhcyA9IFsnRG9taW5nbycsICdMdW5lcycsICdNYXJ0ZXMnLCAnTWlcdTAwRTlyY29sZXMnLCAnSnVldmVzJywgJ1ZpZXJuZXMnLCAnU1x1MDBFMWJhZG8nXTtcbiAgICAgICAgY29uc3QgZGlhU2VtYW5hID0gZGlhc1tmZWNoYS5nZXREYXkoKV07XG4gICAgICAgIGNvbnN0IGhvcmFGb3JtYXRvID0gZmVjaGEudG9UaW1lU3RyaW5nKCkuc3BsaXQoJyAnKVswXS5zdWJzdHJpbmcoMCwgNSk7XG4gICAgICAgIHJldHVybiBgJHtmZWNoYUZvcm1hdG99ICR7ZGlhU2VtYW5hfSAke2hvcmFGb3JtYXRvfWA7XG4gICAgfVxuXG5hc3luYyB2ZXJpZmljYXJUYXJlYXNBY3RpdmFzKHJlZ2lzdHJvOiBhbnksIGFwcDogQXBwKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgXG4gICAgY29uc3QgZmlsZXMgPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgIGNvbnN0IHRhcmVhc0FjdGl2YXMgPSBbXTtcblxuICAgIGZvciAobGV0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgICAgaWYgKGZpbGUucGF0aC5zdGFydHNXaXRoKHJlZ2lzdHJvLmZvbGRlcikpIHtcbiAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpPy5mcm9udG1hdHRlcjtcbiAgICAgICAgICAgIGlmIChtZXRhZGF0YT8uZXN0YWRvID09PSBcIlx1RDgzRFx1REZFMlwiKSB7XG4gICAgICAgICAgICAgICAgdGFyZWFzQWN0aXZhcy5wdXNoKHsgZmlsZSwgdGl0dWxvOiBtZXRhZGF0YS50aXR1bG8sIGFsaWFzZXM6IG1ldGFkYXRhLmFsaWFzZXMgfHwgZmlsZS5iYXNlbmFtZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0YXJlYXNBY3RpdmFzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjb25zdCB0YXJlYUFjdGl2YSA9IHRhcmVhc0FjdGl2YXNbMF07XG4gICAgICAgIGNvbnN0IGRlc2VhRGV0ZW5lciA9IGF3YWl0IHRoaXMubW9zdHJhclN1Z2VyZW5jaWEoYExhIHRhcmVhICR7dGFyZWFBY3RpdmEuYWxpYXNlc30gZXN0XHUwMEUxIGNvcnJpZW5kby4gXHUwMEJGRGVzZWEgZGV0ZW5lcmxhP2ApO1xuICAgICAgICBkZWJ1Z2dlclxuICAgICAgICBpZiAoZGVzZWFEZXRlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYENyZWFjaVx1MDBGM24gZGUgcmVnaXN0cm8gY2FuY2VsYWRvIHBvciBlbCB1c3VhcmlvLmApO1xuICAgICAgICAgICAgcmVnaXN0cm8uZGV0ZW5lciA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChkZXNlYURldGVuZXIpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZGV0ZW5lclRhcmVhKHRhcmVhQWN0aXZhLCBhcHApO1xuICAgICAgICAgICAgcmVnaXN0cm8uZGV0ZW5lciA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3IE5vdGljZShgTGEgdGFyZWEgJHt0YXJlYUFjdGl2YS5hbGlhc2VzfSBzZWd1aXJcdTAwRTEgcmVnaXN0clx1MDBFMW5kb3NlLmApO1xuICAgICAgICAgICAgcmVnaXN0cm8uZGV0ZW5lciA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRhcmVhc0FjdGl2YXMubGVuZ3RoID4gMSkge1xuICAgICAgICBuZXcgTm90aWNlKFwiSGF5IHVuIGVycm9yIGNvbiBsYSBjYW50aWRhZCBkZSB0YXJlYXMgY29ycmllbmRvIGVuIGVzdGUgbW9tZW50by5cIik7XG4gICAgICAgIHJlZ2lzdHJvLmRldGVuZXIgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTm8gaGF5IG1cdTAwRTFzIHRhcmVhcyBjb3JyaWVuZG8uXCIpO1xuICAgICAgICByZWdpc3Ryby5kZXRlbmVyID0gZmFsc2U7XG4gICAgfVxufVxuXG4gICAgbW9zdHJhclN1Z2VyZW5jaWEobWVuc2FqZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBsZXQgc2VsZWNjaW9uYWRvID0gZmFsc2U7IC8vIEluZGljYSBzaSBzZSBoYSBoZWNobyB1bmEgc2VsZWNjaVx1MDBGM25cbiAgICBcbiAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IE1vZGFsKGFwcCk7XG4gICAgICAgICAgICBtb2RhbC5jb250ZW50RWwuY3JlYXRlRWwoJ2gxJywgeyB0ZXh0OiBtZW5zYWplIH0pO1xuICAgIFxuICAgICAgICAgICAgLy8gQ3JlYXIgY29udGVuZWRvciBwYXJhIGJvdG9uZXNcbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvbnNDb250YWluZXIgPSBtb2RhbC5jb250ZW50RWwuY3JlYXRlRWwoJ2RpdicpO1xuICAgIFxuICAgICAgICAgICAgLy8gRnVuY2lcdTAwRjNuIGF1eGlsaWFyIHBhcmEgbWFuZWphciBzZWxlY2Npb25lcyB5IGNlcnJhciBlbCBtb2RhbCBhZGVjdWFkYW1lbnRlXG4gICAgICAgICAgICBjb25zdCBoYWNlclNlbGVjY2lvbiA9IChzZWxlY2Npb246IGJvb2xlYW4pID0+IHtcbiAgICAgICAgICAgICAgICBzZWxlY2Npb25hZG8gPSB0cnVlOyAvLyBNYXJjYXIgcXVlIHNlIGhhIGhlY2hvIHVuYSBzZWxlY2NpXHUwMEYzblxuICAgICAgICAgICAgICAgIG1vZGFsLmNsb3NlKCk7IC8vIENlcnJhciBlbCBtb2RhbFxuICAgICAgICAgICAgICAgIHJlc29sdmUoc2VsZWNjaW9uKTsgLy8gUmVzb2x2ZXIgbGEgcHJvbWVzYSBjb24gbGEgc2VsZWNjaVx1MDBGM25cbiAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAvLyBCb3RcdTAwRjNuIFNcdTAwRURcbiAgICAgICAgICAgIGNvbnN0IHllc0J1dHRvbiA9IGJ1dHRvbnNDb250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiAnU1x1MDBFRCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHllc0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGhhY2VyU2VsZWNjaW9uKHRydWUpKTtcbiAgICBcbiAgICAgICAgICAgIC8vIEJvdFx1MDBGM24gTm9cbiAgICAgICAgICAgIGNvbnN0IG5vQnV0dG9uID0gYnV0dG9uc0NvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywge1xuICAgICAgICAgICAgICAgIHRleHQ6ICdObycsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG5vQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gaGFjZXJTZWxlY2Npb24oZmFsc2UpKTtcbiAgICBcbiAgICAgICAgICAgIG1vZGFsLm9uQ2xvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFzZWxlY2Npb25hZG8pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2kgZWwgbW9kYWwgc2UgY2llcnJhIHNpbiBxdWUgc2UgaGF5YSBoZWNobyB1bmEgc2VsZWNjaVx1MDBGM24sIHJlY2hhemFyIGxhIHByb21lc2FcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIk1vZGFsIGNlcnJhZG8gc2luIHNlbGVjY2lcdTAwRjNuXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgLy8gQWdyZWdhciBlc2N1Y2hhcyBkZSBldmVudG9zIGRlIHRlY2xhZG8gcGFyYSBwZXJtaXRpciBsYSBuYXZlZ2FjaVx1MDBGM24gY29uIGVsIHRlY2xhZG9cbiAgICAgICAgICAgIG1vZGFsLmNvbnRlbnRFbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGU6IHsga2V5OiBhbnk7IH0pID0+IHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUua2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0Fycm93TGVmdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICB5ZXNCdXR0b24uZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdBcnJvd1JpZ2h0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vQnV0dG9uLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnRW50ZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2ltdWxhIGNsaWMgZW4gZWwgYm90XHUwMEYzbiBlbmZvY2Fkb1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudD8uY2xpY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIFxuICAgICAgICAgICAgLy8gRW5mb2NhciBpbmljaWFsbWVudGUgZWwgYm90XHUwMEYzbiAnU1x1MDBFRCcgcGFyYSBwZXJtaXRpciBsYSBuYXZlZ2FjaVx1MDBGM24gY29uIHRlY2xhZG8gZGVzZGUgZWwgaW5pY2lvXG4gICAgICAgICAgICB5ZXNCdXR0b24uZm9jdXMoKTtcbiAgICBcbiAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIFxuXG4gICAgYXN5bmMgZGVmaW5pclRpcG9SZWdpc3RybyhyZWdpc3RybzogYW55LCBhcHA6IEFwcCkge1xuICAgICAgICBjb25zdCB0b3RUYXJlYXMgPSBhd2FpdCB0aGlzLmVuY29udHJhclRhcmVhc1BlbmRpZW50ZXMoYXBwKTsgLy8gUGFzbyBgYXBwYCBjb21vIGFyZ3VtZW50b1xuICAgICAgICBcbiAgICAgICAgbGV0IG9wY2lvbmVzVGl0dWxvLCB2YWxvcmVzT3BjaW9uO1xuICAgICAgICBpZiAodG90VGFyZWFzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIG9wY2lvbmVzVGl0dWxvID0gW3JlZ2lzdHJvLm5vbWJyZSwgXCJBbGd1bmEgdGFyZWEgZW4gRWplY3VjaVx1MDBGM25cIiwgXCJPdHJvXCJdO1xuICAgICAgICAgICAgdmFsb3Jlc09wY2lvbiA9IFtcIk5vdGFcIiwgXCJUYXJlYVwiLCBcIk90cm9cIl07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcGNpb25lc1RpdHVsbyA9IFtyZWdpc3Ryby5ub21icmUsIFwiT3Ryb1wiXTtcbiAgICAgICAgICAgIHZhbG9yZXNPcGNpb24gPSBbXCJOb3RhXCIsIFwiT3Ryb1wiXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IFwiXHUwMEJGU29icmUgcXVcdTAwRTkgZXMgZWwgcmVnaXN0cm8gZGUgdGllbXBvP1wiO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgbW9kYWxNZW51MSA9IG5ldyBTZWxlY2Npb25Nb2RhbChhcHAsIG9wY2lvbmVzVGl0dWxvLCB2YWxvcmVzT3BjaW9uLCBwbGFjZWhvbGRlcik7XG4gICAgICAgIFxuICAgICAgICAvLyBFc3BlcmEgYXNpbmNyXHUwMEYzbmljYW1lbnRlIGxhIHNlbGVjY2lcdTAwRjNuIGRlbCB1c3VhcmlvIGFudGVzIGRlIGNvbnRpbnVhci5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IGF3YWl0IG1vZGFsTWVudTEub3BlbkFuZEF3YWl0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgICByZWdpc3Ryby50aXBvUmVnaXN0cm8gPSBzZWxlY3Rpb247XG4gICAgICAgICAgICAvLyBQcm9jZXNhciBsYSBzZWxlY2NpXHUwMEYzbiBkZWwgdXN1YXJpbyBhcXVcdTAwRUQuXG4gICAgICAgICAgICAvLyBFbCBjXHUwMEYzZGlnbyBzdWJzaWd1aWVudGUgZGVwZW5kZSBkZWwgdGlwbyBkZSByZWdpc3RybyBzZWxlY2Npb25hZG8uXG4gICAgICAgICAgICBzd2l0Y2gocmVnaXN0cm8udGlwb1JlZ2lzdHJvKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcIk5vdGFcIjpcbiAgICAgICAgICAgICAgICAgICAgcmVnaXN0cm8udGl0dWxvID0gcmVnaXN0cm8ubm9tYnJlOyAvLyBFbCB0XHUwMEVEdHVsbyBlcyBlbCBub21icmUgZGUgbGEgbm90YSBhY3R1YWwuXG4gICAgICAgICAgICAgICAgICAgIHJlZ2lzdHJvLnNpQXN1bnRvID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIlRhcmVhXCI6XG4gICAgICAgICAgICAgICAgICAgIC8vIExcdTAwRjNnaWNhIHBhcmEgcGVybWl0aXIgYWwgdXN1YXJpbyBlbGVnaXIgdW5hIHRhcmVhIGVzcGVjXHUwMEVEZmljYS5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZWxlZ2lyVGFyZWFQYXJhUmVnaXN0cm8oYXBwLCByZWdpc3RybywgdG90VGFyZWFzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgLy8gU2kgZWwgdXN1YXJpbyBlbGlnZSBcIk90cm9cIiBvIGN1YWxxdWllciBvdHJhIG9wY2lcdTAwRjNuLlxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzcHVlc3RhID0gYXdhaXQgdGhpcy5tZW51T3Ryby5tZW51T3RybyhhcHAsIHJlZ2lzdHJvKTtcbiAgICAgICAgICAgICAgICAgICAgZGVidWdnZXJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZWdpc3RybywgcmVzcHVlc3RhKTsgLy8gdGl0dWxvLCBzaUFzdW50bywgbm9tYnJlXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgbyBtb2RhbCBjZXJyYWRvIHNpbiBzZWxlY2NpXHUwMEYzbjpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgLy8gTWFuZWpvIGRlIGVycm9yZXMgbyBjaWVycmUgZGVsIG1vZGFsIHNpbiBzZWxlY2NpXHUwMEYzbi5cbiAgICAgICAgICAgIC8vIFBvciBlamVtcGxvLCBwb2RyXHUwMEVEYXMgZXN0YWJsZWNlciB1biB2YWxvciBwcmVkZXRlcm1pbmFkbyBwYXJhIHJlZ2lzdHJvLmRldGVuZXIgYXF1XHUwMEVELlxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBhc3luYyBlbmNvbnRyYXJUYXJlYXNQZW5kaWVudGVzKGFwcDogQXBwKTogUHJvbWlzZTx7IHRhcmVhOiBzdHJpbmc7IGFyY2hpdm86IFRGaWxlIH1bXT4ge1xuICAgICAgICBsZXQgdGFyZWFzUGVuZGllbnRlczogeyB0YXJlYTogc3RyaW5nOyBhcmNoaXZvOiBURmlsZSB9W10gPSBbXTtcbiAgICAgICAgY29uc3QgYXJjaGl2b3MgPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgICAgICBjb25zdCBhcmNoaXZvc1JlbGV2YW50ZXMgPSBhcmNoaXZvcy5maWx0ZXIoKGFyY2hpdm86IHsgcGF0aDogc3RyaW5nOyB9KSA9PiAhYXJjaGl2by5wYXRoLmluY2x1ZGVzKFwiUGxhbnRpbGxhc1wiKSk7XG4gICAgXG4gICAgICAgIGZvciAoY29uc3QgYXJjaGl2byBvZiBhcmNoaXZvc1JlbGV2YW50ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbmlkbyA9IGF3YWl0IGFwcC52YXVsdC5yZWFkKGFyY2hpdm8pO1xuICAgICAgICAgICAgY29uc3QgY29pbmNpZGVuY2lhcyA9IGNvbnRlbmlkby5tYXRjaCgvXiAqLSBcXFtcXC9cXF0gLiovZ20pIHx8IFtdO1xuICAgIFxuICAgICAgICAgICAgLy8gUGFyYSBjYWRhIHRhcmVhIGVuY29udHJhZGEsIGNyZWEgdW4gb2JqZXRvIGNvbiBsYSB0YXJlYSBsaW1waWEgeSBlbCBhcmNoaXZvIGFjdHVhbCwgeSBsbyBhZ3JlZ2EgYWwgYXJyZWdsb1xuICAgICAgICAgICAgY29uc3QgdGFyZWFzQ29uQXJjaGl2byA9IGNvaW5jaWRlbmNpYXMubWFwKCh0YXJlYTogc3RyaW5nKSA9PiB7ICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdGFyZWE6IHRhcmVhLnRyaW0oKSwgYXJjaGl2bzogYXJjaGl2byB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0YXJlYXNQZW5kaWVudGVzID0gdGFyZWFzUGVuZGllbnRlcy5jb25jYXQodGFyZWFzQ29uQXJjaGl2byk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmVhc1BlbmRpZW50ZXM7XG4gICAgfVxuICAgIFxuXG4gICAgYXN5bmMgZWxlZ2lyVGFyZWFQYXJhUmVnaXN0cm8oYXBwOiBBcHAsIHJlZ2lzdHJvOiBhbnksIHRhcmVhc1BlbmRpZW50ZXM6IGFueSkge1xuICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IFwiRWxpZ2UgbGEgdGFyZWEgcXVlIHZhcyBhIHJlZ2lzdHJhci5cIjtcbiAgICBcbiAgICAgICAgLy8gTWFwIHBhcmEgZXh0cmFlciB5IGxpbXBpYXIgc29sbyBsYXMgdGFyZWFzXG4gICAgICAgIGxldCBwcm9tZXNhc0xpbXBpYXMgPSB0YXJlYXNQZW5kaWVudGVzLm1hcCgodGFyZWFPYmo6IHsgdGFyZWE6IHN0cmluZzsgfSkgPT4gdGhpcy5saW1waWFyVGV4dG9UYXJlYSh0YXJlYU9iai50YXJlYSkpO1xuICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gRXNwZXJhIGEgcXVlIHRvZGFzIGxhcyBwcm9tZXNhcyBlbiBwcm9tZXNhc0xpbXBpYXMgc2UgcmVzdWVsdmFuXG4gICAgICAgICAgICBjb25zdCB0YXJlYXNMaW1waWFzID0gYXdhaXQgUHJvbWlzZS5hbGwocHJvbWVzYXNMaW1waWFzKTtcbiAgICBcbiAgICAgICAgICAgIC8vIFJlY29uc3RydWlyIGxvcyBvYmpldG9zIGNvbiBsYXMgdGFyZWFzIGxpbXBpYXMgbWFudGVuaWVuZG8gbGEgcmVmZXJlbmNpYSBhbCBhcmNoaXZvXG4gICAgICAgICAgICBjb25zdCB0YXJlYXNMaW1waWFzQ29uQXJjaGl2byA9IHRhcmVhc1BlbmRpZW50ZXMubWFwKCh0YXJlYU9iajogeyBhcmNoaXZvOiBhbnk7IH0sIGluZGV4OiBzdHJpbmcgfCBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0YXJlYTogdGFyZWFzTGltcGlhc1tpbmRleF0sIC8vIFRhcmVhIGxpbXBpYVxuICAgICAgICAgICAgICAgICAgICBhcmNoaXZvOiB0YXJlYU9iai5hcmNoaXZvIC8vIFJlZmVyZW5jaWEgYWwgYXJjaGl2byBvcmlnaW5hbFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRXN0YXMgZG9zIGxcdTAwRURuZWFzIG1lIGdlbmVyYW4gdW4gYXJyZWdsbyBkZSBpbmRpY2VzIHBhcmEgc3VtaW5pc3RyYXIgZWwgdmFsb3IgYWwgbW9kYWwuIFxuICAgICAgICAgICAgY29uc3QgbG9uZ2l0dWQgPSB0YXJlYXNMaW1waWFzQ29uQXJjaGl2by5sZW5ndGg7XG4gICAgICAgICAgICBjb25zdCBhcnJlZ2xvRGVJbmRpY2VzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogbG9uZ2l0dWQgfSwgKF8sIGluZGljZSkgPT4gaW5kaWNlKTtcblxuICAgICAgICAgICAgY29uc3QgbW9kYWxNZW51ID0gbmV3IFNlbGVjY2lvbk1vZGFsKGFwcCwgdGFyZWFzTGltcGlhc0NvbkFyY2hpdm8ubWFwKChiOiB7IHRhcmVhOiBhbnk7IH0pID0+IGIudGFyZWEpLCBhcnJlZ2xvRGVJbmRpY2VzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIEVzcGVyYSBhIHF1ZSBlbCB1c3VhcmlvIGhhZ2EgdW5hIHNlbGVjY2lcdTAwRjNuIGVuIGVsIG1vZGFsXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRJbmRleCA9IGF3YWl0IG1vZGFsTWVudS5vcGVuQW5kQXdhaXRTZWxlY3Rpb24oKTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBBc2VnXHUwMEZBcmF0ZSBkZSBxdWUgbGEgc2VsZWNjaVx1MDBGM24gY29ycmVzcG9uZGEgYWwgXHUwMEVEbmRpY2UgY29ycmVjdG8gZW4gdGFyZWFzTGltcGlhc0NvbkFyY2hpdm9cbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY2Npb24gPSB0YXJlYXNMaW1waWFzQ29uQXJjaGl2b1tzZWxlY3RlZEluZGV4XTtcbiAgICAgICAgICAgICAgICByZWdpc3Ryby50aXR1bG8gPSBzZWxlY2Npb24udGFyZWE7IC8vIG8gY1x1MDBGM21vIGhheWFzIGRlY2lkaWRvIG1hbmVqYXIgbGEgc2VsZWNjaVx1MDBGM24gbGltcGlhXG4gICAgICAgICAgICAgICAgcmVnaXN0cm8ubm9tYnJlID0gc2VsZWNjaW9uLmFyY2hpdm8uYmFzZW5hbWU7XG4gICAgICAgICAgICAgICAgcmVnaXN0cm8uc2lBc3VudG8gPSB0cnVlO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBFc3RlIGJsb3F1ZSBjYXRjaCBtYW5lamEgZXJyb3JlcyBvIGNpZXJyZSBkZWwgbW9kYWwgc2luIHNlbGVjY2lcdTAwRjNuXG4gICAgICAgICAgICAgICAgcmVnaXN0cm8uZGV0ZW5lciA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIG8gbW9kYWwgY2VycmFkbyBzaW4gc2VsZWNjaVx1MDBGM246XCIsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIEVzdGUgYmxvcXVlIGNhdGNoIG1hbmVqYSBlcnJvcmVzIGVuIGxhIGxpbXBpZXphIGRlIHRhcmVhc1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkh1Ym8gdW4gZXJyb3IgYWwgbGltcGlhciBsYXMgdGFyZWFzOlwiLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgbGltcGlhclRleHRvVGFyZWEodGl0dWxvOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAvLyBFbGltaW5hIHRvZG8gZGVzcHVcdTAwRTlzIGRlbCBwcmltZXIgc2FsdG8gZGUgbFx1MDBFRG5lYS5cbiAgICAgICAgICAgIGxldCB0ZXh0b0xpbXBpbyA9IHRpdHVsby5zcGxpdCgnXFxuJylbMF07XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gRWxpbWluYSBsb3MgdGFncyBkZSBlc3RpbG8gTWFya2Rvd24uXG4gICAgICAgICAgICB0ZXh0b0xpbXBpbyA9IHRleHRvTGltcGlvLnJlcGxhY2UoLyNbXFx3LS9dKy9nLCAnJyk7XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gRWxpbWluYSBsb3MgY2FtcG9zIGRlIGVzdGlsbyBEYXRhdmlldy5cbiAgICAgICAgICAgIHRleHRvTGltcGlvID0gdGV4dG9MaW1waW8ucmVwbGFjZSgvXFxbXFx3Kzo6W15cXF1dK1xcXS9nLCAnJyk7XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gRWxpbWluYSBlbCBwYXRyXHUwMEYzbiBcIiAtIFsvXVwiIGFsIGluaWNpbyBkZSBsYSBjYWRlbmEsIGluY2x1eWVuZG8gcG9zaWJsZXMgZXNwYWNpb3MgYW50ZXMgbyBkZXNwdVx1MDBFOXMuXG4gICAgICAgICAgICB0ZXh0b0xpbXBpbyA9IHRleHRvTGltcGlvLnJlcGxhY2UoL15cXHMqLVxccypcXFtcXC9cXF1cXHMqLywgJycpO1xuXG4gICAgICAgICAgICAvLyBSZWVtcGxhemEgY2FyYWN0ZXJlcyBubyBwZXJtaXRpZG9zIGVuIG5vbWJyZXMgZGUgYXJjaGl2byBjb24gdW4gZ3Vpb24gYmFqbyBvIGFsZ1x1MDBGQW4gb3RybyBjYXJhY3RlciBzZWd1cm8uICAgIFxuICAgICAgICAgICAgY29uc3QgY2FyYWN0ZXJlc05vUGVybWl0aWRvcyA9IC9bPD46XCJcXC9cXFxcfD8qXFx4MDAtXFx4MUZdL2c7XG4gICAgICAgICAgICB0ZXh0b0xpbXBpbyA9IHRleHRvTGltcGlvLnJlcGxhY2UoY2FyYWN0ZXJlc05vUGVybWl0aWRvcywgJ18nKTtcbiAgICAgICAgXG4gICAgICAgICAgICAvLyBSZWVtcGxhemEgZXNwYWNpb3MgbVx1MDBGQWx0aXBsZXMgcG9yIHVuIFx1MDBGQW5pY28gZXNwYWNpbyBwYXJhIGV2aXRhciBub21icmVzIGRlIGFyY2hpdm8gZXhjZXNpdmFtZW50ZSBsYXJnb3MuXG4gICAgICAgICAgICB0ZXh0b0xpbXBpbyA9IHRleHRvTGltcGlvLnJlcGxhY2UoL1xccysvZywgJyAnKTtcbiAgICAgICAgXG4gICAgICAgICAgICAvLyBSZXRvcm5hIGVsIHRleHRvIGxpbXBpbywgYWhvcmEgZW52dWVsdG8gZW4gdW5hIHByb21lc2EuXG4gICAgICAgICAgICByZXNvbHZlKHRleHRvTGltcGlvLnRyaW0oKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBcbiAgICBhc3luYyBjb25zdHJ1aXJOb21icmV5QWxpYXMocmVnaXN0cm86IGFueSwgYXBwOkFwcCl7XG4gICAgICAgIFxuICAgICAgICBsZXQgbm9tYnJlQmFzZSA9IGAke3JlZ2lzdHJvLmZvbGRlcn0vUlQgLSAke3JlZ2lzdHJvLmlkfWA7XG5cbiAgICAgICAgbGV0IGFsaWFzTGltcGlvID0gdGhpcy5saW1waWFyQWxpYXMocmVnaXN0cm8udGl0dWxvKTtcbiAgICAgICAgYWxpYXNMaW1waW8gPSBhbGlhc0xpbXBpby5sZW5ndGggPiAxOTUgPyBhbGlhc0xpbXBpby5zbGljZSgwLCAxOTUpIDogYWxpYXNMaW1waW87XG5cbiAgICAgICAgY29uc3QgYXJjaGl2b3MgPSBhcHAudmF1bHQuZ2V0RmlsZXMoKTtcbiAgICAgICAgbGV0IHJlZ2lzdHJvc0Nvbk1pc21vVGl0dWxvID0gW107XG5cbiAgICAgICAgZm9yIChjb25zdCBhcmNoaXZvIG9mIGFyY2hpdm9zKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChhcmNoaXZvLnBhdGguc3RhcnRzV2l0aChyZWdpc3Ryby5mb2xkZXIpKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gVXNhbW9zIG1ldGFkYXRhQ2FjaGUgcGFyYSBvYnRlbmVyIGxvcyBtZXRhZGF0b3MgZGUgbGEgbm90YVxuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRvcyA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShhcmNoaXZvKTtcbiAgICAgICAgICAgICAgICAvLyBBc2VndXJhbW9zIHF1ZSBtZXRhZGF0b3MuZnJvbnRtYXR0ZXIgY29udGVuZ2EgbG9zIGNhbXBvcyBuZWNlc2FyaW9zXG4gICAgICAgICAgICAgICAgaWYgKG1ldGFkYXRvcyAmJiBtZXRhZGF0b3MuZnJvbnRtYXR0ZXIgJiYgbWV0YWRhdG9zLmZyb250bWF0dGVyLnRpdHVsbyA9PT0gcmVnaXN0cm8udGl0dWxvKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkU2VjID0gbWV0YWRhdG9zLmZyb250bWF0dGVyLmlkU2VjO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaWRTZWMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0cm9zQ29uTWlzbW9UaXR1bG8ucHVzaCh7IGFyY2hpdm8sIGlkU2VjIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRlYnVnZ2VyXG4gICAgICAgIC8vIE9yZGVuYW1vcyBsb3MgcmVzdWx0YWRvcyBwb3IgaWRTZWMgZW4gb3JkZW4gZGVzY2VuZGVudGVcbiAgICAgICAgcmVnaXN0cm9zQ29uTWlzbW9UaXR1bG8uc29ydCgoYikgPT4gYi5pZFNlYywgXCJkZXNjXCIpO1xuXG5cbiAgICByZWdpc3Ryby5pZFNlYyA9IHJlZ2lzdHJvc0Nvbk1pc21vVGl0dWxvLmxlbmd0aCA+IDAgPyAocGFyc2VJbnQocmVnaXN0cm9zQ29uTWlzbW9UaXR1bG9bMF0uaWRTZWMpICsgMSkgOiAxO1xuICAgICAgICBcbiAgICBpZiAocmVnaXN0cm8uaWRTZWMgPiAxKSB7XG4gICAgICAgIGFsaWFzTGltcGlvICs9IGAgLSAke3JlZ2lzdHJvLmlkU2VjfWA7XG4gICAgfVxuXG4gICAgLy8gSW5pY2lhbGl6YSByZWdpc3Ryby5hbGlhc2VzIGNvbW8gdW4gYXJyZWdsbyB2YWNcdTAwRURvXG4gICAgcmVnaXN0cm8uYWxpYXNlcyA9IFtdO1xuXG4gICAgLy8gQWdyZWdhIGVsIGFsaWFzIGxpbXBpbyBjb24gZWwgcHJlZmlqb1xuICAgIHJlZ2lzdHJvLmFsaWFzZXMucHVzaChgUlQgLSAke2FsaWFzTGltcGlvfWApO1xuXG4gICAgaWYgKHJlZ2lzdHJvLnRpcG9SZWdpc3RybyA9PT0gXCJOb3RhXCIpIHtcbiAgICAgICAgXG4gICAgICAgIC8vIE9idFx1MDBFOW4gZWwgYXJjaGl2byBhY3Rpdm9cbiAgICAgICAgY29uc3QgYXJjaGl2b0FjdGl2byA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICBpZiAoIWFyY2hpdm9BY3Rpdm8pIHJldHVybjsgLy8gQXNlZ1x1MDBGQXJhdGUgZGUgcXVlIGhheWEgdW4gYXJjaGl2byBhY3Rpdm9cblxuICAgICAgICAvLyBPYnRcdTAwRTluIGxvcyBtZXRhZGF0b3MgZGVsIGFyY2hpdm8gYWN0aXZvXG4gICAgICAgIGNvbnN0IG1ldGFkYXRvc0FjdGl2byA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShhcmNoaXZvQWN0aXZvKTtcblxuICAgICAgICAvLyBFeHRyYWUgYWxpYXNlcyBkZWwgZnJvbnRtYXR0ZXIsIGFzZWd1clx1MDBFMW5kb3RlIGRlIHF1ZSBleGlzdGFuIHkgYWNjZWRpZW5kbyBjb3JyZWN0YW1lbnRlXG4gICAgICAgIGNvbnN0IGFsaWFzZXNBY3Rpdm8gPSBtZXRhZGF0b3NBY3Rpdm8gJiYgbWV0YWRhdG9zQWN0aXZvLmZyb250bWF0dGVyID8gbWV0YWRhdG9zQWN0aXZvLmZyb250bWF0dGVyLmFsaWFzZXMgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gVmVyaWZpY2Egc2kgYWxpYXNlc0FjdGl2byBleGlzdGUgeSBkZXRlcm1pbmEgc2kgZXMgdW4gYXJyZWdsbyBvIHVuYSBjYWRlbmFcbiAgICAgICAgaWYgKGFsaWFzZXNBY3Rpdm8pIHtcbiAgICAgICAgICAgIGNvbnN0IGFkZGl0aW9uYWxBbGlhc2VzID0gQXJyYXkuaXNBcnJheShhbGlhc2VzQWN0aXZvKVxuICAgICAgICAgICAgICAgID8gYWxpYXNlc0FjdGl2b1xuICAgICAgICAgICAgICAgIDogW2FsaWFzZXNBY3Rpdm9dOyAvLyBDb252aWVydGUgYSBhcnJlZ2xvIHNpIGVzIHVuYSBjYWRlbmFcblxuICAgICAgICAgICAgLy8gQVx1MDBGMWFkZSBjYWRhIGFsaWFzIGFkaWNpb25hbCBjb24gZWwgcHJlZmlqbyBcIlJUIC0gXCJcbiAgICAgICAgICAgIGFkZGl0aW9uYWxBbGlhc2VzLmZvckVhY2goYWxpYXMgPT4ge1xuICAgICAgICAgICAgICAgIHJlZ2lzdHJvLmFsaWFzZXMucHVzaChgUlQgLSAke2FsaWFzfWApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHJlZ2lzdHJvLm5hbWVGaWxlID0gbm9tYnJlQmFzZTtcbiAgICB9XG4gICAgICAgIFxuICAgIGxpbXBpYXJBbGlhcyh0aXR1bG86c3RyaW5nKSB7XG4gICAgICAgIC8vIFJlZW1wbGF6YSBjYXJhY3RlcmVzIG5vIHBlcm1pdGlkb3MgZW4gbm9tYnJlcyBkZSBhcmNoaXZvIGNvbiB1biBndWlvbiBiYWpvIG8gYWxnXHUwMEZBbiBvdHJvIGNhcmFjdGVyIHNlZ3Vyby5cbiAgICAgICAgY29uc3QgY2FyYWN0ZXJlc05vUGVybWl0aWRvcyA9IC9bPD46XCJcXC9cXFxcfD8qXFx4MDAtXFx4MUZdL2c7XG4gICAgICAgIGxldCB0aXR1bG9MaW1waW8gPSB0aXR1bG8ucmVwbGFjZShjYXJhY3RlcmVzTm9QZXJtaXRpZG9zLCAnXycpO1xuICAgIFxuICAgICAgICAvLyBSZWVtcGxhemEgZXNwYWNpb3MgbVx1MDBGQWx0aXBsZXMgcG9yIHVuIFx1MDBGQW5pY28gZXNwYWNpbyBwYXJhIGV2aXRhciBub21icmVzIGRlIGFyY2hpdm8gZXhjZXNpdmFtZW50ZSBsYXJnb3MuXG4gICAgICAgIHRpdHVsb0xpbXBpbyA9IHRpdHVsb0xpbXBpby5yZXBsYWNlKC9cXHMrL2csICcgJyk7XG4gICAgXG4gICAgICAgIHJldHVybiB0aXR1bG9MaW1waW8udHJpbSgpO1xuICAgIH1cblxuICAgIGFzeW5jIGRldGVuZXJUYXJlYSh0YXJlYUFjdGl2YTogeyBmaWxlOiBURmlsZTsgdGl0dWxvOiBzdHJpbmcgfSwgYXBwOiBBcHApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBBcXVcdTAwRUQgaXJcdTAwRURhIGxhIGxcdTAwRjNnaWNhIHBhcmEgbWFyY2FyIGxhIHRhcmVhIGNvbW8gbm8gYWN0aXZhLCBwcm9iYWJsZW1lbnRlIGFjdHVhbGl6YW5kbyBzdSBmcm9udG1hdHRlclxuICAgIGNvbnNvbGUubG9nKGBEZXRlbmllbmRvIGxhIHRhcmVhOiAke3RhcmVhQWN0aXZhLnRpdHVsb31gKTtcbiAgICAvLyBFamVtcGxvIGRlIGNcdTAwRjNtbyBzZSBwb2RyXHUwMEVEYSBhY3R1YWxpemFyIGVsIGZyb250bWF0dGVyIHBhcmEgZGV0ZW5lciBsYSB0YXJlYVxuICAgIC8vIEVzdGEgZXMgdW5hIHNpbXBsaWZpY2FjaVx1MDBGM247IGxhIGltcGxlbWVudGFjaVx1MDBGM24gcmVhbCBkZXBlbmRlclx1MDBFRGEgZGUgY1x1MDBGM21vIGVzdFx1MDBFOXMgbWFuZWphbmRvIGVsIGNvbnRlbmlkbyBkZWwgYXJjaGl2b1xuICAgIGNvbnN0IGZpbGVDb250ZW50cyA9IGF3YWl0IGFwcC52YXVsdC5yZWFkKHRhcmVhQWN0aXZhLmZpbGUpO1xuICAgIGNvbnN0IG5ld0NvbnRlbnRzID0gZmlsZUNvbnRlbnRzLnJlcGxhY2UoJ2VzdGFkbzogXHVEODNEXHVERkUyJywgJ2VzdGFkbzogXHVEODNEXHVERDM1Jyk7IC8vIENhbWJpYXIgYSBlc3RhZG8gbm8gYWN0aXZvXG4gICAgYXdhaXQgYXBwLnZhdWx0Lm1vZGlmeSh0YXJlYUFjdGl2YS5maWxlLCBuZXdDb250ZW50cyk7XG4gICAgfVxuICAgICAgICAgICAgICAgIFxufSIsICJpbXBvcnQgeyBBcHAsIFRGaWxlLCBURm9sZGVyLCBNb2RhbCwgRnV6enlTdWdnZXN0TW9kYWwsIEZ1enp5TWF0Y2gsIE5vdGljZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHtTZWxlY2Npb25Nb2RhbH0gZnJvbSBcIi4uLy4uL21vZGFsZXMvc2VsZWNjaW9uTW9kYWxcIjtcbmltcG9ydCB7ZnV6enlTZWxlY3RPckNyZWF0ZX0gZnJvbSBcIi4uLy4uL21vZGFsZXMvZnV6enlTZWxlY3RPckNyZWF0ZVwiO1xuXG5pbnRlcmZhY2UgR3J1cG9BY3RpdmlkYWQge1xuICAgIGdydXBvOiBzdHJpbmc7XG4gICAgYWN0aXZpZGFkOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBtZW51T3RybyB7XG4gICAgXG4gICAgcGF0aENhbXBvczogc3RyaW5nID0gXCJFc3RydWN0dXJhL0NhbXBvcyBTaXN0ZW1hIEdlc3Rpb24vQ2FtcG9zIFJlZ2lzdHJvIFRpZW1wby5tZFwiO1xuICAgIHNlbGVjdGVkQWN0aXZpdHk6IHN0cmluZyA9XCJcIjtcbiAgICBzZWxlY3RlZEdyb3VwOiBzdHJpbmcgPSBcIlwiO1xuICAgIHBsdWdpbjogUGx1Z2luO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogUGx1Z2luKSB7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgICAgICB0aGlzLmZ1enp5U2VsZWN0T3JDID0gbmV3IGZ1enp5U2VsZWN0T3JDcmVhdGUodGhpcy5hcHAsIHBsdWdpbik7XG4gICAgICB9XG4gICAgXG4gICAgICBhc3luYyBtZW51T3RybyAoYXBwOiBBcHAsIHJlZ2lzdHJvOiBhbnkpe1xuICAgICAgICBjb25zdCBvcGNpb25lc090cm8gPSBbXCJQcm9waWFzXCIsIFwiQXJlYXMgZGUgVmlkYVwiLCBcIkFyZWFzIGRlIEludGVyXHUwMEU5c1wiLCBcIlByb3llY3RvcyBkZSBRXCIsIFwiUHJveWVjdG9zIEdURFwiLCBcIlRlbWEgZGUgSW50ZXJcdTAwRTlzXCIsIFwiUmVjdXJzbyBSZWN1cnJlbnRlXCJdIDtcbiAgICAgICAgY29uc3QgdmFsb3Jlc090cm8gPSBbXCJoYWJcIiwgXCJhY3RzQVZcIiwgXCJhY3RzQUlcIiwgXCJhY3RzUFFcIiwgXCJhY3RzUEdURFwiLCBcImFjdHNUSVwiLCBcImFjdHNSUlwiXTtcbiAgICAgICAgY29uc3QgcGxhY2Vob2xkZXJPdHJvID0gXCJcdTAwQkZRdWUgY2F0ZWdvcmlhP1wiO1xuICAgICAgICBjb25zdCBtb2RhbE90cm8gPSBuZXcgU2VsZWNjaW9uTW9kYWwoYXBwLCBvcGNpb25lc090cm8sIHZhbG9yZXNPdHJvLCBwbGFjZWhvbGRlck90cm8pO1xuICAgICAgICBsZXQgdGVtYU90cm86e2dydXBvOnN0cmluZzthY3RpdmlkYWQ6c3RyaW5nLG5vbWJyZTpzdHJpbmd9O1xuICAgICAgICBsZXQgc2lBc3VudG86IGJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbk90cm8gPSBhd2FpdCBtb2RhbE90cm8ub3BlbkFuZEF3YWl0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgICBzd2l0Y2goc2VsZWN0aW9uT3Rybykge1xuICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY2FzZSBcImhhYlwiOlxuICAgICAgICAgICAgICAgICAgICB0ZW1hT3RybyA9IGF3YWl0IHRoaXMuaGFiaXR1YWwoYXBwKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImFjdHNBVlwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJhY3RzQUlcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiYWN0c1BRXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcImFjdHNQR1REXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcImFjdHNUSVwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJhY3RzUlJcIjpcbiAgICAgICAgICAgICAgICAgICAgdGVtYU90cm8gPSBhd2FpdCB0aGlzLmVsZW1TRyhhcHAsc2VsZWN0aW9uT3Rybyk7IFxuICAgICAgICAgICAgICAgICAgICBzaUFzdW50byA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJidXNcIjpcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBvIG1vZGFsIGNlcnJhZG8gc2luIHNlbGVjY2lcdTAwRjNuOlwiLCBlcnJvcik7XG4gICAgICAgICAgICByZWdpc3Ryby5kZXRlbmVyID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7dGl0dWxvOiB0ZW1hT3Ryby5hY3RpdmlkYWQgKyBcIiAvIFwiICsgdGVtYU90cm8uZ3J1cG8sIHNpQXN1bnRvICxub21icmU6IHRlbWFPdHJvLm5vbWJyZX1cbiAgICAgICAgfVxuXG4gICAgICAgIGFzeW5jIGhhYml0dWFsIChhcHA6IEFwcCl7XG4gICAgICAgICAgICBjb25zdCBncnVwb3MgPSBhd2FpdCB0aGlzLmdldEZyb250bWF0dGVyRmllbGQoYXBwLHRoaXMucGF0aENhbXBvcywgXCJ0ZW1hc1wiKTtcbiAgICAgICAgICAgIGNvbnN0IGFjdHNHcnVwb3MgPSBhd2FpdCB0aGlzLnJlc3VsdFlhbWwoYXBwLFwiYWN0c1RlbWFzXCIpXG4gICAgICAgICAgICAvLyBGaWx0cmFyIHkgcHJlcGFyYXIgbGFzIGFjdGl2aWRhZGVzIGV4aXN0ZW50ZXMgcGFyYSBsYSBiXHUwMEZBc3F1ZWRhXG4gICAgICAgICAgICBsZXQgaXRlbXNGb3JTZWFyY2ggPSBhY3RzR3J1cG9zXG4gICAgICAgICAgICAuZmlsdGVyKChpdGVtKSA9PiBncnVwb3MuaW5jbHVkZXMoaXRlbS5ncnVwbykpIC8vIFVzYSBsYSBwcm9waWVkYWQgJ2dydXBvJyBlbiBsdWdhciBkZSBpdGVtWzBdXG4gICAgICAgICAgICAubWFwKChpdGVtKSA9PiAoe1xuICAgICAgICAgICAgICAgIHZhbHVlOiBgJHtpdGVtLmFjdGl2aWRhZH0gLyAke2l0ZW0uZ3J1cG99YCwgLy8gQ2FtYmlhIGVsIG9yZGVuIHNpIGVzIG5lY2VzYXJpb1xuICAgICAgICAgICAgICAgIGFjdGl2aXR5OiBpdGVtLmFjdGl2aWRhZCwgLy8gVXNhIGxhIHByb3BpZWRhZCAnYWN0aXZpZGFkJyBlbiBsdWdhciBkZSBpdGVtWzFdXG4gICAgICAgICAgICAgICAgZ3JvdXA6IGl0ZW0uZ3J1cG8sXG4gICAgICAgICAgICAgICAgLy8gVXNhIGxhIHByb3BpZWRhZCAnZ3J1cG8nIGVuIGx1Z2FyIGRlIGl0ZW1bMF1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGxldCBlbGVjY2lvbiA9IGF3YWl0IHRoaXMuZnV6enlTZWxlY3RPckMuc2hvd0Z1enp5U2VhcmNoTW9kYWwoaXRlbXNGb3JTZWFyY2gsIGdydXBvcyk7XG4gICAgICAgICAgICBsZXQgb2JqRWxlY2Npb24gPSB7Z3J1cG86IGVsZWNjaW9uWzFdLCBhY3RpdmlkYWQ6IGVsZWNjaW9uWzBdLCBub21icmU6IFwiXCJ9O1xuICAgICAgICAgICAgcmV0dXJuIG9iakVsZWNjaW9uOyAgIFxuICAgICAgICB9XG5cbiAgICAgICAgYXN5bmMgbmluZ3VubyAoYXBwOiBBcHApe1xuXG4gICAgICAgIH1cblxuICAgICAgICBhc3luYyAgZWxlbVNHIChhcHA6IEFwcCwgdGlwbyA6IHN0cmluZyk6IFByb21pc2U8YW55PntcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2aWRhZGVzID0gYXdhaXQgdGhpcy5yZXN1bHRZYW1sKGFwcCwgdGlwbylcbiAgICAgICAgICAgIGRlYnVnZ2VyXG4gICAgICAgICAgICBjb25zdCBhY3RpdmVTRyA9IGF3YWl0IHRoaXMuZmluZE1haW5GaWxlc1dpdGhTdGF0ZShhcHAsdGlwbylcbiAgICAgICAgICAgIC8vIEV4dHJhZSBlbCBwcmltZXIgYWxpYXMgZGUgY2FkYSBub3RhIGVuY29udHJhZGEgeSBsb3MgYWxtYWNlbmEgZW4gdW4gYXJyYXlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZ3JvdXBzID0gYWN0aXZlU0cubWFwKHBhZ2UgPT4gcGFnZS5mcm9udG1hdHRlci5hbGlhc2VzID8gcGFnZS5mcm9udG1hdHRlci5hbGlhc2VzWzBdIDogbnVsbCkuZmlsdGVyKGFsaWFzID0+IGFsaWFzICE9PSBudWxsKTtcbiAgICAgICAgICAgIC8vIEZpbHRyYXIgeSBwcmVwYXJhciBsYXMgYWN0aXZpZGFkZXMgZXhpc3RlbnRlcyBwYXJhIGxhIGJcdTAwRkFzcXVlZGFcbiAgICAgICAgICAgIGxldCBpdGVtc0ZvclNlYXJjaCA9IGFjdGl2aWRhZGVzXG4gICAgICAgICAgICAuZmlsdGVyKChpdGVtKSA9PiBncm91cHMuaW5jbHVkZXMoaXRlbS5ncnVwbykpIC8vIFVzYSBsYSBwcm9waWVkYWQgJ2dydXBvJyBlbiBsdWdhciBkZSBpdGVtWzBdXG4gICAgICAgICAgICAubWFwKChpdGVtKSA9PiAoe1xuICAgICAgICAgICAgICAgIHZhbHVlOiBgJHtpdGVtLmFjdGl2aWRhZH0gLyAke2l0ZW0uZ3J1cG99YCwgLy8gQ2FtYmlhIGVsIG9yZGVuIHNpIGVzIG5lY2VzYXJpb1xuICAgICAgICAgICAgICAgIGFjdGl2aXR5OiBpdGVtLmFjdGl2aWRhZCwgLy8gVXNhIGxhIHByb3BpZWRhZCAnYWN0aXZpZGFkJyBlbiBsdWdhciBkZSBpdGVtWzFdXG4gICAgICAgICAgICAgICAgZ3JvdXA6IGl0ZW0uZ3J1cG8sXG4gICAgICAgICAgICAgICAgLy8gVXNhIGxhIHByb3BpZWRhZCAnZ3J1cG8nIGVuIGx1Z2FyIGRlIGl0ZW1bMF1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIC8vIE1vc3RyYW1vcyBlbCBtb2RhbCBjb24gbGFzIG9wY2lvbmVzIGRlIGJcdTAwRkFzcXVlZGFcblxuICAgICAgICAgICAgbGV0IGVsZWNjaW9uID0gYXdhaXQgdGhpcy5mdXp6eVNlbGVjdE9yQy5zaG93RnV6enlTZWFyY2hNb2RhbChpdGVtc0ZvclNlYXJjaCwgZ3JvdXBzLCB0aXBvKTtcbiAgICAgICAgICAgIGNvbnN0IGZvdW5kRWxlbWVudCA9IGFjdGl2ZVNHLmZpbmQoYiA9PiBiLmZyb250bWF0dGVyLmFsaWFzZXNbMF0gPT09IGVsZWNjaW9uWzFdKTtcbiAgICAgICAgICAgIC8vIFNpIHNlIGVuY3VlbnRyYSBlbCBlbGVtZW50bywgZGV2b2x2ZXIgZnJvbnRtYXR0ZXIuYWxpYXNlc1sxXVxuICAgICAgICAgICAgbGV0IGFsaWFzID0gZm91bmRFbGVtZW50Py5maWxlLnBhdGg7XG4gICAgICAgICAgICBsZXQgb2JqRWxlY2Npb24gPSB7Z3J1cG86IGVsZWNjaW9uWzFdLCBhY3RpdmlkYWQ6IGVsZWNjaW9uWzBdLCBub21icmU6IGFsaWFzfTtcbiAgICAgICAgICAgIHJldHVybiBvYmpFbGVjY2lvbjsgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgYXN5bmMgYnVzY2FyIChhcHA6IEFwcCl7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGFzeW5jICByZXN1bHRZYW1sKGFwcDogQXBwLCB0ZW1hOiBzdHJpbmcpOiBQcm9taXNlPEdydXBvQWN0aXZpZGFkW10+IHtcbiAgICAgICAgICAgIC8vIEVuY3VlbnRyYSBlbCBhcmNoaXZvIHBvciBzdSBydXRhXG4gICAgICAgICAgICBjb25zdCBmaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aCh0aGlzLnBhdGhDYW1wb3MpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVzYSBtZXRhZGF0YUNhY2hlIHBhcmEgb2J0ZW5lciBsb3MgbWV0YWRhdG9zIGRlbCBhcmNoaXZvXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFjY2VkZSBhbCBmcm9udCBtYXR0ZXIgKFlBTUwpIGRlbCBhcmNoaXZvIHkgb2J0aWVuZSBlbCBhcnJlZ2xvIGJhc2FkbyBlbiBlbCB0ZW1hXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFycmVnbG9SZXN1bHQgPSBtZXRhZGF0YT8uZnJvbnRtYXR0ZXI/Llt0ZW1hXSB8fCBbXTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDb25zdHJ1eWUgZWwgYXJyZWdsbyBkZSBvYmpldG9zIHJlc3VsdGFkbyBiYXNhZG8gZW4gbGEgZXN0cnVjdHVyYSBkZSBHcnVwb0FjdGl2aWRhZFxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHRhZG86IEdydXBvQWN0aXZpZGFkW10gPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBSZWxsZW5hIGVsIGFycmVnbG8gY29uIGxvcyBkYXRvcyBkZWwgYXJyZWdsb1Jlc3VsdFxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcnJlZ2xvUmVzdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJyZWdsb1Jlc3VsdC5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pICYmIGl0ZW0ubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0YWRvLnB1c2goeyBncnVwbzogaXRlbVswXSwgYWN0aXZpZGFkOiBpdGVtWzFdIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0YWRvO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIG9idGVuaWVuZG8gZWwgYXJjaGl2byBkZSBjYW1wb3M6XCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAvLyBBcXVcdTAwRUQgbWFuZWphclx1MDBFRGFzIGVsIGVycm9yIGNvbW8gc2VhIGFwcm9waWFkbyBwYXJhIHR1IGFwbGljYWNpXHUwMEYzblxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yOyAvLyBPIGRldm9sdmVyIHVuIGFycmVnbG8gdmFjXHUwMEVEbyBjb21vIHJlc3VsdGFkbyBkZSBlcnJvclxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEZXZ1ZWx2ZSB1biBhcnJlZ2xvIHZhY1x1MDBFRG8gc2kgbm8gc2UgZW5jdWVudHJhIGVsIGFyY2hpdm8gbyBzaSBvY3VycmUgY3VhbHF1aWVyIG90cm8gcHJvYmxlbWFcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFzeW5jIGdldEZyb250bWF0dGVyRmllbGQoYXBwOiBBcHAsIGZpbGU6IHN0cmluZywgZmllbGQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRGaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmaWxlKTtcbiAgICAgICAgICAgICAgICBpZiAodEZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYWNoZSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZSh0RmlsZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyb250bWF0dGVyID0gY2FjaGU/LmZyb250bWF0dGVyO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyb250bWF0dGVyICYmIGZyb250bWF0dGVyLmhhc093blByb3BlcnR5KGZpZWxkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGRWYWx1ZSA9IGZyb250bWF0dGVyW2ZpZWxkXTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGRWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IGZpZWxkVmFsdWUgPT09IG51bGwgfHwgZmllbGRWYWx1ZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRWwgY2FtcG8gZXN0XHUwMEUxIHZhY1x1MDBFRG8gbyBubyBleGlzdGUuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyBPIG1hbmVqYXIgc2VnXHUwMEZBbiBsbyBuZWNlc2l0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJGcm9udG1hdHRlciBjb25zdWx0YWRvIGNvbiBcdTAwRTl4aXRvXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlOyAvLyBEZXZ1ZWx2ZSBlbCB2YWxvciBkZWwgY2FtcG9cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRWwgY2FtcG8gbm8gZXhpc3RlIGVuIGVsIGZyb250bWF0dGVyLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyBPIG1hbmVqYXIgc2VnXHUwMEZBbiBsbyBuZWNlc2l0ZXNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFbCBhcmNoaXZvIG5vIGV4aXN0ZSBvIG5vIGVzIHVuIGFyY2hpdm8gZGUgdGV4dG8uXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gTyBtYW5lamFyIHNlZ1x1MDBGQW4gbG8gbmVjZXNpdGVzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIGNvbnN1bHRhciBlbCBmcm9udG1hdHRlclwiLCBlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyBPIG1hbmVqYXIgc2VnXHUwMEZBbiBsbyBuZWNlc2l0ZXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcblxuICAgICAgICAvLyBFc3RhIGZ1bmNpXHUwMEYzbiBlbmN1ZW50cmEgbG9zIGFyY2hpdm9zIGRlIHN1YnNpc3RlbWFzIHkgY3V5byBlc3RhZG8gZXMgXHVEODNEXHVERkUyXG4gICAgICAgIGFzeW5jIGZpbmRNYWluRmlsZXNXaXRoU3RhdGUoYXBwLCB0aXBvKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXNUaXBvID0ge1xuICAgICAgICAgICAgICAgIGFjdHNBVjoge1xuICAgICAgICAgICAgICAgICAgZm9sZGVyOiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJfQXJlYXNWaWRhLFxuICAgICAgICAgICAgICAgICAgc2FtZU5hbWU6IHRydWUsIFxuICAgICAgICAgICAgICAgICAgbmFtZUZpbGU6IHRoaXMucGx1Z2luLnNldHRpbmdzLm5hbWVGaWxlX0FyZWFzVmlkYVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWN0c0FJOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbGRlcjogdGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX0FyZWFzSW50ZXJlcyxcbiAgICAgICAgICAgICAgICAgICAgc2FtZU5hbWU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWVGaWxlOiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5uYW1lRmlsZV9BcmVhc0ludGVyZXNcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWN0c1BROiB7XG4gICAgICAgICAgICAgICAgICBmb2xkZXI6IHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9Qcm95ZWN0b3NRLFxuICAgICAgICAgICAgICAgICAgc2FtZU5hbWU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgbmFtZUZpbGU6IFwiXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFjdHNQR1REOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbGRlcjogdGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX1Byb3llY3Rvc0dURCxcbiAgICAgICAgICAgICAgICAgICAgc2FtZU5hbWU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lRmlsZTogXCJcIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3RzVEk6IHtcbiAgICAgICAgICAgICAgICAgICAgICBmb2xkZXI6IHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlcl9UZW1hc0ludGVyZXMsXG4gICAgICAgICAgICAgICAgICAgICAgc2FtZU5hbWU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgIG5hbWVGaWxlOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWN0c1JSOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbGRlcjogdGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyX1JlY3Vyc29zUmVjdXJyZW50ZXMsXG4gICAgICAgICAgICAgICAgICAgIHNhbWVOYW1lOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZUZpbGU6IFwiXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLy8gUHVlZGVzIGNvbnRpbnVhciBhXHUwMEYxYWRpZW5kbyBtXHUwMEUxcyBjYXNvcyBhcXVcdTAwRURcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgIC8vIEFzZWdcdTAwRkFyYXRlIGRlIHF1ZSB0aXBvIGVzIHVuYSBwcm9waWVkYWQgdlx1MDBFMWxpZGEgYW50ZXMgZGUgZGVzZXN0cnVjdHVyYXJcbiAgICAgICAgICAgICBpZiAocHJvcGVydGllc1RpcG8uaGFzT3duUHJvcGVydHkodGlwbykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGZvbGRlciwgc2FtZU5hbWUsIG5hbWVGaWxlIH0gPSBwcm9wZXJ0aWVzVGlwb1t0aXBvXTtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlc0luRm9sZGVyID0gYXBwLnZhdWx0LmdldEZpbGVzKCkuZmlsdGVyKGZpbGUgPT4gZmlsZS5wYXRoLnN0YXJ0c1dpdGgoZm9sZGVyKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZXNXaXRoRnJvbnRtYXR0ZXIgPSBbXTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzSW5Gb2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChzYW1lTmFtZSAmJiBmaWxlLmJhc2VuYW1lID09PSBuYW1lRmlsZSkgfHwgIXNhbWVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXRhZGF0YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZXRhZGF0YS5mcm9udG1hdHRlciAmJiBtZXRhZGF0YS5mcm9udG1hdHRlci5lc3RhZG8gPT09IFwiXHVEODNEXHVERkUyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlc1dpdGhGcm9udG1hdHRlci5wdXNoKHsgZmlsZTogZmlsZSwgZnJvbnRtYXR0ZXI6IG1ldGFkYXRhLmZyb250bWF0dGVyIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmaWxlc1dpdGhGcm9udG1hdHRlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTZWxlY2NpXHUwMEYzbiBubyByZWNvbm9jaWRhOlwiLCB0aXBvKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107IC8vIE1hbmVqYXIgc2VnXHUwMEZBbiB0dSBsXHUwMEYzZ2ljYSBkZSBhcGxpY2FjaVx1MDBGM25cbiAgICAgICAgICAgIH1cbiAgICAgICAgIH1cblxufVxuIiwgImltcG9ydCB7IEFwcCwgUGx1Z2luLCBOb3RpY2UgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7U2VsZWNjaW9uTW9kYWx9IGZyb20gXCIuL3NlbGVjY2lvbk1vZGFsXCI7XG5cbmV4cG9ydCBjbGFzcyBmdXp6eVNlbGVjdE9yQ3JlYXRlIHtcbiAgYXBwOiBBcHA7XG4gIHBsdWdpbjogUGx1Z2luO1xuICBwYXRoQ2FtcG9zOiBzdHJpbmcgPSBcIkVzdHJ1Y3R1cmEvQ2FtcG9zIFNpc3RlbWEgR2VzdGlvbi9DYW1wb3MgUmVnaXN0cm8gVGllbXBvLm1kXCI7XG5cbiAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogUGx1Z2luKSB7XG4gICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gIH1cblxuICBjcmVhdGVNb2RhbCgpIHtcbiAgICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgbW9kYWwuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJmdXp6eVNlYXJjaE1vZGFsXCIpO1xuICAgIG1vZGFsLnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICAgIG1vZGFsLnN0eWxlLnRvcCA9IFwiNTAlXCI7XG4gICAgbW9kYWwuc3R5bGUubGVmdCA9IFwiNTAlXCI7XG4gICAgbW9kYWwuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoLTUwJSwgLTUwJSlcIjtcbiAgICBtb2RhbC5zdHlsZS56SW5kZXggPSBcIjEwMDBcIjtcbiAgICBtb2RhbC5zdHlsZS5wYWRkaW5nID0gXCIyMHB4XCI7XG4gICAgbW9kYWwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ3aGl0ZVwiO1xuICAgIG1vZGFsLnN0eWxlLmJvcmRlciA9IFwiMXB4IHNvbGlkICNjY2NcIjtcbiAgICBtb2RhbC5zdHlsZS5ib3JkZXJSYWRpdXMgPSBcIjVweFwiO1xuICAgIG1vZGFsLnN0eWxlLmJveFNoYWRvdyA9IFwiMCA0cHggNnB4IHJnYmEoMCwwLDAsLjEpXCI7XG4gICAgbW9kYWwuc3R5bGUud2lkdGggPSBcIjMwMHB4XCI7XG4gIFxuICAgIGNvbnN0IGNsb3NlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBjbG9zZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiXHUwMEQ3XCI7XG4gICAgY2xvc2VCdXR0b24uc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgY2xvc2VCdXR0b24uc3R5bGUudG9wID0gXCI1cHhcIjtcbiAgICBjbG9zZUJ1dHRvbi5zdHlsZS5yaWdodCA9IFwiNXB4XCI7XG4gICAgY2xvc2VCdXR0b24uc3R5bGUuYm9yZGVyID0gXCJub25lXCI7XG4gICAgY2xvc2VCdXR0b24uc3R5bGUuYmFja2dyb3VuZCA9IFwibm9uZVwiO1xuICAgIGNsb3NlQnV0dG9uLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xuICAgIGNsb3NlQnV0dG9uLnN0eWxlLmZvbnRTaXplID0gXCIxNnB4XCI7XG4gICAgY2xvc2VCdXR0b24uc3R5bGUuZm9udFdlaWdodCA9IFwiYm9sZFwiO1xuICAgIGNsb3NlQnV0dG9uLnN0eWxlLnBhZGRpbmcgPSBcIjBweCA0cHhcIjtcbiAgICBjbG9zZUJ1dHRvbi5zdHlsZS5ib3JkZXJSYWRpdXMgPSBcIjEwcHhcIjtcbiAgICBjbG9zZUJ1dHRvbi5zdHlsZS5vdXRsaW5lID0gXCJub25lXCI7XG4gICAgY2xvc2VCdXR0b24uc3R5bGUuYm94U2hhZG93ID0gXCJub25lXCI7XG4gICAgY2xvc2VCdXR0b24ub25jbGljayA9ICgpID0+IG1vZGFsLnJlbW92ZSgpO1xuICBcbiAgICBtb2RhbC5hcHBlbmRDaGlsZChjbG9zZUJ1dHRvbik7XG4gICAgcmV0dXJuIG1vZGFsO1xuICB9XG5cbiAgZmlsdGVySXRlbXMocXVlcnk6IHN0cmluZywgaXRlbXM6IGFueVtdKSB7XG4gICAgcmV0dXJuIGl0ZW1zLmZpbHRlcigoaXRlbTogeyB2YWx1ZTogc3RyaW5nOyB9KSA9PlxuICAgICAgaXRlbS52YWx1ZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5LnRvTG93ZXJDYXNlKCkpXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZVlBTUxGaWVsZHModGlwbzogc3RyaW5nIHwgbnVtYmVyLCBzZWxlY3RlZFZhbHVlOiBhbnksIHNlbGVjdGVkR3JvdXA6IGFueSkge1xuICAgIHRyeSB7XG4gICAgICAgIGRlYnVnZ2VyXG4gICAgICAgIGNvbnN0IGZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHRoaXMucGF0aENhbXBvcyk7XG4gICAgICAgIGF3YWl0IGFwcC5maWxlTWFuYWdlci5wcm9jZXNzRnJvbnRNYXR0ZXIoZmlsZSwgKGZyb250bWF0dGVyOiB7IFt4OiBzdHJpbmddOiBhbnlbXTsgfSkgPT4ge1xuICAgICAgICAgICAgLy8gQXN1bWllbmRvIHF1ZSAnYWN0c1RlbWFzJyBlcyBlbCBjYW1wbyBhIG1vZGlmaWNhclxuICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgICBsZXQgY3VycmVudEFjdHMgPSBmcm9udG1hdHRlclt0aXBvXSB8fCBbXTtcbiAgICAgICAgICAgIGxldCBuZXdWYWx1ZUZvckFjdHMgPSBbLi4uY3VycmVudEFjdHMsIFtzZWxlY3RlZEdyb3VwLCBzZWxlY3RlZFZhbHVlXV07XG4gICAgICAgICAgICBmcm9udG1hdHRlclt0aXBvXSA9IG5ld1ZhbHVlRm9yQWN0cztcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkZyb250bWF0dGVyIGFjdHVhbGl6YWRvIGNvbiBcdTAwRTl4aXRvXCIpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIGFjdHVhbGl6YXIgZWwgZnJvbnRtYXR0ZXJcIiwgZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gIGFzeW5jIHNob3dGdXp6eVNlYXJjaE1vZGFsKGl0ZW1zOiBhbnksIGdyb3VwczogYW55W10sIHRpcG86IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGxldCBzZWxlY3RlZFZhbHVlID0gXCJcIjsgLy8gVmFyaWFibGUgcGFyYSBndWFyZGFyIGxhIG9wY2lcdTAwRjNuIHNlbGVjY2lvbmFkYSBvIGluZ3Jlc2FkYSBwb3IgZWwgdXN1YXJpb1xuICAgICAgICBsZXQgc2VsZWN0ZWRHcm91cCA9IFwiXCI7XG4gICAgICAgIGNvbnN0IG1vZGFsID0gdGhpcy5jcmVhdGVNb2RhbCgpO1xuICAgICAgXG5cbiAgICAgICAgLy8gQ3JlYXIgeSBjb25maWd1cmFyIGVsIHRcdTAwRUR0dWxvIGRlbCBtb2RhbFxuICAgICAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMlwiKTtcbiAgICAgICAgdGl0bGUudGV4dENvbnRlbnQgPSBcIkJ1c2NhIG8gY3JlYSB0dSBhY3RpdmlkYWRcIjtcbiAgICAgICAgdGl0bGUuc3R5bGUudGV4dEFsaWduID0gXCJjZW50ZXJcIjsgLy8gQ2VudHJhciBlbCB0XHUwMEVEdHVsbywgYWp1c3RhIGxvcyBlc3RpbG9zIHNlZ1x1MDBGQW4gc2VhIG5lY2VzYXJpb1xuICAgICAgICBtb2RhbC5hcHBlbmRDaGlsZCh0aXRsZSk7XG5cbiAgICAgICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIGlucHV0LnR5cGUgPSBcInRleHRcIjtcbiAgICAgICAgaW5wdXQucGxhY2Vob2xkZXIgPSBcIkVzY3JpYmUgdHUgYWN0aXZpZGFkLi4uXCI7XG4gICAgICAgIC8vIEVzdGFibGVjZSBlbCBhbmNobyBkZWwgaW5wdXQgYSB1biBwb3JjZW50YWplIGRlbCBjb250ZW5lZG9yIHBhcmEgaGFjZXJsbyBtXHUwMEUxcyBhbmNoby5cbiAgICAgICAgaW5wdXQuc3R5bGUud2lkdGggPSBcIjgwJVwiO1xuICAgICAgICAvLyBDZW50cmFyIGVsIHRleHRvIGRlbnRybyBkZWwgaW5wdXRcbiAgICAgICAgaW5wdXQuc3R5bGUudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcbiAgICAgICAgLy8gQ2VudHJhciBlbCBpbnB1dCBkZW50cm8gZGVsIG1vZGFsIChzaSBlbCBtb2RhbCB0aWVuZSB1biBkaXNwbGF5IGZsZXgpXG4gICAgICAgIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgICAgICAgbW9kYWwuc3R5bGUuZmxleERpcmVjdGlvbiA9IFwiY29sdW1uXCI7XG4gICAgICAgIG1vZGFsLnN0eWxlLmFsaWduSXRlbXMgPSBcImNlbnRlclwiO1xuICAgICAgICBtb2RhbC5hcHBlbmRDaGlsZChpbnB1dCk7XG5cblxuICAgICAgICAvLyBDcmVhciB5IGFncmVnYXIgdW4gZXNwYWNpbyBlbnRyZSBlbCBpbnB1dCB5IHJlc3VsdHNEaXZcbiAgICAgICAgY29uc3Qgc3BhY2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgc3BhY2VyLnN0eWxlLmhlaWdodCA9IFwiMTZweFwiOyAvLyBBanVzdGEgZXN0YSBhbHR1cmEgc2VnXHUwMEZBbiBuZWNlc2l0ZXMgcGFyYSBlbCBlc3BhY2lvXG4gICAgICAgIG1vZGFsLmFwcGVuZENoaWxkKHNwYWNlcik7XG4gICAgICBcbiAgICAgICAgY29uc3QgcmVzdWx0c0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIG1vZGFsLmFwcGVuZENoaWxkKHJlc3VsdHNEaXYpO1xuICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVJlc3VsdHNEaXNwbGF5KGZpbHRlcmVkUmVzdWx0czogYW55W10sIG1lbnVPdHJvOiB0aGlzKSB7XG4gICAgICAgICAgcmVzdWx0c0Rpdi5pbm5lckhUTUwgPSBcIlwiOyAvLyBMaW1waWFyIHJlc3VsdGFkb3MgcHJldmlvc1xuICAgICAgICAgIGZpbHRlcmVkUmVzdWx0cy5mb3JFYWNoKChyZXN1bHQ6IHsgdmFsdWU6IHN0cmluZyB8IG51bGw7IGFjdGl2aXR5OiBzdHJpbmc7IGdyb3VwOiBzdHJpbmc7IH0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBkaXYudGV4dENvbnRlbnQgPSByZXN1bHQudmFsdWU7XG4gICAgICAgICAgICBkaXYuc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XG4gICAgICAgICAgICBkaXYub25tb3VzZW92ZXIgPSAoKSA9PiAoZGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiI2YwZjBmMFwiKTtcbiAgICAgICAgICAgIGRpdi5vbm1vdXNlb3V0ID0gKCkgPT4gKGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInRyYW5zcGFyZW50XCIpO1xuICAgICAgICAgICAgZGl2Lm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICAgIHNlbGVjdGVkVmFsdWUgPSByZXN1bHQuYWN0aXZpdHk7IC8vIEd1YXJkYXIgZWwgdmFsb3Igc2VsZWNjaW9uYWRvXG4gICAgICAgICAgICAgIHNlbGVjdGVkR3JvdXAgPSByZXN1bHQuZ3JvdXA7IC8vIEd1YXJkYXIgZWwgZ3J1cG8gc2VsZWNjaW9uYWRvXG4gICAgICAgICAgICAgIC8vZGlzcGxheVNlbGVjdGVkVmFsdWUoc2VsZWN0ZWRWYWx1ZSwgc2VsZWN0ZWRHcm91cCk7IC8vIE1vc3RyYXIgbGEgc2VsZWNjaVx1MDBGM24gYWwgdXN1YXJpb1xuICAgICAgICAgICAgICBtb2RhbC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgcmVzb2x2ZShbc2VsZWN0ZWRWYWx1ZSwgc2VsZWN0ZWRHcm91cF0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlc3VsdHNEaXYuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICAgICAgICB9KTtcbiAgICAgIFxuICAgICAgICAgIC8vIFNpIG5vIGhheSByZXN1bHRhZG9zIHkgZWwgdXN1YXJpbyBoYSBpbmdyZXNhZG8gdW4gdGV4dG8sIG9mcmVjZXIgbGEgY3JlYWNpXHUwMEYzbiBkZSB1bmEgbnVldmEgYWN0aXZpZGFkXG4gICAgICAgICAgaWYgKGZpbHRlcmVkUmVzdWx0cy5sZW5ndGggPT09IDAgJiYgaW5wdXQudmFsdWUudHJpbSgpICE9PSBcIlwiKSB7XG4gICAgICAgICAgICBjb25zdCBjcmVhdGVOZXdEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgY3JlYXRlTmV3RGl2LnRleHRDb250ZW50ID0gYENyZWFyIG51ZXZhIGFjdGl2aWRhZDogXCIke2lucHV0LnZhbHVlfVwiYDtcbiAgICAgICAgICAgIGNyZWF0ZU5ld0Rpdi5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgICAgIGNyZWF0ZU5ld0Rpdi5zdHlsZS5jb2xvciA9IFwiYmx1ZVwiO1xuICAgICAgICAgICAgY3JlYXRlTmV3RGl2Lm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICAgIHNlbGVjdGVkVmFsdWUgPSBpbnB1dC52YWx1ZTsgLy8gR3VhcmRhciBsYSBudWV2YSBhY3RpdmlkYWRcbiAgICAgICAgICAgICAgZGVidWdnZXJcbiAgICAgICAgICAgICAgaWYgKHRpcG89PSB1bmRlZmluZWQpeyB0aXBvID0gXCJhY3RzVGVtYXNcIn1cbiAgICAgICAgICAgICAgc2VsZWN0R3JvdXBGb3JOZXdBY3Rpdml0eShtZW51T3RybywgdGlwbyk7IC8vIFByb2NlZGVyIGEgc2VsZWNjaW9uYXIgdW4gZ3J1cG9cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXN1bHRzRGl2LmFwcGVuZENoaWxkKGNyZWF0ZU5ld0Rpdik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBcbiAgICAgICAgZnVuY3Rpb24gc2VsZWN0R3JvdXBGb3JOZXdBY3Rpdml0eShtZW51T3RybzogeyBlc1JlY3VycmVudGU6IChhcmcwOiBzdHJpbmcpID0+IGFueTsgdXBkYXRlWUFNTEZpZWxkczogKGFyZzA6IGFueSwgYXJnMTogc3RyaW5nLCBhcmcyOiBzdHJpbmcpID0+IGFueTsgfSwgdGlwbzogYW55KSB7XG4gICAgICAgICAgcmVzdWx0c0Rpdi5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICAgIGlucHV0LnJlbW92ZSgpO1xuICAgICAgICAgIHNwYWNlci5yZW1vdmUoKTtcbiAgICAgICAgICB0aXRsZS5yZW1vdmUoKTtcblxuICAgICAgICAgIGNvbnN0IHRleHRvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgICAgdGV4dG8udGV4dENvbnRlbnQgPSBgVmFtb3MgYSBjcmVhciBsYSBhY3RpdmlkYWQ6IFwiJHtzZWxlY3RlZFZhbHVlfVwiLiBTZWxlY2Npb25hIHVuIGdydXBvOmA7O1xuICAgICAgICAgIHRleHRvLnN0eWxlLnRleHRBbGlnbiA9IFwiY2VudGVyXCI7IC8vIENlbnRyYXIgZWwgdFx1MDBFRHR1bG8sIGFqdXN0YSBsb3MgZXN0aWxvcyBzZWdcdTAwRkFuIHNlYSBuZWNlc2FyaW9cbiAgICAgICAgICByZXN1bHRzRGl2LmFwcGVuZENoaWxkKHRleHRvKTsgXG4gICAgICBcbiAgICAgICAgICBncm91cHMuZm9yRWFjaCgoZ3JvdXA6IHN0cmluZyB8IG51bGwpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIGdyb3VwRGl2LnRleHRDb250ZW50ID0gZ3JvdXA7XG4gICAgICAgICAgICBncm91cERpdi5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgICAgIGdyb3VwRGl2Lm9ubW91c2VvdmVyID0gKCkgPT4gKGdyb3VwRGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiI2YwZjBmMFwiKTtcbiAgICAgICAgICAgIGdyb3VwRGl2Lm9ubW91c2VvdXQgPSAoKSA9PiAoZ3JvdXBEaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ0cmFuc3BhcmVudFwiKTtcbiAgICAgICAgICAgIGdyb3VwRGl2Lm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgIHNlbGVjdGVkR3JvdXAgPSBncm91cDsgLy8gR3VhcmRhciBlbCBncnVwbyBzZWxlY2Npb25hZG9cbiAgICAgICAgICAgICAgLy9kaXNwbGF5U2VsZWN0ZWRWYWx1ZShzZWxlY3RlZFZhbHVlLCBzZWxlY3RlZEdyb3VwKTsgLy8gTW9zdHJhciBsYSBhY3RpdmlkYWQgeSBlbCBncnVwbyBzZWxlY2Npb25hZG9cbiAgICAgICAgICAgICAgbW9kYWwucmVtb3ZlKCk7XG4gICAgICAgICAgICAgIGxldCByZWN1cnJlbnRlID0gYXdhaXQgbWVudU90cm8uZXNSZWN1cnJlbnRlKHNlbGVjdGVkVmFsdWUpXG4gICAgICAgICAgICAgIGlmIChyZWN1cnJlbnRlKXtcbiAgICAgICAgICAgICAgICBhd2FpdCBtZW51T3Ryby51cGRhdGVZQU1MRmllbGRzKHRpcG8sIHNlbGVjdGVkVmFsdWUsIHNlbGVjdGVkR3JvdXApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlc29sdmUoW3NlbGVjdGVkVmFsdWUsIHNlbGVjdGVkR3JvdXBdKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXN1bHRzRGl2LmFwcGVuZENoaWxkKGdyb3VwRGl2KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIGRpc3BsYXlTZWxlY3RlZFZhbHVlKGFjdGl2aXR5OiBhbnksIGdyb3VwOiBhbnkpIHtcbiAgICAgICAgICByZXN1bHRzRGl2LmlubmVySFRNTCA9IGBTZWxlY2Npb25hZG86ICR7YWN0aXZpdHl9IC8gJHtncm91cH1gO1xuICAgICAgICAgIC8vIEFxdVx1MDBFRCBwdWVkZXMgY2VycmFyIGVsIG1vZGFsIG8gcGVybWl0aXIgYWwgdXN1YXJpbyBoYWNlciBtXHUwMEUxcyBhY2Npb25lc1xuICAgICAgICB9XG4gICAgICBcbiAgICAgICAgaW5wdXQub25pbnB1dCA9ICgpID0+IHtcbiAgICAgICAgICBjb25zdCBmaWx0ZXJlZEl0ZW1zID0gdGhpcy5maWx0ZXJJdGVtcyhpbnB1dC52YWx1ZSwgaXRlbXMpO1xuICAgICAgICAgIHVwZGF0ZVJlc3VsdHNEaXNwbGF5KGZpbHRlcmVkSXRlbXMsIHRoaXMpO1xuICAgICAgICB9O1xuICAgICAgXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobW9kYWwpO1xuICAgICAgIFxuICAgIH0pOyAgIFxufVxuXG5hc3luYyBlc1JlY3VycmVudGUodGFyZWE6c3RyaW5nKTpQcm9taXNlPGJvb2xlYW4+e1xuICBjb25zdCBvcGNpb25lcyA9IFtcIlNpXCIsXCJOb1wiXSA7XG4gIGNvbnN0IHZhbG9yZXMgPSBbdHJ1ZSxmYWxzZV07XG4gIGNvbnN0IHBsYWNlaG9sZGVyID0gYCR7dGFyZWF9IGVzIHRhcmVhIHJlY3VycmVudGU/YDtcbiAgY29uc3QgbW9kYWwgPSBuZXcgU2VsZWNjaW9uTW9kYWwoYXBwLCBvcGNpb25lcywgdmFsb3JlcywgcGxhY2Vob2xkZXIpO1xuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCBtb2RhbC5vcGVuQW5kQXdhaXRTZWxlY3Rpb24oKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgbyBtb2RhbCBjZXJyYWRvIHNpbiBzZWxlY2NpXHUwMEYzbjpcIiwgZXJyb3IpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbn0iLCAiaW1wb3J0IHt1dGlsc0FQSX0gZnJvbSAnLi91dGlsc0FQSSdcblxuZXhwb3J0IGNsYXNzIHJlZ2lzdHJvVGllbXBvQVBJIHtcbiAgICBwcml2YXRlIHV0aWxzQXBpOiB1dGlsc0FQSTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgICAgdGhpcy51dGlsc0FwaSA9IG5ldyB1dGlsc0FQSShwbHVnaW4pO1xuICAgICAgXG4gICAgfVxuICAgIFxuXG4gICAgYXN5bmMgaW5pY2lhclJlZ2lzdHJvKCl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZGVidWdnZXJcbiAgICAgICAgY29uc3QgcmVnaXN0cm8gPSBhd2FpdCB0aGlzLnV0aWxzQXBpLmNyZWFyT2JqZXRvUmVnaXN0cm8odGhpcy5wbHVnaW4pO1xuICAgICAgICBhd2FpdCB0aGlzLnV0aWxzQXBpLnZlcmlmaWNhclRhcmVhc0FjdGl2YXMocmVnaXN0cm8sIHRoaXMucGx1Z2luLmFwcCk7XG4gICAgICAgIGlmIChyZWdpc3Ryby5kZXRlbmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVnaXN0cm87IC8vIERldnVlbHZlIGVsIHJlZ2lzdHJvIGFjdHVhbCB5IGRldGllbmUgbGEgZWplY3VjaVx1MDBGM24gYXF1XHUwMEVEXG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy51dGlsc0FwaS5kZWZpbmlyVGlwb1JlZ2lzdHJvKHJlZ2lzdHJvLHRoaXMucGx1Z2luLmFwcClcbiAgICAgICAgaWYgKHJlZ2lzdHJvLmRldGVuZXIpIHtcbiAgICAgICAgICAgIHJldHVybiByZWdpc3RybzsgLy8gRGV2dWVsdmUgZWwgcmVnaXN0cm8gYWN0dWFsIHkgZGV0aWVuZSBsYSBlamVjdWNpXHUwMEYzbiBhcXVcdTAwRURcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLnV0aWxzQXBpLmNvbnN0cnVpck5vbWJyZXlBbGlhcyhyZWdpc3RybywgdGhpcy5wbHVnaW4uYXBwKVxuICAgICAgICByZXR1cm4gcmVnaXN0cm87XG4gICAgICAgIH1jYXRjaCAoZXJyb3Ipe1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJObyBzZSBwdWRvIGNyZWFyIGVsIG9iamV0byBkZSByZWdpc3Ryby5cIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgIFxuICAgICAgICAgICAgXG5cbiAgICB9XG5cbiAgICBtaU1ldG9kbygpIHtcbiAgICAgIC8vIFR1IGxcdTAwRjNnaWNhIGFxdVx1MDBFRFxuICAgICAgcmV0dXJuIFwiUmVzdWx0YWRvIGRlIG1pIE1ldG9kb1wiO1xuICAgIH1cbiAgXG4gICAgb3Ryb01ldG9kbyhwYXJhbSkge1xuICAgICAgLy8gTFx1MDBGM2dpY2EgdXRpbGl6YW5kbyBwYXJhbVxuICAgICAgcmV0dXJuIGBSZXN1bHRhZG8gZGUgb3Ryb01ldG9kbyBjb24gJHtwYXJhbX1gO1xuICAgIH1cbiAgfVxuICAiLCAiLy9pbXBvcnQge3V0aWxzQVBJfSBmcm9tICcuL3V0aWxzQVBJJ1xuXG5leHBvcnQgY2xhc3Mgc3RhcnRlckFQSSB7XG4gICAgLy9wcml2YXRlIHV0aWxzQXBpOiB1dGlsc0FQSTtcbiAgICBwcml2YXRlIHBsdWdpbjogUGx1Z2luO1xuICAgIHByaXZhdGUgaW5mb1N1YnNpc3RlbWE6IG9iamVjdDsgLy8gQXN1bWllbmRvIHF1ZSBlcyB1biBzdHJpbmdcbiAgICBwcml2YXRlIHRwOiBvYmplY3Q7XG4gICAgcHJpdmF0ZSBub3RhOiBvYmplY3Q7XG4gICAgcHJpdmF0ZSBwYXRoQ2FtcG9zOiBzdHJpbmc7IFxuXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgICAgIC8vIEluaWNpYWxpemEgZm9sZGVyIGUgaW5kaWNlIGNvbiB2YWxvcmVzIHByZWRldGVybWluYWRvcyBvIGxcdTAwRjNnaWNhIGVzcGVjXHUwMEVEZmljYS5cbiAgICAgICAgdGhpcy5pbmZvU3Vic2lzdGVtYSA9IHt9O1xuICAgICAgICB0aGlzLm5vdGEgPSB7fTtcbiAgICAgICAgdGhpcy50cCA9IHRoaXMuZ2V0VHAoKTtcbiAgICAgICAgdGhpcy5wYXRoQ2FtcG9zID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuZmlsZV9jYW1wb3NDZW50cmFsICsgXCIubWRcIjtcbiAgICB9XG4gICAgXG5cbiAgICBhc3luYyBjcmVhck5vdGEoaW5mb1N1YnNpc3RlbWE6IHsgZm9sZGVyOiBzdHJpbmcgfCBudW1iZXI7IGluZGljZTogc3RyaW5nIHwgbnVtYmVyOyB9LCBjYW1wb3M6IGFueSkge1xuICAgICAgICBcbiAgICAgICAgbGV0IG5vdGEgPSB7fTsgLy8gSW5pY2lhbGl6YSBlbCBvYmpldG8gbm90YS5cbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmluZm9TdWJzaXN0ZW1hLCBpbmZvU3Vic2lzdGVtYSk7IFxuICAgICAgICBpZiAodGhpcy5pbmZvU3Vic2lzdGVtYS5kZWZpbmVkKXtcbiAgICAgICAgdGhpcy5pbmZvU3Vic2lzdGVtYS5mb2xkZXIgPSB0aGlzLnBsdWdpbi5zZXR0aW5nc1tpbmZvU3Vic2lzdGVtYS5mb2xkZXJdXG4gICAgICAgIHRoaXMuaW5mb1N1YnNpc3RlbWEuaW5kaWNlID0gdGhpcy5wbHVnaW4uc2V0dGluZ3NbaW5mb1N1YnNpc3RlbWEuaW5kaWNlXVxuICAgICAgICB9XG4gICAgICAgIGRlYnVnZ2VyXG4gICAgICAgIC8vIENyZWFyIHVuIHRwIHBhcmEgYWNjZWRlciBhIGZ1bmNpb25hbGlkYWRlcyBkZSB0ZW1wbGF0ZXIuXG4gICAgICAgXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGNhbXBvIG9mIGNhbXBvcykge1xuICAgICAgICAgICAgICAgICAgICAvLyBVc2EgZWwgbm9tYnJlIGRlbCBjYW1wbyBwYXJhIGNvbnN0cnVpciBlbCBub21icmUgZGUgbGEgZnVuY2lcdTAwRjNuIChwLiBlai4sIFwiZ2V0SWRcIilcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnVuY3Rpb25OYW1lID0gYGdldCR7Y2FtcG8uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBjYW1wby5zbGljZSgxKX1gO1xuICAgICAgICAgICAgICAgICAgICAvLyBWZXJpZmljYSBzaSBleGlzdGUgdW5hIGZ1bmNpXHUwMEYzbiBjb24gZXNlIG5vbWJyZS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzW2Z1bmN0aW9uTmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIExsYW1hIGEgbGEgZnVuY2lcdTAwRjNuIGRlIG1hbmVyYSBkaW5cdTAwRTFtaWNhIHkgYXNpZ25hIGVsIHJlc3VsdGFkbyBhbCBjYW1wbyBjb3JyZXNwb25kaWVudGUgZGUgbGEgbm90YS5cbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGFbY2FtcG9dID0gYXdhaXQgdGhpc1tmdW5jdGlvbk5hbWVdKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBMYSBmdW5jaVx1MDBGM24gJHtmdW5jdGlvbk5hbWV9IG5vIGVzdFx1MDBFMSBkZWZpbmlkYS5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hbmVqYSBlbCBjYXNvIGVuIHF1ZSBsYSBmdW5jaVx1MDBGM24gbm8gZXN0XHUwMEU5IGRlZmluaWRhLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUG9yIGVqZW1wbG8sIHBvZHJcdTAwRURhcyBhc2lnbmFyIHVuIHZhbG9yIHBvciBkZWZlY3RvIGEgbm90YVtjYW1wb10gbyBzaW1wbGVtZW50ZSBjb250aW51YXIuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQXF1XHUwMEVEIGlyXHUwMEVEYSBlbCBjXHUwMEYzZGlnbyBwYXJhIHByb2Nlc2FyIGVsIG9iamV0byBub3RhLCBjb21vIGd1YXJkYXIgZW4gdW4gYXJjaGl2byBkZW50cm8gZGUgJ2ZvbGRlcicuXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJObyBzZSBwdWRvIGNyZWFyIGVsIG9iamV0byBkZSByZWdpc3Ryby5cIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJObyBzZSBwdWRvIGNyZWFyIGVsIG9iamV0byBkZSByZWdpc3Ryby5cIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIHJldHVybiBub3RhOyAvLyBSZXRvcm5hIGVsIG9iamV0byBub3RhIGNvbiB0b2RhcyBsYXMgcHJvcGllZGFkZXMgYWdyZWdhZGFzLlxuICAgIH1cbiAgICBcblxuICAgIGdldFRwKCl7XG4gICAgICAgIFxuICAgICAgICBpZiAoIXRoaXMucGx1Z2luIHx8ICF0aGlzLnBsdWdpbi5hcHAucGx1Z2lucy5lbmFibGVkUGx1Z2lucy5oYXMoJ3RlbXBsYXRlci1vYnNpZGlhbicpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFbCBwbHVnaW4gVGVtcGxhdGVyIG5vIGVzdFx1MDBFMSBoYWJpbGl0YWRvLicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vICBGb3JtYSBkZSBhY2NlZGVyIGFsIG9iamV0byB0cCBub3JtYWwgcXVlIGhlIHVzYWRvIGRlc2RlIERWSlMgY3VhbmRvIGN1cnJlbnQgRnVuY3Rpb25zIGVzdGEgY2FyZ2Fkby5cbiAgICAgICAgLy9jb25zdCB0ZW1wbGF0ZXJQbHVnaW4gPSB0aGlzLmFwcC5wbHVnaW5zLnBsdWdpbnNbJ3RlbXBsYXRlci1vYnNpZGlhbiddO1xuICAgICAgICAvL2NvbnN0IHRwID0gdGVtcGxhdGVyUGx1Z2luLnRlbXBsYXRlci5jdXJyZW50X2Z1bmN0aW9uc19vYmplY3Q7XG4gICAgICAgIC8vIC0+IHZlcnNpb24gcXVlIGZhbGxhIHNpIG5vIGVzdGEgYXJyaWJhIGVsIHBsdWdpbiBwb3JxdWUgaGFjZSBnZXQgZGVsIHBsdWdpbiBkaXJlY3RvLiBjb25zdCB0ZW1wbGF0ZXJQbHVnaW4gPSB0aGlzLmFwcC5wbHVnaW5zLmdldFBsdWdpbigndGVtcGxhdGVyLW9ic2lkaWFuJyk7XG4gICAgICAgIFxuICAgICAgICBsZXQgdHBHZW4gPSB0aGlzLnBsdWdpbi5hcHAucGx1Z2lucy5wbHVnaW5zW1widGVtcGxhdGVyLW9ic2lkaWFuXCJdLnRlbXBsYXRlcjtcbiAgICAgICAgdHBHZW4gPSB0cEdlbi5mdW5jdGlvbnNfZ2VuZXJhdG9yLmludGVybmFsX2Z1bmN0aW9ucy5tb2R1bGVzX2FycmF5O1xuICAgICAgICBsZXQgdHAgPSB7fVxuICAgICAgICAvLyBnZXQgYW4gaW5zdGFuY2Ugb2YgdGhlIGRhdGUgbW9kdWxlXG4gICAgICAgIHRwLnN5c3RlbSA9IHRwR2VuLmZpbmQobSA9PiBtLm5hbWUgPT0gXCJzeXN0ZW1cIik7XG5cbiAgICAgICAgaWYgKCF0cC5zeXN0ZW0pIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk5vIHNlIHB1ZG8gYWNjZWRlciBhbCBvYmpldG8gZGUgZnVuY2lvbmVzIGFjdHVhbGVzIGRlIFRlbXBsYXRlci5cIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc29sZS5sb2coJ3RwIGVuIFlBTUxVcGRhdGVyQVBJIHNlIGhhIGNhcmdhZG8gc2F0aXNmYWN0b3JpYW1lbnRlJyk7XG4gICAgcmV0dXJuIHRwO1xuICAgIH1cblxuICAgIC8vIEVqZW1wbG8gZGUgZnVuY2lcdTAwRjNuIGdldENhbXBvIHNpbXVsYWRhLiBEZWJlcyBkZWZpbmlyIGZ1bmNpb25lcyBzaW1pbGFyZXMgcGFyYSAnaWQnLCAnZmVjaGEnLCBldGMuXG4gICAgYXN5bmMgZ2V0SWQoKSB7XG4gICAgICAgIFxuICAgICAgICBsZXQgbWF4SWQgPSAwO1xuXG4gICAgICAgIC8vIE9idFx1MDBFOW4gdG9kb3MgbG9zIGFyY2hpdm9zIE1hcmtkb3duXG4gICAgICAgIGNvbnN0IGZpbGVzID0gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcbiAgICAgICAgLy8gRmlsdHJhIHBvciBsb3MgYXJjaGl2b3MgZW4gbGEgY2FycGV0YSBkZXNlYWRhXG4gICAgICAgIGNvbnN0IHJlZ2lzdHJvc0V4aXN0ZW50ZXMgPSBmaWxlcy5maWx0ZXIoKGZpbGU6IHsgcGF0aDogc3RyaW5nOyB9KSA9PiBmaWxlLnBhdGguc3RhcnRzV2l0aCh0aGlzLmluZm9TdWJzaXN0ZW1hLmZvbGRlcikpO1xuICAgICAgICAvLyBVc2EgbWV0YWRhdGFDYWNoZSBwYXJhIGJ1c2NhciBsb3MgSURzIGVuIGVsIGZyb250bWF0dGVyXG4gICAgICAgIHJlZ2lzdHJvc0V4aXN0ZW50ZXMuZm9yRWFjaCgoZmlsZTogYW55KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtZXRhZGF0YSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXI7XG4gICAgICAgICAgICBpZiAobWV0YWRhdGEgJiYgbWV0YWRhdGEuaWQgJiYgIWlzTmFOKG1ldGFkYXRhLmlkKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gcGFyc2VJbnQobWV0YWRhdGEuaWQpO1xuICAgICAgICAgICAgICAgIGlmIChpZCA+IG1heElkKSBtYXhJZCA9IGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBFbCBwclx1MDBGM3hpbW8gSUQgZGlzcG9uaWJsZVxuICAgICAgICBjb25zdCBuZXh0SWQgPSBtYXhJZCArIDE7XG4gICAgICAgIHRoaXMubm90YS5pZCA9IG5leHRJZDtcbiAgICAgICAgcmV0dXJuIG5leHRJZDtcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgZ2V0RmVjaGEoKSB7XG4gICAgICAgIC8vIFNpbXVsYWNpXHUwMEYzbiBkZSBvYnRlbmVyIHVuIElEIGRlIG1hbmVyYSBhc1x1MDBFRG5jcm9uYS5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0ZWFyRmVjaGEobmV3IERhdGUoKSk7XG4gICAgfVxuXG4gICAgZm9ybWF0ZWFyRmVjaGEoZmVjaGE6IERhdGUpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBmZWNoYS5nZXRUaW1lem9uZU9mZnNldCgpICogNjAwMDA7XG4gICAgICAgIGNvbnN0IGZlY2hhTG9jYWwgPSBuZXcgRGF0ZShmZWNoYS5nZXRUaW1lKCkgLSBvZmZzZXQpO1xuICAgICAgICBjb25zdCBmZWNoYUZvcm1hdG8gPSBmZWNoYUxvY2FsLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcbiAgICAgICAgY29uc3QgZGlhcyA9IFsnRG9taW5nbycsICdMdW5lcycsICdNYXJ0ZXMnLCAnTWlcdTAwRTlyY29sZXMnLCAnSnVldmVzJywgJ1ZpZXJuZXMnLCAnU1x1MDBFMWJhZG8nXTtcbiAgICAgICAgY29uc3QgZGlhU2VtYW5hID0gZGlhc1tmZWNoYS5nZXREYXkoKV07XG4gICAgICAgIGNvbnN0IGhvcmFGb3JtYXRvID0gZmVjaGEudG9UaW1lU3RyaW5nKCkuc3BsaXQoJyAnKVswXS5zdWJzdHJpbmcoMCwgNSk7XG4gICAgICAgIHJldHVybiBgJHtmZWNoYUZvcm1hdG99ICR7ZGlhU2VtYW5hfSAke2hvcmFGb3JtYXRvfWA7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0U2VjSWQoKXtcblxuICAgIH1cbiAgICBcbiAgICBhc3luYyBnZXRUaXR1bG8oKXtcbiAgICAgICAgbGV0IHByb21wdCA9IHRoaXMudHAuc3lzdGVtLnN0YXRpY19mdW5jdGlvbnMuZ2V0KFwicHJvbXB0XCIpO1xuICAgICAgICBsZXQgdGl0dWxvID0gYXdhaXQgcHJvbXB0KGBUaXR1bG8gZGUgZXN0ZShhKSAke3RoaXMuaW5mb1N1YnNpc3RlbWEubmFtZX1gLCBgJHt0aGlzLmluZm9TdWJzaXN0ZW1hLm5hbWV9IC0gJHt0aGlzLm5vdGEuaWR9YCwgdHJ1ZSlcblx0ICAgIC8vIFZlcmlmaWNhciBzaSBlbCB1c3VhcmlvIHByZXNpb25cdTAwRjMgRXNjLlxuICAgICAgICBpZiAodGl0dWxvID09PSBudWxsKSB7XG4gICAgICAgIG5ldyBOb3RpY2UoXCJDcmVhY2lcdTAwRjNuIGRlIG5vdGEgY2FuY2VsYWRhIHBvciBlbCB1c3VhcmlvLlwiKTtcbiAgICAgICAgcmV0dXJuOyAvLyBUZXJtaW5hIGxhIGVqZWN1Y2lcdTAwRjNuIGRlIGxhIGZ1bmNpXHUwMEYzbiBhcXVcdTAwRUQuXG5cdCAgICB9XG4gICAgICAgIHRoaXMubm90YS50aXR1bG8gPSB0aXR1bG87XG4gICAgICAgIHJldHVybiB0aXR1bG87XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0RGVzY3JpcGNpb24oKXtcbiAgICAgICAgbGV0IHByb21wdCA9IHRoaXMudHAuc3lzdGVtLnN0YXRpY19mdW5jdGlvbnMuZ2V0KFwicHJvbXB0XCIpO1xuICAgICAgICBsZXQgZGVzY3JpcGNpb24gPSBhd2FpdCBwcm9tcHQoXCJcdTAwQkZRdWllcmVzIGFncmVnYXIgdW5hIGRlc2NyaXBjaVx1MDBGM24/XCIsIFwiIFwiICsgYEVzdGEgbm90YSBlcyBzb2JyZSAke3RoaXMubm90YS50aXR1bG99YCwgZmFsc2UsIHRydWUgKVxuXHQgICAgLy8gVmVyaWZpY2FyIHNpIGVsIHVzdWFyaW8gcHJlc2lvblx1MDBGMyBFc2MuXG4gICAgICAgIGlmIChkZXNjcmlwY2lvbiA9PT0gbnVsbCkge1xuICAgICAgICBuZXcgTm90aWNlKFwiQ3JlYWNpXHUwMEYzbiBkZSBub3RhIGNhbmNlbGFkYSBwb3IgZWwgdXN1YXJpby5cIik7XG4gICAgICAgIHJldHVybjsgLy8gVGVybWluYSBsYSBlamVjdWNpXHUwMEYzbiBkZSBsYSBmdW5jaVx1MDBGM24gYXF1XHUwMEVELlxuXHQgICAgfVxuICAgICAgICB0aGlzLm5vdGEuZGVzY3JpcGNpb24gPSBkZXNjcmlwY2lvbjtcbiAgICAgICAgcmV0dXJuIGRlc2NyaXBjaW9uO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEFsaWFzZXMoKXtcbiAgICAgICAgdGhpcy5ub3RhLmFsaWFzZXMgPSBbXTsgICAgICBcbiAgICAgICAgc3dpdGNoKHRoaXMuaW5mb1N1YnNpc3RlbWEudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcIkF4XCI6XG4gICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFsaWFzZXMucHVzaChgJHt0aGlzLm5vdGEudGl0dWxvfWApXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RhLmFsaWFzZXMucHVzaChgJHt0aGlzLmluZm9TdWJzaXN0ZW1hLnR5cGV9IC0gJHt0aGlzLm5vdGEudGl0dWxvfWApXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiQVZcIjpcbiAgICAgICAgICAgIGNhc2UgXCJBSVwiOlxuICAgICAgICAgICAgICAgIC8vIDAgLT4gTm9tYnJlLCAxIC0+IHR5cGUgKyBOb21icmVcbiAgICAgICAgICAgICAgICBicmVhazsgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm90YS5hbGlhc2VzO1xuICAgICAgIFxuICAgIH1cblxuICAgIGFzeW5jIGdldEFzdW50bygpe1xuICAgICAgICBsZXQgc2lBc3VudG8sIG5vbWJyZTsgXG4gICAgICAgIGxldCBhY3Rpdm8gPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcbiAgICAgICAgaWYgKGFjdGl2byAhPSBudWxsKXsgXG4gICAgICAgICAgICBub21icmUgPSBhY3Rpdm8uYmFzZW5hbWU7XG4gICAgICAgICAgICBjb25zdCBub3RhID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGFjdGl2byk7IFxuICAgICAgICAgICAgbGV0IHN1Z2dlc3RlciA9IHRoaXMudHAuc3lzdGVtLnN0YXRpY19mdW5jdGlvbnMuZ2V0KFwic3VnZ2VzdGVyXCIpO1xuICAgICAgICAgICAgc2lBc3VudG8gPSBhd2FpdCBzdWdnZXN0ZXIoW1wiU2lcIixcIk5vXCJdLFt0cnVlLCBmYWxzZV0sIHRydWUsIG5vbWJyZSArIFwiIGVzIG9yaWdlbiBkZSBcIiArIHRoaXMubm90YS50aXR1bG8gKyBcIj9cIilcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHNpQXN1bnRvID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbm9tYnJlID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5ub3RhLmFzdW50byA9IHt9O1xuICAgICAgICAgICAgdGhpcy5ub3RhLmFzdW50by5zaUFzdW50byA9IHNpQXN1bnRvO1xuICAgICAgICAgICAgdGhpcy5ub3RhLmFzdW50by5ub21icmUgPSBub21icmU7ICAgIFxuICAgICAgICByZXR1cm4ge3NpQXN1bnRvLCBub21icmV9XG4gICAgfVxuXG5cbiAgICBhc3luYyBnZXRDbGFzaWZpY2FjaW9uKCl7XG4gICAgICAgIGxldCBjbGFzaWZpY2FjaW9uOiBzdHJpbmcgfCBudWxsLCB0YWdDbGFzaWZpY2FjaW9uOiBzdHJpbmcgfCBudWxsLCBjbGFzaWZpY2FjaW9uQVg6IHsgW3g6IHN0cmluZ106IGFueTsgfSwgdGFnc0NsYXNpZmljYWNpb25BWDogc3RyaW5nIHwgYW55W107XG4gICAgICAgIGxldCBudWV2YUNsYXNpZmljYWNpb24gPSBmYWxzZTtcbiAgICAgICAgY29uc3QgZmlsZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgodGhpcy5wYXRoQ2FtcG9zKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGZyb250bWF0dGVyID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpPy5mcm9udG1hdHRlcjtcbiAgICAgICAgaWYgKGZyb250bWF0dGVyKSB7XG4gICAgICAgICAgICBjbGFzaWZpY2FjaW9uQVggPSBmcm9udG1hdHRlci50aXR1bG9DbGFzaWZpY2FjaW9uQVggfHwgW107XG4gICAgICAgICAgICB0YWdzQ2xhc2lmaWNhY2lvbkFYID0gZnJvbnRtYXR0ZXIudGFnc0NsYXNpZmljYWNpb25BWCB8fCBbXTtcbiAgICAgICAgICAgIGxldCBzdWdnZXN0ZXIgPSB0aGlzLnRwLnN5c3RlbS5zdGF0aWNfZnVuY3Rpb25zLmdldChcInN1Z2dlc3RlclwiKTtcbiAgICAgICAgICAgIHRhZ0NsYXNpZmljYWNpb24gPSBhd2FpdCBzdWdnZXN0ZXIoY2xhc2lmaWNhY2lvbkFYLCB0YWdzQ2xhc2lmaWNhY2lvbkFYLCBmYWxzZSwgXCJcdTAwQkZDbGFzaWZpY2FyXHUwMEVEYXMgZXN0YSBub3RhIGJham8gYWxndW5hIGRlIGxhcyBzaWd1aWVudGVzIGNhdGVnb3JcdTAwRURhcz9cIilcbiAgICAgICAgICAgIC8vIFZlcmlmaWNhciBzaSBlbCB1c3VhcmlvIHByZXNpb25cdTAwRjMgRXNjLiBcbiAgICAgICAgICAgIGlmICh0YWdDbGFzaWZpY2FjaW9uID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIkNyZWFjaVx1MDBGM24gZGUgbm90YSBjYW5jZWxhZGEgcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjsgLy8gVGVybWluYSBsYSBlamVjdWNpXHUwMEYzbiBkZSBsYSBmdW5jaVx1MDBGM24gYXF1XHUwMEVELlxuICAgICAgICAgICAgfSBlbHNlIGlmICh0YWdDbGFzaWZpY2FjaW9uPT1cIk51ZXZvXCIpe1xuICAgICAgICAgICAgICAgIGxldCBwcm9tcHQgPSB0aGlzLnRwLnN5c3RlbS5zdGF0aWNfZnVuY3Rpb25zLmdldChcInByb21wdFwiKTtcbiAgICAgICAgICAgICAgICBjbGFzaWZpY2FjaW9uID0gYXdhaXQgcHJvbXB0KFwiXHUwMEJGQ3VhbCBlcyBlbCBub21icmUgZGUgbGEgbnVldmEgY2xhc2lmaWNhY2lcdTAwRjNuIHF1ZSB2YXMgYSBpbmdyZXNhcj9cIiwgXCJNaUNsYXNpZmljYWNpXHUwMEYzblwiLCB0cnVlKVxuICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhciBzaSBlbCB1c3VhcmlvIHByZXNpb25cdTAwRjMgRXNjLlxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xhc2lmaWNhY2lvbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIkNyZWFjaVx1MDBGM24gZGUgbm90YSBjYW5jZWxhZGEgcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBUZXJtaW5hIGxhIGVqZWN1Y2lcdTAwRjNuIGRlIGxhIGZ1bmNpXHUwMEYzbiBhcXVcdTAwRUQuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRhZ0NsYXNpZmljYWNpb24gPSBhd2FpdCBwcm9tcHQoXCJcdTAwQkZDdWFsIGVzIGVsIHRhZyBxdWUgdXRpbGl6YXJhcyBwYXJhIFwiICsgY2xhc2lmaWNhY2lvbiArIFwiPy4gTm8gdXRpbGljZXMgZXNwYWNpb3MgZW4gbGEgZGVmaW5pY2lcdTAwRjNuIGRlbCB0YWcuXCIsIFwibnVldm9UYWdcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAvLyBWZXJpZmljYXIgc2kgZWwgdXN1YXJpbyBwcmVzaW9uXHUwMEYzIEVzYy5cbiAgICAgICAgICAgICAgICBpZiAodGFnQ2xhc2lmaWNhY2lvbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiQ3JlYWNpXHUwMEYzbiBkZSBub3RhIGNhbmNlbGFkYSBwb3IgZWwgdXN1YXJpby5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gVGVybWluYSBsYSBlamVjdWNpXHUwMEYzbiBkZSBsYSBmdW5jaVx1MDBGM24gYXF1XHUwMEVELlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBudWV2YUNsYXNpZmljYWNpb24gPSB0cnVlO1xuICAgICAgICAgICAgfWVsc2UgaWYodGFnQ2xhc2lmaWNhY2lvbj09XCJOaW5ndW5hXCIpe1xuICAgICAgICAgICAgICAgIHRhZ0NsYXNpZmljYWNpb24gPSBcIlwiXG4gICAgICAgICAgICAgICAgY2xhc2lmaWNhY2lvbiA9IFwiXCJcdFxuICAgICAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBpbmRpY2UgPSB0YWdzQ2xhc2lmaWNhY2lvbkFYLmluZGV4T2YodGFnQ2xhc2lmaWNhY2lvbilcbiAgICAgICAgICAgICAgICBjbGFzaWZpY2FjaW9uID0gY2xhc2lmaWNhY2lvbkFYW2luZGljZV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChudWV2YUNsYXNpZmljYWNpb24pIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgYXBwLmZpbGVNYW5hZ2VyLnByb2Nlc3NGcm9udE1hdHRlcihmaWxlLCAoZnJvbnRtYXR0ZXI6IHsgdGl0dWxvQ2xhc2lmaWNhY2lvbkFYOiBhbnlbXTsgdGFnc0NsYXNpZmljYWNpb25BWDogYW55W107IH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXN1bWllbmRvIHF1ZSAnYWN0c1RlbWFzJyBlcyBlbCBjYW1wbyBhIG1vZGlmaWNhclxuICAgICAgICAgICAgICAgIGxldCBuZXdDbGFzaWZpY2FjaW9uID0gWy4uLmNsYXNpZmljYWNpb25BWCwgY2xhc2lmaWNhY2lvbl1cbiAgICAgICAgICAgICAgICBsZXQgbmV3VGFnQ2xhc2lmaWNhY2lvbiA9IFsuLi50YWdzQ2xhc2lmaWNhY2lvbkFYLCB0YWdDbGFzaWZpY2FjaW9uXVxuICAgICAgICAgICAgICAgIGZyb250bWF0dGVyLnRpdHVsb0NsYXNpZmljYWNpb25BWCA9IG5ld0NsYXNpZmljYWNpb247XG4gICAgICAgICAgICAgICAgZnJvbnRtYXR0ZXIudGFnc0NsYXNpZmljYWNpb25BWCA9IG5ld1RhZ0NsYXNpZmljYWNpb247XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJGcm9udG1hdHRlciBhY3R1YWxpemFkbyBjb24gXHUwMEU5eGl0b1wiKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhbCBhY3R1YWxpemFyIGVsIGZyb250bWF0dGVyXCIsIGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YWdDbGFzaWZpY2FjaW9uICE9IFwiXCIpe1xuICAgICAgICAgICAgdGFnQ2xhc2lmaWNhY2lvbiA9IFwiY2wvXCIgKyB0YWdDbGFzaWZpY2FjaW9uIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ub3RhLmNsYXNpZmljYWNpb25BWCA9IGNsYXNpZmljYWNpb247XG4gICAgICAgICAgICB0aGlzLm5vdGEudGFnQ2xhc2lmaWNhY2lvbkFYID0gdGFnQ2xhc2lmaWNhY2lvbjtcbiAgICAgICAgICAgIHJldHVybiB7Y2xhc2U6IGNsYXNpZmljYWNpb24sIHRhZzogdGFnQ2xhc2lmaWNhY2lvbn07XG4gICAgfVxuICAgIC8vIC0+XG5cbiAgICBhc3luYyBnZXRFc3RhZG8oKXtcbiAgICAgICAgbGV0IHN1Z2dlc3RlciA9IHRoaXMudHAuc3lzdGVtLnN0YXRpY19mdW5jdGlvbnMuZ2V0KFwic3VnZ2VzdGVyXCIpO1xuXHQgICAgbGV0IGNhbXBvID0gYXdhaXQgc3VnZ2VzdGVyKFtcIlx1RDgzRFx1REQzNSAtPiBDb21wbGV0YWRvIC0gSW5mb3JtYWNpXHUwMEYzblwiLCBcIlx1RDgzRFx1REZFMiAtPiBGaW5hbGl6YWRvXCIsXCJcdUQ4M0RcdURGRTEgLT4gRW4gZWplY3VjaVx1MDBGM25cIiwgXCJcdUQ4M0RcdUREMzQgLT4gRGV0ZW5pZG9cIl0sW1wiXHVEODNEXHVERDM1XCIsIFwiXHVEODNEXHVERkUyXCIsXCJcdUQ4M0RcdURGRTFcIiwgXCJcdUQ4M0RcdUREMzRcIl0sIGZhbHNlLCBcIlNlbGVjY2lvbmUgZWwgbnVldm8gZXN0YWRvOlwiKTtcbiAgICAgICAgLy8gVmVyaWZpY2FyIHNpIGVsIHVzdWFyaW8gcHJlc2lvblx1MDBGMyBFc2MuXG4gICAgICAgIGlmIChjYW1wbyA9PT0gbnVsbCkge1xuICAgICAgICBuZXcgTm90aWNlKFwiTW9kaWZpY2FjaVx1MDBGM24gZGUgbm90YSBjYW5jZWxhZGEgcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgICAgICByZXR1cm47IC8vIFRlcm1pbmEgbGEgZWplY3VjaVx1MDBGM24gZGUgbGEgZnVuY2lcdTAwRjNuIGFxdVx1MDBFRC5cblx0ICAgIH1cbiAgICAgICAgdGhpcy5ub3RhLmVzdGFkbyA9IGNhbXBvO1xuICAgICAgICByZXR1cm4gY2FtcG87XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0RmlsZW5hbWUoKXtcbiAgICAgICAgc3dpdGNoKHRoaXMuaW5mb1N1YnNpc3RlbWEudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcIkFWXCI6XG4gICAgICAgICAgICBjYXNlIFwiQUlcIjpcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGEuZmlsZU5hbWUgPSAoYCR7dGhpcy5pbmZvU3Vic2lzdGVtYS5mb2xkZXJ9LyR7dGhpcy5ub3RhLnRpdHVsb30vaW5kZXgke3RoaXMuaW5mb1N1YnNpc3RlbWEudHlwZX1gKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIkF4XCI6XG4gICAgICAgICAgICAgICAgdGhpcy5ub3RhLmZpbGVOYW1lID0gKGAke3RoaXMuaW5mb1N1YnNpc3RlbWEuZm9sZGVyfS8ke3RoaXMuaW5mb1N1YnNpc3RlbWEudHlwZX0gLSAke3RoaXMubm90YS5pZH1gKVxuICAgICAgICAgICAgICAgIGJyZWFrOyAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ub3RhLmZpbGVOYW1lO1xuICAgIH1cblxuICB9XG4gICIsICIvL2ltcG9ydCB7dXRpbHNBUEl9IGZyb20gJy4vdXRpbHNBUEknXG5cbmltcG9ydCB7IE5vdGljZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG5leHBvcnQgY2xhc3MgWUFNTFVwZGF0ZXJBUEkge1xuICAgIC8vcHJpdmF0ZSB1dGlsc0FwaTogdXRpbHNBUEk7XG4gICAgcHJpdmF0ZSBwbHVnaW46IFBsdWdpbjtcbiAgICBwcml2YXRlIGluZm9TdWJzaXN0ZW1hOiBvYmplY3Q7IC8vIEFzdW1pZW5kbyBxdWUgZXMgdW4gc3RyaW5nXG4gICAgcHJpdmF0ZSB0cDogb2JqZWN0O1xuICAgIHByaXZhdGUgbm90YTogb2JqZWN0O1xuICAgIHByaXZhdGUgcGF0aENhbXBvczogc3RyaW5nOyBcbiAgICBpbmZvTm90YToge307XG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IFBsdWdpbikge1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgICAgLy8gSW5pY2lhbGl6YSBmb2xkZXIgZSBpbmRpY2UgY29uIHZhbG9yZXMgcHJlZGV0ZXJtaW5hZG9zIG8gbFx1MDBGM2dpY2EgZXNwZWNcdTAwRURmaWNhLlxuICAgICAgICB0aGlzLmluZm9Ob3RhID0ge307XG4gICAgICAgIHRoaXMubm90YSA9IHt9O1xuICAgICAgICB0aGlzLnRwID0gdGhpcy5nZXRUcCgpO1xuICAgICAgICB0aGlzLnBhdGhDYW1wb3MgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5maWxlX2NhbXBvc0NlbnRyYWwgKyBcIi5tZFwiO1xuICAgIH1cbiAgICBcblxuICAgIGFzeW5jIGFjdHVhbGl6YXJOb3RhKGluZm9Ob3RhOiBhbnksIGNhbXBvczogYW55KSB7XG4gICAgICAgIFxuICAgICAgICBsZXQgbm90YSA9IHt9OyAvLyBJbmljaWFsaXphIGVsIG9iamV0byBub3RhLlxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuaW5mb05vdGEsIGluZm9Ob3RhKTsgXG4gICAgICAgIFxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjYW1wbyBvZiBjYW1wb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVXNhIGVsIG5vbWJyZSBkZWwgY2FtcG8gcGFyYSBjb25zdHJ1aXIgZWwgbm9tYnJlIGRlIGxhIGZ1bmNpXHUwMEYzbiAocC4gZWouLCBcImdldElkXCIpXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZ1bmN0aW9uTmFtZSA9IGBnZXQke2NhbXBvLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgY2FtcG8uc2xpY2UoMSl9YDtcbiAgICAgICAgICAgICAgICAgICAgLy8gVmVyaWZpY2Egc2kgZXhpc3RlIHVuYSBmdW5jaVx1MDBGM24gY29uIGVzZSBub21icmUuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpc1tmdW5jdGlvbk5hbWVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBMbGFtYSBhIGxhIGZ1bmNpXHUwMEYzbiBkZSBtYW5lcmEgZGluXHUwMEUxbWljYSB5IGFzaWduYSBlbCByZXN1bHRhZG8gYWwgY2FtcG8gY29ycmVzcG9uZGllbnRlIGRlIGxhIG5vdGEuXG4gICAgICAgICAgICAgICAgICAgICAgICBub3RhW2NhbXBvXSA9IGF3YWl0IHRoaXNbZnVuY3Rpb25OYW1lXSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgTGEgZnVuY2lcdTAwRjNuICR7ZnVuY3Rpb25OYW1lfSBubyBlc3RcdTAwRTEgZGVmaW5pZGEuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNYW5lamEgZWwgY2FzbyBlbiBxdWUgbGEgZnVuY2lcdTAwRjNuIG5vIGVzdFx1MDBFOSBkZWZpbmlkYS5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBvciBlamVtcGxvLCBwb2RyXHUwMEVEYXMgYXNpZ25hciB1biB2YWxvciBwb3IgZGVmZWN0byBhIG5vdGFbY2FtcG9dIG8gc2ltcGxlbWVudGUgY29udGludWFyLlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEFjdHVhbGl6YXIgbGEgbm90YVxuICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhub3RhKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEVqZWN1dGEgdHUgY1x1MDBGM2RpZ28gYXF1XHUwMEVEIHNpIGVsIG9iamV0byBgbm90YWAgdGllbmUgbVx1MDBFMXMgZGUgdW5hIHByb3BpZWRhZFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZVlBTUxGaWVsZHMobm90YSwgaW5mb05vdGEuZmlsZS5wYXRoKVxuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAvL05vIHNlIGVuY29udHJhcm9uIGNhbXBvcyBwYXJhIG1vZGlmaWNhclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBBcXVcdTAwRUQgaXJcdTAwRURhIGVsIGNcdTAwRjNkaWdvIHBhcmEgcHJvY2VzYXIgZWwgb2JqZXRvIG5vdGEsIGNvbW8gZ3VhcmRhciBlbiB1biBhcmNoaXZvIGRlbnRybyBkZSAnZm9sZGVyJy5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIk5vIHNlIHB1ZG8gY3JlYXIgZWwgb2JqZXRvIGRlIHJlZ2lzdHJvLlwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIk5vIHNlIHB1ZG8gY3JlYXIgZWwgb2JqZXRvIGRlIHJlZ2lzdHJvLlwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vdGE7IC8vIFJldG9ybmEgZWwgb2JqZXRvIG5vdGEgY29uIHRvZGFzIGxhcyBwcm9waWVkYWRlcyBhZ3JlZ2FkYXMuXG4gICAgfVxuICAgIFxuXG4gICAgYXN5bmMgdXBkYXRlWUFNTEZpZWxkcyhub3RhLCBydXRhKSB7XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZmlsZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgocnV0YSk7XG4gICAgICAgICAgICBhd2FpdCBhcHAuZmlsZU1hbmFnZXIucHJvY2Vzc0Zyb250TWF0dGVyKGZpbGUsIGZyb250bWF0dGVyID0+IHtcbiAgICAgICAgICAgICAgICAvLyBJdGVyYXIgc29icmUgY2FkYSBwcm9waWVkYWQgZGVsIG9iamV0byAnbm90YSdcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNhbXBvIGluIG5vdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChmcm9udG1hdHRlci5oYXNPd25Qcm9wZXJ0eShjYW1wbykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFjdHVhbGl6YXIgZWwgY2FtcG8gZW4gZWwgZnJvbnRtYXR0ZXIgY29uIGVsIHZhbG9yIGNvcnJlc3BvbmRpZW50ZVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9udG1hdHRlcltjYW1wb10gPSBub3RhW2NhbXBvXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJGcm9udG1hdHRlciBhY3R1YWxpemFkbyBjb24gXHUwMEU5eGl0b1wiKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWwgYWN0dWFsaXphciBlbCBmcm9udG1hdHRlclwiLCBlcnIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuXG4gICAgZ2V0VHAoKXtcbiAgICAgICAgXG4gICAgICAgIGlmICghdGhpcy5wbHVnaW4gfHwgIXRoaXMucGx1Z2luLmFwcC5wbHVnaW5zLmVuYWJsZWRQbHVnaW5zLmhhcygndGVtcGxhdGVyLW9ic2lkaWFuJykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VsIHBsdWdpbiBUZW1wbGF0ZXIgbm8gZXN0XHUwMEUxIGhhYmlsaXRhZG8uJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gIEZvcm1hIGRlIGFjY2VkZXIgYWwgb2JqZXRvIHRwIG5vcm1hbCBxdWUgaGUgdXNhZG8gZGVzZGUgRFZKUyBjdWFuZG8gY3VycmVudCBGdW5jdGlvbnMgZXN0YSBjYXJnYWRvLlxuICAgICAgICAvL2NvbnN0IHRlbXBsYXRlclBsdWdpbiA9IHRoaXMuYXBwLnBsdWdpbnMucGx1Z2luc1sndGVtcGxhdGVyLW9ic2lkaWFuJ107XG4gICAgICAgIC8vY29uc3QgdHAgPSB0ZW1wbGF0ZXJQbHVnaW4udGVtcGxhdGVyLmN1cnJlbnRfZnVuY3Rpb25zX29iamVjdDtcbiAgICAgICAgLy8gLT4gdmVyc2lvbiBxdWUgZmFsbGEgc2kgbm8gZXN0YSBhcnJpYmEgZWwgcGx1Z2luIHBvcnF1ZSBoYWNlIGdldCBkZWwgcGx1Z2luIGRpcmVjdG8uIGNvbnN0IHRlbXBsYXRlclBsdWdpbiA9IHRoaXMuYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKCd0ZW1wbGF0ZXItb2JzaWRpYW4nKTtcbiAgICAgICAgXG4gICAgICAgIGxldCB0cEdlbiA9IHRoaXMucGx1Z2luLmFwcC5wbHVnaW5zLnBsdWdpbnNbXCJ0ZW1wbGF0ZXItb2JzaWRpYW5cIl0udGVtcGxhdGVyO1xuICAgICAgICB0cEdlbiA9IHRwR2VuLmZ1bmN0aW9uc19nZW5lcmF0b3IuaW50ZXJuYWxfZnVuY3Rpb25zLm1vZHVsZXNfYXJyYXk7XG4gICAgICAgIGxldCB0cCA9IHt9XG4gICAgICAgIC8vIGdldCBhbiBpbnN0YW5jZSBvZiB0aGUgZGF0ZSBtb2R1bGVcbiAgICAgICAgdHAuc3lzdGVtID0gdHBHZW4uZmluZChtID0+IG0ubmFtZSA9PSBcInN5c3RlbVwiKTtcblxuICAgICAgICBpZiAoIXRwLnN5c3RlbSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTm8gc2UgcHVkbyBhY2NlZGVyIGFsIG9iamV0byBkZSBmdW5jaW9uZXMgYWN0dWFsZXMgZGUgVGVtcGxhdGVyLlwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZygndHAgZW4gWUFNTFVwZGF0ZXJBUEkgc2UgaGEgY2FyZ2FkbyBzYXRpc2ZhY3RvcmlhbWVudGUnKTtcbiAgICByZXR1cm4gdHA7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0RmVjaGEoKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRlYXJGZWNoYShuZXcgRGF0ZSgpKTtcbiAgICB9XG5cbiAgICBmb3JtYXRlYXJGZWNoYShmZWNoYTogRGF0ZSk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGZlY2hhLmdldFRpbWV6b25lT2Zmc2V0KCkgKiA2MDAwMDtcbiAgICAgICAgY29uc3QgZmVjaGFMb2NhbCA9IG5ldyBEYXRlKGZlY2hhLmdldFRpbWUoKSAtIG9mZnNldCk7XG4gICAgICAgIGNvbnN0IGZlY2hhRm9ybWF0byA9IGZlY2hhTG9jYWwudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdO1xuICAgICAgICBjb25zdCBkaWFzID0gWydEb21pbmdvJywgJ0x1bmVzJywgJ01hcnRlcycsICdNaVx1MDBFOXJjb2xlcycsICdKdWV2ZXMnLCAnVmllcm5lcycsICdTXHUwMEUxYmFkbyddO1xuICAgICAgICBjb25zdCBkaWFTZW1hbmEgPSBkaWFzW2ZlY2hhLmdldERheSgpXTtcbiAgICAgICAgY29uc3QgaG9yYUZvcm1hdG8gPSBmZWNoYS50b1RpbWVTdHJpbmcoKS5zcGxpdCgnICcpWzBdLnN1YnN0cmluZygwLCA1KTtcbiAgICAgICAgcmV0dXJuIGAke2ZlY2hhRm9ybWF0b30gJHtkaWFTZW1hbmF9ICR7aG9yYUZvcm1hdG99YDtcbiAgICB9XG5cblxuICAgIGFzeW5jIGdldEhvcmFGaW5hbCgpe1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRlYXJGZWNoYShuZXcgRGF0ZSgpKTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRUaWVtcG9UcmFiYWphZG8oKXtcbiAgICAgICAgZGVidWdnZXJcbiAgICAgICAgbGV0IGhvcmFJbmljaW9TdHIgPSB0aGlzLmluZm9Ob3RhLmhvcmFJbmljaW87XG4gICAgICAgICAgICAvLyBTdXBvbmllbmRvIHF1ZSBlbCBmb3JtYXRvIGVzIFwiWVlZWS1NTS1ERCBkZGRkIEhIOm1tXCIgeSBxdWllcmVzIGNvbnZlcnRpcmxvIGEgdW4gZm9ybWF0byByZWNvbm9jaWRvIHBvciBEYXRlXG4gICAgICAgIC8vIFByaW1lcm8sIGVsaW1pbmEgbGEgcGFydGUgZGVsIGRcdTAwRURhIGRlIGxhIHNlbWFuYSwgeWEgcXVlIERhdGUoKSBubyBsYSBuZWNlc2l0YVxuICAgICAgICBsZXQgW2ZlY2hhLCAsIGhvcmFdID0gaG9yYUluaWNpb1N0ci5zcGxpdCgnICcpO1xuICAgICAgICBsZXQgZmVjaGFIb3JhSVNPID0gYCR7ZmVjaGF9VCR7aG9yYX1gO1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXIgb2JqZXRvcyBEYXRlXG4gICAgICAgIGxldCBob3JhSW5pY2lvID0gbmV3IERhdGUoZmVjaGFIb3JhSVNPKTtcbiAgICAgICAgbGV0IGFob3JhID0gbmV3IERhdGUoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENhbGN1bGFyIGxhIGRpZmVyZW5jaWEgZW4gbWlsaXNlZ3VuZG9zXG4gICAgICAgIGxldCBkaWZlcmVuY2lhRW5NaWxpc2VndW5kb3MgPSBhaG9yYSAtIGhvcmFJbmljaW87XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZGlmZXJlbmNpYUVuTWlsaXNlZ3VuZG9zO1xuICAgIH1cblxuXG4gICAgYXN5bmMgZ2V0U2VjSWQoKXtcblxuICAgIH1cbiAgICBcbiAgICBhc3luYyBnZXRUaXR1bG8oKXtcbiAgICAgICAgbGV0IHRpdHVsbyA9IGF3YWl0IHRoaXMudHAuc3lzdGVtLnByb21wdChgVGl0dWxvIGRlIGVzdGUoYSkgJHt0aGlzLmluZm9TdWJzaXN0ZW1hLm5hbWV9YCwgYCR7dGhpcy5pbmZvU3Vic2lzdGVtYS5uYW1lfSAtICR7dGhpcy5ub3RhLmlkfWAsIHRydWUpXG5cdCAgICAvLyBWZXJpZmljYXIgc2kgZWwgdXN1YXJpbyBwcmVzaW9uXHUwMEYzIEVzYy5cbiAgICAgICAgaWYgKHRpdHVsbyA9PT0gbnVsbCkge1xuICAgICAgICBuZXcgTm90aWNlKFwiQ3JlYWNpXHUwMEYzbiBkZSBub3RhIGNhbmNlbGFkYSBwb3IgZWwgdXN1YXJpby5cIik7XG4gICAgICAgIHJldHVybjsgLy8gVGVybWluYSBsYSBlamVjdWNpXHUwMEYzbiBkZSBsYSBmdW5jaVx1MDBGM24gYXF1XHUwMEVELlxuXHQgICAgfVxuICAgICAgICB0aGlzLm5vdGEudGl0dWxvID0gdGl0dWxvO1xuICAgICAgICByZXR1cm4gdGl0dWxvO1xuICAgIH1cblxuICAgIGFzeW5jIGdldERlc2NyaXBjaW9uKCl7XG4gICAgICAgIGxldCBkZXNjcmlwY2lvbiA9IGF3YWl0IHRoaXMudHAuc3lzdGVtLnByb21wdChcIlx1MDBCRlF1aWVyZXMgYWdyZWdhciB1bmEgZGVzY3JpcGNpXHUwMEYzbj9cIiwgXCIgXCIgKyBgRXN0YSBub3RhIGVzIHNvYnJlICR7dGhpcy5ub3RhLnRpdHVsb31gLCBmYWxzZSwgdHJ1ZSApXG5cdCAgICAvLyBWZXJpZmljYXIgc2kgZWwgdXN1YXJpbyBwcmVzaW9uXHUwMEYzIEVzYy5cbiAgICAgICAgaWYgKGRlc2NyaXBjaW9uID09PSBudWxsKSB7XG4gICAgICAgIG5ldyBOb3RpY2UoXCJDcmVhY2lcdTAwRjNuIGRlIG5vdGEgY2FuY2VsYWRhIHBvciBlbCB1c3VhcmlvLlwiKTtcbiAgICAgICAgcmV0dXJuOyAvLyBUZXJtaW5hIGxhIGVqZWN1Y2lcdTAwRjNuIGRlIGxhIGZ1bmNpXHUwMEYzbiBhcXVcdTAwRUQuXG5cdCAgICB9XG4gICAgICAgIHRoaXMubm90YS5kZXNjcmlwY2lvbiA9IGRlc2NyaXBjaW9uO1xuICAgICAgICByZXR1cm4gZGVzY3JpcGNpb247XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QWxpYXNlcygpe1xuICAgICAgICB0aGlzLm5vdGEuYWxpYXNlcyA9IFtdOyAgICAgIFxuICAgICAgICBzd2l0Y2godGhpcy5pbmZvU3Vic2lzdGVtYS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiQXhcIjpcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYWxpYXNlcy5wdXNoKGAke3RoaXMubm90YS50aXR1bG99YClcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGEuYWxpYXNlcy5wdXNoKGAke3RoaXMuaW5mb1N1YnNpc3RlbWEudHlwZX0gLSAke3RoaXMubm90YS50aXR1bG99YClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJBVlwiOlxuICAgICAgICAgICAgY2FzZSBcIkFJXCI6XG4gICAgICAgICAgICAgICAgLy8gMCAtPiBOb21icmUsIDEgLT4gdHlwZSArIE5vbWJyZVxuICAgICAgICAgICAgICAgIGJyZWFrOyAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ub3RhLmFsaWFzZXM7XG4gICAgICAgXG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QXN1bnRvKCl7XG4gICAgICAgIGxldCBzaUFzdW50bywgbm9tYnJlOyBcbiAgICAgICAgbGV0IGFjdGl2byA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICBpZiAoYWN0aXZvICE9IG51bGwpeyBcbiAgICAgICAgICAgIG5vbWJyZSA9IGFjdGl2by5iYXNlbmFtZTtcbiAgICAgICAgICAgIGNvbnN0IG5vdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoYWN0aXZvKTsgXG4gICAgICAgICAgICBzaUFzdW50byA9IGF3YWl0IHRoaXMudHAuc3lzdGVtLnN1Z2dlc3RlcihbXCJTaVwiLFwiTm9cIl0sW3RydWUsIGZhbHNlXSwgdHJ1ZSwgbm9tYnJlICsgXCIgZXMgb3JpZ2VuIGRlIFwiICsgdGhpcy5ub3RhLnRpdHVsbyArIFwiP1wiKVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgc2lBc3VudG8gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBub21icmUgPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLm5vdGEuYXN1bnRvID0ge307XG4gICAgICAgICAgICB0aGlzLm5vdGEuYXN1bnRvLnNpQXN1bnRvID0gc2lBc3VudG87XG4gICAgICAgICAgICB0aGlzLm5vdGEuYXN1bnRvLm5vbWJyZSA9IG5vbWJyZTsgICAgXG4gICAgICAgIHJldHVybiB7c2lBc3VudG8sIG5vbWJyZX1cbiAgICB9XG5cblxuICAgIGFzeW5jIGdldENsYXNpZmljYWNpb24oKXtcbiAgICAgICAgbGV0IGNsYXNpZmljYWNpb24sIHRhZ0NsYXNpZmljYWNpb24sIGNsYXNpZmljYWNpb25BWCwgdGFnc0NsYXNpZmljYWNpb25BWDtcbiAgICAgICAgbGV0IG51ZXZhQ2xhc2lmaWNhY2lvbiA9IGZhbHNlO1xuICAgICAgICBjb25zdCBmaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aCh0aGlzLnBhdGhDYW1wb3MpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZnJvbnRtYXR0ZXIgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk/LmZyb250bWF0dGVyO1xuICAgICAgICBpZiAoZnJvbnRtYXR0ZXIpIHtcbiAgICAgICAgICAgIGNsYXNpZmljYWNpb25BWCA9IGZyb250bWF0dGVyLnRpdHVsb0NsYXNpZmljYWNpb25BWCB8fCBbXTtcbiAgICAgICAgICAgIHRhZ3NDbGFzaWZpY2FjaW9uQVggPSBmcm9udG1hdHRlci50YWdzQ2xhc2lmaWNhY2lvbkFYIHx8IFtdO1xuICAgICAgICAgICAgdGFnQ2xhc2lmaWNhY2lvbiA9IGF3YWl0IHRoaXMudHAuc3lzdGVtLnN1Z2dlc3RlcihjbGFzaWZpY2FjaW9uQVgsIHRhZ3NDbGFzaWZpY2FjaW9uQVgsIGZhbHNlLCBcIlx1MDBCRkNsYXNpZmljYXJcdTAwRURhcyBlc3RhIG5vdGEgYmFqbyBhbGd1bmEgZGUgbGFzIHNpZ3VpZW50ZXMgY2F0ZWdvclx1MDBFRGFzP1wiKVxuICAgICAgICAgICAgLy8gVmVyaWZpY2FyIHNpIGVsIHVzdWFyaW8gcHJlc2lvblx1MDBGMyBFc2MuIFxuICAgICAgICAgICAgaWYgKHRhZ0NsYXNpZmljYWNpb24gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiQ3JlYWNpXHUwMEYzbiBkZSBub3RhIGNhbmNlbGFkYSBwb3IgZWwgdXN1YXJpby5cIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBUZXJtaW5hIGxhIGVqZWN1Y2lcdTAwRjNuIGRlIGxhIGZ1bmNpXHUwMEYzbiBhcXVcdTAwRUQuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRhZ0NsYXNpZmljYWNpb249PVwiTnVldm9cIil7XG4gICAgICAgICAgICAgICAgY2xhc2lmaWNhY2lvbiA9IGF3YWl0IHRoaXMudHAuc3lzdGVtLnByb21wdChcIlx1MDBCRkN1YWwgZXMgZWwgbm9tYnJlIGRlIGxhIG51ZXZhIGNsYXNpZmljYWNpXHUwMEYzbiBxdWUgdmFzIGEgaW5ncmVzYXI/XCIsIFwiTWlDbGFzaWZpY2FjaVx1MDBGM25cIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAvLyBWZXJpZmljYXIgc2kgZWwgdXN1YXJpbyBwcmVzaW9uXHUwMEYzIEVzYy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNpZmljYWNpb24gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJDcmVhY2lcdTAwRjNuIGRlIG5vdGEgY2FuY2VsYWRhIHBvciBlbCB1c3VhcmlvLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gVGVybWluYSBsYSBlamVjdWNpXHUwMEYzbiBkZSBsYSBmdW5jaVx1MDBGM24gYXF1XHUwMEVELlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGFnQ2xhc2lmaWNhY2lvbiA9IGF3YWl0IHRoaXMudHAuc3lzdGVtLnByb21wdChcIlx1MDBCRkN1YWwgZXMgZWwgdGFnIHF1ZSB1dGlsaXphcmFzIHBhcmEgXCIgKyBjbGFzaWZpY2FjaW9uICsgXCI/LiBObyB1dGlsaWNlcyBlc3BhY2lvcyBlbiBsYSBkZWZpbmljaVx1MDBGM24gZGVsIHRhZy5cIiwgXCJudWV2b1RhZ1wiLCB0cnVlKVxuICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhciBzaSBlbCB1c3VhcmlvIHByZXNpb25cdTAwRjMgRXNjLlxuICAgICAgICAgICAgICAgIGlmICh0YWdDbGFzaWZpY2FjaW9uID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJDcmVhY2lcdTAwRjNuIGRlIG5vdGEgY2FuY2VsYWRhIHBvciBlbCB1c3VhcmlvLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBUZXJtaW5hIGxhIGVqZWN1Y2lcdTAwRjNuIGRlIGxhIGZ1bmNpXHUwMEYzbiBhcXVcdTAwRUQuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG51ZXZhQ2xhc2lmaWNhY2lvbiA9IHRydWU7XG4gICAgICAgICAgICB9ZWxzZSBpZih0YWdDbGFzaWZpY2FjaW9uPT1cIk5pbmd1bmFcIil7XG4gICAgICAgICAgICAgICAgdGFnQ2xhc2lmaWNhY2lvbiA9IFwiXCJcbiAgICAgICAgICAgICAgICBjbGFzaWZpY2FjaW9uID0gXCJcIlx0XG4gICAgICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGluZGljZSA9IHRhZ3NDbGFzaWZpY2FjaW9uQVguaW5kZXhPZih0YWdDbGFzaWZpY2FjaW9uKVxuICAgICAgICAgICAgICAgIGNsYXNpZmljYWNpb24gPSBjbGFzaWZpY2FjaW9uQVhbaW5kaWNlXVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG51ZXZhQ2xhc2lmaWNhY2lvbikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCBhcHAuZmlsZU1hbmFnZXIucHJvY2Vzc0Zyb250TWF0dGVyKGZpbGUsIGZyb250bWF0dGVyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXN1bWllbmRvIHF1ZSAnYWN0c1RlbWFzJyBlcyBlbCBjYW1wbyBhIG1vZGlmaWNhclxuICAgICAgICAgICAgICAgIGxldCBuZXdDbGFzaWZpY2FjaW9uID0gWy4uLmNsYXNpZmljYWNpb25BWCwgY2xhc2lmaWNhY2lvbl1cbiAgICAgICAgICAgICAgICBsZXQgbmV3VGFnQ2xhc2lmaWNhY2lvbiA9IFsuLi50YWdzQ2xhc2lmaWNhY2lvbkFYLCB0YWdDbGFzaWZpY2FjaW9uXVxuICAgICAgICAgICAgICAgIGZyb250bWF0dGVyLnRpdHVsb0NsYXNpZmljYWNpb25BWCA9IG5ld0NsYXNpZmljYWNpb247XG4gICAgICAgICAgICAgICAgZnJvbnRtYXR0ZXIudGFnc0NsYXNpZmljYWNpb25BWCA9IG5ld1RhZ0NsYXNpZmljYWNpb247XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJGcm9udG1hdHRlciBhY3R1YWxpemFkbyBjb24gXHUwMEU5eGl0b1wiKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhbCBhY3R1YWxpemFyIGVsIGZyb250bWF0dGVyXCIsIGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YWdDbGFzaWZpY2FjaW9uICE9IFwiXCIpe1xuICAgICAgICAgICAgdGFnQ2xhc2lmaWNhY2lvbiA9IFwiY2wvXCIgKyB0YWdDbGFzaWZpY2FjaW9uIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ub3RhLmNsYXNpZmljYWNpb25BWCA9IGNsYXNpZmljYWNpb247XG4gICAgICAgICAgICB0aGlzLm5vdGEudGFnQ2xhc2lmaWNhY2lvbkFYID0gdGFnQ2xhc2lmaWNhY2lvbjtcbiAgICAgICAgICAgIHJldHVybiB7Y2xhc2U6IGNsYXNpZmljYWNpb24sIHRhZzogdGFnQ2xhc2lmaWNhY2lvbn07XG4gICAgfVxuICAgIC8vIC0+XG5cbiAgICBhc3luYyBnZXRFc3RhZG8oKXtcbiAgICAgICAgbGV0IHN1Z2dlc3RlciA9IHRoaXMudHAuc3lzdGVtLnN0YXRpY19mdW5jdGlvbnMuZ2V0KFwic3VnZ2VzdGVyXCIpO1xuXHQgICAgbGV0IGNhbXBvID0gYXdhaXQgc3VnZ2VzdGVyKFtcIlx1RDgzRFx1REQzNSAtPiBDb21wbGV0YWRvIC0gSW5mb3JtYWNpXHUwMEYzblwiLCBcIlx1RDgzRFx1REZFMiAtPiBGaW5hbGl6YWRvXCIsXCJcdUQ4M0RcdURGRTEgLT4gRW4gZWplY3VjaVx1MDBGM25cIiwgXCJcdUQ4M0RcdUREMzQgLT4gRGV0ZW5pZG9cIl0sW1wiXHVEODNEXHVERDM1XCIsIFwiXHVEODNEXHVERkUyXCIsXCJcdUQ4M0RcdURGRTFcIiwgXCJcdUQ4M0RcdUREMzRcIl0sIGZhbHNlLCBcIlNlbGVjY2lvbmUgZWwgbnVldm8gZXN0YWRvOlwiKTtcbiAgICAgICAgLy8gVmVyaWZpY2FyIHNpIGVsIHVzdWFyaW8gcHJlc2lvblx1MDBGMyBFc2MuXG4gICAgICAgIGlmIChjYW1wbyA9PT0gbnVsbCkge1xuICAgICAgICBuZXcgTm90aWNlKFwiTW9kaWZpY2FjaVx1MDBGM24gZGUgbm90YSBjYW5jZWxhZGEgcG9yIGVsIHVzdWFyaW8uXCIpO1xuICAgICAgICByZXR1cm47IC8vIFRlcm1pbmEgbGEgZWplY3VjaVx1MDBGM24gZGUgbGEgZnVuY2lcdTAwRjNuIGFxdVx1MDBFRC5cblx0ICAgIH1cbiAgICAgICAgdGhpcy5ub3RhLmVzdGFkbyA9IGNhbXBvO1xuICAgICAgICByZXR1cm4gY2FtcG87XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0RmlsZW5hbWUoKXtcbiAgICAgICAgc3dpdGNoKHRoaXMuaW5mb1N1YnNpc3RlbWEudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcIkFWXCI6XG4gICAgICAgICAgICBjYXNlIFwiQUlcIjpcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGEuZmlsZU5hbWUgPSAoYCR7dGhpcy5pbmZvU3Vic2lzdGVtYS5mb2xkZXJ9LyR7dGhpcy5ub3RhLnRpdHVsb30vaW5kZXgke3RoaXMuaW5mb1N1YnNpc3RlbWEudHlwZX1gKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIkF4XCI6XG4gICAgICAgICAgICAgICAgdGhpcy5ub3RhLmZpbGVOYW1lID0gKGAke3RoaXMuaW5mb1N1YnNpc3RlbWEuZm9sZGVyfS8ke3RoaXMuaW5mb1N1YnNpc3RlbWEudHlwZX0gLSAke3RoaXMubm90YS5pZH1gKVxuICAgICAgICAgICAgICAgIGJyZWFrOyAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ub3RhLmZpbGVOYW1lO1xuICAgIH1cblxuICAgXG5cbiAgfVxuICAiXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUUsSUFBQUEsb0JBQXVCOzs7QUNBekIsc0JBQWtEO0FBRTNDLElBQU0sd0JBQU4sY0FBb0MsaUNBQWlCO0FBQUEsRUFHeEQsWUFBWSxRQUFnQjtBQUN4QixV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USxJQUFJLHdDQUFxQztBQUNqRCxXQUFPLFFBQVEsUUFBUTtBQUFBLEVBQzNCO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFFbkIsU0FBSyxXQUFXLE9BQU8sT0FBTyxDQUFDLEdBQUcsa0JBQWtCLE1BQU0sS0FBSyxTQUFTLENBQUM7QUFBQSxFQUUzRTtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBRW5CLFVBQU0sS0FBSyxTQUFTLEtBQUssUUFBUTtBQUdqQyxTQUFLLG1CQUFtQjtBQUFBLEVBRTFCO0FBQ0o7IiwKICAibmFtZXMiOiBbImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiYXBwIiwgImFwcCIsICJyZWdpc3RlclJpYmJvbk1lbnUiLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJhcHAiLCAicmVnaXN0ZXJDb21tYW5kcyIsICJkZWFjdGl2YXRlQ29tbWFuZHMiLCAicmVnaXN0ZXJSaWJib25NZW51IiwgInJlZ2lzdGVyQ29tbWFuZHMiLCAiZGVhY3RpdmF0ZUNvbW1hbmRzIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImFwcCIsICJtZW51T3RybyIsICJ0aXBvIiwgImFwcCIsICJhbGlhcyIsICJhcHAiLCAiZnJvbnRtYXR0ZXIiLCAiaW1wb3J0X29ic2lkaWFuIiwgImZyb250bWF0dGVyIl0KfQo=
